"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9671],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),c=p(n),m=o,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||i;return n?a.createElement(h,l(l({ref:t},d),{},{components:n})):a.createElement(h,l({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=c;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:o,l[1]=r;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9881:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return r},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return c}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),l=["components"],r={sidebar_position:1,title:"Intro"},s=void 0,p={unversionedId:"intro",id:"intro",title:"Intro",description:"lint unit tests db tests build",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/go-cf-api/docs/intro",editUrl:"https://github.com/cloudfoundry/go-cf-api/edit/main/docs/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Intro"},sidebar:"tutorialSidebar",next:{title:"Load Tests",permalink:"/go-cf-api/docs/loadtests"}},d=[{value:"Deploying with cf-deployment",id:"deploying-with-cf-deployment",children:[{value:"Links",id:"links",children:[],level:3}],level:2},{value:"Development Setup",id:"development-setup",children:[{value:"Requirements",id:"requirements",children:[{value:"Optional",id:"optional",children:[],level:4}],level:3}],level:2},{value:"Prepare dev database",id:"prepare-dev-database",children:[{value:"Postgres",id:"postgres",children:[],level:3},{value:"MySQL/MariaDB",id:"mysqlmariadb",children:[],level:3},{value:"Useful database operations",id:"useful-database-operations",children:[],level:3}],level:2},{value:"Running commands",id:"running-commands",children:[],level:2},{value:"Starting the go-cf-api",id:"starting-the-go-cf-api",children:[],level:2},{value:"Building the go-cf-api binaries",id:"building-the-go-cf-api-binaries",children:[],level:2},{value:"List of API endpoints",id:"list-of-api-endpoints",children:[{value:"go-cf-api Specific Endpoints",id:"go-cf-api-specific-endpoints",children:[],level:4},{value:"V3 API",id:"v3-api",children:[],level:4}],level:2},{value:"Querying locally",id:"querying-locally",children:[],level:2},{value:"Documentation",id:"documentation",children:[],level:2},{value:"Development tasks",id:"development-tasks",children:[{value:"Generating DB models",id:"generating-db-models",children:[],level:3},{value:"Running the linter",id:"running-the-linter",children:[],level:3},{value:"Running tests",id:"running-tests",children:[],level:3}],level:2}],u={toc:d};function c(e){var t=e.components,n=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://github.com/cloudfoundry/go-cf-api/workflows/Lint/badge.svg",alt:"lint"})," ",(0,i.kt)("img",{parentName:"p",src:"https://github.com/cloudfoundry/go-cf-api/workflows/Run%20unit%20tests/badge.svg",alt:"unit tests"})," ",(0,i.kt)("img",{parentName:"p",src:"https://github.com/cloudfoundry/go-cf-api/workflows/Run%20database%20tests/badge.svg",alt:"db tests"})," ",(0,i.kt)("img",{parentName:"p",src:"https://github.com/cloudfoundry/go-cf-api/workflows/Build%20binaries/badge.svg",alt:"build"})),(0,i.kt)("h1",{id:"go-cf-api"},"go-cf-api"),(0,i.kt)("p",null,"A ",(0,i.kt)("strong",{parentName:"p"},"proof of concept implementation")," as an alternative to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cloudfoundry/cloud_controller_ng"},"cloud_controller_ng"),", written in Go.\\\nCurrently, this project is intended to be deployed alongside the existing ",(0,i.kt)("inlineCode",{parentName:"p"},"cloud_controller_ng")," with a L7 router to forward requests to endpoints that have been completed to the Go implementation (based on both path and HTTP method). A deployment using this setup should pass ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cloudfoundry/cf-acceptance-tests"},"CATS"),"."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Since this project only implements a subset of the CF API endpoints, it should not be deployed standalone.")),(0,i.kt)("h2",{id:"deploying-with-cf-deployment"},"Deploying with cf-deployment"),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"https://cloudfoundry.github.io/go-cf-api/adrs/ADR%20-%20Traffic%20Splitter#decision-outcome"},"ADR")," for more information on this deployment approach."),(0,i.kt)("p",null,"To deploy ",(0,i.kt)("inlineCode",{parentName:"p"},"go-cf-api")," into a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cloudfoundry/cf-deployment"},"cf-deployment"),", include\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cloudfoundry-incubator/cf-performance-tests-pipeline/blob/main/operations/deploy-go-cf-api.yml"},"this ops file"),".\nThis will use ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cloudfoundry/haproxy-boshrelease"},"HAProxy")," to route all requests to the ",(0,i.kt)("inlineCode",{parentName:"p"},"go-cf-api")," where that endpoint and method has been implemented.\nAny endpoints that are not yet implemented by ",(0,i.kt)("inlineCode",{parentName:"p"},"go-cf-api")," will continue to be served by ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cloudfoundry/cloud_controller_ng"},"cloud_controller_ng"),"."),(0,i.kt)("h3",{id:"links"},"Links"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://cloudfoundry.github.io/go-cf-api/"},"Documentation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/cloudfoundry/go-cf-api-release"},"BOSH Release")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/cloudfoundry-incubator/cf-performance-tests-pipeline/blob/main/operations/deploy-gontroller.yml"},"Opsfile for cf-deployment"))),(0,i.kt)("h2",{id:"development-setup"},"Development Setup"),(0,i.kt)("h3",{id:"requirements"},"Requirements"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://golang.org/dl"},"Go")," version 1.17"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/magefile/mage"},"Mage")," (Makefile alternative in go) - ",(0,i.kt)("inlineCode",{parentName:"li"},"go install github.com/magefile/mage")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://mariadb.com/kb/en/mysql-command-line-client/"},"Mysql")," and ",(0,i.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/13/app-psql.html"},"Postgres")," CLI Tools (mysql, mysqldump, psql, pgdump etc.)"),(0,i.kt)("li",{parentName:"ul"},"Additional tooling/CLIs - ",(0,i.kt)("inlineCode",{parentName:"li"},"mage GetDependencies"))),(0,i.kt)("h4",{id:"optional"},"Optional"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://nodejs.org/en/"},"NodeJS")," and ",(0,i.kt)("a",{parentName:"li",href:"https://yarnpkg.com/"},"Yarn")," (for working with the documentation in /docs)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://git-lfs.github.com/"},"Git LFS")," (to get assets resolved in /docs)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.docker.com/"},"Docker + docker-compose")," for running additional runtime dependencies")),(0,i.kt)("h2",{id:"prepare-dev-database"},"Prepare dev database"),(0,i.kt)("p",null,"To run go-cf-api requires a migrated/existing Cloud Controller database.\nTo help with this, there is a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cloudfoundry/go-cf-api/blob/main/docker-compose.yml"},"docker-compose.yml")," file to start the DB instances and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cloudfoundry/go-cf-api/blob/main/database_dumps"},"SQL dumps")," from an existing ",(0,i.kt)("inlineCode",{parentName:"p"},"cloud_controller_ng")," that can be imported to create a DB for testing."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"There are ",(0,i.kt)("inlineCode",{parentName:"p"},"mage")," commands for performing most common database operations. Run ",(0,i.kt)("inlineCode",{parentName:"p"},"mage help")," to see the full list of available commands.")),(0,i.kt)("p",null,"First start needed runtime components with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose up -d\n\n[+] Running 3/0\n \u283f Container go-cf-api_mariadb_1   Running                                                                                                                                                                                                                                                                   0.0s\n \u283f Container go-cf-api_postgres_1  Running                                                                                                                                                                                                                                                                   0.0s\n \u283f Container go-cf-api_uaa_1       Running\n")),(0,i.kt)("p",null,"To ensure the DB is ready for use, it needs creating and loading with the relevant database dump."),(0,i.kt)("h3",{id:"postgres"},"Postgres"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mage DBCreate config_psql.yaml\nmage DBLoad config_psql.yaml database_dumps/3.102.0_psql_ccdb.sql\n")),(0,i.kt)("h3",{id:"mysqlmariadb"},"MySQL/MariaDB"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mage DBCreate config_mysql.yaml\nmage DBLoad config_mysql.yaml database_dumps/3.102.0_mysql_ccdb.sql\n")),(0,i.kt)("h3",{id:"useful-database-operations"},"Useful database operations"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Drop database",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mage DBDelete config_psql.yaml\n"))),(0,i.kt)("li",{parentName:"ul"},"Drop and create database and import new dump",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mage DBRecreate config_psql.yaml database_dumps/3.102.0_psql_ccdb.sql\n")))),(0,i.kt)("h2",{id:"running-commands"},"Running commands"),(0,i.kt)("p",null,"Different database code and types of test are conditionally compiled and run based on ",(0,i.kt)("a",{parentName:"p",href:"https://pkg.go.dev/cmd/go#hdr-Build_constraints"},"Go build tags"),"."),(0,i.kt)("p",null,"To target a specific database and/or test set, use:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"go -tags=psql,unit <go command>\n")),(0,i.kt)("p",null,"To avoid having to type out tags every time, you can instead run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'export GOFLAGS="-tags=psql,unit"\n')),(0,i.kt)("p",null,"This will make ",(0,i.kt)("inlineCode",{parentName:"p"},"go test ./...")," just run the unit tests and also allow you to just run ",(0,i.kt)("inlineCode",{parentName:"p"},"go run cmd/main.go config_psql.yaml")),(0,i.kt)("p",null,"Available Tags are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"mysql (adds mysql database support)"),(0,i.kt)("li",{parentName:"ul"},"psql (adds psql database support)"),(0,i.kt)("li",{parentName:"ul"},"unit (includes unittests)"),(0,i.kt)("li",{parentName:"ul"},"integration (includes integration tests)")),(0,i.kt)("p",null,"Note here that you can build/run go-cf-api just with either ",(0,i.kt)("inlineCode",{parentName:"p"},"mysql")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"psql")," support/tag.\nThe intended way to support both dbs is to build two separate binaries and depending on the backend use the fitting one.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"unit")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"integration")," tags are just relevant for running ",(0,i.kt)("inlineCode",{parentName:"p"},"go test")," but either ",(0,i.kt)("inlineCode",{parentName:"p"},"mysql")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"psql")," must be always provided otherwise there are missing imports."),(0,i.kt)("h2",{id:"starting-the-go-cf-api"},"Starting the go-cf-api"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Postgres",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"go run --tags=psql cmd/main.go config_psql.yaml\n"))),(0,i.kt)("li",{parentName:"ul"},"MySQL/MariaDB",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"go run --tags=mysql cmd/main.go config_mysql.yaml\n")))),(0,i.kt)("p",null,"The default values in the ",(0,i.kt)("inlineCode",{parentName:"p"},"config_{db}.yml")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"sqlboiler_{db}.toml")," files should match the credentials for each database in ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose.yml"),".\nYou may need to modify these credentials to connect to an alternative DB setup."),(0,i.kt)("p",null,"The API should be accessible at"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"http://localhost:8080/v3\n")),(0,i.kt)("p",null,"The API Documentation should be accessible at"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"http://localhost:8080/docs/v3\n")),(0,i.kt)("h2",{id:"building-the-go-cf-api-binaries"},"Building the go-cf-api binaries"),(0,i.kt)("p",null,"The two binaries (for ",(0,i.kt)("inlineCode",{parentName:"p"},"psql")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"mysql"),") can then be compiled for your current OS/architecture with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mage build\n")),(0,i.kt)("p",null,"Binaries are output to the ",(0,i.kt)("inlineCode",{parentName:"p"},"/build")," directory."),(0,i.kt)("p",null,"The binaries can be compiled for other architectures by exporting the ",(0,i.kt)("inlineCode",{parentName:"p"},"GOOS")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"GOARCH")," environment variables."),(0,i.kt)("h2",{id:"list-of-api-endpoints"},"List of API endpoints"),(0,i.kt)("p",null,"Following endpoints have implemented and should be equivalent to the endpoints from ",(0,i.kt)("inlineCode",{parentName:"p"},"cloud_controller_ng"),"."),(0,i.kt)("h4",{id:"go-cf-api-specific-endpoints"},"go-cf-api Specific Endpoints"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"http://localhost:8080/healhz (Health Endpoint)"),(0,i.kt)("li",{parentName:"ul"},"http://localhost:8080/metrics (Prometheus Metrics)"),(0,i.kt)("li",{parentName:"ul"},"http://localhost:8080/docs/v3 (API Documentation)")),(0,i.kt)("h4",{id:"v3-api"},"V3 API"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"http://localhost:8080/"),(0,i.kt)("li",{parentName:"ul"},"http://localhost:8080/v3"),(0,i.kt)("li",{parentName:"ul"},"http://localhost:8080/v3/info"),(0,i.kt)("li",{parentName:"ul"},"http://localhost:8080/v3/buildpacks (GET)"),(0,i.kt)("li",{parentName:"ul"},"http://localhost:8080/v3/buildpacks/:guid (GET, POST)"),(0,i.kt)("li",{parentName:"ul"},"http://localhost:8080/v3/security_groups (GET)"),(0,i.kt)("li",{parentName:"ul"},"http://localhost:8080/v3/security_groups/:guid (GET)")),(0,i.kt)("h2",{id:"querying-locally"},"Querying locally"),(0,i.kt)("p",null,"To query most endpoints locally, you will need a JWT. The easiest way to get this is to create a UAA client with the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cloudfoundry/cf-uaac"},"uaac")," CLI then login with then ",(0,i.kt)("inlineCode",{parentName:"p"},"cf")," CLI. To create a user called ",(0,i.kt)("inlineCode",{parentName:"p"},"bob"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"uaac target http://localhost:8095\nuaac token client get admin -s adminsecret\nuaac user add bob -p password --emails none@none.local\ncf api http://localhost:8080\ncf auth bob password\n")),(0,i.kt)("p",null,"Now various endpoints can be queried using e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"cf curl /v3/buildpacks")),(0,i.kt)("p",null,"To authenticate as admin (for example to assign roles to ",(0,i.kt)("inlineCode",{parentName:"p"},"bob"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cf auth admin adminsecret --client-credentials\n")),(0,i.kt)("h2",{id:"documentation"},"Documentation"),(0,i.kt)("p",null,"The documentation is based on ",(0,i.kt)("a",{parentName:"p",href:"https://docusaurus.io/"},"docusaurus")," and can be found at ",(0,i.kt)("a",{parentName:"p",href:"https://pages.github.com/cloudfoundry/go-cf-api/"},"https://pages.github.com/cloudfoundry/go-cf-api/"),".\nIt is defined under ",(0,i.kt)("inlineCode",{parentName:"p"},"/docs")," in this project and is then served by github-pages from the ",(0,i.kt)("inlineCode",{parentName:"p"},"gh-pages")," branch which is detached from the other branches.\nA GitHub workflow ensures the ",(0,i.kt)("inlineCode",{parentName:"p"},"gh-pages")," branch always reflects the state of the main branch's ",(0,i.kt)("inlineCode",{parentName:"p"},"/docs")," folder."),(0,i.kt)("p",null,"Package documentation is auto generated using ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/princjef/gomarkdoc"},"gomarkdoc")," and integrated into ",(0,i.kt)("a",{parentName:"p",href:"https://docusaurus.io/"},"docusaurus"),", as is the API documentation which is generated from code comments via ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/swaggo/swag"},"swag"),".\nAdditionally, the ",(0,i.kt)("inlineCode",{parentName:"p"},"go-cf-api")," binaries/",(0,i.kt)("inlineCode",{parentName:"p"},"go run cmd/main.go")," will also serve the versioned API documentation in a Swagger UI at:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"http://localhost:8080/docs/v3\n")),(0,i.kt)("p",null,"Some manual documentation such as project ADRs (architecture decision records) are included under ",(0,i.kt)("inlineCode",{parentName:"p"},"/doc/adrs")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"/docs/docs"),".\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"/docs/docs/intro.md")," file is a symlink to this ",(0,i.kt)("inlineCode",{parentName:"p"},"README.md"),".\nFor further information how to build the documentation locally refer to the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cloudfoundry/go-cf-api/blob/main/docs/README.md"},"Docs README")),(0,i.kt)("h2",{id:"development-tasks"},"Development tasks"),(0,i.kt)("p",null,"Below is a summary of the most important development workflows and tools."),(0,i.kt)("h3",{id:"generating-db-models"},"Generating DB models"),(0,i.kt)("p",null,"To support different databases (Postgres and MySQL/MariaDB), we generate two sets of database models with ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/volatiletech/sqlboiler"},"sqlboiler"),".\nThese are then included in the same package and given build tag comments to control when to compile each model set into the binary.\nTwo binaries are then produced - one for each database.\nAttempting to use e.g. the ",(0,i.kt)("inlineCode",{parentName:"p"},"mysql")," binary on a Postgres database will result in a startup error."),(0,i.kt)("p",null,"To facilitate the generating, combining and build tagging of the ",(0,i.kt)("inlineCode",{parentName:"p"},"sqlboiler")," models, there is a mage task to automate it.\nFirstly one must have a ",(0,i.kt)("inlineCode",{parentName:"p"},"mysql")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"psql")," instance running with a desired database schema already on them(in the ",(0,i.kt)("inlineCode",{parentName:"p"},"ccdb")," database). Then one can run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mage GenerateSQLBoiler\n")),(0,i.kt)("p",null,"This will scan both databases schemas and generate go code to ",(0,i.kt)("inlineCode",{parentName:"p"},"/internal/sotrage/db/models/")," as well as add the relevant build tag comments to compile the correct models for each supported DB."),(0,i.kt)("h3",{id:"running-the-linter"},"Running the linter"),(0,i.kt)("p",null,"This project uses ",(0,i.kt)("a",{parentName:"p",href:"https://golangci-lint.run/"},"golangci-lint")," to ensure code is formatted correctly and return values are checked etc.\nTo run the linter, run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"golangci-lint run --build-tags psql,unit,integration\n")),(0,i.kt)("p",null,"There is a GitHub Action that runs the linter on every push. No code should be merged until it passes all the linter checks."),(0,i.kt)("h3",{id:"running-tests"},"Running tests"),(0,i.kt)("p",null,"Different tags are used to control which tests are run:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Unit tests",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'go test -tags="unit,psql" ./...\n'))),(0,i.kt)("li",{parentName:"ul"},"Integration tests (Postgres) - require running database",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"go test -tags=integration,psql -parallel=1 -p=1 ./... -args $PWD/config_psql.yaml\n"))),(0,i.kt)("li",{parentName:"ul"},"Integration tests (MySQL/MariaDB) - require running database",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"go test -tags=integration,mysql -parallel=1 -p=1 ./... -args $PWD/config_mysql.yaml\n")))))}c.isMDXComponent=!0}}]);