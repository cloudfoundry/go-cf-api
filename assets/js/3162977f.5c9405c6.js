"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9482],{3905:function(e,r,l){l.d(r,{Zo:function(){return i},kt:function(){return u}});var t=l(7294);function a(e,r,l){return r in e?Object.defineProperty(e,r,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[r]=l,e}function c(e,r){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),l.push.apply(l,t)}return l}function o(e){for(var r=1;r<arguments.length;r++){var l=null!=arguments[r]?arguments[r]:{};r%2?c(Object(l),!0).forEach((function(r){a(e,r,l[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):c(Object(l)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(l,r))}))}return e}function n(e,r){if(null==e)return{};var l,t,a=function(e,r){if(null==e)return{};var l,t,a={},c=Object.keys(e);for(t=0;t<c.length;t++)l=c[t],r.indexOf(l)>=0||(a[l]=e[l]);return a}(e,r);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)l=c[t],r.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(a[l]=e[l])}return a}var s=t.createContext({}),k=function(e){var r=t.useContext(s),l=r;return e&&(l="function"==typeof e?e(r):o(o({},r),e)),l},i=function(e){var r=k(e.components);return t.createElement(s.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},p=t.forwardRef((function(e,r){var l=e.components,a=e.mdxType,c=e.originalType,s=e.parentName,i=n(e,["components","mdxType","originalType","parentName"]),p=k(l),u=a,d=p["".concat(s,".").concat(u)]||p[u]||m[u]||c;return l?t.createElement(d,o(o({ref:r},i),{},{components:l})):t.createElement(d,o({ref:r},i))}));function u(e,r){var l=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var c=l.length,o=new Array(c);o[0]=p;var n={};for(var s in r)hasOwnProperty.call(r,s)&&(n[s]=r[s]);n.originalType=e,n.mdxType="string"==typeof e?e:a,o[1]=n;for(var k=2;k<c;k++)o[k]=l[k];return t.createElement.apply(null,o)}return t.createElement.apply(null,l)}p.displayName="MDXCreateElement"},6523:function(e,r,l){l.r(r),l.d(r,{frontMatter:function(){return n},contentTitle:function(){return s},metadata:function(){return k},toc:function(){return i},default:function(){return p}});var t=l(7462),a=l(3366),c=(l(7294),l(3905)),o=["components"],n={},s=void 0,k={unversionedId:"Packages/internal/apicommon/v3/metadata/mocks",id:"Packages/internal/apicommon/v3/metadata/mocks",title:"mocks",description:"Package mock\\_metadata is a generated GoMock package\\.",source:"@site/godocs/Packages/internal/apicommon/v3/metadata/mocks.md",sourceDirName:"Packages/internal/apicommon/v3/metadata",slug:"/Packages/internal/apicommon/v3/metadata/mocks",permalink:"/go-cf-api/godocs/Packages/internal/apicommon/v3/metadata/mocks",editUrl:"https://github.com/cloudfoundry/go-cf-api/edit/main/docs/godocs/Packages/internal/apicommon/v3/metadata/mocks.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"timefilters",permalink:"/go-cf-api/godocs/Packages/internal/apicommon/v3/timefilters"},next:{title:"mocks",permalink:"/go-cf-api/godocs/Packages/internal/apicommon/v3/permissions/mocks"}},i=[{value:"Index",id:"index",children:[],level:2},{value:"type MockLabelSelectorFilters",id:"type-mocklabelselectorfilters",children:[{value:"func NewMockLabelSelectorFilters",id:"func-newmocklabelselectorfilters",children:[],level:3},{value:"func (*MockLabelSelectorFilters) EXPECT",id:"func-mocklabelselectorfilters-expect",children:[],level:3},{value:"func (*MockLabelSelectorFilters) Filters",id:"func-mocklabelselectorfilters-filters",children:[],level:3}],level:2},{value:"type MockLabelSelectorFiltersMockRecorder",id:"type-mocklabelselectorfiltersmockrecorder",children:[{value:"func (*MockLabelSelectorFiltersMockRecorder) Filters",id:"func-mocklabelselectorfiltersmockrecorder-filters",children:[],level:3}],level:2},{value:"type MockLabelSelectorParser",id:"type-mocklabelselectorparser",children:[{value:"func NewMockLabelSelectorParser",id:"func-newmocklabelselectorparser",children:[],level:3},{value:"func (*MockLabelSelectorParser) EXPECT",id:"func-mocklabelselectorparser-expect",children:[],level:3},{value:"func (*MockLabelSelectorParser) Parse",id:"func-mocklabelselectorparser-parse",children:[],level:3}],level:2},{value:"type MockLabelSelectorParserMockRecorder",id:"type-mocklabelselectorparsermockrecorder",children:[{value:"func (*MockLabelSelectorParserMockRecorder) Parse",id:"func-mocklabelselectorparsermockrecorder-parse",children:[],level:3}],level:2}],m={toc:i};function p(e){var r=e.components,l=(0,a.Z)(e,o);return(0,c.kt)("wrapper",(0,t.Z)({},m,l,{components:r,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"mock_metadata"},"mock","_","metadata"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},'import "github.com/cloudfoundry/go-cf-api/internal/apicommon/v3/metadata/mocks"\n')),(0,c.kt)("p",null,"Package mock","_","metadata is a generated GoMock package","."),(0,c.kt)("p",null,"Package mock","_","metadata is a generated GoMock package","."),(0,c.kt)("h2",{id:"index"},"Index"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("a",{parentName:"li",href:"#type-mocklabelselectorfilters"},"type MockLabelSelectorFilters"),(0,c.kt)("ul",{parentName:"li"},(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("a",{parentName:"li",href:"#func-newmocklabelselectorfilters"},"func NewMockLabelSelectorFilters(ctrl ",(0,c.kt)("em",{parentName:"a"},"gomock.Controller) "),"MockLabelSelectorFilters")),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("a",{parentName:"li",href:"#func-mocklabelselectorfilters-expect"},"func (m ",(0,c.kt)("em",{parentName:"a"},"MockLabelSelectorFilters) EXPECT() "),"MockLabelSelectorFiltersMockRecorder")),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("a",{parentName:"li",href:"#func-mocklabelselectorfilters-filters"},"func (m *MockLabelSelectorFilters) Filters(resourceTable, labelsTable string) []qm.QueryMod")))),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("a",{parentName:"li",href:"#type-mocklabelselectorfiltersmockrecorder"},"type MockLabelSelectorFiltersMockRecorder"),(0,c.kt)("ul",{parentName:"li"},(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("a",{parentName:"li",href:"#func-mocklabelselectorfiltersmockrecorder-filters"},"func (mr ",(0,c.kt)("em",{parentName:"a"},"MockLabelSelectorFiltersMockRecorder) Filters(resourceTable, labelsTable interface{}) "),"gomock.Call")))),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("a",{parentName:"li",href:"#type-mocklabelselectorparser"},"type MockLabelSelectorParser"),(0,c.kt)("ul",{parentName:"li"},(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("a",{parentName:"li",href:"#func-newmocklabelselectorparser"},"func NewMockLabelSelectorParser(ctrl ",(0,c.kt)("em",{parentName:"a"},"gomock.Controller) "),"MockLabelSelectorParser")),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("a",{parentName:"li",href:"#func-mocklabelselectorparser-expect"},"func (m ",(0,c.kt)("em",{parentName:"a"},"MockLabelSelectorParser) EXPECT() "),"MockLabelSelectorParserMockRecorder")),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("a",{parentName:"li",href:"#func-mocklabelselectorparser-parse"},"func (m *MockLabelSelectorParser) Parse(labelSelector string) (metadata.LabelSelectorFilters, error)")))),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("a",{parentName:"li",href:"#type-mocklabelselectorparsermockrecorder"},"type MockLabelSelectorParserMockRecorder"),(0,c.kt)("ul",{parentName:"li"},(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("a",{parentName:"li",href:"#func-mocklabelselectorparsermockrecorder-parse"},"func (mr ",(0,c.kt)("em",{parentName:"a"},"MockLabelSelectorParserMockRecorder) Parse(labelSelector interface{}) "),"gomock.Call"))))),(0,c.kt)("h2",{id:"type-mocklabelselectorfilters"},"type MockLabelSelectorFilters"),(0,c.kt)("p",null,"MockLabelSelectorFilters is a mock of LabelSelectorFilters interface","."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},"type MockLabelSelectorFilters struct {\n    ctrl     *gomock.Controller\n    recorder *MockLabelSelectorFiltersMockRecorder\n}\n")),(0,c.kt)("h3",{id:"func-newmocklabelselectorfilters"},"func NewMockLabelSelectorFilters"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},"func NewMockLabelSelectorFilters(ctrl *gomock.Controller) *MockLabelSelectorFilters\n")),(0,c.kt)("p",null,"NewMockLabelSelectorFilters creates a new mock instance","."),(0,c.kt)("h3",{id:"func-mocklabelselectorfilters-expect"},"func ","(","*","MockLabelSelectorFilters",")"," EXPECT"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},"func (m *MockLabelSelectorFilters) EXPECT() *MockLabelSelectorFiltersMockRecorder\n")),(0,c.kt)("p",null,"EXPECT returns an object that allows the caller to indicate expected use","."),(0,c.kt)("h3",{id:"func-mocklabelselectorfilters-filters"},"func ","(","*","MockLabelSelectorFilters",")"," Filters"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},"func (m *MockLabelSelectorFilters) Filters(resourceTable, labelsTable string) []qm.QueryMod\n")),(0,c.kt)("p",null,"Filters mocks base method","."),(0,c.kt)("h2",{id:"type-mocklabelselectorfiltersmockrecorder"},"type MockLabelSelectorFiltersMockRecorder"),(0,c.kt)("p",null,"MockLabelSelectorFiltersMockRecorder is the mock recorder for MockLabelSelectorFilters","."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},"type MockLabelSelectorFiltersMockRecorder struct {\n    mock *MockLabelSelectorFilters\n}\n")),(0,c.kt)("h3",{id:"func-mocklabelselectorfiltersmockrecorder-filters"},"func ","(","*","MockLabelSelectorFiltersMockRecorder",")"," Filters"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},"func (mr *MockLabelSelectorFiltersMockRecorder) Filters(resourceTable, labelsTable interface{}) *gomock.Call\n")),(0,c.kt)("p",null,"Filters indicates an expected call of Filters","."),(0,c.kt)("h2",{id:"type-mocklabelselectorparser"},"type MockLabelSelectorParser"),(0,c.kt)("p",null,"MockLabelSelectorParser is a mock of LabelSelectorParser interface","."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},"type MockLabelSelectorParser struct {\n    ctrl     *gomock.Controller\n    recorder *MockLabelSelectorParserMockRecorder\n}\n")),(0,c.kt)("h3",{id:"func-newmocklabelselectorparser"},"func NewMockLabelSelectorParser"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},"func NewMockLabelSelectorParser(ctrl *gomock.Controller) *MockLabelSelectorParser\n")),(0,c.kt)("p",null,"NewMockLabelSelectorParser creates a new mock instance","."),(0,c.kt)("h3",{id:"func-mocklabelselectorparser-expect"},"func ","(","*","MockLabelSelectorParser",")"," EXPECT"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},"func (m *MockLabelSelectorParser) EXPECT() *MockLabelSelectorParserMockRecorder\n")),(0,c.kt)("p",null,"EXPECT returns an object that allows the caller to indicate expected use","."),(0,c.kt)("h3",{id:"func-mocklabelselectorparser-parse"},"func ","(","*","MockLabelSelectorParser",")"," Parse"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},"func (m *MockLabelSelectorParser) Parse(labelSelector string) (metadata.LabelSelectorFilters, error)\n")),(0,c.kt)("p",null,"Parse mocks base method","."),(0,c.kt)("h2",{id:"type-mocklabelselectorparsermockrecorder"},"type MockLabelSelectorParserMockRecorder"),(0,c.kt)("p",null,"MockLabelSelectorParserMockRecorder is the mock recorder for MockLabelSelectorParser","."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},"type MockLabelSelectorParserMockRecorder struct {\n    mock *MockLabelSelectorParser\n}\n")),(0,c.kt)("h3",{id:"func-mocklabelselectorparsermockrecorder-parse"},"func ","(","*","MockLabelSelectorParserMockRecorder",")"," Parse"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},"func (mr *MockLabelSelectorParserMockRecorder) Parse(labelSelector interface{}) *gomock.Call\n")),(0,c.kt)("p",null,"Parse indicates an expected call of Parse","."),(0,c.kt)("p",null,"Generated by ",(0,c.kt)("a",{parentName:"p",href:"https://github.com/princjef/gomarkdoc"},"gomarkdoc")))}p.isMDXComponent=!0}}]);