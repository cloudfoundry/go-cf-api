"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7509],{641:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"ADR - Documentation Framework","metadata":{"permalink":"/go-cf-api/adrs/ADR - Documentation Framework","editUrl":"https://github.com/cloudfoundry/go-cf-api/edit/main/docs/adrs/2021-09-03-project-documentation.md","source":"@site/adrs/2021-09-03-project-documentation.md","title":"Use Docusaurus to document our project","description":"* Status: proposed","date":"2021-09-03T00:00:00.000Z","formattedDate":"September 3, 2021","tags":[{"label":"adr","permalink":"/go-cf-api/adrs/tags/adr"}],"readingTime":1.765,"truncated":false,"authors":[{"name":"Florian Braun","title":"go-cf-api Team","url":"https://github.com/FloThinksPi","image_url":"https://avatars1.githubusercontent.com/u/5863788?v=4","imageURL":"https://avatars1.githubusercontent.com/u/5863788?v=4"}],"nextItem":{"title":"Use client_golang prometheus library to expose metrics","permalink":"/go-cf-api/adrs/ADR - Prometheus Framework"}},"content":"* Status: proposed\\n* Deciders: [Florian Braun](https://github.com/FloThinksPi)\\n* Date: 03.09.21\\n\\n## Context and Problem Statement\\n\\nWe want a documentation page in which we provide documentation from different sources:\\n* Manually written documentation\\n* GoDoc generated documentation from go code\\n* API Documentation from a swagger/openapi spec\\n* ADRs are nicely presented\\n\\nWe want to have a nice page for it as when going public with this project, a good (single)entry point for people to look into the project is essential.\\n\\n## Decision Drivers\\n\\n* Having the ability to have different sources of documentation, generated and manually written ones.\\n* Being able to statically deliver the documentation (e.g. via GitHub Pages)\\n* Nice Look\\n* Easy to write docs in\\n* Being able to use Continuous Delivery to serve the docs.\\n\\n## Considered Options\\n\\n* [Docusaurus](https://docusaurus.io/)\\n* [Jekyll](https://jekyllrb.com/)\\n* [mkdocs](https://www.mkdocs.org/)\\n\\n## Decision Outcome\\n\\nChosen option: \\"[Docusaurus](https://docusaurus.io/)\\", because it was easy to use, produces very nice results, has the most features and seems to be widely used.\\n\\n## Pros and Cons of the Options \x3c!-- optional --\x3e\\n\\n### [Docusaurus](https://docusaurus.io/)\\n\\n* Good, because it has a modern/nice look.\\n* Good, because it has a plugin system which extends functions and delivers e.g. swagger/openapi support.\\n* Good, because it is based on react and one is able to integrate own complex pages with that if one wants.\\n* Good, because it has a build in deploy mechanism to deploy into a second branch on the same project.\\n* Good, because it brings nice to have / advanced features for the future like versioned docs or multi-language support.\\n\\n### [Jekyll](https://jekyllrb.com/)\\n\\n* Good, because it is integrated into GitHub Enterprise. They will generate the page regularly for you.\\n* Bad, because it has few functionality. Hard to get e.g. Swagger/OpenAPI Docs to Display.\\n* Bad, because i diskliked the themes/page design in general.\\n\\n### [mkdocs](https://www.mkdocs.org/)\\n\\n* Good, because it has a plugin system which extends functions and delivers e.g. swagger/openapi support.\\n* Bad, because it doesn\'t offer an implementation of collectors to register multiple metrics at the same time\\n* Bad, because i diskliked the themes/page design in general."},{"id":"ADR - Prometheus Framework","metadata":{"permalink":"/go-cf-api/adrs/ADR - Prometheus Framework","editUrl":"https://github.com/cloudfoundry/go-cf-api/edit/main/docs/adrs/2021-08-20-prometheus-library.md","source":"@site/adrs/2021-08-20-prometheus-library.md","title":"Use client_golang prometheus library to expose metrics","description":"* Status: accepted","date":"2021-08-20T00:00:00.000Z","formattedDate":"August 20, 2021","tags":[{"label":"adr","permalink":"/go-cf-api/adrs/tags/adr"}],"readingTime":1.27,"truncated":false,"authors":[{"name":"Aftab Alam","title":"go-cf-api Team","url":"https://github.com/iaftab-alam","image_url":"https://avatars1.githubusercontent.com/u/81828613?v=4","imageURL":"https://avatars1.githubusercontent.com/u/81828613?v=4"},{"name":"Will Gant","title":"go-cf-api Team","url":"https://github.com/will-gant","image_url":"https://avatars1.githubusercontent.com/u/81828613?v=4","imageURL":"https://avatars1.githubusercontent.com/u/81828613?v=4"}],"prevItem":{"title":"Use Docusaurus to document our project","permalink":"/go-cf-api/adrs/ADR - Documentation Framework"},"nextItem":{"title":"Deploy haproxy to route specific endpoints/methods to the new implementation","permalink":"/go-cf-api/adrs/ADR - Traffic Splitter"}},"content":"* Status: accepted\\n* Deciders: [Will Gant](https://github.com/will-gant) and [Aftab Alam](https://github.com/iaftab-alam)\\n* Date: 20.08.21\\n\\n## Context and Problem Statement\\n\\nWe want our PoC to expose prometheus metrics to be consumed by a visualization dashbaord, e.g,. Grafana, and also to benchmark peformance against the exisitng Cloud Controller.\\n\\n## Decision Drivers\\n\\n* A metric system which can be easily extended with custom metrics to allow comparison with the performance of the existing Cloud Controller\\n* Community support, solutions should be a broadly adapted technology.\\n\\n## Considered Options\\n\\n* [client_golang](https://github.com/prometheus/client_golang)\\n* [VictoriaMetrics](https://github.com/VictoriaMetrics/metrics)\\n* [promenade](https://github.com/poblish/promenade)\\n\\n## Decision Outcome\\n\\nChosen option: \\"client_golang\\", because it the official and by far most popular library, and appears to have most features.\\n\\n## Pros and Cons of the Options \x3c!-- optional --\x3e\\n\\n### [client_golang](https://github.com/prometheus/client_golang)\\n\\n* Good, because it is the official library and has significant community support\\n* Good, because it has all features we wanted and has advanced functionality, e.g,. sqlDBStats out-of-the-box, easily customizable...\\n\\n### [VictoriaMetrics](https://github.com/VictoriaMetrics/metrics)\\n\\n* Good, because it depends on one exeternal package as compared to eight for client_golang\\n* Bad, because it has far fewer users and maintainers than client_golang\\n* Bad, because it is missing \\"advanced funcationality\\" from client_golang (their words)\\n* Bad, because it doesn\'t offer an implementation of collectors to register mulitple metrics at the same time\\n\\n### [promenade](https://github.com/poblish/promenade)\\n\\n* Bad, because it has client_golang as a dependency\\n* Bad, because it has only one author and one user\\n* Bad, because it doesn\'t offer an implementation of collectors to register mulitple metrics at the same time"},{"id":"ADR - Traffic Splitter","metadata":{"permalink":"/go-cf-api/adrs/ADR - Traffic Splitter","editUrl":"https://github.com/cloudfoundry/go-cf-api/edit/main/docs/adrs/2021-08-13-split-traffic-between-both-implementations.md","source":"@site/adrs/2021-08-13-split-traffic-between-both-implementations.md","title":"Deploy haproxy to route specific endpoints/methods to the new implementation","description":"* Status: accepted","date":"2021-08-13T00:00:00.000Z","formattedDate":"August 13, 2021","tags":[{"label":"adr","permalink":"/go-cf-api/adrs/tags/adr"}],"readingTime":2.385,"truncated":false,"authors":[{"name":"Andrew Paine","title":"go-cf-api Team","url":"https://github.com/andy-paine","image_url":"https://avatars1.githubusercontent.com/u/14118619?v=4","imageURL":"https://avatars1.githubusercontent.com/u/14118619?v=4"},{"name":"Sven Krieger","title":"go-cf-api Team","url":"https://github.com/svkrieger","image_url":"https://avatars1.githubusercontent.com/u/37476281?v=4","imageURL":"https://avatars1.githubusercontent.com/u/37476281?v=4"},{"name":"Philipp Thun","title":"go-cf-api Team","url":"https://github.com/philippthun","image_url":"https://avatars1.githubusercontent.com/u/618301?v=4","imageURL":"https://avatars1.githubusercontent.com/u/618301?v=4"}],"prevItem":{"title":"Use client_golang prometheus library to expose metrics","permalink":"/go-cf-api/adrs/ADR - Prometheus Framework"},"nextItem":{"title":"Use Zap logging as a performant and customizable structured logging framework","permalink":"/go-cf-api/adrs/ADR - Logging Framework"}},"content":"* Status: accepted\\n* Deciders: [Andy Paine](https://github.com/andy-paine), [Sven Krieger](https://github.com/svkrieger), [Philipp Thun](https://github.com/philippthun)\\n* Date: 2021-08-04\\n\\n## Context and Problem Statement\\n\\nThe existing Cloud Controller is the reference implementation of the CF v3 API.\\nThis project should avoid replacing the entire `cloud_controller_ng` project in a single \\"big bang\\" migration.\\nIn order to build the new implementation iteratively, this project should be deployable in parallel with the existing implementation.\\nIt should be possible to route individual API calls to the new Cloud Controller as soon as each endpoint is complete.\\n\\n## Decision Drivers \x3c!-- optional --\x3e\\n\\n* Discover bugs early\\n* Deliver value from reimplementation quickly\\n* Minimise mean-time-to-recovery when bugs are discovered\\n\\n## Considered Options\\n\\n1. Deploy new CC alongside existing CC in same instance group, using `nginx` for routing\\n1. Complete an entire endpoint at once (all HTTP methods) and use `gorouter` for path based routing\\n1. Deploy a dedicated path and HTTP method based router/proxy in front of old and new implementations and split traffic based on that\\n\\n## Decision Outcome\\n\\nChosen option: 3 (deploy a path and HTTP method based router/proxy in front of old and new implementations and split traffic based on that),\\nbecause it is the only option that allows for separate scaling of old and new implementations as well as routing based on HTTP method and path.\\nFollowing images shows a rough routing example with just the verry specific `GET /v3/buildpacks/:guid` endpoint beeing routed to the go implementation. Everything else will be routed to the cloudcontroller_ng.\\n![image](https://user-images.githubusercontent.com/5863788/145360535-a02ebd16-e339-461e-bff5-612b3c4c8f46.png)\\n\\n### Positive Consequences \x3c!-- optional --\x3e\\n\\n* New implementation can be built in small units (endpoint + HTTP method)\\n* Proxy can be registered only for certain routes, minimising throughput\\n* Networking such as TLS in new implementation can be delayed until closer to completion (as proxy can perform this function)\\n* Good support for HAProxy BOSH release as it is maintained by SAP team\\n\\n### Negative Consequences \x3c!-- optional --\x3e\\n\\n* Additional software to manage\\n* HAProxy BOSH release is not that well suited to this use case\\n\\n## Pros and Cons of the Options \x3c!-- optional --\x3e\\n\\n### Option 1 (Deploy new CC alongside existing CC in same instance group, using `nginx` for routing)\\n\\n* Good, because does not change network architecture\\n* Good, because does not add any new VMs\\n* Bad, because cannot independently scale each implementation\\n* Bad, because would require changes to the CAPI release to support this use case\\n\\n### Option 2 (Complete an entire endpoint at once (all HTTP methods) and use `gorouter` for path based routing)\\n\\n* Good, because does not change network architecture\\n* Good, because can independently scale each implementation\\n* Bad, because requires large amount of work to complete a whole endpoint\\n* Bad, because requires new implementation to support TLS etc. for secure communication\\n\\n## Links \x3c!-- optional --\x3e\\n\\n* [HAProxy BOSH release](https://github.com/cloudfoundry-incubator/haproxy-boshrelease)"},{"id":"ADR - Logging Framework","metadata":{"permalink":"/go-cf-api/adrs/ADR - Logging Framework","editUrl":"https://github.com/cloudfoundry/go-cf-api/edit/main/docs/adrs/2021-07-30-use-zap-logging-framework.md","source":"@site/adrs/2021-07-30-use-zap-logging-framework.md","title":"Use Zap logging as a performant and customizable structured logging framework","description":"* Status: accepted","date":"2021-07-30T00:00:00.000Z","formattedDate":"July 30, 2021","tags":[{"label":"adr","permalink":"/go-cf-api/adrs/tags/adr"}],"readingTime":1.34,"truncated":false,"authors":[{"name":"Florian Braun","title":"go-cf-api Team","url":"https://github.com/FloThinksPi","image_url":"https://avatars1.githubusercontent.com/u/5863788?v=4","imageURL":"https://avatars1.githubusercontent.com/u/5863788?v=4"}],"prevItem":{"title":"Deploy haproxy to route specific endpoints/methods to the new implementation","permalink":"/go-cf-api/adrs/ADR - Traffic Splitter"},"nextItem":{"title":"Use sqlboiler together with build tags to support multiple databases","permalink":"/go-cf-api/adrs/ADR - SQL Framework"}},"content":"* Status: accepted\\n* Deciders: [Florian Braun](https://github.com/FloThinksPi)\\n* Date: 30.7.21\\n\\n## Context and Problem Statement\\n\\nWe want our PoC to log various data in a structured way so that it is parsable by e.g. logsearch.\\n\\n## Decision Drivers\\n\\n* Fast logging (no wasted cpu time)\\n* Customizable to make it compatible with the way log parsing in cloudfoundry works and maybe be able to mirror the log schema of the Cloud_Controller_NG if wanted.\\n* Community support, solutions should be a broadly adapted technology.\\n\\n## Considered Options\\n\\n* [logrus](https://github.com/sirupsen/logrus)\\n* [zap](https://github.com/uber-go/zap)\\n* [apex](https://github.com/apex/log)\\n* [zerolog](https://github.com/rs/zerolog)\\n\\n## Decision Outcome\\n\\nChosen option: \\"\\", because it has bradly used, very fast and has all features we want.\\nAs we started with zap, zerolog would be an alternative but we did not think it was worth it switching over as there was no obvious benefit.\\nSo we sticked to use zap.\\n\\n## Pros and Cons of the Options \x3c!-- optional --\x3e\\n\\n### [logrus](https://github.com/sirupsen/logrus)\\n\\n* Good, because has all features we like\\n* Bad, because dead project, recommends alternatives\\n* Bad, because bad performance\\n\\n### [zap](https://github.com/uber-go/zap)\\n\\n* Good, because very good performance,\\n* Good, because broadly used\\n* Good, because has all features we like\\n\\n### [apex](https://github.com/apex/log)\\n\\n* Good, because has all features we like\\n* Bad, because I dont like the interface\\n* Bad, because it is not used by as much people as zap\\n* Bad, because it is as slow as logrus\\n\\n### [zerolog](https://github.com/rs/zerolog)\\n\\n* Good, because its also very fast.\\n* Good, because has all features we like\\n* Good, because also broadly used but a bit less than zap"},{"id":"ADR - SQL Framework","metadata":{"permalink":"/go-cf-api/adrs/ADR - SQL Framework","editUrl":"https://github.com/cloudfoundry/go-cf-api/edit/main/docs/adrs/2021-07-28-use-sql-boiler-and-build-tags.md","source":"@site/adrs/2021-07-28-use-sql-boiler-and-build-tags.md","title":"Use sqlboiler together with build tags to support multiple databases","description":"* Status: accepted","date":"2021-07-28T00:00:00.000Z","formattedDate":"July 28, 2021","tags":[{"label":"adr","permalink":"/go-cf-api/adrs/tags/adr"}],"readingTime":2.53,"truncated":false,"authors":[{"name":"Florian Braun","title":"go-cf-api Team","url":"https://github.com/FloThinksPi","image_url":"https://avatars1.githubusercontent.com/u/5863788?v=4","imageURL":"https://avatars1.githubusercontent.com/u/5863788?v=4"},{"name":"Marc Misoch","title":"go-cf-api Team","url":"https://github.com/MMisoch","image_url":"https://avatars1.githubusercontent.com/u/47423110?v=4","imageURL":"https://avatars1.githubusercontent.com/u/47423110?v=4"},{"name":"Andrew Paine","title":"go-cf-api Team","url":"https://github.com/andy-paine","image_url":"https://avatars1.githubusercontent.com/u/14118619?v=4","imageURL":"https://avatars1.githubusercontent.com/u/14118619?v=4"}],"prevItem":{"title":"Use Zap logging as a performant and customizable structured logging framework","permalink":"/go-cf-api/adrs/ADR - Logging Framework"},"nextItem":{"title":"Use Markdown Architectural Decision Records","permalink":"/go-cf-api/adrs/ADR - ADR Format"}},"content":"* Status: accepted\\n* Deciders: [Florian Braun](https://github.com/FloThinksPi), [Andy Paine](https://github.com/andy-paine), [Marc Misoch](https://github.com/mmisoch)\\n* Date: 2021-07-28\\n\\n## Context and Problem Statement\\n\\nThe existing Cloud Controller supports both Postgres and MySQL as a storage backend and both options are used in real production deployments today.\\nIn order to replace the existing Cloud Controller implementation, this project should also be able to support both\\n\\n## Decision Drivers\\n\\n* Community support: should be able to work with any CC DB\\n* Performance: want a minimal runtime overhead\\n* Performance: want control over SQL queries used to be able to optimise\\n\\n## Considered Options\\n\\n1. [sqlboiler](https://github.com/volatiletech/sqlboiler) with separate packages for Postgres and MySQL\\n1. [sqlboiler](https://github.com/volatiletech/sqlboiler) with an extracted interface that is implemented by both Postgres and MySQL\\n1. [sqlboiler](https://github.com/volatiletech/sqlboiler) in a shared package with different build tags for each implementation\\n1. [GORM](https://gorm.io/index.html)\\n1. [xo/xo](https://github.com/xo/xo)\\n\\n## Decision Outcome\\n\\nChosen option: 3 ([sqlboiler](https://github.com/volatiletech/sqlboiler) in a shared package with different build tags for each implementation) because this allows all of the model code to be generated from an existing schema and lets the compiler type check that the generated implementations have the same signatures without needing to manipulate the generated code much.\\n\\n### Positive Consequences\\n\\n* Model code can be regularly regenerated when CC DB schema changes (due to new migrations in existing implementation)\\n* Smaller binaries as each only contains code relevant to that DB backend\\n* Compile time checks that the generated code has the same function signatures for both implementations (or at least for all functions that are actually used)\\n* Generated code can be easily extended to support optimisations\\n\\n### Negative Consequences\\n\\n* Extra tooling is required to rename and combine the files into a single package and add build tags\\n* Directory containing generated files is extremely large\\n* Developers need to supply build tags in order to browse, lint, compile and test code\\n\\n## Pros and Cons of other options\\n\\n### Option 1 ([sqlboiler](https://github.com/volatiletech/sqlboiler) with separate packages for Postgres and MySQL)\\n\\n* Good, because `sqlboiler` can be run to generate the code without modification\\n* Bad, because all controller code would need to do an `if`/`switch` statement on database type\\n* Bad, because binaries will contain redundant code for other databases\\n\\n### Option 2 ([sqlboiler](https://github.com/volatiletech/sqlboiler) with an extracted interface that is implemented by both Postgres and MySQL)\\n\\n* Good, because the interface could abstract between the two database\\n* Good, because compiler would check that both generated implementations satisfy interface\\n* Bad, because requires significant effort to extract complex `sqlboiler` interfaces\\n* Bad, because some functions are static and cannot be extracted into an interface\\n\\n### Option 4 [GORM](https://gorm.io/index.html)\\n\\n* Good, because good documentation\\n* Good, because controller code that interacts with database models is easy to write\\n* Bad, because little/no support for generating models from existing schema\\n* Bad, because has runtime overhead of using reflection\\n\\n### Option 5 [xo/xo](https://github.com/xo/xo)\\n\\n\\n* Good, because generated models are extremely simple\\n* Good, because templates are easy to customise\\n* Bad, because generated models have no support for eager loading"},{"id":"ADR - ADR Format","metadata":{"permalink":"/go-cf-api/adrs/ADR - ADR Format","editUrl":"https://github.com/cloudfoundry/go-cf-api/edit/main/docs/adrs/2021-07-25-use-markdown-architectural-decision-records.md","source":"@site/adrs/2021-07-25-use-markdown-architectural-decision-records.md","title":"Use Markdown Architectural Decision Records","description":"* Status: accepted","date":"2021-07-25T00:00:00.000Z","formattedDate":"July 25, 2021","tags":[{"label":"adr","permalink":"/go-cf-api/adrs/tags/adr"}],"readingTime":0.8,"truncated":false,"authors":[{"name":"Andrew Paine","title":"go-cf-api Team","url":"https://github.com/andy-paine","image_url":"https://avatars1.githubusercontent.com/u/14118619?v=4","imageURL":"https://avatars1.githubusercontent.com/u/14118619?v=4"}],"prevItem":{"title":"Use sqlboiler together with build tags to support multiple databases","permalink":"/go-cf-api/adrs/ADR - SQL Framework"}},"content":"* Status: accepted\\n* Deciders: [Andy Paine](https://github.com/andy-paine)\\n* Date: 2021-07-28\\n\\n## Context and Problem Statement\\n\\nWe want to record architectural decisions made in this project.\\nWhich format and structure should these records follow?\\n\\n## Considered Options\\n\\n* [MADR](https://adr.github.io/madr/) 2.1.2 \u2013 The Markdown Architectural Decision Records\\n* [Michael Nygard\'s template](http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions) \u2013 The first incarnation of the term \\"ADR\\"\\n* [Sustainable Architectural Decisions](https://www.infoq.com/articles/sustainable-architectural-design-decisions) \u2013 The Y-Statements\\n* Other templates listed at <https://github.com/joelparkerhenderson/architecture_decision_record>\\n* Formless \u2013 No conventions for file format and structure\\n\\n## Decision Outcome\\n\\nChosen option: \\"MADR 2.1.2\\", because\\n\\n* Implicit assumptions should be made explicit.\\n  Design documentation is important to enable people understanding the decisions later on.\\n  See also [A rational design process: How and why to fake it](https://doi.org/10.1109/TSE.1986.6312940).\\n* The MADR format is lean and fits our development style.\\n* The MADR structure is comprehensible and facilitates usage & maintenance.\\n* The MADR project is vivid.\\n* Version 2.1.2 is the latest one available when starting to document ADRs."}]}')}}]);