"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6221],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,y=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(y,i(i({ref:t},s),{},{components:n})):r.createElement(y,i({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7403:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return s},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={},c=void 0,u={unversionedId:"Packages/internal/storage/db/models",id:"Packages/internal/storage/db/models",isDocsHomePage:!1,title:"models",description:"`go",source:"@site/godocs/Packages/internal/storage/db/models.md",sourceDirName:"Packages/internal/storage/db",slug:"/Packages/internal/storage/db/models",permalink:"/go-cf-api/godocs/Packages/internal/storage/db/models",editUrl:"https://github.com/cloudfoundry/go-cf-api/edit/main/docs/godocs/Packages/internal/storage/db/models.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"db",permalink:"/go-cf-api/godocs/Packages/internal/storage/db"},next:{title:"sqlhelpers",permalink:"/go-cf-api/godocs/Packages/internal/storage/db/sqlhelpers"}},s=[{value:"Index",id:"index",children:[]},{value:"Variables",id:"variables",children:[]},{value:"func AppAnnotationExists",id:"func-appannotationexists",children:[]},{value:"func AppEventExists",id:"func-appeventexists",children:[]},{value:"func AppExists",id:"func-appexists",children:[]},{value:"func AppLabelExists",id:"func-applabelexists",children:[]},{value:"func AppUsageEventExists",id:"func-appusageeventexists",children:[]},{value:"func BuildAnnotationExists",id:"func-buildannotationexists",children:[]},{value:"func BuildExists",id:"func-buildexists",children:[]},{value:"func BuildLabelExists",id:"func-buildlabelexists",children:[]},{value:"func BuildpackAnnotationExists",id:"func-buildpackannotationexists",children:[]},{value:"func BuildpackExists",id:"func-buildpackexists",children:[]},{value:"func BuildpackLabelExists",id:"func-buildpacklabelexists",children:[]},{value:"func BuildpackLifecycleBuildpackExists",id:"func-buildpacklifecyclebuildpackexists",children:[]},{value:"func BuildpackLifecycleDatumExists",id:"func-buildpacklifecycledatumexists",children:[]},{value:"func ClockJobExists",id:"func-clockjobexists",children:[]},{value:"func DelayedJobExists",id:"func-delayedjobexists",children:[]},{value:"func DeploymentAnnotationExists",id:"func-deploymentannotationexists",children:[]},{value:"func DeploymentExists",id:"func-deploymentexists",children:[]},{value:"func DeploymentLabelExists",id:"func-deploymentlabelexists",children:[]},{value:"func DeploymentProcessExists",id:"func-deploymentprocessexists",children:[]},{value:"func DomainAnnotationExists",id:"func-domainannotationexists",children:[]},{value:"func DomainExists",id:"func-domainexists",children:[]},{value:"func DomainLabelExists",id:"func-domainlabelexists",children:[]},{value:"func DropletAnnotationExists",id:"func-dropletannotationexists",children:[]},{value:"func DropletExists",id:"func-dropletexists",children:[]},{value:"func DropletLabelExists",id:"func-dropletlabelexists",children:[]},{value:"func EncryptionKeySentinelExists",id:"func-encryptionkeysentinelexists",children:[]},{value:"func EnvGroupExists",id:"func-envgroupexists",children:[]},{value:"func EventExists",id:"func-eventexists",children:[]},{value:"func FeatureFlagExists",id:"func-featureflagexists",children:[]},{value:"func IsolationSegmentAnnotationExists",id:"func-isolationsegmentannotationexists",children:[]},{value:"func IsolationSegmentExists",id:"func-isolationsegmentexists",children:[]},{value:"func IsolationSegmentLabelExists",id:"func-isolationsegmentlabelexists",children:[]},{value:"func JobExists",id:"func-jobexists",children:[]},{value:"func JobWarningExists",id:"func-jobwarningexists",children:[]},{value:"func KpackLifecycleDatumExists",id:"func-kpacklifecycledatumexists",children:[]},{value:"func LockingExists",id:"func-lockingexists",children:[]},{value:"func NewQuery",id:"func-newquery",children:[]},{value:"func OrganizationAnnotationExists",id:"func-organizationannotationexists",children:[]},{value:"func OrganizationExists",id:"func-organizationexists",children:[]},{value:"func OrganizationLabelExists",id:"func-organizationlabelexists",children:[]},{value:"func OrganizationsAuditorExists",id:"func-organizationsauditorexists",children:[]},{value:"func OrganizationsBillingManagerExists",id:"func-organizationsbillingmanagerexists",children:[]},{value:"func OrganizationsManagerExists",id:"func-organizationsmanagerexists",children:[]},{value:"func OrganizationsPrivateDomainExists",id:"func-organizationsprivatedomainexists",children:[]},{value:"func OrganizationsUserExists",id:"func-organizationsuserexists",children:[]},{value:"func OrphanedBlobExists",id:"func-orphanedblobexists",children:[]},{value:"func PackageAnnotationExists",id:"func-packageannotationexists",children:[]},{value:"func PackageExists",id:"func-packageexists",children:[]},{value:"func PackageLabelExists",id:"func-packagelabelexists",children:[]},{value:"func ProcessAnnotationExists",id:"func-processannotationexists",children:[]},{value:"func ProcessExists",id:"func-processexists",children:[]},{value:"func ProcessLabelExists",id:"func-processlabelexists",children:[]},{value:"func QuotaDefinitionExists",id:"func-quotadefinitionexists",children:[]},{value:"func Quote",id:"func-quote",children:[]},{value:"func RequestCountExists",id:"func-requestcountexists",children:[]},{value:"func RevisionAnnotationExists",id:"func-revisionannotationexists",children:[]},{value:"func RevisionExists",id:"func-revisionexists",children:[]},{value:"func RevisionLabelExists",id:"func-revisionlabelexists",children:[]},{value:"func RevisionProcessCommandExists",id:"func-revisionprocesscommandexists",children:[]},{value:"func RevisionSidecarExists",id:"func-revisionsidecarexists",children:[]},{value:"func RevisionSidecarProcessTypeExists",id:"func-revisionsidecarprocesstypeexists",children:[]},{value:"func RouteAnnotationExists",id:"func-routeannotationexists",children:[]},{value:"func RouteBindingAnnotationExists",id:"func-routebindingannotationexists",children:[]},{value:"func RouteBindingExists",id:"func-routebindingexists",children:[]},{value:"func RouteBindingLabelExists",id:"func-routebindinglabelexists",children:[]},{value:"func RouteBindingOperationExists",id:"func-routebindingoperationexists",children:[]},{value:"func RouteExists",id:"func-routeexists",children:[]},{value:"func RouteLabelExists",id:"func-routelabelexists",children:[]},{value:"func RouteMappingExists",id:"func-routemappingexists",children:[]},{value:"func SchemaMigrationExists",id:"func-schemamigrationexists",children:[]},{value:"func SecurityGroupExists",id:"func-securitygroupexists",children:[]},{value:"func SecurityGroupsSpaceExists",id:"func-securitygroupsspaceexists",children:[]},{value:"func ServiceBindingAnnotationExists",id:"func-servicebindingannotationexists",children:[]},{value:"func ServiceBindingExists",id:"func-servicebindingexists",children:[]},{value:"func ServiceBindingLabelExists",id:"func-servicebindinglabelexists",children:[]},{value:"func ServiceBindingOperationExists",id:"func-servicebindingoperationexists",children:[]},{value:"func ServiceBrokerAnnotationExists",id:"func-servicebrokerannotationexists",children:[]},{value:"func ServiceBrokerExists",id:"func-servicebrokerexists",children:[]},{value:"func ServiceBrokerLabelExists",id:"func-servicebrokerlabelexists",children:[]},{value:"func ServiceBrokerUpdateRequestAnnotationExists",id:"func-servicebrokerupdaterequestannotationexists",children:[]},{value:"func ServiceBrokerUpdateRequestExists",id:"func-servicebrokerupdaterequestexists",children:[]},{value:"func ServiceBrokerUpdateRequestLabelExists",id:"func-servicebrokerupdaterequestlabelexists",children:[]},{value:"func ServiceDashboardClientExists",id:"func-servicedashboardclientexists",children:[]},{value:"func ServiceExists",id:"func-serviceexists",children:[]},{value:"func ServiceInstanceAnnotationExists",id:"func-serviceinstanceannotationexists",children:[]},{value:"func ServiceInstanceExists",id:"func-serviceinstanceexists",children:[]},{value:"func ServiceInstanceLabelExists",id:"func-serviceinstancelabelexists",children:[]},{value:"func ServiceInstanceOperationExists",id:"func-serviceinstanceoperationexists",children:[]},{value:"func ServiceKeyAnnotationExists",id:"func-servicekeyannotationexists",children:[]},{value:"func ServiceKeyExists",id:"func-servicekeyexists",children:[]},{value:"func ServiceKeyLabelExists",id:"func-servicekeylabelexists",children:[]},{value:"func ServiceKeyOperationExists",id:"func-servicekeyoperationexists",children:[]},{value:"func ServiceOfferingAnnotationExists",id:"func-serviceofferingannotationexists",children:[]},{value:"func ServiceOfferingLabelExists",id:"func-serviceofferinglabelexists",children:[]},{value:"func ServicePlanAnnotationExists",id:"func-serviceplanannotationexists",children:[]},{value:"func ServicePlanExists",id:"func-serviceplanexists",children:[]},{value:"func ServicePlanLabelExists",id:"func-serviceplanlabelexists",children:[]},{value:"func ServicePlanVisibilityExists",id:"func-serviceplanvisibilityexists",children:[]},{value:"func ServiceUsageEventExists",id:"func-serviceusageeventexists",children:[]},{value:"func SidecarExists",id:"func-sidecarexists",children:[]},{value:"func SidecarProcessTypeExists",id:"func-sidecarprocesstypeexists",children:[]},{value:"func SpaceAnnotationExists",id:"func-spaceannotationexists",children:[]},{value:"func SpaceExists",id:"func-spaceexists",children:[]},{value:"func SpaceLabelExists",id:"func-spacelabelexists",children:[]},{value:"func SpaceQuotaDefinitionExists",id:"func-spacequotadefinitionexists",children:[]},{value:"func SpacesApplicationSupporterExists",id:"func-spacesapplicationsupporterexists",children:[]},{value:"func SpacesAuditorExists",id:"func-spacesauditorexists",children:[]},{value:"func SpacesDeveloperExists",id:"func-spacesdeveloperexists",children:[]},{value:"func SpacesManagerExists",id:"func-spacesmanagerexists",children:[]},{value:"func StackAnnotationExists",id:"func-stackannotationexists",children:[]},{value:"func StackExists",id:"func-stackexists",children:[]},{value:"func StackLabelExists",id:"func-stacklabelexists",children:[]},{value:"func StagingSecurityGroupsSpaceExists",id:"func-stagingsecuritygroupsspaceexists",children:[]},{value:"func TaskAnnotationExists",id:"func-taskannotationexists",children:[]},{value:"func TaskExists",id:"func-taskexists",children:[]},{value:"func TaskLabelExists",id:"func-tasklabelexists",children:[]},{value:"func UserAnnotationExists",id:"func-userannotationexists",children:[]},{value:"func UserExists",id:"func-userexists",children:[]},{value:"func UserLabelExists",id:"func-userlabelexists",children:[]},{value:"func buildUpsertQueryPostgres",id:"func-buildupsertquerypostgres",children:[]},{value:"func makeCacheKey",id:"func-makecachekey",children:[]},{value:"func removeIsolationSegmentsFromOrganizationsSlice",id:"func-removeisolationsegmentsfromorganizationsslice",children:[]},{value:"func removeOrganizationsFromIsolationSegmentsSlice",id:"func-removeorganizationsfromisolationsegmentsslice",children:[]},{value:"func removeSharedServiceInstancesFromSpacesSlice",id:"func-removesharedserviceinstancesfromspacesslice",children:[]},{value:"func removeSpacesFromSharedServiceInstancesSlice",id:"func-removespacesfromsharedserviceinstancesslice",children:[]},{value:"type App",id:"type-app",children:[{value:"func FindApp",id:"func-findapp",children:[]}]},{value:"type AppAnnotation",id:"type-appannotation",children:[{value:"func FindAppAnnotation",id:"func-findappannotation",children:[]}]},{value:"type AppAnnotationDeleter",id:"type-appannotationdeleter",children:[]},{value:"type AppAnnotationFinder",id:"type-appannotationfinder",children:[]},{value:"type AppAnnotationFinisher",id:"type-appannotationfinisher",children:[]},{value:"type AppAnnotationInserter",id:"type-appannotationinserter",children:[]},{value:"type AppAnnotationReloader",id:"type-appannotationreloader",children:[]},{value:"type AppAnnotationSlice",id:"type-appannotationslice",children:[]},{value:"type AppAnnotationUpdater",id:"type-appannotationupdater",children:[]},{value:"type AppAnnotationUpserter",id:"type-appannotationupserter",children:[]},{value:"type AppDeleter",id:"type-appdeleter",children:[]},{value:"type AppEvent",id:"type-appevent",children:[{value:"func FindAppEvent",id:"func-findappevent",children:[]}]},{value:"type AppEventDeleter",id:"type-appeventdeleter",children:[]},{value:"type AppEventFinder",id:"type-appeventfinder",children:[]},{value:"type AppEventFinisher",id:"type-appeventfinisher",children:[]},{value:"type AppEventInserter",id:"type-appeventinserter",children:[]},{value:"type AppEventReloader",id:"type-appeventreloader",children:[]},{value:"type AppEventSlice",id:"type-appeventslice",children:[]},{value:"type AppEventUpdater",id:"type-appeventupdater",children:[]},{value:"type AppEventUpserter",id:"type-appeventupserter",children:[]},{value:"type AppFinder",id:"type-appfinder",children:[]},{value:"type AppFinisher",id:"type-appfinisher",children:[]},{value:"type AppInserter",id:"type-appinserter",children:[]},{value:"type AppLabel",id:"type-applabel",children:[{value:"func FindAppLabel",id:"func-findapplabel",children:[]}]},{value:"type AppLabelDeleter",id:"type-applabeldeleter",children:[]},{value:"type AppLabelFinder",id:"type-applabelfinder",children:[]},{value:"type AppLabelFinisher",id:"type-applabelfinisher",children:[]},{value:"type AppLabelInserter",id:"type-applabelinserter",children:[]},{value:"type AppLabelReloader",id:"type-applabelreloader",children:[]},{value:"type AppLabelSlice",id:"type-applabelslice",children:[]},{value:"type AppLabelUpdater",id:"type-applabelupdater",children:[]},{value:"type AppLabelUpserter",id:"type-applabelupserter",children:[]},{value:"type AppReloader",id:"type-appreloader",children:[]},{value:"type AppSlice",id:"type-appslice",children:[]},{value:"type AppUpdater",id:"type-appupdater",children:[]},{value:"type AppUpserter",id:"type-appupserter",children:[]},{value:"type AppUsageEvent",id:"type-appusageevent",children:[{value:"func FindAppUsageEvent",id:"func-findappusageevent",children:[]}]},{value:"type AppUsageEventDeleter",id:"type-appusageeventdeleter",children:[]},{value:"type AppUsageEventFinder",id:"type-appusageeventfinder",children:[]},{value:"type AppUsageEventFinisher",id:"type-appusageeventfinisher",children:[]},{value:"type AppUsageEventInserter",id:"type-appusageeventinserter",children:[]},{value:"type AppUsageEventReloader",id:"type-appusageeventreloader",children:[]},{value:"type AppUsageEventSlice",id:"type-appusageeventslice",children:[]},{value:"type AppUsageEventUpdater",id:"type-appusageeventupdater",children:[]},{value:"type AppUsageEventUpserter",id:"type-appusageeventupserter",children:[]},{value:"type Build",id:"type-build",children:[{value:"func FindBuild",id:"func-findbuild",children:[]}]},{value:"type BuildAnnotation",id:"type-buildannotation",children:[{value:"func FindBuildAnnotation",id:"func-findbuildannotation",children:[]}]},{value:"type BuildAnnotationDeleter",id:"type-buildannotationdeleter",children:[]},{value:"type BuildAnnotationFinder",id:"type-buildannotationfinder",children:[]},{value:"type BuildAnnotationFinisher",id:"type-buildannotationfinisher",children:[]},{value:"type BuildAnnotationInserter",id:"type-buildannotationinserter",children:[]},{value:"type BuildAnnotationReloader",id:"type-buildannotationreloader",children:[]},{value:"type BuildAnnotationSlice",id:"type-buildannotationslice",children:[]},{value:"type BuildAnnotationUpdater",id:"type-buildannotationupdater",children:[]},{value:"type BuildAnnotationUpserter",id:"type-buildannotationupserter",children:[]},{value:"type BuildDeleter",id:"type-builddeleter",children:[]},{value:"type BuildFinder",id:"type-buildfinder",children:[]},{value:"type BuildFinisher",id:"type-buildfinisher",children:[]},{value:"type BuildInserter",id:"type-buildinserter",children:[]},{value:"type BuildLabel",id:"type-buildlabel",children:[{value:"func FindBuildLabel",id:"func-findbuildlabel",children:[]}]},{value:"type BuildLabelDeleter",id:"type-buildlabeldeleter",children:[]},{value:"type BuildLabelFinder",id:"type-buildlabelfinder",children:[]},{value:"type BuildLabelFinisher",id:"type-buildlabelfinisher",children:[]},{value:"type BuildLabelInserter",id:"type-buildlabelinserter",children:[]},{value:"type BuildLabelReloader",id:"type-buildlabelreloader",children:[]},{value:"type BuildLabelSlice",id:"type-buildlabelslice",children:[]},{value:"type BuildLabelUpdater",id:"type-buildlabelupdater",children:[]},{value:"type BuildLabelUpserter",id:"type-buildlabelupserter",children:[]},{value:"type BuildReloader",id:"type-buildreloader",children:[]},{value:"type BuildSlice",id:"type-buildslice",children:[]},{value:"type BuildUpdater",id:"type-buildupdater",children:[]},{value:"type BuildUpserter",id:"type-buildupserter",children:[]},{value:"type Buildpack",id:"type-buildpack",children:[{value:"func FindBuildpack",id:"func-findbuildpack",children:[]}]},{value:"type BuildpackAnnotation",id:"type-buildpackannotation",children:[{value:"func FindBuildpackAnnotation",id:"func-findbuildpackannotation",children:[]}]},{value:"type BuildpackAnnotationDeleter",id:"type-buildpackannotationdeleter",children:[]},{value:"type BuildpackAnnotationFinder",id:"type-buildpackannotationfinder",children:[]},{value:"type BuildpackAnnotationFinisher",id:"type-buildpackannotationfinisher",children:[]},{value:"type BuildpackAnnotationInserter",id:"type-buildpackannotationinserter",children:[]},{value:"type BuildpackAnnotationReloader",id:"type-buildpackannotationreloader",children:[]},{value:"type BuildpackAnnotationSlice",id:"type-buildpackannotationslice",children:[]},{value:"type BuildpackAnnotationUpdater",id:"type-buildpackannotationupdater",children:[]},{value:"type BuildpackAnnotationUpserter",id:"type-buildpackannotationupserter",children:[]},{value:"type BuildpackDeleter",id:"type-buildpackdeleter",children:[]},{value:"type BuildpackFinder",id:"type-buildpackfinder",children:[]},{value:"type BuildpackFinisher",id:"type-buildpackfinisher",children:[]},{value:"type BuildpackInserter",id:"type-buildpackinserter",children:[]},{value:"type BuildpackLabel",id:"type-buildpacklabel",children:[{value:"func FindBuildpackLabel",id:"func-findbuildpacklabel",children:[]}]},{value:"type BuildpackLabelDeleter",id:"type-buildpacklabeldeleter",children:[]},{value:"type BuildpackLabelFinder",id:"type-buildpacklabelfinder",children:[]},{value:"type BuildpackLabelFinisher",id:"type-buildpacklabelfinisher",children:[]},{value:"type BuildpackLabelInserter",id:"type-buildpacklabelinserter",children:[]},{value:"type BuildpackLabelReloader",id:"type-buildpacklabelreloader",children:[]},{value:"type BuildpackLabelSlice",id:"type-buildpacklabelslice",children:[]},{value:"type BuildpackLabelUpdater",id:"type-buildpacklabelupdater",children:[]},{value:"type BuildpackLabelUpserter",id:"type-buildpacklabelupserter",children:[]},{value:"type BuildpackLifecycleBuildpack",id:"type-buildpacklifecyclebuildpack",children:[{value:"func FindBuildpackLifecycleBuildpack",id:"func-findbuildpacklifecyclebuildpack",children:[]}]},{value:"type BuildpackLifecycleBuildpackDeleter",id:"type-buildpacklifecyclebuildpackdeleter",children:[]},{value:"type BuildpackLifecycleBuildpackFinder",id:"type-buildpacklifecyclebuildpackfinder",children:[]},{value:"type BuildpackLifecycleBuildpackFinisher",id:"type-buildpacklifecyclebuildpackfinisher",children:[]},{value:"type BuildpackLifecycleBuildpackInserter",id:"type-buildpacklifecyclebuildpackinserter",children:[]},{value:"type BuildpackLifecycleBuildpackReloader",id:"type-buildpacklifecyclebuildpackreloader",children:[]},{value:"type BuildpackLifecycleBuildpackSlice",id:"type-buildpacklifecyclebuildpackslice",children:[]},{value:"type BuildpackLifecycleBuildpackUpdater",id:"type-buildpacklifecyclebuildpackupdater",children:[]},{value:"type BuildpackLifecycleBuildpackUpserter",id:"type-buildpacklifecyclebuildpackupserter",children:[]},{value:"type BuildpackLifecycleDatum",id:"type-buildpacklifecycledatum",children:[{value:"func FindBuildpackLifecycleDatum",id:"func-findbuildpacklifecycledatum",children:[]}]},{value:"type BuildpackLifecycleDatumDeleter",id:"type-buildpacklifecycledatumdeleter",children:[]},{value:"type BuildpackLifecycleDatumFinder",id:"type-buildpacklifecycledatumfinder",children:[]},{value:"type BuildpackLifecycleDatumFinisher",id:"type-buildpacklifecycledatumfinisher",children:[]},{value:"type BuildpackLifecycleDatumInserter",id:"type-buildpacklifecycledatuminserter",children:[]},{value:"type BuildpackLifecycleDatumReloader",id:"type-buildpacklifecycledatumreloader",children:[]},{value:"type BuildpackLifecycleDatumSlice",id:"type-buildpacklifecycledatumslice",children:[]},{value:"type BuildpackLifecycleDatumUpdater",id:"type-buildpacklifecycledatumupdater",children:[]},{value:"type BuildpackLifecycleDatumUpserter",id:"type-buildpacklifecycledatumupserter",children:[]},{value:"type BuildpackReloader",id:"type-buildpackreloader",children:[]},{value:"type BuildpackSlice",id:"type-buildpackslice",children:[]},{value:"type BuildpackUpdater",id:"type-buildpackupdater",children:[]},{value:"type BuildpackUpserter",id:"type-buildpackupserter",children:[]},{value:"type ClockJob",id:"type-clockjob",children:[{value:"func FindClockJob",id:"func-findclockjob",children:[]}]},{value:"type ClockJobDeleter",id:"type-clockjobdeleter",children:[]},{value:"type ClockJobFinder",id:"type-clockjobfinder",children:[]},{value:"type ClockJobFinisher",id:"type-clockjobfinisher",children:[]},{value:"type ClockJobInserter",id:"type-clockjobinserter",children:[]},{value:"type ClockJobReloader",id:"type-clockjobreloader",children:[]},{value:"type ClockJobSlice",id:"type-clockjobslice",children:[]},{value:"type ClockJobUpdater",id:"type-clockjobupdater",children:[]},{value:"type ClockJobUpserter",id:"type-clockjobupserter",children:[]},{value:"type DelayedJob",id:"type-delayedjob",children:[{value:"func FindDelayedJob",id:"func-finddelayedjob",children:[]}]},{value:"type DelayedJobDeleter",id:"type-delayedjobdeleter",children:[]},{value:"type DelayedJobFinder",id:"type-delayedjobfinder",children:[]},{value:"type DelayedJobFinisher",id:"type-delayedjobfinisher",children:[]},{value:"type DelayedJobInserter",id:"type-delayedjobinserter",children:[]},{value:"type DelayedJobReloader",id:"type-delayedjobreloader",children:[]},{value:"type DelayedJobSlice",id:"type-delayedjobslice",children:[]},{value:"type DelayedJobUpdater",id:"type-delayedjobupdater",children:[]},{value:"type DelayedJobUpserter",id:"type-delayedjobupserter",children:[]},{value:"type Deployment",id:"type-deployment",children:[{value:"func FindDeployment",id:"func-finddeployment",children:[]}]},{value:"type DeploymentAnnotation",id:"type-deploymentannotation",children:[{value:"func FindDeploymentAnnotation",id:"func-finddeploymentannotation",children:[]}]},{value:"type DeploymentAnnotationDeleter",id:"type-deploymentannotationdeleter",children:[]},{value:"type DeploymentAnnotationFinder",id:"type-deploymentannotationfinder",children:[]},{value:"type DeploymentAnnotationFinisher",id:"type-deploymentannotationfinisher",children:[]},{value:"type DeploymentAnnotationInserter",id:"type-deploymentannotationinserter",children:[]},{value:"type DeploymentAnnotationReloader",id:"type-deploymentannotationreloader",children:[]},{value:"type DeploymentAnnotationSlice",id:"type-deploymentannotationslice",children:[]},{value:"type DeploymentAnnotationUpdater",id:"type-deploymentannotationupdater",children:[]},{value:"type DeploymentAnnotationUpserter",id:"type-deploymentannotationupserter",children:[]},{value:"type DeploymentDeleter",id:"type-deploymentdeleter",children:[]},{value:"type DeploymentFinder",id:"type-deploymentfinder",children:[]},{value:"type DeploymentFinisher",id:"type-deploymentfinisher",children:[]},{value:"type DeploymentInserter",id:"type-deploymentinserter",children:[]},{value:"type DeploymentLabel",id:"type-deploymentlabel",children:[{value:"func FindDeploymentLabel",id:"func-finddeploymentlabel",children:[]}]},{value:"type DeploymentLabelDeleter",id:"type-deploymentlabeldeleter",children:[]},{value:"type DeploymentLabelFinder",id:"type-deploymentlabelfinder",children:[]},{value:"type DeploymentLabelFinisher",id:"type-deploymentlabelfinisher",children:[]},{value:"type DeploymentLabelInserter",id:"type-deploymentlabelinserter",children:[]},{value:"type DeploymentLabelReloader",id:"type-deploymentlabelreloader",children:[]},{value:"type DeploymentLabelSlice",id:"type-deploymentlabelslice",children:[]},{value:"type DeploymentLabelUpdater",id:"type-deploymentlabelupdater",children:[]},{value:"type DeploymentLabelUpserter",id:"type-deploymentlabelupserter",children:[]},{value:"type DeploymentProcess",id:"type-deploymentprocess",children:[{value:"func FindDeploymentProcess",id:"func-finddeploymentprocess",children:[]}]},{value:"type DeploymentProcessDeleter",id:"type-deploymentprocessdeleter",children:[]},{value:"type DeploymentProcessFinder",id:"type-deploymentprocessfinder",children:[]},{value:"type DeploymentProcessFinisher",id:"type-deploymentprocessfinisher",children:[]},{value:"type DeploymentProcessInserter",id:"type-deploymentprocessinserter",children:[]},{value:"type DeploymentProcessReloader",id:"type-deploymentprocessreloader",children:[]},{value:"type DeploymentProcessSlice",id:"type-deploymentprocessslice",children:[]},{value:"type DeploymentProcessUpdater",id:"type-deploymentprocessupdater",children:[]},{value:"type DeploymentProcessUpserter",id:"type-deploymentprocessupserter",children:[]},{value:"type DeploymentReloader",id:"type-deploymentreloader",children:[]},{value:"type DeploymentSlice",id:"type-deploymentslice",children:[]},{value:"type DeploymentUpdater",id:"type-deploymentupdater",children:[]},{value:"type DeploymentUpserter",id:"type-deploymentupserter",children:[]},{value:"type Domain",id:"type-domain",children:[{value:"func FindDomain",id:"func-finddomain",children:[]}]},{value:"type DomainAnnotation",id:"type-domainannotation",children:[{value:"func FindDomainAnnotation",id:"func-finddomainannotation",children:[]}]},{value:"type DomainAnnotationDeleter",id:"type-domainannotationdeleter",children:[]},{value:"type DomainAnnotationFinder",id:"type-domainannotationfinder",children:[]},{value:"type DomainAnnotationFinisher",id:"type-domainannotationfinisher",children:[]},{value:"type DomainAnnotationInserter",id:"type-domainannotationinserter",children:[]},{value:"type DomainAnnotationReloader",id:"type-domainannotationreloader",children:[]},{value:"type DomainAnnotationSlice",id:"type-domainannotationslice",children:[]},{value:"type DomainAnnotationUpdater",id:"type-domainannotationupdater",children:[]},{value:"type DomainAnnotationUpserter",id:"type-domainannotationupserter",children:[]},{value:"type DomainDeleter",id:"type-domaindeleter",children:[]},{value:"type DomainFinder",id:"type-domainfinder",children:[]},{value:"type DomainFinisher",id:"type-domainfinisher",children:[]},{value:"type DomainInserter",id:"type-domaininserter",children:[]},{value:"type DomainLabel",id:"type-domainlabel",children:[{value:"func FindDomainLabel",id:"func-finddomainlabel",children:[]}]},{value:"type DomainLabelDeleter",id:"type-domainlabeldeleter",children:[]},{value:"type DomainLabelFinder",id:"type-domainlabelfinder",children:[]},{value:"type DomainLabelFinisher",id:"type-domainlabelfinisher",children:[]},{value:"type DomainLabelInserter",id:"type-domainlabelinserter",children:[]},{value:"type DomainLabelReloader",id:"type-domainlabelreloader",children:[]},{value:"type DomainLabelSlice",id:"type-domainlabelslice",children:[]},{value:"type DomainLabelUpdater",id:"type-domainlabelupdater",children:[]},{value:"type DomainLabelUpserter",id:"type-domainlabelupserter",children:[]},{value:"type DomainReloader",id:"type-domainreloader",children:[]},{value:"type DomainSlice",id:"type-domainslice",children:[]},{value:"type DomainUpdater",id:"type-domainupdater",children:[]},{value:"type DomainUpserter",id:"type-domainupserter",children:[]},{value:"type Droplet",id:"type-droplet",children:[{value:"func FindDroplet",id:"func-finddroplet",children:[]}]},{value:"type DropletAnnotation",id:"type-dropletannotation",children:[{value:"func FindDropletAnnotation",id:"func-finddropletannotation",children:[]}]},{value:"type DropletAnnotationDeleter",id:"type-dropletannotationdeleter",children:[]},{value:"type DropletAnnotationFinder",id:"type-dropletannotationfinder",children:[]},{value:"type DropletAnnotationFinisher",id:"type-dropletannotationfinisher",children:[]},{value:"type DropletAnnotationInserter",id:"type-dropletannotationinserter",children:[]},{value:"type DropletAnnotationReloader",id:"type-dropletannotationreloader",children:[]},{value:"type DropletAnnotationSlice",id:"type-dropletannotationslice",children:[]},{value:"type DropletAnnotationUpdater",id:"type-dropletannotationupdater",children:[]},{value:"type DropletAnnotationUpserter",id:"type-dropletannotationupserter",children:[]},{value:"type DropletDeleter",id:"type-dropletdeleter",children:[]},{value:"type DropletFinder",id:"type-dropletfinder",children:[]},{value:"type DropletFinisher",id:"type-dropletfinisher",children:[]},{value:"type DropletInserter",id:"type-dropletinserter",children:[]},{value:"type DropletLabel",id:"type-dropletlabel",children:[{value:"func FindDropletLabel",id:"func-finddropletlabel",children:[]}]},{value:"type DropletLabelDeleter",id:"type-dropletlabeldeleter",children:[]},{value:"type DropletLabelFinder",id:"type-dropletlabelfinder",children:[]},{value:"type DropletLabelFinisher",id:"type-dropletlabelfinisher",children:[]},{value:"type DropletLabelInserter",id:"type-dropletlabelinserter",children:[]},{value:"type DropletLabelReloader",id:"type-dropletlabelreloader",children:[]},{value:"type DropletLabelSlice",id:"type-dropletlabelslice",children:[]},{value:"type DropletLabelUpdater",id:"type-dropletlabelupdater",children:[]},{value:"type DropletLabelUpserter",id:"type-dropletlabelupserter",children:[]},{value:"type DropletReloader",id:"type-dropletreloader",children:[]},{value:"type DropletSlice",id:"type-dropletslice",children:[]},{value:"type DropletUpdater",id:"type-dropletupdater",children:[]},{value:"type DropletUpserter",id:"type-dropletupserter",children:[]},{value:"type EncryptionKeySentinel",id:"type-encryptionkeysentinel",children:[{value:"func FindEncryptionKeySentinel",id:"func-findencryptionkeysentinel",children:[]}]},{value:"type EncryptionKeySentinelDeleter",id:"type-encryptionkeysentineldeleter",children:[]},{value:"type EncryptionKeySentinelFinder",id:"type-encryptionkeysentinelfinder",children:[]},{value:"type EncryptionKeySentinelFinisher",id:"type-encryptionkeysentinelfinisher",children:[]},{value:"type EncryptionKeySentinelInserter",id:"type-encryptionkeysentinelinserter",children:[]},{value:"type EncryptionKeySentinelReloader",id:"type-encryptionkeysentinelreloader",children:[]},{value:"type EncryptionKeySentinelSlice",id:"type-encryptionkeysentinelslice",children:[]},{value:"type EncryptionKeySentinelUpdater",id:"type-encryptionkeysentinelupdater",children:[]},{value:"type EncryptionKeySentinelUpserter",id:"type-encryptionkeysentinelupserter",children:[]},{value:"type EnvGroup",id:"type-envgroup",children:[{value:"func FindEnvGroup",id:"func-findenvgroup",children:[]}]},{value:"type EnvGroupDeleter",id:"type-envgroupdeleter",children:[]},{value:"type EnvGroupFinder",id:"type-envgroupfinder",children:[]},{value:"type EnvGroupFinisher",id:"type-envgroupfinisher",children:[]},{value:"type EnvGroupInserter",id:"type-envgroupinserter",children:[]},{value:"type EnvGroupReloader",id:"type-envgroupreloader",children:[]},{value:"type EnvGroupSlice",id:"type-envgroupslice",children:[]},{value:"type EnvGroupUpdater",id:"type-envgroupupdater",children:[]},{value:"type EnvGroupUpserter",id:"type-envgroupupserter",children:[]},{value:"type Event",id:"type-event",children:[{value:"func FindEvent",id:"func-findevent",children:[]}]},{value:"type EventDeleter",id:"type-eventdeleter",children:[]},{value:"type EventFinder",id:"type-eventfinder",children:[]},{value:"type EventFinisher",id:"type-eventfinisher",children:[]},{value:"type EventInserter",id:"type-eventinserter",children:[]},{value:"type EventReloader",id:"type-eventreloader",children:[]},{value:"type EventSlice",id:"type-eventslice",children:[]},{value:"type EventUpdater",id:"type-eventupdater",children:[]},{value:"type EventUpserter",id:"type-eventupserter",children:[]},{value:"type FeatureFlag",id:"type-featureflag",children:[{value:"func FindFeatureFlag",id:"func-findfeatureflag",children:[]}]},{value:"type FeatureFlagDeleter",id:"type-featureflagdeleter",children:[]},{value:"type FeatureFlagFinder",id:"type-featureflagfinder",children:[]},{value:"type FeatureFlagFinisher",id:"type-featureflagfinisher",children:[]},{value:"type FeatureFlagInserter",id:"type-featureflaginserter",children:[]},{value:"type FeatureFlagReloader",id:"type-featureflagreloader",children:[]},{value:"type FeatureFlagSlice",id:"type-featureflagslice",children:[]},{value:"type FeatureFlagUpdater",id:"type-featureflagupdater",children:[]},{value:"type FeatureFlagUpserter",id:"type-featureflagupserter",children:[]},{value:"type IsolationSegment",id:"type-isolationsegment",children:[{value:"func FindIsolationSegment",id:"func-findisolationsegment",children:[]}]},{value:"type IsolationSegmentAnnotation",id:"type-isolationsegmentannotation",children:[{value:"func FindIsolationSegmentAnnotation",id:"func-findisolationsegmentannotation",children:[]}]},{value:"type IsolationSegmentAnnotationDeleter",id:"type-isolationsegmentannotationdeleter",children:[]},{value:"type IsolationSegmentAnnotationFinder",id:"type-isolationsegmentannotationfinder",children:[]},{value:"type IsolationSegmentAnnotationFinisher",id:"type-isolationsegmentannotationfinisher",children:[]},{value:"type IsolationSegmentAnnotationInserter",id:"type-isolationsegmentannotationinserter",children:[]},{value:"type IsolationSegmentAnnotationReloader",id:"type-isolationsegmentannotationreloader",children:[]},{value:"type IsolationSegmentAnnotationSlice",id:"type-isolationsegmentannotationslice",children:[]},{value:"type IsolationSegmentAnnotationUpdater",id:"type-isolationsegmentannotationupdater",children:[]},{value:"type IsolationSegmentAnnotationUpserter",id:"type-isolationsegmentannotationupserter",children:[]},{value:"type IsolationSegmentDeleter",id:"type-isolationsegmentdeleter",children:[]},{value:"type IsolationSegmentFinder",id:"type-isolationsegmentfinder",children:[]},{value:"type IsolationSegmentFinisher",id:"type-isolationsegmentfinisher",children:[]},{value:"type IsolationSegmentInserter",id:"type-isolationsegmentinserter",children:[]},{value:"type IsolationSegmentLabel",id:"type-isolationsegmentlabel",children:[{value:"func FindIsolationSegmentLabel",id:"func-findisolationsegmentlabel",children:[]}]},{value:"type IsolationSegmentLabelDeleter",id:"type-isolationsegmentlabeldeleter",children:[]},{value:"type IsolationSegmentLabelFinder",id:"type-isolationsegmentlabelfinder",children:[]},{value:"type IsolationSegmentLabelFinisher",id:"type-isolationsegmentlabelfinisher",children:[]},{value:"type IsolationSegmentLabelInserter",id:"type-isolationsegmentlabelinserter",children:[]},{value:"type IsolationSegmentLabelReloader",id:"type-isolationsegmentlabelreloader",children:[]},{value:"type IsolationSegmentLabelSlice",id:"type-isolationsegmentlabelslice",children:[]},{value:"type IsolationSegmentLabelUpdater",id:"type-isolationsegmentlabelupdater",children:[]},{value:"type IsolationSegmentLabelUpserter",id:"type-isolationsegmentlabelupserter",children:[]},{value:"type IsolationSegmentReloader",id:"type-isolationsegmentreloader",children:[]},{value:"type IsolationSegmentSlice",id:"type-isolationsegmentslice",children:[]},{value:"type IsolationSegmentUpdater",id:"type-isolationsegmentupdater",children:[]},{value:"type IsolationSegmentUpserter",id:"type-isolationsegmentupserter",children:[]},{value:"type Job",id:"type-job",children:[{value:"func FindJob",id:"func-findjob",children:[]}]},{value:"type JobDeleter",id:"type-jobdeleter",children:[]},{value:"type JobFinder",id:"type-jobfinder",children:[]},{value:"type JobFinisher",id:"type-jobfinisher",children:[]},{value:"type JobInserter",id:"type-jobinserter",children:[]},{value:"type JobReloader",id:"type-jobreloader",children:[]},{value:"type JobSlice",id:"type-jobslice",children:[]},{value:"type JobUpdater",id:"type-jobupdater",children:[]},{value:"type JobUpserter",id:"type-jobupserter",children:[]},{value:"type JobWarning",id:"type-jobwarning",children:[{value:"func FindJobWarning",id:"func-findjobwarning",children:[]}]},{value:"type JobWarningDeleter",id:"type-jobwarningdeleter",children:[]},{value:"type JobWarningFinder",id:"type-jobwarningfinder",children:[]},{value:"type JobWarningFinisher",id:"type-jobwarningfinisher",children:[]},{value:"type JobWarningInserter",id:"type-jobwarninginserter",children:[]},{value:"type JobWarningReloader",id:"type-jobwarningreloader",children:[]},{value:"type JobWarningSlice",id:"type-jobwarningslice",children:[]},{value:"type JobWarningUpdater",id:"type-jobwarningupdater",children:[]},{value:"type JobWarningUpserter",id:"type-jobwarningupserter",children:[]},{value:"type KpackLifecycleDatum",id:"type-kpacklifecycledatum",children:[{value:"func FindKpackLifecycleDatum",id:"func-findkpacklifecycledatum",children:[]}]},{value:"type KpackLifecycleDatumDeleter",id:"type-kpacklifecycledatumdeleter",children:[]},{value:"type KpackLifecycleDatumFinder",id:"type-kpacklifecycledatumfinder",children:[]},{value:"type KpackLifecycleDatumFinisher",id:"type-kpacklifecycledatumfinisher",children:[]},{value:"type KpackLifecycleDatumInserter",id:"type-kpacklifecycledatuminserter",children:[]},{value:"type KpackLifecycleDatumReloader",id:"type-kpacklifecycledatumreloader",children:[]},{value:"type KpackLifecycleDatumSlice",id:"type-kpacklifecycledatumslice",children:[]},{value:"type KpackLifecycleDatumUpdater",id:"type-kpacklifecycledatumupdater",children:[]},{value:"type KpackLifecycleDatumUpserter",id:"type-kpacklifecycledatumupserter",children:[]},{value:"type Locking",id:"type-locking",children:[{value:"func FindLocking",id:"func-findlocking",children:[]}]},{value:"type LockingDeleter",id:"type-lockingdeleter",children:[]},{value:"type LockingFinder",id:"type-lockingfinder",children:[]},{value:"type LockingFinisher",id:"type-lockingfinisher",children:[]},{value:"type LockingInserter",id:"type-lockinginserter",children:[]},{value:"type LockingReloader",id:"type-lockingreloader",children:[]},{value:"type LockingSlice",id:"type-lockingslice",children:[]},{value:"type LockingUpdater",id:"type-lockingupdater",children:[]},{value:"type LockingUpserter",id:"type-lockingupserter",children:[]},{value:"type M",id:"type-m",children:[]},{value:"type Organization",id:"type-organization",children:[{value:"func FindOrganization",id:"func-findorganization",children:[]}]},{value:"type OrganizationAnnotation",id:"type-organizationannotation",children:[{value:"func FindOrganizationAnnotation",id:"func-findorganizationannotation",children:[]}]},{value:"type OrganizationAnnotationDeleter",id:"type-organizationannotationdeleter",children:[]},{value:"type OrganizationAnnotationFinder",id:"type-organizationannotationfinder",children:[]},{value:"type OrganizationAnnotationFinisher",id:"type-organizationannotationfinisher",children:[]},{value:"type OrganizationAnnotationInserter",id:"type-organizationannotationinserter",children:[]},{value:"type OrganizationAnnotationReloader",id:"type-organizationannotationreloader",children:[]},{value:"type OrganizationAnnotationSlice",id:"type-organizationannotationslice",children:[]},{value:"type OrganizationAnnotationUpdater",id:"type-organizationannotationupdater",children:[]},{value:"type OrganizationAnnotationUpserter",id:"type-organizationannotationupserter",children:[]},{value:"type OrganizationDeleter",id:"type-organizationdeleter",children:[]},{value:"type OrganizationFinder",id:"type-organizationfinder",children:[]},{value:"type OrganizationFinisher",id:"type-organizationfinisher",children:[]},{value:"type OrganizationInserter",id:"type-organizationinserter",children:[]},{value:"type OrganizationLabel",id:"type-organizationlabel",children:[{value:"func FindOrganizationLabel",id:"func-findorganizationlabel",children:[]}]},{value:"type OrganizationLabelDeleter",id:"type-organizationlabeldeleter",children:[]},{value:"type OrganizationLabelFinder",id:"type-organizationlabelfinder",children:[]},{value:"type OrganizationLabelFinisher",id:"type-organizationlabelfinisher",children:[]},{value:"type OrganizationLabelInserter",id:"type-organizationlabelinserter",children:[]},{value:"type OrganizationLabelReloader",id:"type-organizationlabelreloader",children:[]},{value:"type OrganizationLabelSlice",id:"type-organizationlabelslice",children:[]},{value:"type OrganizationLabelUpdater",id:"type-organizationlabelupdater",children:[]},{value:"type OrganizationLabelUpserter",id:"type-organizationlabelupserter",children:[]},{value:"type OrganizationReloader",id:"type-organizationreloader",children:[]},{value:"type OrganizationSlice",id:"type-organizationslice",children:[]},{value:"type OrganizationUpdater",id:"type-organizationupdater",children:[]},{value:"type OrganizationUpserter",id:"type-organizationupserter",children:[]},{value:"type OrganizationsAuditor",id:"type-organizationsauditor",children:[{value:"func FindOrganizationsAuditor",id:"func-findorganizationsauditor",children:[]}]},{value:"type OrganizationsAuditorDeleter",id:"type-organizationsauditordeleter",children:[]},{value:"type OrganizationsAuditorFinder",id:"type-organizationsauditorfinder",children:[]},{value:"type OrganizationsAuditorFinisher",id:"type-organizationsauditorfinisher",children:[]},{value:"type OrganizationsAuditorInserter",id:"type-organizationsauditorinserter",children:[]},{value:"type OrganizationsAuditorReloader",id:"type-organizationsauditorreloader",children:[]},{value:"type OrganizationsAuditorSlice",id:"type-organizationsauditorslice",children:[]},{value:"type OrganizationsAuditorUpdater",id:"type-organizationsauditorupdater",children:[]},{value:"type OrganizationsAuditorUpserter",id:"type-organizationsauditorupserter",children:[]},{value:"type OrganizationsBillingManager",id:"type-organizationsbillingmanager",children:[{value:"func FindOrganizationsBillingManager",id:"func-findorganizationsbillingmanager",children:[]}]},{value:"type OrganizationsBillingManagerDeleter",id:"type-organizationsbillingmanagerdeleter",children:[]},{value:"type OrganizationsBillingManagerFinder",id:"type-organizationsbillingmanagerfinder",children:[]},{value:"type OrganizationsBillingManagerFinisher",id:"type-organizationsbillingmanagerfinisher",children:[]},{value:"type OrganizationsBillingManagerInserter",id:"type-organizationsbillingmanagerinserter",children:[]},{value:"type OrganizationsBillingManagerReloader",id:"type-organizationsbillingmanagerreloader",children:[]},{value:"type OrganizationsBillingManagerSlice",id:"type-organizationsbillingmanagerslice",children:[]},{value:"type OrganizationsBillingManagerUpdater",id:"type-organizationsbillingmanagerupdater",children:[]},{value:"type OrganizationsBillingManagerUpserter",id:"type-organizationsbillingmanagerupserter",children:[]},{value:"type OrganizationsManager",id:"type-organizationsmanager",children:[{value:"func FindOrganizationsManager",id:"func-findorganizationsmanager",children:[]}]},{value:"type OrganizationsManagerDeleter",id:"type-organizationsmanagerdeleter",children:[]},{value:"type OrganizationsManagerFinder",id:"type-organizationsmanagerfinder",children:[]},{value:"type OrganizationsManagerFinisher",id:"type-organizationsmanagerfinisher",children:[]},{value:"type OrganizationsManagerInserter",id:"type-organizationsmanagerinserter",children:[]},{value:"type OrganizationsManagerReloader",id:"type-organizationsmanagerreloader",children:[]},{value:"type OrganizationsManagerSlice",id:"type-organizationsmanagerslice",children:[]},{value:"type OrganizationsManagerUpdater",id:"type-organizationsmanagerupdater",children:[]},{value:"type OrganizationsManagerUpserter",id:"type-organizationsmanagerupserter",children:[]},{value:"type OrganizationsPrivateDomain",id:"type-organizationsprivatedomain",children:[{value:"func FindOrganizationsPrivateDomain",id:"func-findorganizationsprivatedomain",children:[]}]},{value:"type OrganizationsPrivateDomainDeleter",id:"type-organizationsprivatedomaindeleter",children:[]},{value:"type OrganizationsPrivateDomainFinder",id:"type-organizationsprivatedomainfinder",children:[]},{value:"type OrganizationsPrivateDomainFinisher",id:"type-organizationsprivatedomainfinisher",children:[]},{value:"type OrganizationsPrivateDomainInserter",id:"type-organizationsprivatedomaininserter",children:[]},{value:"type OrganizationsPrivateDomainReloader",id:"type-organizationsprivatedomainreloader",children:[]},{value:"type OrganizationsPrivateDomainSlice",id:"type-organizationsprivatedomainslice",children:[]},{value:"type OrganizationsPrivateDomainUpdater",id:"type-organizationsprivatedomainupdater",children:[]},{value:"type OrganizationsPrivateDomainUpserter",id:"type-organizationsprivatedomainupserter",children:[]},{value:"type OrganizationsUser",id:"type-organizationsuser",children:[{value:"func FindOrganizationsUser",id:"func-findorganizationsuser",children:[]}]},{value:"type OrganizationsUserDeleter",id:"type-organizationsuserdeleter",children:[]},{value:"type OrganizationsUserFinder",id:"type-organizationsuserfinder",children:[]},{value:"type OrganizationsUserFinisher",id:"type-organizationsuserfinisher",children:[]},{value:"type OrganizationsUserInserter",id:"type-organizationsuserinserter",children:[]},{value:"type OrganizationsUserReloader",id:"type-organizationsuserreloader",children:[]},{value:"type OrganizationsUserSlice",id:"type-organizationsuserslice",children:[]},{value:"type OrganizationsUserUpdater",id:"type-organizationsuserupdater",children:[]},{value:"type OrganizationsUserUpserter",id:"type-organizationsuserupserter",children:[]},{value:"type OrphanedBlob",id:"type-orphanedblob",children:[{value:"func FindOrphanedBlob",id:"func-findorphanedblob",children:[]}]},{value:"type OrphanedBlobDeleter",id:"type-orphanedblobdeleter",children:[]},{value:"type OrphanedBlobFinder",id:"type-orphanedblobfinder",children:[]},{value:"type OrphanedBlobFinisher",id:"type-orphanedblobfinisher",children:[]},{value:"type OrphanedBlobInserter",id:"type-orphanedblobinserter",children:[]},{value:"type OrphanedBlobReloader",id:"type-orphanedblobreloader",children:[]},{value:"type OrphanedBlobSlice",id:"type-orphanedblobslice",children:[]},{value:"type OrphanedBlobUpdater",id:"type-orphanedblobupdater",children:[]},{value:"type OrphanedBlobUpserter",id:"type-orphanedblobupserter",children:[]},{value:"type Package",id:"type-package",children:[{value:"func FindPackage",id:"func-findpackage",children:[]}]},{value:"type PackageAnnotation",id:"type-packageannotation",children:[{value:"func FindPackageAnnotation",id:"func-findpackageannotation",children:[]}]},{value:"type PackageAnnotationDeleter",id:"type-packageannotationdeleter",children:[]},{value:"type PackageAnnotationFinder",id:"type-packageannotationfinder",children:[]},{value:"type PackageAnnotationFinisher",id:"type-packageannotationfinisher",children:[]},{value:"type PackageAnnotationInserter",id:"type-packageannotationinserter",children:[]},{value:"type PackageAnnotationReloader",id:"type-packageannotationreloader",children:[]},{value:"type PackageAnnotationSlice",id:"type-packageannotationslice",children:[]},{value:"type PackageAnnotationUpdater",id:"type-packageannotationupdater",children:[]},{value:"type PackageAnnotationUpserter",id:"type-packageannotationupserter",children:[]},{value:"type PackageDeleter",id:"type-packagedeleter",children:[]},{value:"type PackageFinder",id:"type-packagefinder",children:[]},{value:"type PackageFinisher",id:"type-packagefinisher",children:[]},{value:"type PackageInserter",id:"type-packageinserter",children:[]},{value:"type PackageLabel",id:"type-packagelabel",children:[{value:"func FindPackageLabel",id:"func-findpackagelabel",children:[]}]},{value:"type PackageLabelDeleter",id:"type-packagelabeldeleter",children:[]},{value:"type PackageLabelFinder",id:"type-packagelabelfinder",children:[]},{value:"type PackageLabelFinisher",id:"type-packagelabelfinisher",children:[]},{value:"type PackageLabelInserter",id:"type-packagelabelinserter",children:[]},{value:"type PackageLabelReloader",id:"type-packagelabelreloader",children:[]},{value:"type PackageLabelSlice",id:"type-packagelabelslice",children:[]},{value:"type PackageLabelUpdater",id:"type-packagelabelupdater",children:[]},{value:"type PackageLabelUpserter",id:"type-packagelabelupserter",children:[]},{value:"type PackageReloader",id:"type-packagereloader",children:[]},{value:"type PackageSlice",id:"type-packageslice",children:[]},{value:"type PackageUpdater",id:"type-packageupdater",children:[]},{value:"type PackageUpserter",id:"type-packageupserter",children:[]},{value:"type Process",id:"type-process",children:[{value:"func FindProcess",id:"func-findprocess",children:[]}]},{value:"type ProcessAnnotation",id:"type-processannotation",children:[{value:"func FindProcessAnnotation",id:"func-findprocessannotation",children:[]}]},{value:"type ProcessAnnotationDeleter",id:"type-processannotationdeleter",children:[]},{value:"type ProcessAnnotationFinder",id:"type-processannotationfinder",children:[]},{value:"type ProcessAnnotationFinisher",id:"type-processannotationfinisher",children:[]},{value:"type ProcessAnnotationInserter",id:"type-processannotationinserter",children:[]},{value:"type ProcessAnnotationReloader",id:"type-processannotationreloader",children:[]},{value:"type ProcessAnnotationSlice",id:"type-processannotationslice",children:[]},{value:"type ProcessAnnotationUpdater",id:"type-processannotationupdater",children:[]},{value:"type ProcessAnnotationUpserter",id:"type-processannotationupserter",children:[]},{value:"type ProcessDeleter",id:"type-processdeleter",children:[]},{value:"type ProcessFinder",id:"type-processfinder",children:[]},{value:"type ProcessFinisher",id:"type-processfinisher",children:[]},{value:"type ProcessInserter",id:"type-processinserter",children:[]},{value:"type ProcessLabel",id:"type-processlabel",children:[{value:"func FindProcessLabel",id:"func-findprocesslabel",children:[]}]},{value:"type ProcessLabelDeleter",id:"type-processlabeldeleter",children:[]},{value:"type ProcessLabelFinder",id:"type-processlabelfinder",children:[]},{value:"type ProcessLabelFinisher",id:"type-processlabelfinisher",children:[]},{value:"type ProcessLabelInserter",id:"type-processlabelinserter",children:[]},{value:"type ProcessLabelReloader",id:"type-processlabelreloader",children:[]},{value:"type ProcessLabelSlice",id:"type-processlabelslice",children:[]},{value:"type ProcessLabelUpdater",id:"type-processlabelupdater",children:[]},{value:"type ProcessLabelUpserter",id:"type-processlabelupserter",children:[]},{value:"type ProcessReloader",id:"type-processreloader",children:[]},{value:"type ProcessSlice",id:"type-processslice",children:[]},{value:"type ProcessUpdater",id:"type-processupdater",children:[]},{value:"type ProcessUpserter",id:"type-processupserter",children:[]},{value:"type QuotaDefinition",id:"type-quotadefinition",children:[{value:"func FindQuotaDefinition",id:"func-findquotadefinition",children:[]}]},{value:"type QuotaDefinitionDeleter",id:"type-quotadefinitiondeleter",children:[]},{value:"type QuotaDefinitionFinder",id:"type-quotadefinitionfinder",children:[]},{value:"type QuotaDefinitionFinisher",id:"type-quotadefinitionfinisher",children:[]},{value:"type QuotaDefinitionInserter",id:"type-quotadefinitioninserter",children:[]},{value:"type QuotaDefinitionReloader",id:"type-quotadefinitionreloader",children:[]},{value:"type QuotaDefinitionSlice",id:"type-quotadefinitionslice",children:[]},{value:"type QuotaDefinitionUpdater",id:"type-quotadefinitionupdater",children:[]},{value:"type QuotaDefinitionUpserter",id:"type-quotadefinitionupserter",children:[]},{value:"type RequestCount",id:"type-requestcount",children:[{value:"func FindRequestCount",id:"func-findrequestcount",children:[]}]},{value:"type RequestCountDeleter",id:"type-requestcountdeleter",children:[]},{value:"type RequestCountFinder",id:"type-requestcountfinder",children:[]},{value:"type RequestCountFinisher",id:"type-requestcountfinisher",children:[]},{value:"type RequestCountInserter",id:"type-requestcountinserter",children:[]},{value:"type RequestCountReloader",id:"type-requestcountreloader",children:[]},{value:"type RequestCountSlice",id:"type-requestcountslice",children:[]},{value:"type RequestCountUpdater",id:"type-requestcountupdater",children:[]},{value:"type RequestCountUpserter",id:"type-requestcountupserter",children:[]},{value:"type Revision",id:"type-revision",children:[{value:"func FindRevision",id:"func-findrevision",children:[]}]},{value:"type RevisionAnnotation",id:"type-revisionannotation",children:[{value:"func FindRevisionAnnotation",id:"func-findrevisionannotation",children:[]}]},{value:"type RevisionAnnotationDeleter",id:"type-revisionannotationdeleter",children:[]},{value:"type RevisionAnnotationFinder",id:"type-revisionannotationfinder",children:[]},{value:"type RevisionAnnotationFinisher",id:"type-revisionannotationfinisher",children:[]},{value:"type RevisionAnnotationInserter",id:"type-revisionannotationinserter",children:[]},{value:"type RevisionAnnotationReloader",id:"type-revisionannotationreloader",children:[]},{value:"type RevisionAnnotationSlice",id:"type-revisionannotationslice",children:[]},{value:"type RevisionAnnotationUpdater",id:"type-revisionannotationupdater",children:[]},{value:"type RevisionAnnotationUpserter",id:"type-revisionannotationupserter",children:[]},{value:"type RevisionDeleter",id:"type-revisiondeleter",children:[]},{value:"type RevisionFinder",id:"type-revisionfinder",children:[]},{value:"type RevisionFinisher",id:"type-revisionfinisher",children:[]},{value:"type RevisionInserter",id:"type-revisioninserter",children:[]},{value:"type RevisionLabel",id:"type-revisionlabel",children:[{value:"func FindRevisionLabel",id:"func-findrevisionlabel",children:[]}]},{value:"type RevisionLabelDeleter",id:"type-revisionlabeldeleter",children:[]},{value:"type RevisionLabelFinder",id:"type-revisionlabelfinder",children:[]},{value:"type RevisionLabelFinisher",id:"type-revisionlabelfinisher",children:[]},{value:"type RevisionLabelInserter",id:"type-revisionlabelinserter",children:[]},{value:"type RevisionLabelReloader",id:"type-revisionlabelreloader",children:[]},{value:"type RevisionLabelSlice",id:"type-revisionlabelslice",children:[]},{value:"type RevisionLabelUpdater",id:"type-revisionlabelupdater",children:[]},{value:"type RevisionLabelUpserter",id:"type-revisionlabelupserter",children:[]},{value:"type RevisionProcessCommand",id:"type-revisionprocesscommand",children:[{value:"func FindRevisionProcessCommand",id:"func-findrevisionprocesscommand",children:[]}]},{value:"type RevisionProcessCommandDeleter",id:"type-revisionprocesscommanddeleter",children:[]},{value:"type RevisionProcessCommandFinder",id:"type-revisionprocesscommandfinder",children:[]},{value:"type RevisionProcessCommandFinisher",id:"type-revisionprocesscommandfinisher",children:[]},{value:"type RevisionProcessCommandInserter",id:"type-revisionprocesscommandinserter",children:[]},{value:"type RevisionProcessCommandReloader",id:"type-revisionprocesscommandreloader",children:[]},{value:"type RevisionProcessCommandSlice",id:"type-revisionprocesscommandslice",children:[]},{value:"type RevisionProcessCommandUpdater",id:"type-revisionprocesscommandupdater",children:[]},{value:"type RevisionProcessCommandUpserter",id:"type-revisionprocesscommandupserter",children:[]},{value:"type RevisionReloader",id:"type-revisionreloader",children:[]},{value:"type RevisionSidecar",id:"type-revisionsidecar",children:[{value:"func FindRevisionSidecar",id:"func-findrevisionsidecar",children:[]}]},{value:"type RevisionSidecarDeleter",id:"type-revisionsidecardeleter",children:[]},{value:"type RevisionSidecarFinder",id:"type-revisionsidecarfinder",children:[]},{value:"type RevisionSidecarFinisher",id:"type-revisionsidecarfinisher",children:[]},{value:"type RevisionSidecarInserter",id:"type-revisionsidecarinserter",children:[]},{value:"type RevisionSidecarProcessType",id:"type-revisionsidecarprocesstype",children:[{value:"func FindRevisionSidecarProcessType",id:"func-findrevisionsidecarprocesstype",children:[]}]},{value:"type RevisionSidecarProcessTypeDeleter",id:"type-revisionsidecarprocesstypedeleter",children:[]},{value:"type RevisionSidecarProcessTypeFinder",id:"type-revisionsidecarprocesstypefinder",children:[]},{value:"type RevisionSidecarProcessTypeFinisher",id:"type-revisionsidecarprocesstypefinisher",children:[]},{value:"type RevisionSidecarProcessTypeInserter",id:"type-revisionsidecarprocesstypeinserter",children:[]},{value:"type RevisionSidecarProcessTypeReloader",id:"type-revisionsidecarprocesstypereloader",children:[]},{value:"type RevisionSidecarProcessTypeSlice",id:"type-revisionsidecarprocesstypeslice",children:[]},{value:"type RevisionSidecarProcessTypeUpdater",id:"type-revisionsidecarprocesstypeupdater",children:[]},{value:"type RevisionSidecarProcessTypeUpserter",id:"type-revisionsidecarprocesstypeupserter",children:[]},{value:"type RevisionSidecarReloader",id:"type-revisionsidecarreloader",children:[]},{value:"type RevisionSidecarSlice",id:"type-revisionsidecarslice",children:[]},{value:"type RevisionSidecarUpdater",id:"type-revisionsidecarupdater",children:[]},{value:"type RevisionSidecarUpserter",id:"type-revisionsidecarupserter",children:[]},{value:"type RevisionSlice",id:"type-revisionslice",children:[]},{value:"type RevisionUpdater",id:"type-revisionupdater",children:[]},{value:"type RevisionUpserter",id:"type-revisionupserter",children:[]},{value:"type Route",id:"type-route",children:[{value:"func FindRoute",id:"func-findroute",children:[]}]},{value:"type RouteAnnotation",id:"type-routeannotation",children:[{value:"func FindRouteAnnotation",id:"func-findrouteannotation",children:[]}]},{value:"type RouteAnnotationDeleter",id:"type-routeannotationdeleter",children:[]},{value:"type RouteAnnotationFinder",id:"type-routeannotationfinder",children:[]},{value:"type RouteAnnotationFinisher",id:"type-routeannotationfinisher",children:[]},{value:"type RouteAnnotationInserter",id:"type-routeannotationinserter",children:[]},{value:"type RouteAnnotationReloader",id:"type-routeannotationreloader",children:[]},{value:"type RouteAnnotationSlice",id:"type-routeannotationslice",children:[]},{value:"type RouteAnnotationUpdater",id:"type-routeannotationupdater",children:[]},{value:"type RouteAnnotationUpserter",id:"type-routeannotationupserter",children:[]},{value:"type RouteBinding",id:"type-routebinding",children:[{value:"func FindRouteBinding",id:"func-findroutebinding",children:[]}]},{value:"type RouteBindingAnnotation",id:"type-routebindingannotation",children:[{value:"func FindRouteBindingAnnotation",id:"func-findroutebindingannotation",children:[]}]},{value:"type RouteBindingAnnotationDeleter",id:"type-routebindingannotationdeleter",children:[]},{value:"type RouteBindingAnnotationFinder",id:"type-routebindingannotationfinder",children:[]},{value:"type RouteBindingAnnotationFinisher",id:"type-routebindingannotationfinisher",children:[]},{value:"type RouteBindingAnnotationInserter",id:"type-routebindingannotationinserter",children:[]},{value:"type RouteBindingAnnotationReloader",id:"type-routebindingannotationreloader",children:[]},{value:"type RouteBindingAnnotationSlice",id:"type-routebindingannotationslice",children:[]},{value:"type RouteBindingAnnotationUpdater",id:"type-routebindingannotationupdater",children:[]},{value:"type RouteBindingAnnotationUpserter",id:"type-routebindingannotationupserter",children:[]},{value:"type RouteBindingDeleter",id:"type-routebindingdeleter",children:[]},{value:"type RouteBindingFinder",id:"type-routebindingfinder",children:[]},{value:"type RouteBindingFinisher",id:"type-routebindingfinisher",children:[]},{value:"type RouteBindingInserter",id:"type-routebindinginserter",children:[]},{value:"type RouteBindingLabel",id:"type-routebindinglabel",children:[{value:"func FindRouteBindingLabel",id:"func-findroutebindinglabel",children:[]}]},{value:"type RouteBindingLabelDeleter",id:"type-routebindinglabeldeleter",children:[]},{value:"type RouteBindingLabelFinder",id:"type-routebindinglabelfinder",children:[]},{value:"type RouteBindingLabelFinisher",id:"type-routebindinglabelfinisher",children:[]},{value:"type RouteBindingLabelInserter",id:"type-routebindinglabelinserter",children:[]},{value:"type RouteBindingLabelReloader",id:"type-routebindinglabelreloader",children:[]},{value:"type RouteBindingLabelSlice",id:"type-routebindinglabelslice",children:[]},{value:"type RouteBindingLabelUpdater",id:"type-routebindinglabelupdater",children:[]},{value:"type RouteBindingLabelUpserter",id:"type-routebindinglabelupserter",children:[]},{value:"type RouteBindingOperation",id:"type-routebindingoperation",children:[{value:"func FindRouteBindingOperation",id:"func-findroutebindingoperation",children:[]}]},{value:"type RouteBindingOperationDeleter",id:"type-routebindingoperationdeleter",children:[]},{value:"type RouteBindingOperationFinder",id:"type-routebindingoperationfinder",children:[]},{value:"type RouteBindingOperationFinisher",id:"type-routebindingoperationfinisher",children:[]},{value:"type RouteBindingOperationInserter",id:"type-routebindingoperationinserter",children:[]},{value:"type RouteBindingOperationReloader",id:"type-routebindingoperationreloader",children:[]},{value:"type RouteBindingOperationSlice",id:"type-routebindingoperationslice",children:[]},{value:"type RouteBindingOperationUpdater",id:"type-routebindingoperationupdater",children:[]},{value:"type RouteBindingOperationUpserter",id:"type-routebindingoperationupserter",children:[]},{value:"type RouteBindingReloader",id:"type-routebindingreloader",children:[]},{value:"type RouteBindingSlice",id:"type-routebindingslice",children:[]},{value:"type RouteBindingUpdater",id:"type-routebindingupdater",children:[]},{value:"type RouteBindingUpserter",id:"type-routebindingupserter",children:[]},{value:"type RouteDeleter",id:"type-routedeleter",children:[]},{value:"type RouteFinder",id:"type-routefinder",children:[]},{value:"type RouteFinisher",id:"type-routefinisher",children:[]},{value:"type RouteInserter",id:"type-routeinserter",children:[]},{value:"type RouteLabel",id:"type-routelabel",children:[{value:"func FindRouteLabel",id:"func-findroutelabel",children:[]}]},{value:"type RouteLabelDeleter",id:"type-routelabeldeleter",children:[]},{value:"type RouteLabelFinder",id:"type-routelabelfinder",children:[]},{value:"type RouteLabelFinisher",id:"type-routelabelfinisher",children:[]},{value:"type RouteLabelInserter",id:"type-routelabelinserter",children:[]},{value:"type RouteLabelReloader",id:"type-routelabelreloader",children:[]},{value:"type RouteLabelSlice",id:"type-routelabelslice",children:[]},{value:"type RouteLabelUpdater",id:"type-routelabelupdater",children:[]},{value:"type RouteLabelUpserter",id:"type-routelabelupserter",children:[]},{value:"type RouteMapping",id:"type-routemapping",children:[{value:"func FindRouteMapping",id:"func-findroutemapping",children:[]}]},{value:"type RouteMappingDeleter",id:"type-routemappingdeleter",children:[]},{value:"type RouteMappingFinder",id:"type-routemappingfinder",children:[]},{value:"type RouteMappingFinisher",id:"type-routemappingfinisher",children:[]},{value:"type RouteMappingInserter",id:"type-routemappinginserter",children:[]},{value:"type RouteMappingReloader",id:"type-routemappingreloader",children:[]},{value:"type RouteMappingSlice",id:"type-routemappingslice",children:[]},{value:"type RouteMappingUpdater",id:"type-routemappingupdater",children:[]},{value:"type RouteMappingUpserter",id:"type-routemappingupserter",children:[]},{value:"type RouteReloader",id:"type-routereloader",children:[]},{value:"type RouteSlice",id:"type-routeslice",children:[]},{value:"type RouteUpdater",id:"type-routeupdater",children:[]},{value:"type RouteUpserter",id:"type-routeupserter",children:[]},{value:"type SchemaMigration",id:"type-schemamigration",children:[{value:"func FindSchemaMigration",id:"func-findschemamigration",children:[]}]},{value:"type SchemaMigrationDeleter",id:"type-schemamigrationdeleter",children:[]},{value:"type SchemaMigrationFinder",id:"type-schemamigrationfinder",children:[]},{value:"type SchemaMigrationFinisher",id:"type-schemamigrationfinisher",children:[]},{value:"type SchemaMigrationInserter",id:"type-schemamigrationinserter",children:[]},{value:"type SchemaMigrationReloader",id:"type-schemamigrationreloader",children:[]},{value:"type SchemaMigrationSlice",id:"type-schemamigrationslice",children:[]},{value:"type SchemaMigrationUpdater",id:"type-schemamigrationupdater",children:[]},{value:"type SchemaMigrationUpserter",id:"type-schemamigrationupserter",children:[]},{value:"type SecurityGroup",id:"type-securitygroup",children:[{value:"func FindSecurityGroup",id:"func-findsecuritygroup",children:[]}]},{value:"type SecurityGroupDeleter",id:"type-securitygroupdeleter",children:[]},{value:"type SecurityGroupFinder",id:"type-securitygroupfinder",children:[]},{value:"type SecurityGroupFinisher",id:"type-securitygroupfinisher",children:[]},{value:"type SecurityGroupInserter",id:"type-securitygroupinserter",children:[]},{value:"type SecurityGroupReloader",id:"type-securitygroupreloader",children:[]},{value:"type SecurityGroupSlice",id:"type-securitygroupslice",children:[]},{value:"type SecurityGroupUpdater",id:"type-securitygroupupdater",children:[]},{value:"type SecurityGroupUpserter",id:"type-securitygroupupserter",children:[]},{value:"type SecurityGroupsSpace",id:"type-securitygroupsspace",children:[{value:"func FindSecurityGroupsSpace",id:"func-findsecuritygroupsspace",children:[]}]},{value:"type SecurityGroupsSpaceDeleter",id:"type-securitygroupsspacedeleter",children:[]},{value:"type SecurityGroupsSpaceFinder",id:"type-securitygroupsspacefinder",children:[]},{value:"type SecurityGroupsSpaceFinisher",id:"type-securitygroupsspacefinisher",children:[]},{value:"type SecurityGroupsSpaceInserter",id:"type-securitygroupsspaceinserter",children:[]},{value:"type SecurityGroupsSpaceReloader",id:"type-securitygroupsspacereloader",children:[]},{value:"type SecurityGroupsSpaceSlice",id:"type-securitygroupsspaceslice",children:[]},{value:"type SecurityGroupsSpaceUpdater",id:"type-securitygroupsspaceupdater",children:[]},{value:"type SecurityGroupsSpaceUpserter",id:"type-securitygroupsspaceupserter",children:[]},{value:"type Service",id:"type-service",children:[{value:"func FindService",id:"func-findservice",children:[]}]},{value:"type ServiceBinding",id:"type-servicebinding",children:[{value:"func FindServiceBinding",id:"func-findservicebinding",children:[]}]},{value:"type ServiceBindingAnnotation",id:"type-servicebindingannotation",children:[{value:"func FindServiceBindingAnnotation",id:"func-findservicebindingannotation",children:[]}]},{value:"type ServiceBindingAnnotationDeleter",id:"type-servicebindingannotationdeleter",children:[]},{value:"type ServiceBindingAnnotationFinder",id:"type-servicebindingannotationfinder",children:[]},{value:"type ServiceBindingAnnotationFinisher",id:"type-servicebindingannotationfinisher",children:[]},{value:"type ServiceBindingAnnotationInserter",id:"type-servicebindingannotationinserter",children:[]},{value:"type ServiceBindingAnnotationReloader",id:"type-servicebindingannotationreloader",children:[]},{value:"type ServiceBindingAnnotationSlice",id:"type-servicebindingannotationslice",children:[]},{value:"type ServiceBindingAnnotationUpdater",id:"type-servicebindingannotationupdater",children:[]},{value:"type ServiceBindingAnnotationUpserter",id:"type-servicebindingannotationupserter",children:[]},{value:"type ServiceBindingDeleter",id:"type-servicebindingdeleter",children:[]},{value:"type ServiceBindingFinder",id:"type-servicebindingfinder",children:[]},{value:"type ServiceBindingFinisher",id:"type-servicebindingfinisher",children:[]},{value:"type ServiceBindingInserter",id:"type-servicebindinginserter",children:[]},{value:"type ServiceBindingLabel",id:"type-servicebindinglabel",children:[{value:"func FindServiceBindingLabel",id:"func-findservicebindinglabel",children:[]}]},{value:"type ServiceBindingLabelDeleter",id:"type-servicebindinglabeldeleter",children:[]},{value:"type ServiceBindingLabelFinder",id:"type-servicebindinglabelfinder",children:[]},{value:"type ServiceBindingLabelFinisher",id:"type-servicebindinglabelfinisher",children:[]},{value:"type ServiceBindingLabelInserter",id:"type-servicebindinglabelinserter",children:[]},{value:"type ServiceBindingLabelReloader",id:"type-servicebindinglabelreloader",children:[]},{value:"type ServiceBindingLabelSlice",id:"type-servicebindinglabelslice",children:[]},{value:"type ServiceBindingLabelUpdater",id:"type-servicebindinglabelupdater",children:[]},{value:"type ServiceBindingLabelUpserter",id:"type-servicebindinglabelupserter",children:[]},{value:"type ServiceBindingOperation",id:"type-servicebindingoperation",children:[{value:"func FindServiceBindingOperation",id:"func-findservicebindingoperation",children:[]}]},{value:"type ServiceBindingOperationDeleter",id:"type-servicebindingoperationdeleter",children:[]},{value:"type ServiceBindingOperationFinder",id:"type-servicebindingoperationfinder",children:[]},{value:"type ServiceBindingOperationFinisher",id:"type-servicebindingoperationfinisher",children:[]},{value:"type ServiceBindingOperationInserter",id:"type-servicebindingoperationinserter",children:[]},{value:"type ServiceBindingOperationReloader",id:"type-servicebindingoperationreloader",children:[]},{value:"type ServiceBindingOperationSlice",id:"type-servicebindingoperationslice",children:[]},{value:"type ServiceBindingOperationUpdater",id:"type-servicebindingoperationupdater",children:[]},{value:"type ServiceBindingOperationUpserter",id:"type-servicebindingoperationupserter",children:[]},{value:"type ServiceBindingReloader",id:"type-servicebindingreloader",children:[]},{value:"type ServiceBindingSlice",id:"type-servicebindingslice",children:[]},{value:"type ServiceBindingUpdater",id:"type-servicebindingupdater",children:[]},{value:"type ServiceBindingUpserter",id:"type-servicebindingupserter",children:[]},{value:"type ServiceBroker",id:"type-servicebroker",children:[{value:"func FindServiceBroker",id:"func-findservicebroker",children:[]}]},{value:"type ServiceBrokerAnnotation",id:"type-servicebrokerannotation",children:[{value:"func FindServiceBrokerAnnotation",id:"func-findservicebrokerannotation",children:[]}]},{value:"type ServiceBrokerAnnotationDeleter",id:"type-servicebrokerannotationdeleter",children:[]},{value:"type ServiceBrokerAnnotationFinder",id:"type-servicebrokerannotationfinder",children:[]},{value:"type ServiceBrokerAnnotationFinisher",id:"type-servicebrokerannotationfinisher",children:[]},{value:"type ServiceBrokerAnnotationInserter",id:"type-servicebrokerannotationinserter",children:[]},{value:"type ServiceBrokerAnnotationReloader",id:"type-servicebrokerannotationreloader",children:[]},{value:"type ServiceBrokerAnnotationSlice",id:"type-servicebrokerannotationslice",children:[]},{value:"type ServiceBrokerAnnotationUpdater",id:"type-servicebrokerannotationupdater",children:[]},{value:"type ServiceBrokerAnnotationUpserter",id:"type-servicebrokerannotationupserter",children:[]},{value:"type ServiceBrokerDeleter",id:"type-servicebrokerdeleter",children:[]},{value:"type ServiceBrokerFinder",id:"type-servicebrokerfinder",children:[]},{value:"type ServiceBrokerFinisher",id:"type-servicebrokerfinisher",children:[]},{value:"type ServiceBrokerInserter",id:"type-servicebrokerinserter",children:[]},{value:"type ServiceBrokerLabel",id:"type-servicebrokerlabel",children:[{value:"func FindServiceBrokerLabel",id:"func-findservicebrokerlabel",children:[]}]},{value:"type ServiceBrokerLabelDeleter",id:"type-servicebrokerlabeldeleter",children:[]},{value:"type ServiceBrokerLabelFinder",id:"type-servicebrokerlabelfinder",children:[]},{value:"type ServiceBrokerLabelFinisher",id:"type-servicebrokerlabelfinisher",children:[]},{value:"type ServiceBrokerLabelInserter",id:"type-servicebrokerlabelinserter",children:[]},{value:"type ServiceBrokerLabelReloader",id:"type-servicebrokerlabelreloader",children:[]},{value:"type ServiceBrokerLabelSlice",id:"type-servicebrokerlabelslice",children:[]},{value:"type ServiceBrokerLabelUpdater",id:"type-servicebrokerlabelupdater",children:[]},{value:"type ServiceBrokerLabelUpserter",id:"type-servicebrokerlabelupserter",children:[]},{value:"type ServiceBrokerReloader",id:"type-servicebrokerreloader",children:[]},{value:"type ServiceBrokerSlice",id:"type-servicebrokerslice",children:[]},{value:"type ServiceBrokerUpdateRequest",id:"type-servicebrokerupdaterequest",children:[{value:"func FindServiceBrokerUpdateRequest",id:"func-findservicebrokerupdaterequest",children:[]}]},{value:"type ServiceBrokerUpdateRequestAnnotation",id:"type-servicebrokerupdaterequestannotation",children:[{value:"func FindServiceBrokerUpdateRequestAnnotation",id:"func-findservicebrokerupdaterequestannotation",children:[]}]},{value:"type ServiceBrokerUpdateRequestAnnotationDeleter",id:"type-servicebrokerupdaterequestannotationdeleter",children:[]},{value:"type ServiceBrokerUpdateRequestAnnotationFinder",id:"type-servicebrokerupdaterequestannotationfinder",children:[]},{value:"type ServiceBrokerUpdateRequestAnnotationFinisher",id:"type-servicebrokerupdaterequestannotationfinisher",children:[]},{value:"type ServiceBrokerUpdateRequestAnnotationInserter",id:"type-servicebrokerupdaterequestannotationinserter",children:[]},{value:"type ServiceBrokerUpdateRequestAnnotationReloader",id:"type-servicebrokerupdaterequestannotationreloader",children:[]},{value:"type ServiceBrokerUpdateRequestAnnotationSlice",id:"type-servicebrokerupdaterequestannotationslice",children:[]},{value:"type ServiceBrokerUpdateRequestAnnotationUpdater",id:"type-servicebrokerupdaterequestannotationupdater",children:[]},{value:"type ServiceBrokerUpdateRequestAnnotationUpserter",id:"type-servicebrokerupdaterequestannotationupserter",children:[]},{value:"type ServiceBrokerUpdateRequestDeleter",id:"type-servicebrokerupdaterequestdeleter",children:[]},{value:"type ServiceBrokerUpdateRequestFinder",id:"type-servicebrokerupdaterequestfinder",children:[]},{value:"type ServiceBrokerUpdateRequestFinisher",id:"type-servicebrokerupdaterequestfinisher",children:[]},{value:"type ServiceBrokerUpdateRequestInserter",id:"type-servicebrokerupdaterequestinserter",children:[]},{value:"type ServiceBrokerUpdateRequestLabel",id:"type-servicebrokerupdaterequestlabel",children:[{value:"func FindServiceBrokerUpdateRequestLabel",id:"func-findservicebrokerupdaterequestlabel",children:[]}]},{value:"type ServiceBrokerUpdateRequestLabelDeleter",id:"type-servicebrokerupdaterequestlabeldeleter",children:[]},{value:"type ServiceBrokerUpdateRequestLabelFinder",id:"type-servicebrokerupdaterequestlabelfinder",children:[]},{value:"type ServiceBrokerUpdateRequestLabelFinisher",id:"type-servicebrokerupdaterequestlabelfinisher",children:[]},{value:"type ServiceBrokerUpdateRequestLabelInserter",id:"type-servicebrokerupdaterequestlabelinserter",children:[]},{value:"type ServiceBrokerUpdateRequestLabelReloader",id:"type-servicebrokerupdaterequestlabelreloader",children:[]},{value:"type ServiceBrokerUpdateRequestLabelSlice",id:"type-servicebrokerupdaterequestlabelslice",children:[]},{value:"type ServiceBrokerUpdateRequestLabelUpdater",id:"type-servicebrokerupdaterequestlabelupdater",children:[]},{value:"type ServiceBrokerUpdateRequestLabelUpserter",id:"type-servicebrokerupdaterequestlabelupserter",children:[]},{value:"type ServiceBrokerUpdateRequestReloader",id:"type-servicebrokerupdaterequestreloader",children:[]},{value:"type ServiceBrokerUpdateRequestSlice",id:"type-servicebrokerupdaterequestslice",children:[]},{value:"type ServiceBrokerUpdateRequestUpdater",id:"type-servicebrokerupdaterequestupdater",children:[]},{value:"type ServiceBrokerUpdateRequestUpserter",id:"type-servicebrokerupdaterequestupserter",children:[]},{value:"type ServiceBrokerUpdater",id:"type-servicebrokerupdater",children:[]},{value:"type ServiceBrokerUpserter",id:"type-servicebrokerupserter",children:[]},{value:"type ServiceDashboardClient",id:"type-servicedashboardclient",children:[{value:"func FindServiceDashboardClient",id:"func-findservicedashboardclient",children:[]}]},{value:"type ServiceDashboardClientDeleter",id:"type-servicedashboardclientdeleter",children:[]},{value:"type ServiceDashboardClientFinder",id:"type-servicedashboardclientfinder",children:[]},{value:"type ServiceDashboardClientFinisher",id:"type-servicedashboardclientfinisher",children:[]},{value:"type ServiceDashboardClientInserter",id:"type-servicedashboardclientinserter",children:[]},{value:"type ServiceDashboardClientReloader",id:"type-servicedashboardclientreloader",children:[]},{value:"type ServiceDashboardClientSlice",id:"type-servicedashboardclientslice",children:[]},{value:"type ServiceDashboardClientUpdater",id:"type-servicedashboardclientupdater",children:[]},{value:"type ServiceDashboardClientUpserter",id:"type-servicedashboardclientupserter",children:[]},{value:"type ServiceDeleter",id:"type-servicedeleter",children:[]},{value:"type ServiceFinder",id:"type-servicefinder",children:[]},{value:"type ServiceFinisher",id:"type-servicefinisher",children:[]},{value:"type ServiceInserter",id:"type-serviceinserter",children:[]},{value:"type ServiceInstance",id:"type-serviceinstance",children:[{value:"func FindServiceInstance",id:"func-findserviceinstance",children:[]}]},{value:"type ServiceInstanceAnnotation",id:"type-serviceinstanceannotation",children:[{value:"func FindServiceInstanceAnnotation",id:"func-findserviceinstanceannotation",children:[]}]},{value:"type ServiceInstanceAnnotationDeleter",id:"type-serviceinstanceannotationdeleter",children:[]},{value:"type ServiceInstanceAnnotationFinder",id:"type-serviceinstanceannotationfinder",children:[]},{value:"type ServiceInstanceAnnotationFinisher",id:"type-serviceinstanceannotationfinisher",children:[]},{value:"type ServiceInstanceAnnotationInserter",id:"type-serviceinstanceannotationinserter",children:[]},{value:"type ServiceInstanceAnnotationReloader",id:"type-serviceinstanceannotationreloader",children:[]},{value:"type ServiceInstanceAnnotationSlice",id:"type-serviceinstanceannotationslice",children:[]},{value:"type ServiceInstanceAnnotationUpdater",id:"type-serviceinstanceannotationupdater",children:[]},{value:"type ServiceInstanceAnnotationUpserter",id:"type-serviceinstanceannotationupserter",children:[]},{value:"type ServiceInstanceDeleter",id:"type-serviceinstancedeleter",children:[]},{value:"type ServiceInstanceFinder",id:"type-serviceinstancefinder",children:[]},{value:"type ServiceInstanceFinisher",id:"type-serviceinstancefinisher",children:[]},{value:"type ServiceInstanceInserter",id:"type-serviceinstanceinserter",children:[]},{value:"type ServiceInstanceLabel",id:"type-serviceinstancelabel",children:[{value:"func FindServiceInstanceLabel",id:"func-findserviceinstancelabel",children:[]}]},{value:"type ServiceInstanceLabelDeleter",id:"type-serviceinstancelabeldeleter",children:[]},{value:"type ServiceInstanceLabelFinder",id:"type-serviceinstancelabelfinder",children:[]},{value:"type ServiceInstanceLabelFinisher",id:"type-serviceinstancelabelfinisher",children:[]},{value:"type ServiceInstanceLabelInserter",id:"type-serviceinstancelabelinserter",children:[]},{value:"type ServiceInstanceLabelReloader",id:"type-serviceinstancelabelreloader",children:[]},{value:"type ServiceInstanceLabelSlice",id:"type-serviceinstancelabelslice",children:[]},{value:"type ServiceInstanceLabelUpdater",id:"type-serviceinstancelabelupdater",children:[]},{value:"type ServiceInstanceLabelUpserter",id:"type-serviceinstancelabelupserter",children:[]},{value:"type ServiceInstanceOperation",id:"type-serviceinstanceoperation",children:[{value:"func FindServiceInstanceOperation",id:"func-findserviceinstanceoperation",children:[]}]},{value:"type ServiceInstanceOperationDeleter",id:"type-serviceinstanceoperationdeleter",children:[]},{value:"type ServiceInstanceOperationFinder",id:"type-serviceinstanceoperationfinder",children:[]},{value:"type ServiceInstanceOperationFinisher",id:"type-serviceinstanceoperationfinisher",children:[]},{value:"type ServiceInstanceOperationInserter",id:"type-serviceinstanceoperationinserter",children:[]},{value:"type ServiceInstanceOperationReloader",id:"type-serviceinstanceoperationreloader",children:[]},{value:"type ServiceInstanceOperationSlice",id:"type-serviceinstanceoperationslice",children:[]},{value:"type ServiceInstanceOperationUpdater",id:"type-serviceinstanceoperationupdater",children:[]},{value:"type ServiceInstanceOperationUpserter",id:"type-serviceinstanceoperationupserter",children:[]},{value:"type ServiceInstanceReloader",id:"type-serviceinstancereloader",children:[]},{value:"type ServiceInstanceSlice",id:"type-serviceinstanceslice",children:[]},{value:"type ServiceInstanceUpdater",id:"type-serviceinstanceupdater",children:[]},{value:"type ServiceInstanceUpserter",id:"type-serviceinstanceupserter",children:[]},{value:"type ServiceKey",id:"type-servicekey",children:[{value:"func FindServiceKey",id:"func-findservicekey",children:[]}]},{value:"type ServiceKeyAnnotation",id:"type-servicekeyannotation",children:[{value:"func FindServiceKeyAnnotation",id:"func-findservicekeyannotation",children:[]}]},{value:"type ServiceKeyAnnotationDeleter",id:"type-servicekeyannotationdeleter",children:[]},{value:"type ServiceKeyAnnotationFinder",id:"type-servicekeyannotationfinder",children:[]},{value:"type ServiceKeyAnnotationFinisher",id:"type-servicekeyannotationfinisher",children:[]},{value:"type ServiceKeyAnnotationInserter",id:"type-servicekeyannotationinserter",children:[]},{value:"type ServiceKeyAnnotationReloader",id:"type-servicekeyannotationreloader",children:[]},{value:"type ServiceKeyAnnotationSlice",id:"type-servicekeyannotationslice",children:[]},{value:"type ServiceKeyAnnotationUpdater",id:"type-servicekeyannotationupdater",children:[]},{value:"type ServiceKeyAnnotationUpserter",id:"type-servicekeyannotationupserter",children:[]},{value:"type ServiceKeyDeleter",id:"type-servicekeydeleter",children:[]},{value:"type ServiceKeyFinder",id:"type-servicekeyfinder",children:[]},{value:"type ServiceKeyFinisher",id:"type-servicekeyfinisher",children:[]},{value:"type ServiceKeyInserter",id:"type-servicekeyinserter",children:[]},{value:"type ServiceKeyLabel",id:"type-servicekeylabel",children:[{value:"func FindServiceKeyLabel",id:"func-findservicekeylabel",children:[]}]},{value:"type ServiceKeyLabelDeleter",id:"type-servicekeylabeldeleter",children:[]},{value:"type ServiceKeyLabelFinder",id:"type-servicekeylabelfinder",children:[]},{value:"type ServiceKeyLabelFinisher",id:"type-servicekeylabelfinisher",children:[]},{value:"type ServiceKeyLabelInserter",id:"type-servicekeylabelinserter",children:[]},{value:"type ServiceKeyLabelReloader",id:"type-servicekeylabelreloader",children:[]},{value:"type ServiceKeyLabelSlice",id:"type-servicekeylabelslice",children:[]},{value:"type ServiceKeyLabelUpdater",id:"type-servicekeylabelupdater",children:[]},{value:"type ServiceKeyLabelUpserter",id:"type-servicekeylabelupserter",children:[]},{value:"type ServiceKeyOperation",id:"type-servicekeyoperation",children:[{value:"func FindServiceKeyOperation",id:"func-findservicekeyoperation",children:[]}]},{value:"type ServiceKeyOperationDeleter",id:"type-servicekeyoperationdeleter",children:[]},{value:"type ServiceKeyOperationFinder",id:"type-servicekeyoperationfinder",children:[]},{value:"type ServiceKeyOperationFinisher",id:"type-servicekeyoperationfinisher",children:[]},{value:"type ServiceKeyOperationInserter",id:"type-servicekeyoperationinserter",children:[]},{value:"type ServiceKeyOperationReloader",id:"type-servicekeyoperationreloader",children:[]},{value:"type ServiceKeyOperationSlice",id:"type-servicekeyoperationslice",children:[]},{value:"type ServiceKeyOperationUpdater",id:"type-servicekeyoperationupdater",children:[]},{value:"type ServiceKeyOperationUpserter",id:"type-servicekeyoperationupserter",children:[]},{value:"type ServiceKeyReloader",id:"type-servicekeyreloader",children:[]},{value:"type ServiceKeySlice",id:"type-servicekeyslice",children:[]},{value:"type ServiceKeyUpdater",id:"type-servicekeyupdater",children:[]},{value:"type ServiceKeyUpserter",id:"type-servicekeyupserter",children:[]},{value:"type ServiceOfferingAnnotation",id:"type-serviceofferingannotation",children:[{value:"func FindServiceOfferingAnnotation",id:"func-findserviceofferingannotation",children:[]}]},{value:"type ServiceOfferingAnnotationDeleter",id:"type-serviceofferingannotationdeleter",children:[]},{value:"type ServiceOfferingAnnotationFinder",id:"type-serviceofferingannotationfinder",children:[]},{value:"type ServiceOfferingAnnotationFinisher",id:"type-serviceofferingannotationfinisher",children:[]},{value:"type ServiceOfferingAnnotationInserter",id:"type-serviceofferingannotationinserter",children:[]},{value:"type ServiceOfferingAnnotationReloader",id:"type-serviceofferingannotationreloader",children:[]},{value:"type ServiceOfferingAnnotationSlice",id:"type-serviceofferingannotationslice",children:[]},{value:"type ServiceOfferingAnnotationUpdater",id:"type-serviceofferingannotationupdater",children:[]},{value:"type ServiceOfferingAnnotationUpserter",id:"type-serviceofferingannotationupserter",children:[]},{value:"type ServiceOfferingLabel",id:"type-serviceofferinglabel",children:[{value:"func FindServiceOfferingLabel",id:"func-findserviceofferinglabel",children:[]}]},{value:"type ServiceOfferingLabelDeleter",id:"type-serviceofferinglabeldeleter",children:[]},{value:"type ServiceOfferingLabelFinder",id:"type-serviceofferinglabelfinder",children:[]},{value:"type ServiceOfferingLabelFinisher",id:"type-serviceofferinglabelfinisher",children:[]},{value:"type ServiceOfferingLabelInserter",id:"type-serviceofferinglabelinserter",children:[]},{value:"type ServiceOfferingLabelReloader",id:"type-serviceofferinglabelreloader",children:[]},{value:"type ServiceOfferingLabelSlice",id:"type-serviceofferinglabelslice",children:[]},{value:"type ServiceOfferingLabelUpdater",id:"type-serviceofferinglabelupdater",children:[]},{value:"type ServiceOfferingLabelUpserter",id:"type-serviceofferinglabelupserter",children:[]},{value:"type ServicePlan",id:"type-serviceplan",children:[{value:"func FindServicePlan",id:"func-findserviceplan",children:[]}]},{value:"type ServicePlanAnnotation",id:"type-serviceplanannotation",children:[{value:"func FindServicePlanAnnotation",id:"func-findserviceplanannotation",children:[]}]},{value:"type ServicePlanAnnotationDeleter",id:"type-serviceplanannotationdeleter",children:[]},{value:"type ServicePlanAnnotationFinder",id:"type-serviceplanannotationfinder",children:[]},{value:"type ServicePlanAnnotationFinisher",id:"type-serviceplanannotationfinisher",children:[]},{value:"type ServicePlanAnnotationInserter",id:"type-serviceplanannotationinserter",children:[]},{value:"type ServicePlanAnnotationReloader",id:"type-serviceplanannotationreloader",children:[]},{value:"type ServicePlanAnnotationSlice",id:"type-serviceplanannotationslice",children:[]},{value:"type ServicePlanAnnotationUpdater",id:"type-serviceplanannotationupdater",children:[]},{value:"type ServicePlanAnnotationUpserter",id:"type-serviceplanannotationupserter",children:[]},{value:"type ServicePlanDeleter",id:"type-serviceplandeleter",children:[]},{value:"type ServicePlanFinder",id:"type-serviceplanfinder",children:[]},{value:"type ServicePlanFinisher",id:"type-serviceplanfinisher",children:[]},{value:"type ServicePlanInserter",id:"type-serviceplaninserter",children:[]},{value:"type ServicePlanLabel",id:"type-serviceplanlabel",children:[{value:"func FindServicePlanLabel",id:"func-findserviceplanlabel",children:[]}]},{value:"type ServicePlanLabelDeleter",id:"type-serviceplanlabeldeleter",children:[]},{value:"type ServicePlanLabelFinder",id:"type-serviceplanlabelfinder",children:[]},{value:"type ServicePlanLabelFinisher",id:"type-serviceplanlabelfinisher",children:[]},{value:"type ServicePlanLabelInserter",id:"type-serviceplanlabelinserter",children:[]},{value:"type ServicePlanLabelReloader",id:"type-serviceplanlabelreloader",children:[]},{value:"type ServicePlanLabelSlice",id:"type-serviceplanlabelslice",children:[]},{value:"type ServicePlanLabelUpdater",id:"type-serviceplanlabelupdater",children:[]},{value:"type ServicePlanLabelUpserter",id:"type-serviceplanlabelupserter",children:[]},{value:"type ServicePlanReloader",id:"type-serviceplanreloader",children:[]},{value:"type ServicePlanSlice",id:"type-serviceplanslice",children:[]},{value:"type ServicePlanUpdater",id:"type-serviceplanupdater",children:[]},{value:"type ServicePlanUpserter",id:"type-serviceplanupserter",children:[]},{value:"type ServicePlanVisibility",id:"type-serviceplanvisibility",children:[{value:"func FindServicePlanVisibility",id:"func-findserviceplanvisibility",children:[]}]},{value:"type ServicePlanVisibilityDeleter",id:"type-serviceplanvisibilitydeleter",children:[]},{value:"type ServicePlanVisibilityFinder",id:"type-serviceplanvisibilityfinder",children:[]},{value:"type ServicePlanVisibilityFinisher",id:"type-serviceplanvisibilityfinisher",children:[]},{value:"type ServicePlanVisibilityInserter",id:"type-serviceplanvisibilityinserter",children:[]},{value:"type ServicePlanVisibilityReloader",id:"type-serviceplanvisibilityreloader",children:[]},{value:"type ServicePlanVisibilitySlice",id:"type-serviceplanvisibilityslice",children:[]},{value:"type ServicePlanVisibilityUpdater",id:"type-serviceplanvisibilityupdater",children:[]},{value:"type ServicePlanVisibilityUpserter",id:"type-serviceplanvisibilityupserter",children:[]},{value:"type ServiceReloader",id:"type-servicereloader",children:[]},{value:"type ServiceSlice",id:"type-serviceslice",children:[]},{value:"type ServiceUpdater",id:"type-serviceupdater",children:[]},{value:"type ServiceUpserter",id:"type-serviceupserter",children:[]},{value:"type ServiceUsageEvent",id:"type-serviceusageevent",children:[{value:"func FindServiceUsageEvent",id:"func-findserviceusageevent",children:[]}]},{value:"type ServiceUsageEventDeleter",id:"type-serviceusageeventdeleter",children:[]},{value:"type ServiceUsageEventFinder",id:"type-serviceusageeventfinder",children:[]},{value:"type ServiceUsageEventFinisher",id:"type-serviceusageeventfinisher",children:[]},{value:"type ServiceUsageEventInserter",id:"type-serviceusageeventinserter",children:[]},{value:"type ServiceUsageEventReloader",id:"type-serviceusageeventreloader",children:[]},{value:"type ServiceUsageEventSlice",id:"type-serviceusageeventslice",children:[]},{value:"type ServiceUsageEventUpdater",id:"type-serviceusageeventupdater",children:[]},{value:"type ServiceUsageEventUpserter",id:"type-serviceusageeventupserter",children:[]},{value:"type Sidecar",id:"type-sidecar",children:[{value:"func FindSidecar",id:"func-findsidecar",children:[]}]},{value:"type SidecarDeleter",id:"type-sidecardeleter",children:[]},{value:"type SidecarFinder",id:"type-sidecarfinder",children:[]},{value:"type SidecarFinisher",id:"type-sidecarfinisher",children:[]},{value:"type SidecarInserter",id:"type-sidecarinserter",children:[]},{value:"type SidecarProcessType",id:"type-sidecarprocesstype",children:[{value:"func FindSidecarProcessType",id:"func-findsidecarprocesstype",children:[]}]},{value:"type SidecarProcessTypeDeleter",id:"type-sidecarprocesstypedeleter",children:[]},{value:"type SidecarProcessTypeFinder",id:"type-sidecarprocesstypefinder",children:[]},{value:"type SidecarProcessTypeFinisher",id:"type-sidecarprocesstypefinisher",children:[]},{value:"type SidecarProcessTypeInserter",id:"type-sidecarprocesstypeinserter",children:[]},{value:"type SidecarProcessTypeReloader",id:"type-sidecarprocesstypereloader",children:[]},{value:"type SidecarProcessTypeSlice",id:"type-sidecarprocesstypeslice",children:[]},{value:"type SidecarProcessTypeUpdater",id:"type-sidecarprocesstypeupdater",children:[]},{value:"type SidecarProcessTypeUpserter",id:"type-sidecarprocesstypeupserter",children:[]},{value:"type SidecarReloader",id:"type-sidecarreloader",children:[]},{value:"type SidecarSlice",id:"type-sidecarslice",children:[]},{value:"type SidecarUpdater",id:"type-sidecarupdater",children:[]},{value:"type SidecarUpserter",id:"type-sidecarupserter",children:[]},{value:"type Space",id:"type-space",children:[{value:"func FindSpace",id:"func-findspace",children:[]}]},{value:"type SpaceAnnotation",id:"type-spaceannotation",children:[{value:"func FindSpaceAnnotation",id:"func-findspaceannotation",children:[]}]},{value:"type SpaceAnnotationDeleter",id:"type-spaceannotationdeleter",children:[]},{value:"type SpaceAnnotationFinder",id:"type-spaceannotationfinder",children:[]},{value:"type SpaceAnnotationFinisher",id:"type-spaceannotationfinisher",children:[]},{value:"type SpaceAnnotationInserter",id:"type-spaceannotationinserter",children:[]},{value:"type SpaceAnnotationReloader",id:"type-spaceannotationreloader",children:[]},{value:"type SpaceAnnotationSlice",id:"type-spaceannotationslice",children:[]},{value:"type SpaceAnnotationUpdater",id:"type-spaceannotationupdater",children:[]},{value:"type SpaceAnnotationUpserter",id:"type-spaceannotationupserter",children:[]},{value:"type SpaceDeleter",id:"type-spacedeleter",children:[]},{value:"type SpaceFinder",id:"type-spacefinder",children:[]},{value:"type SpaceFinisher",id:"type-spacefinisher",children:[]},{value:"type SpaceInserter",id:"type-spaceinserter",children:[]},{value:"type SpaceLabel",id:"type-spacelabel",children:[{value:"func FindSpaceLabel",id:"func-findspacelabel",children:[]}]},{value:"type SpaceLabelDeleter",id:"type-spacelabeldeleter",children:[]},{value:"type SpaceLabelFinder",id:"type-spacelabelfinder",children:[]},{value:"type SpaceLabelFinisher",id:"type-spacelabelfinisher",children:[]},{value:"type SpaceLabelInserter",id:"type-spacelabelinserter",children:[]},{value:"type SpaceLabelReloader",id:"type-spacelabelreloader",children:[]},{value:"type SpaceLabelSlice",id:"type-spacelabelslice",children:[]},{value:"type SpaceLabelUpdater",id:"type-spacelabelupdater",children:[]},{value:"type SpaceLabelUpserter",id:"type-spacelabelupserter",children:[]},{value:"type SpaceQuotaDefinition",id:"type-spacequotadefinition",children:[{value:"func FindSpaceQuotaDefinition",id:"func-findspacequotadefinition",children:[]}]},{value:"type SpaceQuotaDefinitionDeleter",id:"type-spacequotadefinitiondeleter",children:[]},{value:"type SpaceQuotaDefinitionFinder",id:"type-spacequotadefinitionfinder",children:[]},{value:"type SpaceQuotaDefinitionFinisher",id:"type-spacequotadefinitionfinisher",children:[]},{value:"type SpaceQuotaDefinitionInserter",id:"type-spacequotadefinitioninserter",children:[]},{value:"type SpaceQuotaDefinitionReloader",id:"type-spacequotadefinitionreloader",children:[]},{value:"type SpaceQuotaDefinitionSlice",id:"type-spacequotadefinitionslice",children:[]},{value:"type SpaceQuotaDefinitionUpdater",id:"type-spacequotadefinitionupdater",children:[]},{value:"type SpaceQuotaDefinitionUpserter",id:"type-spacequotadefinitionupserter",children:[]},{value:"type SpaceReloader",id:"type-spacereloader",children:[]},{value:"type SpaceSlice",id:"type-spaceslice",children:[]},{value:"type SpaceUpdater",id:"type-spaceupdater",children:[]},{value:"type SpaceUpserter",id:"type-spaceupserter",children:[]},{value:"type SpacesApplicationSupporter",id:"type-spacesapplicationsupporter",children:[{value:"func FindSpacesApplicationSupporter",id:"func-findspacesapplicationsupporter",children:[]}]},{value:"type SpacesApplicationSupporterDeleter",id:"type-spacesapplicationsupporterdeleter",children:[]},{value:"type SpacesApplicationSupporterFinder",id:"type-spacesapplicationsupporterfinder",children:[]},{value:"type SpacesApplicationSupporterFinisher",id:"type-spacesapplicationsupporterfinisher",children:[]},{value:"type SpacesApplicationSupporterInserter",id:"type-spacesapplicationsupporterinserter",children:[]},{value:"type SpacesApplicationSupporterReloader",id:"type-spacesapplicationsupporterreloader",children:[]},{value:"type SpacesApplicationSupporterSlice",id:"type-spacesapplicationsupporterslice",children:[]},{value:"type SpacesApplicationSupporterUpdater",id:"type-spacesapplicationsupporterupdater",children:[]},{value:"type SpacesApplicationSupporterUpserter",id:"type-spacesapplicationsupporterupserter",children:[]},{value:"type SpacesAuditor",id:"type-spacesauditor",children:[{value:"func FindSpacesAuditor",id:"func-findspacesauditor",children:[]}]},{value:"type SpacesAuditorDeleter",id:"type-spacesauditordeleter",children:[]},{value:"type SpacesAuditorFinder",id:"type-spacesauditorfinder",children:[]},{value:"type SpacesAuditorFinisher",id:"type-spacesauditorfinisher",children:[]},{value:"type SpacesAuditorInserter",id:"type-spacesauditorinserter",children:[]},{value:"type SpacesAuditorReloader",id:"type-spacesauditorreloader",children:[]},{value:"type SpacesAuditorSlice",id:"type-spacesauditorslice",children:[]},{value:"type SpacesAuditorUpdater",id:"type-spacesauditorupdater",children:[]},{value:"type SpacesAuditorUpserter",id:"type-spacesauditorupserter",children:[]},{value:"type SpacesDeveloper",id:"type-spacesdeveloper",children:[{value:"func FindSpacesDeveloper",id:"func-findspacesdeveloper",children:[]}]},{value:"type SpacesDeveloperDeleter",id:"type-spacesdeveloperdeleter",children:[]},{value:"type SpacesDeveloperFinder",id:"type-spacesdeveloperfinder",children:[]},{value:"type SpacesDeveloperFinisher",id:"type-spacesdeveloperfinisher",children:[]},{value:"type SpacesDeveloperInserter",id:"type-spacesdeveloperinserter",children:[]},{value:"type SpacesDeveloperReloader",id:"type-spacesdeveloperreloader",children:[]},{value:"type SpacesDeveloperSlice",id:"type-spacesdeveloperslice",children:[]},{value:"type SpacesDeveloperUpdater",id:"type-spacesdeveloperupdater",children:[]},{value:"type SpacesDeveloperUpserter",id:"type-spacesdeveloperupserter",children:[]},{value:"type SpacesManager",id:"type-spacesmanager",children:[{value:"func FindSpacesManager",id:"func-findspacesmanager",children:[]}]},{value:"type SpacesManagerDeleter",id:"type-spacesmanagerdeleter",children:[]},{value:"type SpacesManagerFinder",id:"type-spacesmanagerfinder",children:[]},{value:"type SpacesManagerFinisher",id:"type-spacesmanagerfinisher",children:[]},{value:"type SpacesManagerInserter",id:"type-spacesmanagerinserter",children:[]},{value:"type SpacesManagerReloader",id:"type-spacesmanagerreloader",children:[]},{value:"type SpacesManagerSlice",id:"type-spacesmanagerslice",children:[]},{value:"type SpacesManagerUpdater",id:"type-spacesmanagerupdater",children:[]},{value:"type SpacesManagerUpserter",id:"type-spacesmanagerupserter",children:[]},{value:"type Stack",id:"type-stack",children:[{value:"func FindStack",id:"func-findstack",children:[]}]},{value:"type StackAnnotation",id:"type-stackannotation",children:[{value:"func FindStackAnnotation",id:"func-findstackannotation",children:[]}]},{value:"type StackAnnotationDeleter",id:"type-stackannotationdeleter",children:[]},{value:"type StackAnnotationFinder",id:"type-stackannotationfinder",children:[]},{value:"type StackAnnotationFinisher",id:"type-stackannotationfinisher",children:[]},{value:"type StackAnnotationInserter",id:"type-stackannotationinserter",children:[]},{value:"type StackAnnotationReloader",id:"type-stackannotationreloader",children:[]},{value:"type StackAnnotationSlice",id:"type-stackannotationslice",children:[]},{value:"type StackAnnotationUpdater",id:"type-stackannotationupdater",children:[]},{value:"type StackAnnotationUpserter",id:"type-stackannotationupserter",children:[]},{value:"type StackDeleter",id:"type-stackdeleter",children:[]},{value:"type StackFinder",id:"type-stackfinder",children:[]},{value:"type StackFinisher",id:"type-stackfinisher",children:[]},{value:"type StackInserter",id:"type-stackinserter",children:[]},{value:"type StackLabel",id:"type-stacklabel",children:[{value:"func FindStackLabel",id:"func-findstacklabel",children:[]}]},{value:"type StackLabelDeleter",id:"type-stacklabeldeleter",children:[]},{value:"type StackLabelFinder",id:"type-stacklabelfinder",children:[]},{value:"type StackLabelFinisher",id:"type-stacklabelfinisher",children:[]},{value:"type StackLabelInserter",id:"type-stacklabelinserter",children:[]},{value:"type StackLabelReloader",id:"type-stacklabelreloader",children:[]},{value:"type StackLabelSlice",id:"type-stacklabelslice",children:[]},{value:"type StackLabelUpdater",id:"type-stacklabelupdater",children:[]},{value:"type StackLabelUpserter",id:"type-stacklabelupserter",children:[]},{value:"type StackReloader",id:"type-stackreloader",children:[]},{value:"type StackSlice",id:"type-stackslice",children:[]},{value:"type StackUpdater",id:"type-stackupdater",children:[]},{value:"type StackUpserter",id:"type-stackupserter",children:[]},{value:"type StagingSecurityGroupsSpace",id:"type-stagingsecuritygroupsspace",children:[{value:"func FindStagingSecurityGroupsSpace",id:"func-findstagingsecuritygroupsspace",children:[]}]},{value:"type StagingSecurityGroupsSpaceDeleter",id:"type-stagingsecuritygroupsspacedeleter",children:[]},{value:"type StagingSecurityGroupsSpaceFinder",id:"type-stagingsecuritygroupsspacefinder",children:[]},{value:"type StagingSecurityGroupsSpaceFinisher",id:"type-stagingsecuritygroupsspacefinisher",children:[]},{value:"type StagingSecurityGroupsSpaceInserter",id:"type-stagingsecuritygroupsspaceinserter",children:[]},{value:"type StagingSecurityGroupsSpaceReloader",id:"type-stagingsecuritygroupsspacereloader",children:[]},{value:"type StagingSecurityGroupsSpaceSlice",id:"type-stagingsecuritygroupsspaceslice",children:[]},{value:"type StagingSecurityGroupsSpaceUpdater",id:"type-stagingsecuritygroupsspaceupdater",children:[]},{value:"type StagingSecurityGroupsSpaceUpserter",id:"type-stagingsecuritygroupsspaceupserter",children:[]},{value:"type Subquery",id:"type-subquery",children:[{value:"func NewSubquery",id:"func-newsubquery",children:[]},{value:"func (*Subquery) SQL",id:"func-subquery-sql",children:[]}]},{value:"type Task",id:"type-task",children:[{value:"func FindTask",id:"func-findtask",children:[]}]},{value:"type TaskAnnotation",id:"type-taskannotation",children:[{value:"func FindTaskAnnotation",id:"func-findtaskannotation",children:[]}]},{value:"type TaskAnnotationDeleter",id:"type-taskannotationdeleter",children:[]},{value:"type TaskAnnotationFinder",id:"type-taskannotationfinder",children:[]},{value:"type TaskAnnotationFinisher",id:"type-taskannotationfinisher",children:[]},{value:"type TaskAnnotationInserter",id:"type-taskannotationinserter",children:[]},{value:"type TaskAnnotationReloader",id:"type-taskannotationreloader",children:[]},{value:"type TaskAnnotationSlice",id:"type-taskannotationslice",children:[]},{value:"type TaskAnnotationUpdater",id:"type-taskannotationupdater",children:[]},{value:"type TaskAnnotationUpserter",id:"type-taskannotationupserter",children:[]},{value:"type TaskDeleter",id:"type-taskdeleter",children:[]},{value:"type TaskFinder",id:"type-taskfinder",children:[]},{value:"type TaskFinisher",id:"type-taskfinisher",children:[]},{value:"type TaskInserter",id:"type-taskinserter",children:[]},{value:"type TaskLabel",id:"type-tasklabel",children:[{value:"func FindTaskLabel",id:"func-findtasklabel",children:[]}]},{value:"type TaskLabelDeleter",id:"type-tasklabeldeleter",children:[]},{value:"type TaskLabelFinder",id:"type-tasklabelfinder",children:[]},{value:"type TaskLabelFinisher",id:"type-tasklabelfinisher",children:[]},{value:"type TaskLabelInserter",id:"type-tasklabelinserter",children:[]},{value:"type TaskLabelReloader",id:"type-tasklabelreloader",children:[]},{value:"type TaskLabelSlice",id:"type-tasklabelslice",children:[]},{value:"type TaskLabelUpdater",id:"type-tasklabelupdater",children:[]},{value:"type TaskLabelUpserter",id:"type-tasklabelupserter",children:[]},{value:"type TaskReloader",id:"type-taskreloader",children:[]},{value:"type TaskSlice",id:"type-taskslice",children:[]},{value:"type TaskUpdater",id:"type-taskupdater",children:[]},{value:"type TaskUpserter",id:"type-taskupserter",children:[]},{value:"type User",id:"type-user",children:[{value:"func FindUser",id:"func-finduser",children:[]}]},{value:"type UserAnnotation",id:"type-userannotation",children:[{value:"func FindUserAnnotation",id:"func-finduserannotation",children:[]}]},{value:"type UserAnnotationDeleter",id:"type-userannotationdeleter",children:[]},{value:"type UserAnnotationFinder",id:"type-userannotationfinder",children:[]},{value:"type UserAnnotationFinisher",id:"type-userannotationfinisher",children:[]},{value:"type UserAnnotationInserter",id:"type-userannotationinserter",children:[]},{value:"type UserAnnotationReloader",id:"type-userannotationreloader",children:[]},{value:"type UserAnnotationSlice",id:"type-userannotationslice",children:[]},{value:"type UserAnnotationUpdater",id:"type-userannotationupdater",children:[]},{value:"type UserAnnotationUpserter",id:"type-userannotationupserter",children:[]},{value:"type UserDeleter",id:"type-userdeleter",children:[]},{value:"type UserFinder",id:"type-userfinder",children:[]},{value:"type UserFinisher",id:"type-userfinisher",children:[]},{value:"type UserInserter",id:"type-userinserter",children:[]},{value:"type UserLabel",id:"type-userlabel",children:[{value:"func FindUserLabel",id:"func-finduserlabel",children:[]}]},{value:"type UserLabelDeleter",id:"type-userlabeldeleter",children:[]},{value:"type UserLabelFinder",id:"type-userlabelfinder",children:[]},{value:"type UserLabelFinisher",id:"type-userlabelfinisher",children:[]},{value:"type UserLabelInserter",id:"type-userlabelinserter",children:[]},{value:"type UserLabelReloader",id:"type-userlabelreloader",children:[]},{value:"type UserLabelSlice",id:"type-userlabelslice",children:[]},{value:"type UserLabelUpdater",id:"type-userlabelupdater",children:[]},{value:"type UserLabelUpserter",id:"type-userlabelupserter",children:[]},{value:"type UserReloader",id:"type-userreloader",children:[]},{value:"type UserSlice",id:"type-userslice",children:[]},{value:"type UserUpdater",id:"type-userupdater",children:[]},{value:"type UserUpserter",id:"type-userupserter",children:[]},{value:"type appAnnotationL",id:"type-appannotationl",children:[{value:"func (appAnnotationL) LoadResource",id:"func-appannotationl-loadresource",children:[]}]},{value:"type appAnnotationQuery",id:"type-appannotationquery",children:[{value:"func AppAnnotations",id:"func-appannotations",children:[]},{value:"func (appAnnotationQuery) All",id:"func-appannotationquery-all",children:[]},{value:"func (appAnnotationQuery) Count",id:"func-appannotationquery-count",children:[]},{value:"func (appAnnotationQuery) Delete",id:"func-appannotationquery-delete",children:[]},{value:"func (appAnnotationQuery) DeleteAll",id:"func-appannotationquery-deleteall",children:[]},{value:"func (appAnnotationQuery) DeleteAllSlice",id:"func-appannotationquery-deleteallslice",children:[]},{value:"func (appAnnotationQuery) Exists",id:"func-appannotationquery-exists",children:[]},{value:"func (appAnnotationQuery) Insert",id:"func-appannotationquery-insert",children:[]},{value:"func (appAnnotationQuery) One",id:"func-appannotationquery-one",children:[]},{value:"func (appAnnotationQuery) Reload",id:"func-appannotationquery-reload",children:[]},{value:"func (appAnnotationQuery) ReloadAll",id:"func-appannotationquery-reloadall",children:[]},{value:"func (appAnnotationQuery) RemoveResource",id:"func-appannotationquery-removeresource",children:[]},{value:"func (appAnnotationQuery) Resource",id:"func-appannotationquery-resource",children:[]},{value:"func (appAnnotationQuery) SetResource",id:"func-appannotationquery-setresource",children:[]},{value:"func (appAnnotationQuery) Update",id:"func-appannotationquery-update",children:[]},{value:"func (appAnnotationQuery) UpdateAll",id:"func-appannotationquery-updateall",children:[]},{value:"func (appAnnotationQuery) UpdateAllSlice",id:"func-appannotationquery-updateallslice",children:[]},{value:"func (appAnnotationQuery) Upsert",id:"func-appannotationquery-upsert",children:[]}]},{value:"type appAnnotationR",id:"type-appannotationr",children:[{value:"func (*appAnnotationR) NewStruct",id:"func-appannotationr-newstruct",children:[]}]},{value:"type appEventL",id:"type-appeventl",children:[{value:"func (appEventL) LoadApp",id:"func-appeventl-loadapp",children:[]}]},{value:"type appEventQuery",id:"type-appeventquery",children:[{value:"func AppEvents",id:"func-appevents",children:[]},{value:"func (appEventQuery) All",id:"func-appeventquery-all",children:[]},{value:"func (appEventQuery) App",id:"func-appeventquery-app",children:[]},{value:"func (appEventQuery) Count",id:"func-appeventquery-count",children:[]},{value:"func (appEventQuery) Delete",id:"func-appeventquery-delete",children:[]},{value:"func (appEventQuery) DeleteAll",id:"func-appeventquery-deleteall",children:[]},{value:"func (appEventQuery) DeleteAllSlice",id:"func-appeventquery-deleteallslice",children:[]},{value:"func (appEventQuery) Exists",id:"func-appeventquery-exists",children:[]},{value:"func (appEventQuery) Insert",id:"func-appeventquery-insert",children:[]},{value:"func (appEventQuery) One",id:"func-appeventquery-one",children:[]},{value:"func (appEventQuery) Reload",id:"func-appeventquery-reload",children:[]},{value:"func (appEventQuery) ReloadAll",id:"func-appeventquery-reloadall",children:[]},{value:"func (appEventQuery) SetApp",id:"func-appeventquery-setapp",children:[]},{value:"func (appEventQuery) Update",id:"func-appeventquery-update",children:[]},{value:"func (appEventQuery) UpdateAll",id:"func-appeventquery-updateall",children:[]},{value:"func (appEventQuery) UpdateAllSlice",id:"func-appeventquery-updateallslice",children:[]},{value:"func (appEventQuery) Upsert",id:"func-appeventquery-upsert",children:[]}]},{value:"type appEventR",id:"type-appeventr",children:[{value:"func (*appEventR) NewStruct",id:"func-appeventr-newstruct",children:[]}]},{value:"type appL",id:"type-appl",children:[{value:"func (appL) LoadBuilds",id:"func-appl-loadbuilds",children:[]},{value:"func (appL) LoadDeployments",id:"func-appl-loaddeployments",children:[]},{value:"func (appL) LoadDroplets",id:"func-appl-loaddroplets",children:[]},{value:"func (appL) LoadKpackLifecycleData",id:"func-appl-loadkpacklifecycledata",children:[]},{value:"func (appL) LoadPackages",id:"func-appl-loadpackages",children:[]},{value:"func (appL) LoadProcesses",id:"func-appl-loadprocesses",children:[]},{value:"func (appL) LoadResourceAppAnnotations",id:"func-appl-loadresourceappannotations",children:[]},{value:"func (appL) LoadResourceAppLabels",id:"func-appl-loadresourceapplabels",children:[]},{value:"func (appL) LoadRevisions",id:"func-appl-loadrevisions",children:[]},{value:"func (appL) LoadRouteMappings",id:"func-appl-loadroutemappings",children:[]},{value:"func (appL) LoadServiceBindings",id:"func-appl-loadservicebindings",children:[]},{value:"func (appL) LoadSidecars",id:"func-appl-loadsidecars",children:[]},{value:"func (appL) LoadSpace",id:"func-appl-loadspace",children:[]},{value:"func (appL) LoadTasks",id:"func-appl-loadtasks",children:[]}]},{value:"type appLabelL",id:"type-applabell",children:[{value:"func (appLabelL) LoadResource",id:"func-applabell-loadresource",children:[]}]},{value:"type appLabelQuery",id:"type-applabelquery",children:[{value:"func AppLabels",id:"func-applabels",children:[]},{value:"func (appLabelQuery) All",id:"func-applabelquery-all",children:[]},{value:"func (appLabelQuery) Count",id:"func-applabelquery-count",children:[]},{value:"func (appLabelQuery) Delete",id:"func-applabelquery-delete",children:[]},{value:"func (appLabelQuery) DeleteAll",id:"func-applabelquery-deleteall",children:[]},{value:"func (appLabelQuery) DeleteAllSlice",id:"func-applabelquery-deleteallslice",children:[]},{value:"func (appLabelQuery) Exists",id:"func-applabelquery-exists",children:[]},{value:"func (appLabelQuery) Insert",id:"func-applabelquery-insert",children:[]},{value:"func (appLabelQuery) One",id:"func-applabelquery-one",children:[]},{value:"func (appLabelQuery) Reload",id:"func-applabelquery-reload",children:[]},{value:"func (appLabelQuery) ReloadAll",id:"func-applabelquery-reloadall",children:[]},{value:"func (appLabelQuery) RemoveResource",id:"func-applabelquery-removeresource",children:[]},{value:"func (appLabelQuery) Resource",id:"func-applabelquery-resource",children:[]},{value:"func (appLabelQuery) SetResource",id:"func-applabelquery-setresource",children:[]},{value:"func (appLabelQuery) Update",id:"func-applabelquery-update",children:[]},{value:"func (appLabelQuery) UpdateAll",id:"func-applabelquery-updateall",children:[]},{value:"func (appLabelQuery) UpdateAllSlice",id:"func-applabelquery-updateallslice",children:[]},{value:"func (appLabelQuery) Upsert",id:"func-applabelquery-upsert",children:[]}]},{value:"type appLabelR",id:"type-applabelr",children:[{value:"func (*appLabelR) NewStruct",id:"func-applabelr-newstruct",children:[]}]},{value:"type appQuery",id:"type-appquery",children:[{value:"func Apps",id:"func-apps",children:[]},{value:"func (appQuery) AddBuilds",id:"func-appquery-addbuilds",children:[]},{value:"func (appQuery) AddDeployments",id:"func-appquery-adddeployments",children:[]},{value:"func (appQuery) AddDroplets",id:"func-appquery-adddroplets",children:[]},{value:"func (appQuery) AddKpackLifecycleData",id:"func-appquery-addkpacklifecycledata",children:[]},{value:"func (appQuery) AddPackages",id:"func-appquery-addpackages",children:[]},{value:"func (appQuery) AddProcesses",id:"func-appquery-addprocesses",children:[]},{value:"func (appQuery) AddResourceAppAnnotations",id:"func-appquery-addresourceappannotations",children:[]},{value:"func (appQuery) AddResourceAppLabels",id:"func-appquery-addresourceapplabels",children:[]},{value:"func (appQuery) AddRevisions",id:"func-appquery-addrevisions",children:[]},{value:"func (appQuery) AddRouteMappings",id:"func-appquery-addroutemappings",children:[]},{value:"func (appQuery) AddServiceBindings",id:"func-appquery-addservicebindings",children:[]},{value:"func (appQuery) AddSidecars",id:"func-appquery-addsidecars",children:[]},{value:"func (appQuery) AddTasks",id:"func-appquery-addtasks",children:[]},{value:"func (appQuery) All",id:"func-appquery-all",children:[]},{value:"func (appQuery) Builds",id:"func-appquery-builds",children:[]},{value:"func (appQuery) Count",id:"func-appquery-count",children:[]},{value:"func (appQuery) Delete",id:"func-appquery-delete",children:[]},{value:"func (appQuery) DeleteAll",id:"func-appquery-deleteall",children:[]},{value:"func (appQuery) DeleteAllSlice",id:"func-appquery-deleteallslice",children:[]},{value:"func (appQuery) Deployments",id:"func-appquery-deployments",children:[]},{value:"func (appQuery) Droplets",id:"func-appquery-droplets",children:[]},{value:"func (appQuery) Exists",id:"func-appquery-exists",children:[]},{value:"func (appQuery) Insert",id:"func-appquery-insert",children:[]},{value:"func (appQuery) KpackLifecycleData",id:"func-appquery-kpacklifecycledata",children:[]},{value:"func (appQuery) One",id:"func-appquery-one",children:[]},{value:"func (appQuery) Packages",id:"func-appquery-packages",children:[]},{value:"func (appQuery) Processes",id:"func-appquery-processes",children:[]},{value:"func (appQuery) Reload",id:"func-appquery-reload",children:[]},{value:"func (appQuery) ReloadAll",id:"func-appquery-reloadall",children:[]},{value:"func (appQuery) RemoveBuilds",id:"func-appquery-removebuilds",children:[]},{value:"func (appQuery) RemoveDeployments",id:"func-appquery-removedeployments",children:[]},{value:"func (appQuery) RemoveDroplets",id:"func-appquery-removedroplets",children:[]},{value:"func (appQuery) RemoveKpackLifecycleData",id:"func-appquery-removekpacklifecycledata",children:[]},{value:"func (appQuery) RemovePackages",id:"func-appquery-removepackages",children:[]},{value:"func (appQuery) RemoveProcesses",id:"func-appquery-removeprocesses",children:[]},{value:"func (appQuery) RemoveResourceAppAnnotations",id:"func-appquery-removeresourceappannotations",children:[]},{value:"func (appQuery) RemoveResourceAppLabels",id:"func-appquery-removeresourceapplabels",children:[]},{value:"func (appQuery) RemoveRevisions",id:"func-appquery-removerevisions",children:[]},{value:"func (appQuery) RemoveSpace",id:"func-appquery-removespace",children:[]},{value:"func (appQuery) ResourceAppAnnotations",id:"func-appquery-resourceappannotations",children:[]},{value:"func (appQuery) ResourceAppLabels",id:"func-appquery-resourceapplabels",children:[]},{value:"func (appQuery) Revisions",id:"func-appquery-revisions",children:[]},{value:"func (appQuery) RouteMappings",id:"func-appquery-routemappings",children:[]},{value:"func (appQuery) ServiceBindings",id:"func-appquery-servicebindings",children:[]},{value:"func (appQuery) SetBuilds",id:"func-appquery-setbuilds",children:[]},{value:"func (appQuery) SetDeployments",id:"func-appquery-setdeployments",children:[]},{value:"func (appQuery) SetDroplets",id:"func-appquery-setdroplets",children:[]},{value:"func (appQuery) SetKpackLifecycleData",id:"func-appquery-setkpacklifecycledata",children:[]},{value:"func (appQuery) SetPackages",id:"func-appquery-setpackages",children:[]},{value:"func (appQuery) SetProcesses",id:"func-appquery-setprocesses",children:[]},{value:"func (appQuery) SetResourceAppAnnotations",id:"func-appquery-setresourceappannotations",children:[]},{value:"func (appQuery) SetResourceAppLabels",id:"func-appquery-setresourceapplabels",children:[]},{value:"func (appQuery) SetRevisions",id:"func-appquery-setrevisions",children:[]},{value:"func (appQuery) SetSpace",id:"func-appquery-setspace",children:[]},{value:"func (appQuery) Sidecars",id:"func-appquery-sidecars",children:[]},{value:"func (appQuery) Space",id:"func-appquery-space",children:[]},{value:"func (appQuery) Tasks",id:"func-appquery-tasks",children:[]},{value:"func (appQuery) Update",id:"func-appquery-update",children:[]},{value:"func (appQuery) UpdateAll",id:"func-appquery-updateall",children:[]},{value:"func (appQuery) UpdateAllSlice",id:"func-appquery-updateallslice",children:[]},{value:"func (appQuery) Upsert",id:"func-appquery-upsert",children:[]}]},{value:"type appR",id:"type-appr",children:[{value:"func (*appR) NewStruct",id:"func-appr-newstruct",children:[]}]},{value:"type appUsageEventL",id:"type-appusageeventl",children:[]},{value:"type appUsageEventQuery",id:"type-appusageeventquery",children:[{value:"func AppUsageEvents",id:"func-appusageevents",children:[]},{value:"func (appUsageEventQuery) All",id:"func-appusageeventquery-all",children:[]},{value:"func (appUsageEventQuery) Count",id:"func-appusageeventquery-count",children:[]},{value:"func (appUsageEventQuery) Delete",id:"func-appusageeventquery-delete",children:[]},{value:"func (appUsageEventQuery) DeleteAll",id:"func-appusageeventquery-deleteall",children:[]},{value:"func (appUsageEventQuery) DeleteAllSlice",id:"func-appusageeventquery-deleteallslice",children:[]},{value:"func (appUsageEventQuery) Exists",id:"func-appusageeventquery-exists",children:[]},{value:"func (appUsageEventQuery) Insert",id:"func-appusageeventquery-insert",children:[]},{value:"func (appUsageEventQuery) One",id:"func-appusageeventquery-one",children:[]},{value:"func (appUsageEventQuery) Reload",id:"func-appusageeventquery-reload",children:[]},{value:"func (appUsageEventQuery) ReloadAll",id:"func-appusageeventquery-reloadall",children:[]},{value:"func (appUsageEventQuery) Update",id:"func-appusageeventquery-update",children:[]},{value:"func (appUsageEventQuery) UpdateAll",id:"func-appusageeventquery-updateall",children:[]},{value:"func (appUsageEventQuery) UpdateAllSlice",id:"func-appusageeventquery-updateallslice",children:[]},{value:"func (appUsageEventQuery) Upsert",id:"func-appusageeventquery-upsert",children:[]}]},{value:"type appUsageEventR",id:"type-appusageeventr",children:[{value:"func (*appUsageEventR) NewStruct",id:"func-appusageeventr-newstruct",children:[]}]},{value:"type buildAnnotationL",id:"type-buildannotationl",children:[{value:"func (buildAnnotationL) LoadResource",id:"func-buildannotationl-loadresource",children:[]}]},{value:"type buildAnnotationQuery",id:"type-buildannotationquery",children:[{value:"func BuildAnnotations",id:"func-buildannotations",children:[]},{value:"func (buildAnnotationQuery) All",id:"func-buildannotationquery-all",children:[]},{value:"func (buildAnnotationQuery) Count",id:"func-buildannotationquery-count",children:[]},{value:"func (buildAnnotationQuery) Delete",id:"func-buildannotationquery-delete",children:[]},{value:"func (buildAnnotationQuery) DeleteAll",id:"func-buildannotationquery-deleteall",children:[]},{value:"func (buildAnnotationQuery) DeleteAllSlice",id:"func-buildannotationquery-deleteallslice",children:[]},{value:"func (buildAnnotationQuery) Exists",id:"func-buildannotationquery-exists",children:[]},{value:"func (buildAnnotationQuery) Insert",id:"func-buildannotationquery-insert",children:[]},{value:"func (buildAnnotationQuery) One",id:"func-buildannotationquery-one",children:[]},{value:"func (buildAnnotationQuery) Reload",id:"func-buildannotationquery-reload",children:[]},{value:"func (buildAnnotationQuery) ReloadAll",id:"func-buildannotationquery-reloadall",children:[]},{value:"func (buildAnnotationQuery) RemoveResource",id:"func-buildannotationquery-removeresource",children:[]},{value:"func (buildAnnotationQuery) Resource",id:"func-buildannotationquery-resource",children:[]},{value:"func (buildAnnotationQuery) SetResource",id:"func-buildannotationquery-setresource",children:[]},{value:"func (buildAnnotationQuery) Update",id:"func-buildannotationquery-update",children:[]},{value:"func (buildAnnotationQuery) UpdateAll",id:"func-buildannotationquery-updateall",children:[]},{value:"func (buildAnnotationQuery) UpdateAllSlice",id:"func-buildannotationquery-updateallslice",children:[]},{value:"func (buildAnnotationQuery) Upsert",id:"func-buildannotationquery-upsert",children:[]}]},{value:"type buildAnnotationR",id:"type-buildannotationr",children:[{value:"func (*buildAnnotationR) NewStruct",id:"func-buildannotationr-newstruct",children:[]}]},{value:"type buildL",id:"type-buildl",children:[{value:"func (buildL) LoadApp",id:"func-buildl-loadapp",children:[]},{value:"func (buildL) LoadKpackLifecycleData",id:"func-buildl-loadkpacklifecycledata",children:[]},{value:"func (buildL) LoadResourceBuildAnnotations",id:"func-buildl-loadresourcebuildannotations",children:[]},{value:"func (buildL) LoadResourceBuildLabels",id:"func-buildl-loadresourcebuildlabels",children:[]}]},{value:"type buildLabelL",id:"type-buildlabell",children:[{value:"func (buildLabelL) LoadResource",id:"func-buildlabell-loadresource",children:[]}]},{value:"type buildLabelQuery",id:"type-buildlabelquery",children:[{value:"func BuildLabels",id:"func-buildlabels",children:[]},{value:"func (buildLabelQuery) All",id:"func-buildlabelquery-all",children:[]},{value:"func (buildLabelQuery) Count",id:"func-buildlabelquery-count",children:[]},{value:"func (buildLabelQuery) Delete",id:"func-buildlabelquery-delete",children:[]},{value:"func (buildLabelQuery) DeleteAll",id:"func-buildlabelquery-deleteall",children:[]},{value:"func (buildLabelQuery) DeleteAllSlice",id:"func-buildlabelquery-deleteallslice",children:[]},{value:"func (buildLabelQuery) Exists",id:"func-buildlabelquery-exists",children:[]},{value:"func (buildLabelQuery) Insert",id:"func-buildlabelquery-insert",children:[]},{value:"func (buildLabelQuery) One",id:"func-buildlabelquery-one",children:[]},{value:"func (buildLabelQuery) Reload",id:"func-buildlabelquery-reload",children:[]},{value:"func (buildLabelQuery) ReloadAll",id:"func-buildlabelquery-reloadall",children:[]},{value:"func (buildLabelQuery) RemoveResource",id:"func-buildlabelquery-removeresource",children:[]},{value:"func (buildLabelQuery) Resource",id:"func-buildlabelquery-resource",children:[]},{value:"func (buildLabelQuery) SetResource",id:"func-buildlabelquery-setresource",children:[]},{value:"func (buildLabelQuery) Update",id:"func-buildlabelquery-update",children:[]},{value:"func (buildLabelQuery) UpdateAll",id:"func-buildlabelquery-updateall",children:[]},{value:"func (buildLabelQuery) UpdateAllSlice",id:"func-buildlabelquery-updateallslice",children:[]},{value:"func (buildLabelQuery) Upsert",id:"func-buildlabelquery-upsert",children:[]}]},{value:"type buildLabelR",id:"type-buildlabelr",children:[{value:"func (*buildLabelR) NewStruct",id:"func-buildlabelr-newstruct",children:[]}]},{value:"type buildQuery",id:"type-buildquery",children:[{value:"func Builds",id:"func-builds",children:[]},{value:"func (buildQuery) AddKpackLifecycleData",id:"func-buildquery-addkpacklifecycledata",children:[]},{value:"func (buildQuery) AddResourceBuildAnnotations",id:"func-buildquery-addresourcebuildannotations",children:[]},{value:"func (buildQuery) AddResourceBuildLabels",id:"func-buildquery-addresourcebuildlabels",children:[]},{value:"func (buildQuery) All",id:"func-buildquery-all",children:[]},{value:"func (buildQuery) App",id:"func-buildquery-app",children:[]},{value:"func (buildQuery) Count",id:"func-buildquery-count",children:[]},{value:"func (buildQuery) Delete",id:"func-buildquery-delete",children:[]},{value:"func (buildQuery) DeleteAll",id:"func-buildquery-deleteall",children:[]},{value:"func (buildQuery) DeleteAllSlice",id:"func-buildquery-deleteallslice",children:[]},{value:"func (buildQuery) Exists",id:"func-buildquery-exists",children:[]},{value:"func (buildQuery) Insert",id:"func-buildquery-insert",children:[]},{value:"func (buildQuery) KpackLifecycleData",id:"func-buildquery-kpacklifecycledata",children:[]},{value:"func (buildQuery) One",id:"func-buildquery-one",children:[]},{value:"func (buildQuery) Reload",id:"func-buildquery-reload",children:[]},{value:"func (buildQuery) ReloadAll",id:"func-buildquery-reloadall",children:[]},{value:"func (buildQuery) RemoveApp",id:"func-buildquery-removeapp",children:[]},{value:"func (buildQuery) RemoveKpackLifecycleData",id:"func-buildquery-removekpacklifecycledata",children:[]},{value:"func (buildQuery) RemoveResourceBuildAnnotations",id:"func-buildquery-removeresourcebuildannotations",children:[]},{value:"func (buildQuery) RemoveResourceBuildLabels",id:"func-buildquery-removeresourcebuildlabels",children:[]},{value:"func (buildQuery) ResourceBuildAnnotations",id:"func-buildquery-resourcebuildannotations",children:[]},{value:"func (buildQuery) ResourceBuildLabels",id:"func-buildquery-resourcebuildlabels",children:[]},{value:"func (buildQuery) SetApp",id:"func-buildquery-setapp",children:[]},{value:"func (buildQuery) SetKpackLifecycleData",id:"func-buildquery-setkpacklifecycledata",children:[]},{value:"func (buildQuery) SetResourceBuildAnnotations",id:"func-buildquery-setresourcebuildannotations",children:[]},{value:"func (buildQuery) SetResourceBuildLabels",id:"func-buildquery-setresourcebuildlabels",children:[]},{value:"func (buildQuery) Update",id:"func-buildquery-update",children:[]},{value:"func (buildQuery) UpdateAll",id:"func-buildquery-updateall",children:[]},{value:"func (buildQuery) UpdateAllSlice",id:"func-buildquery-updateallslice",children:[]},{value:"func (buildQuery) Upsert",id:"func-buildquery-upsert",children:[]}]},{value:"type buildR",id:"type-buildr",children:[{value:"func (*buildR) NewStruct",id:"func-buildr-newstruct",children:[]}]},{value:"type buildpackAnnotationL",id:"type-buildpackannotationl",children:[{value:"func (buildpackAnnotationL) LoadResource",id:"func-buildpackannotationl-loadresource",children:[]}]},{value:"type buildpackAnnotationQuery",id:"type-buildpackannotationquery",children:[{value:"func BuildpackAnnotations",id:"func-buildpackannotations",children:[]},{value:"func (buildpackAnnotationQuery) All",id:"func-buildpackannotationquery-all",children:[]},{value:"func (buildpackAnnotationQuery) Count",id:"func-buildpackannotationquery-count",children:[]},{value:"func (buildpackAnnotationQuery) Delete",id:"func-buildpackannotationquery-delete",children:[]},{value:"func (buildpackAnnotationQuery) DeleteAll",id:"func-buildpackannotationquery-deleteall",children:[]},{value:"func (buildpackAnnotationQuery) DeleteAllSlice",id:"func-buildpackannotationquery-deleteallslice",children:[]},{value:"func (buildpackAnnotationQuery) Exists",id:"func-buildpackannotationquery-exists",children:[]},{value:"func (buildpackAnnotationQuery) Insert",id:"func-buildpackannotationquery-insert",children:[]},{value:"func (buildpackAnnotationQuery) One",id:"func-buildpackannotationquery-one",children:[]},{value:"func (buildpackAnnotationQuery) Reload",id:"func-buildpackannotationquery-reload",children:[]},{value:"func (buildpackAnnotationQuery) ReloadAll",id:"func-buildpackannotationquery-reloadall",children:[]},{value:"func (buildpackAnnotationQuery) RemoveResource",id:"func-buildpackannotationquery-removeresource",children:[]},{value:"func (buildpackAnnotationQuery) Resource",id:"func-buildpackannotationquery-resource",children:[]},{value:"func (buildpackAnnotationQuery) SetResource",id:"func-buildpackannotationquery-setresource",children:[]},{value:"func (buildpackAnnotationQuery) Update",id:"func-buildpackannotationquery-update",children:[]},{value:"func (buildpackAnnotationQuery) UpdateAll",id:"func-buildpackannotationquery-updateall",children:[]},{value:"func (buildpackAnnotationQuery) UpdateAllSlice",id:"func-buildpackannotationquery-updateallslice",children:[]},{value:"func (buildpackAnnotationQuery) Upsert",id:"func-buildpackannotationquery-upsert",children:[]}]},{value:"type buildpackAnnotationR",id:"type-buildpackannotationr",children:[{value:"func (*buildpackAnnotationR) NewStruct",id:"func-buildpackannotationr-newstruct",children:[]}]},{value:"type buildpackL",id:"type-buildpackl",children:[{value:"func (buildpackL) LoadResourceBuildpackAnnotations",id:"func-buildpackl-loadresourcebuildpackannotations",children:[]},{value:"func (buildpackL) LoadResourceBuildpackLabels",id:"func-buildpackl-loadresourcebuildpacklabels",children:[]}]},{value:"type buildpackLabelL",id:"type-buildpacklabell",children:[{value:"func (buildpackLabelL) LoadResource",id:"func-buildpacklabell-loadresource",children:[]}]},{value:"type buildpackLabelQuery",id:"type-buildpacklabelquery",children:[{value:"func BuildpackLabels",id:"func-buildpacklabels",children:[]},{value:"func (buildpackLabelQuery) All",id:"func-buildpacklabelquery-all",children:[]},{value:"func (buildpackLabelQuery) Count",id:"func-buildpacklabelquery-count",children:[]},{value:"func (buildpackLabelQuery) Delete",id:"func-buildpacklabelquery-delete",children:[]},{value:"func (buildpackLabelQuery) DeleteAll",id:"func-buildpacklabelquery-deleteall",children:[]},{value:"func (buildpackLabelQuery) DeleteAllSlice",id:"func-buildpacklabelquery-deleteallslice",children:[]},{value:"func (buildpackLabelQuery) Exists",id:"func-buildpacklabelquery-exists",children:[]},{value:"func (buildpackLabelQuery) Insert",id:"func-buildpacklabelquery-insert",children:[]},{value:"func (buildpackLabelQuery) One",id:"func-buildpacklabelquery-one",children:[]},{value:"func (buildpackLabelQuery) Reload",id:"func-buildpacklabelquery-reload",children:[]},{value:"func (buildpackLabelQuery) ReloadAll",id:"func-buildpacklabelquery-reloadall",children:[]},{value:"func (buildpackLabelQuery) RemoveResource",id:"func-buildpacklabelquery-removeresource",children:[]},{value:"func (buildpackLabelQuery) Resource",id:"func-buildpacklabelquery-resource",children:[]},{value:"func (buildpackLabelQuery) SetResource",id:"func-buildpacklabelquery-setresource",children:[]},{value:"func (buildpackLabelQuery) Update",id:"func-buildpacklabelquery-update",children:[]},{value:"func (buildpackLabelQuery) UpdateAll",id:"func-buildpacklabelquery-updateall",children:[]},{value:"func (buildpackLabelQuery) UpdateAllSlice",id:"func-buildpacklabelquery-updateallslice",children:[]},{value:"func (buildpackLabelQuery) Upsert",id:"func-buildpacklabelquery-upsert",children:[]}]},{value:"type buildpackLabelR",id:"type-buildpacklabelr",children:[{value:"func (*buildpackLabelR) NewStruct",id:"func-buildpacklabelr-newstruct",children:[]}]},{value:"type buildpackLifecycleBuildpackL",id:"type-buildpacklifecyclebuildpackl",children:[{value:"func (buildpackLifecycleBuildpackL) LoadBuildpackLifecycleDatum",id:"func-buildpacklifecyclebuildpackl-loadbuildpacklifecycledatum",children:[]}]},{value:"type buildpackLifecycleBuildpackQuery",id:"type-buildpacklifecyclebuildpackquery",children:[{value:"func BuildpackLifecycleBuildpacks",id:"func-buildpacklifecyclebuildpacks",children:[]},{value:"func (buildpackLifecycleBuildpackQuery) All",id:"func-buildpacklifecyclebuildpackquery-all",children:[]},{value:"func (buildpackLifecycleBuildpackQuery) BuildpackLifecycleDatum",id:"func-buildpacklifecyclebuildpackquery-buildpacklifecycledatum",children:[]},{value:"func (buildpackLifecycleBuildpackQuery) Count",id:"func-buildpacklifecyclebuildpackquery-count",children:[]},{value:"func (buildpackLifecycleBuildpackQuery) Delete",id:"func-buildpacklifecyclebuildpackquery-delete",children:[]},{value:"func (buildpackLifecycleBuildpackQuery) DeleteAll",id:"func-buildpacklifecyclebuildpackquery-deleteall",children:[]},{value:"func (buildpackLifecycleBuildpackQuery) DeleteAllSlice",id:"func-buildpacklifecyclebuildpackquery-deleteallslice",children:[]},{value:"func (buildpackLifecycleBuildpackQuery) Exists",id:"func-buildpacklifecyclebuildpackquery-exists",children:[]},{value:"func (buildpackLifecycleBuildpackQuery) Insert",id:"func-buildpacklifecyclebuildpackquery-insert",children:[]},{value:"func (buildpackLifecycleBuildpackQuery) One",id:"func-buildpacklifecyclebuildpackquery-one",children:[]},{value:"func (buildpackLifecycleBuildpackQuery) Reload",id:"func-buildpacklifecyclebuildpackquery-reload",children:[]},{value:"func (buildpackLifecycleBuildpackQuery) ReloadAll",id:"func-buildpacklifecyclebuildpackquery-reloadall",children:[]},{value:"func (buildpackLifecycleBuildpackQuery) RemoveBuildpackLifecycleDatum",id:"func-buildpacklifecyclebuildpackquery-removebuildpacklifecycledatum",children:[]},{value:"func (buildpackLifecycleBuildpackQuery) SetBuildpackLifecycleDatum",id:"func-buildpacklifecyclebuildpackquery-setbuildpacklifecycledatum",children:[]},{value:"func (buildpackLifecycleBuildpackQuery) Update",id:"func-buildpacklifecyclebuildpackquery-update",children:[]},{value:"func (buildpackLifecycleBuildpackQuery) UpdateAll",id:"func-buildpacklifecyclebuildpackquery-updateall",children:[]},{value:"func (buildpackLifecycleBuildpackQuery) UpdateAllSlice",id:"func-buildpacklifecyclebuildpackquery-updateallslice",children:[]},{value:"func (buildpackLifecycleBuildpackQuery) Upsert",id:"func-buildpacklifecyclebuildpackquery-upsert",children:[]}]},{value:"type buildpackLifecycleBuildpackR",id:"type-buildpacklifecyclebuildpackr",children:[{value:"func (*buildpackLifecycleBuildpackR) NewStruct",id:"func-buildpacklifecyclebuildpackr-newstruct",children:[]}]},{value:"type buildpackLifecycleDatumL",id:"type-buildpacklifecycledatuml",children:[{value:"func (buildpackLifecycleDatumL) LoadBuildpackLifecycleBuildpacks",id:"func-buildpacklifecycledatuml-loadbuildpacklifecyclebuildpacks",children:[]}]},{value:"type buildpackLifecycleDatumQuery",id:"type-buildpacklifecycledatumquery",children:[{value:"func BuildpackLifecycleData",id:"func-buildpacklifecycledata",children:[]},{value:"func (buildpackLifecycleDatumQuery) AddBuildpackLifecycleBuildpacks",id:"func-buildpacklifecycledatumquery-addbuildpacklifecyclebuildpacks",children:[]},{value:"func (buildpackLifecycleDatumQuery) All",id:"func-buildpacklifecycledatumquery-all",children:[]},{value:"func (buildpackLifecycleDatumQuery) BuildpackLifecycleBuildpacks",id:"func-buildpacklifecycledatumquery-buildpacklifecyclebuildpacks",children:[]},{value:"func (buildpackLifecycleDatumQuery) Count",id:"func-buildpacklifecycledatumquery-count",children:[]},{value:"func (buildpackLifecycleDatumQuery) Delete",id:"func-buildpacklifecycledatumquery-delete",children:[]},{value:"func (buildpackLifecycleDatumQuery) DeleteAll",id:"func-buildpacklifecycledatumquery-deleteall",children:[]},{value:"func (buildpackLifecycleDatumQuery) DeleteAllSlice",id:"func-buildpacklifecycledatumquery-deleteallslice",children:[]},{value:"func (buildpackLifecycleDatumQuery) Exists",id:"func-buildpacklifecycledatumquery-exists",children:[]},{value:"func (buildpackLifecycleDatumQuery) Insert",id:"func-buildpacklifecycledatumquery-insert",children:[]},{value:"func (buildpackLifecycleDatumQuery) One",id:"func-buildpacklifecycledatumquery-one",children:[]},{value:"func (buildpackLifecycleDatumQuery) Reload",id:"func-buildpacklifecycledatumquery-reload",children:[]},{value:"func (buildpackLifecycleDatumQuery) ReloadAll",id:"func-buildpacklifecycledatumquery-reloadall",children:[]},{value:"func (buildpackLifecycleDatumQuery) RemoveBuildpackLifecycleBuildpacks",id:"func-buildpacklifecycledatumquery-removebuildpacklifecyclebuildpacks",children:[]},{value:"func (buildpackLifecycleDatumQuery) SetBuildpackLifecycleBuildpacks",id:"func-buildpacklifecycledatumquery-setbuildpacklifecyclebuildpacks",children:[]},{value:"func (buildpackLifecycleDatumQuery) Update",id:"func-buildpacklifecycledatumquery-update",children:[]},{value:"func (buildpackLifecycleDatumQuery) UpdateAll",id:"func-buildpacklifecycledatumquery-updateall",children:[]},{value:"func (buildpackLifecycleDatumQuery) UpdateAllSlice",id:"func-buildpacklifecycledatumquery-updateallslice",children:[]},{value:"func (buildpackLifecycleDatumQuery) Upsert",id:"func-buildpacklifecycledatumquery-upsert",children:[]}]},{value:"type buildpackLifecycleDatumR",id:"type-buildpacklifecycledatumr",children:[{value:"func (*buildpackLifecycleDatumR) NewStruct",id:"func-buildpacklifecycledatumr-newstruct",children:[]}]},{value:"type buildpackQuery",id:"type-buildpackquery",children:[{value:"func Buildpacks",id:"func-buildpacks",children:[]},{value:"func (buildpackQuery) AddResourceBuildpackAnnotations",id:"func-buildpackquery-addresourcebuildpackannotations",children:[]},{value:"func (buildpackQuery) AddResourceBuildpackLabels",id:"func-buildpackquery-addresourcebuildpacklabels",children:[]},{value:"func (buildpackQuery) All",id:"func-buildpackquery-all",children:[]},{value:"func (buildpackQuery) Count",id:"func-buildpackquery-count",children:[]},{value:"func (buildpackQuery) Delete",id:"func-buildpackquery-delete",children:[]},{value:"func (buildpackQuery) DeleteAll",id:"func-buildpackquery-deleteall",children:[]},{value:"func (buildpackQuery) DeleteAllSlice",id:"func-buildpackquery-deleteallslice",children:[]},{value:"func (buildpackQuery) Exists",id:"func-buildpackquery-exists",children:[]},{value:"func (buildpackQuery) Insert",id:"func-buildpackquery-insert",children:[]},{value:"func (buildpackQuery) One",id:"func-buildpackquery-one",children:[]},{value:"func (buildpackQuery) Reload",id:"func-buildpackquery-reload",children:[]},{value:"func (buildpackQuery) ReloadAll",id:"func-buildpackquery-reloadall",children:[]},{value:"func (buildpackQuery) RemoveResourceBuildpackAnnotations",id:"func-buildpackquery-removeresourcebuildpackannotations",children:[]},{value:"func (buildpackQuery) RemoveResourceBuildpackLabels",id:"func-buildpackquery-removeresourcebuildpacklabels",children:[]},{value:"func (buildpackQuery) ResourceBuildpackAnnotations",id:"func-buildpackquery-resourcebuildpackannotations",children:[]},{value:"func (buildpackQuery) ResourceBuildpackLabels",id:"func-buildpackquery-resourcebuildpacklabels",children:[]},{value:"func (buildpackQuery) SetResourceBuildpackAnnotations",id:"func-buildpackquery-setresourcebuildpackannotations",children:[]},{value:"func (buildpackQuery) SetResourceBuildpackLabels",id:"func-buildpackquery-setresourcebuildpacklabels",children:[]},{value:"func (buildpackQuery) Update",id:"func-buildpackquery-update",children:[]},{value:"func (buildpackQuery) UpdateAll",id:"func-buildpackquery-updateall",children:[]},{value:"func (buildpackQuery) UpdateAllSlice",id:"func-buildpackquery-updateallslice",children:[]},{value:"func (buildpackQuery) Upsert",id:"func-buildpackquery-upsert",children:[]}]},{value:"type buildpackR",id:"type-buildpackr",children:[{value:"func (*buildpackR) NewStruct",id:"func-buildpackr-newstruct",children:[]}]},{value:"type clockJobL",id:"type-clockjobl",children:[]},{value:"type clockJobQuery",id:"type-clockjobquery",children:[{value:"func ClockJobs",id:"func-clockjobs",children:[]},{value:"func (clockJobQuery) All",id:"func-clockjobquery-all",children:[]},{value:"func (clockJobQuery) Count",id:"func-clockjobquery-count",children:[]},{value:"func (clockJobQuery) Delete",id:"func-clockjobquery-delete",children:[]},{value:"func (clockJobQuery) DeleteAll",id:"func-clockjobquery-deleteall",children:[]},{value:"func (clockJobQuery) DeleteAllSlice",id:"func-clockjobquery-deleteallslice",children:[]},{value:"func (clockJobQuery) Exists",id:"func-clockjobquery-exists",children:[]},{value:"func (clockJobQuery) Insert",id:"func-clockjobquery-insert",children:[]},{value:"func (clockJobQuery) One",id:"func-clockjobquery-one",children:[]},{value:"func (clockJobQuery) Reload",id:"func-clockjobquery-reload",children:[]},{value:"func (clockJobQuery) ReloadAll",id:"func-clockjobquery-reloadall",children:[]},{value:"func (clockJobQuery) Update",id:"func-clockjobquery-update",children:[]},{value:"func (clockJobQuery) UpdateAll",id:"func-clockjobquery-updateall",children:[]},{value:"func (clockJobQuery) UpdateAllSlice",id:"func-clockjobquery-updateallslice",children:[]},{value:"func (clockJobQuery) Upsert",id:"func-clockjobquery-upsert",children:[]}]},{value:"type clockJobR",id:"type-clockjobr",children:[{value:"func (*clockJobR) NewStruct",id:"func-clockjobr-newstruct",children:[]}]},{value:"type delayedJobL",id:"type-delayedjobl",children:[]},{value:"type delayedJobQuery",id:"type-delayedjobquery",children:[{value:"func DelayedJobs",id:"func-delayedjobs",children:[]},{value:"func (delayedJobQuery) All",id:"func-delayedjobquery-all",children:[]},{value:"func (delayedJobQuery) Count",id:"func-delayedjobquery-count",children:[]},{value:"func (delayedJobQuery) Delete",id:"func-delayedjobquery-delete",children:[]},{value:"func (delayedJobQuery) DeleteAll",id:"func-delayedjobquery-deleteall",children:[]},{value:"func (delayedJobQuery) DeleteAllSlice",id:"func-delayedjobquery-deleteallslice",children:[]},{value:"func (delayedJobQuery) Exists",id:"func-delayedjobquery-exists",children:[]},{value:"func (delayedJobQuery) Insert",id:"func-delayedjobquery-insert",children:[]},{value:"func (delayedJobQuery) One",id:"func-delayedjobquery-one",children:[]},{value:"func (delayedJobQuery) Reload",id:"func-delayedjobquery-reload",children:[]},{value:"func (delayedJobQuery) ReloadAll",id:"func-delayedjobquery-reloadall",children:[]},{value:"func (delayedJobQuery) Update",id:"func-delayedjobquery-update",children:[]},{value:"func (delayedJobQuery) UpdateAll",id:"func-delayedjobquery-updateall",children:[]},{value:"func (delayedJobQuery) UpdateAllSlice",id:"func-delayedjobquery-updateallslice",children:[]},{value:"func (delayedJobQuery) Upsert",id:"func-delayedjobquery-upsert",children:[]}]},{value:"type delayedJobR",id:"type-delayedjobr",children:[{value:"func (*delayedJobR) NewStruct",id:"func-delayedjobr-newstruct",children:[]}]},{value:"type deploymentAnnotationL",id:"type-deploymentannotationl",children:[{value:"func (deploymentAnnotationL) LoadResource",id:"func-deploymentannotationl-loadresource",children:[]}]},{value:"type deploymentAnnotationQuery",id:"type-deploymentannotationquery",children:[{value:"func DeploymentAnnotations",id:"func-deploymentannotations",children:[]},{value:"func (deploymentAnnotationQuery) All",id:"func-deploymentannotationquery-all",children:[]},{value:"func (deploymentAnnotationQuery) Count",id:"func-deploymentannotationquery-count",children:[]},{value:"func (deploymentAnnotationQuery) Delete",id:"func-deploymentannotationquery-delete",children:[]},{value:"func (deploymentAnnotationQuery) DeleteAll",id:"func-deploymentannotationquery-deleteall",children:[]},{value:"func (deploymentAnnotationQuery) DeleteAllSlice",id:"func-deploymentannotationquery-deleteallslice",children:[]},{value:"func (deploymentAnnotationQuery) Exists",id:"func-deploymentannotationquery-exists",children:[]},{value:"func (deploymentAnnotationQuery) Insert",id:"func-deploymentannotationquery-insert",children:[]},{value:"func (deploymentAnnotationQuery) One",id:"func-deploymentannotationquery-one",children:[]},{value:"func (deploymentAnnotationQuery) Reload",id:"func-deploymentannotationquery-reload",children:[]},{value:"func (deploymentAnnotationQuery) ReloadAll",id:"func-deploymentannotationquery-reloadall",children:[]},{value:"func (deploymentAnnotationQuery) RemoveResource",id:"func-deploymentannotationquery-removeresource",children:[]},{value:"func (deploymentAnnotationQuery) Resource",id:"func-deploymentannotationquery-resource",children:[]},{value:"func (deploymentAnnotationQuery) SetResource",id:"func-deploymentannotationquery-setresource",children:[]},{value:"func (deploymentAnnotationQuery) Update",id:"func-deploymentannotationquery-update",children:[]},{value:"func (deploymentAnnotationQuery) UpdateAll",id:"func-deploymentannotationquery-updateall",children:[]},{value:"func (deploymentAnnotationQuery) UpdateAllSlice",id:"func-deploymentannotationquery-updateallslice",children:[]},{value:"func (deploymentAnnotationQuery) Upsert",id:"func-deploymentannotationquery-upsert",children:[]}]},{value:"type deploymentAnnotationR",id:"type-deploymentannotationr",children:[{value:"func (*deploymentAnnotationR) NewStruct",id:"func-deploymentannotationr-newstruct",children:[]}]},{value:"type deploymentL",id:"type-deploymentl",children:[{value:"func (deploymentL) LoadApp",id:"func-deploymentl-loadapp",children:[]},{value:"func (deploymentL) LoadDeploymentProcesses",id:"func-deploymentl-loaddeploymentprocesses",children:[]},{value:"func (deploymentL) LoadResourceDeploymentAnnotations",id:"func-deploymentl-loadresourcedeploymentannotations",children:[]},{value:"func (deploymentL) LoadResourceDeploymentLabels",id:"func-deploymentl-loadresourcedeploymentlabels",children:[]}]},{value:"type deploymentLabelL",id:"type-deploymentlabell",children:[{value:"func (deploymentLabelL) LoadResource",id:"func-deploymentlabell-loadresource",children:[]}]},{value:"type deploymentLabelQuery",id:"type-deploymentlabelquery",children:[{value:"func DeploymentLabels",id:"func-deploymentlabels",children:[]},{value:"func (deploymentLabelQuery) All",id:"func-deploymentlabelquery-all",children:[]},{value:"func (deploymentLabelQuery) Count",id:"func-deploymentlabelquery-count",children:[]},{value:"func (deploymentLabelQuery) Delete",id:"func-deploymentlabelquery-delete",children:[]},{value:"func (deploymentLabelQuery) DeleteAll",id:"func-deploymentlabelquery-deleteall",children:[]},{value:"func (deploymentLabelQuery) DeleteAllSlice",id:"func-deploymentlabelquery-deleteallslice",children:[]},{value:"func (deploymentLabelQuery) Exists",id:"func-deploymentlabelquery-exists",children:[]},{value:"func (deploymentLabelQuery) Insert",id:"func-deploymentlabelquery-insert",children:[]},{value:"func (deploymentLabelQuery) One",id:"func-deploymentlabelquery-one",children:[]},{value:"func (deploymentLabelQuery) Reload",id:"func-deploymentlabelquery-reload",children:[]},{value:"func (deploymentLabelQuery) ReloadAll",id:"func-deploymentlabelquery-reloadall",children:[]},{value:"func (deploymentLabelQuery) RemoveResource",id:"func-deploymentlabelquery-removeresource",children:[]},{value:"func (deploymentLabelQuery) Resource",id:"func-deploymentlabelquery-resource",children:[]},{value:"func (deploymentLabelQuery) SetResource",id:"func-deploymentlabelquery-setresource",children:[]},{value:"func (deploymentLabelQuery) Update",id:"func-deploymentlabelquery-update",children:[]},{value:"func (deploymentLabelQuery) UpdateAll",id:"func-deploymentlabelquery-updateall",children:[]},{value:"func (deploymentLabelQuery) UpdateAllSlice",id:"func-deploymentlabelquery-updateallslice",children:[]},{value:"func (deploymentLabelQuery) Upsert",id:"func-deploymentlabelquery-upsert",children:[]}]},{value:"type deploymentLabelR",id:"type-deploymentlabelr",children:[{value:"func (*deploymentLabelR) NewStruct",id:"func-deploymentlabelr-newstruct",children:[]}]},{value:"type deploymentProcessL",id:"type-deploymentprocessl",children:[{value:"func (deploymentProcessL) LoadDeployment",id:"func-deploymentprocessl-loaddeployment",children:[]}]},{value:"type deploymentProcessQuery",id:"type-deploymentprocessquery",children:[{value:"func DeploymentProcesses",id:"func-deploymentprocesses",children:[]},{value:"func (deploymentProcessQuery) All",id:"func-deploymentprocessquery-all",children:[]},{value:"func (deploymentProcessQuery) Count",id:"func-deploymentprocessquery-count",children:[]},{value:"func (deploymentProcessQuery) Delete",id:"func-deploymentprocessquery-delete",children:[]},{value:"func (deploymentProcessQuery) DeleteAll",id:"func-deploymentprocessquery-deleteall",children:[]},{value:"func (deploymentProcessQuery) DeleteAllSlice",id:"func-deploymentprocessquery-deleteallslice",children:[]},{value:"func (deploymentProcessQuery) Deployment",id:"func-deploymentprocessquery-deployment",children:[]},{value:"func (deploymentProcessQuery) Exists",id:"func-deploymentprocessquery-exists",children:[]},{value:"func (deploymentProcessQuery) Insert",id:"func-deploymentprocessquery-insert",children:[]},{value:"func (deploymentProcessQuery) One",id:"func-deploymentprocessquery-one",children:[]},{value:"func (deploymentProcessQuery) Reload",id:"func-deploymentprocessquery-reload",children:[]},{value:"func (deploymentProcessQuery) ReloadAll",id:"func-deploymentprocessquery-reloadall",children:[]},{value:"func (deploymentProcessQuery) RemoveDeployment",id:"func-deploymentprocessquery-removedeployment",children:[]},{value:"func (deploymentProcessQuery) SetDeployment",id:"func-deploymentprocessquery-setdeployment",children:[]},{value:"func (deploymentProcessQuery) Update",id:"func-deploymentprocessquery-update",children:[]},{value:"func (deploymentProcessQuery) UpdateAll",id:"func-deploymentprocessquery-updateall",children:[]},{value:"func (deploymentProcessQuery) UpdateAllSlice",id:"func-deploymentprocessquery-updateallslice",children:[]},{value:"func (deploymentProcessQuery) Upsert",id:"func-deploymentprocessquery-upsert",children:[]}]},{value:"type deploymentProcessR",id:"type-deploymentprocessr",children:[{value:"func (*deploymentProcessR) NewStruct",id:"func-deploymentprocessr-newstruct",children:[]}]},{value:"type deploymentQuery",id:"type-deploymentquery",children:[{value:"func Deployments",id:"func-deployments",children:[]},{value:"func (deploymentQuery) AddDeploymentProcesses",id:"func-deploymentquery-adddeploymentprocesses",children:[]},{value:"func (deploymentQuery) AddResourceDeploymentAnnotations",id:"func-deploymentquery-addresourcedeploymentannotations",children:[]},{value:"func (deploymentQuery) AddResourceDeploymentLabels",id:"func-deploymentquery-addresourcedeploymentlabels",children:[]},{value:"func (deploymentQuery) All",id:"func-deploymentquery-all",children:[]},{value:"func (deploymentQuery) App",id:"func-deploymentquery-app",children:[]},{value:"func (deploymentQuery) Count",id:"func-deploymentquery-count",children:[]},{value:"func (deploymentQuery) Delete",id:"func-deploymentquery-delete",children:[]},{value:"func (deploymentQuery) DeleteAll",id:"func-deploymentquery-deleteall",children:[]},{value:"func (deploymentQuery) DeleteAllSlice",id:"func-deploymentquery-deleteallslice",children:[]},{value:"func (deploymentQuery) DeploymentProcesses",id:"func-deploymentquery-deploymentprocesses",children:[]},{value:"func (deploymentQuery) Exists",id:"func-deploymentquery-exists",children:[]},{value:"func (deploymentQuery) Insert",id:"func-deploymentquery-insert",children:[]},{value:"func (deploymentQuery) One",id:"func-deploymentquery-one",children:[]},{value:"func (deploymentQuery) Reload",id:"func-deploymentquery-reload",children:[]},{value:"func (deploymentQuery) ReloadAll",id:"func-deploymentquery-reloadall",children:[]},{value:"func (deploymentQuery) RemoveApp",id:"func-deploymentquery-removeapp",children:[]},{value:"func (deploymentQuery) RemoveDeploymentProcesses",id:"func-deploymentquery-removedeploymentprocesses",children:[]},{value:"func (deploymentQuery) RemoveResourceDeploymentAnnotations",id:"func-deploymentquery-removeresourcedeploymentannotations",children:[]},{value:"func (deploymentQuery) RemoveResourceDeploymentLabels",id:"func-deploymentquery-removeresourcedeploymentlabels",children:[]},{value:"func (deploymentQuery) ResourceDeploymentAnnotations",id:"func-deploymentquery-resourcedeploymentannotations",children:[]},{value:"func (deploymentQuery) ResourceDeploymentLabels",id:"func-deploymentquery-resourcedeploymentlabels",children:[]},{value:"func (deploymentQuery) SetApp",id:"func-deploymentquery-setapp",children:[]},{value:"func (deploymentQuery) SetDeploymentProcesses",id:"func-deploymentquery-setdeploymentprocesses",children:[]},{value:"func (deploymentQuery) SetResourceDeploymentAnnotations",id:"func-deploymentquery-setresourcedeploymentannotations",children:[]},{value:"func (deploymentQuery) SetResourceDeploymentLabels",id:"func-deploymentquery-setresourcedeploymentlabels",children:[]},{value:"func (deploymentQuery) Update",id:"func-deploymentquery-update",children:[]},{value:"func (deploymentQuery) UpdateAll",id:"func-deploymentquery-updateall",children:[]},{value:"func (deploymentQuery) UpdateAllSlice",id:"func-deploymentquery-updateallslice",children:[]},{value:"func (deploymentQuery) Upsert",id:"func-deploymentquery-upsert",children:[]}]},{value:"type deploymentR",id:"type-deploymentr",children:[{value:"func (*deploymentR) NewStruct",id:"func-deploymentr-newstruct",children:[]}]},{value:"type domainAnnotationL",id:"type-domainannotationl",children:[{value:"func (domainAnnotationL) LoadResource",id:"func-domainannotationl-loadresource",children:[]}]},{value:"type domainAnnotationQuery",id:"type-domainannotationquery",children:[{value:"func DomainAnnotations",id:"func-domainannotations",children:[]},{value:"func (domainAnnotationQuery) All",id:"func-domainannotationquery-all",children:[]},{value:"func (domainAnnotationQuery) Count",id:"func-domainannotationquery-count",children:[]},{value:"func (domainAnnotationQuery) Delete",id:"func-domainannotationquery-delete",children:[]},{value:"func (domainAnnotationQuery) DeleteAll",id:"func-domainannotationquery-deleteall",children:[]},{value:"func (domainAnnotationQuery) DeleteAllSlice",id:"func-domainannotationquery-deleteallslice",children:[]},{value:"func (domainAnnotationQuery) Exists",id:"func-domainannotationquery-exists",children:[]},{value:"func (domainAnnotationQuery) Insert",id:"func-domainannotationquery-insert",children:[]},{value:"func (domainAnnotationQuery) One",id:"func-domainannotationquery-one",children:[]},{value:"func (domainAnnotationQuery) Reload",id:"func-domainannotationquery-reload",children:[]},{value:"func (domainAnnotationQuery) ReloadAll",id:"func-domainannotationquery-reloadall",children:[]},{value:"func (domainAnnotationQuery) RemoveResource",id:"func-domainannotationquery-removeresource",children:[]},{value:"func (domainAnnotationQuery) Resource",id:"func-domainannotationquery-resource",children:[]},{value:"func (domainAnnotationQuery) SetResource",id:"func-domainannotationquery-setresource",children:[]},{value:"func (domainAnnotationQuery) Update",id:"func-domainannotationquery-update",children:[]},{value:"func (domainAnnotationQuery) UpdateAll",id:"func-domainannotationquery-updateall",children:[]},{value:"func (domainAnnotationQuery) UpdateAllSlice",id:"func-domainannotationquery-updateallslice",children:[]},{value:"func (domainAnnotationQuery) Upsert",id:"func-domainannotationquery-upsert",children:[]}]},{value:"type domainAnnotationR",id:"type-domainannotationr",children:[{value:"func (*domainAnnotationR) NewStruct",id:"func-domainannotationr-newstruct",children:[]}]},{value:"type domainL",id:"type-domainl",children:[{value:"func (domainL) LoadOwningOrganization",id:"func-domainl-loadowningorganization",children:[]},{value:"func (domainL) LoadPrivateDomainOrganizationsPrivateDomains",id:"func-domainl-loadprivatedomainorganizationsprivatedomains",children:[]},{value:"func (domainL) LoadResourceDomainAnnotations",id:"func-domainl-loadresourcedomainannotations",children:[]},{value:"func (domainL) LoadResourceDomainLabels",id:"func-domainl-loadresourcedomainlabels",children:[]},{value:"func (domainL) LoadRoutes",id:"func-domainl-loadroutes",children:[]}]},{value:"type domainLabelL",id:"type-domainlabell",children:[{value:"func (domainLabelL) LoadResource",id:"func-domainlabell-loadresource",children:[]}]},{value:"type domainLabelQuery",id:"type-domainlabelquery",children:[{value:"func DomainLabels",id:"func-domainlabels",children:[]},{value:"func (domainLabelQuery) All",id:"func-domainlabelquery-all",children:[]},{value:"func (domainLabelQuery) Count",id:"func-domainlabelquery-count",children:[]},{value:"func (domainLabelQuery) Delete",id:"func-domainlabelquery-delete",children:[]},{value:"func (domainLabelQuery) DeleteAll",id:"func-domainlabelquery-deleteall",children:[]},{value:"func (domainLabelQuery) DeleteAllSlice",id:"func-domainlabelquery-deleteallslice",children:[]},{value:"func (domainLabelQuery) Exists",id:"func-domainlabelquery-exists",children:[]},{value:"func (domainLabelQuery) Insert",id:"func-domainlabelquery-insert",children:[]},{value:"func (domainLabelQuery) One",id:"func-domainlabelquery-one",children:[]},{value:"func (domainLabelQuery) Reload",id:"func-domainlabelquery-reload",children:[]},{value:"func (domainLabelQuery) ReloadAll",id:"func-domainlabelquery-reloadall",children:[]},{value:"func (domainLabelQuery) RemoveResource",id:"func-domainlabelquery-removeresource",children:[]},{value:"func (domainLabelQuery) Resource",id:"func-domainlabelquery-resource",children:[]},{value:"func (domainLabelQuery) SetResource",id:"func-domainlabelquery-setresource",children:[]},{value:"func (domainLabelQuery) Update",id:"func-domainlabelquery-update",children:[]},{value:"func (domainLabelQuery) UpdateAll",id:"func-domainlabelquery-updateall",children:[]},{value:"func (domainLabelQuery) UpdateAllSlice",id:"func-domainlabelquery-updateallslice",children:[]},{value:"func (domainLabelQuery) Upsert",id:"func-domainlabelquery-upsert",children:[]}]},{value:"type domainLabelR",id:"type-domainlabelr",children:[{value:"func (*domainLabelR) NewStruct",id:"func-domainlabelr-newstruct",children:[]}]},{value:"type domainQuery",id:"type-domainquery",children:[{value:"func Domains",id:"func-domains",children:[]},{value:"func (domainQuery) AddPrivateDomainOrganizationsPrivateDomains",id:"func-domainquery-addprivatedomainorganizationsprivatedomains",children:[]},{value:"func (domainQuery) AddResourceDomainAnnotations",id:"func-domainquery-addresourcedomainannotations",children:[]},{value:"func (domainQuery) AddResourceDomainLabels",id:"func-domainquery-addresourcedomainlabels",children:[]},{value:"func (domainQuery) AddRoutes",id:"func-domainquery-addroutes",children:[]},{value:"func (domainQuery) All",id:"func-domainquery-all",children:[]},{value:"func (domainQuery) Count",id:"func-domainquery-count",children:[]},{value:"func (domainQuery) Delete",id:"func-domainquery-delete",children:[]},{value:"func (domainQuery) DeleteAll",id:"func-domainquery-deleteall",children:[]},{value:"func (domainQuery) DeleteAllSlice",id:"func-domainquery-deleteallslice",children:[]},{value:"func (domainQuery) Exists",id:"func-domainquery-exists",children:[]},{value:"func (domainQuery) Insert",id:"func-domainquery-insert",children:[]},{value:"func (domainQuery) One",id:"func-domainquery-one",children:[]},{value:"func (domainQuery) OwningOrganization",id:"func-domainquery-owningorganization",children:[]},{value:"func (domainQuery) PrivateDomainOrganizationsPrivateDomains",id:"func-domainquery-privatedomainorganizationsprivatedomains",children:[]},{value:"func (domainQuery) Reload",id:"func-domainquery-reload",children:[]},{value:"func (domainQuery) ReloadAll",id:"func-domainquery-reloadall",children:[]},{value:"func (domainQuery) RemoveOwningOrganization",id:"func-domainquery-removeowningorganization",children:[]},{value:"func (domainQuery) RemoveResourceDomainAnnotations",id:"func-domainquery-removeresourcedomainannotations",children:[]},{value:"func (domainQuery) RemoveResourceDomainLabels",id:"func-domainquery-removeresourcedomainlabels",children:[]},{value:"func (domainQuery) ResourceDomainAnnotations",id:"func-domainquery-resourcedomainannotations",children:[]},{value:"func (domainQuery) ResourceDomainLabels",id:"func-domainquery-resourcedomainlabels",children:[]},{value:"func (domainQuery) Routes",id:"func-domainquery-routes",children:[]},{value:"func (domainQuery) SetOwningOrganization",id:"func-domainquery-setowningorganization",children:[]},{value:"func (domainQuery) SetResourceDomainAnnotations",id:"func-domainquery-setresourcedomainannotations",children:[]},{value:"func (domainQuery) SetResourceDomainLabels",id:"func-domainquery-setresourcedomainlabels",children:[]},{value:"func (domainQuery) Update",id:"func-domainquery-update",children:[]},{value:"func (domainQuery) UpdateAll",id:"func-domainquery-updateall",children:[]},{value:"func (domainQuery) UpdateAllSlice",id:"func-domainquery-updateallslice",children:[]},{value:"func (domainQuery) Upsert",id:"func-domainquery-upsert",children:[]}]},{value:"type domainR",id:"type-domainr",children:[{value:"func (*domainR) NewStruct",id:"func-domainr-newstruct",children:[]}]},{value:"type dropletAnnotationL",id:"type-dropletannotationl",children:[{value:"func (dropletAnnotationL) LoadResource",id:"func-dropletannotationl-loadresource",children:[]}]},{value:"type dropletAnnotationQuery",id:"type-dropletannotationquery",children:[{value:"func DropletAnnotations",id:"func-dropletannotations",children:[]},{value:"func (dropletAnnotationQuery) All",id:"func-dropletannotationquery-all",children:[]},{value:"func (dropletAnnotationQuery) Count",id:"func-dropletannotationquery-count",children:[]},{value:"func (dropletAnnotationQuery) Delete",id:"func-dropletannotationquery-delete",children:[]},{value:"func (dropletAnnotationQuery) DeleteAll",id:"func-dropletannotationquery-deleteall",children:[]},{value:"func (dropletAnnotationQuery) DeleteAllSlice",id:"func-dropletannotationquery-deleteallslice",children:[]},{value:"func (dropletAnnotationQuery) Exists",id:"func-dropletannotationquery-exists",children:[]},{value:"func (dropletAnnotationQuery) Insert",id:"func-dropletannotationquery-insert",children:[]},{value:"func (dropletAnnotationQuery) One",id:"func-dropletannotationquery-one",children:[]},{value:"func (dropletAnnotationQuery) Reload",id:"func-dropletannotationquery-reload",children:[]},{value:"func (dropletAnnotationQuery) ReloadAll",id:"func-dropletannotationquery-reloadall",children:[]},{value:"func (dropletAnnotationQuery) RemoveResource",id:"func-dropletannotationquery-removeresource",children:[]},{value:"func (dropletAnnotationQuery) Resource",id:"func-dropletannotationquery-resource",children:[]},{value:"func (dropletAnnotationQuery) SetResource",id:"func-dropletannotationquery-setresource",children:[]},{value:"func (dropletAnnotationQuery) Update",id:"func-dropletannotationquery-update",children:[]},{value:"func (dropletAnnotationQuery) UpdateAll",id:"func-dropletannotationquery-updateall",children:[]},{value:"func (dropletAnnotationQuery) UpdateAllSlice",id:"func-dropletannotationquery-updateallslice",children:[]},{value:"func (dropletAnnotationQuery) Upsert",id:"func-dropletannotationquery-upsert",children:[]}]},{value:"type dropletAnnotationR",id:"type-dropletannotationr",children:[{value:"func (*dropletAnnotationR) NewStruct",id:"func-dropletannotationr-newstruct",children:[]}]},{value:"type dropletL",id:"type-dropletl",children:[{value:"func (dropletL) LoadApp",id:"func-dropletl-loadapp",children:[]},{value:"func (dropletL) LoadResourceDropletAnnotations",id:"func-dropletl-loadresourcedropletannotations",children:[]},{value:"func (dropletL) LoadResourceDropletLabels",id:"func-dropletl-loadresourcedropletlabels",children:[]}]},{value:"type dropletLabelL",id:"type-dropletlabell",children:[{value:"func (dropletLabelL) LoadResource",id:"func-dropletlabell-loadresource",children:[]}]},{value:"type dropletLabelQuery",id:"type-dropletlabelquery",children:[{value:"func DropletLabels",id:"func-dropletlabels",children:[]},{value:"func (dropletLabelQuery) All",id:"func-dropletlabelquery-all",children:[]},{value:"func (dropletLabelQuery) Count",id:"func-dropletlabelquery-count",children:[]},{value:"func (dropletLabelQuery) Delete",id:"func-dropletlabelquery-delete",children:[]},{value:"func (dropletLabelQuery) DeleteAll",id:"func-dropletlabelquery-deleteall",children:[]},{value:"func (dropletLabelQuery) DeleteAllSlice",id:"func-dropletlabelquery-deleteallslice",children:[]},{value:"func (dropletLabelQuery) Exists",id:"func-dropletlabelquery-exists",children:[]},{value:"func (dropletLabelQuery) Insert",id:"func-dropletlabelquery-insert",children:[]},{value:"func (dropletLabelQuery) One",id:"func-dropletlabelquery-one",children:[]},{value:"func (dropletLabelQuery) Reload",id:"func-dropletlabelquery-reload",children:[]},{value:"func (dropletLabelQuery) ReloadAll",id:"func-dropletlabelquery-reloadall",children:[]},{value:"func (dropletLabelQuery) RemoveResource",id:"func-dropletlabelquery-removeresource",children:[]},{value:"func (dropletLabelQuery) Resource",id:"func-dropletlabelquery-resource",children:[]},{value:"func (dropletLabelQuery) SetResource",id:"func-dropletlabelquery-setresource",children:[]},{value:"func (dropletLabelQuery) Update",id:"func-dropletlabelquery-update",children:[]},{value:"func (dropletLabelQuery) UpdateAll",id:"func-dropletlabelquery-updateall",children:[]},{value:"func (dropletLabelQuery) UpdateAllSlice",id:"func-dropletlabelquery-updateallslice",children:[]},{value:"func (dropletLabelQuery) Upsert",id:"func-dropletlabelquery-upsert",children:[]}]},{value:"type dropletLabelR",id:"type-dropletlabelr",children:[{value:"func (*dropletLabelR) NewStruct",id:"func-dropletlabelr-newstruct",children:[]}]},{value:"type dropletQuery",id:"type-dropletquery",children:[{value:"func Droplets",id:"func-droplets",children:[]},{value:"func (dropletQuery) AddResourceDropletAnnotations",id:"func-dropletquery-addresourcedropletannotations",children:[]},{value:"func (dropletQuery) AddResourceDropletLabels",id:"func-dropletquery-addresourcedropletlabels",children:[]},{value:"func (dropletQuery) All",id:"func-dropletquery-all",children:[]},{value:"func (dropletQuery) App",id:"func-dropletquery-app",children:[]},{value:"func (dropletQuery) Count",id:"func-dropletquery-count",children:[]},{value:"func (dropletQuery) Delete",id:"func-dropletquery-delete",children:[]},{value:"func (dropletQuery) DeleteAll",id:"func-dropletquery-deleteall",children:[]},{value:"func (dropletQuery) DeleteAllSlice",id:"func-dropletquery-deleteallslice",children:[]},{value:"func (dropletQuery) Exists",id:"func-dropletquery-exists",children:[]},{value:"func (dropletQuery) Insert",id:"func-dropletquery-insert",children:[]},{value:"func (dropletQuery) One",id:"func-dropletquery-one",children:[]},{value:"func (dropletQuery) Reload",id:"func-dropletquery-reload",children:[]},{value:"func (dropletQuery) ReloadAll",id:"func-dropletquery-reloadall",children:[]},{value:"func (dropletQuery) RemoveApp",id:"func-dropletquery-removeapp",children:[]},{value:"func (dropletQuery) RemoveResourceDropletAnnotations",id:"func-dropletquery-removeresourcedropletannotations",children:[]},{value:"func (dropletQuery) RemoveResourceDropletLabels",id:"func-dropletquery-removeresourcedropletlabels",children:[]},{value:"func (dropletQuery) ResourceDropletAnnotations",id:"func-dropletquery-resourcedropletannotations",children:[]},{value:"func (dropletQuery) ResourceDropletLabels",id:"func-dropletquery-resourcedropletlabels",children:[]},{value:"func (dropletQuery) SetApp",id:"func-dropletquery-setapp",children:[]},{value:"func (dropletQuery) SetResourceDropletAnnotations",id:"func-dropletquery-setresourcedropletannotations",children:[]},{value:"func (dropletQuery) SetResourceDropletLabels",id:"func-dropletquery-setresourcedropletlabels",children:[]},{value:"func (dropletQuery) Update",id:"func-dropletquery-update",children:[]},{value:"func (dropletQuery) UpdateAll",id:"func-dropletquery-updateall",children:[]},{value:"func (dropletQuery) UpdateAllSlice",id:"func-dropletquery-updateallslice",children:[]},{value:"func (dropletQuery) Upsert",id:"func-dropletquery-upsert",children:[]}]},{value:"type dropletR",id:"type-dropletr",children:[{value:"func (*dropletR) NewStruct",id:"func-dropletr-newstruct",children:[]}]},{value:"type encryptionKeySentinelL",id:"type-encryptionkeysentinell",children:[]},{value:"type encryptionKeySentinelQuery",id:"type-encryptionkeysentinelquery",children:[{value:"func EncryptionKeySentinels",id:"func-encryptionkeysentinels",children:[]},{value:"func (encryptionKeySentinelQuery) All",id:"func-encryptionkeysentinelquery-all",children:[]},{value:"func (encryptionKeySentinelQuery) Count",id:"func-encryptionkeysentinelquery-count",children:[]},{value:"func (encryptionKeySentinelQuery) Delete",id:"func-encryptionkeysentinelquery-delete",children:[]},{value:"func (encryptionKeySentinelQuery) DeleteAll",id:"func-encryptionkeysentinelquery-deleteall",children:[]},{value:"func (encryptionKeySentinelQuery) DeleteAllSlice",id:"func-encryptionkeysentinelquery-deleteallslice",children:[]},{value:"func (encryptionKeySentinelQuery) Exists",id:"func-encryptionkeysentinelquery-exists",children:[]},{value:"func (encryptionKeySentinelQuery) Insert",id:"func-encryptionkeysentinelquery-insert",children:[]},{value:"func (encryptionKeySentinelQuery) One",id:"func-encryptionkeysentinelquery-one",children:[]},{value:"func (encryptionKeySentinelQuery) Reload",id:"func-encryptionkeysentinelquery-reload",children:[]},{value:"func (encryptionKeySentinelQuery) ReloadAll",id:"func-encryptionkeysentinelquery-reloadall",children:[]},{value:"func (encryptionKeySentinelQuery) Update",id:"func-encryptionkeysentinelquery-update",children:[]},{value:"func (encryptionKeySentinelQuery) UpdateAll",id:"func-encryptionkeysentinelquery-updateall",children:[]},{value:"func (encryptionKeySentinelQuery) UpdateAllSlice",id:"func-encryptionkeysentinelquery-updateallslice",children:[]},{value:"func (encryptionKeySentinelQuery) Upsert",id:"func-encryptionkeysentinelquery-upsert",children:[]}]},{value:"type encryptionKeySentinelR",id:"type-encryptionkeysentinelr",children:[{value:"func (*encryptionKeySentinelR) NewStruct",id:"func-encryptionkeysentinelr-newstruct",children:[]}]},{value:"type envGroupL",id:"type-envgroupl",children:[]},{value:"type envGroupQuery",id:"type-envgroupquery",children:[{value:"func EnvGroups",id:"func-envgroups",children:[]},{value:"func (envGroupQuery) All",id:"func-envgroupquery-all",children:[]},{value:"func (envGroupQuery) Count",id:"func-envgroupquery-count",children:[]},{value:"func (envGroupQuery) Delete",id:"func-envgroupquery-delete",children:[]},{value:"func (envGroupQuery) DeleteAll",id:"func-envgroupquery-deleteall",children:[]},{value:"func (envGroupQuery) DeleteAllSlice",id:"func-envgroupquery-deleteallslice",children:[]},{value:"func (envGroupQuery) Exists",id:"func-envgroupquery-exists",children:[]},{value:"func (envGroupQuery) Insert",id:"func-envgroupquery-insert",children:[]},{value:"func (envGroupQuery) One",id:"func-envgroupquery-one",children:[]},{value:"func (envGroupQuery) Reload",id:"func-envgroupquery-reload",children:[]},{value:"func (envGroupQuery) ReloadAll",id:"func-envgroupquery-reloadall",children:[]},{value:"func (envGroupQuery) Update",id:"func-envgroupquery-update",children:[]},{value:"func (envGroupQuery) UpdateAll",id:"func-envgroupquery-updateall",children:[]},{value:"func (envGroupQuery) UpdateAllSlice",id:"func-envgroupquery-updateallslice",children:[]},{value:"func (envGroupQuery) Upsert",id:"func-envgroupquery-upsert",children:[]}]},{value:"type envGroupR",id:"type-envgroupr",children:[{value:"func (*envGroupR) NewStruct",id:"func-envgroupr-newstruct",children:[]}]},{value:"type eventL",id:"type-eventl",children:[]},{value:"type eventQuery",id:"type-eventquery",children:[{value:"func Events",id:"func-events",children:[]},{value:"func (eventQuery) All",id:"func-eventquery-all",children:[]},{value:"func (eventQuery) Count",id:"func-eventquery-count",children:[]},{value:"func (eventQuery) Delete",id:"func-eventquery-delete",children:[]},{value:"func (eventQuery) DeleteAll",id:"func-eventquery-deleteall",children:[]},{value:"func (eventQuery) DeleteAllSlice",id:"func-eventquery-deleteallslice",children:[]},{value:"func (eventQuery) Exists",id:"func-eventquery-exists",children:[]},{value:"func (eventQuery) Insert",id:"func-eventquery-insert",children:[]},{value:"func (eventQuery) One",id:"func-eventquery-one",children:[]},{value:"func (eventQuery) Reload",id:"func-eventquery-reload",children:[]},{value:"func (eventQuery) ReloadAll",id:"func-eventquery-reloadall",children:[]},{value:"func (eventQuery) Update",id:"func-eventquery-update",children:[]},{value:"func (eventQuery) UpdateAll",id:"func-eventquery-updateall",children:[]},{value:"func (eventQuery) UpdateAllSlice",id:"func-eventquery-updateallslice",children:[]},{value:"func (eventQuery) Upsert",id:"func-eventquery-upsert",children:[]}]},{value:"type eventR",id:"type-eventr",children:[{value:"func (*eventR) NewStruct",id:"func-eventr-newstruct",children:[]}]},{value:"type featureFlagL",id:"type-featureflagl",children:[]},{value:"type featureFlagQuery",id:"type-featureflagquery",children:[{value:"func FeatureFlags",id:"func-featureflags",children:[]},{value:"func (featureFlagQuery) All",id:"func-featureflagquery-all",children:[]},{value:"func (featureFlagQuery) Count",id:"func-featureflagquery-count",children:[]},{value:"func (featureFlagQuery) Delete",id:"func-featureflagquery-delete",children:[]},{value:"func (featureFlagQuery) DeleteAll",id:"func-featureflagquery-deleteall",children:[]},{value:"func (featureFlagQuery) DeleteAllSlice",id:"func-featureflagquery-deleteallslice",children:[]},{value:"func (featureFlagQuery) Exists",id:"func-featureflagquery-exists",children:[]},{value:"func (featureFlagQuery) Insert",id:"func-featureflagquery-insert",children:[]},{value:"func (featureFlagQuery) One",id:"func-featureflagquery-one",children:[]},{value:"func (featureFlagQuery) Reload",id:"func-featureflagquery-reload",children:[]},{value:"func (featureFlagQuery) ReloadAll",id:"func-featureflagquery-reloadall",children:[]},{value:"func (featureFlagQuery) Update",id:"func-featureflagquery-update",children:[]},{value:"func (featureFlagQuery) UpdateAll",id:"func-featureflagquery-updateall",children:[]},{value:"func (featureFlagQuery) UpdateAllSlice",id:"func-featureflagquery-updateallslice",children:[]},{value:"func (featureFlagQuery) Upsert",id:"func-featureflagquery-upsert",children:[]}]},{value:"type featureFlagR",id:"type-featureflagr",children:[{value:"func (*featureFlagR) NewStruct",id:"func-featureflagr-newstruct",children:[]}]},{value:"type insertCache",id:"type-insertcache",children:[]},{value:"type isolationSegmentAnnotationL",id:"type-isolationsegmentannotationl",children:[{value:"func (isolationSegmentAnnotationL) LoadResource",id:"func-isolationsegmentannotationl-loadresource",children:[]}]},{value:"type isolationSegmentAnnotationQuery",id:"type-isolationsegmentannotationquery",children:[{value:"func IsolationSegmentAnnotations",id:"func-isolationsegmentannotations",children:[]},{value:"func (isolationSegmentAnnotationQuery) All",id:"func-isolationsegmentannotationquery-all",children:[]},{value:"func (isolationSegmentAnnotationQuery) Count",id:"func-isolationsegmentannotationquery-count",children:[]},{value:"func (isolationSegmentAnnotationQuery) Delete",id:"func-isolationsegmentannotationquery-delete",children:[]},{value:"func (isolationSegmentAnnotationQuery) DeleteAll",id:"func-isolationsegmentannotationquery-deleteall",children:[]},{value:"func (isolationSegmentAnnotationQuery) DeleteAllSlice",id:"func-isolationsegmentannotationquery-deleteallslice",children:[]},{value:"func (isolationSegmentAnnotationQuery) Exists",id:"func-isolationsegmentannotationquery-exists",children:[]},{value:"func (isolationSegmentAnnotationQuery) Insert",id:"func-isolationsegmentannotationquery-insert",children:[]},{value:"func (isolationSegmentAnnotationQuery) One",id:"func-isolationsegmentannotationquery-one",children:[]},{value:"func (isolationSegmentAnnotationQuery) Reload",id:"func-isolationsegmentannotationquery-reload",children:[]},{value:"func (isolationSegmentAnnotationQuery) ReloadAll",id:"func-isolationsegmentannotationquery-reloadall",children:[]},{value:"func (isolationSegmentAnnotationQuery) RemoveResource",id:"func-isolationsegmentannotationquery-removeresource",children:[]},{value:"func (isolationSegmentAnnotationQuery) Resource",id:"func-isolationsegmentannotationquery-resource",children:[]},{value:"func (isolationSegmentAnnotationQuery) SetResource",id:"func-isolationsegmentannotationquery-setresource",children:[]},{value:"func (isolationSegmentAnnotationQuery) Update",id:"func-isolationsegmentannotationquery-update",children:[]},{value:"func (isolationSegmentAnnotationQuery) UpdateAll",id:"func-isolationsegmentannotationquery-updateall",children:[]},{value:"func (isolationSegmentAnnotationQuery) UpdateAllSlice",id:"func-isolationsegmentannotationquery-updateallslice",children:[]},{value:"func (isolationSegmentAnnotationQuery) Upsert",id:"func-isolationsegmentannotationquery-upsert",children:[]}]},{value:"type isolationSegmentAnnotationR",id:"type-isolationsegmentannotationr",children:[{value:"func (*isolationSegmentAnnotationR) NewStruct",id:"func-isolationsegmentannotationr-newstruct",children:[]}]},{value:"type isolationSegmentL",id:"type-isolationsegmentl",children:[{value:"func (isolationSegmentL) LoadOrganizations",id:"func-isolationsegmentl-loadorganizations",children:[]},{value:"func (isolationSegmentL) LoadResourceIsolationSegmentAnnotations",id:"func-isolationsegmentl-loadresourceisolationsegmentannotations",children:[]},{value:"func (isolationSegmentL) LoadResourceIsolationSegmentLabels",id:"func-isolationsegmentl-loadresourceisolationsegmentlabels",children:[]},{value:"func (isolationSegmentL) LoadSpaces",id:"func-isolationsegmentl-loadspaces",children:[]}]},{value:"type isolationSegmentLabelL",id:"type-isolationsegmentlabell",children:[{value:"func (isolationSegmentLabelL) LoadResource",id:"func-isolationsegmentlabell-loadresource",children:[]}]},{value:"type isolationSegmentLabelQuery",id:"type-isolationsegmentlabelquery",children:[{value:"func IsolationSegmentLabels",id:"func-isolationsegmentlabels",children:[]},{value:"func (isolationSegmentLabelQuery) All",id:"func-isolationsegmentlabelquery-all",children:[]},{value:"func (isolationSegmentLabelQuery) Count",id:"func-isolationsegmentlabelquery-count",children:[]},{value:"func (isolationSegmentLabelQuery) Delete",id:"func-isolationsegmentlabelquery-delete",children:[]},{value:"func (isolationSegmentLabelQuery) DeleteAll",id:"func-isolationsegmentlabelquery-deleteall",children:[]},{value:"func (isolationSegmentLabelQuery) DeleteAllSlice",id:"func-isolationsegmentlabelquery-deleteallslice",children:[]},{value:"func (isolationSegmentLabelQuery) Exists",id:"func-isolationsegmentlabelquery-exists",children:[]},{value:"func (isolationSegmentLabelQuery) Insert",id:"func-isolationsegmentlabelquery-insert",children:[]},{value:"func (isolationSegmentLabelQuery) One",id:"func-isolationsegmentlabelquery-one",children:[]},{value:"func (isolationSegmentLabelQuery) Reload",id:"func-isolationsegmentlabelquery-reload",children:[]},{value:"func (isolationSegmentLabelQuery) ReloadAll",id:"func-isolationsegmentlabelquery-reloadall",children:[]},{value:"func (isolationSegmentLabelQuery) RemoveResource",id:"func-isolationsegmentlabelquery-removeresource",children:[]},{value:"func (isolationSegmentLabelQuery) Resource",id:"func-isolationsegmentlabelquery-resource",children:[]},{value:"func (isolationSegmentLabelQuery) SetResource",id:"func-isolationsegmentlabelquery-setresource",children:[]},{value:"func (isolationSegmentLabelQuery) Update",id:"func-isolationsegmentlabelquery-update",children:[]},{value:"func (isolationSegmentLabelQuery) UpdateAll",id:"func-isolationsegmentlabelquery-updateall",children:[]},{value:"func (isolationSegmentLabelQuery) UpdateAllSlice",id:"func-isolationsegmentlabelquery-updateallslice",children:[]},{value:"func (isolationSegmentLabelQuery) Upsert",id:"func-isolationsegmentlabelquery-upsert",children:[]}]},{value:"type isolationSegmentLabelR",id:"type-isolationsegmentlabelr",children:[{value:"func (*isolationSegmentLabelR) NewStruct",id:"func-isolationsegmentlabelr-newstruct",children:[]}]},{value:"type isolationSegmentQuery",id:"type-isolationsegmentquery",children:[{value:"func IsolationSegments",id:"func-isolationsegments",children:[]},{value:"func (isolationSegmentQuery) AddOrganizations",id:"func-isolationsegmentquery-addorganizations",children:[]},{value:"func (isolationSegmentQuery) AddResourceIsolationSegmentAnnotations",id:"func-isolationsegmentquery-addresourceisolationsegmentannotations",children:[]},{value:"func (isolationSegmentQuery) AddResourceIsolationSegmentLabels",id:"func-isolationsegmentquery-addresourceisolationsegmentlabels",children:[]},{value:"func (isolationSegmentQuery) AddSpaces",id:"func-isolationsegmentquery-addspaces",children:[]},{value:"func (isolationSegmentQuery) All",id:"func-isolationsegmentquery-all",children:[]},{value:"func (isolationSegmentQuery) Count",id:"func-isolationsegmentquery-count",children:[]},{value:"func (isolationSegmentQuery) Delete",id:"func-isolationsegmentquery-delete",children:[]},{value:"func (isolationSegmentQuery) DeleteAll",id:"func-isolationsegmentquery-deleteall",children:[]},{value:"func (isolationSegmentQuery) DeleteAllSlice",id:"func-isolationsegmentquery-deleteallslice",children:[]},{value:"func (isolationSegmentQuery) Exists",id:"func-isolationsegmentquery-exists",children:[]},{value:"func (isolationSegmentQuery) Insert",id:"func-isolationsegmentquery-insert",children:[]},{value:"func (isolationSegmentQuery) One",id:"func-isolationsegmentquery-one",children:[]},{value:"func (isolationSegmentQuery) Organizations",id:"func-isolationsegmentquery-organizations",children:[]},{value:"func (isolationSegmentQuery) Reload",id:"func-isolationsegmentquery-reload",children:[]},{value:"func (isolationSegmentQuery) ReloadAll",id:"func-isolationsegmentquery-reloadall",children:[]},{value:"func (isolationSegmentQuery) RemoveOrganizations",id:"func-isolationsegmentquery-removeorganizations",children:[]},{value:"func (isolationSegmentQuery) RemoveResourceIsolationSegmentAnnotations",id:"func-isolationsegmentquery-removeresourceisolationsegmentannotations",children:[]},{value:"func (isolationSegmentQuery) RemoveResourceIsolationSegmentLabels",id:"func-isolationsegmentquery-removeresourceisolationsegmentlabels",children:[]},{value:"func (isolationSegmentQuery) RemoveSpaces",id:"func-isolationsegmentquery-removespaces",children:[]},{value:"func (isolationSegmentQuery) ResourceIsolationSegmentAnnotations",id:"func-isolationsegmentquery-resourceisolationsegmentannotations",children:[]},{value:"func (isolationSegmentQuery) ResourceIsolationSegmentLabels",id:"func-isolationsegmentquery-resourceisolationsegmentlabels",children:[]},{value:"func (isolationSegmentQuery) SetOrganizations",id:"func-isolationsegmentquery-setorganizations",children:[]},{value:"func (isolationSegmentQuery) SetResourceIsolationSegmentAnnotations",id:"func-isolationsegmentquery-setresourceisolationsegmentannotations",children:[]},{value:"func (isolationSegmentQuery) SetResourceIsolationSegmentLabels",id:"func-isolationsegmentquery-setresourceisolationsegmentlabels",children:[]},{value:"func (isolationSegmentQuery) SetSpaces",id:"func-isolationsegmentquery-setspaces",children:[]},{value:"func (isolationSegmentQuery) Spaces",id:"func-isolationsegmentquery-spaces",children:[]},{value:"func (isolationSegmentQuery) Update",id:"func-isolationsegmentquery-update",children:[]},{value:"func (isolationSegmentQuery) UpdateAll",id:"func-isolationsegmentquery-updateall",children:[]},{value:"func (isolationSegmentQuery) UpdateAllSlice",id:"func-isolationsegmentquery-updateallslice",children:[]},{value:"func (isolationSegmentQuery) Upsert",id:"func-isolationsegmentquery-upsert",children:[]}]},{value:"type isolationSegmentR",id:"type-isolationsegmentr",children:[{value:"func (*isolationSegmentR) NewStruct",id:"func-isolationsegmentr-newstruct",children:[]}]},{value:"type jobL",id:"type-jobl",children:[{value:"func (jobL) LoadFKJobJobWarnings",id:"func-jobl-loadfkjobjobwarnings",children:[]}]},{value:"type jobQuery",id:"type-jobquery",children:[{value:"func Jobs",id:"func-jobs",children:[]},{value:"func (jobQuery) AddFKJobJobWarnings",id:"func-jobquery-addfkjobjobwarnings",children:[]},{value:"func (jobQuery) All",id:"func-jobquery-all",children:[]},{value:"func (jobQuery) Count",id:"func-jobquery-count",children:[]},{value:"func (jobQuery) Delete",id:"func-jobquery-delete",children:[]},{value:"func (jobQuery) DeleteAll",id:"func-jobquery-deleteall",children:[]},{value:"func (jobQuery) DeleteAllSlice",id:"func-jobquery-deleteallslice",children:[]},{value:"func (jobQuery) Exists",id:"func-jobquery-exists",children:[]},{value:"func (jobQuery) FKJobJobWarnings",id:"func-jobquery-fkjobjobwarnings",children:[]},{value:"func (jobQuery) Insert",id:"func-jobquery-insert",children:[]},{value:"func (jobQuery) One",id:"func-jobquery-one",children:[]},{value:"func (jobQuery) Reload",id:"func-jobquery-reload",children:[]},{value:"func (jobQuery) ReloadAll",id:"func-jobquery-reloadall",children:[]},{value:"func (jobQuery) RemoveFKJobJobWarnings",id:"func-jobquery-removefkjobjobwarnings",children:[]},{value:"func (jobQuery) SetFKJobJobWarnings",id:"func-jobquery-setfkjobjobwarnings",children:[]},{value:"func (jobQuery) Update",id:"func-jobquery-update",children:[]},{value:"func (jobQuery) UpdateAll",id:"func-jobquery-updateall",children:[]},{value:"func (jobQuery) UpdateAllSlice",id:"func-jobquery-updateallslice",children:[]},{value:"func (jobQuery) Upsert",id:"func-jobquery-upsert",children:[]}]},{value:"type jobR",id:"type-jobr",children:[{value:"func (*jobR) NewStruct",id:"func-jobr-newstruct",children:[]}]},{value:"type jobWarningL",id:"type-jobwarningl",children:[{value:"func (jobWarningL) LoadFKJob",id:"func-jobwarningl-loadfkjob",children:[]}]},{value:"type jobWarningQuery",id:"type-jobwarningquery",children:[{value:"func JobWarnings",id:"func-jobwarnings",children:[]},{value:"func (jobWarningQuery) All",id:"func-jobwarningquery-all",children:[]},{value:"func (jobWarningQuery) Count",id:"func-jobwarningquery-count",children:[]},{value:"func (jobWarningQuery) Delete",id:"func-jobwarningquery-delete",children:[]},{value:"func (jobWarningQuery) DeleteAll",id:"func-jobwarningquery-deleteall",children:[]},{value:"func (jobWarningQuery) DeleteAllSlice",id:"func-jobwarningquery-deleteallslice",children:[]},{value:"func (jobWarningQuery) Exists",id:"func-jobwarningquery-exists",children:[]},{value:"func (jobWarningQuery) FKJob",id:"func-jobwarningquery-fkjob",children:[]},{value:"func (jobWarningQuery) Insert",id:"func-jobwarningquery-insert",children:[]},{value:"func (jobWarningQuery) One",id:"func-jobwarningquery-one",children:[]},{value:"func (jobWarningQuery) Reload",id:"func-jobwarningquery-reload",children:[]},{value:"func (jobWarningQuery) ReloadAll",id:"func-jobwarningquery-reloadall",children:[]},{value:"func (jobWarningQuery) RemoveFKJob",id:"func-jobwarningquery-removefkjob",children:[]},{value:"func (jobWarningQuery) SetFKJob",id:"func-jobwarningquery-setfkjob",children:[]},{value:"func (jobWarningQuery) Update",id:"func-jobwarningquery-update",children:[]},{value:"func (jobWarningQuery) UpdateAll",id:"func-jobwarningquery-updateall",children:[]},{value:"func (jobWarningQuery) UpdateAllSlice",id:"func-jobwarningquery-updateallslice",children:[]},{value:"func (jobWarningQuery) Upsert",id:"func-jobwarningquery-upsert",children:[]}]},{value:"type jobWarningR",id:"type-jobwarningr",children:[{value:"func (*jobWarningR) NewStruct",id:"func-jobwarningr-newstruct",children:[]}]},{value:"type kpackLifecycleDatumL",id:"type-kpacklifecycledatuml",children:[{value:"func (kpackLifecycleDatumL) LoadApp",id:"func-kpacklifecycledatuml-loadapp",children:[]},{value:"func (kpackLifecycleDatumL) LoadBuild",id:"func-kpacklifecycledatuml-loadbuild",children:[]}]},{value:"type kpackLifecycleDatumQuery",id:"type-kpacklifecycledatumquery",children:[{value:"func KpackLifecycleData",id:"func-kpacklifecycledata",children:[]},{value:"func (kpackLifecycleDatumQuery) All",id:"func-kpacklifecycledatumquery-all",children:[]},{value:"func (kpackLifecycleDatumQuery) App",id:"func-kpacklifecycledatumquery-app",children:[]},{value:"func (kpackLifecycleDatumQuery) Build",id:"func-kpacklifecycledatumquery-build",children:[]},{value:"func (kpackLifecycleDatumQuery) Count",id:"func-kpacklifecycledatumquery-count",children:[]},{value:"func (kpackLifecycleDatumQuery) Delete",id:"func-kpacklifecycledatumquery-delete",children:[]},{value:"func (kpackLifecycleDatumQuery) DeleteAll",id:"func-kpacklifecycledatumquery-deleteall",children:[]},{value:"func (kpackLifecycleDatumQuery) DeleteAllSlice",id:"func-kpacklifecycledatumquery-deleteallslice",children:[]},{value:"func (kpackLifecycleDatumQuery) Exists",id:"func-kpacklifecycledatumquery-exists",children:[]},{value:"func (kpackLifecycleDatumQuery) Insert",id:"func-kpacklifecycledatumquery-insert",children:[]},{value:"func (kpackLifecycleDatumQuery) One",id:"func-kpacklifecycledatumquery-one",children:[]},{value:"func (kpackLifecycleDatumQuery) Reload",id:"func-kpacklifecycledatumquery-reload",children:[]},{value:"func (kpackLifecycleDatumQuery) ReloadAll",id:"func-kpacklifecycledatumquery-reloadall",children:[]},{value:"func (kpackLifecycleDatumQuery) RemoveApp",id:"func-kpacklifecycledatumquery-removeapp",children:[]},{value:"func (kpackLifecycleDatumQuery) RemoveBuild",id:"func-kpacklifecycledatumquery-removebuild",children:[]},{value:"func (kpackLifecycleDatumQuery) SetApp",id:"func-kpacklifecycledatumquery-setapp",children:[]},{value:"func (kpackLifecycleDatumQuery) SetBuild",id:"func-kpacklifecycledatumquery-setbuild",children:[]},{value:"func (kpackLifecycleDatumQuery) Update",id:"func-kpacklifecycledatumquery-update",children:[]},{value:"func (kpackLifecycleDatumQuery) UpdateAll",id:"func-kpacklifecycledatumquery-updateall",children:[]},{value:"func (kpackLifecycleDatumQuery) UpdateAllSlice",id:"func-kpacklifecycledatumquery-updateallslice",children:[]},{value:"func (kpackLifecycleDatumQuery) Upsert",id:"func-kpacklifecycledatumquery-upsert",children:[]}]},{value:"type kpackLifecycleDatumR",id:"type-kpacklifecycledatumr",children:[{value:"func (*kpackLifecycleDatumR) NewStruct",id:"func-kpacklifecycledatumr-newstruct",children:[]}]},{value:"type lockingL",id:"type-lockingl",children:[]},{value:"type lockingQuery",id:"type-lockingquery",children:[{value:"func Lockings",id:"func-lockings",children:[]},{value:"func (lockingQuery) All",id:"func-lockingquery-all",children:[]},{value:"func (lockingQuery) Count",id:"func-lockingquery-count",children:[]},{value:"func (lockingQuery) Delete",id:"func-lockingquery-delete",children:[]},{value:"func (lockingQuery) DeleteAll",id:"func-lockingquery-deleteall",children:[]},{value:"func (lockingQuery) DeleteAllSlice",id:"func-lockingquery-deleteallslice",children:[]},{value:"func (lockingQuery) Exists",id:"func-lockingquery-exists",children:[]},{value:"func (lockingQuery) Insert",id:"func-lockingquery-insert",children:[]},{value:"func (lockingQuery) One",id:"func-lockingquery-one",children:[]},{value:"func (lockingQuery) Reload",id:"func-lockingquery-reload",children:[]},{value:"func (lockingQuery) ReloadAll",id:"func-lockingquery-reloadall",children:[]},{value:"func (lockingQuery) Update",id:"func-lockingquery-update",children:[]},{value:"func (lockingQuery) UpdateAll",id:"func-lockingquery-updateall",children:[]},{value:"func (lockingQuery) UpdateAllSlice",id:"func-lockingquery-updateallslice",children:[]},{value:"func (lockingQuery) Upsert",id:"func-lockingquery-upsert",children:[]}]},{value:"type lockingR",id:"type-lockingr",children:[{value:"func (*lockingR) NewStruct",id:"func-lockingr-newstruct",children:[]}]},{value:"type organizationAnnotationL",id:"type-organizationannotationl",children:[{value:"func (organizationAnnotationL) LoadResource",id:"func-organizationannotationl-loadresource",children:[]}]},{value:"type organizationAnnotationQuery",id:"type-organizationannotationquery",children:[{value:"func OrganizationAnnotations",id:"func-organizationannotations",children:[]},{value:"func (organizationAnnotationQuery) All",id:"func-organizationannotationquery-all",children:[]},{value:"func (organizationAnnotationQuery) Count",id:"func-organizationannotationquery-count",children:[]},{value:"func (organizationAnnotationQuery) Delete",id:"func-organizationannotationquery-delete",children:[]},{value:"func (organizationAnnotationQuery) DeleteAll",id:"func-organizationannotationquery-deleteall",children:[]},{value:"func (organizationAnnotationQuery) DeleteAllSlice",id:"func-organizationannotationquery-deleteallslice",children:[]},{value:"func (organizationAnnotationQuery) Exists",id:"func-organizationannotationquery-exists",children:[]},{value:"func (organizationAnnotationQuery) Insert",id:"func-organizationannotationquery-insert",children:[]},{value:"func (organizationAnnotationQuery) One",id:"func-organizationannotationquery-one",children:[]},{value:"func (organizationAnnotationQuery) Reload",id:"func-organizationannotationquery-reload",children:[]},{value:"func (organizationAnnotationQuery) ReloadAll",id:"func-organizationannotationquery-reloadall",children:[]},{value:"func (organizationAnnotationQuery) RemoveResource",id:"func-organizationannotationquery-removeresource",children:[]},{value:"func (organizationAnnotationQuery) Resource",id:"func-organizationannotationquery-resource",children:[]},{value:"func (organizationAnnotationQuery) SetResource",id:"func-organizationannotationquery-setresource",children:[]},{value:"func (organizationAnnotationQuery) Update",id:"func-organizationannotationquery-update",children:[]},{value:"func (organizationAnnotationQuery) UpdateAll",id:"func-organizationannotationquery-updateall",children:[]},{value:"func (organizationAnnotationQuery) UpdateAllSlice",id:"func-organizationannotationquery-updateallslice",children:[]},{value:"func (organizationAnnotationQuery) Upsert",id:"func-organizationannotationquery-upsert",children:[]}]},{value:"type organizationAnnotationR",id:"type-organizationannotationr",children:[{value:"func (*organizationAnnotationR) NewStruct",id:"func-organizationannotationr-newstruct",children:[]}]},{value:"type organizationL",id:"type-organizationl",children:[{value:"func (organizationL) LoadIsolationSegments",id:"func-organizationl-loadisolationsegments",children:[]},{value:"func (organizationL) LoadOrganizationsAuditors",id:"func-organizationl-loadorganizationsauditors",children:[]},{value:"func (organizationL) LoadOrganizationsBillingManagers",id:"func-organizationl-loadorganizationsbillingmanagers",children:[]},{value:"func (organizationL) LoadOrganizationsManagers",id:"func-organizationl-loadorganizationsmanagers",children:[]},{value:"func (organizationL) LoadOrganizationsPrivateDomains",id:"func-organizationl-loadorganizationsprivatedomains",children:[]},{value:"func (organizationL) LoadOrganizationsUsers",id:"func-organizationl-loadorganizationsusers",children:[]},{value:"func (organizationL) LoadOwningOrganizationDomains",id:"func-organizationl-loadowningorganizationdomains",children:[]},{value:"func (organizationL) LoadQuotaDefinition",id:"func-organizationl-loadquotadefinition",children:[]},{value:"func (organizationL) LoadResourceOrganizationAnnotations",id:"func-organizationl-loadresourceorganizationannotations",children:[]},{value:"func (organizationL) LoadResourceOrganizationLabels",id:"func-organizationl-loadresourceorganizationlabels",children:[]},{value:"func (organizationL) LoadServicePlanVisibilities",id:"func-organizationl-loadserviceplanvisibilities",children:[]},{value:"func (organizationL) LoadSpaceQuotaDefinitions",id:"func-organizationl-loadspacequotadefinitions",children:[]},{value:"func (organizationL) LoadSpaces",id:"func-organizationl-loadspaces",children:[]}]},{value:"type organizationLabelL",id:"type-organizationlabell",children:[{value:"func (organizationLabelL) LoadResource",id:"func-organizationlabell-loadresource",children:[]}]},{value:"type organizationLabelQuery",id:"type-organizationlabelquery",children:[{value:"func OrganizationLabels",id:"func-organizationlabels",children:[]},{value:"func (organizationLabelQuery) All",id:"func-organizationlabelquery-all",children:[]},{value:"func (organizationLabelQuery) Count",id:"func-organizationlabelquery-count",children:[]},{value:"func (organizationLabelQuery) Delete",id:"func-organizationlabelquery-delete",children:[]},{value:"func (organizationLabelQuery) DeleteAll",id:"func-organizationlabelquery-deleteall",children:[]},{value:"func (organizationLabelQuery) DeleteAllSlice",id:"func-organizationlabelquery-deleteallslice",children:[]},{value:"func (organizationLabelQuery) Exists",id:"func-organizationlabelquery-exists",children:[]},{value:"func (organizationLabelQuery) Insert",id:"func-organizationlabelquery-insert",children:[]},{value:"func (organizationLabelQuery) One",id:"func-organizationlabelquery-one",children:[]},{value:"func (organizationLabelQuery) Reload",id:"func-organizationlabelquery-reload",children:[]},{value:"func (organizationLabelQuery) ReloadAll",id:"func-organizationlabelquery-reloadall",children:[]},{value:"func (organizationLabelQuery) RemoveResource",id:"func-organizationlabelquery-removeresource",children:[]},{value:"func (organizationLabelQuery) Resource",id:"func-organizationlabelquery-resource",children:[]},{value:"func (organizationLabelQuery) SetResource",id:"func-organizationlabelquery-setresource",children:[]},{value:"func (organizationLabelQuery) Update",id:"func-organizationlabelquery-update",children:[]},{value:"func (organizationLabelQuery) UpdateAll",id:"func-organizationlabelquery-updateall",children:[]},{value:"func (organizationLabelQuery) UpdateAllSlice",id:"func-organizationlabelquery-updateallslice",children:[]},{value:"func (organizationLabelQuery) Upsert",id:"func-organizationlabelquery-upsert",children:[]}]},{value:"type organizationLabelR",id:"type-organizationlabelr",children:[{value:"func (*organizationLabelR) NewStruct",id:"func-organizationlabelr-newstruct",children:[]}]},{value:"type organizationQuery",id:"type-organizationquery",children:[{value:"func Organizations",id:"func-organizations",children:[]},{value:"func (organizationQuery) AddIsolationSegments",id:"func-organizationquery-addisolationsegments",children:[]},{value:"func (organizationQuery) AddOrganizationsAuditors",id:"func-organizationquery-addorganizationsauditors",children:[]},{value:"func (organizationQuery) AddOrganizationsBillingManagers",id:"func-organizationquery-addorganizationsbillingmanagers",children:[]},{value:"func (organizationQuery) AddOrganizationsManagers",id:"func-organizationquery-addorganizationsmanagers",children:[]},{value:"func (organizationQuery) AddOrganizationsPrivateDomains",id:"func-organizationquery-addorganizationsprivatedomains",children:[]},{value:"func (organizationQuery) AddOrganizationsUsers",id:"func-organizationquery-addorganizationsusers",children:[]},{value:"func (organizationQuery) AddOwningOrganizationDomains",id:"func-organizationquery-addowningorganizationdomains",children:[]},{value:"func (organizationQuery) AddResourceOrganizationAnnotations",id:"func-organizationquery-addresourceorganizationannotations",children:[]},{value:"func (organizationQuery) AddResourceOrganizationLabels",id:"func-organizationquery-addresourceorganizationlabels",children:[]},{value:"func (organizationQuery) AddServicePlanVisibilities",id:"func-organizationquery-addserviceplanvisibilities",children:[]},{value:"func (organizationQuery) AddSpaceQuotaDefinitions",id:"func-organizationquery-addspacequotadefinitions",children:[]},{value:"func (organizationQuery) AddSpaces",id:"func-organizationquery-addspaces",children:[]},{value:"func (organizationQuery) All",id:"func-organizationquery-all",children:[]},{value:"func (organizationQuery) Count",id:"func-organizationquery-count",children:[]},{value:"func (organizationQuery) Delete",id:"func-organizationquery-delete",children:[]},{value:"func (organizationQuery) DeleteAll",id:"func-organizationquery-deleteall",children:[]},{value:"func (organizationQuery) DeleteAllSlice",id:"func-organizationquery-deleteallslice",children:[]},{value:"func (organizationQuery) Exists",id:"func-organizationquery-exists",children:[]},{value:"func (organizationQuery) Insert",id:"func-organizationquery-insert",children:[]},{value:"func (organizationQuery) IsolationSegments",id:"func-organizationquery-isolationsegments",children:[]},{value:"func (organizationQuery) One",id:"func-organizationquery-one",children:[]},{value:"func (organizationQuery) OrganizationsAuditors",id:"func-organizationquery-organizationsauditors",children:[]},{value:"func (organizationQuery) OrganizationsBillingManagers",id:"func-organizationquery-organizationsbillingmanagers",children:[]},{value:"func (organizationQuery) OrganizationsManagers",id:"func-organizationquery-organizationsmanagers",children:[]},{value:"func (organizationQuery) OrganizationsPrivateDomains",id:"func-organizationquery-organizationsprivatedomains",children:[]},{value:"func (organizationQuery) OrganizationsUsers",id:"func-organizationquery-organizationsusers",children:[]},{value:"func (organizationQuery) OwningOrganizationDomains",id:"func-organizationquery-owningorganizationdomains",children:[]},{value:"func (organizationQuery) QuotaDefinition",id:"func-organizationquery-quotadefinition",children:[]},{value:"func (organizationQuery) Reload",id:"func-organizationquery-reload",children:[]},{value:"func (organizationQuery) ReloadAll",id:"func-organizationquery-reloadall",children:[]},{value:"func (organizationQuery) RemoveIsolationSegments",id:"func-organizationquery-removeisolationsegments",children:[]},{value:"func (organizationQuery) RemoveOwningOrganizationDomains",id:"func-organizationquery-removeowningorganizationdomains",children:[]},{value:"func (organizationQuery) RemoveResourceOrganizationAnnotations",id:"func-organizationquery-removeresourceorganizationannotations",children:[]},{value:"func (organizationQuery) RemoveResourceOrganizationLabels",id:"func-organizationquery-removeresourceorganizationlabels",children:[]},{value:"func (organizationQuery) ResourceOrganizationAnnotations",id:"func-organizationquery-resourceorganizationannotations",children:[]},{value:"func (organizationQuery) ResourceOrganizationLabels",id:"func-organizationquery-resourceorganizationlabels",children:[]},{value:"func (organizationQuery) ServicePlanVisibilities",id:"func-organizationquery-serviceplanvisibilities",children:[]},{value:"func (organizationQuery) SetIsolationSegments",id:"func-organizationquery-setisolationsegments",children:[]},{value:"func (organizationQuery) SetOwningOrganizationDomains",id:"func-organizationquery-setowningorganizationdomains",children:[]},{value:"func (organizationQuery) SetQuotaDefinition",id:"func-organizationquery-setquotadefinition",children:[]},{value:"func (organizationQuery) SetResourceOrganizationAnnotations",id:"func-organizationquery-setresourceorganizationannotations",children:[]},{value:"func (organizationQuery) SetResourceOrganizationLabels",id:"func-organizationquery-setresourceorganizationlabels",children:[]},{value:"func (organizationQuery) SpaceQuotaDefinitions",id:"func-organizationquery-spacequotadefinitions",children:[]},{value:"func (organizationQuery) Spaces",id:"func-organizationquery-spaces",children:[]},{value:"func (organizationQuery) Update",id:"func-organizationquery-update",children:[]},{value:"func (organizationQuery) UpdateAll",id:"func-organizationquery-updateall",children:[]},{value:"func (organizationQuery) UpdateAllSlice",id:"func-organizationquery-updateallslice",children:[]},{value:"func (organizationQuery) Upsert",id:"func-organizationquery-upsert",children:[]}]},{value:"type organizationR",id:"type-organizationr",children:[{value:"func (*organizationR) NewStruct",id:"func-organizationr-newstruct",children:[]}]},{value:"type organizationsAuditorL",id:"type-organizationsauditorl",children:[{value:"func (organizationsAuditorL) LoadOrganization",id:"func-organizationsauditorl-loadorganization",children:[]},{value:"func (organizationsAuditorL) LoadUser",id:"func-organizationsauditorl-loaduser",children:[]}]},{value:"type organizationsAuditorQuery",id:"type-organizationsauditorquery",children:[{value:"func OrganizationsAuditors",id:"func-organizationsauditors",children:[]},{value:"func (organizationsAuditorQuery) All",id:"func-organizationsauditorquery-all",children:[]},{value:"func (organizationsAuditorQuery) Count",id:"func-organizationsauditorquery-count",children:[]},{value:"func (organizationsAuditorQuery) Delete",id:"func-organizationsauditorquery-delete",children:[]},{value:"func (organizationsAuditorQuery) DeleteAll",id:"func-organizationsauditorquery-deleteall",children:[]},{value:"func (organizationsAuditorQuery) DeleteAllSlice",id:"func-organizationsauditorquery-deleteallslice",children:[]},{value:"func (organizationsAuditorQuery) Exists",id:"func-organizationsauditorquery-exists",children:[]},{value:"func (organizationsAuditorQuery) Insert",id:"func-organizationsauditorquery-insert",children:[]},{value:"func (organizationsAuditorQuery) One",id:"func-organizationsauditorquery-one",children:[]},{value:"func (organizationsAuditorQuery) Organization",id:"func-organizationsauditorquery-organization",children:[]},{value:"func (organizationsAuditorQuery) Reload",id:"func-organizationsauditorquery-reload",children:[]},{value:"func (organizationsAuditorQuery) ReloadAll",id:"func-organizationsauditorquery-reloadall",children:[]},{value:"func (organizationsAuditorQuery) SetOrganization",id:"func-organizationsauditorquery-setorganization",children:[]},{value:"func (organizationsAuditorQuery) SetUser",id:"func-organizationsauditorquery-setuser",children:[]},{value:"func (organizationsAuditorQuery) Update",id:"func-organizationsauditorquery-update",children:[]},{value:"func (organizationsAuditorQuery) UpdateAll",id:"func-organizationsauditorquery-updateall",children:[]},{value:"func (organizationsAuditorQuery) UpdateAllSlice",id:"func-organizationsauditorquery-updateallslice",children:[]},{value:"func (organizationsAuditorQuery) Upsert",id:"func-organizationsauditorquery-upsert",children:[]},{value:"func (organizationsAuditorQuery) User",id:"func-organizationsauditorquery-user",children:[]}]},{value:"type organizationsAuditorR",id:"type-organizationsauditorr",children:[{value:"func (*organizationsAuditorR) NewStruct",id:"func-organizationsauditorr-newstruct",children:[]}]},{value:"type organizationsBillingManagerL",id:"type-organizationsbillingmanagerl",children:[{value:"func (organizationsBillingManagerL) LoadOrganization",id:"func-organizationsbillingmanagerl-loadorganization",children:[]},{value:"func (organizationsBillingManagerL) LoadUser",id:"func-organizationsbillingmanagerl-loaduser",children:[]}]},{value:"type organizationsBillingManagerQuery",id:"type-organizationsbillingmanagerquery",children:[{value:"func OrganizationsBillingManagers",id:"func-organizationsbillingmanagers",children:[]},{value:"func (organizationsBillingManagerQuery) All",id:"func-organizationsbillingmanagerquery-all",children:[]},{value:"func (organizationsBillingManagerQuery) Count",id:"func-organizationsbillingmanagerquery-count",children:[]},{value:"func (organizationsBillingManagerQuery) Delete",id:"func-organizationsbillingmanagerquery-delete",children:[]},{value:"func (organizationsBillingManagerQuery) DeleteAll",id:"func-organizationsbillingmanagerquery-deleteall",children:[]},{value:"func (organizationsBillingManagerQuery) DeleteAllSlice",id:"func-organizationsbillingmanagerquery-deleteallslice",children:[]},{value:"func (organizationsBillingManagerQuery) Exists",id:"func-organizationsbillingmanagerquery-exists",children:[]},{value:"func (organizationsBillingManagerQuery) Insert",id:"func-organizationsbillingmanagerquery-insert",children:[]},{value:"func (organizationsBillingManagerQuery) One",id:"func-organizationsbillingmanagerquery-one",children:[]},{value:"func (organizationsBillingManagerQuery) Organization",id:"func-organizationsbillingmanagerquery-organization",children:[]},{value:"func (organizationsBillingManagerQuery) Reload",id:"func-organizationsbillingmanagerquery-reload",children:[]},{value:"func (organizationsBillingManagerQuery) ReloadAll",id:"func-organizationsbillingmanagerquery-reloadall",children:[]},{value:"func (organizationsBillingManagerQuery) SetOrganization",id:"func-organizationsbillingmanagerquery-setorganization",children:[]},{value:"func (organizationsBillingManagerQuery) SetUser",id:"func-organizationsbillingmanagerquery-setuser",children:[]},{value:"func (organizationsBillingManagerQuery) Update",id:"func-organizationsbillingmanagerquery-update",children:[]},{value:"func (organizationsBillingManagerQuery) UpdateAll",id:"func-organizationsbillingmanagerquery-updateall",children:[]},{value:"func (organizationsBillingManagerQuery) UpdateAllSlice",id:"func-organizationsbillingmanagerquery-updateallslice",children:[]},{value:"func (organizationsBillingManagerQuery) Upsert",id:"func-organizationsbillingmanagerquery-upsert",children:[]},{value:"func (organizationsBillingManagerQuery) User",id:"func-organizationsbillingmanagerquery-user",children:[]}]},{value:"type organizationsBillingManagerR",id:"type-organizationsbillingmanagerr",children:[{value:"func (*organizationsBillingManagerR) NewStruct",id:"func-organizationsbillingmanagerr-newstruct",children:[]}]},{value:"type organizationsManagerL",id:"type-organizationsmanagerl",children:[{value:"func (organizationsManagerL) LoadOrganization",id:"func-organizationsmanagerl-loadorganization",children:[]},{value:"func (organizationsManagerL) LoadUser",id:"func-organizationsmanagerl-loaduser",children:[]}]},{value:"type organizationsManagerQuery",id:"type-organizationsmanagerquery",children:[{value:"func OrganizationsManagers",id:"func-organizationsmanagers",children:[]},{value:"func (organizationsManagerQuery) All",id:"func-organizationsmanagerquery-all",children:[]},{value:"func (organizationsManagerQuery) Count",id:"func-organizationsmanagerquery-count",children:[]},{value:"func (organizationsManagerQuery) Delete",id:"func-organizationsmanagerquery-delete",children:[]},{value:"func (organizationsManagerQuery) DeleteAll",id:"func-organizationsmanagerquery-deleteall",children:[]},{value:"func (organizationsManagerQuery) DeleteAllSlice",id:"func-organizationsmanagerquery-deleteallslice",children:[]},{value:"func (organizationsManagerQuery) Exists",id:"func-organizationsmanagerquery-exists",children:[]},{value:"func (organizationsManagerQuery) Insert",id:"func-organizationsmanagerquery-insert",children:[]},{value:"func (organizationsManagerQuery) One",id:"func-organizationsmanagerquery-one",children:[]},{value:"func (organizationsManagerQuery) Organization",id:"func-organizationsmanagerquery-organization",children:[]},{value:"func (organizationsManagerQuery) Reload",id:"func-organizationsmanagerquery-reload",children:[]},{value:"func (organizationsManagerQuery) ReloadAll",id:"func-organizationsmanagerquery-reloadall",children:[]},{value:"func (organizationsManagerQuery) SetOrganization",id:"func-organizationsmanagerquery-setorganization",children:[]},{value:"func (organizationsManagerQuery) SetUser",id:"func-organizationsmanagerquery-setuser",children:[]},{value:"func (organizationsManagerQuery) Update",id:"func-organizationsmanagerquery-update",children:[]},{value:"func (organizationsManagerQuery) UpdateAll",id:"func-organizationsmanagerquery-updateall",children:[]},{value:"func (organizationsManagerQuery) UpdateAllSlice",id:"func-organizationsmanagerquery-updateallslice",children:[]},{value:"func (organizationsManagerQuery) Upsert",id:"func-organizationsmanagerquery-upsert",children:[]},{value:"func (organizationsManagerQuery) User",id:"func-organizationsmanagerquery-user",children:[]}]},{value:"type organizationsManagerR",id:"type-organizationsmanagerr",children:[{value:"func (*organizationsManagerR) NewStruct",id:"func-organizationsmanagerr-newstruct",children:[]}]},{value:"type organizationsPrivateDomainL",id:"type-organizationsprivatedomainl",children:[{value:"func (organizationsPrivateDomainL) LoadOrganization",id:"func-organizationsprivatedomainl-loadorganization",children:[]},{value:"func (organizationsPrivateDomainL) LoadPrivateDomain",id:"func-organizationsprivatedomainl-loadprivatedomain",children:[]}]},{value:"type organizationsPrivateDomainQuery",id:"type-organizationsprivatedomainquery",children:[{value:"func OrganizationsPrivateDomains",id:"func-organizationsprivatedomains",children:[]},{value:"func (organizationsPrivateDomainQuery) All",id:"func-organizationsprivatedomainquery-all",children:[]},{value:"func (organizationsPrivateDomainQuery) Count",id:"func-organizationsprivatedomainquery-count",children:[]},{value:"func (organizationsPrivateDomainQuery) Delete",id:"func-organizationsprivatedomainquery-delete",children:[]},{value:"func (organizationsPrivateDomainQuery) DeleteAll",id:"func-organizationsprivatedomainquery-deleteall",children:[]},{value:"func (organizationsPrivateDomainQuery) DeleteAllSlice",id:"func-organizationsprivatedomainquery-deleteallslice",children:[]},{value:"func (organizationsPrivateDomainQuery) Exists",id:"func-organizationsprivatedomainquery-exists",children:[]},{value:"func (organizationsPrivateDomainQuery) Insert",id:"func-organizationsprivatedomainquery-insert",children:[]},{value:"func (organizationsPrivateDomainQuery) One",id:"func-organizationsprivatedomainquery-one",children:[]},{value:"func (organizationsPrivateDomainQuery) Organization",id:"func-organizationsprivatedomainquery-organization",children:[]},{value:"func (organizationsPrivateDomainQuery) PrivateDomain",id:"func-organizationsprivatedomainquery-privatedomain",children:[]},{value:"func (organizationsPrivateDomainQuery) Reload",id:"func-organizationsprivatedomainquery-reload",children:[]},{value:"func (organizationsPrivateDomainQuery) ReloadAll",id:"func-organizationsprivatedomainquery-reloadall",children:[]},{value:"func (organizationsPrivateDomainQuery) SetOrganization",id:"func-organizationsprivatedomainquery-setorganization",children:[]},{value:"func (organizationsPrivateDomainQuery) SetPrivateDomain",id:"func-organizationsprivatedomainquery-setprivatedomain",children:[]},{value:"func (organizationsPrivateDomainQuery) Update",id:"func-organizationsprivatedomainquery-update",children:[]},{value:"func (organizationsPrivateDomainQuery) UpdateAll",id:"func-organizationsprivatedomainquery-updateall",children:[]},{value:"func (organizationsPrivateDomainQuery) UpdateAllSlice",id:"func-organizationsprivatedomainquery-updateallslice",children:[]},{value:"func (organizationsPrivateDomainQuery) Upsert",id:"func-organizationsprivatedomainquery-upsert",children:[]}]},{value:"type organizationsPrivateDomainR",id:"type-organizationsprivatedomainr",children:[{value:"func (*organizationsPrivateDomainR) NewStruct",id:"func-organizationsprivatedomainr-newstruct",children:[]}]},{value:"type organizationsUserL",id:"type-organizationsuserl",children:[{value:"func (organizationsUserL) LoadOrganization",id:"func-organizationsuserl-loadorganization",children:[]},{value:"func (organizationsUserL) LoadUser",id:"func-organizationsuserl-loaduser",children:[]}]},{value:"type organizationsUserQuery",id:"type-organizationsuserquery",children:[{value:"func OrganizationsUsers",id:"func-organizationsusers",children:[]},{value:"func (organizationsUserQuery) All",id:"func-organizationsuserquery-all",children:[]},{value:"func (organizationsUserQuery) Count",id:"func-organizationsuserquery-count",children:[]},{value:"func (organizationsUserQuery) Delete",id:"func-organizationsuserquery-delete",children:[]},{value:"func (organizationsUserQuery) DeleteAll",id:"func-organizationsuserquery-deleteall",children:[]},{value:"func (organizationsUserQuery) DeleteAllSlice",id:"func-organizationsuserquery-deleteallslice",children:[]},{value:"func (organizationsUserQuery) Exists",id:"func-organizationsuserquery-exists",children:[]},{value:"func (organizationsUserQuery) Insert",id:"func-organizationsuserquery-insert",children:[]},{value:"func (organizationsUserQuery) One",id:"func-organizationsuserquery-one",children:[]},{value:"func (organizationsUserQuery) Organization",id:"func-organizationsuserquery-organization",children:[]},{value:"func (organizationsUserQuery) Reload",id:"func-organizationsuserquery-reload",children:[]},{value:"func (organizationsUserQuery) ReloadAll",id:"func-organizationsuserquery-reloadall",children:[]},{value:"func (organizationsUserQuery) SetOrganization",id:"func-organizationsuserquery-setorganization",children:[]},{value:"func (organizationsUserQuery) SetUser",id:"func-organizationsuserquery-setuser",children:[]},{value:"func (organizationsUserQuery) Update",id:"func-organizationsuserquery-update",children:[]},{value:"func (organizationsUserQuery) UpdateAll",id:"func-organizationsuserquery-updateall",children:[]},{value:"func (organizationsUserQuery) UpdateAllSlice",id:"func-organizationsuserquery-updateallslice",children:[]},{value:"func (organizationsUserQuery) Upsert",id:"func-organizationsuserquery-upsert",children:[]},{value:"func (organizationsUserQuery) User",id:"func-organizationsuserquery-user",children:[]}]},{value:"type organizationsUserR",id:"type-organizationsuserr",children:[{value:"func (*organizationsUserR) NewStruct",id:"func-organizationsuserr-newstruct",children:[]}]},{value:"type orphanedBlobL",id:"type-orphanedblobl",children:[]},{value:"type orphanedBlobQuery",id:"type-orphanedblobquery",children:[{value:"func OrphanedBlobs",id:"func-orphanedblobs",children:[]},{value:"func (orphanedBlobQuery) All",id:"func-orphanedblobquery-all",children:[]},{value:"func (orphanedBlobQuery) Count",id:"func-orphanedblobquery-count",children:[]},{value:"func (orphanedBlobQuery) Delete",id:"func-orphanedblobquery-delete",children:[]},{value:"func (orphanedBlobQuery) DeleteAll",id:"func-orphanedblobquery-deleteall",children:[]},{value:"func (orphanedBlobQuery) DeleteAllSlice",id:"func-orphanedblobquery-deleteallslice",children:[]},{value:"func (orphanedBlobQuery) Exists",id:"func-orphanedblobquery-exists",children:[]},{value:"func (orphanedBlobQuery) Insert",id:"func-orphanedblobquery-insert",children:[]},{value:"func (orphanedBlobQuery) One",id:"func-orphanedblobquery-one",children:[]},{value:"func (orphanedBlobQuery) Reload",id:"func-orphanedblobquery-reload",children:[]},{value:"func (orphanedBlobQuery) ReloadAll",id:"func-orphanedblobquery-reloadall",children:[]},{value:"func (orphanedBlobQuery) Update",id:"func-orphanedblobquery-update",children:[]},{value:"func (orphanedBlobQuery) UpdateAll",id:"func-orphanedblobquery-updateall",children:[]},{value:"func (orphanedBlobQuery) UpdateAllSlice",id:"func-orphanedblobquery-updateallslice",children:[]},{value:"func (orphanedBlobQuery) Upsert",id:"func-orphanedblobquery-upsert",children:[]}]},{value:"type orphanedBlobR",id:"type-orphanedblobr",children:[{value:"func (*orphanedBlobR) NewStruct",id:"func-orphanedblobr-newstruct",children:[]}]},{value:"type packageAnnotationL",id:"type-packageannotationl",children:[{value:"func (packageAnnotationL) LoadResource",id:"func-packageannotationl-loadresource",children:[]}]},{value:"type packageAnnotationQuery",id:"type-packageannotationquery",children:[{value:"func PackageAnnotations",id:"func-packageannotations",children:[]},{value:"func (packageAnnotationQuery) All",id:"func-packageannotationquery-all",children:[]},{value:"func (packageAnnotationQuery) Count",id:"func-packageannotationquery-count",children:[]},{value:"func (packageAnnotationQuery) Delete",id:"func-packageannotationquery-delete",children:[]},{value:"func (packageAnnotationQuery) DeleteAll",id:"func-packageannotationquery-deleteall",children:[]},{value:"func (packageAnnotationQuery) DeleteAllSlice",id:"func-packageannotationquery-deleteallslice",children:[]},{value:"func (packageAnnotationQuery) Exists",id:"func-packageannotationquery-exists",children:[]},{value:"func (packageAnnotationQuery) Insert",id:"func-packageannotationquery-insert",children:[]},{value:"func (packageAnnotationQuery) One",id:"func-packageannotationquery-one",children:[]},{value:"func (packageAnnotationQuery) Reload",id:"func-packageannotationquery-reload",children:[]},{value:"func (packageAnnotationQuery) ReloadAll",id:"func-packageannotationquery-reloadall",children:[]},{value:"func (packageAnnotationQuery) RemoveResource",id:"func-packageannotationquery-removeresource",children:[]},{value:"func (packageAnnotationQuery) Resource",id:"func-packageannotationquery-resource",children:[]},{value:"func (packageAnnotationQuery) SetResource",id:"func-packageannotationquery-setresource",children:[]},{value:"func (packageAnnotationQuery) Update",id:"func-packageannotationquery-update",children:[]},{value:"func (packageAnnotationQuery) UpdateAll",id:"func-packageannotationquery-updateall",children:[]},{value:"func (packageAnnotationQuery) UpdateAllSlice",id:"func-packageannotationquery-updateallslice",children:[]},{value:"func (packageAnnotationQuery) Upsert",id:"func-packageannotationquery-upsert",children:[]}]},{value:"type packageAnnotationR",id:"type-packageannotationr",children:[{value:"func (*packageAnnotationR) NewStruct",id:"func-packageannotationr-newstruct",children:[]}]},{value:"type packageL",id:"type-packagel",children:[{value:"func (packageL) LoadApp",id:"func-packagel-loadapp",children:[]},{value:"func (packageL) LoadResourcePackageAnnotations",id:"func-packagel-loadresourcepackageannotations",children:[]},{value:"func (packageL) LoadResourcePackageLabels",id:"func-packagel-loadresourcepackagelabels",children:[]}]},{value:"type packageLabelL",id:"type-packagelabell",children:[{value:"func (packageLabelL) LoadResource",id:"func-packagelabell-loadresource",children:[]}]},{value:"type packageLabelQuery",id:"type-packagelabelquery",children:[{value:"func PackageLabels",id:"func-packagelabels",children:[]},{value:"func (packageLabelQuery) All",id:"func-packagelabelquery-all",children:[]},{value:"func (packageLabelQuery) Count",id:"func-packagelabelquery-count",children:[]},{value:"func (packageLabelQuery) Delete",id:"func-packagelabelquery-delete",children:[]},{value:"func (packageLabelQuery) DeleteAll",id:"func-packagelabelquery-deleteall",children:[]},{value:"func (packageLabelQuery) DeleteAllSlice",id:"func-packagelabelquery-deleteallslice",children:[]},{value:"func (packageLabelQuery) Exists",id:"func-packagelabelquery-exists",children:[]},{value:"func (packageLabelQuery) Insert",id:"func-packagelabelquery-insert",children:[]},{value:"func (packageLabelQuery) One",id:"func-packagelabelquery-one",children:[]},{value:"func (packageLabelQuery) Reload",id:"func-packagelabelquery-reload",children:[]},{value:"func (packageLabelQuery) ReloadAll",id:"func-packagelabelquery-reloadall",children:[]},{value:"func (packageLabelQuery) RemoveResource",id:"func-packagelabelquery-removeresource",children:[]},{value:"func (packageLabelQuery) Resource",id:"func-packagelabelquery-resource",children:[]},{value:"func (packageLabelQuery) SetResource",id:"func-packagelabelquery-setresource",children:[]},{value:"func (packageLabelQuery) Update",id:"func-packagelabelquery-update",children:[]},{value:"func (packageLabelQuery) UpdateAll",id:"func-packagelabelquery-updateall",children:[]},{value:"func (packageLabelQuery) UpdateAllSlice",id:"func-packagelabelquery-updateallslice",children:[]},{value:"func (packageLabelQuery) Upsert",id:"func-packagelabelquery-upsert",children:[]}]},{value:"type packageLabelR",id:"type-packagelabelr",children:[{value:"func (*packageLabelR) NewStruct",id:"func-packagelabelr-newstruct",children:[]}]},{value:"type packageQuery",id:"type-packagequery",children:[{value:"func Packages",id:"func-packages",children:[]},{value:"func (packageQuery) AddResourcePackageAnnotations",id:"func-packagequery-addresourcepackageannotations",children:[]},{value:"func (packageQuery) AddResourcePackageLabels",id:"func-packagequery-addresourcepackagelabels",children:[]},{value:"func (packageQuery) All",id:"func-packagequery-all",children:[]},{value:"func (packageQuery) App",id:"func-packagequery-app",children:[]},{value:"func (packageQuery) Count",id:"func-packagequery-count",children:[]},{value:"func (packageQuery) Delete",id:"func-packagequery-delete",children:[]},{value:"func (packageQuery) DeleteAll",id:"func-packagequery-deleteall",children:[]},{value:"func (packageQuery) DeleteAllSlice",id:"func-packagequery-deleteallslice",children:[]},{value:"func (packageQuery) Exists",id:"func-packagequery-exists",children:[]},{value:"func (packageQuery) Insert",id:"func-packagequery-insert",children:[]},{value:"func (packageQuery) One",id:"func-packagequery-one",children:[]},{value:"func (packageQuery) Reload",id:"func-packagequery-reload",children:[]},{value:"func (packageQuery) ReloadAll",id:"func-packagequery-reloadall",children:[]},{value:"func (packageQuery) RemoveApp",id:"func-packagequery-removeapp",children:[]},{value:"func (packageQuery) RemoveResourcePackageAnnotations",id:"func-packagequery-removeresourcepackageannotations",children:[]},{value:"func (packageQuery) RemoveResourcePackageLabels",id:"func-packagequery-removeresourcepackagelabels",children:[]},{value:"func (packageQuery) ResourcePackageAnnotations",id:"func-packagequery-resourcepackageannotations",children:[]},{value:"func (packageQuery) ResourcePackageLabels",id:"func-packagequery-resourcepackagelabels",children:[]},{value:"func (packageQuery) SetApp",id:"func-packagequery-setapp",children:[]},{value:"func (packageQuery) SetResourcePackageAnnotations",id:"func-packagequery-setresourcepackageannotations",children:[]},{value:"func (packageQuery) SetResourcePackageLabels",id:"func-packagequery-setresourcepackagelabels",children:[]},{value:"func (packageQuery) Update",id:"func-packagequery-update",children:[]},{value:"func (packageQuery) UpdateAll",id:"func-packagequery-updateall",children:[]},{value:"func (packageQuery) UpdateAllSlice",id:"func-packagequery-updateallslice",children:[]},{value:"func (packageQuery) Upsert",id:"func-packagequery-upsert",children:[]}]},{value:"type packageR",id:"type-packager",children:[{value:"func (*packageR) NewStruct",id:"func-packager-newstruct",children:[]}]},{value:"type processAnnotationL",id:"type-processannotationl",children:[{value:"func (processAnnotationL) LoadResource",id:"func-processannotationl-loadresource",children:[]}]},{value:"type processAnnotationQuery",id:"type-processannotationquery",children:[{value:"func ProcessAnnotations",id:"func-processannotations",children:[]},{value:"func (processAnnotationQuery) All",id:"func-processannotationquery-all",children:[]},{value:"func (processAnnotationQuery) Count",id:"func-processannotationquery-count",children:[]},{value:"func (processAnnotationQuery) Delete",id:"func-processannotationquery-delete",children:[]},{value:"func (processAnnotationQuery) DeleteAll",id:"func-processannotationquery-deleteall",children:[]},{value:"func (processAnnotationQuery) DeleteAllSlice",id:"func-processannotationquery-deleteallslice",children:[]},{value:"func (processAnnotationQuery) Exists",id:"func-processannotationquery-exists",children:[]},{value:"func (processAnnotationQuery) Insert",id:"func-processannotationquery-insert",children:[]},{value:"func (processAnnotationQuery) One",id:"func-processannotationquery-one",children:[]},{value:"func (processAnnotationQuery) Reload",id:"func-processannotationquery-reload",children:[]},{value:"func (processAnnotationQuery) ReloadAll",id:"func-processannotationquery-reloadall",children:[]},{value:"func (processAnnotationQuery) RemoveResource",id:"func-processannotationquery-removeresource",children:[]},{value:"func (processAnnotationQuery) Resource",id:"func-processannotationquery-resource",children:[]},{value:"func (processAnnotationQuery) SetResource",id:"func-processannotationquery-setresource",children:[]},{value:"func (processAnnotationQuery) Update",id:"func-processannotationquery-update",children:[]},{value:"func (processAnnotationQuery) UpdateAll",id:"func-processannotationquery-updateall",children:[]},{value:"func (processAnnotationQuery) UpdateAllSlice",id:"func-processannotationquery-updateallslice",children:[]},{value:"func (processAnnotationQuery) Upsert",id:"func-processannotationquery-upsert",children:[]}]},{value:"type processAnnotationR",id:"type-processannotationr",children:[{value:"func (*processAnnotationR) NewStruct",id:"func-processannotationr-newstruct",children:[]}]},{value:"type processL",id:"type-processl",children:[{value:"func (processL) LoadApp",id:"func-processl-loadapp",children:[]},{value:"func (processL) LoadAppAppEvents",id:"func-processl-loadappappevents",children:[]},{value:"func (processL) LoadResourceProcessAnnotations",id:"func-processl-loadresourceprocessannotations",children:[]},{value:"func (processL) LoadResourceProcessLabels",id:"func-processl-loadresourceprocesslabels",children:[]}]},{value:"type processLabelL",id:"type-processlabell",children:[{value:"func (processLabelL) LoadResource",id:"func-processlabell-loadresource",children:[]}]},{value:"type processLabelQuery",id:"type-processlabelquery",children:[{value:"func ProcessLabels",id:"func-processlabels",children:[]},{value:"func (processLabelQuery) All",id:"func-processlabelquery-all",children:[]},{value:"func (processLabelQuery) Count",id:"func-processlabelquery-count",children:[]},{value:"func (processLabelQuery) Delete",id:"func-processlabelquery-delete",children:[]},{value:"func (processLabelQuery) DeleteAll",id:"func-processlabelquery-deleteall",children:[]},{value:"func (processLabelQuery) DeleteAllSlice",id:"func-processlabelquery-deleteallslice",children:[]},{value:"func (processLabelQuery) Exists",id:"func-processlabelquery-exists",children:[]},{value:"func (processLabelQuery) Insert",id:"func-processlabelquery-insert",children:[]},{value:"func (processLabelQuery) One",id:"func-processlabelquery-one",children:[]},{value:"func (processLabelQuery) Reload",id:"func-processlabelquery-reload",children:[]},{value:"func (processLabelQuery) ReloadAll",id:"func-processlabelquery-reloadall",children:[]},{value:"func (processLabelQuery) RemoveResource",id:"func-processlabelquery-removeresource",children:[]},{value:"func (processLabelQuery) Resource",id:"func-processlabelquery-resource",children:[]},{value:"func (processLabelQuery) SetResource",id:"func-processlabelquery-setresource",children:[]},{value:"func (processLabelQuery) Update",id:"func-processlabelquery-update",children:[]},{value:"func (processLabelQuery) UpdateAll",id:"func-processlabelquery-updateall",children:[]},{value:"func (processLabelQuery) UpdateAllSlice",id:"func-processlabelquery-updateallslice",children:[]},{value:"func (processLabelQuery) Upsert",id:"func-processlabelquery-upsert",children:[]}]},{value:"type processLabelR",id:"type-processlabelr",children:[{value:"func (*processLabelR) NewStruct",id:"func-processlabelr-newstruct",children:[]}]},{value:"type processQuery",id:"type-processquery",children:[{value:"func Processes",id:"func-processes",children:[]},{value:"func (processQuery) AddAppAppEvents",id:"func-processquery-addappappevents",children:[]},{value:"func (processQuery) AddResourceProcessAnnotations",id:"func-processquery-addresourceprocessannotations",children:[]},{value:"func (processQuery) AddResourceProcessLabels",id:"func-processquery-addresourceprocesslabels",children:[]},{value:"func (processQuery) All",id:"func-processquery-all",children:[]},{value:"func (processQuery) App",id:"func-processquery-app",children:[]},{value:"func (processQuery) AppAppEvents",id:"func-processquery-appappevents",children:[]},{value:"func (processQuery) Count",id:"func-processquery-count",children:[]},{value:"func (processQuery) Delete",id:"func-processquery-delete",children:[]},{value:"func (processQuery) DeleteAll",id:"func-processquery-deleteall",children:[]},{value:"func (processQuery) DeleteAllSlice",id:"func-processquery-deleteallslice",children:[]},{value:"func (processQuery) Exists",id:"func-processquery-exists",children:[]},{value:"func (processQuery) Insert",id:"func-processquery-insert",children:[]},{value:"func (processQuery) One",id:"func-processquery-one",children:[]},{value:"func (processQuery) Reload",id:"func-processquery-reload",children:[]},{value:"func (processQuery) ReloadAll",id:"func-processquery-reloadall",children:[]},{value:"func (processQuery) RemoveApp",id:"func-processquery-removeapp",children:[]},{value:"func (processQuery) RemoveResourceProcessAnnotations",id:"func-processquery-removeresourceprocessannotations",children:[]},{value:"func (processQuery) RemoveResourceProcessLabels",id:"func-processquery-removeresourceprocesslabels",children:[]},{value:"func (processQuery) ResourceProcessAnnotations",id:"func-processquery-resourceprocessannotations",children:[]},{value:"func (processQuery) ResourceProcessLabels",id:"func-processquery-resourceprocesslabels",children:[]},{value:"func (processQuery) SetApp",id:"func-processquery-setapp",children:[]},{value:"func (processQuery) SetResourceProcessAnnotations",id:"func-processquery-setresourceprocessannotations",children:[]},{value:"func (processQuery) SetResourceProcessLabels",id:"func-processquery-setresourceprocesslabels",children:[]},{value:"func (processQuery) Update",id:"func-processquery-update",children:[]},{value:"func (processQuery) UpdateAll",id:"func-processquery-updateall",children:[]},{value:"func (processQuery) UpdateAllSlice",id:"func-processquery-updateallslice",children:[]},{value:"func (processQuery) Upsert",id:"func-processquery-upsert",children:[]}]},{value:"type processR",id:"type-processr",children:[{value:"func (*processR) NewStruct",id:"func-processr-newstruct",children:[]}]},{value:"type quotaDefinitionL",id:"type-quotadefinitionl",children:[{value:"func (quotaDefinitionL) LoadOrganizations",id:"func-quotadefinitionl-loadorganizations",children:[]}]},{value:"type quotaDefinitionQuery",id:"type-quotadefinitionquery",children:[{value:"func QuotaDefinitions",id:"func-quotadefinitions",children:[]},{value:"func (quotaDefinitionQuery) AddOrganizations",id:"func-quotadefinitionquery-addorganizations",children:[]},{value:"func (quotaDefinitionQuery) All",id:"func-quotadefinitionquery-all",children:[]},{value:"func (quotaDefinitionQuery) Count",id:"func-quotadefinitionquery-count",children:[]},{value:"func (quotaDefinitionQuery) Delete",id:"func-quotadefinitionquery-delete",children:[]},{value:"func (quotaDefinitionQuery) DeleteAll",id:"func-quotadefinitionquery-deleteall",children:[]},{value:"func (quotaDefinitionQuery) DeleteAllSlice",id:"func-quotadefinitionquery-deleteallslice",children:[]},{value:"func (quotaDefinitionQuery) Exists",id:"func-quotadefinitionquery-exists",children:[]},{value:"func (quotaDefinitionQuery) Insert",id:"func-quotadefinitionquery-insert",children:[]},{value:"func (quotaDefinitionQuery) One",id:"func-quotadefinitionquery-one",children:[]},{value:"func (quotaDefinitionQuery) Organizations",id:"func-quotadefinitionquery-organizations",children:[]},{value:"func (quotaDefinitionQuery) Reload",id:"func-quotadefinitionquery-reload",children:[]},{value:"func (quotaDefinitionQuery) ReloadAll",id:"func-quotadefinitionquery-reloadall",children:[]},{value:"func (quotaDefinitionQuery) Update",id:"func-quotadefinitionquery-update",children:[]},{value:"func (quotaDefinitionQuery) UpdateAll",id:"func-quotadefinitionquery-updateall",children:[]},{value:"func (quotaDefinitionQuery) UpdateAllSlice",id:"func-quotadefinitionquery-updateallslice",children:[]},{value:"func (quotaDefinitionQuery) Upsert",id:"func-quotadefinitionquery-upsert",children:[]}]},{value:"type quotaDefinitionR",id:"type-quotadefinitionr",children:[{value:"func (*quotaDefinitionR) NewStruct",id:"func-quotadefinitionr-newstruct",children:[]}]},{value:"type requestCountL",id:"type-requestcountl",children:[]},{value:"type requestCountQuery",id:"type-requestcountquery",children:[{value:"func RequestCounts",id:"func-requestcounts",children:[]},{value:"func (requestCountQuery) All",id:"func-requestcountquery-all",children:[]},{value:"func (requestCountQuery) Count",id:"func-requestcountquery-count",children:[]},{value:"func (requestCountQuery) Delete",id:"func-requestcountquery-delete",children:[]},{value:"func (requestCountQuery) DeleteAll",id:"func-requestcountquery-deleteall",children:[]},{value:"func (requestCountQuery) DeleteAllSlice",id:"func-requestcountquery-deleteallslice",children:[]},{value:"func (requestCountQuery) Exists",id:"func-requestcountquery-exists",children:[]},{value:"func (requestCountQuery) Insert",id:"func-requestcountquery-insert",children:[]},{value:"func (requestCountQuery) One",id:"func-requestcountquery-one",children:[]},{value:"func (requestCountQuery) Reload",id:"func-requestcountquery-reload",children:[]},{value:"func (requestCountQuery) ReloadAll",id:"func-requestcountquery-reloadall",children:[]},{value:"func (requestCountQuery) Update",id:"func-requestcountquery-update",children:[]},{value:"func (requestCountQuery) UpdateAll",id:"func-requestcountquery-updateall",children:[]},{value:"func (requestCountQuery) UpdateAllSlice",id:"func-requestcountquery-updateallslice",children:[]},{value:"func (requestCountQuery) Upsert",id:"func-requestcountquery-upsert",children:[]}]},{value:"type requestCountR",id:"type-requestcountr",children:[{value:"func (*requestCountR) NewStruct",id:"func-requestcountr-newstruct",children:[]}]},{value:"type revisionAnnotationL",id:"type-revisionannotationl",children:[{value:"func (revisionAnnotationL) LoadResource",id:"func-revisionannotationl-loadresource",children:[]}]},{value:"type revisionAnnotationQuery",id:"type-revisionannotationquery",children:[{value:"func RevisionAnnotations",id:"func-revisionannotations",children:[]},{value:"func (revisionAnnotationQuery) All",id:"func-revisionannotationquery-all",children:[]},{value:"func (revisionAnnotationQuery) Count",id:"func-revisionannotationquery-count",children:[]},{value:"func (revisionAnnotationQuery) Delete",id:"func-revisionannotationquery-delete",children:[]},{value:"func (revisionAnnotationQuery) DeleteAll",id:"func-revisionannotationquery-deleteall",children:[]},{value:"func (revisionAnnotationQuery) DeleteAllSlice",id:"func-revisionannotationquery-deleteallslice",children:[]},{value:"func (revisionAnnotationQuery) Exists",id:"func-revisionannotationquery-exists",children:[]},{value:"func (revisionAnnotationQuery) Insert",id:"func-revisionannotationquery-insert",children:[]},{value:"func (revisionAnnotationQuery) One",id:"func-revisionannotationquery-one",children:[]},{value:"func (revisionAnnotationQuery) Reload",id:"func-revisionannotationquery-reload",children:[]},{value:"func (revisionAnnotationQuery) ReloadAll",id:"func-revisionannotationquery-reloadall",children:[]},{value:"func (revisionAnnotationQuery) RemoveResource",id:"func-revisionannotationquery-removeresource",children:[]},{value:"func (revisionAnnotationQuery) Resource",id:"func-revisionannotationquery-resource",children:[]},{value:"func (revisionAnnotationQuery) SetResource",id:"func-revisionannotationquery-setresource",children:[]},{value:"func (revisionAnnotationQuery) Update",id:"func-revisionannotationquery-update",children:[]},{value:"func (revisionAnnotationQuery) UpdateAll",id:"func-revisionannotationquery-updateall",children:[]},{value:"func (revisionAnnotationQuery) UpdateAllSlice",id:"func-revisionannotationquery-updateallslice",children:[]},{value:"func (revisionAnnotationQuery) Upsert",id:"func-revisionannotationquery-upsert",children:[]}]},{value:"type revisionAnnotationR",id:"type-revisionannotationr",children:[{value:"func (*revisionAnnotationR) NewStruct",id:"func-revisionannotationr-newstruct",children:[]}]},{value:"type revisionL",id:"type-revisionl",children:[{value:"func (revisionL) LoadApp",id:"func-revisionl-loadapp",children:[]},{value:"func (revisionL) LoadResourceRevisionAnnotations",id:"func-revisionl-loadresourcerevisionannotations",children:[]},{value:"func (revisionL) LoadResourceRevisionLabels",id:"func-revisionl-loadresourcerevisionlabels",children:[]},{value:"func (revisionL) LoadRevisionProcessCommands",id:"func-revisionl-loadrevisionprocesscommands",children:[]},{value:"func (revisionL) LoadRevisionSidecars",id:"func-revisionl-loadrevisionsidecars",children:[]}]},{value:"type revisionLabelL",id:"type-revisionlabell",children:[{value:"func (revisionLabelL) LoadResource",id:"func-revisionlabell-loadresource",children:[]}]},{value:"type revisionLabelQuery",id:"type-revisionlabelquery",children:[{value:"func RevisionLabels",id:"func-revisionlabels",children:[]},{value:"func (revisionLabelQuery) All",id:"func-revisionlabelquery-all",children:[]},{value:"func (revisionLabelQuery) Count",id:"func-revisionlabelquery-count",children:[]},{value:"func (revisionLabelQuery) Delete",id:"func-revisionlabelquery-delete",children:[]},{value:"func (revisionLabelQuery) DeleteAll",id:"func-revisionlabelquery-deleteall",children:[]},{value:"func (revisionLabelQuery) DeleteAllSlice",id:"func-revisionlabelquery-deleteallslice",children:[]},{value:"func (revisionLabelQuery) Exists",id:"func-revisionlabelquery-exists",children:[]},{value:"func (revisionLabelQuery) Insert",id:"func-revisionlabelquery-insert",children:[]},{value:"func (revisionLabelQuery) One",id:"func-revisionlabelquery-one",children:[]},{value:"func (revisionLabelQuery) Reload",id:"func-revisionlabelquery-reload",children:[]},{value:"func (revisionLabelQuery) ReloadAll",id:"func-revisionlabelquery-reloadall",children:[]},{value:"func (revisionLabelQuery) RemoveResource",id:"func-revisionlabelquery-removeresource",children:[]},{value:"func (revisionLabelQuery) Resource",id:"func-revisionlabelquery-resource",children:[]},{value:"func (revisionLabelQuery) SetResource",id:"func-revisionlabelquery-setresource",children:[]},{value:"func (revisionLabelQuery) Update",id:"func-revisionlabelquery-update",children:[]},{value:"func (revisionLabelQuery) UpdateAll",id:"func-revisionlabelquery-updateall",children:[]},{value:"func (revisionLabelQuery) UpdateAllSlice",id:"func-revisionlabelquery-updateallslice",children:[]},{value:"func (revisionLabelQuery) Upsert",id:"func-revisionlabelquery-upsert",children:[]}]},{value:"type revisionLabelR",id:"type-revisionlabelr",children:[{value:"func (*revisionLabelR) NewStruct",id:"func-revisionlabelr-newstruct",children:[]}]},{value:"type revisionProcessCommandL",id:"type-revisionprocesscommandl",children:[{value:"func (revisionProcessCommandL) LoadRevision",id:"func-revisionprocesscommandl-loadrevision",children:[]}]},{value:"type revisionProcessCommandQuery",id:"type-revisionprocesscommandquery",children:[{value:"func RevisionProcessCommands",id:"func-revisionprocesscommands",children:[]},{value:"func (revisionProcessCommandQuery) All",id:"func-revisionprocesscommandquery-all",children:[]},{value:"func (revisionProcessCommandQuery) Count",id:"func-revisionprocesscommandquery-count",children:[]},{value:"func (revisionProcessCommandQuery) Delete",id:"func-revisionprocesscommandquery-delete",children:[]},{value:"func (revisionProcessCommandQuery) DeleteAll",id:"func-revisionprocesscommandquery-deleteall",children:[]},{value:"func (revisionProcessCommandQuery) DeleteAllSlice",id:"func-revisionprocesscommandquery-deleteallslice",children:[]},{value:"func (revisionProcessCommandQuery) Exists",id:"func-revisionprocesscommandquery-exists",children:[]},{value:"func (revisionProcessCommandQuery) Insert",id:"func-revisionprocesscommandquery-insert",children:[]},{value:"func (revisionProcessCommandQuery) One",id:"func-revisionprocesscommandquery-one",children:[]},{value:"func (revisionProcessCommandQuery) Reload",id:"func-revisionprocesscommandquery-reload",children:[]},{value:"func (revisionProcessCommandQuery) ReloadAll",id:"func-revisionprocesscommandquery-reloadall",children:[]},{value:"func (revisionProcessCommandQuery) Revision",id:"func-revisionprocesscommandquery-revision",children:[]},{value:"func (revisionProcessCommandQuery) SetRevision",id:"func-revisionprocesscommandquery-setrevision",children:[]},{value:"func (revisionProcessCommandQuery) Update",id:"func-revisionprocesscommandquery-update",children:[]},{value:"func (revisionProcessCommandQuery) UpdateAll",id:"func-revisionprocesscommandquery-updateall",children:[]},{value:"func (revisionProcessCommandQuery) UpdateAllSlice",id:"func-revisionprocesscommandquery-updateallslice",children:[]},{value:"func (revisionProcessCommandQuery) Upsert",id:"func-revisionprocesscommandquery-upsert",children:[]}]},{value:"type revisionProcessCommandR",id:"type-revisionprocesscommandr",children:[{value:"func (*revisionProcessCommandR) NewStruct",id:"func-revisionprocesscommandr-newstruct",children:[]}]},{value:"type revisionQuery",id:"type-revisionquery",children:[{value:"func Revisions",id:"func-revisions",children:[]},{value:"func (revisionQuery) AddResourceRevisionAnnotations",id:"func-revisionquery-addresourcerevisionannotations",children:[]},{value:"func (revisionQuery) AddResourceRevisionLabels",id:"func-revisionquery-addresourcerevisionlabels",children:[]},{value:"func (revisionQuery) AddRevisionProcessCommands",id:"func-revisionquery-addrevisionprocesscommands",children:[]},{value:"func (revisionQuery) AddRevisionSidecars",id:"func-revisionquery-addrevisionsidecars",children:[]},{value:"func (revisionQuery) All",id:"func-revisionquery-all",children:[]},{value:"func (revisionQuery) App",id:"func-revisionquery-app",children:[]},{value:"func (revisionQuery) Count",id:"func-revisionquery-count",children:[]},{value:"func (revisionQuery) Delete",id:"func-revisionquery-delete",children:[]},{value:"func (revisionQuery) DeleteAll",id:"func-revisionquery-deleteall",children:[]},{value:"func (revisionQuery) DeleteAllSlice",id:"func-revisionquery-deleteallslice",children:[]},{value:"func (revisionQuery) Exists",id:"func-revisionquery-exists",children:[]},{value:"func (revisionQuery) Insert",id:"func-revisionquery-insert",children:[]},{value:"func (revisionQuery) One",id:"func-revisionquery-one",children:[]},{value:"func (revisionQuery) Reload",id:"func-revisionquery-reload",children:[]},{value:"func (revisionQuery) ReloadAll",id:"func-revisionquery-reloadall",children:[]},{value:"func (revisionQuery) RemoveApp",id:"func-revisionquery-removeapp",children:[]},{value:"func (revisionQuery) RemoveResourceRevisionAnnotations",id:"func-revisionquery-removeresourcerevisionannotations",children:[]},{value:"func (revisionQuery) RemoveResourceRevisionLabels",id:"func-revisionquery-removeresourcerevisionlabels",children:[]},{value:"func (revisionQuery) ResourceRevisionAnnotations",id:"func-revisionquery-resourcerevisionannotations",children:[]},{value:"func (revisionQuery) ResourceRevisionLabels",id:"func-revisionquery-resourcerevisionlabels",children:[]},{value:"func (revisionQuery) RevisionProcessCommands",id:"func-revisionquery-revisionprocesscommands",children:[]},{value:"func (revisionQuery) RevisionSidecars",id:"func-revisionquery-revisionsidecars",children:[]},{value:"func (revisionQuery) SetApp",id:"func-revisionquery-setapp",children:[]},{value:"func (revisionQuery) SetResourceRevisionAnnotations",id:"func-revisionquery-setresourcerevisionannotations",children:[]},{value:"func (revisionQuery) SetResourceRevisionLabels",id:"func-revisionquery-setresourcerevisionlabels",children:[]},{value:"func (revisionQuery) Update",id:"func-revisionquery-update",children:[]},{value:"func (revisionQuery) UpdateAll",id:"func-revisionquery-updateall",children:[]},{value:"func (revisionQuery) UpdateAllSlice",id:"func-revisionquery-updateallslice",children:[]},{value:"func (revisionQuery) Upsert",id:"func-revisionquery-upsert",children:[]}]},{value:"type revisionR",id:"type-revisionr",children:[{value:"func (*revisionR) NewStruct",id:"func-revisionr-newstruct",children:[]}]},{value:"type revisionSidecarL",id:"type-revisionsidecarl",children:[{value:"func (revisionSidecarL) LoadRevision",id:"func-revisionsidecarl-loadrevision",children:[]},{value:"func (revisionSidecarL) LoadRevisionSidecarProcessTypes",id:"func-revisionsidecarl-loadrevisionsidecarprocesstypes",children:[]}]},{value:"type revisionSidecarProcessTypeL",id:"type-revisionsidecarprocesstypel",children:[{value:"func (revisionSidecarProcessTypeL) LoadRevisionSidecar",id:"func-revisionsidecarprocesstypel-loadrevisionsidecar",children:[]}]},{value:"type revisionSidecarProcessTypeQuery",id:"type-revisionsidecarprocesstypequery",children:[{value:"func RevisionSidecarProcessTypes",id:"func-revisionsidecarprocesstypes",children:[]},{value:"func (revisionSidecarProcessTypeQuery) All",id:"func-revisionsidecarprocesstypequery-all",children:[]},{value:"func (revisionSidecarProcessTypeQuery) Count",id:"func-revisionsidecarprocesstypequery-count",children:[]},{value:"func (revisionSidecarProcessTypeQuery) Delete",id:"func-revisionsidecarprocesstypequery-delete",children:[]},{value:"func (revisionSidecarProcessTypeQuery) DeleteAll",id:"func-revisionsidecarprocesstypequery-deleteall",children:[]},{value:"func (revisionSidecarProcessTypeQuery) DeleteAllSlice",id:"func-revisionsidecarprocesstypequery-deleteallslice",children:[]},{value:"func (revisionSidecarProcessTypeQuery) Exists",id:"func-revisionsidecarprocesstypequery-exists",children:[]},{value:"func (revisionSidecarProcessTypeQuery) Insert",id:"func-revisionsidecarprocesstypequery-insert",children:[]},{value:"func (revisionSidecarProcessTypeQuery) One",id:"func-revisionsidecarprocesstypequery-one",children:[]},{value:"func (revisionSidecarProcessTypeQuery) Reload",id:"func-revisionsidecarprocesstypequery-reload",children:[]},{value:"func (revisionSidecarProcessTypeQuery) ReloadAll",id:"func-revisionsidecarprocesstypequery-reloadall",children:[]},{value:"func (revisionSidecarProcessTypeQuery) RevisionSidecar",id:"func-revisionsidecarprocesstypequery-revisionsidecar",children:[]},{value:"func (revisionSidecarProcessTypeQuery) SetRevisionSidecar",id:"func-revisionsidecarprocesstypequery-setrevisionsidecar",children:[]},{value:"func (revisionSidecarProcessTypeQuery) Update",id:"func-revisionsidecarprocesstypequery-update",children:[]},{value:"func (revisionSidecarProcessTypeQuery) UpdateAll",id:"func-revisionsidecarprocesstypequery-updateall",children:[]},{value:"func (revisionSidecarProcessTypeQuery) UpdateAllSlice",id:"func-revisionsidecarprocesstypequery-updateallslice",children:[]},{value:"func (revisionSidecarProcessTypeQuery) Upsert",id:"func-revisionsidecarprocesstypequery-upsert",children:[]}]},{value:"type revisionSidecarProcessTypeR",id:"type-revisionsidecarprocesstyper",children:[{value:"func (*revisionSidecarProcessTypeR) NewStruct",id:"func-revisionsidecarprocesstyper-newstruct",children:[]}]},{value:"type revisionSidecarQuery",id:"type-revisionsidecarquery",children:[{value:"func RevisionSidecars",id:"func-revisionsidecars",children:[]},{value:"func (revisionSidecarQuery) AddRevisionSidecarProcessTypes",id:"func-revisionsidecarquery-addrevisionsidecarprocesstypes",children:[]},{value:"func (revisionSidecarQuery) All",id:"func-revisionsidecarquery-all",children:[]},{value:"func (revisionSidecarQuery) Count",id:"func-revisionsidecarquery-count",children:[]},{value:"func (revisionSidecarQuery) Delete",id:"func-revisionsidecarquery-delete",children:[]},{value:"func (revisionSidecarQuery) DeleteAll",id:"func-revisionsidecarquery-deleteall",children:[]},{value:"func (revisionSidecarQuery) DeleteAllSlice",id:"func-revisionsidecarquery-deleteallslice",children:[]},{value:"func (revisionSidecarQuery) Exists",id:"func-revisionsidecarquery-exists",children:[]},{value:"func (revisionSidecarQuery) Insert",id:"func-revisionsidecarquery-insert",children:[]},{value:"func (revisionSidecarQuery) One",id:"func-revisionsidecarquery-one",children:[]},{value:"func (revisionSidecarQuery) Reload",id:"func-revisionsidecarquery-reload",children:[]},{value:"func (revisionSidecarQuery) ReloadAll",id:"func-revisionsidecarquery-reloadall",children:[]},{value:"func (revisionSidecarQuery) Revision",id:"func-revisionsidecarquery-revision",children:[]},{value:"func (revisionSidecarQuery) RevisionSidecarProcessTypes",id:"func-revisionsidecarquery-revisionsidecarprocesstypes",children:[]},{value:"func (revisionSidecarQuery) SetRevision",id:"func-revisionsidecarquery-setrevision",children:[]},{value:"func (revisionSidecarQuery) Update",id:"func-revisionsidecarquery-update",children:[]},{value:"func (revisionSidecarQuery) UpdateAll",id:"func-revisionsidecarquery-updateall",children:[]},{value:"func (revisionSidecarQuery) UpdateAllSlice",id:"func-revisionsidecarquery-updateallslice",children:[]},{value:"func (revisionSidecarQuery) Upsert",id:"func-revisionsidecarquery-upsert",children:[]}]},{value:"type revisionSidecarR",id:"type-revisionsidecarr",children:[{value:"func (*revisionSidecarR) NewStruct",id:"func-revisionsidecarr-newstruct",children:[]}]},{value:"type routeAnnotationL",id:"type-routeannotationl",children:[{value:"func (routeAnnotationL) LoadResource",id:"func-routeannotationl-loadresource",children:[]}]},{value:"type routeAnnotationQuery",id:"type-routeannotationquery",children:[{value:"func RouteAnnotations",id:"func-routeannotations",children:[]},{value:"func (routeAnnotationQuery) All",id:"func-routeannotationquery-all",children:[]},{value:"func (routeAnnotationQuery) Count",id:"func-routeannotationquery-count",children:[]},{value:"func (routeAnnotationQuery) Delete",id:"func-routeannotationquery-delete",children:[]},{value:"func (routeAnnotationQuery) DeleteAll",id:"func-routeannotationquery-deleteall",children:[]},{value:"func (routeAnnotationQuery) DeleteAllSlice",id:"func-routeannotationquery-deleteallslice",children:[]},{value:"func (routeAnnotationQuery) Exists",id:"func-routeannotationquery-exists",children:[]},{value:"func (routeAnnotationQuery) Insert",id:"func-routeannotationquery-insert",children:[]},{value:"func (routeAnnotationQuery) One",id:"func-routeannotationquery-one",children:[]},{value:"func (routeAnnotationQuery) Reload",id:"func-routeannotationquery-reload",children:[]},{value:"func (routeAnnotationQuery) ReloadAll",id:"func-routeannotationquery-reloadall",children:[]},{value:"func (routeAnnotationQuery) RemoveResource",id:"func-routeannotationquery-removeresource",children:[]},{value:"func (routeAnnotationQuery) Resource",id:"func-routeannotationquery-resource",children:[]},{value:"func (routeAnnotationQuery) SetResource",id:"func-routeannotationquery-setresource",children:[]},{value:"func (routeAnnotationQuery) Update",id:"func-routeannotationquery-update",children:[]},{value:"func (routeAnnotationQuery) UpdateAll",id:"func-routeannotationquery-updateall",children:[]},{value:"func (routeAnnotationQuery) UpdateAllSlice",id:"func-routeannotationquery-updateallslice",children:[]},{value:"func (routeAnnotationQuery) Upsert",id:"func-routeannotationquery-upsert",children:[]}]},{value:"type routeAnnotationR",id:"type-routeannotationr",children:[{value:"func (*routeAnnotationR) NewStruct",id:"func-routeannotationr-newstruct",children:[]}]},{value:"type routeBindingAnnotationL",id:"type-routebindingannotationl",children:[{value:"func (routeBindingAnnotationL) LoadResource",id:"func-routebindingannotationl-loadresource",children:[]}]},{value:"type routeBindingAnnotationQuery",id:"type-routebindingannotationquery",children:[{value:"func RouteBindingAnnotations",id:"func-routebindingannotations",children:[]},{value:"func (routeBindingAnnotationQuery) All",id:"func-routebindingannotationquery-all",children:[]},{value:"func (routeBindingAnnotationQuery) Count",id:"func-routebindingannotationquery-count",children:[]},{value:"func (routeBindingAnnotationQuery) Delete",id:"func-routebindingannotationquery-delete",children:[]},{value:"func (routeBindingAnnotationQuery) DeleteAll",id:"func-routebindingannotationquery-deleteall",children:[]},{value:"func (routeBindingAnnotationQuery) DeleteAllSlice",id:"func-routebindingannotationquery-deleteallslice",children:[]},{value:"func (routeBindingAnnotationQuery) Exists",id:"func-routebindingannotationquery-exists",children:[]},{value:"func (routeBindingAnnotationQuery) Insert",id:"func-routebindingannotationquery-insert",children:[]},{value:"func (routeBindingAnnotationQuery) One",id:"func-routebindingannotationquery-one",children:[]},{value:"func (routeBindingAnnotationQuery) Reload",id:"func-routebindingannotationquery-reload",children:[]},{value:"func (routeBindingAnnotationQuery) ReloadAll",id:"func-routebindingannotationquery-reloadall",children:[]},{value:"func (routeBindingAnnotationQuery) RemoveResource",id:"func-routebindingannotationquery-removeresource",children:[]},{value:"func (routeBindingAnnotationQuery) Resource",id:"func-routebindingannotationquery-resource",children:[]},{value:"func (routeBindingAnnotationQuery) SetResource",id:"func-routebindingannotationquery-setresource",children:[]},{value:"func (routeBindingAnnotationQuery) Update",id:"func-routebindingannotationquery-update",children:[]},{value:"func (routeBindingAnnotationQuery) UpdateAll",id:"func-routebindingannotationquery-updateall",children:[]},{value:"func (routeBindingAnnotationQuery) UpdateAllSlice",id:"func-routebindingannotationquery-updateallslice",children:[]},{value:"func (routeBindingAnnotationQuery) Upsert",id:"func-routebindingannotationquery-upsert",children:[]}]},{value:"type routeBindingAnnotationR",id:"type-routebindingannotationr",children:[{value:"func (*routeBindingAnnotationR) NewStruct",id:"func-routebindingannotationr-newstruct",children:[]}]},{value:"type routeBindingL",id:"type-routebindingl",children:[{value:"func (routeBindingL) LoadResourceRouteBindingAnnotations",id:"func-routebindingl-loadresourceroutebindingannotations",children:[]},{value:"func (routeBindingL) LoadResourceRouteBindingLabels",id:"func-routebindingl-loadresourceroutebindinglabels",children:[]},{value:"func (routeBindingL) LoadRoute",id:"func-routebindingl-loadroute",children:[]},{value:"func (routeBindingL) LoadRouteBindingOperation",id:"func-routebindingl-loadroutebindingoperation",children:[]},{value:"func (routeBindingL) LoadServiceInstance",id:"func-routebindingl-loadserviceinstance",children:[]}]},{value:"type routeBindingLabelL",id:"type-routebindinglabell",children:[{value:"func (routeBindingLabelL) LoadResource",id:"func-routebindinglabell-loadresource",children:[]}]},{value:"type routeBindingLabelQuery",id:"type-routebindinglabelquery",children:[{value:"func RouteBindingLabels",id:"func-routebindinglabels",children:[]},{value:"func (routeBindingLabelQuery) All",id:"func-routebindinglabelquery-all",children:[]},{value:"func (routeBindingLabelQuery) Count",id:"func-routebindinglabelquery-count",children:[]},{value:"func (routeBindingLabelQuery) Delete",id:"func-routebindinglabelquery-delete",children:[]},{value:"func (routeBindingLabelQuery) DeleteAll",id:"func-routebindinglabelquery-deleteall",children:[]},{value:"func (routeBindingLabelQuery) DeleteAllSlice",id:"func-routebindinglabelquery-deleteallslice",children:[]},{value:"func (routeBindingLabelQuery) Exists",id:"func-routebindinglabelquery-exists",children:[]},{value:"func (routeBindingLabelQuery) Insert",id:"func-routebindinglabelquery-insert",children:[]},{value:"func (routeBindingLabelQuery) One",id:"func-routebindinglabelquery-one",children:[]},{value:"func (routeBindingLabelQuery) Reload",id:"func-routebindinglabelquery-reload",children:[]},{value:"func (routeBindingLabelQuery) ReloadAll",id:"func-routebindinglabelquery-reloadall",children:[]},{value:"func (routeBindingLabelQuery) RemoveResource",id:"func-routebindinglabelquery-removeresource",children:[]},{value:"func (routeBindingLabelQuery) Resource",id:"func-routebindinglabelquery-resource",children:[]},{value:"func (routeBindingLabelQuery) SetResource",id:"func-routebindinglabelquery-setresource",children:[]},{value:"func (routeBindingLabelQuery) Update",id:"func-routebindinglabelquery-update",children:[]},{value:"func (routeBindingLabelQuery) UpdateAll",id:"func-routebindinglabelquery-updateall",children:[]},{value:"func (routeBindingLabelQuery) UpdateAllSlice",id:"func-routebindinglabelquery-updateallslice",children:[]},{value:"func (routeBindingLabelQuery) Upsert",id:"func-routebindinglabelquery-upsert",children:[]}]},{value:"type routeBindingLabelR",id:"type-routebindinglabelr",children:[{value:"func (*routeBindingLabelR) NewStruct",id:"func-routebindinglabelr-newstruct",children:[]}]},{value:"type routeBindingOperationL",id:"type-routebindingoperationl",children:[{value:"func (routeBindingOperationL) LoadRouteBinding",id:"func-routebindingoperationl-loadroutebinding",children:[]}]},{value:"type routeBindingOperationQuery",id:"type-routebindingoperationquery",children:[{value:"func RouteBindingOperations",id:"func-routebindingoperations",children:[]},{value:"func (routeBindingOperationQuery) All",id:"func-routebindingoperationquery-all",children:[]},{value:"func (routeBindingOperationQuery) Count",id:"func-routebindingoperationquery-count",children:[]},{value:"func (routeBindingOperationQuery) Delete",id:"func-routebindingoperationquery-delete",children:[]},{value:"func (routeBindingOperationQuery) DeleteAll",id:"func-routebindingoperationquery-deleteall",children:[]},{value:"func (routeBindingOperationQuery) DeleteAllSlice",id:"func-routebindingoperationquery-deleteallslice",children:[]},{value:"func (routeBindingOperationQuery) Exists",id:"func-routebindingoperationquery-exists",children:[]},{value:"func (routeBindingOperationQuery) Insert",id:"func-routebindingoperationquery-insert",children:[]},{value:"func (routeBindingOperationQuery) One",id:"func-routebindingoperationquery-one",children:[]},{value:"func (routeBindingOperationQuery) Reload",id:"func-routebindingoperationquery-reload",children:[]},{value:"func (routeBindingOperationQuery) ReloadAll",id:"func-routebindingoperationquery-reloadall",children:[]},{value:"func (routeBindingOperationQuery) RemoveRouteBinding",id:"func-routebindingoperationquery-removeroutebinding",children:[]},{value:"func (routeBindingOperationQuery) RouteBinding",id:"func-routebindingoperationquery-routebinding",children:[]},{value:"func (routeBindingOperationQuery) SetRouteBinding",id:"func-routebindingoperationquery-setroutebinding",children:[]},{value:"func (routeBindingOperationQuery) Update",id:"func-routebindingoperationquery-update",children:[]},{value:"func (routeBindingOperationQuery) UpdateAll",id:"func-routebindingoperationquery-updateall",children:[]},{value:"func (routeBindingOperationQuery) UpdateAllSlice",id:"func-routebindingoperationquery-updateallslice",children:[]},{value:"func (routeBindingOperationQuery) Upsert",id:"func-routebindingoperationquery-upsert",children:[]}]},{value:"type routeBindingOperationR",id:"type-routebindingoperationr",children:[{value:"func (*routeBindingOperationR) NewStruct",id:"func-routebindingoperationr-newstruct",children:[]}]},{value:"type routeBindingQuery",id:"type-routebindingquery",children:[{value:"func RouteBindings",id:"func-routebindings",children:[]},{value:"func (routeBindingQuery) AddResourceRouteBindingAnnotations",id:"func-routebindingquery-addresourceroutebindingannotations",children:[]},{value:"func (routeBindingQuery) AddResourceRouteBindingLabels",id:"func-routebindingquery-addresourceroutebindinglabels",children:[]},{value:"func (routeBindingQuery) All",id:"func-routebindingquery-all",children:[]},{value:"func (routeBindingQuery) Count",id:"func-routebindingquery-count",children:[]},{value:"func (routeBindingQuery) Delete",id:"func-routebindingquery-delete",children:[]},{value:"func (routeBindingQuery) DeleteAll",id:"func-routebindingquery-deleteall",children:[]},{value:"func (routeBindingQuery) DeleteAllSlice",id:"func-routebindingquery-deleteallslice",children:[]},{value:"func (routeBindingQuery) Exists",id:"func-routebindingquery-exists",children:[]},{value:"func (routeBindingQuery) Insert",id:"func-routebindingquery-insert",children:[]},{value:"func (routeBindingQuery) One",id:"func-routebindingquery-one",children:[]},{value:"func (routeBindingQuery) Reload",id:"func-routebindingquery-reload",children:[]},{value:"func (routeBindingQuery) ReloadAll",id:"func-routebindingquery-reloadall",children:[]},{value:"func (routeBindingQuery) RemoveResourceRouteBindingAnnotations",id:"func-routebindingquery-removeresourceroutebindingannotations",children:[]},{value:"func (routeBindingQuery) RemoveResourceRouteBindingLabels",id:"func-routebindingquery-removeresourceroutebindinglabels",children:[]},{value:"func (routeBindingQuery) RemoveRoute",id:"func-routebindingquery-removeroute",children:[]},{value:"func (routeBindingQuery) RemoveRouteBindingOperation",id:"func-routebindingquery-removeroutebindingoperation",children:[]},{value:"func (routeBindingQuery) RemoveServiceInstance",id:"func-routebindingquery-removeserviceinstance",children:[]},{value:"func (routeBindingQuery) ResourceRouteBindingAnnotations",id:"func-routebindingquery-resourceroutebindingannotations",children:[]},{value:"func (routeBindingQuery) ResourceRouteBindingLabels",id:"func-routebindingquery-resourceroutebindinglabels",children:[]},{value:"func (routeBindingQuery) Route",id:"func-routebindingquery-route",children:[]},{value:"func (routeBindingQuery) RouteBindingOperation",id:"func-routebindingquery-routebindingoperation",children:[]},{value:"func (routeBindingQuery) ServiceInstance",id:"func-routebindingquery-serviceinstance",children:[]},{value:"func (routeBindingQuery) SetResourceRouteBindingAnnotations",id:"func-routebindingquery-setresourceroutebindingannotations",children:[]},{value:"func (routeBindingQuery) SetResourceRouteBindingLabels",id:"func-routebindingquery-setresourceroutebindinglabels",children:[]},{value:"func (routeBindingQuery) SetRoute",id:"func-routebindingquery-setroute",children:[]},{value:"func (routeBindingQuery) SetRouteBindingOperation",id:"func-routebindingquery-setroutebindingoperation",children:[]},{value:"func (routeBindingQuery) SetServiceInstance",id:"func-routebindingquery-setserviceinstance",children:[]},{value:"func (routeBindingQuery) Update",id:"func-routebindingquery-update",children:[]},{value:"func (routeBindingQuery) UpdateAll",id:"func-routebindingquery-updateall",children:[]},{value:"func (routeBindingQuery) UpdateAllSlice",id:"func-routebindingquery-updateallslice",children:[]},{value:"func (routeBindingQuery) Upsert",id:"func-routebindingquery-upsert",children:[]}]},{value:"type routeBindingR",id:"type-routebindingr",children:[{value:"func (*routeBindingR) NewStruct",id:"func-routebindingr-newstruct",children:[]}]},{value:"type routeL",id:"type-routel",children:[{value:"func (routeL) LoadDomain",id:"func-routel-loaddomain",children:[]},{value:"func (routeL) LoadResourceRouteAnnotations",id:"func-routel-loadresourcerouteannotations",children:[]},{value:"func (routeL) LoadResourceRouteLabels",id:"func-routel-loadresourceroutelabels",children:[]},{value:"func (routeL) LoadRouteBindings",id:"func-routel-loadroutebindings",children:[]},{value:"func (routeL) LoadRouteMappings",id:"func-routel-loadroutemappings",children:[]},{value:"func (routeL) LoadSpace",id:"func-routel-loadspace",children:[]}]},{value:"type routeLabelL",id:"type-routelabell",children:[{value:"func (routeLabelL) LoadResource",id:"func-routelabell-loadresource",children:[]}]},{value:"type routeLabelQuery",id:"type-routelabelquery",children:[{value:"func RouteLabels",id:"func-routelabels",children:[]},{value:"func (routeLabelQuery) All",id:"func-routelabelquery-all",children:[]},{value:"func (routeLabelQuery) Count",id:"func-routelabelquery-count",children:[]},{value:"func (routeLabelQuery) Delete",id:"func-routelabelquery-delete",children:[]},{value:"func (routeLabelQuery) DeleteAll",id:"func-routelabelquery-deleteall",children:[]},{value:"func (routeLabelQuery) DeleteAllSlice",id:"func-routelabelquery-deleteallslice",children:[]},{value:"func (routeLabelQuery) Exists",id:"func-routelabelquery-exists",children:[]},{value:"func (routeLabelQuery) Insert",id:"func-routelabelquery-insert",children:[]},{value:"func (routeLabelQuery) One",id:"func-routelabelquery-one",children:[]},{value:"func (routeLabelQuery) Reload",id:"func-routelabelquery-reload",children:[]},{value:"func (routeLabelQuery) ReloadAll",id:"func-routelabelquery-reloadall",children:[]},{value:"func (routeLabelQuery) RemoveResource",id:"func-routelabelquery-removeresource",children:[]},{value:"func (routeLabelQuery) Resource",id:"func-routelabelquery-resource",children:[]},{value:"func (routeLabelQuery) SetResource",id:"func-routelabelquery-setresource",children:[]},{value:"func (routeLabelQuery) Update",id:"func-routelabelquery-update",children:[]},{value:"func (routeLabelQuery) UpdateAll",id:"func-routelabelquery-updateall",children:[]},{value:"func (routeLabelQuery) UpdateAllSlice",id:"func-routelabelquery-updateallslice",children:[]},{value:"func (routeLabelQuery) Upsert",id:"func-routelabelquery-upsert",children:[]}]},{value:"type routeLabelR",id:"type-routelabelr",children:[{value:"func (*routeLabelR) NewStruct",id:"func-routelabelr-newstruct",children:[]}]},{value:"type routeMappingL",id:"type-routemappingl",children:[{value:"func (routeMappingL) LoadApp",id:"func-routemappingl-loadapp",children:[]},{value:"func (routeMappingL) LoadRoute",id:"func-routemappingl-loadroute",children:[]}]},{value:"type routeMappingQuery",id:"type-routemappingquery",children:[{value:"func RouteMappings",id:"func-routemappings",children:[]},{value:"func (routeMappingQuery) All",id:"func-routemappingquery-all",children:[]},{value:"func (routeMappingQuery) App",id:"func-routemappingquery-app",children:[]},{value:"func (routeMappingQuery) Count",id:"func-routemappingquery-count",children:[]},{value:"func (routeMappingQuery) Delete",id:"func-routemappingquery-delete",children:[]},{value:"func (routeMappingQuery) DeleteAll",id:"func-routemappingquery-deleteall",children:[]},{value:"func (routeMappingQuery) DeleteAllSlice",id:"func-routemappingquery-deleteallslice",children:[]},{value:"func (routeMappingQuery) Exists",id:"func-routemappingquery-exists",children:[]},{value:"func (routeMappingQuery) Insert",id:"func-routemappingquery-insert",children:[]},{value:"func (routeMappingQuery) One",id:"func-routemappingquery-one",children:[]},{value:"func (routeMappingQuery) Reload",id:"func-routemappingquery-reload",children:[]},{value:"func (routeMappingQuery) ReloadAll",id:"func-routemappingquery-reloadall",children:[]},{value:"func (routeMappingQuery) Route",id:"func-routemappingquery-route",children:[]},{value:"func (routeMappingQuery) SetApp",id:"func-routemappingquery-setapp",children:[]},{value:"func (routeMappingQuery) SetRoute",id:"func-routemappingquery-setroute",children:[]},{value:"func (routeMappingQuery) Update",id:"func-routemappingquery-update",children:[]},{value:"func (routeMappingQuery) UpdateAll",id:"func-routemappingquery-updateall",children:[]},{value:"func (routeMappingQuery) UpdateAllSlice",id:"func-routemappingquery-updateallslice",children:[]},{value:"func (routeMappingQuery) Upsert",id:"func-routemappingquery-upsert",children:[]}]},{value:"type routeMappingR",id:"type-routemappingr",children:[{value:"func (*routeMappingR) NewStruct",id:"func-routemappingr-newstruct",children:[]}]},{value:"type routeQuery",id:"type-routequery",children:[{value:"func Routes",id:"func-routes",children:[]},{value:"func (routeQuery) AddResourceRouteAnnotations",id:"func-routequery-addresourcerouteannotations",children:[]},{value:"func (routeQuery) AddResourceRouteLabels",id:"func-routequery-addresourceroutelabels",children:[]},{value:"func (routeQuery) AddRouteBindings",id:"func-routequery-addroutebindings",children:[]},{value:"func (routeQuery) AddRouteMappings",id:"func-routequery-addroutemappings",children:[]},{value:"func (routeQuery) All",id:"func-routequery-all",children:[]},{value:"func (routeQuery) Count",id:"func-routequery-count",children:[]},{value:"func (routeQuery) Delete",id:"func-routequery-delete",children:[]},{value:"func (routeQuery) DeleteAll",id:"func-routequery-deleteall",children:[]},{value:"func (routeQuery) DeleteAllSlice",id:"func-routequery-deleteallslice",children:[]},{value:"func (routeQuery) Domain",id:"func-routequery-domain",children:[]},{value:"func (routeQuery) Exists",id:"func-routequery-exists",children:[]},{value:"func (routeQuery) Insert",id:"func-routequery-insert",children:[]},{value:"func (routeQuery) One",id:"func-routequery-one",children:[]},{value:"func (routeQuery) Reload",id:"func-routequery-reload",children:[]},{value:"func (routeQuery) ReloadAll",id:"func-routequery-reloadall",children:[]},{value:"func (routeQuery) RemoveResourceRouteAnnotations",id:"func-routequery-removeresourcerouteannotations",children:[]},{value:"func (routeQuery) RemoveResourceRouteLabels",id:"func-routequery-removeresourceroutelabels",children:[]},{value:"func (routeQuery) RemoveRouteBindings",id:"func-routequery-removeroutebindings",children:[]},{value:"func (routeQuery) ResourceRouteAnnotations",id:"func-routequery-resourcerouteannotations",children:[]},{value:"func (routeQuery) ResourceRouteLabels",id:"func-routequery-resourceroutelabels",children:[]},{value:"func (routeQuery) RouteBindings",id:"func-routequery-routebindings",children:[]},{value:"func (routeQuery) RouteMappings",id:"func-routequery-routemappings",children:[]},{value:"func (routeQuery) SetDomain",id:"func-routequery-setdomain",children:[]},{value:"func (routeQuery) SetResourceRouteAnnotations",id:"func-routequery-setresourcerouteannotations",children:[]},{value:"func (routeQuery) SetResourceRouteLabels",id:"func-routequery-setresourceroutelabels",children:[]},{value:"func (routeQuery) SetRouteBindings",id:"func-routequery-setroutebindings",children:[]},{value:"func (routeQuery) SetSpace",id:"func-routequery-setspace",children:[]},{value:"func (routeQuery) Space",id:"func-routequery-space",children:[]},{value:"func (routeQuery) Update",id:"func-routequery-update",children:[]},{value:"func (routeQuery) UpdateAll",id:"func-routequery-updateall",children:[]},{value:"func (routeQuery) UpdateAllSlice",id:"func-routequery-updateallslice",children:[]},{value:"func (routeQuery) Upsert",id:"func-routequery-upsert",children:[]}]},{value:"type routeR",id:"type-router",children:[{value:"func (*routeR) NewStruct",id:"func-router-newstruct",children:[]}]},{value:"type schemaMigrationL",id:"type-schemamigrationl",children:[]},{value:"type schemaMigrationQuery",id:"type-schemamigrationquery",children:[{value:"func SchemaMigrations",id:"func-schemamigrations",children:[]},{value:"func (schemaMigrationQuery) All",id:"func-schemamigrationquery-all",children:[]},{value:"func (schemaMigrationQuery) Count",id:"func-schemamigrationquery-count",children:[]},{value:"func (schemaMigrationQuery) Delete",id:"func-schemamigrationquery-delete",children:[]},{value:"func (schemaMigrationQuery) DeleteAll",id:"func-schemamigrationquery-deleteall",children:[]},{value:"func (schemaMigrationQuery) DeleteAllSlice",id:"func-schemamigrationquery-deleteallslice",children:[]},{value:"func (schemaMigrationQuery) Exists",id:"func-schemamigrationquery-exists",children:[]},{value:"func (schemaMigrationQuery) Insert",id:"func-schemamigrationquery-insert",children:[]},{value:"func (schemaMigrationQuery) One",id:"func-schemamigrationquery-one",children:[]},{value:"func (schemaMigrationQuery) Reload",id:"func-schemamigrationquery-reload",children:[]},{value:"func (schemaMigrationQuery) ReloadAll",id:"func-schemamigrationquery-reloadall",children:[]},{value:"func (schemaMigrationQuery) Update",id:"func-schemamigrationquery-update",children:[]},{value:"func (schemaMigrationQuery) UpdateAll",id:"func-schemamigrationquery-updateall",children:[]},{value:"func (schemaMigrationQuery) UpdateAllSlice",id:"func-schemamigrationquery-updateallslice",children:[]},{value:"func (schemaMigrationQuery) Upsert",id:"func-schemamigrationquery-upsert",children:[]}]},{value:"type schemaMigrationR",id:"type-schemamigrationr",children:[{value:"func (*schemaMigrationR) NewStruct",id:"func-schemamigrationr-newstruct",children:[]}]},{value:"type securityGroupL",id:"type-securitygroupl",children:[{value:"func (securityGroupL) LoadSecurityGroupsSpaces",id:"func-securitygroupl-loadsecuritygroupsspaces",children:[]},{value:"func (securityGroupL) LoadStagingSecurityGroupStagingSecurityGroupsSpaces",id:"func-securitygroupl-loadstagingsecuritygroupstagingsecuritygroupsspaces",children:[]}]},{value:"type securityGroupQuery",id:"type-securitygroupquery",children:[{value:"func SecurityGroups",id:"func-securitygroups",children:[]},{value:"func (securityGroupQuery) AddSecurityGroupsSpaces",id:"func-securitygroupquery-addsecuritygroupsspaces",children:[]},{value:"func (securityGroupQuery) AddStagingSecurityGroupStagingSecurityGroupsSpaces",id:"func-securitygroupquery-addstagingsecuritygroupstagingsecuritygroupsspaces",children:[]},{value:"func (securityGroupQuery) All",id:"func-securitygroupquery-all",children:[]},{value:"func (securityGroupQuery) Count",id:"func-securitygroupquery-count",children:[]},{value:"func (securityGroupQuery) Delete",id:"func-securitygroupquery-delete",children:[]},{value:"func (securityGroupQuery) DeleteAll",id:"func-securitygroupquery-deleteall",children:[]},{value:"func (securityGroupQuery) DeleteAllSlice",id:"func-securitygroupquery-deleteallslice",children:[]},{value:"func (securityGroupQuery) Exists",id:"func-securitygroupquery-exists",children:[]},{value:"func (securityGroupQuery) Insert",id:"func-securitygroupquery-insert",children:[]},{value:"func (securityGroupQuery) One",id:"func-securitygroupquery-one",children:[]},{value:"func (securityGroupQuery) Reload",id:"func-securitygroupquery-reload",children:[]},{value:"func (securityGroupQuery) ReloadAll",id:"func-securitygroupquery-reloadall",children:[]},{value:"func (securityGroupQuery) SecurityGroupsSpaces",id:"func-securitygroupquery-securitygroupsspaces",children:[]},{value:"func (securityGroupQuery) StagingSecurityGroupStagingSecurityGroupsSpaces",id:"func-securitygroupquery-stagingsecuritygroupstagingsecuritygroupsspaces",children:[]},{value:"func (securityGroupQuery) Update",id:"func-securitygroupquery-update",children:[]},{value:"func (securityGroupQuery) UpdateAll",id:"func-securitygroupquery-updateall",children:[]},{value:"func (securityGroupQuery) UpdateAllSlice",id:"func-securitygroupquery-updateallslice",children:[]},{value:"func (securityGroupQuery) Upsert",id:"func-securitygroupquery-upsert",children:[]}]},{value:"type securityGroupR",id:"type-securitygroupr",children:[{value:"func (*securityGroupR) NewStruct",id:"func-securitygroupr-newstruct",children:[]}]},{value:"type securityGroupsSpaceL",id:"type-securitygroupsspacel",children:[{value:"func (securityGroupsSpaceL) LoadSecurityGroup",id:"func-securitygroupsspacel-loadsecuritygroup",children:[]},{value:"func (securityGroupsSpaceL) LoadSpace",id:"func-securitygroupsspacel-loadspace",children:[]}]},{value:"type securityGroupsSpaceQuery",id:"type-securitygroupsspacequery",children:[{value:"func SecurityGroupsSpaces",id:"func-securitygroupsspaces",children:[]},{value:"func (securityGroupsSpaceQuery) All",id:"func-securitygroupsspacequery-all",children:[]},{value:"func (securityGroupsSpaceQuery) Count",id:"func-securitygroupsspacequery-count",children:[]},{value:"func (securityGroupsSpaceQuery) Delete",id:"func-securitygroupsspacequery-delete",children:[]},{value:"func (securityGroupsSpaceQuery) DeleteAll",id:"func-securitygroupsspacequery-deleteall",children:[]},{value:"func (securityGroupsSpaceQuery) DeleteAllSlice",id:"func-securitygroupsspacequery-deleteallslice",children:[]},{value:"func (securityGroupsSpaceQuery) Exists",id:"func-securitygroupsspacequery-exists",children:[]},{value:"func (securityGroupsSpaceQuery) Insert",id:"func-securitygroupsspacequery-insert",children:[]},{value:"func (securityGroupsSpaceQuery) One",id:"func-securitygroupsspacequery-one",children:[]},{value:"func (securityGroupsSpaceQuery) Reload",id:"func-securitygroupsspacequery-reload",children:[]},{value:"func (securityGroupsSpaceQuery) ReloadAll",id:"func-securitygroupsspacequery-reloadall",children:[]},{value:"func (securityGroupsSpaceQuery) SecurityGroup",id:"func-securitygroupsspacequery-securitygroup",children:[]},{value:"func (securityGroupsSpaceQuery) SetSecurityGroup",id:"func-securitygroupsspacequery-setsecuritygroup",children:[]},{value:"func (securityGroupsSpaceQuery) SetSpace",id:"func-securitygroupsspacequery-setspace",children:[]},{value:"func (securityGroupsSpaceQuery) Space",id:"func-securitygroupsspacequery-space",children:[]},{value:"func (securityGroupsSpaceQuery) Update",id:"func-securitygroupsspacequery-update",children:[]},{value:"func (securityGroupsSpaceQuery) UpdateAll",id:"func-securitygroupsspacequery-updateall",children:[]},{value:"func (securityGroupsSpaceQuery) UpdateAllSlice",id:"func-securitygroupsspacequery-updateallslice",children:[]},{value:"func (securityGroupsSpaceQuery) Upsert",id:"func-securitygroupsspacequery-upsert",children:[]}]},{value:"type securityGroupsSpaceR",id:"type-securitygroupsspacer",children:[{value:"func (*securityGroupsSpaceR) NewStruct",id:"func-securitygroupsspacer-newstruct",children:[]}]},{value:"type serviceBindingAnnotationL",id:"type-servicebindingannotationl",children:[{value:"func (serviceBindingAnnotationL) LoadResource",id:"func-servicebindingannotationl-loadresource",children:[]}]},{value:"type serviceBindingAnnotationQuery",id:"type-servicebindingannotationquery",children:[{value:"func ServiceBindingAnnotations",id:"func-servicebindingannotations",children:[]},{value:"func (serviceBindingAnnotationQuery) All",id:"func-servicebindingannotationquery-all",children:[]},{value:"func (serviceBindingAnnotationQuery) Count",id:"func-servicebindingannotationquery-count",children:[]},{value:"func (serviceBindingAnnotationQuery) Delete",id:"func-servicebindingannotationquery-delete",children:[]},{value:"func (serviceBindingAnnotationQuery) DeleteAll",id:"func-servicebindingannotationquery-deleteall",children:[]},{value:"func (serviceBindingAnnotationQuery) DeleteAllSlice",id:"func-servicebindingannotationquery-deleteallslice",children:[]},{value:"func (serviceBindingAnnotationQuery) Exists",id:"func-servicebindingannotationquery-exists",children:[]},{value:"func (serviceBindingAnnotationQuery) Insert",id:"func-servicebindingannotationquery-insert",children:[]},{value:"func (serviceBindingAnnotationQuery) One",id:"func-servicebindingannotationquery-one",children:[]},{value:"func (serviceBindingAnnotationQuery) Reload",id:"func-servicebindingannotationquery-reload",children:[]},{value:"func (serviceBindingAnnotationQuery) ReloadAll",id:"func-servicebindingannotationquery-reloadall",children:[]},{value:"func (serviceBindingAnnotationQuery) RemoveResource",id:"func-servicebindingannotationquery-removeresource",children:[]},{value:"func (serviceBindingAnnotationQuery) Resource",id:"func-servicebindingannotationquery-resource",children:[]},{value:"func (serviceBindingAnnotationQuery) SetResource",id:"func-servicebindingannotationquery-setresource",children:[]},{value:"func (serviceBindingAnnotationQuery) Update",id:"func-servicebindingannotationquery-update",children:[]},{value:"func (serviceBindingAnnotationQuery) UpdateAll",id:"func-servicebindingannotationquery-updateall",children:[]},{value:"func (serviceBindingAnnotationQuery) UpdateAllSlice",id:"func-servicebindingannotationquery-updateallslice",children:[]},{value:"func (serviceBindingAnnotationQuery) Upsert",id:"func-servicebindingannotationquery-upsert",children:[]}]},{value:"type serviceBindingAnnotationR",id:"type-servicebindingannotationr",children:[{value:"func (*serviceBindingAnnotationR) NewStruct",id:"func-servicebindingannotationr-newstruct",children:[]}]},{value:"type serviceBindingL",id:"type-servicebindingl",children:[{value:"func (serviceBindingL) LoadApp",id:"func-servicebindingl-loadapp",children:[]},{value:"func (serviceBindingL) LoadResourceServiceBindingAnnotations",id:"func-servicebindingl-loadresourceservicebindingannotations",children:[]},{value:"func (serviceBindingL) LoadResourceServiceBindingLabels",id:"func-servicebindingl-loadresourceservicebindinglabels",children:[]},{value:"func (serviceBindingL) LoadServiceBindingOperation",id:"func-servicebindingl-loadservicebindingoperation",children:[]},{value:"func (serviceBindingL) LoadServiceInstance",id:"func-servicebindingl-loadserviceinstance",children:[]}]},{value:"type serviceBindingLabelL",id:"type-servicebindinglabell",children:[{value:"func (serviceBindingLabelL) LoadResource",id:"func-servicebindinglabell-loadresource",children:[]}]},{value:"type serviceBindingLabelQuery",id:"type-servicebindinglabelquery",children:[{value:"func ServiceBindingLabels",id:"func-servicebindinglabels",children:[]},{value:"func (serviceBindingLabelQuery) All",id:"func-servicebindinglabelquery-all",children:[]},{value:"func (serviceBindingLabelQuery) Count",id:"func-servicebindinglabelquery-count",children:[]},{value:"func (serviceBindingLabelQuery) Delete",id:"func-servicebindinglabelquery-delete",children:[]},{value:"func (serviceBindingLabelQuery) DeleteAll",id:"func-servicebindinglabelquery-deleteall",children:[]},{value:"func (serviceBindingLabelQuery) DeleteAllSlice",id:"func-servicebindinglabelquery-deleteallslice",children:[]},{value:"func (serviceBindingLabelQuery) Exists",id:"func-servicebindinglabelquery-exists",children:[]},{value:"func (serviceBindingLabelQuery) Insert",id:"func-servicebindinglabelquery-insert",children:[]},{value:"func (serviceBindingLabelQuery) One",id:"func-servicebindinglabelquery-one",children:[]},{value:"func (serviceBindingLabelQuery) Reload",id:"func-servicebindinglabelquery-reload",children:[]},{value:"func (serviceBindingLabelQuery) ReloadAll",id:"func-servicebindinglabelquery-reloadall",children:[]},{value:"func (serviceBindingLabelQuery) RemoveResource",id:"func-servicebindinglabelquery-removeresource",children:[]},{value:"func (serviceBindingLabelQuery) Resource",id:"func-servicebindinglabelquery-resource",children:[]},{value:"func (serviceBindingLabelQuery) SetResource",id:"func-servicebindinglabelquery-setresource",children:[]},{value:"func (serviceBindingLabelQuery) Update",id:"func-servicebindinglabelquery-update",children:[]},{value:"func (serviceBindingLabelQuery) UpdateAll",id:"func-servicebindinglabelquery-updateall",children:[]},{value:"func (serviceBindingLabelQuery) UpdateAllSlice",id:"func-servicebindinglabelquery-updateallslice",children:[]},{value:"func (serviceBindingLabelQuery) Upsert",id:"func-servicebindinglabelquery-upsert",children:[]}]},{value:"type serviceBindingLabelR",id:"type-servicebindinglabelr",children:[{value:"func (*serviceBindingLabelR) NewStruct",id:"func-servicebindinglabelr-newstruct",children:[]}]},{value:"type serviceBindingOperationL",id:"type-servicebindingoperationl",children:[{value:"func (serviceBindingOperationL) LoadServiceBinding",id:"func-servicebindingoperationl-loadservicebinding",children:[]}]},{value:"type serviceBindingOperationQuery",id:"type-servicebindingoperationquery",children:[{value:"func ServiceBindingOperations",id:"func-servicebindingoperations",children:[]},{value:"func (serviceBindingOperationQuery) All",id:"func-servicebindingoperationquery-all",children:[]},{value:"func (serviceBindingOperationQuery) Count",id:"func-servicebindingoperationquery-count",children:[]},{value:"func (serviceBindingOperationQuery) Delete",id:"func-servicebindingoperationquery-delete",children:[]},{value:"func (serviceBindingOperationQuery) DeleteAll",id:"func-servicebindingoperationquery-deleteall",children:[]},{value:"func (serviceBindingOperationQuery) DeleteAllSlice",id:"func-servicebindingoperationquery-deleteallslice",children:[]},{value:"func (serviceBindingOperationQuery) Exists",id:"func-servicebindingoperationquery-exists",children:[]},{value:"func (serviceBindingOperationQuery) Insert",id:"func-servicebindingoperationquery-insert",children:[]},{value:"func (serviceBindingOperationQuery) One",id:"func-servicebindingoperationquery-one",children:[]},{value:"func (serviceBindingOperationQuery) Reload",id:"func-servicebindingoperationquery-reload",children:[]},{value:"func (serviceBindingOperationQuery) ReloadAll",id:"func-servicebindingoperationquery-reloadall",children:[]},{value:"func (serviceBindingOperationQuery) RemoveServiceBinding",id:"func-servicebindingoperationquery-removeservicebinding",children:[]},{value:"func (serviceBindingOperationQuery) ServiceBinding",id:"func-servicebindingoperationquery-servicebinding",children:[]},{value:"func (serviceBindingOperationQuery) SetServiceBinding",id:"func-servicebindingoperationquery-setservicebinding",children:[]},{value:"func (serviceBindingOperationQuery) Update",id:"func-servicebindingoperationquery-update",children:[]},{value:"func (serviceBindingOperationQuery) UpdateAll",id:"func-servicebindingoperationquery-updateall",children:[]},{value:"func (serviceBindingOperationQuery) UpdateAllSlice",id:"func-servicebindingoperationquery-updateallslice",children:[]},{value:"func (serviceBindingOperationQuery) Upsert",id:"func-servicebindingoperationquery-upsert",children:[]}]},{value:"type serviceBindingOperationR",id:"type-servicebindingoperationr",children:[{value:"func (*serviceBindingOperationR) NewStruct",id:"func-servicebindingoperationr-newstruct",children:[]}]},{value:"type serviceBindingQuery",id:"type-servicebindingquery",children:[{value:"func ServiceBindings",id:"func-servicebindings",children:[]},{value:"func (serviceBindingQuery) AddResourceServiceBindingAnnotations",id:"func-servicebindingquery-addresourceservicebindingannotations",children:[]},{value:"func (serviceBindingQuery) AddResourceServiceBindingLabels",id:"func-servicebindingquery-addresourceservicebindinglabels",children:[]},{value:"func (serviceBindingQuery) All",id:"func-servicebindingquery-all",children:[]},{value:"func (serviceBindingQuery) App",id:"func-servicebindingquery-app",children:[]},{value:"func (serviceBindingQuery) Count",id:"func-servicebindingquery-count",children:[]},{value:"func (serviceBindingQuery) Delete",id:"func-servicebindingquery-delete",children:[]},{value:"func (serviceBindingQuery) DeleteAll",id:"func-servicebindingquery-deleteall",children:[]},{value:"func (serviceBindingQuery) DeleteAllSlice",id:"func-servicebindingquery-deleteallslice",children:[]},{value:"func (serviceBindingQuery) Exists",id:"func-servicebindingquery-exists",children:[]},{value:"func (serviceBindingQuery) Insert",id:"func-servicebindingquery-insert",children:[]},{value:"func (serviceBindingQuery) One",id:"func-servicebindingquery-one",children:[]},{value:"func (serviceBindingQuery) Reload",id:"func-servicebindingquery-reload",children:[]},{value:"func (serviceBindingQuery) ReloadAll",id:"func-servicebindingquery-reloadall",children:[]},{value:"func (serviceBindingQuery) RemoveResourceServiceBindingAnnotations",id:"func-servicebindingquery-removeresourceservicebindingannotations",children:[]},{value:"func (serviceBindingQuery) RemoveResourceServiceBindingLabels",id:"func-servicebindingquery-removeresourceservicebindinglabels",children:[]},{value:"func (serviceBindingQuery) RemoveServiceBindingOperation",id:"func-servicebindingquery-removeservicebindingoperation",children:[]},{value:"func (serviceBindingQuery) ResourceServiceBindingAnnotations",id:"func-servicebindingquery-resourceservicebindingannotations",children:[]},{value:"func (serviceBindingQuery) ResourceServiceBindingLabels",id:"func-servicebindingquery-resourceservicebindinglabels",children:[]},{value:"func (serviceBindingQuery) ServiceBindingOperation",id:"func-servicebindingquery-servicebindingoperation",children:[]},{value:"func (serviceBindingQuery) ServiceInstance",id:"func-servicebindingquery-serviceinstance",children:[]},{value:"func (serviceBindingQuery) SetApp",id:"func-servicebindingquery-setapp",children:[]},{value:"func (serviceBindingQuery) SetResourceServiceBindingAnnotations",id:"func-servicebindingquery-setresourceservicebindingannotations",children:[]},{value:"func (serviceBindingQuery) SetResourceServiceBindingLabels",id:"func-servicebindingquery-setresourceservicebindinglabels",children:[]},{value:"func (serviceBindingQuery) SetServiceBindingOperation",id:"func-servicebindingquery-setservicebindingoperation",children:[]},{value:"func (serviceBindingQuery) SetServiceInstance",id:"func-servicebindingquery-setserviceinstance",children:[]},{value:"func (serviceBindingQuery) Update",id:"func-servicebindingquery-update",children:[]},{value:"func (serviceBindingQuery) UpdateAll",id:"func-servicebindingquery-updateall",children:[]},{value:"func (serviceBindingQuery) UpdateAllSlice",id:"func-servicebindingquery-updateallslice",children:[]},{value:"func (serviceBindingQuery) Upsert",id:"func-servicebindingquery-upsert",children:[]}]},{value:"type serviceBindingR",id:"type-servicebindingr",children:[{value:"func (*serviceBindingR) NewStruct",id:"func-servicebindingr-newstruct",children:[]}]},{value:"type serviceBrokerAnnotationL",id:"type-servicebrokerannotationl",children:[{value:"func (serviceBrokerAnnotationL) LoadResource",id:"func-servicebrokerannotationl-loadresource",children:[]}]},{value:"type serviceBrokerAnnotationQuery",id:"type-servicebrokerannotationquery",children:[{value:"func ServiceBrokerAnnotations",id:"func-servicebrokerannotations",children:[]},{value:"func (serviceBrokerAnnotationQuery) All",id:"func-servicebrokerannotationquery-all",children:[]},{value:"func (serviceBrokerAnnotationQuery) Count",id:"func-servicebrokerannotationquery-count",children:[]},{value:"func (serviceBrokerAnnotationQuery) Delete",id:"func-servicebrokerannotationquery-delete",children:[]},{value:"func (serviceBrokerAnnotationQuery) DeleteAll",id:"func-servicebrokerannotationquery-deleteall",children:[]},{value:"func (serviceBrokerAnnotationQuery) DeleteAllSlice",id:"func-servicebrokerannotationquery-deleteallslice",children:[]},{value:"func (serviceBrokerAnnotationQuery) Exists",id:"func-servicebrokerannotationquery-exists",children:[]},{value:"func (serviceBrokerAnnotationQuery) Insert",id:"func-servicebrokerannotationquery-insert",children:[]},{value:"func (serviceBrokerAnnotationQuery) One",id:"func-servicebrokerannotationquery-one",children:[]},{value:"func (serviceBrokerAnnotationQuery) Reload",id:"func-servicebrokerannotationquery-reload",children:[]},{value:"func (serviceBrokerAnnotationQuery) ReloadAll",id:"func-servicebrokerannotationquery-reloadall",children:[]},{value:"func (serviceBrokerAnnotationQuery) RemoveResource",id:"func-servicebrokerannotationquery-removeresource",children:[]},{value:"func (serviceBrokerAnnotationQuery) Resource",id:"func-servicebrokerannotationquery-resource",children:[]},{value:"func (serviceBrokerAnnotationQuery) SetResource",id:"func-servicebrokerannotationquery-setresource",children:[]},{value:"func (serviceBrokerAnnotationQuery) Update",id:"func-servicebrokerannotationquery-update",children:[]},{value:"func (serviceBrokerAnnotationQuery) UpdateAll",id:"func-servicebrokerannotationquery-updateall",children:[]},{value:"func (serviceBrokerAnnotationQuery) UpdateAllSlice",id:"func-servicebrokerannotationquery-updateallslice",children:[]},{value:"func (serviceBrokerAnnotationQuery) Upsert",id:"func-servicebrokerannotationquery-upsert",children:[]}]},{value:"type serviceBrokerAnnotationR",id:"type-servicebrokerannotationr",children:[{value:"func (*serviceBrokerAnnotationR) NewStruct",id:"func-servicebrokerannotationr-newstruct",children:[]}]},{value:"type serviceBrokerL",id:"type-servicebrokerl",children:[{value:"func (serviceBrokerL) LoadFKServiceBrokerServiceBrokerUpdateRequests",id:"func-servicebrokerl-loadfkservicebrokerservicebrokerupdaterequests",children:[]},{value:"func (serviceBrokerL) LoadResourceServiceBrokerAnnotations",id:"func-servicebrokerl-loadresourceservicebrokerannotations",children:[]},{value:"func (serviceBrokerL) LoadResourceServiceBrokerLabels",id:"func-servicebrokerl-loadresourceservicebrokerlabels",children:[]},{value:"func (serviceBrokerL) LoadServices",id:"func-servicebrokerl-loadservices",children:[]},{value:"func (serviceBrokerL) LoadSpace",id:"func-servicebrokerl-loadspace",children:[]}]},{value:"type serviceBrokerLabelL",id:"type-servicebrokerlabell",children:[{value:"func (serviceBrokerLabelL) LoadResource",id:"func-servicebrokerlabell-loadresource",children:[]}]},{value:"type serviceBrokerLabelQuery",id:"type-servicebrokerlabelquery",children:[{value:"func ServiceBrokerLabels",id:"func-servicebrokerlabels",children:[]},{value:"func (serviceBrokerLabelQuery) All",id:"func-servicebrokerlabelquery-all",children:[]},{value:"func (serviceBrokerLabelQuery) Count",id:"func-servicebrokerlabelquery-count",children:[]},{value:"func (serviceBrokerLabelQuery) Delete",id:"func-servicebrokerlabelquery-delete",children:[]},{value:"func (serviceBrokerLabelQuery) DeleteAll",id:"func-servicebrokerlabelquery-deleteall",children:[]},{value:"func (serviceBrokerLabelQuery) DeleteAllSlice",id:"func-servicebrokerlabelquery-deleteallslice",children:[]},{value:"func (serviceBrokerLabelQuery) Exists",id:"func-servicebrokerlabelquery-exists",children:[]},{value:"func (serviceBrokerLabelQuery) Insert",id:"func-servicebrokerlabelquery-insert",children:[]},{value:"func (serviceBrokerLabelQuery) One",id:"func-servicebrokerlabelquery-one",children:[]},{value:"func (serviceBrokerLabelQuery) Reload",id:"func-servicebrokerlabelquery-reload",children:[]},{value:"func (serviceBrokerLabelQuery) ReloadAll",id:"func-servicebrokerlabelquery-reloadall",children:[]},{value:"func (serviceBrokerLabelQuery) RemoveResource",id:"func-servicebrokerlabelquery-removeresource",children:[]},{value:"func (serviceBrokerLabelQuery) Resource",id:"func-servicebrokerlabelquery-resource",children:[]},{value:"func (serviceBrokerLabelQuery) SetResource",id:"func-servicebrokerlabelquery-setresource",children:[]},{value:"func (serviceBrokerLabelQuery) Update",id:"func-servicebrokerlabelquery-update",children:[]},{value:"func (serviceBrokerLabelQuery) UpdateAll",id:"func-servicebrokerlabelquery-updateall",children:[]},{value:"func (serviceBrokerLabelQuery) UpdateAllSlice",id:"func-servicebrokerlabelquery-updateallslice",children:[]},{value:"func (serviceBrokerLabelQuery) Upsert",id:"func-servicebrokerlabelquery-upsert",children:[]}]},{value:"type serviceBrokerLabelR",id:"type-servicebrokerlabelr",children:[{value:"func (*serviceBrokerLabelR) NewStruct",id:"func-servicebrokerlabelr-newstruct",children:[]}]},{value:"type serviceBrokerQuery",id:"type-servicebrokerquery",children:[{value:"func ServiceBrokers",id:"func-servicebrokers",children:[]},{value:"func (serviceBrokerQuery) AddFKServiceBrokerServiceBrokerUpdateRequests",id:"func-servicebrokerquery-addfkservicebrokerservicebrokerupdaterequests",children:[]},{value:"func (serviceBrokerQuery) AddResourceServiceBrokerAnnotations",id:"func-servicebrokerquery-addresourceservicebrokerannotations",children:[]},{value:"func (serviceBrokerQuery) AddResourceServiceBrokerLabels",id:"func-servicebrokerquery-addresourceservicebrokerlabels",children:[]},{value:"func (serviceBrokerQuery) AddServices",id:"func-servicebrokerquery-addservices",children:[]},{value:"func (serviceBrokerQuery) All",id:"func-servicebrokerquery-all",children:[]},{value:"func (serviceBrokerQuery) Count",id:"func-servicebrokerquery-count",children:[]},{value:"func (serviceBrokerQuery) Delete",id:"func-servicebrokerquery-delete",children:[]},{value:"func (serviceBrokerQuery) DeleteAll",id:"func-servicebrokerquery-deleteall",children:[]},{value:"func (serviceBrokerQuery) DeleteAllSlice",id:"func-servicebrokerquery-deleteallslice",children:[]},{value:"func (serviceBrokerQuery) Exists",id:"func-servicebrokerquery-exists",children:[]},{value:"func (serviceBrokerQuery) FKServiceBrokerServiceBrokerUpdateRequests",id:"func-servicebrokerquery-fkservicebrokerservicebrokerupdaterequests",children:[]},{value:"func (serviceBrokerQuery) Insert",id:"func-servicebrokerquery-insert",children:[]},{value:"func (serviceBrokerQuery) One",id:"func-servicebrokerquery-one",children:[]},{value:"func (serviceBrokerQuery) Reload",id:"func-servicebrokerquery-reload",children:[]},{value:"func (serviceBrokerQuery) ReloadAll",id:"func-servicebrokerquery-reloadall",children:[]},{value:"func (serviceBrokerQuery) RemoveFKServiceBrokerServiceBrokerUpdateRequests",id:"func-servicebrokerquery-removefkservicebrokerservicebrokerupdaterequests",children:[]},{value:"func (serviceBrokerQuery) RemoveResourceServiceBrokerAnnotations",id:"func-servicebrokerquery-removeresourceservicebrokerannotations",children:[]},{value:"func (serviceBrokerQuery) RemoveResourceServiceBrokerLabels",id:"func-servicebrokerquery-removeresourceservicebrokerlabels",children:[]},{value:"func (serviceBrokerQuery) RemoveServices",id:"func-servicebrokerquery-removeservices",children:[]},{value:"func (serviceBrokerQuery) RemoveSpace",id:"func-servicebrokerquery-removespace",children:[]},{value:"func (serviceBrokerQuery) ResourceServiceBrokerAnnotations",id:"func-servicebrokerquery-resourceservicebrokerannotations",children:[]},{value:"func (serviceBrokerQuery) ResourceServiceBrokerLabels",id:"func-servicebrokerquery-resourceservicebrokerlabels",children:[]},{value:"func (serviceBrokerQuery) Services",id:"func-servicebrokerquery-services",children:[]},{value:"func (serviceBrokerQuery) SetFKServiceBrokerServiceBrokerUpdateRequests",id:"func-servicebrokerquery-setfkservicebrokerservicebrokerupdaterequests",children:[]},{value:"func (serviceBrokerQuery) SetResourceServiceBrokerAnnotations",id:"func-servicebrokerquery-setresourceservicebrokerannotations",children:[]},{value:"func (serviceBrokerQuery) SetResourceServiceBrokerLabels",id:"func-servicebrokerquery-setresourceservicebrokerlabels",children:[]},{value:"func (serviceBrokerQuery) SetServices",id:"func-servicebrokerquery-setservices",children:[]},{value:"func (serviceBrokerQuery) SetSpace",id:"func-servicebrokerquery-setspace",children:[]},{value:"func (serviceBrokerQuery) Space",id:"func-servicebrokerquery-space",children:[]},{value:"func (serviceBrokerQuery) Update",id:"func-servicebrokerquery-update",children:[]},{value:"func (serviceBrokerQuery) UpdateAll",id:"func-servicebrokerquery-updateall",children:[]},{value:"func (serviceBrokerQuery) UpdateAllSlice",id:"func-servicebrokerquery-updateallslice",children:[]},{value:"func (serviceBrokerQuery) Upsert",id:"func-servicebrokerquery-upsert",children:[]}]},{value:"type serviceBrokerR",id:"type-servicebrokerr",children:[{value:"func (*serviceBrokerR) NewStruct",id:"func-servicebrokerr-newstruct",children:[]}]},{value:"type serviceBrokerUpdateRequestAnnotationL",id:"type-servicebrokerupdaterequestannotationl",children:[{value:"func (serviceBrokerUpdateRequestAnnotationL) LoadResource",id:"func-servicebrokerupdaterequestannotationl-loadresource",children:[]}]},{value:"type serviceBrokerUpdateRequestAnnotationQuery",id:"type-servicebrokerupdaterequestannotationquery",children:[{value:"func ServiceBrokerUpdateRequestAnnotations",id:"func-servicebrokerupdaterequestannotations",children:[]},{value:"func (serviceBrokerUpdateRequestAnnotationQuery) All",id:"func-servicebrokerupdaterequestannotationquery-all",children:[]},{value:"func (serviceBrokerUpdateRequestAnnotationQuery) Count",id:"func-servicebrokerupdaterequestannotationquery-count",children:[]},{value:"func (serviceBrokerUpdateRequestAnnotationQuery) Delete",id:"func-servicebrokerupdaterequestannotationquery-delete",children:[]},{value:"func (serviceBrokerUpdateRequestAnnotationQuery) DeleteAll",id:"func-servicebrokerupdaterequestannotationquery-deleteall",children:[]},{value:"func (serviceBrokerUpdateRequestAnnotationQuery) DeleteAllSlice",id:"func-servicebrokerupdaterequestannotationquery-deleteallslice",children:[]},{value:"func (serviceBrokerUpdateRequestAnnotationQuery) Exists",id:"func-servicebrokerupdaterequestannotationquery-exists",children:[]},{value:"func (serviceBrokerUpdateRequestAnnotationQuery) Insert",id:"func-servicebrokerupdaterequestannotationquery-insert",children:[]},{value:"func (serviceBrokerUpdateRequestAnnotationQuery) One",id:"func-servicebrokerupdaterequestannotationquery-one",children:[]},{value:"func (serviceBrokerUpdateRequestAnnotationQuery) Reload",id:"func-servicebrokerupdaterequestannotationquery-reload",children:[]},{value:"func (serviceBrokerUpdateRequestAnnotationQuery) ReloadAll",id:"func-servicebrokerupdaterequestannotationquery-reloadall",children:[]},{value:"func (serviceBrokerUpdateRequestAnnotationQuery) RemoveResource",id:"func-servicebrokerupdaterequestannotationquery-removeresource",children:[]},{value:"func (serviceBrokerUpdateRequestAnnotationQuery) Resource",id:"func-servicebrokerupdaterequestannotationquery-resource",children:[]},{value:"func (serviceBrokerUpdateRequestAnnotationQuery) SetResource",id:"func-servicebrokerupdaterequestannotationquery-setresource",children:[]},{value:"func (serviceBrokerUpdateRequestAnnotationQuery) Update",id:"func-servicebrokerupdaterequestannotationquery-update",children:[]},{value:"func (serviceBrokerUpdateRequestAnnotationQuery) UpdateAll",id:"func-servicebrokerupdaterequestannotationquery-updateall",children:[]},{value:"func (serviceBrokerUpdateRequestAnnotationQuery) UpdateAllSlice",id:"func-servicebrokerupdaterequestannotationquery-updateallslice",children:[]},{value:"func (serviceBrokerUpdateRequestAnnotationQuery) Upsert",id:"func-servicebrokerupdaterequestannotationquery-upsert",children:[]}]},{value:"type serviceBrokerUpdateRequestAnnotationR",id:"type-servicebrokerupdaterequestannotationr",children:[{value:"func (*serviceBrokerUpdateRequestAnnotationR) NewStruct",id:"func-servicebrokerupdaterequestannotationr-newstruct",children:[]}]},{value:"type serviceBrokerUpdateRequestL",id:"type-servicebrokerupdaterequestl",children:[{value:"func (serviceBrokerUpdateRequestL) LoadFKServiceBroker",id:"func-servicebrokerupdaterequestl-loadfkservicebroker",children:[]},{value:"func (serviceBrokerUpdateRequestL) LoadResourceServiceBrokerUpdateRequestAnnotations",id:"func-servicebrokerupdaterequestl-loadresourceservicebrokerupdaterequestannotations",children:[]},{value:"func (serviceBrokerUpdateRequestL) LoadResourceServiceBrokerUpdateRequestLabels",id:"func-servicebrokerupdaterequestl-loadresourceservicebrokerupdaterequestlabels",children:[]}]},{value:"type serviceBrokerUpdateRequestLabelL",id:"type-servicebrokerupdaterequestlabell",children:[{value:"func (serviceBrokerUpdateRequestLabelL) LoadResource",id:"func-servicebrokerupdaterequestlabell-loadresource",children:[]}]},{value:"type serviceBrokerUpdateRequestLabelQuery",id:"type-servicebrokerupdaterequestlabelquery",children:[{value:"func ServiceBrokerUpdateRequestLabels",id:"func-servicebrokerupdaterequestlabels",children:[]},{value:"func (serviceBrokerUpdateRequestLabelQuery) All",id:"func-servicebrokerupdaterequestlabelquery-all",children:[]},{value:"func (serviceBrokerUpdateRequestLabelQuery) Count",id:"func-servicebrokerupdaterequestlabelquery-count",children:[]},{value:"func (serviceBrokerUpdateRequestLabelQuery) Delete",id:"func-servicebrokerupdaterequestlabelquery-delete",children:[]},{value:"func (serviceBrokerUpdateRequestLabelQuery) DeleteAll",id:"func-servicebrokerupdaterequestlabelquery-deleteall",children:[]},{value:"func (serviceBrokerUpdateRequestLabelQuery) DeleteAllSlice",id:"func-servicebrokerupdaterequestlabelquery-deleteallslice",children:[]},{value:"func (serviceBrokerUpdateRequestLabelQuery) Exists",id:"func-servicebrokerupdaterequestlabelquery-exists",children:[]},{value:"func (serviceBrokerUpdateRequestLabelQuery) Insert",id:"func-servicebrokerupdaterequestlabelquery-insert",children:[]},{value:"func (serviceBrokerUpdateRequestLabelQuery) One",id:"func-servicebrokerupdaterequestlabelquery-one",children:[]},{value:"func (serviceBrokerUpdateRequestLabelQuery) Reload",id:"func-servicebrokerupdaterequestlabelquery-reload",children:[]},{value:"func (serviceBrokerUpdateRequestLabelQuery) ReloadAll",id:"func-servicebrokerupdaterequestlabelquery-reloadall",children:[]},{value:"func (serviceBrokerUpdateRequestLabelQuery) RemoveResource",id:"func-servicebrokerupdaterequestlabelquery-removeresource",children:[]},{value:"func (serviceBrokerUpdateRequestLabelQuery) Resource",id:"func-servicebrokerupdaterequestlabelquery-resource",children:[]},{value:"func (serviceBrokerUpdateRequestLabelQuery) SetResource",id:"func-servicebrokerupdaterequestlabelquery-setresource",children:[]},{value:"func (serviceBrokerUpdateRequestLabelQuery) Update",id:"func-servicebrokerupdaterequestlabelquery-update",children:[]},{value:"func (serviceBrokerUpdateRequestLabelQuery) UpdateAll",id:"func-servicebrokerupdaterequestlabelquery-updateall",children:[]},{value:"func (serviceBrokerUpdateRequestLabelQuery) UpdateAllSlice",id:"func-servicebrokerupdaterequestlabelquery-updateallslice",children:[]},{value:"func (serviceBrokerUpdateRequestLabelQuery) Upsert",id:"func-servicebrokerupdaterequestlabelquery-upsert",children:[]}]},{value:"type serviceBrokerUpdateRequestLabelR",id:"type-servicebrokerupdaterequestlabelr",children:[{value:"func (*serviceBrokerUpdateRequestLabelR) NewStruct",id:"func-servicebrokerupdaterequestlabelr-newstruct",children:[]}]},{value:"type serviceBrokerUpdateRequestQuery",id:"type-servicebrokerupdaterequestquery",children:[{value:"func ServiceBrokerUpdateRequests",id:"func-servicebrokerupdaterequests",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) AddResourceServiceBrokerUpdateRequestAnnotations",id:"func-servicebrokerupdaterequestquery-addresourceservicebrokerupdaterequestannotations",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) AddResourceServiceBrokerUpdateRequestLabels",id:"func-servicebrokerupdaterequestquery-addresourceservicebrokerupdaterequestlabels",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) All",id:"func-servicebrokerupdaterequestquery-all",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) Count",id:"func-servicebrokerupdaterequestquery-count",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) Delete",id:"func-servicebrokerupdaterequestquery-delete",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) DeleteAll",id:"func-servicebrokerupdaterequestquery-deleteall",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) DeleteAllSlice",id:"func-servicebrokerupdaterequestquery-deleteallslice",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) Exists",id:"func-servicebrokerupdaterequestquery-exists",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) FKServiceBroker",id:"func-servicebrokerupdaterequestquery-fkservicebroker",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) Insert",id:"func-servicebrokerupdaterequestquery-insert",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) One",id:"func-servicebrokerupdaterequestquery-one",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) Reload",id:"func-servicebrokerupdaterequestquery-reload",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) ReloadAll",id:"func-servicebrokerupdaterequestquery-reloadall",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) RemoveFKServiceBroker",id:"func-servicebrokerupdaterequestquery-removefkservicebroker",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) RemoveResourceServiceBrokerUpdateRequestAnnotations",id:"func-servicebrokerupdaterequestquery-removeresourceservicebrokerupdaterequestannotations",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) RemoveResourceServiceBrokerUpdateRequestLabels",id:"func-servicebrokerupdaterequestquery-removeresourceservicebrokerupdaterequestlabels",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) ResourceServiceBrokerUpdateRequestAnnotations",id:"func-servicebrokerupdaterequestquery-resourceservicebrokerupdaterequestannotations",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) ResourceServiceBrokerUpdateRequestLabels",id:"func-servicebrokerupdaterequestquery-resourceservicebrokerupdaterequestlabels",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) SetFKServiceBroker",id:"func-servicebrokerupdaterequestquery-setfkservicebroker",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) SetResourceServiceBrokerUpdateRequestAnnotations",id:"func-servicebrokerupdaterequestquery-setresourceservicebrokerupdaterequestannotations",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) SetResourceServiceBrokerUpdateRequestLabels",id:"func-servicebrokerupdaterequestquery-setresourceservicebrokerupdaterequestlabels",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) Update",id:"func-servicebrokerupdaterequestquery-update",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) UpdateAll",id:"func-servicebrokerupdaterequestquery-updateall",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) UpdateAllSlice",id:"func-servicebrokerupdaterequestquery-updateallslice",children:[]},{value:"func (serviceBrokerUpdateRequestQuery) Upsert",id:"func-servicebrokerupdaterequestquery-upsert",children:[]}]},{value:"type serviceBrokerUpdateRequestR",id:"type-servicebrokerupdaterequestr",children:[{value:"func (*serviceBrokerUpdateRequestR) NewStruct",id:"func-servicebrokerupdaterequestr-newstruct",children:[]}]},{value:"type serviceDashboardClientL",id:"type-servicedashboardclientl",children:[]},{value:"type serviceDashboardClientQuery",id:"type-servicedashboardclientquery",children:[{value:"func ServiceDashboardClients",id:"func-servicedashboardclients",children:[]},{value:"func (serviceDashboardClientQuery) All",id:"func-servicedashboardclientquery-all",children:[]},{value:"func (serviceDashboardClientQuery) Count",id:"func-servicedashboardclientquery-count",children:[]},{value:"func (serviceDashboardClientQuery) Delete",id:"func-servicedashboardclientquery-delete",children:[]},{value:"func (serviceDashboardClientQuery) DeleteAll",id:"func-servicedashboardclientquery-deleteall",children:[]},{value:"func (serviceDashboardClientQuery) DeleteAllSlice",id:"func-servicedashboardclientquery-deleteallslice",children:[]},{value:"func (serviceDashboardClientQuery) Exists",id:"func-servicedashboardclientquery-exists",children:[]},{value:"func (serviceDashboardClientQuery) Insert",id:"func-servicedashboardclientquery-insert",children:[]},{value:"func (serviceDashboardClientQuery) One",id:"func-servicedashboardclientquery-one",children:[]},{value:"func (serviceDashboardClientQuery) Reload",id:"func-servicedashboardclientquery-reload",children:[]},{value:"func (serviceDashboardClientQuery) ReloadAll",id:"func-servicedashboardclientquery-reloadall",children:[]},{value:"func (serviceDashboardClientQuery) Update",id:"func-servicedashboardclientquery-update",children:[]},{value:"func (serviceDashboardClientQuery) UpdateAll",id:"func-servicedashboardclientquery-updateall",children:[]},{value:"func (serviceDashboardClientQuery) UpdateAllSlice",id:"func-servicedashboardclientquery-updateallslice",children:[]},{value:"func (serviceDashboardClientQuery) Upsert",id:"func-servicedashboardclientquery-upsert",children:[]}]},{value:"type serviceDashboardClientR",id:"type-servicedashboardclientr",children:[{value:"func (*serviceDashboardClientR) NewStruct",id:"func-servicedashboardclientr-newstruct",children:[]}]},{value:"type serviceInstanceAnnotationL",id:"type-serviceinstanceannotationl",children:[{value:"func (serviceInstanceAnnotationL) LoadResource",id:"func-serviceinstanceannotationl-loadresource",children:[]}]},{value:"type serviceInstanceAnnotationQuery",id:"type-serviceinstanceannotationquery",children:[{value:"func ServiceInstanceAnnotations",id:"func-serviceinstanceannotations",children:[]},{value:"func (serviceInstanceAnnotationQuery) All",id:"func-serviceinstanceannotationquery-all",children:[]},{value:"func (serviceInstanceAnnotationQuery) Count",id:"func-serviceinstanceannotationquery-count",children:[]},{value:"func (serviceInstanceAnnotationQuery) Delete",id:"func-serviceinstanceannotationquery-delete",children:[]},{value:"func (serviceInstanceAnnotationQuery) DeleteAll",id:"func-serviceinstanceannotationquery-deleteall",children:[]},{value:"func (serviceInstanceAnnotationQuery) DeleteAllSlice",id:"func-serviceinstanceannotationquery-deleteallslice",children:[]},{value:"func (serviceInstanceAnnotationQuery) Exists",id:"func-serviceinstanceannotationquery-exists",children:[]},{value:"func (serviceInstanceAnnotationQuery) Insert",id:"func-serviceinstanceannotationquery-insert",children:[]},{value:"func (serviceInstanceAnnotationQuery) One",id:"func-serviceinstanceannotationquery-one",children:[]},{value:"func (serviceInstanceAnnotationQuery) Reload",id:"func-serviceinstanceannotationquery-reload",children:[]},{value:"func (serviceInstanceAnnotationQuery) ReloadAll",id:"func-serviceinstanceannotationquery-reloadall",children:[]},{value:"func (serviceInstanceAnnotationQuery) RemoveResource",id:"func-serviceinstanceannotationquery-removeresource",children:[]},{value:"func (serviceInstanceAnnotationQuery) Resource",id:"func-serviceinstanceannotationquery-resource",children:[]},{value:"func (serviceInstanceAnnotationQuery) SetResource",id:"func-serviceinstanceannotationquery-setresource",children:[]},{value:"func (serviceInstanceAnnotationQuery) Update",id:"func-serviceinstanceannotationquery-update",children:[]},{value:"func (serviceInstanceAnnotationQuery) UpdateAll",id:"func-serviceinstanceannotationquery-updateall",children:[]},{value:"func (serviceInstanceAnnotationQuery) UpdateAllSlice",id:"func-serviceinstanceannotationquery-updateallslice",children:[]},{value:"func (serviceInstanceAnnotationQuery) Upsert",id:"func-serviceinstanceannotationquery-upsert",children:[]}]},{value:"type serviceInstanceAnnotationR",id:"type-serviceinstanceannotationr",children:[{value:"func (*serviceInstanceAnnotationR) NewStruct",id:"func-serviceinstanceannotationr-newstruct",children:[]}]},{value:"type serviceInstanceL",id:"type-serviceinstancel",children:[{value:"func (serviceInstanceL) LoadResourceServiceInstanceAnnotations",id:"func-serviceinstancel-loadresourceserviceinstanceannotations",children:[]},{value:"func (serviceInstanceL) LoadResourceServiceInstanceLabels",id:"func-serviceinstancel-loadresourceserviceinstancelabels",children:[]},{value:"func (serviceInstanceL) LoadRouteBindings",id:"func-serviceinstancel-loadroutebindings",children:[]},{value:"func (serviceInstanceL) LoadServiceBindings",id:"func-serviceinstancel-loadservicebindings",children:[]},{value:"func (serviceInstanceL) LoadServiceInstanceOperations",id:"func-serviceinstancel-loadserviceinstanceoperations",children:[]},{value:"func (serviceInstanceL) LoadServiceKeys",id:"func-serviceinstancel-loadservicekeys",children:[]},{value:"func (serviceInstanceL) LoadServicePlan",id:"func-serviceinstancel-loadserviceplan",children:[]},{value:"func (serviceInstanceL) LoadSpace",id:"func-serviceinstancel-loadspace",children:[]},{value:"func (serviceInstanceL) LoadSpaces",id:"func-serviceinstancel-loadspaces",children:[]}]},{value:"type serviceInstanceLabelL",id:"type-serviceinstancelabell",children:[{value:"func (serviceInstanceLabelL) LoadResource",id:"func-serviceinstancelabell-loadresource",children:[]}]},{value:"type serviceInstanceLabelQuery",id:"type-serviceinstancelabelquery",children:[{value:"func ServiceInstanceLabels",id:"func-serviceinstancelabels",children:[]},{value:"func (serviceInstanceLabelQuery) All",id:"func-serviceinstancelabelquery-all",children:[]},{value:"func (serviceInstanceLabelQuery) Count",id:"func-serviceinstancelabelquery-count",children:[]},{value:"func (serviceInstanceLabelQuery) Delete",id:"func-serviceinstancelabelquery-delete",children:[]},{value:"func (serviceInstanceLabelQuery) DeleteAll",id:"func-serviceinstancelabelquery-deleteall",children:[]},{value:"func (serviceInstanceLabelQuery) DeleteAllSlice",id:"func-serviceinstancelabelquery-deleteallslice",children:[]},{value:"func (serviceInstanceLabelQuery) Exists",id:"func-serviceinstancelabelquery-exists",children:[]},{value:"func (serviceInstanceLabelQuery) Insert",id:"func-serviceinstancelabelquery-insert",children:[]},{value:"func (serviceInstanceLabelQuery) One",id:"func-serviceinstancelabelquery-one",children:[]},{value:"func (serviceInstanceLabelQuery) Reload",id:"func-serviceinstancelabelquery-reload",children:[]},{value:"func (serviceInstanceLabelQuery) ReloadAll",id:"func-serviceinstancelabelquery-reloadall",children:[]},{value:"func (serviceInstanceLabelQuery) RemoveResource",id:"func-serviceinstancelabelquery-removeresource",children:[]},{value:"func (serviceInstanceLabelQuery) Resource",id:"func-serviceinstancelabelquery-resource",children:[]},{value:"func (serviceInstanceLabelQuery) SetResource",id:"func-serviceinstancelabelquery-setresource",children:[]},{value:"func (serviceInstanceLabelQuery) Update",id:"func-serviceinstancelabelquery-update",children:[]},{value:"func (serviceInstanceLabelQuery) UpdateAll",id:"func-serviceinstancelabelquery-updateall",children:[]},{value:"func (serviceInstanceLabelQuery) UpdateAllSlice",id:"func-serviceinstancelabelquery-updateallslice",children:[]},{value:"func (serviceInstanceLabelQuery) Upsert",id:"func-serviceinstancelabelquery-upsert",children:[]}]},{value:"type serviceInstanceLabelR",id:"type-serviceinstancelabelr",children:[{value:"func (*serviceInstanceLabelR) NewStruct",id:"func-serviceinstancelabelr-newstruct",children:[]}]},{value:"type serviceInstanceOperationL",id:"type-serviceinstanceoperationl",children:[{value:"func (serviceInstanceOperationL) LoadServiceInstance",id:"func-serviceinstanceoperationl-loadserviceinstance",children:[]}]},{value:"type serviceInstanceOperationQuery",id:"type-serviceinstanceoperationquery",children:[{value:"func ServiceInstanceOperations",id:"func-serviceinstanceoperations",children:[]},{value:"func (serviceInstanceOperationQuery) All",id:"func-serviceinstanceoperationquery-all",children:[]},{value:"func (serviceInstanceOperationQuery) Count",id:"func-serviceinstanceoperationquery-count",children:[]},{value:"func (serviceInstanceOperationQuery) Delete",id:"func-serviceinstanceoperationquery-delete",children:[]},{value:"func (serviceInstanceOperationQuery) DeleteAll",id:"func-serviceinstanceoperationquery-deleteall",children:[]},{value:"func (serviceInstanceOperationQuery) DeleteAllSlice",id:"func-serviceinstanceoperationquery-deleteallslice",children:[]},{value:"func (serviceInstanceOperationQuery) Exists",id:"func-serviceinstanceoperationquery-exists",children:[]},{value:"func (serviceInstanceOperationQuery) Insert",id:"func-serviceinstanceoperationquery-insert",children:[]},{value:"func (serviceInstanceOperationQuery) One",id:"func-serviceinstanceoperationquery-one",children:[]},{value:"func (serviceInstanceOperationQuery) Reload",id:"func-serviceinstanceoperationquery-reload",children:[]},{value:"func (serviceInstanceOperationQuery) ReloadAll",id:"func-serviceinstanceoperationquery-reloadall",children:[]},{value:"func (serviceInstanceOperationQuery) RemoveServiceInstance",id:"func-serviceinstanceoperationquery-removeserviceinstance",children:[]},{value:"func (serviceInstanceOperationQuery) ServiceInstance",id:"func-serviceinstanceoperationquery-serviceinstance",children:[]},{value:"func (serviceInstanceOperationQuery) SetServiceInstance",id:"func-serviceinstanceoperationquery-setserviceinstance",children:[]},{value:"func (serviceInstanceOperationQuery) Update",id:"func-serviceinstanceoperationquery-update",children:[]},{value:"func (serviceInstanceOperationQuery) UpdateAll",id:"func-serviceinstanceoperationquery-updateall",children:[]},{value:"func (serviceInstanceOperationQuery) UpdateAllSlice",id:"func-serviceinstanceoperationquery-updateallslice",children:[]},{value:"func (serviceInstanceOperationQuery) Upsert",id:"func-serviceinstanceoperationquery-upsert",children:[]}]},{value:"type serviceInstanceOperationR",id:"type-serviceinstanceoperationr",children:[{value:"func (*serviceInstanceOperationR) NewStruct",id:"func-serviceinstanceoperationr-newstruct",children:[]}]},{value:"type serviceInstanceQuery",id:"type-serviceinstancequery",children:[{value:"func ServiceInstances",id:"func-serviceinstances",children:[]},{value:"func (serviceInstanceQuery) AddResourceServiceInstanceAnnotations",id:"func-serviceinstancequery-addresourceserviceinstanceannotations",children:[]},{value:"func (serviceInstanceQuery) AddResourceServiceInstanceLabels",id:"func-serviceinstancequery-addresourceserviceinstancelabels",children:[]},{value:"func (serviceInstanceQuery) AddRouteBindings",id:"func-serviceinstancequery-addroutebindings",children:[]},{value:"func (serviceInstanceQuery) AddServiceBindings",id:"func-serviceinstancequery-addservicebindings",children:[]},{value:"func (serviceInstanceQuery) AddServiceInstanceOperations",id:"func-serviceinstancequery-addserviceinstanceoperations",children:[]},{value:"func (serviceInstanceQuery) AddServiceKeys",id:"func-serviceinstancequery-addservicekeys",children:[]},{value:"func (serviceInstanceQuery) AddSpaces",id:"func-serviceinstancequery-addspaces",children:[]},{value:"func (serviceInstanceQuery) All",id:"func-serviceinstancequery-all",children:[]},{value:"func (serviceInstanceQuery) Count",id:"func-serviceinstancequery-count",children:[]},{value:"func (serviceInstanceQuery) Delete",id:"func-serviceinstancequery-delete",children:[]},{value:"func (serviceInstanceQuery) DeleteAll",id:"func-serviceinstancequery-deleteall",children:[]},{value:"func (serviceInstanceQuery) DeleteAllSlice",id:"func-serviceinstancequery-deleteallslice",children:[]},{value:"func (serviceInstanceQuery) Exists",id:"func-serviceinstancequery-exists",children:[]},{value:"func (serviceInstanceQuery) Insert",id:"func-serviceinstancequery-insert",children:[]},{value:"func (serviceInstanceQuery) One",id:"func-serviceinstancequery-one",children:[]},{value:"func (serviceInstanceQuery) Reload",id:"func-serviceinstancequery-reload",children:[]},{value:"func (serviceInstanceQuery) ReloadAll",id:"func-serviceinstancequery-reloadall",children:[]},{value:"func (serviceInstanceQuery) RemoveResourceServiceInstanceAnnotations",id:"func-serviceinstancequery-removeresourceserviceinstanceannotations",children:[]},{value:"func (serviceInstanceQuery) RemoveResourceServiceInstanceLabels",id:"func-serviceinstancequery-removeresourceserviceinstancelabels",children:[]},{value:"func (serviceInstanceQuery) RemoveRouteBindings",id:"func-serviceinstancequery-removeroutebindings",children:[]},{value:"func (serviceInstanceQuery) RemoveServiceInstanceOperations",id:"func-serviceinstancequery-removeserviceinstanceoperations",children:[]},{value:"func (serviceInstanceQuery) RemoveServicePlan",id:"func-serviceinstancequery-removeserviceplan",children:[]},{value:"func (serviceInstanceQuery) RemoveSpaces",id:"func-serviceinstancequery-removespaces",children:[]},{value:"func (serviceInstanceQuery) ResourceServiceInstanceAnnotations",id:"func-serviceinstancequery-resourceserviceinstanceannotations",children:[]},{value:"func (serviceInstanceQuery) ResourceServiceInstanceLabels",id:"func-serviceinstancequery-resourceserviceinstancelabels",children:[]},{value:"func (serviceInstanceQuery) RouteBindings",id:"func-serviceinstancequery-routebindings",children:[]},{value:"func (serviceInstanceQuery) ServiceBindings",id:"func-serviceinstancequery-servicebindings",children:[]},{value:"func (serviceInstanceQuery) ServiceInstanceOperations",id:"func-serviceinstancequery-serviceinstanceoperations",children:[]},{value:"func (serviceInstanceQuery) ServiceKeys",id:"func-serviceinstancequery-servicekeys",children:[]},{value:"func (serviceInstanceQuery) ServicePlan",id:"func-serviceinstancequery-serviceplan",children:[]},{value:"func (serviceInstanceQuery) SetResourceServiceInstanceAnnotations",id:"func-serviceinstancequery-setresourceserviceinstanceannotations",children:[]},{value:"func (serviceInstanceQuery) SetResourceServiceInstanceLabels",id:"func-serviceinstancequery-setresourceserviceinstancelabels",children:[]},{value:"func (serviceInstanceQuery) SetRouteBindings",id:"func-serviceinstancequery-setroutebindings",children:[]},{value:"func (serviceInstanceQuery) SetServiceInstanceOperations",id:"func-serviceinstancequery-setserviceinstanceoperations",children:[]},{value:"func (serviceInstanceQuery) SetServicePlan",id:"func-serviceinstancequery-setserviceplan",children:[]},{value:"func (serviceInstanceQuery) SetSpace",id:"func-serviceinstancequery-setspace",children:[]},{value:"func (serviceInstanceQuery) SetSpaces",id:"func-serviceinstancequery-setspaces",children:[]},{value:"func (serviceInstanceQuery) Space",id:"func-serviceinstancequery-space",children:[]},{value:"func (serviceInstanceQuery) Spaces",id:"func-serviceinstancequery-spaces",children:[]},{value:"func (serviceInstanceQuery) Update",id:"func-serviceinstancequery-update",children:[]},{value:"func (serviceInstanceQuery) UpdateAll",id:"func-serviceinstancequery-updateall",children:[]},{value:"func (serviceInstanceQuery) UpdateAllSlice",id:"func-serviceinstancequery-updateallslice",children:[]},{value:"func (serviceInstanceQuery) Upsert",id:"func-serviceinstancequery-upsert",children:[]}]},{value:"type serviceInstanceR",id:"type-serviceinstancer",children:[{value:"func (*serviceInstanceR) NewStruct",id:"func-serviceinstancer-newstruct",children:[]}]},{value:"type serviceKeyAnnotationL",id:"type-servicekeyannotationl",children:[{value:"func (serviceKeyAnnotationL) LoadResource",id:"func-servicekeyannotationl-loadresource",children:[]}]},{value:"type serviceKeyAnnotationQuery",id:"type-servicekeyannotationquery",children:[{value:"func ServiceKeyAnnotations",id:"func-servicekeyannotations",children:[]},{value:"func (serviceKeyAnnotationQuery) All",id:"func-servicekeyannotationquery-all",children:[]},{value:"func (serviceKeyAnnotationQuery) Count",id:"func-servicekeyannotationquery-count",children:[]},{value:"func (serviceKeyAnnotationQuery) Delete",id:"func-servicekeyannotationquery-delete",children:[]},{value:"func (serviceKeyAnnotationQuery) DeleteAll",id:"func-servicekeyannotationquery-deleteall",children:[]},{value:"func (serviceKeyAnnotationQuery) DeleteAllSlice",id:"func-servicekeyannotationquery-deleteallslice",children:[]},{value:"func (serviceKeyAnnotationQuery) Exists",id:"func-servicekeyannotationquery-exists",children:[]},{value:"func (serviceKeyAnnotationQuery) Insert",id:"func-servicekeyannotationquery-insert",children:[]},{value:"func (serviceKeyAnnotationQuery) One",id:"func-servicekeyannotationquery-one",children:[]},{value:"func (serviceKeyAnnotationQuery) Reload",id:"func-servicekeyannotationquery-reload",children:[]},{value:"func (serviceKeyAnnotationQuery) ReloadAll",id:"func-servicekeyannotationquery-reloadall",children:[]},{value:"func (serviceKeyAnnotationQuery) RemoveResource",id:"func-servicekeyannotationquery-removeresource",children:[]},{value:"func (serviceKeyAnnotationQuery) Resource",id:"func-servicekeyannotationquery-resource",children:[]},{value:"func (serviceKeyAnnotationQuery) SetResource",id:"func-servicekeyannotationquery-setresource",children:[]},{value:"func (serviceKeyAnnotationQuery) Update",id:"func-servicekeyannotationquery-update",children:[]},{value:"func (serviceKeyAnnotationQuery) UpdateAll",id:"func-servicekeyannotationquery-updateall",children:[]},{value:"func (serviceKeyAnnotationQuery) UpdateAllSlice",id:"func-servicekeyannotationquery-updateallslice",children:[]},{value:"func (serviceKeyAnnotationQuery) Upsert",id:"func-servicekeyannotationquery-upsert",children:[]}]},{value:"type serviceKeyAnnotationR",id:"type-servicekeyannotationr",children:[{value:"func (*serviceKeyAnnotationR) NewStruct",id:"func-servicekeyannotationr-newstruct",children:[]}]},{value:"type serviceKeyL",id:"type-servicekeyl",children:[{value:"func (serviceKeyL) LoadResourceServiceKeyAnnotations",id:"func-servicekeyl-loadresourceservicekeyannotations",children:[]},{value:"func (serviceKeyL) LoadResourceServiceKeyLabels",id:"func-servicekeyl-loadresourceservicekeylabels",children:[]},{value:"func (serviceKeyL) LoadServiceInstance",id:"func-servicekeyl-loadserviceinstance",children:[]},{value:"func (serviceKeyL) LoadServiceKeyOperation",id:"func-servicekeyl-loadservicekeyoperation",children:[]}]},{value:"type serviceKeyLabelL",id:"type-servicekeylabell",children:[{value:"func (serviceKeyLabelL) LoadResource",id:"func-servicekeylabell-loadresource",children:[]}]},{value:"type serviceKeyLabelQuery",id:"type-servicekeylabelquery",children:[{value:"func ServiceKeyLabels",id:"func-servicekeylabels",children:[]},{value:"func (serviceKeyLabelQuery) All",id:"func-servicekeylabelquery-all",children:[]},{value:"func (serviceKeyLabelQuery) Count",id:"func-servicekeylabelquery-count",children:[]},{value:"func (serviceKeyLabelQuery) Delete",id:"func-servicekeylabelquery-delete",children:[]},{value:"func (serviceKeyLabelQuery) DeleteAll",id:"func-servicekeylabelquery-deleteall",children:[]},{value:"func (serviceKeyLabelQuery) DeleteAllSlice",id:"func-servicekeylabelquery-deleteallslice",children:[]},{value:"func (serviceKeyLabelQuery) Exists",id:"func-servicekeylabelquery-exists",children:[]},{value:"func (serviceKeyLabelQuery) Insert",id:"func-servicekeylabelquery-insert",children:[]},{value:"func (serviceKeyLabelQuery) One",id:"func-servicekeylabelquery-one",children:[]},{value:"func (serviceKeyLabelQuery) Reload",id:"func-servicekeylabelquery-reload",children:[]},{value:"func (serviceKeyLabelQuery) ReloadAll",id:"func-servicekeylabelquery-reloadall",children:[]},{value:"func (serviceKeyLabelQuery) RemoveResource",id:"func-servicekeylabelquery-removeresource",children:[]},{value:"func (serviceKeyLabelQuery) Resource",id:"func-servicekeylabelquery-resource",children:[]},{value:"func (serviceKeyLabelQuery) SetResource",id:"func-servicekeylabelquery-setresource",children:[]},{value:"func (serviceKeyLabelQuery) Update",id:"func-servicekeylabelquery-update",children:[]},{value:"func (serviceKeyLabelQuery) UpdateAll",id:"func-servicekeylabelquery-updateall",children:[]},{value:"func (serviceKeyLabelQuery) UpdateAllSlice",id:"func-servicekeylabelquery-updateallslice",children:[]},{value:"func (serviceKeyLabelQuery) Upsert",id:"func-servicekeylabelquery-upsert",children:[]}]},{value:"type serviceKeyLabelR",id:"type-servicekeylabelr",children:[{value:"func (*serviceKeyLabelR) NewStruct",id:"func-servicekeylabelr-newstruct",children:[]}]},{value:"type serviceKeyOperationL",id:"type-servicekeyoperationl",children:[{value:"func (serviceKeyOperationL) LoadServiceKey",id:"func-servicekeyoperationl-loadservicekey",children:[]}]},{value:"type serviceKeyOperationQuery",id:"type-servicekeyoperationquery",children:[{value:"func ServiceKeyOperations",id:"func-servicekeyoperations",children:[]},{value:"func (serviceKeyOperationQuery) All",id:"func-servicekeyoperationquery-all",children:[]},{value:"func (serviceKeyOperationQuery) Count",id:"func-servicekeyoperationquery-count",children:[]},{value:"func (serviceKeyOperationQuery) Delete",id:"func-servicekeyoperationquery-delete",children:[]},{value:"func (serviceKeyOperationQuery) DeleteAll",id:"func-servicekeyoperationquery-deleteall",children:[]},{value:"func (serviceKeyOperationQuery) DeleteAllSlice",id:"func-servicekeyoperationquery-deleteallslice",children:[]},{value:"func (serviceKeyOperationQuery) Exists",id:"func-servicekeyoperationquery-exists",children:[]},{value:"func (serviceKeyOperationQuery) Insert",id:"func-servicekeyoperationquery-insert",children:[]},{value:"func (serviceKeyOperationQuery) One",id:"func-servicekeyoperationquery-one",children:[]},{value:"func (serviceKeyOperationQuery) Reload",id:"func-servicekeyoperationquery-reload",children:[]},{value:"func (serviceKeyOperationQuery) ReloadAll",id:"func-servicekeyoperationquery-reloadall",children:[]},{value:"func (serviceKeyOperationQuery) RemoveServiceKey",id:"func-servicekeyoperationquery-removeservicekey",children:[]},{value:"func (serviceKeyOperationQuery) ServiceKey",id:"func-servicekeyoperationquery-servicekey",children:[]},{value:"func (serviceKeyOperationQuery) SetServiceKey",id:"func-servicekeyoperationquery-setservicekey",children:[]},{value:"func (serviceKeyOperationQuery) Update",id:"func-servicekeyoperationquery-update",children:[]},{value:"func (serviceKeyOperationQuery) UpdateAll",id:"func-servicekeyoperationquery-updateall",children:[]},{value:"func (serviceKeyOperationQuery) UpdateAllSlice",id:"func-servicekeyoperationquery-updateallslice",children:[]},{value:"func (serviceKeyOperationQuery) Upsert",id:"func-servicekeyoperationquery-upsert",children:[]}]},{value:"type serviceKeyOperationR",id:"type-servicekeyoperationr",children:[{value:"func (*serviceKeyOperationR) NewStruct",id:"func-servicekeyoperationr-newstruct",children:[]}]},{value:"type serviceKeyQuery",id:"type-servicekeyquery",children:[{value:"func ServiceKeys",id:"func-servicekeys",children:[]},{value:"func (serviceKeyQuery) AddResourceServiceKeyAnnotations",id:"func-servicekeyquery-addresourceservicekeyannotations",children:[]},{value:"func (serviceKeyQuery) AddResourceServiceKeyLabels",id:"func-servicekeyquery-addresourceservicekeylabels",children:[]},{value:"func (serviceKeyQuery) All",id:"func-servicekeyquery-all",children:[]},{value:"func (serviceKeyQuery) Count",id:"func-servicekeyquery-count",children:[]},{value:"func (serviceKeyQuery) Delete",id:"func-servicekeyquery-delete",children:[]},{value:"func (serviceKeyQuery) DeleteAll",id:"func-servicekeyquery-deleteall",children:[]},{value:"func (serviceKeyQuery) DeleteAllSlice",id:"func-servicekeyquery-deleteallslice",children:[]},{value:"func (serviceKeyQuery) Exists",id:"func-servicekeyquery-exists",children:[]},{value:"func (serviceKeyQuery) Insert",id:"func-servicekeyquery-insert",children:[]},{value:"func (serviceKeyQuery) One",id:"func-servicekeyquery-one",children:[]},{value:"func (serviceKeyQuery) Reload",id:"func-servicekeyquery-reload",children:[]},{value:"func (serviceKeyQuery) ReloadAll",id:"func-servicekeyquery-reloadall",children:[]},{value:"func (serviceKeyQuery) RemoveResourceServiceKeyAnnotations",id:"func-servicekeyquery-removeresourceservicekeyannotations",children:[]},{value:"func (serviceKeyQuery) RemoveResourceServiceKeyLabels",id:"func-servicekeyquery-removeresourceservicekeylabels",children:[]},{value:"func (serviceKeyQuery) RemoveServiceKeyOperation",id:"func-servicekeyquery-removeservicekeyoperation",children:[]},{value:"func (serviceKeyQuery) ResourceServiceKeyAnnotations",id:"func-servicekeyquery-resourceservicekeyannotations",children:[]},{value:"func (serviceKeyQuery) ResourceServiceKeyLabels",id:"func-servicekeyquery-resourceservicekeylabels",children:[]},{value:"func (serviceKeyQuery) ServiceInstance",id:"func-servicekeyquery-serviceinstance",children:[]},{value:"func (serviceKeyQuery) ServiceKeyOperation",id:"func-servicekeyquery-servicekeyoperation",children:[]},{value:"func (serviceKeyQuery) SetResourceServiceKeyAnnotations",id:"func-servicekeyquery-setresourceservicekeyannotations",children:[]},{value:"func (serviceKeyQuery) SetResourceServiceKeyLabels",id:"func-servicekeyquery-setresourceservicekeylabels",children:[]},{value:"func (serviceKeyQuery) SetServiceInstance",id:"func-servicekeyquery-setserviceinstance",children:[]},{value:"func (serviceKeyQuery) SetServiceKeyOperation",id:"func-servicekeyquery-setservicekeyoperation",children:[]},{value:"func (serviceKeyQuery) Update",id:"func-servicekeyquery-update",children:[]},{value:"func (serviceKeyQuery) UpdateAll",id:"func-servicekeyquery-updateall",children:[]},{value:"func (serviceKeyQuery) UpdateAllSlice",id:"func-servicekeyquery-updateallslice",children:[]},{value:"func (serviceKeyQuery) Upsert",id:"func-servicekeyquery-upsert",children:[]}]},{value:"type serviceKeyR",id:"type-servicekeyr",children:[{value:"func (*serviceKeyR) NewStruct",id:"func-servicekeyr-newstruct",children:[]}]},{value:"type serviceL",id:"type-servicel",children:[{value:"func (serviceL) LoadResourceServiceOfferingAnnotations",id:"func-servicel-loadresourceserviceofferingannotations",children:[]},{value:"func (serviceL) LoadResourceServiceOfferingLabels",id:"func-servicel-loadresourceserviceofferinglabels",children:[]},{value:"func (serviceL) LoadServiceBroker",id:"func-servicel-loadservicebroker",children:[]},{value:"func (serviceL) LoadServicePlans",id:"func-servicel-loadserviceplans",children:[]}]},{value:"type serviceOfferingAnnotationL",id:"type-serviceofferingannotationl",children:[{value:"func (serviceOfferingAnnotationL) LoadResource",id:"func-serviceofferingannotationl-loadresource",children:[]}]},{value:"type serviceOfferingAnnotationQuery",id:"type-serviceofferingannotationquery",children:[{value:"func ServiceOfferingAnnotations",id:"func-serviceofferingannotations",children:[]},{value:"func (serviceOfferingAnnotationQuery) All",id:"func-serviceofferingannotationquery-all",children:[]},{value:"func (serviceOfferingAnnotationQuery) Count",id:"func-serviceofferingannotationquery-count",children:[]},{value:"func (serviceOfferingAnnotationQuery) Delete",id:"func-serviceofferingannotationquery-delete",children:[]},{value:"func (serviceOfferingAnnotationQuery) DeleteAll",id:"func-serviceofferingannotationquery-deleteall",children:[]},{value:"func (serviceOfferingAnnotationQuery) DeleteAllSlice",id:"func-serviceofferingannotationquery-deleteallslice",children:[]},{value:"func (serviceOfferingAnnotationQuery) Exists",id:"func-serviceofferingannotationquery-exists",children:[]},{value:"func (serviceOfferingAnnotationQuery) Insert",id:"func-serviceofferingannotationquery-insert",children:[]},{value:"func (serviceOfferingAnnotationQuery) One",id:"func-serviceofferingannotationquery-one",children:[]},{value:"func (serviceOfferingAnnotationQuery) Reload",id:"func-serviceofferingannotationquery-reload",children:[]},{value:"func (serviceOfferingAnnotationQuery) ReloadAll",id:"func-serviceofferingannotationquery-reloadall",children:[]},{value:"func (serviceOfferingAnnotationQuery) RemoveResource",id:"func-serviceofferingannotationquery-removeresource",children:[]},{value:"func (serviceOfferingAnnotationQuery) Resource",id:"func-serviceofferingannotationquery-resource",children:[]},{value:"func (serviceOfferingAnnotationQuery) SetResource",id:"func-serviceofferingannotationquery-setresource",children:[]},{value:"func (serviceOfferingAnnotationQuery) Update",id:"func-serviceofferingannotationquery-update",children:[]},{value:"func (serviceOfferingAnnotationQuery) UpdateAll",id:"func-serviceofferingannotationquery-updateall",children:[]},{value:"func (serviceOfferingAnnotationQuery) UpdateAllSlice",id:"func-serviceofferingannotationquery-updateallslice",children:[]},{value:"func (serviceOfferingAnnotationQuery) Upsert",id:"func-serviceofferingannotationquery-upsert",children:[]}]},{value:"type serviceOfferingAnnotationR",id:"type-serviceofferingannotationr",children:[{value:"func (*serviceOfferingAnnotationR) NewStruct",id:"func-serviceofferingannotationr-newstruct",children:[]}]},{value:"type serviceOfferingLabelL",id:"type-serviceofferinglabell",children:[{value:"func (serviceOfferingLabelL) LoadResource",id:"func-serviceofferinglabell-loadresource",children:[]}]},{value:"type serviceOfferingLabelQuery",id:"type-serviceofferinglabelquery",children:[{value:"func ServiceOfferingLabels",id:"func-serviceofferinglabels",children:[]},{value:"func (serviceOfferingLabelQuery) All",id:"func-serviceofferinglabelquery-all",children:[]},{value:"func (serviceOfferingLabelQuery) Count",id:"func-serviceofferinglabelquery-count",children:[]},{value:"func (serviceOfferingLabelQuery) Delete",id:"func-serviceofferinglabelquery-delete",children:[]},{value:"func (serviceOfferingLabelQuery) DeleteAll",id:"func-serviceofferinglabelquery-deleteall",children:[]},{value:"func (serviceOfferingLabelQuery) DeleteAllSlice",id:"func-serviceofferinglabelquery-deleteallslice",children:[]},{value:"func (serviceOfferingLabelQuery) Exists",id:"func-serviceofferinglabelquery-exists",children:[]},{value:"func (serviceOfferingLabelQuery) Insert",id:"func-serviceofferinglabelquery-insert",children:[]},{value:"func (serviceOfferingLabelQuery) One",id:"func-serviceofferinglabelquery-one",children:[]},{value:"func (serviceOfferingLabelQuery) Reload",id:"func-serviceofferinglabelquery-reload",children:[]},{value:"func (serviceOfferingLabelQuery) ReloadAll",id:"func-serviceofferinglabelquery-reloadall",children:[]},{value:"func (serviceOfferingLabelQuery) RemoveResource",id:"func-serviceofferinglabelquery-removeresource",children:[]},{value:"func (serviceOfferingLabelQuery) Resource",id:"func-serviceofferinglabelquery-resource",children:[]},{value:"func (serviceOfferingLabelQuery) SetResource",id:"func-serviceofferinglabelquery-setresource",children:[]},{value:"func (serviceOfferingLabelQuery) Update",id:"func-serviceofferinglabelquery-update",children:[]},{value:"func (serviceOfferingLabelQuery) UpdateAll",id:"func-serviceofferinglabelquery-updateall",children:[]},{value:"func (serviceOfferingLabelQuery) UpdateAllSlice",id:"func-serviceofferinglabelquery-updateallslice",children:[]},{value:"func (serviceOfferingLabelQuery) Upsert",id:"func-serviceofferinglabelquery-upsert",children:[]}]},{value:"type serviceOfferingLabelR",id:"type-serviceofferinglabelr",children:[{value:"func (*serviceOfferingLabelR) NewStruct",id:"func-serviceofferinglabelr-newstruct",children:[]}]},{value:"type servicePlanAnnotationL",id:"type-serviceplanannotationl",children:[{value:"func (servicePlanAnnotationL) LoadResource",id:"func-serviceplanannotationl-loadresource",children:[]}]},{value:"type servicePlanAnnotationQuery",id:"type-serviceplanannotationquery",children:[{value:"func ServicePlanAnnotations",id:"func-serviceplanannotations",children:[]},{value:"func (servicePlanAnnotationQuery) All",id:"func-serviceplanannotationquery-all",children:[]},{value:"func (servicePlanAnnotationQuery) Count",id:"func-serviceplanannotationquery-count",children:[]},{value:"func (servicePlanAnnotationQuery) Delete",id:"func-serviceplanannotationquery-delete",children:[]},{value:"func (servicePlanAnnotationQuery) DeleteAll",id:"func-serviceplanannotationquery-deleteall",children:[]},{value:"func (servicePlanAnnotationQuery) DeleteAllSlice",id:"func-serviceplanannotationquery-deleteallslice",children:[]},{value:"func (servicePlanAnnotationQuery) Exists",id:"func-serviceplanannotationquery-exists",children:[]},{value:"func (servicePlanAnnotationQuery) Insert",id:"func-serviceplanannotationquery-insert",children:[]},{value:"func (servicePlanAnnotationQuery) One",id:"func-serviceplanannotationquery-one",children:[]},{value:"func (servicePlanAnnotationQuery) Reload",id:"func-serviceplanannotationquery-reload",children:[]},{value:"func (servicePlanAnnotationQuery) ReloadAll",id:"func-serviceplanannotationquery-reloadall",children:[]},{value:"func (servicePlanAnnotationQuery) RemoveResource",id:"func-serviceplanannotationquery-removeresource",children:[]},{value:"func (servicePlanAnnotationQuery) Resource",id:"func-serviceplanannotationquery-resource",children:[]},{value:"func (servicePlanAnnotationQuery) SetResource",id:"func-serviceplanannotationquery-setresource",children:[]},{value:"func (servicePlanAnnotationQuery) Update",id:"func-serviceplanannotationquery-update",children:[]},{value:"func (servicePlanAnnotationQuery) UpdateAll",id:"func-serviceplanannotationquery-updateall",children:[]},{value:"func (servicePlanAnnotationQuery) UpdateAllSlice",id:"func-serviceplanannotationquery-updateallslice",children:[]},{value:"func (servicePlanAnnotationQuery) Upsert",id:"func-serviceplanannotationquery-upsert",children:[]}]},{value:"type servicePlanAnnotationR",id:"type-serviceplanannotationr",children:[{value:"func (*servicePlanAnnotationR) NewStruct",id:"func-serviceplanannotationr-newstruct",children:[]}]},{value:"type servicePlanL",id:"type-serviceplanl",children:[{value:"func (servicePlanL) LoadResourceServicePlanAnnotations",id:"func-serviceplanl-loadresourceserviceplanannotations",children:[]},{value:"func (servicePlanL) LoadResourceServicePlanLabels",id:"func-serviceplanl-loadresourceserviceplanlabels",children:[]},{value:"func (servicePlanL) LoadService",id:"func-serviceplanl-loadservice",children:[]},{value:"func (servicePlanL) LoadServiceInstances",id:"func-serviceplanl-loadserviceinstances",children:[]},{value:"func (servicePlanL) LoadServicePlanVisibilities",id:"func-serviceplanl-loadserviceplanvisibilities",children:[]}]},{value:"type servicePlanLabelL",id:"type-serviceplanlabell",children:[{value:"func (servicePlanLabelL) LoadResource",id:"func-serviceplanlabell-loadresource",children:[]}]},{value:"type servicePlanLabelQuery",id:"type-serviceplanlabelquery",children:[{value:"func ServicePlanLabels",id:"func-serviceplanlabels",children:[]},{value:"func (servicePlanLabelQuery) All",id:"func-serviceplanlabelquery-all",children:[]},{value:"func (servicePlanLabelQuery) Count",id:"func-serviceplanlabelquery-count",children:[]},{value:"func (servicePlanLabelQuery) Delete",id:"func-serviceplanlabelquery-delete",children:[]},{value:"func (servicePlanLabelQuery) DeleteAll",id:"func-serviceplanlabelquery-deleteall",children:[]},{value:"func (servicePlanLabelQuery) DeleteAllSlice",id:"func-serviceplanlabelquery-deleteallslice",children:[]},{value:"func (servicePlanLabelQuery) Exists",id:"func-serviceplanlabelquery-exists",children:[]},{value:"func (servicePlanLabelQuery) Insert",id:"func-serviceplanlabelquery-insert",children:[]},{value:"func (servicePlanLabelQuery) One",id:"func-serviceplanlabelquery-one",children:[]},{value:"func (servicePlanLabelQuery) Reload",id:"func-serviceplanlabelquery-reload",children:[]},{value:"func (servicePlanLabelQuery) ReloadAll",id:"func-serviceplanlabelquery-reloadall",children:[]},{value:"func (servicePlanLabelQuery) RemoveResource",id:"func-serviceplanlabelquery-removeresource",children:[]},{value:"func (servicePlanLabelQuery) Resource",id:"func-serviceplanlabelquery-resource",children:[]},{value:"func (servicePlanLabelQuery) SetResource",id:"func-serviceplanlabelquery-setresource",children:[]},{value:"func (servicePlanLabelQuery) Update",id:"func-serviceplanlabelquery-update",children:[]},{value:"func (servicePlanLabelQuery) UpdateAll",id:"func-serviceplanlabelquery-updateall",children:[]},{value:"func (servicePlanLabelQuery) UpdateAllSlice",id:"func-serviceplanlabelquery-updateallslice",children:[]},{value:"func (servicePlanLabelQuery) Upsert",id:"func-serviceplanlabelquery-upsert",children:[]}]},{value:"type servicePlanLabelR",id:"type-serviceplanlabelr",children:[{value:"func (*servicePlanLabelR) NewStruct",id:"func-serviceplanlabelr-newstruct",children:[]}]},{value:"type servicePlanQuery",id:"type-serviceplanquery",children:[{value:"func ServicePlans",id:"func-serviceplans",children:[]},{value:"func (servicePlanQuery) AddResourceServicePlanAnnotations",id:"func-serviceplanquery-addresourceserviceplanannotations",children:[]},{value:"func (servicePlanQuery) AddResourceServicePlanLabels",id:"func-serviceplanquery-addresourceserviceplanlabels",children:[]},{value:"func (servicePlanQuery) AddServiceInstances",id:"func-serviceplanquery-addserviceinstances",children:[]},{value:"func (servicePlanQuery) AddServicePlanVisibilities",id:"func-serviceplanquery-addserviceplanvisibilities",children:[]},{value:"func (servicePlanQuery) All",id:"func-serviceplanquery-all",children:[]},{value:"func (servicePlanQuery) Count",id:"func-serviceplanquery-count",children:[]},{value:"func (servicePlanQuery) Delete",id:"func-serviceplanquery-delete",children:[]},{value:"func (servicePlanQuery) DeleteAll",id:"func-serviceplanquery-deleteall",children:[]},{value:"func (servicePlanQuery) DeleteAllSlice",id:"func-serviceplanquery-deleteallslice",children:[]},{value:"func (servicePlanQuery) Exists",id:"func-serviceplanquery-exists",children:[]},{value:"func (servicePlanQuery) Insert",id:"func-serviceplanquery-insert",children:[]},{value:"func (servicePlanQuery) One",id:"func-serviceplanquery-one",children:[]},{value:"func (servicePlanQuery) Reload",id:"func-serviceplanquery-reload",children:[]},{value:"func (servicePlanQuery) ReloadAll",id:"func-serviceplanquery-reloadall",children:[]},{value:"func (servicePlanQuery) RemoveResourceServicePlanAnnotations",id:"func-serviceplanquery-removeresourceserviceplanannotations",children:[]},{value:"func (servicePlanQuery) RemoveResourceServicePlanLabels",id:"func-serviceplanquery-removeresourceserviceplanlabels",children:[]},{value:"func (servicePlanQuery) RemoveServiceInstances",id:"func-serviceplanquery-removeserviceinstances",children:[]},{value:"func (servicePlanQuery) ResourceServicePlanAnnotations",id:"func-serviceplanquery-resourceserviceplanannotations",children:[]},{value:"func (servicePlanQuery) ResourceServicePlanLabels",id:"func-serviceplanquery-resourceserviceplanlabels",children:[]},{value:"func (servicePlanQuery) Service",id:"func-serviceplanquery-service",children:[]},{value:"func (servicePlanQuery) ServiceInstances",id:"func-serviceplanquery-serviceinstances",children:[]},{value:"func (servicePlanQuery) ServicePlanVisibilities",id:"func-serviceplanquery-serviceplanvisibilities",children:[]},{value:"func (servicePlanQuery) SetResourceServicePlanAnnotations",id:"func-serviceplanquery-setresourceserviceplanannotations",children:[]},{value:"func (servicePlanQuery) SetResourceServicePlanLabels",id:"func-serviceplanquery-setresourceserviceplanlabels",children:[]},{value:"func (servicePlanQuery) SetService",id:"func-serviceplanquery-setservice",children:[]},{value:"func (servicePlanQuery) SetServiceInstances",id:"func-serviceplanquery-setserviceinstances",children:[]},{value:"func (servicePlanQuery) Update",id:"func-serviceplanquery-update",children:[]},{value:"func (servicePlanQuery) UpdateAll",id:"func-serviceplanquery-updateall",children:[]},{value:"func (servicePlanQuery) UpdateAllSlice",id:"func-serviceplanquery-updateallslice",children:[]},{value:"func (servicePlanQuery) Upsert",id:"func-serviceplanquery-upsert",children:[]}]},{value:"type servicePlanR",id:"type-serviceplanr",children:[{value:"func (*servicePlanR) NewStruct",id:"func-serviceplanr-newstruct",children:[]}]},{value:"type servicePlanVisibilityL",id:"type-serviceplanvisibilityl",children:[{value:"func (servicePlanVisibilityL) LoadOrganization",id:"func-serviceplanvisibilityl-loadorganization",children:[]},{value:"func (servicePlanVisibilityL) LoadServicePlan",id:"func-serviceplanvisibilityl-loadserviceplan",children:[]}]},{value:"type servicePlanVisibilityQuery",id:"type-serviceplanvisibilityquery",children:[{value:"func ServicePlanVisibilities",id:"func-serviceplanvisibilities",children:[]},{value:"func (servicePlanVisibilityQuery) All",id:"func-serviceplanvisibilityquery-all",children:[]},{value:"func (servicePlanVisibilityQuery) Count",id:"func-serviceplanvisibilityquery-count",children:[]},{value:"func (servicePlanVisibilityQuery) Delete",id:"func-serviceplanvisibilityquery-delete",children:[]},{value:"func (servicePlanVisibilityQuery) DeleteAll",id:"func-serviceplanvisibilityquery-deleteall",children:[]},{value:"func (servicePlanVisibilityQuery) DeleteAllSlice",id:"func-serviceplanvisibilityquery-deleteallslice",children:[]},{value:"func (servicePlanVisibilityQuery) Exists",id:"func-serviceplanvisibilityquery-exists",children:[]},{value:"func (servicePlanVisibilityQuery) Insert",id:"func-serviceplanvisibilityquery-insert",children:[]},{value:"func (servicePlanVisibilityQuery) One",id:"func-serviceplanvisibilityquery-one",children:[]},{value:"func (servicePlanVisibilityQuery) Organization",id:"func-serviceplanvisibilityquery-organization",children:[]},{value:"func (servicePlanVisibilityQuery) Reload",id:"func-serviceplanvisibilityquery-reload",children:[]},{value:"func (servicePlanVisibilityQuery) ReloadAll",id:"func-serviceplanvisibilityquery-reloadall",children:[]},{value:"func (servicePlanVisibilityQuery) ServicePlan",id:"func-serviceplanvisibilityquery-serviceplan",children:[]},{value:"func (servicePlanVisibilityQuery) SetOrganization",id:"func-serviceplanvisibilityquery-setorganization",children:[]},{value:"func (servicePlanVisibilityQuery) SetServicePlan",id:"func-serviceplanvisibilityquery-setserviceplan",children:[]},{value:"func (servicePlanVisibilityQuery) Update",id:"func-serviceplanvisibilityquery-update",children:[]},{value:"func (servicePlanVisibilityQuery) UpdateAll",id:"func-serviceplanvisibilityquery-updateall",children:[]},{value:"func (servicePlanVisibilityQuery) UpdateAllSlice",id:"func-serviceplanvisibilityquery-updateallslice",children:[]},{value:"func (servicePlanVisibilityQuery) Upsert",id:"func-serviceplanvisibilityquery-upsert",children:[]}]},{value:"type servicePlanVisibilityR",id:"type-serviceplanvisibilityr",children:[{value:"func (*servicePlanVisibilityR) NewStruct",id:"func-serviceplanvisibilityr-newstruct",children:[]}]},{value:"type serviceQuery",id:"type-servicequery",children:[{value:"func Services",id:"func-services",children:[]},{value:"func (serviceQuery) AddResourceServiceOfferingAnnotations",id:"func-servicequery-addresourceserviceofferingannotations",children:[]},{value:"func (serviceQuery) AddResourceServiceOfferingLabels",id:"func-servicequery-addresourceserviceofferinglabels",children:[]},{value:"func (serviceQuery) AddServicePlans",id:"func-servicequery-addserviceplans",children:[]},{value:"func (serviceQuery) All",id:"func-servicequery-all",children:[]},{value:"func (serviceQuery) Count",id:"func-servicequery-count",children:[]},{value:"func (serviceQuery) Delete",id:"func-servicequery-delete",children:[]},{value:"func (serviceQuery) DeleteAll",id:"func-servicequery-deleteall",children:[]},{value:"func (serviceQuery) DeleteAllSlice",id:"func-servicequery-deleteallslice",children:[]},{value:"func (serviceQuery) Exists",id:"func-servicequery-exists",children:[]},{value:"func (serviceQuery) Insert",id:"func-servicequery-insert",children:[]},{value:"func (serviceQuery) One",id:"func-servicequery-one",children:[]},{value:"func (serviceQuery) Reload",id:"func-servicequery-reload",children:[]},{value:"func (serviceQuery) ReloadAll",id:"func-servicequery-reloadall",children:[]},{value:"func (serviceQuery) RemoveResourceServiceOfferingAnnotations",id:"func-servicequery-removeresourceserviceofferingannotations",children:[]},{value:"func (serviceQuery) RemoveResourceServiceOfferingLabels",id:"func-servicequery-removeresourceserviceofferinglabels",children:[]},{value:"func (serviceQuery) RemoveServiceBroker",id:"func-servicequery-removeservicebroker",children:[]},{value:"func (serviceQuery) ResourceServiceOfferingAnnotations",id:"func-servicequery-resourceserviceofferingannotations",children:[]},{value:"func (serviceQuery) ResourceServiceOfferingLabels",id:"func-servicequery-resourceserviceofferinglabels",children:[]},{value:"func (serviceQuery) ServiceBroker",id:"func-servicequery-servicebroker",children:[]},{value:"func (serviceQuery) ServicePlans",id:"func-servicequery-serviceplans",children:[]},{value:"func (serviceQuery) SetResourceServiceOfferingAnnotations",id:"func-servicequery-setresourceserviceofferingannotations",children:[]},{value:"func (serviceQuery) SetResourceServiceOfferingLabels",id:"func-servicequery-setresourceserviceofferinglabels",children:[]},{value:"func (serviceQuery) SetServiceBroker",id:"func-servicequery-setservicebroker",children:[]},{value:"func (serviceQuery) Update",id:"func-servicequery-update",children:[]},{value:"func (serviceQuery) UpdateAll",id:"func-servicequery-updateall",children:[]},{value:"func (serviceQuery) UpdateAllSlice",id:"func-servicequery-updateallslice",children:[]},{value:"func (serviceQuery) Upsert",id:"func-servicequery-upsert",children:[]}]},{value:"type serviceR",id:"type-servicer",children:[{value:"func (*serviceR) NewStruct",id:"func-servicer-newstruct",children:[]}]},{value:"type serviceUsageEventL",id:"type-serviceusageeventl",children:[]},{value:"type serviceUsageEventQuery",id:"type-serviceusageeventquery",children:[{value:"func ServiceUsageEvents",id:"func-serviceusageevents",children:[]},{value:"func (serviceUsageEventQuery) All",id:"func-serviceusageeventquery-all",children:[]},{value:"func (serviceUsageEventQuery) Count",id:"func-serviceusageeventquery-count",children:[]},{value:"func (serviceUsageEventQuery) Delete",id:"func-serviceusageeventquery-delete",children:[]},{value:"func (serviceUsageEventQuery) DeleteAll",id:"func-serviceusageeventquery-deleteall",children:[]},{value:"func (serviceUsageEventQuery) DeleteAllSlice",id:"func-serviceusageeventquery-deleteallslice",children:[]},{value:"func (serviceUsageEventQuery) Exists",id:"func-serviceusageeventquery-exists",children:[]},{value:"func (serviceUsageEventQuery) Insert",id:"func-serviceusageeventquery-insert",children:[]},{value:"func (serviceUsageEventQuery) One",id:"func-serviceusageeventquery-one",children:[]},{value:"func (serviceUsageEventQuery) Reload",id:"func-serviceusageeventquery-reload",children:[]},{value:"func (serviceUsageEventQuery) ReloadAll",id:"func-serviceusageeventquery-reloadall",children:[]},{value:"func (serviceUsageEventQuery) Update",id:"func-serviceusageeventquery-update",children:[]},{value:"func (serviceUsageEventQuery) UpdateAll",id:"func-serviceusageeventquery-updateall",children:[]},{value:"func (serviceUsageEventQuery) UpdateAllSlice",id:"func-serviceusageeventquery-updateallslice",children:[]},{value:"func (serviceUsageEventQuery) Upsert",id:"func-serviceusageeventquery-upsert",children:[]}]},{value:"type serviceUsageEventR",id:"type-serviceusageeventr",children:[{value:"func (*serviceUsageEventR) NewStruct",id:"func-serviceusageeventr-newstruct",children:[]}]},{value:"type sidecarL",id:"type-sidecarl",children:[{value:"func (sidecarL) LoadApp",id:"func-sidecarl-loadapp",children:[]},{value:"func (sidecarL) LoadSidecarProcessTypes",id:"func-sidecarl-loadsidecarprocesstypes",children:[]}]},{value:"type sidecarProcessTypeL",id:"type-sidecarprocesstypel",children:[{value:"func (sidecarProcessTypeL) LoadSidecar",id:"func-sidecarprocesstypel-loadsidecar",children:[]}]},{value:"type sidecarProcessTypeQuery",id:"type-sidecarprocesstypequery",children:[{value:"func SidecarProcessTypes",id:"func-sidecarprocesstypes",children:[]},{value:"func (sidecarProcessTypeQuery) All",id:"func-sidecarprocesstypequery-all",children:[]},{value:"func (sidecarProcessTypeQuery) Count",id:"func-sidecarprocesstypequery-count",children:[]},{value:"func (sidecarProcessTypeQuery) Delete",id:"func-sidecarprocesstypequery-delete",children:[]},{value:"func (sidecarProcessTypeQuery) DeleteAll",id:"func-sidecarprocesstypequery-deleteall",children:[]},{value:"func (sidecarProcessTypeQuery) DeleteAllSlice",id:"func-sidecarprocesstypequery-deleteallslice",children:[]},{value:"func (sidecarProcessTypeQuery) Exists",id:"func-sidecarprocesstypequery-exists",children:[]},{value:"func (sidecarProcessTypeQuery) Insert",id:"func-sidecarprocesstypequery-insert",children:[]},{value:"func (sidecarProcessTypeQuery) One",id:"func-sidecarprocesstypequery-one",children:[]},{value:"func (sidecarProcessTypeQuery) Reload",id:"func-sidecarprocesstypequery-reload",children:[]},{value:"func (sidecarProcessTypeQuery) ReloadAll",id:"func-sidecarprocesstypequery-reloadall",children:[]},{value:"func (sidecarProcessTypeQuery) SetSidecar",id:"func-sidecarprocesstypequery-setsidecar",children:[]},{value:"func (sidecarProcessTypeQuery) Sidecar",id:"func-sidecarprocesstypequery-sidecar",children:[]},{value:"func (sidecarProcessTypeQuery) Update",id:"func-sidecarprocesstypequery-update",children:[]},{value:"func (sidecarProcessTypeQuery) UpdateAll",id:"func-sidecarprocesstypequery-updateall",children:[]},{value:"func (sidecarProcessTypeQuery) UpdateAllSlice",id:"func-sidecarprocesstypequery-updateallslice",children:[]},{value:"func (sidecarProcessTypeQuery) Upsert",id:"func-sidecarprocesstypequery-upsert",children:[]}]},{value:"type sidecarProcessTypeR",id:"type-sidecarprocesstyper",children:[{value:"func (*sidecarProcessTypeR) NewStruct",id:"func-sidecarprocesstyper-newstruct",children:[]}]},{value:"type sidecarQuery",id:"type-sidecarquery",children:[{value:"func Sidecars",id:"func-sidecars",children:[]},{value:"func (sidecarQuery) AddSidecarProcessTypes",id:"func-sidecarquery-addsidecarprocesstypes",children:[]},{value:"func (sidecarQuery) All",id:"func-sidecarquery-all",children:[]},{value:"func (sidecarQuery) App",id:"func-sidecarquery-app",children:[]},{value:"func (sidecarQuery) Count",id:"func-sidecarquery-count",children:[]},{value:"func (sidecarQuery) Delete",id:"func-sidecarquery-delete",children:[]},{value:"func (sidecarQuery) DeleteAll",id:"func-sidecarquery-deleteall",children:[]},{value:"func (sidecarQuery) DeleteAllSlice",id:"func-sidecarquery-deleteallslice",children:[]},{value:"func (sidecarQuery) Exists",id:"func-sidecarquery-exists",children:[]},{value:"func (sidecarQuery) Insert",id:"func-sidecarquery-insert",children:[]},{value:"func (sidecarQuery) One",id:"func-sidecarquery-one",children:[]},{value:"func (sidecarQuery) Reload",id:"func-sidecarquery-reload",children:[]},{value:"func (sidecarQuery) ReloadAll",id:"func-sidecarquery-reloadall",children:[]},{value:"func (sidecarQuery) SetApp",id:"func-sidecarquery-setapp",children:[]},{value:"func (sidecarQuery) SidecarProcessTypes",id:"func-sidecarquery-sidecarprocesstypes",children:[]},{value:"func (sidecarQuery) Update",id:"func-sidecarquery-update",children:[]},{value:"func (sidecarQuery) UpdateAll",id:"func-sidecarquery-updateall",children:[]},{value:"func (sidecarQuery) UpdateAllSlice",id:"func-sidecarquery-updateallslice",children:[]},{value:"func (sidecarQuery) Upsert",id:"func-sidecarquery-upsert",children:[]}]},{value:"type sidecarR",id:"type-sidecarr",children:[{value:"func (*sidecarR) NewStruct",id:"func-sidecarr-newstruct",children:[]}]},{value:"type spaceAnnotationL",id:"type-spaceannotationl",children:[{value:"func (spaceAnnotationL) LoadResource",id:"func-spaceannotationl-loadresource",children:[]}]},{value:"type spaceAnnotationQuery",id:"type-spaceannotationquery",children:[{value:"func SpaceAnnotations",id:"func-spaceannotations",children:[]},{value:"func (spaceAnnotationQuery) All",id:"func-spaceannotationquery-all",children:[]},{value:"func (spaceAnnotationQuery) Count",id:"func-spaceannotationquery-count",children:[]},{value:"func (spaceAnnotationQuery) Delete",id:"func-spaceannotationquery-delete",children:[]},{value:"func (spaceAnnotationQuery) DeleteAll",id:"func-spaceannotationquery-deleteall",children:[]},{value:"func (spaceAnnotationQuery) DeleteAllSlice",id:"func-spaceannotationquery-deleteallslice",children:[]},{value:"func (spaceAnnotationQuery) Exists",id:"func-spaceannotationquery-exists",children:[]},{value:"func (spaceAnnotationQuery) Insert",id:"func-spaceannotationquery-insert",children:[]},{value:"func (spaceAnnotationQuery) One",id:"func-spaceannotationquery-one",children:[]},{value:"func (spaceAnnotationQuery) Reload",id:"func-spaceannotationquery-reload",children:[]},{value:"func (spaceAnnotationQuery) ReloadAll",id:"func-spaceannotationquery-reloadall",children:[]},{value:"func (spaceAnnotationQuery) RemoveResource",id:"func-spaceannotationquery-removeresource",children:[]},{value:"func (spaceAnnotationQuery) Resource",id:"func-spaceannotationquery-resource",children:[]},{value:"func (spaceAnnotationQuery) SetResource",id:"func-spaceannotationquery-setresource",children:[]},{value:"func (spaceAnnotationQuery) Update",id:"func-spaceannotationquery-update",children:[]},{value:"func (spaceAnnotationQuery) UpdateAll",id:"func-spaceannotationquery-updateall",children:[]},{value:"func (spaceAnnotationQuery) UpdateAllSlice",id:"func-spaceannotationquery-updateallslice",children:[]},{value:"func (spaceAnnotationQuery) Upsert",id:"func-spaceannotationquery-upsert",children:[]}]},{value:"type spaceAnnotationR",id:"type-spaceannotationr",children:[{value:"func (*spaceAnnotationR) NewStruct",id:"func-spaceannotationr-newstruct",children:[]}]},{value:"type spaceL",id:"type-spacel",children:[{value:"func (spaceL) LoadApps",id:"func-spacel-loadapps",children:[]},{value:"func (spaceL) LoadDefaultSpaceUsers",id:"func-spacel-loaddefaultspaceusers",children:[]},{value:"func (spaceL) LoadIsolationSegment",id:"func-spacel-loadisolationsegment",children:[]},{value:"func (spaceL) LoadOrganization",id:"func-spacel-loadorganization",children:[]},{value:"func (spaceL) LoadResourceSpaceAnnotations",id:"func-spacel-loadresourcespaceannotations",children:[]},{value:"func (spaceL) LoadResourceSpaceLabels",id:"func-spacel-loadresourcespacelabels",children:[]},{value:"func (spaceL) LoadRoutes",id:"func-spacel-loadroutes",children:[]},{value:"func (spaceL) LoadSecurityGroupsSpaces",id:"func-spacel-loadsecuritygroupsspaces",children:[]},{value:"func (spaceL) LoadServiceBrokers",id:"func-spacel-loadservicebrokers",children:[]},{value:"func (spaceL) LoadServiceInstances",id:"func-spacel-loadserviceinstances",children:[]},{value:"func (spaceL) LoadSharedServiceInstances",id:"func-spacel-loadsharedserviceinstances",children:[]},{value:"func (spaceL) LoadSpaceQuotaDefinition",id:"func-spacel-loadspacequotadefinition",children:[]},{value:"func (spaceL) LoadSpacesApplicationSupporters",id:"func-spacel-loadspacesapplicationsupporters",children:[]},{value:"func (spaceL) LoadSpacesAuditors",id:"func-spacel-loadspacesauditors",children:[]},{value:"func (spaceL) LoadSpacesDevelopers",id:"func-spacel-loadspacesdevelopers",children:[]},{value:"func (spaceL) LoadSpacesManagers",id:"func-spacel-loadspacesmanagers",children:[]},{value:"func (spaceL) LoadStagingSpaceStagingSecurityGroupsSpaces",id:"func-spacel-loadstagingspacestagingsecuritygroupsspaces",children:[]}]},{value:"type spaceLabelL",id:"type-spacelabell",children:[{value:"func (spaceLabelL) LoadResource",id:"func-spacelabell-loadresource",children:[]}]},{value:"type spaceLabelQuery",id:"type-spacelabelquery",children:[{value:"func SpaceLabels",id:"func-spacelabels",children:[]},{value:"func (spaceLabelQuery) All",id:"func-spacelabelquery-all",children:[]},{value:"func (spaceLabelQuery) Count",id:"func-spacelabelquery-count",children:[]},{value:"func (spaceLabelQuery) Delete",id:"func-spacelabelquery-delete",children:[]},{value:"func (spaceLabelQuery) DeleteAll",id:"func-spacelabelquery-deleteall",children:[]},{value:"func (spaceLabelQuery) DeleteAllSlice",id:"func-spacelabelquery-deleteallslice",children:[]},{value:"func (spaceLabelQuery) Exists",id:"func-spacelabelquery-exists",children:[]},{value:"func (spaceLabelQuery) Insert",id:"func-spacelabelquery-insert",children:[]},{value:"func (spaceLabelQuery) One",id:"func-spacelabelquery-one",children:[]},{value:"func (spaceLabelQuery) Reload",id:"func-spacelabelquery-reload",children:[]},{value:"func (spaceLabelQuery) ReloadAll",id:"func-spacelabelquery-reloadall",children:[]},{value:"func (spaceLabelQuery) RemoveResource",id:"func-spacelabelquery-removeresource",children:[]},{value:"func (spaceLabelQuery) Resource",id:"func-spacelabelquery-resource",children:[]},{value:"func (spaceLabelQuery) SetResource",id:"func-spacelabelquery-setresource",children:[]},{value:"func (spaceLabelQuery) Update",id:"func-spacelabelquery-update",children:[]},{value:"func (spaceLabelQuery) UpdateAll",id:"func-spacelabelquery-updateall",children:[]},{value:"func (spaceLabelQuery) UpdateAllSlice",id:"func-spacelabelquery-updateallslice",children:[]},{value:"func (spaceLabelQuery) Upsert",id:"func-spacelabelquery-upsert",children:[]}]},{value:"type spaceLabelR",id:"type-spacelabelr",children:[{value:"func (*spaceLabelR) NewStruct",id:"func-spacelabelr-newstruct",children:[]}]},{value:"type spaceQuery",id:"type-spacequery",children:[{value:"func Spaces",id:"func-spaces",children:[]},{value:"func (spaceQuery) AddApps",id:"func-spacequery-addapps",children:[]},{value:"func (spaceQuery) AddDefaultSpaceUsers",id:"func-spacequery-adddefaultspaceusers",children:[]},{value:"func (spaceQuery) AddResourceSpaceAnnotations",id:"func-spacequery-addresourcespaceannotations",children:[]},{value:"func (spaceQuery) AddResourceSpaceLabels",id:"func-spacequery-addresourcespacelabels",children:[]},{value:"func (spaceQuery) AddRoutes",id:"func-spacequery-addroutes",children:[]},{value:"func (spaceQuery) AddSecurityGroupsSpaces",id:"func-spacequery-addsecuritygroupsspaces",children:[]},{value:"func (spaceQuery) AddServiceBrokers",id:"func-spacequery-addservicebrokers",children:[]},{value:"func (spaceQuery) AddServiceInstances",id:"func-spacequery-addserviceinstances",children:[]},{value:"func (spaceQuery) AddSharedServiceInstances",id:"func-spacequery-addsharedserviceinstances",children:[]},{value:"func (spaceQuery) AddSpacesApplicationSupporters",id:"func-spacequery-addspacesapplicationsupporters",children:[]},{value:"func (spaceQuery) AddSpacesAuditors",id:"func-spacequery-addspacesauditors",children:[]},{value:"func (spaceQuery) AddSpacesDevelopers",id:"func-spacequery-addspacesdevelopers",children:[]},{value:"func (spaceQuery) AddSpacesManagers",id:"func-spacequery-addspacesmanagers",children:[]},{value:"func (spaceQuery) AddStagingSpaceStagingSecurityGroupsSpaces",id:"func-spacequery-addstagingspacestagingsecuritygroupsspaces",children:[]},{value:"func (spaceQuery) All",id:"func-spacequery-all",children:[]},{value:"func (spaceQuery) Apps",id:"func-spacequery-apps",children:[]},{value:"func (spaceQuery) Count",id:"func-spacequery-count",children:[]},{value:"func (spaceQuery) DefaultSpaceUsers",id:"func-spacequery-defaultspaceusers",children:[]},{value:"func (spaceQuery) Delete",id:"func-spacequery-delete",children:[]},{value:"func (spaceQuery) DeleteAll",id:"func-spacequery-deleteall",children:[]},{value:"func (spaceQuery) DeleteAllSlice",id:"func-spacequery-deleteallslice",children:[]},{value:"func (spaceQuery) Exists",id:"func-spacequery-exists",children:[]},{value:"func (spaceQuery) Insert",id:"func-spacequery-insert",children:[]},{value:"func (spaceQuery) IsolationSegment",id:"func-spacequery-isolationsegment",children:[]},{value:"func (spaceQuery) One",id:"func-spacequery-one",children:[]},{value:"func (spaceQuery) Organization",id:"func-spacequery-organization",children:[]},{value:"func (spaceQuery) Reload",id:"func-spacequery-reload",children:[]},{value:"func (spaceQuery) ReloadAll",id:"func-spacequery-reloadall",children:[]},{value:"func (spaceQuery) RemoveApps",id:"func-spacequery-removeapps",children:[]},{value:"func (spaceQuery) RemoveDefaultSpaceUsers",id:"func-spacequery-removedefaultspaceusers",children:[]},{value:"func (spaceQuery) RemoveIsolationSegment",id:"func-spacequery-removeisolationsegment",children:[]},{value:"func (spaceQuery) RemoveResourceSpaceAnnotations",id:"func-spacequery-removeresourcespaceannotations",children:[]},{value:"func (spaceQuery) RemoveResourceSpaceLabels",id:"func-spacequery-removeresourcespacelabels",children:[]},{value:"func (spaceQuery) RemoveServiceBrokers",id:"func-spacequery-removeservicebrokers",children:[]},{value:"func (spaceQuery) RemoveSharedServiceInstances",id:"func-spacequery-removesharedserviceinstances",children:[]},{value:"func (spaceQuery) RemoveSpaceQuotaDefinition",id:"func-spacequery-removespacequotadefinition",children:[]},{value:"func (spaceQuery) ResourceSpaceAnnotations",id:"func-spacequery-resourcespaceannotations",children:[]},{value:"func (spaceQuery) ResourceSpaceLabels",id:"func-spacequery-resourcespacelabels",children:[]},{value:"func (spaceQuery) Routes",id:"func-spacequery-routes",children:[]},{value:"func (spaceQuery) SecurityGroupsSpaces",id:"func-spacequery-securitygroupsspaces",children:[]},{value:"func (spaceQuery) ServiceBrokers",id:"func-spacequery-servicebrokers",children:[]},{value:"func (spaceQuery) ServiceInstances",id:"func-spacequery-serviceinstances",children:[]},{value:"func (spaceQuery) SetApps",id:"func-spacequery-setapps",children:[]},{value:"func (spaceQuery) SetDefaultSpaceUsers",id:"func-spacequery-setdefaultspaceusers",children:[]},{value:"func (spaceQuery) SetIsolationSegment",id:"func-spacequery-setisolationsegment",children:[]},{value:"func (spaceQuery) SetOrganization",id:"func-spacequery-setorganization",children:[]},{value:"func (spaceQuery) SetResourceSpaceAnnotations",id:"func-spacequery-setresourcespaceannotations",children:[]},{value:"func (spaceQuery) SetResourceSpaceLabels",id:"func-spacequery-setresourcespacelabels",children:[]},{value:"func (spaceQuery) SetServiceBrokers",id:"func-spacequery-setservicebrokers",children:[]},{value:"func (spaceQuery) SetSharedServiceInstances",id:"func-spacequery-setsharedserviceinstances",children:[]},{value:"func (spaceQuery) SetSpaceQuotaDefinition",id:"func-spacequery-setspacequotadefinition",children:[]},{value:"func (spaceQuery) SharedServiceInstances",id:"func-spacequery-sharedserviceinstances",children:[]},{value:"func (spaceQuery) SpaceQuotaDefinition",id:"func-spacequery-spacequotadefinition",children:[]},{value:"func (spaceQuery) SpacesApplicationSupporters",id:"func-spacequery-spacesapplicationsupporters",children:[]},{value:"func (spaceQuery) SpacesAuditors",id:"func-spacequery-spacesauditors",children:[]},{value:"func (spaceQuery) SpacesDevelopers",id:"func-spacequery-spacesdevelopers",children:[]},{value:"func (spaceQuery) SpacesManagers",id:"func-spacequery-spacesmanagers",children:[]},{value:"func (spaceQuery) StagingSpaceStagingSecurityGroupsSpaces",id:"func-spacequery-stagingspacestagingsecuritygroupsspaces",children:[]},{value:"func (spaceQuery) Update",id:"func-spacequery-update",children:[]},{value:"func (spaceQuery) UpdateAll",id:"func-spacequery-updateall",children:[]},{value:"func (spaceQuery) UpdateAllSlice",id:"func-spacequery-updateallslice",children:[]},{value:"func (spaceQuery) Upsert",id:"func-spacequery-upsert",children:[]}]},{value:"type spaceQuotaDefinitionL",id:"type-spacequotadefinitionl",children:[{value:"func (spaceQuotaDefinitionL) LoadOrganization",id:"func-spacequotadefinitionl-loadorganization",children:[]},{value:"func (spaceQuotaDefinitionL) LoadSpaces",id:"func-spacequotadefinitionl-loadspaces",children:[]}]},{value:"type spaceQuotaDefinitionQuery",id:"type-spacequotadefinitionquery",children:[{value:"func SpaceQuotaDefinitions",id:"func-spacequotadefinitions",children:[]},{value:"func (spaceQuotaDefinitionQuery) AddSpaces",id:"func-spacequotadefinitionquery-addspaces",children:[]},{value:"func (spaceQuotaDefinitionQuery) All",id:"func-spacequotadefinitionquery-all",children:[]},{value:"func (spaceQuotaDefinitionQuery) Count",id:"func-spacequotadefinitionquery-count",children:[]},{value:"func (spaceQuotaDefinitionQuery) Delete",id:"func-spacequotadefinitionquery-delete",children:[]},{value:"func (spaceQuotaDefinitionQuery) DeleteAll",id:"func-spacequotadefinitionquery-deleteall",children:[]},{value:"func (spaceQuotaDefinitionQuery) DeleteAllSlice",id:"func-spacequotadefinitionquery-deleteallslice",children:[]},{value:"func (spaceQuotaDefinitionQuery) Exists",id:"func-spacequotadefinitionquery-exists",children:[]},{value:"func (spaceQuotaDefinitionQuery) Insert",id:"func-spacequotadefinitionquery-insert",children:[]},{value:"func (spaceQuotaDefinitionQuery) One",id:"func-spacequotadefinitionquery-one",children:[]},{value:"func (spaceQuotaDefinitionQuery) Organization",id:"func-spacequotadefinitionquery-organization",children:[]},{value:"func (spaceQuotaDefinitionQuery) Reload",id:"func-spacequotadefinitionquery-reload",children:[]},{value:"func (spaceQuotaDefinitionQuery) ReloadAll",id:"func-spacequotadefinitionquery-reloadall",children:[]},{value:"func (spaceQuotaDefinitionQuery) RemoveSpaces",id:"func-spacequotadefinitionquery-removespaces",children:[]},{value:"func (spaceQuotaDefinitionQuery) SetOrganization",id:"func-spacequotadefinitionquery-setorganization",children:[]},{value:"func (spaceQuotaDefinitionQuery) SetSpaces",id:"func-spacequotadefinitionquery-setspaces",children:[]},{value:"func (spaceQuotaDefinitionQuery) Spaces",id:"func-spacequotadefinitionquery-spaces",children:[]},{value:"func (spaceQuotaDefinitionQuery) Update",id:"func-spacequotadefinitionquery-update",children:[]},{value:"func (spaceQuotaDefinitionQuery) UpdateAll",id:"func-spacequotadefinitionquery-updateall",children:[]},{value:"func (spaceQuotaDefinitionQuery) UpdateAllSlice",id:"func-spacequotadefinitionquery-updateallslice",children:[]},{value:"func (spaceQuotaDefinitionQuery) Upsert",id:"func-spacequotadefinitionquery-upsert",children:[]}]},{value:"type spaceQuotaDefinitionR",id:"type-spacequotadefinitionr",children:[{value:"func (*spaceQuotaDefinitionR) NewStruct",id:"func-spacequotadefinitionr-newstruct",children:[]}]},{value:"type spaceR",id:"type-spacer",children:[{value:"func (*spaceR) NewStruct",id:"func-spacer-newstruct",children:[]}]},{value:"type spacesApplicationSupporterL",id:"type-spacesapplicationsupporterl",children:[{value:"func (spacesApplicationSupporterL) LoadSpace",id:"func-spacesapplicationsupporterl-loadspace",children:[]},{value:"func (spacesApplicationSupporterL) LoadUser",id:"func-spacesapplicationsupporterl-loaduser",children:[]}]},{value:"type spacesApplicationSupporterQuery",id:"type-spacesapplicationsupporterquery",children:[{value:"func SpacesApplicationSupporters",id:"func-spacesapplicationsupporters",children:[]},{value:"func (spacesApplicationSupporterQuery) All",id:"func-spacesapplicationsupporterquery-all",children:[]},{value:"func (spacesApplicationSupporterQuery) Count",id:"func-spacesapplicationsupporterquery-count",children:[]},{value:"func (spacesApplicationSupporterQuery) Delete",id:"func-spacesapplicationsupporterquery-delete",children:[]},{value:"func (spacesApplicationSupporterQuery) DeleteAll",id:"func-spacesapplicationsupporterquery-deleteall",children:[]},{value:"func (spacesApplicationSupporterQuery) DeleteAllSlice",id:"func-spacesapplicationsupporterquery-deleteallslice",children:[]},{value:"func (spacesApplicationSupporterQuery) Exists",id:"func-spacesapplicationsupporterquery-exists",children:[]},{value:"func (spacesApplicationSupporterQuery) Insert",id:"func-spacesapplicationsupporterquery-insert",children:[]},{value:"func (spacesApplicationSupporterQuery) One",id:"func-spacesapplicationsupporterquery-one",children:[]},{value:"func (spacesApplicationSupporterQuery) Reload",id:"func-spacesapplicationsupporterquery-reload",children:[]},{value:"func (spacesApplicationSupporterQuery) ReloadAll",id:"func-spacesapplicationsupporterquery-reloadall",children:[]},{value:"func (spacesApplicationSupporterQuery) SetSpace",id:"func-spacesapplicationsupporterquery-setspace",children:[]},{value:"func (spacesApplicationSupporterQuery) SetUser",id:"func-spacesapplicationsupporterquery-setuser",children:[]},{value:"func (spacesApplicationSupporterQuery) Space",id:"func-spacesapplicationsupporterquery-space",children:[]},{value:"func (spacesApplicationSupporterQuery) Update",id:"func-spacesapplicationsupporterquery-update",children:[]},{value:"func (spacesApplicationSupporterQuery) UpdateAll",id:"func-spacesapplicationsupporterquery-updateall",children:[]},{value:"func (spacesApplicationSupporterQuery) UpdateAllSlice",id:"func-spacesapplicationsupporterquery-updateallslice",children:[]},{value:"func (spacesApplicationSupporterQuery) Upsert",id:"func-spacesapplicationsupporterquery-upsert",children:[]},{value:"func (spacesApplicationSupporterQuery) User",id:"func-spacesapplicationsupporterquery-user",children:[]}]},{value:"type spacesApplicationSupporterR",id:"type-spacesapplicationsupporterr",children:[{value:"func (*spacesApplicationSupporterR) NewStruct",id:"func-spacesapplicationsupporterr-newstruct",children:[]}]},{value:"type spacesAuditorL",id:"type-spacesauditorl",children:[{value:"func (spacesAuditorL) LoadSpace",id:"func-spacesauditorl-loadspace",children:[]},{value:"func (spacesAuditorL) LoadUser",id:"func-spacesauditorl-loaduser",children:[]}]},{value:"type spacesAuditorQuery",id:"type-spacesauditorquery",children:[{value:"func SpacesAuditors",id:"func-spacesauditors",children:[]},{value:"func (spacesAuditorQuery) All",id:"func-spacesauditorquery-all",children:[]},{value:"func (spacesAuditorQuery) Count",id:"func-spacesauditorquery-count",children:[]},{value:"func (spacesAuditorQuery) Delete",id:"func-spacesauditorquery-delete",children:[]},{value:"func (spacesAuditorQuery) DeleteAll",id:"func-spacesauditorquery-deleteall",children:[]},{value:"func (spacesAuditorQuery) DeleteAllSlice",id:"func-spacesauditorquery-deleteallslice",children:[]},{value:"func (spacesAuditorQuery) Exists",id:"func-spacesauditorquery-exists",children:[]},{value:"func (spacesAuditorQuery) Insert",id:"func-spacesauditorquery-insert",children:[]},{value:"func (spacesAuditorQuery) One",id:"func-spacesauditorquery-one",children:[]},{value:"func (spacesAuditorQuery) Reload",id:"func-spacesauditorquery-reload",children:[]},{value:"func (spacesAuditorQuery) ReloadAll",id:"func-spacesauditorquery-reloadall",children:[]},{value:"func (spacesAuditorQuery) SetSpace",id:"func-spacesauditorquery-setspace",children:[]},{value:"func (spacesAuditorQuery) SetUser",id:"func-spacesauditorquery-setuser",children:[]},{value:"func (spacesAuditorQuery) Space",id:"func-spacesauditorquery-space",children:[]},{value:"func (spacesAuditorQuery) Update",id:"func-spacesauditorquery-update",children:[]},{value:"func (spacesAuditorQuery) UpdateAll",id:"func-spacesauditorquery-updateall",children:[]},{value:"func (spacesAuditorQuery) UpdateAllSlice",id:"func-spacesauditorquery-updateallslice",children:[]},{value:"func (spacesAuditorQuery) Upsert",id:"func-spacesauditorquery-upsert",children:[]},{value:"func (spacesAuditorQuery) User",id:"func-spacesauditorquery-user",children:[]}]},{value:"type spacesAuditorR",id:"type-spacesauditorr",children:[{value:"func (*spacesAuditorR) NewStruct",id:"func-spacesauditorr-newstruct",children:[]}]},{value:"type spacesDeveloperL",id:"type-spacesdeveloperl",children:[{value:"func (spacesDeveloperL) LoadSpace",id:"func-spacesdeveloperl-loadspace",children:[]},{value:"func (spacesDeveloperL) LoadUser",id:"func-spacesdeveloperl-loaduser",children:[]}]},{value:"type spacesDeveloperQuery",id:"type-spacesdeveloperquery",children:[{value:"func SpacesDevelopers",id:"func-spacesdevelopers",children:[]},{value:"func (spacesDeveloperQuery) All",id:"func-spacesdeveloperquery-all",children:[]},{value:"func (spacesDeveloperQuery) Count",id:"func-spacesdeveloperquery-count",children:[]},{value:"func (spacesDeveloperQuery) Delete",id:"func-spacesdeveloperquery-delete",children:[]},{value:"func (spacesDeveloperQuery) DeleteAll",id:"func-spacesdeveloperquery-deleteall",children:[]},{value:"func (spacesDeveloperQuery) DeleteAllSlice",id:"func-spacesdeveloperquery-deleteallslice",children:[]},{value:"func (spacesDeveloperQuery) Exists",id:"func-spacesdeveloperquery-exists",children:[]},{value:"func (spacesDeveloperQuery) Insert",id:"func-spacesdeveloperquery-insert",children:[]},{value:"func (spacesDeveloperQuery) One",id:"func-spacesdeveloperquery-one",children:[]},{value:"func (spacesDeveloperQuery) Reload",id:"func-spacesdeveloperquery-reload",children:[]},{value:"func (spacesDeveloperQuery) ReloadAll",id:"func-spacesdeveloperquery-reloadall",children:[]},{value:"func (spacesDeveloperQuery) SetSpace",id:"func-spacesdeveloperquery-setspace",children:[]},{value:"func (spacesDeveloperQuery) SetUser",id:"func-spacesdeveloperquery-setuser",children:[]},{value:"func (spacesDeveloperQuery) Space",id:"func-spacesdeveloperquery-space",children:[]},{value:"func (spacesDeveloperQuery) Update",id:"func-spacesdeveloperquery-update",children:[]},{value:"func (spacesDeveloperQuery) UpdateAll",id:"func-spacesdeveloperquery-updateall",children:[]},{value:"func (spacesDeveloperQuery) UpdateAllSlice",id:"func-spacesdeveloperquery-updateallslice",children:[]},{value:"func (spacesDeveloperQuery) Upsert",id:"func-spacesdeveloperquery-upsert",children:[]},{value:"func (spacesDeveloperQuery) User",id:"func-spacesdeveloperquery-user",children:[]}]},{value:"type spacesDeveloperR",id:"type-spacesdeveloperr",children:[{value:"func (*spacesDeveloperR) NewStruct",id:"func-spacesdeveloperr-newstruct",children:[]}]},{value:"type spacesManagerL",id:"type-spacesmanagerl",children:[{value:"func (spacesManagerL) LoadSpace",id:"func-spacesmanagerl-loadspace",children:[]},{value:"func (spacesManagerL) LoadUser",id:"func-spacesmanagerl-loaduser",children:[]}]},{value:"type spacesManagerQuery",id:"type-spacesmanagerquery",children:[{value:"func SpacesManagers",id:"func-spacesmanagers",children:[]},{value:"func (spacesManagerQuery) All",id:"func-spacesmanagerquery-all",children:[]},{value:"func (spacesManagerQuery) Count",id:"func-spacesmanagerquery-count",children:[]},{value:"func (spacesManagerQuery) Delete",id:"func-spacesmanagerquery-delete",children:[]},{value:"func (spacesManagerQuery) DeleteAll",id:"func-spacesmanagerquery-deleteall",children:[]},{value:"func (spacesManagerQuery) DeleteAllSlice",id:"func-spacesmanagerquery-deleteallslice",children:[]},{value:"func (spacesManagerQuery) Exists",id:"func-spacesmanagerquery-exists",children:[]},{value:"func (spacesManagerQuery) Insert",id:"func-spacesmanagerquery-insert",children:[]},{value:"func (spacesManagerQuery) One",id:"func-spacesmanagerquery-one",children:[]},{value:"func (spacesManagerQuery) Reload",id:"func-spacesmanagerquery-reload",children:[]},{value:"func (spacesManagerQuery) ReloadAll",id:"func-spacesmanagerquery-reloadall",children:[]},{value:"func (spacesManagerQuery) SetSpace",id:"func-spacesmanagerquery-setspace",children:[]},{value:"func (spacesManagerQuery) SetUser",id:"func-spacesmanagerquery-setuser",children:[]},{value:"func (spacesManagerQuery) Space",id:"func-spacesmanagerquery-space",children:[]},{value:"func (spacesManagerQuery) Update",id:"func-spacesmanagerquery-update",children:[]},{value:"func (spacesManagerQuery) UpdateAll",id:"func-spacesmanagerquery-updateall",children:[]},{value:"func (spacesManagerQuery) UpdateAllSlice",id:"func-spacesmanagerquery-updateallslice",children:[]},{value:"func (spacesManagerQuery) Upsert",id:"func-spacesmanagerquery-upsert",children:[]},{value:"func (spacesManagerQuery) User",id:"func-spacesmanagerquery-user",children:[]}]},{value:"type spacesManagerR",id:"type-spacesmanagerr",children:[{value:"func (*spacesManagerR) NewStruct",id:"func-spacesmanagerr-newstruct",children:[]}]},{value:"type stackAnnotationL",id:"type-stackannotationl",children:[{value:"func (stackAnnotationL) LoadResource",id:"func-stackannotationl-loadresource",children:[]}]},{value:"type stackAnnotationQuery",id:"type-stackannotationquery",children:[{value:"func StackAnnotations",id:"func-stackannotations",children:[]},{value:"func (stackAnnotationQuery) All",id:"func-stackannotationquery-all",children:[]},{value:"func (stackAnnotationQuery) Count",id:"func-stackannotationquery-count",children:[]},{value:"func (stackAnnotationQuery) Delete",id:"func-stackannotationquery-delete",children:[]},{value:"func (stackAnnotationQuery) DeleteAll",id:"func-stackannotationquery-deleteall",children:[]},{value:"func (stackAnnotationQuery) DeleteAllSlice",id:"func-stackannotationquery-deleteallslice",children:[]},{value:"func (stackAnnotationQuery) Exists",id:"func-stackannotationquery-exists",children:[]},{value:"func (stackAnnotationQuery) Insert",id:"func-stackannotationquery-insert",children:[]},{value:"func (stackAnnotationQuery) One",id:"func-stackannotationquery-one",children:[]},{value:"func (stackAnnotationQuery) Reload",id:"func-stackannotationquery-reload",children:[]},{value:"func (stackAnnotationQuery) ReloadAll",id:"func-stackannotationquery-reloadall",children:[]},{value:"func (stackAnnotationQuery) RemoveResource",id:"func-stackannotationquery-removeresource",children:[]},{value:"func (stackAnnotationQuery) Resource",id:"func-stackannotationquery-resource",children:[]},{value:"func (stackAnnotationQuery) SetResource",id:"func-stackannotationquery-setresource",children:[]},{value:"func (stackAnnotationQuery) Update",id:"func-stackannotationquery-update",children:[]},{value:"func (stackAnnotationQuery) UpdateAll",id:"func-stackannotationquery-updateall",children:[]},{value:"func (stackAnnotationQuery) UpdateAllSlice",id:"func-stackannotationquery-updateallslice",children:[]},{value:"func (stackAnnotationQuery) Upsert",id:"func-stackannotationquery-upsert",children:[]}]},{value:"type stackAnnotationR",id:"type-stackannotationr",children:[{value:"func (*stackAnnotationR) NewStruct",id:"func-stackannotationr-newstruct",children:[]}]},{value:"type stackL",id:"type-stackl",children:[{value:"func (stackL) LoadResourceStackAnnotations",id:"func-stackl-loadresourcestackannotations",children:[]},{value:"func (stackL) LoadResourceStackLabels",id:"func-stackl-loadresourcestacklabels",children:[]}]},{value:"type stackLabelL",id:"type-stacklabell",children:[{value:"func (stackLabelL) LoadResource",id:"func-stacklabell-loadresource",children:[]}]},{value:"type stackLabelQuery",id:"type-stacklabelquery",children:[{value:"func StackLabels",id:"func-stacklabels",children:[]},{value:"func (stackLabelQuery) All",id:"func-stacklabelquery-all",children:[]},{value:"func (stackLabelQuery) Count",id:"func-stacklabelquery-count",children:[]},{value:"func (stackLabelQuery) Delete",id:"func-stacklabelquery-delete",children:[]},{value:"func (stackLabelQuery) DeleteAll",id:"func-stacklabelquery-deleteall",children:[]},{value:"func (stackLabelQuery) DeleteAllSlice",id:"func-stacklabelquery-deleteallslice",children:[]},{value:"func (stackLabelQuery) Exists",id:"func-stacklabelquery-exists",children:[]},{value:"func (stackLabelQuery) Insert",id:"func-stacklabelquery-insert",children:[]},{value:"func (stackLabelQuery) One",id:"func-stacklabelquery-one",children:[]},{value:"func (stackLabelQuery) Reload",id:"func-stacklabelquery-reload",children:[]},{value:"func (stackLabelQuery) ReloadAll",id:"func-stacklabelquery-reloadall",children:[]},{value:"func (stackLabelQuery) RemoveResource",id:"func-stacklabelquery-removeresource",children:[]},{value:"func (stackLabelQuery) Resource",id:"func-stacklabelquery-resource",children:[]},{value:"func (stackLabelQuery) SetResource",id:"func-stacklabelquery-setresource",children:[]},{value:"func (stackLabelQuery) Update",id:"func-stacklabelquery-update",children:[]},{value:"func (stackLabelQuery) UpdateAll",id:"func-stacklabelquery-updateall",children:[]},{value:"func (stackLabelQuery) UpdateAllSlice",id:"func-stacklabelquery-updateallslice",children:[]},{value:"func (stackLabelQuery) Upsert",id:"func-stacklabelquery-upsert",children:[]}]},{value:"type stackLabelR",id:"type-stacklabelr",children:[{value:"func (*stackLabelR) NewStruct",id:"func-stacklabelr-newstruct",children:[]}]},{value:"type stackQuery",id:"type-stackquery",children:[{value:"func Stacks",id:"func-stacks",children:[]},{value:"func (stackQuery) AddResourceStackAnnotations",id:"func-stackquery-addresourcestackannotations",children:[]},{value:"func (stackQuery) AddResourceStackLabels",id:"func-stackquery-addresourcestacklabels",children:[]},{value:"func (stackQuery) All",id:"func-stackquery-all",children:[]},{value:"func (stackQuery) Count",id:"func-stackquery-count",children:[]},{value:"func (stackQuery) Delete",id:"func-stackquery-delete",children:[]},{value:"func (stackQuery) DeleteAll",id:"func-stackquery-deleteall",children:[]},{value:"func (stackQuery) DeleteAllSlice",id:"func-stackquery-deleteallslice",children:[]},{value:"func (stackQuery) Exists",id:"func-stackquery-exists",children:[]},{value:"func (stackQuery) Insert",id:"func-stackquery-insert",children:[]},{value:"func (stackQuery) One",id:"func-stackquery-one",children:[]},{value:"func (stackQuery) Reload",id:"func-stackquery-reload",children:[]},{value:"func (stackQuery) ReloadAll",id:"func-stackquery-reloadall",children:[]},{value:"func (stackQuery) RemoveResourceStackAnnotations",id:"func-stackquery-removeresourcestackannotations",children:[]},{value:"func (stackQuery) RemoveResourceStackLabels",id:"func-stackquery-removeresourcestacklabels",children:[]},{value:"func (stackQuery) ResourceStackAnnotations",id:"func-stackquery-resourcestackannotations",children:[]},{value:"func (stackQuery) ResourceStackLabels",id:"func-stackquery-resourcestacklabels",children:[]},{value:"func (stackQuery) SetResourceStackAnnotations",id:"func-stackquery-setresourcestackannotations",children:[]},{value:"func (stackQuery) SetResourceStackLabels",id:"func-stackquery-setresourcestacklabels",children:[]},{value:"func (stackQuery) Update",id:"func-stackquery-update",children:[]},{value:"func (stackQuery) UpdateAll",id:"func-stackquery-updateall",children:[]},{value:"func (stackQuery) UpdateAllSlice",id:"func-stackquery-updateallslice",children:[]},{value:"func (stackQuery) Upsert",id:"func-stackquery-upsert",children:[]}]},{value:"type stackR",id:"type-stackr",children:[{value:"func (*stackR) NewStruct",id:"func-stackr-newstruct",children:[]}]},{value:"type stagingSecurityGroupsSpaceL",id:"type-stagingsecuritygroupsspacel",children:[{value:"func (stagingSecurityGroupsSpaceL) LoadStagingSecurityGroup",id:"func-stagingsecuritygroupsspacel-loadstagingsecuritygroup",children:[]},{value:"func (stagingSecurityGroupsSpaceL) LoadStagingSpace",id:"func-stagingsecuritygroupsspacel-loadstagingspace",children:[]}]},{value:"type stagingSecurityGroupsSpaceQuery",id:"type-stagingsecuritygroupsspacequery",children:[{value:"func StagingSecurityGroupsSpaces",id:"func-stagingsecuritygroupsspaces",children:[]},{value:"func (stagingSecurityGroupsSpaceQuery) All",id:"func-stagingsecuritygroupsspacequery-all",children:[]},{value:"func (stagingSecurityGroupsSpaceQuery) Count",id:"func-stagingsecuritygroupsspacequery-count",children:[]},{value:"func (stagingSecurityGroupsSpaceQuery) Delete",id:"func-stagingsecuritygroupsspacequery-delete",children:[]},{value:"func (stagingSecurityGroupsSpaceQuery) DeleteAll",id:"func-stagingsecuritygroupsspacequery-deleteall",children:[]},{value:"func (stagingSecurityGroupsSpaceQuery) DeleteAllSlice",id:"func-stagingsecuritygroupsspacequery-deleteallslice",children:[]},{value:"func (stagingSecurityGroupsSpaceQuery) Exists",id:"func-stagingsecuritygroupsspacequery-exists",children:[]},{value:"func (stagingSecurityGroupsSpaceQuery) Insert",id:"func-stagingsecuritygroupsspacequery-insert",children:[]},{value:"func (stagingSecurityGroupsSpaceQuery) One",id:"func-stagingsecuritygroupsspacequery-one",children:[]},{value:"func (stagingSecurityGroupsSpaceQuery) Reload",id:"func-stagingsecuritygroupsspacequery-reload",children:[]},{value:"func (stagingSecurityGroupsSpaceQuery) ReloadAll",id:"func-stagingsecuritygroupsspacequery-reloadall",children:[]},{value:"func (stagingSecurityGroupsSpaceQuery) SetStagingSecurityGroup",id:"func-stagingsecuritygroupsspacequery-setstagingsecuritygroup",children:[]},{value:"func (stagingSecurityGroupsSpaceQuery) SetStagingSpace",id:"func-stagingsecuritygroupsspacequery-setstagingspace",children:[]},{value:"func (stagingSecurityGroupsSpaceQuery) StagingSecurityGroup",id:"func-stagingsecuritygroupsspacequery-stagingsecuritygroup",children:[]},{value:"func (stagingSecurityGroupsSpaceQuery) StagingSpace",id:"func-stagingsecuritygroupsspacequery-stagingspace",children:[]},{value:"func (stagingSecurityGroupsSpaceQuery) Update",id:"func-stagingsecuritygroupsspacequery-update",children:[]},{value:"func (stagingSecurityGroupsSpaceQuery) UpdateAll",id:"func-stagingsecuritygroupsspacequery-updateall",children:[]},{value:"func (stagingSecurityGroupsSpaceQuery) UpdateAllSlice",id:"func-stagingsecuritygroupsspacequery-updateallslice",children:[]},{value:"func (stagingSecurityGroupsSpaceQuery) Upsert",id:"func-stagingsecuritygroupsspacequery-upsert",children:[]}]},{value:"type stagingSecurityGroupsSpaceR",id:"type-stagingsecuritygroupsspacer",children:[{value:"func (*stagingSecurityGroupsSpaceR) NewStruct",id:"func-stagingsecuritygroupsspacer-newstruct",children:[]}]},{value:"type taskAnnotationL",id:"type-taskannotationl",children:[{value:"func (taskAnnotationL) LoadResource",id:"func-taskannotationl-loadresource",children:[]}]},{value:"type taskAnnotationQuery",id:"type-taskannotationquery",children:[{value:"func TaskAnnotations",id:"func-taskannotations",children:[]},{value:"func (taskAnnotationQuery) All",id:"func-taskannotationquery-all",children:[]},{value:"func (taskAnnotationQuery) Count",id:"func-taskannotationquery-count",children:[]},{value:"func (taskAnnotationQuery) Delete",id:"func-taskannotationquery-delete",children:[]},{value:"func (taskAnnotationQuery) DeleteAll",id:"func-taskannotationquery-deleteall",children:[]},{value:"func (taskAnnotationQuery) DeleteAllSlice",id:"func-taskannotationquery-deleteallslice",children:[]},{value:"func (taskAnnotationQuery) Exists",id:"func-taskannotationquery-exists",children:[]},{value:"func (taskAnnotationQuery) Insert",id:"func-taskannotationquery-insert",children:[]},{value:"func (taskAnnotationQuery) One",id:"func-taskannotationquery-one",children:[]},{value:"func (taskAnnotationQuery) Reload",id:"func-taskannotationquery-reload",children:[]},{value:"func (taskAnnotationQuery) ReloadAll",id:"func-taskannotationquery-reloadall",children:[]},{value:"func (taskAnnotationQuery) RemoveResource",id:"func-taskannotationquery-removeresource",children:[]},{value:"func (taskAnnotationQuery) Resource",id:"func-taskannotationquery-resource",children:[]},{value:"func (taskAnnotationQuery) SetResource",id:"func-taskannotationquery-setresource",children:[]},{value:"func (taskAnnotationQuery) Update",id:"func-taskannotationquery-update",children:[]},{value:"func (taskAnnotationQuery) UpdateAll",id:"func-taskannotationquery-updateall",children:[]},{value:"func (taskAnnotationQuery) UpdateAllSlice",id:"func-taskannotationquery-updateallslice",children:[]},{value:"func (taskAnnotationQuery) Upsert",id:"func-taskannotationquery-upsert",children:[]}]},{value:"type taskAnnotationR",id:"type-taskannotationr",children:[{value:"func (*taskAnnotationR) NewStruct",id:"func-taskannotationr-newstruct",children:[]}]},{value:"type taskL",id:"type-taskl",children:[{value:"func (taskL) LoadApp",id:"func-taskl-loadapp",children:[]},{value:"func (taskL) LoadResourceTaskAnnotations",id:"func-taskl-loadresourcetaskannotations",children:[]},{value:"func (taskL) LoadResourceTaskLabels",id:"func-taskl-loadresourcetasklabels",children:[]}]},{value:"type taskLabelL",id:"type-tasklabell",children:[{value:"func (taskLabelL) LoadResource",id:"func-tasklabell-loadresource",children:[]}]},{value:"type taskLabelQuery",id:"type-tasklabelquery",children:[{value:"func TaskLabels",id:"func-tasklabels",children:[]},{value:"func (taskLabelQuery) All",id:"func-tasklabelquery-all",children:[]},{value:"func (taskLabelQuery) Count",id:"func-tasklabelquery-count",children:[]},{value:"func (taskLabelQuery) Delete",id:"func-tasklabelquery-delete",children:[]},{value:"func (taskLabelQuery) DeleteAll",id:"func-tasklabelquery-deleteall",children:[]},{value:"func (taskLabelQuery) DeleteAllSlice",id:"func-tasklabelquery-deleteallslice",children:[]},{value:"func (taskLabelQuery) Exists",id:"func-tasklabelquery-exists",children:[]},{value:"func (taskLabelQuery) Insert",id:"func-tasklabelquery-insert",children:[]},{value:"func (taskLabelQuery) One",id:"func-tasklabelquery-one",children:[]},{value:"func (taskLabelQuery) Reload",id:"func-tasklabelquery-reload",children:[]},{value:"func (taskLabelQuery) ReloadAll",id:"func-tasklabelquery-reloadall",children:[]},{value:"func (taskLabelQuery) RemoveResource",id:"func-tasklabelquery-removeresource",children:[]},{value:"func (taskLabelQuery) Resource",id:"func-tasklabelquery-resource",children:[]},{value:"func (taskLabelQuery) SetResource",id:"func-tasklabelquery-setresource",children:[]},{value:"func (taskLabelQuery) Update",id:"func-tasklabelquery-update",children:[]},{value:"func (taskLabelQuery) UpdateAll",id:"func-tasklabelquery-updateall",children:[]},{value:"func (taskLabelQuery) UpdateAllSlice",id:"func-tasklabelquery-updateallslice",children:[]},{value:"func (taskLabelQuery) Upsert",id:"func-tasklabelquery-upsert",children:[]}]},{value:"type taskLabelR",id:"type-tasklabelr",children:[{value:"func (*taskLabelR) NewStruct",id:"func-tasklabelr-newstruct",children:[]}]},{value:"type taskQuery",id:"type-taskquery",children:[{value:"func Tasks",id:"func-tasks",children:[]},{value:"func (taskQuery) AddResourceTaskAnnotations",id:"func-taskquery-addresourcetaskannotations",children:[]},{value:"func (taskQuery) AddResourceTaskLabels",id:"func-taskquery-addresourcetasklabels",children:[]},{value:"func (taskQuery) All",id:"func-taskquery-all",children:[]},{value:"func (taskQuery) App",id:"func-taskquery-app",children:[]},{value:"func (taskQuery) Count",id:"func-taskquery-count",children:[]},{value:"func (taskQuery) Delete",id:"func-taskquery-delete",children:[]},{value:"func (taskQuery) DeleteAll",id:"func-taskquery-deleteall",children:[]},{value:"func (taskQuery) DeleteAllSlice",id:"func-taskquery-deleteallslice",children:[]},{value:"func (taskQuery) Exists",id:"func-taskquery-exists",children:[]},{value:"func (taskQuery) Insert",id:"func-taskquery-insert",children:[]},{value:"func (taskQuery) One",id:"func-taskquery-one",children:[]},{value:"func (taskQuery) Reload",id:"func-taskquery-reload",children:[]},{value:"func (taskQuery) ReloadAll",id:"func-taskquery-reloadall",children:[]},{value:"func (taskQuery) RemoveResourceTaskAnnotations",id:"func-taskquery-removeresourcetaskannotations",children:[]},{value:"func (taskQuery) RemoveResourceTaskLabels",id:"func-taskquery-removeresourcetasklabels",children:[]},{value:"func (taskQuery) ResourceTaskAnnotations",id:"func-taskquery-resourcetaskannotations",children:[]},{value:"func (taskQuery) ResourceTaskLabels",id:"func-taskquery-resourcetasklabels",children:[]},{value:"func (taskQuery) SetApp",id:"func-taskquery-setapp",children:[]},{value:"func (taskQuery) SetResourceTaskAnnotations",id:"func-taskquery-setresourcetaskannotations",children:[]},{value:"func (taskQuery) SetResourceTaskLabels",id:"func-taskquery-setresourcetasklabels",children:[]},{value:"func (taskQuery) Update",id:"func-taskquery-update",children:[]},{value:"func (taskQuery) UpdateAll",id:"func-taskquery-updateall",children:[]},{value:"func (taskQuery) UpdateAllSlice",id:"func-taskquery-updateallslice",children:[]},{value:"func (taskQuery) Upsert",id:"func-taskquery-upsert",children:[]}]},{value:"type taskR",id:"type-taskr",children:[{value:"func (*taskR) NewStruct",id:"func-taskr-newstruct",children:[]}]},{value:"type updateCache",id:"type-updatecache",children:[]},{value:"type userAnnotationL",id:"type-userannotationl",children:[{value:"func (userAnnotationL) LoadResource",id:"func-userannotationl-loadresource",children:[]}]},{value:"type userAnnotationQuery",id:"type-userannotationquery",children:[{value:"func UserAnnotations",id:"func-userannotations",children:[]},{value:"func (userAnnotationQuery) All",id:"func-userannotationquery-all",children:[]},{value:"func (userAnnotationQuery) Count",id:"func-userannotationquery-count",children:[]},{value:"func (userAnnotationQuery) Delete",id:"func-userannotationquery-delete",children:[]},{value:"func (userAnnotationQuery) DeleteAll",id:"func-userannotationquery-deleteall",children:[]},{value:"func (userAnnotationQuery) DeleteAllSlice",id:"func-userannotationquery-deleteallslice",children:[]},{value:"func (userAnnotationQuery) Exists",id:"func-userannotationquery-exists",children:[]},{value:"func (userAnnotationQuery) Insert",id:"func-userannotationquery-insert",children:[]},{value:"func (userAnnotationQuery) One",id:"func-userannotationquery-one",children:[]},{value:"func (userAnnotationQuery) Reload",id:"func-userannotationquery-reload",children:[]},{value:"func (userAnnotationQuery) ReloadAll",id:"func-userannotationquery-reloadall",children:[]},{value:"func (userAnnotationQuery) RemoveResource",id:"func-userannotationquery-removeresource",children:[]},{value:"func (userAnnotationQuery) Resource",id:"func-userannotationquery-resource",children:[]},{value:"func (userAnnotationQuery) SetResource",id:"func-userannotationquery-setresource",children:[]},{value:"func (userAnnotationQuery) Update",id:"func-userannotationquery-update",children:[]},{value:"func (userAnnotationQuery) UpdateAll",id:"func-userannotationquery-updateall",children:[]},{value:"func (userAnnotationQuery) UpdateAllSlice",id:"func-userannotationquery-updateallslice",children:[]},{value:"func (userAnnotationQuery) Upsert",id:"func-userannotationquery-upsert",children:[]}]},{value:"type userAnnotationR",id:"type-userannotationr",children:[{value:"func (*userAnnotationR) NewStruct",id:"func-userannotationr-newstruct",children:[]}]},{value:"type userL",id:"type-userl",children:[{value:"func (userL) LoadDefaultSpace",id:"func-userl-loaddefaultspace",children:[]},{value:"func (userL) LoadOrganizationsAuditors",id:"func-userl-loadorganizationsauditors",children:[]},{value:"func (userL) LoadOrganizationsBillingManagers",id:"func-userl-loadorganizationsbillingmanagers",children:[]},{value:"func (userL) LoadOrganizationsManagers",id:"func-userl-loadorganizationsmanagers",children:[]},{value:"func (userL) LoadOrganizationsUsers",id:"func-userl-loadorganizationsusers",children:[]},{value:"func (userL) LoadResourceUserAnnotations",id:"func-userl-loadresourceuserannotations",children:[]},{value:"func (userL) LoadResourceUserLabels",id:"func-userl-loadresourceuserlabels",children:[]},{value:"func (userL) LoadSpacesApplicationSupporters",id:"func-userl-loadspacesapplicationsupporters",children:[]},{value:"func (userL) LoadSpacesAuditors",id:"func-userl-loadspacesauditors",children:[]},{value:"func (userL) LoadSpacesDevelopers",id:"func-userl-loadspacesdevelopers",children:[]},{value:"func (userL) LoadSpacesManagers",id:"func-userl-loadspacesmanagers",children:[]}]},{value:"type userLabelL",id:"type-userlabell",children:[{value:"func (userLabelL) LoadResource",id:"func-userlabell-loadresource",children:[]}]},{value:"type userLabelQuery",id:"type-userlabelquery",children:[{value:"func UserLabels",id:"func-userlabels",children:[]},{value:"func (userLabelQuery) All",id:"func-userlabelquery-all",children:[]},{value:"func (userLabelQuery) Count",id:"func-userlabelquery-count",children:[]},{value:"func (userLabelQuery) Delete",id:"func-userlabelquery-delete",children:[]},{value:"func (userLabelQuery) DeleteAll",id:"func-userlabelquery-deleteall",children:[]},{value:"func (userLabelQuery) DeleteAllSlice",id:"func-userlabelquery-deleteallslice",children:[]},{value:"func (userLabelQuery) Exists",id:"func-userlabelquery-exists",children:[]},{value:"func (userLabelQuery) Insert",id:"func-userlabelquery-insert",children:[]},{value:"func (userLabelQuery) One",id:"func-userlabelquery-one",children:[]},{value:"func (userLabelQuery) Reload",id:"func-userlabelquery-reload",children:[]},{value:"func (userLabelQuery) ReloadAll",id:"func-userlabelquery-reloadall",children:[]},{value:"func (userLabelQuery) RemoveResource",id:"func-userlabelquery-removeresource",children:[]},{value:"func (userLabelQuery) Resource",id:"func-userlabelquery-resource",children:[]},{value:"func (userLabelQuery) SetResource",id:"func-userlabelquery-setresource",children:[]},{value:"func (userLabelQuery) Update",id:"func-userlabelquery-update",children:[]},{value:"func (userLabelQuery) UpdateAll",id:"func-userlabelquery-updateall",children:[]},{value:"func (userLabelQuery) UpdateAllSlice",id:"func-userlabelquery-updateallslice",children:[]},{value:"func (userLabelQuery) Upsert",id:"func-userlabelquery-upsert",children:[]}]},{value:"type userLabelR",id:"type-userlabelr",children:[{value:"func (*userLabelR) NewStruct",id:"func-userlabelr-newstruct",children:[]}]},{value:"type userQuery",id:"type-userquery",children:[{value:"func Users",id:"func-users",children:[]},{value:"func (userQuery) AddOrganizationsAuditors",id:"func-userquery-addorganizationsauditors",children:[]},{value:"func (userQuery) AddOrganizationsBillingManagers",id:"func-userquery-addorganizationsbillingmanagers",children:[]},{value:"func (userQuery) AddOrganizationsManagers",id:"func-userquery-addorganizationsmanagers",children:[]},{value:"func (userQuery) AddOrganizationsUsers",id:"func-userquery-addorganizationsusers",children:[]},{value:"func (userQuery) AddResourceUserAnnotations",id:"func-userquery-addresourceuserannotations",children:[]},{value:"func (userQuery) AddResourceUserLabels",id:"func-userquery-addresourceuserlabels",children:[]},{value:"func (userQuery) AddSpacesApplicationSupporters",id:"func-userquery-addspacesapplicationsupporters",children:[]},{value:"func (userQuery) AddSpacesAuditors",id:"func-userquery-addspacesauditors",children:[]},{value:"func (userQuery) AddSpacesDevelopers",id:"func-userquery-addspacesdevelopers",children:[]},{value:"func (userQuery) AddSpacesManagers",id:"func-userquery-addspacesmanagers",children:[]},{value:"func (userQuery) All",id:"func-userquery-all",children:[]},{value:"func (userQuery) Count",id:"func-userquery-count",children:[]},{value:"func (userQuery) DefaultSpace",id:"func-userquery-defaultspace",children:[]},{value:"func (userQuery) Delete",id:"func-userquery-delete",children:[]},{value:"func (userQuery) DeleteAll",id:"func-userquery-deleteall",children:[]},{value:"func (userQuery) DeleteAllSlice",id:"func-userquery-deleteallslice",children:[]},{value:"func (userQuery) Exists",id:"func-userquery-exists",children:[]},{value:"func (userQuery) Insert",id:"func-userquery-insert",children:[]},{value:"func (userQuery) One",id:"func-userquery-one",children:[]},{value:"func (userQuery) OrganizationsAuditors",id:"func-userquery-organizationsauditors",children:[]},{value:"func (userQuery) OrganizationsBillingManagers",id:"func-userquery-organizationsbillingmanagers",children:[]},{value:"func (userQuery) OrganizationsManagers",id:"func-userquery-organizationsmanagers",children:[]},{value:"func (userQuery) OrganizationsUsers",id:"func-userquery-organizationsusers",children:[]},{value:"func (userQuery) Reload",id:"func-userquery-reload",children:[]},{value:"func (userQuery) ReloadAll",id:"func-userquery-reloadall",children:[]},{value:"func (userQuery) RemoveDefaultSpace",id:"func-userquery-removedefaultspace",children:[]},{value:"func (userQuery) RemoveResourceUserAnnotations",id:"func-userquery-removeresourceuserannotations",children:[]},{value:"func (userQuery) RemoveResourceUserLabels",id:"func-userquery-removeresourceuserlabels",children:[]},{value:"func (userQuery) ResourceUserAnnotations",id:"func-userquery-resourceuserannotations",children:[]},{value:"func (userQuery) ResourceUserLabels",id:"func-userquery-resourceuserlabels",children:[]},{value:"func (userQuery) SetDefaultSpace",id:"func-userquery-setdefaultspace",children:[]},{value:"func (userQuery) SetResourceUserAnnotations",id:"func-userquery-setresourceuserannotations",children:[]},{value:"func (userQuery) SetResourceUserLabels",id:"func-userquery-setresourceuserlabels",children:[]},{value:"func (userQuery) SpacesApplicationSupporters",id:"func-userquery-spacesapplicationsupporters",children:[]},{value:"func (userQuery) SpacesAuditors",id:"func-userquery-spacesauditors",children:[]},{value:"func (userQuery) SpacesDevelopers",id:"func-userquery-spacesdevelopers",children:[]},{value:"func (userQuery) SpacesManagers",id:"func-userquery-spacesmanagers",children:[]},{value:"func (userQuery) Update",id:"func-userquery-update",children:[]},{value:"func (userQuery) UpdateAll",id:"func-userquery-updateall",children:[]},{value:"func (userQuery) UpdateAllSlice",id:"func-userquery-updateallslice",children:[]},{value:"func (userQuery) Upsert",id:"func-userquery-upsert",children:[]}]},{value:"type userR",id:"type-userr",children:[{value:"func (*userR) NewStruct",id:"func-userr-newstruct",children:[]}]},{value:"type whereHelperbool",id:"type-wherehelperbool",children:[{value:"func (whereHelperbool) EQ",id:"func-wherehelperbool-eq",children:[]},{value:"func (whereHelperbool) GT",id:"func-wherehelperbool-gt",children:[]},{value:"func (whereHelperbool) GTE",id:"func-wherehelperbool-gte",children:[]},{value:"func (whereHelperbool) LT",id:"func-wherehelperbool-lt",children:[]},{value:"func (whereHelperbool) LTE",id:"func-wherehelperbool-lte",children:[]},{value:"func (whereHelperbool) NEQ",id:"func-wherehelperbool-neq",children:[]}]},{value:"type whereHelperint",id:"type-wherehelperint",children:[{value:"func (whereHelperint) EQ",id:"func-wherehelperint-eq",children:[]},{value:"func (whereHelperint) GT",id:"func-wherehelperint-gt",children:[]},{value:"func (whereHelperint) GTE",id:"func-wherehelperint-gte",children:[]},{value:"func (whereHelperint) IN",id:"func-wherehelperint-in",children:[]},{value:"func (whereHelperint) LT",id:"func-wherehelperint-lt",children:[]},{value:"func (whereHelperint) LTE",id:"func-wherehelperint-lte",children:[]},{value:"func (whereHelperint) NEQ",id:"func-wherehelperint-neq",children:[]},{value:"func (whereHelperint) NIN",id:"func-wherehelperint-nin",children:[]}]},{value:"type whereHelpernull_Bool",id:"type-wherehelpernull_bool",children:[{value:"func (whereHelpernull_Bool) EQ",id:"func-wherehelpernull_bool-eq",children:[]},{value:"func (whereHelpernull_Bool) GT",id:"func-wherehelpernull_bool-gt",children:[]},{value:"func (whereHelpernull_Bool) GTE",id:"func-wherehelpernull_bool-gte",children:[]},{value:"func (whereHelpernull_Bool) IsNotNull",id:"func-wherehelpernull_bool-isnotnull",children:[]},{value:"func (whereHelpernull_Bool) IsNull",id:"func-wherehelpernull_bool-isnull",children:[]},{value:"func (whereHelpernull_Bool) LT",id:"func-wherehelpernull_bool-lt",children:[]},{value:"func (whereHelpernull_Bool) LTE",id:"func-wherehelpernull_bool-lte",children:[]},{value:"func (whereHelpernull_Bool) NEQ",id:"func-wherehelpernull_bool-neq",children:[]}]},{value:"type whereHelpernull_Int",id:"type-wherehelpernull_int",children:[{value:"func (whereHelpernull_Int) EQ",id:"func-wherehelpernull_int-eq",children:[]},{value:"func (whereHelpernull_Int) GT",id:"func-wherehelpernull_int-gt",children:[]},{value:"func (whereHelpernull_Int) GTE",id:"func-wherehelpernull_int-gte",children:[]},{value:"func (whereHelpernull_Int) IsNotNull",id:"func-wherehelpernull_int-isnotnull",children:[]},{value:"func (whereHelpernull_Int) IsNull",id:"func-wherehelpernull_int-isnull",children:[]},{value:"func (whereHelpernull_Int) LT",id:"func-wherehelpernull_int-lt",children:[]},{value:"func (whereHelpernull_Int) LTE",id:"func-wherehelpernull_int-lte",children:[]},{value:"func (whereHelpernull_Int) NEQ",id:"func-wherehelpernull_int-neq",children:[]}]},{value:"type whereHelpernull_String",id:"type-wherehelpernull_string",children:[{value:"func (whereHelpernull_String) EQ",id:"func-wherehelpernull_string-eq",children:[]},{value:"func (whereHelpernull_String) GT",id:"func-wherehelpernull_string-gt",children:[]},{value:"func (whereHelpernull_String) GTE",id:"func-wherehelpernull_string-gte",children:[]},{value:"func (whereHelpernull_String) IsNotNull",id:"func-wherehelpernull_string-isnotnull",children:[]},{value:"func (whereHelpernull_String) IsNull",id:"func-wherehelpernull_string-isnull",children:[]},{value:"func (whereHelpernull_String) LT",id:"func-wherehelpernull_string-lt",children:[]},{value:"func (whereHelpernull_String) LTE",id:"func-wherehelpernull_string-lte",children:[]},{value:"func (whereHelpernull_String) NEQ",id:"func-wherehelpernull_string-neq",children:[]}]},{value:"type whereHelpernull_Time",id:"type-wherehelpernull_time",children:[{value:"func (whereHelpernull_Time) EQ",id:"func-wherehelpernull_time-eq",children:[]},{value:"func (whereHelpernull_Time) GT",id:"func-wherehelpernull_time-gt",children:[]},{value:"func (whereHelpernull_Time) GTE",id:"func-wherehelpernull_time-gte",children:[]},{value:"func (whereHelpernull_Time) IsNotNull",id:"func-wherehelpernull_time-isnotnull",children:[]},{value:"func (whereHelpernull_Time) IsNull",id:"func-wherehelpernull_time-isnull",children:[]},{value:"func (whereHelpernull_Time) LT",id:"func-wherehelpernull_time-lt",children:[]},{value:"func (whereHelpernull_Time) LTE",id:"func-wherehelpernull_time-lte",children:[]},{value:"func (whereHelpernull_Time) NEQ",id:"func-wherehelpernull_time-neq",children:[]}]},{value:"type whereHelperstring",id:"type-wherehelperstring",children:[{value:"func (whereHelperstring) EQ",id:"func-wherehelperstring-eq",children:[]},{value:"func (whereHelperstring) GT",id:"func-wherehelperstring-gt",children:[]},{value:"func (whereHelperstring) GTE",id:"func-wherehelperstring-gte",children:[]},{value:"func (whereHelperstring) IN",id:"func-wherehelperstring-in",children:[]},{value:"func (whereHelperstring) LT",id:"func-wherehelperstring-lt",children:[]},{value:"func (whereHelperstring) LTE",id:"func-wherehelperstring-lte",children:[]},{value:"func (whereHelperstring) NEQ",id:"func-wherehelperstring-neq",children:[]},{value:"func (whereHelperstring) NIN",id:"func-wherehelperstring-nin",children:[]}]},{value:"type whereHelpertime_Time",id:"type-wherehelpertime_time",children:[{value:"func (whereHelpertime_Time) EQ",id:"func-wherehelpertime_time-eq",children:[]},{value:"func (whereHelpertime_Time) GT",id:"func-wherehelpertime_time-gt",children:[]},{value:"func (whereHelpertime_Time) GTE",id:"func-wherehelpertime_time-gte",children:[]},{value:"func (whereHelpertime_Time) LT",id:"func-wherehelpertime_time-lt",children:[]},{value:"func (whereHelpertime_Time) LTE",id:"func-wherehelpertime_time-lte",children:[]},{value:"func (whereHelpertime_Time) NEQ",id:"func-wherehelpertime_time-neq",children:[]}]}],p={toc:s};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"models"},"models"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'import "github.com/cloudfoundry/go-cf-api/internal/storage/db/models"\n')),(0,o.kt)("h2",{id:"index"},"Index"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#variables"},"Variables")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appannotationexists"},"func AppAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appeventexists"},"func AppEventExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appexists"},"func AppExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-applabelexists"},"func AppLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appusageeventexists"},"func AppUsageEventExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildannotationexists"},"func BuildAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildexists"},"func BuildExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildlabelexists"},"func BuildLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackannotationexists"},"func BuildpackAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackexists"},"func BuildpackExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklabelexists"},"func BuildpackLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecyclebuildpackexists"},"func BuildpackLifecycleBuildpackExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecycledatumexists"},"func BuildpackLifecycleDatumExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-clockjobexists"},"func ClockJobExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-delayedjobexists"},"func DelayedJobExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentannotationexists"},"func DeploymentAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentexists"},"func DeploymentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentlabelexists"},"func DeploymentLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentprocessexists"},"func DeploymentProcessExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainannotationexists"},"func DomainAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainexists"},"func DomainExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainlabelexists"},"func DomainLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletannotationexists"},"func DropletAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletexists"},"func DropletExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletlabelexists"},"func DropletLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-encryptionkeysentinelexists"},"func EncryptionKeySentinelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-envgroupexists"},"func EnvGroupExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-eventexists"},"func EventExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-featureflagexists"},"func FeatureFlagExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentannotationexists"},"func IsolationSegmentAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentexists"},"func IsolationSegmentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentlabelexists"},"func IsolationSegmentLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobexists"},"func JobExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobwarningexists"},"func JobWarningExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledatumexists"},"func KpackLifecycleDatumExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-lockingexists"},"func LockingExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-newquery"},"func NewQuery(mods ...qm.QueryMod) *queries.Query")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationannotationexists"},"func OrganizationAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationexists"},"func OrganizationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationlabelexists"},"func OrganizationLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsauditorexists"},"func OrganizationsAuditorExists(ctx context.Context, exec boil.ContextExecutor, organizationsAuditorsPK int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsbillingmanagerexists"},"func OrganizationsBillingManagerExists(ctx context.Context, exec boil.ContextExecutor, organizationsBillingManagersPK int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsmanagerexists"},"func OrganizationsManagerExists(ctx context.Context, exec boil.ContextExecutor, organizationsManagersPK int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsprivatedomainexists"},"func OrganizationsPrivateDomainExists(ctx context.Context, exec boil.ContextExecutor, organizationsPrivateDomainsPK int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsuserexists"},"func OrganizationsUserExists(ctx context.Context, exec boil.ContextExecutor, organizationsUsersPK int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-orphanedblobexists"},"func OrphanedBlobExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packageannotationexists"},"func PackageAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packageexists"},"func PackageExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagelabelexists"},"func PackageLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processannotationexists"},"func ProcessAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processexists"},"func ProcessExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processlabelexists"},"func ProcessLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-quotadefinitionexists"},"func QuotaDefinitionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-quote"},"func Quote(in string) string")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-requestcountexists"},"func RequestCountExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionannotationexists"},"func RevisionAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionexists"},"func RevisionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionlabelexists"},"func RevisionLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionprocesscommandexists"},"func RevisionProcessCommandExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarexists"},"func RevisionSidecarExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarprocesstypeexists"},"func RevisionSidecarProcessTypeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routeannotationexists"},"func RouteAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingannotationexists"},"func RouteBindingAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingexists"},"func RouteBindingExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindinglabelexists"},"func RouteBindingLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingoperationexists"},"func RouteBindingOperationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routeexists"},"func RouteExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routelabelexists"},"func RouteLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routemappingexists"},"func RouteMappingExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-schemamigrationexists"},"func SchemaMigrationExists(ctx context.Context, exec boil.ContextExecutor, filename string) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupexists"},"func SecurityGroupExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupsspaceexists"},"func SecurityGroupsSpaceExists(ctx context.Context, exec boil.ContextExecutor, securityGroupsSpacesPK int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingannotationexists"},"func ServiceBindingAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingexists"},"func ServiceBindingExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindinglabelexists"},"func ServiceBindingLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingoperationexists"},"func ServiceBindingOperationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerannotationexists"},"func ServiceBrokerAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerexists"},"func ServiceBrokerExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerlabelexists"},"func ServiceBrokerLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestannotationexists"},"func ServiceBrokerUpdateRequestAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestexists"},"func ServiceBrokerUpdateRequestExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestlabelexists"},"func ServiceBrokerUpdateRequestLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicedashboardclientexists"},"func ServiceDashboardClientExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceexists"},"func ServiceExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceannotationexists"},"func ServiceInstanceAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceexists"},"func ServiceInstanceExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancelabelexists"},"func ServiceInstanceLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceoperationexists"},"func ServiceInstanceOperationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyannotationexists"},"func ServiceKeyAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyexists"},"func ServiceKeyExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeylabelexists"},"func ServiceKeyLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyoperationexists"},"func ServiceKeyOperationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferingannotationexists"},"func ServiceOfferingAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferinglabelexists"},"func ServiceOfferingLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanannotationexists"},"func ServicePlanAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanexists"},"func ServicePlanExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanlabelexists"},"func ServicePlanLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanvisibilityexists"},"func ServicePlanVisibilityExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceusageeventexists"},"func ServiceUsageEventExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarexists"},"func SidecarExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarprocesstypeexists"},"func SidecarProcessTypeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spaceannotationexists"},"func SpaceAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spaceexists"},"func SpaceExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacelabelexists"},"func SpaceLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitionexists"},"func SpaceQuotaDefinitionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesapplicationsupporterexists"},"func SpacesApplicationSupporterExists(ctx context.Context, exec boil.ContextExecutor, spacesApplicationSupportersPK int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesauditorexists"},"func SpacesAuditorExists(ctx context.Context, exec boil.ContextExecutor, spacesAuditorsPK int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesdeveloperexists"},"func SpacesDeveloperExists(ctx context.Context, exec boil.ContextExecutor, spacesDevelopersPK int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesmanagerexists"},"func SpacesManagerExists(ctx context.Context, exec boil.ContextExecutor, spacesManagersPK int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackannotationexists"},"func StackAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackexists"},"func StackExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stacklabelexists"},"func StackLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stagingsecuritygroupsspaceexists"},"func StagingSecurityGroupsSpaceExists(ctx context.Context, exec boil.ContextExecutor, stagingSecurityGroupsSpacesPK int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskannotationexists"},"func TaskAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskexists"},"func TaskExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-tasklabelexists"},"func TaskLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userannotationexists"},"func UserAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userexists"},"func UserExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userlabelexists"},"func UserLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildupsertquerypostgres"},"func buildUpsertQueryPostgres(dia drivers.Dialect, tableName string, updateOnConflict bool, ret, update, conflict, whitelist []string) string")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-makecachekey"},"func makeCacheKey(cols boil.Columns, nzDefaults []string) string")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-removeisolationsegmentsfromorganizationsslice"},"func removeIsolationSegmentsFromOrganizationsSlice(o ",(0,o.kt)("em",{parentName:"a"},"Organization, related []"),"IsolationSegment)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-removeorganizationsfromisolationsegmentsslice"},"func removeOrganizationsFromIsolationSegmentsSlice(o ",(0,o.kt)("em",{parentName:"a"},"IsolationSegment, related []"),"Organization)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-removesharedserviceinstancesfromspacesslice"},"func removeSharedServiceInstancesFromSpacesSlice(o ",(0,o.kt)("em",{parentName:"a"},"Space, related []"),"ServiceInstance)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-removespacesfromsharedserviceinstancesslice"},"func removeSpacesFromSharedServiceInstancesSlice(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstance, related []"),"Space)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-app"},"type App"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findapp"},"func FindApp(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*App, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appannotation"},"type AppAnnotation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findappannotation"},"func FindAppAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AppAnnotation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appannotationdeleter"},"type AppAnnotationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appannotationfinder"},"type AppAnnotationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appannotationfinisher"},"type AppAnnotationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appannotationinserter"},"type AppAnnotationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appannotationreloader"},"type AppAnnotationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appannotationslice"},"type AppAnnotationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appannotationupdater"},"type AppAnnotationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appannotationupserter"},"type AppAnnotationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appdeleter"},"type AppDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appevent"},"type AppEvent"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findappevent"},"func FindAppEvent(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AppEvent, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appeventdeleter"},"type AppEventDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appeventfinder"},"type AppEventFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appeventfinisher"},"type AppEventFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appeventinserter"},"type AppEventInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appeventreloader"},"type AppEventReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appeventslice"},"type AppEventSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appeventupdater"},"type AppEventUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appeventupserter"},"type AppEventUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appfinder"},"type AppFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appfinisher"},"type AppFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appinserter"},"type AppInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-applabel"},"type AppLabel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findapplabel"},"func FindAppLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AppLabel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-applabeldeleter"},"type AppLabelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-applabelfinder"},"type AppLabelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-applabelfinisher"},"type AppLabelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-applabelinserter"},"type AppLabelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-applabelreloader"},"type AppLabelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-applabelslice"},"type AppLabelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-applabelupdater"},"type AppLabelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-applabelupserter"},"type AppLabelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appreloader"},"type AppReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appslice"},"type AppSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appupdater"},"type AppUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appupserter"},"type AppUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appusageevent"},"type AppUsageEvent"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findappusageevent"},"func FindAppUsageEvent(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AppUsageEvent, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appusageeventdeleter"},"type AppUsageEventDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appusageeventfinder"},"type AppUsageEventFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appusageeventfinisher"},"type AppUsageEventFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appusageeventinserter"},"type AppUsageEventInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appusageeventreloader"},"type AppUsageEventReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appusageeventslice"},"type AppUsageEventSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appusageeventupdater"},"type AppUsageEventUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appusageeventupserter"},"type AppUsageEventUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-build"},"type Build"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findbuild"},"func FindBuild(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Build, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildannotation"},"type BuildAnnotation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findbuildannotation"},"func FindBuildAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BuildAnnotation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildannotationdeleter"},"type BuildAnnotationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildannotationfinder"},"type BuildAnnotationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildannotationfinisher"},"type BuildAnnotationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildannotationinserter"},"type BuildAnnotationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildannotationreloader"},"type BuildAnnotationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildannotationslice"},"type BuildAnnotationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildannotationupdater"},"type BuildAnnotationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildannotationupserter"},"type BuildAnnotationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-builddeleter"},"type BuildDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildfinder"},"type BuildFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildfinisher"},"type BuildFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildinserter"},"type BuildInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildlabel"},"type BuildLabel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findbuildlabel"},"func FindBuildLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BuildLabel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildlabeldeleter"},"type BuildLabelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildlabelfinder"},"type BuildLabelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildlabelfinisher"},"type BuildLabelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildlabelinserter"},"type BuildLabelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildlabelreloader"},"type BuildLabelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildlabelslice"},"type BuildLabelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildlabelupdater"},"type BuildLabelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildlabelupserter"},"type BuildLabelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildreloader"},"type BuildReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildslice"},"type BuildSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildupdater"},"type BuildUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildupserter"},"type BuildUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpack"},"type Buildpack"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findbuildpack"},"func FindBuildpack(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Buildpack, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpackannotation"},"type BuildpackAnnotation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findbuildpackannotation"},"func FindBuildpackAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BuildpackAnnotation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpackannotationdeleter"},"type BuildpackAnnotationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpackannotationfinder"},"type BuildpackAnnotationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpackannotationfinisher"},"type BuildpackAnnotationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpackannotationinserter"},"type BuildpackAnnotationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpackannotationreloader"},"type BuildpackAnnotationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpackannotationslice"},"type BuildpackAnnotationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpackannotationupdater"},"type BuildpackAnnotationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpackannotationupserter"},"type BuildpackAnnotationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpackdeleter"},"type BuildpackDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpackfinder"},"type BuildpackFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpackfinisher"},"type BuildpackFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpackinserter"},"type BuildpackInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklabel"},"type BuildpackLabel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findbuildpacklabel"},"func FindBuildpackLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BuildpackLabel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklabeldeleter"},"type BuildpackLabelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklabelfinder"},"type BuildpackLabelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklabelfinisher"},"type BuildpackLabelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklabelinserter"},"type BuildpackLabelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklabelreloader"},"type BuildpackLabelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklabelslice"},"type BuildpackLabelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklabelupdater"},"type BuildpackLabelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklabelupserter"},"type BuildpackLabelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklifecyclebuildpack"},"type BuildpackLifecycleBuildpack"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findbuildpacklifecyclebuildpack"},"func FindBuildpackLifecycleBuildpack(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BuildpackLifecycleBuildpack, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklifecyclebuildpackdeleter"},"type BuildpackLifecycleBuildpackDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklifecyclebuildpackfinder"},"type BuildpackLifecycleBuildpackFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklifecyclebuildpackfinisher"},"type BuildpackLifecycleBuildpackFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklifecyclebuildpackinserter"},"type BuildpackLifecycleBuildpackInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklifecyclebuildpackreloader"},"type BuildpackLifecycleBuildpackReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklifecyclebuildpackslice"},"type BuildpackLifecycleBuildpackSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklifecyclebuildpackupdater"},"type BuildpackLifecycleBuildpackUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklifecyclebuildpackupserter"},"type BuildpackLifecycleBuildpackUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklifecycledatum"},"type BuildpackLifecycleDatum"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findbuildpacklifecycledatum"},"func FindBuildpackLifecycleDatum(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BuildpackLifecycleDatum, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklifecycledatumdeleter"},"type BuildpackLifecycleDatumDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklifecycledatumfinder"},"type BuildpackLifecycleDatumFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklifecycledatumfinisher"},"type BuildpackLifecycleDatumFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklifecycledatuminserter"},"type BuildpackLifecycleDatumInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklifecycledatumreloader"},"type BuildpackLifecycleDatumReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklifecycledatumslice"},"type BuildpackLifecycleDatumSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklifecycledatumupdater"},"type BuildpackLifecycleDatumUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklifecycledatumupserter"},"type BuildpackLifecycleDatumUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpackreloader"},"type BuildpackReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpackslice"},"type BuildpackSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpackupdater"},"type BuildpackUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpackupserter"},"type BuildpackUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-clockjob"},"type ClockJob"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findclockjob"},"func FindClockJob(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ClockJob, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-clockjobdeleter"},"type ClockJobDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-clockjobfinder"},"type ClockJobFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-clockjobfinisher"},"type ClockJobFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-clockjobinserter"},"type ClockJobInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-clockjobreloader"},"type ClockJobReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-clockjobslice"},"type ClockJobSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-clockjobupdater"},"type ClockJobUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-clockjobupserter"},"type ClockJobUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-delayedjob"},"type DelayedJob"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-finddelayedjob"},"func FindDelayedJob(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DelayedJob, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-delayedjobdeleter"},"type DelayedJobDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-delayedjobfinder"},"type DelayedJobFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-delayedjobfinisher"},"type DelayedJobFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-delayedjobinserter"},"type DelayedJobInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-delayedjobreloader"},"type DelayedJobReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-delayedjobslice"},"type DelayedJobSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-delayedjobupdater"},"type DelayedJobUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-delayedjobupserter"},"type DelayedJobUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deployment"},"type Deployment"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-finddeployment"},"func FindDeployment(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Deployment, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentannotation"},"type DeploymentAnnotation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-finddeploymentannotation"},"func FindDeploymentAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DeploymentAnnotation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentannotationdeleter"},"type DeploymentAnnotationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentannotationfinder"},"type DeploymentAnnotationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentannotationfinisher"},"type DeploymentAnnotationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentannotationinserter"},"type DeploymentAnnotationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentannotationreloader"},"type DeploymentAnnotationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentannotationslice"},"type DeploymentAnnotationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentannotationupdater"},"type DeploymentAnnotationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentannotationupserter"},"type DeploymentAnnotationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentdeleter"},"type DeploymentDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentfinder"},"type DeploymentFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentfinisher"},"type DeploymentFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentinserter"},"type DeploymentInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentlabel"},"type DeploymentLabel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-finddeploymentlabel"},"func FindDeploymentLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DeploymentLabel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentlabeldeleter"},"type DeploymentLabelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentlabelfinder"},"type DeploymentLabelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentlabelfinisher"},"type DeploymentLabelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentlabelinserter"},"type DeploymentLabelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentlabelreloader"},"type DeploymentLabelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentlabelslice"},"type DeploymentLabelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentlabelupdater"},"type DeploymentLabelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentlabelupserter"},"type DeploymentLabelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentprocess"},"type DeploymentProcess"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-finddeploymentprocess"},"func FindDeploymentProcess(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DeploymentProcess, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentprocessdeleter"},"type DeploymentProcessDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentprocessfinder"},"type DeploymentProcessFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentprocessfinisher"},"type DeploymentProcessFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentprocessinserter"},"type DeploymentProcessInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentprocessreloader"},"type DeploymentProcessReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentprocessslice"},"type DeploymentProcessSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentprocessupdater"},"type DeploymentProcessUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentprocessupserter"},"type DeploymentProcessUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentreloader"},"type DeploymentReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentslice"},"type DeploymentSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentupdater"},"type DeploymentUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentupserter"},"type DeploymentUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domain"},"type Domain"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-finddomain"},"func FindDomain(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Domain, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainannotation"},"type DomainAnnotation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-finddomainannotation"},"func FindDomainAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DomainAnnotation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainannotationdeleter"},"type DomainAnnotationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainannotationfinder"},"type DomainAnnotationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainannotationfinisher"},"type DomainAnnotationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainannotationinserter"},"type DomainAnnotationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainannotationreloader"},"type DomainAnnotationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainannotationslice"},"type DomainAnnotationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainannotationupdater"},"type DomainAnnotationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainannotationupserter"},"type DomainAnnotationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domaindeleter"},"type DomainDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainfinder"},"type DomainFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainfinisher"},"type DomainFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domaininserter"},"type DomainInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainlabel"},"type DomainLabel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-finddomainlabel"},"func FindDomainLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DomainLabel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainlabeldeleter"},"type DomainLabelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainlabelfinder"},"type DomainLabelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainlabelfinisher"},"type DomainLabelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainlabelinserter"},"type DomainLabelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainlabelreloader"},"type DomainLabelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainlabelslice"},"type DomainLabelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainlabelupdater"},"type DomainLabelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainlabelupserter"},"type DomainLabelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainreloader"},"type DomainReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainslice"},"type DomainSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainupdater"},"type DomainUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainupserter"},"type DomainUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-droplet"},"type Droplet"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-finddroplet"},"func FindDroplet(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Droplet, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletannotation"},"type DropletAnnotation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-finddropletannotation"},"func FindDropletAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DropletAnnotation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletannotationdeleter"},"type DropletAnnotationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletannotationfinder"},"type DropletAnnotationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletannotationfinisher"},"type DropletAnnotationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletannotationinserter"},"type DropletAnnotationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletannotationreloader"},"type DropletAnnotationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletannotationslice"},"type DropletAnnotationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletannotationupdater"},"type DropletAnnotationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletannotationupserter"},"type DropletAnnotationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletdeleter"},"type DropletDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletfinder"},"type DropletFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletfinisher"},"type DropletFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletinserter"},"type DropletInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletlabel"},"type DropletLabel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-finddropletlabel"},"func FindDropletLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DropletLabel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletlabeldeleter"},"type DropletLabelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletlabelfinder"},"type DropletLabelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletlabelfinisher"},"type DropletLabelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletlabelinserter"},"type DropletLabelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletlabelreloader"},"type DropletLabelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletlabelslice"},"type DropletLabelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletlabelupdater"},"type DropletLabelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletlabelupserter"},"type DropletLabelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletreloader"},"type DropletReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletslice"},"type DropletSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletupdater"},"type DropletUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletupserter"},"type DropletUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-encryptionkeysentinel"},"type EncryptionKeySentinel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findencryptionkeysentinel"},"func FindEncryptionKeySentinel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*EncryptionKeySentinel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-encryptionkeysentineldeleter"},"type EncryptionKeySentinelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-encryptionkeysentinelfinder"},"type EncryptionKeySentinelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-encryptionkeysentinelfinisher"},"type EncryptionKeySentinelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-encryptionkeysentinelinserter"},"type EncryptionKeySentinelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-encryptionkeysentinelreloader"},"type EncryptionKeySentinelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-encryptionkeysentinelslice"},"type EncryptionKeySentinelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-encryptionkeysentinelupdater"},"type EncryptionKeySentinelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-encryptionkeysentinelupserter"},"type EncryptionKeySentinelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-envgroup"},"type EnvGroup"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findenvgroup"},"func FindEnvGroup(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*EnvGroup, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-envgroupdeleter"},"type EnvGroupDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-envgroupfinder"},"type EnvGroupFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-envgroupfinisher"},"type EnvGroupFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-envgroupinserter"},"type EnvGroupInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-envgroupreloader"},"type EnvGroupReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-envgroupslice"},"type EnvGroupSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-envgroupupdater"},"type EnvGroupUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-envgroupupserter"},"type EnvGroupUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-event"},"type Event"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findevent"},"func FindEvent(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Event, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-eventdeleter"},"type EventDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-eventfinder"},"type EventFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-eventfinisher"},"type EventFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-eventinserter"},"type EventInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-eventreloader"},"type EventReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-eventslice"},"type EventSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-eventupdater"},"type EventUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-eventupserter"},"type EventUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-featureflag"},"type FeatureFlag"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findfeatureflag"},"func FindFeatureFlag(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*FeatureFlag, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-featureflagdeleter"},"type FeatureFlagDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-featureflagfinder"},"type FeatureFlagFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-featureflagfinisher"},"type FeatureFlagFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-featureflaginserter"},"type FeatureFlagInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-featureflagreloader"},"type FeatureFlagReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-featureflagslice"},"type FeatureFlagSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-featureflagupdater"},"type FeatureFlagUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-featureflagupserter"},"type FeatureFlagUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegment"},"type IsolationSegment"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findisolationsegment"},"func FindIsolationSegment(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*IsolationSegment, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentannotation"},"type IsolationSegmentAnnotation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findisolationsegmentannotation"},"func FindIsolationSegmentAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*IsolationSegmentAnnotation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentannotationdeleter"},"type IsolationSegmentAnnotationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentannotationfinder"},"type IsolationSegmentAnnotationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentannotationfinisher"},"type IsolationSegmentAnnotationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentannotationinserter"},"type IsolationSegmentAnnotationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentannotationreloader"},"type IsolationSegmentAnnotationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentannotationslice"},"type IsolationSegmentAnnotationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentannotationupdater"},"type IsolationSegmentAnnotationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentannotationupserter"},"type IsolationSegmentAnnotationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentdeleter"},"type IsolationSegmentDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentfinder"},"type IsolationSegmentFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentfinisher"},"type IsolationSegmentFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentinserter"},"type IsolationSegmentInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentlabel"},"type IsolationSegmentLabel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findisolationsegmentlabel"},"func FindIsolationSegmentLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*IsolationSegmentLabel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentlabeldeleter"},"type IsolationSegmentLabelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentlabelfinder"},"type IsolationSegmentLabelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentlabelfinisher"},"type IsolationSegmentLabelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentlabelinserter"},"type IsolationSegmentLabelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentlabelreloader"},"type IsolationSegmentLabelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentlabelslice"},"type IsolationSegmentLabelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentlabelupdater"},"type IsolationSegmentLabelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentlabelupserter"},"type IsolationSegmentLabelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentreloader"},"type IsolationSegmentReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentslice"},"type IsolationSegmentSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentupdater"},"type IsolationSegmentUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentupserter"},"type IsolationSegmentUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-job"},"type Job"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findjob"},"func FindJob(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Job, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-jobdeleter"},"type JobDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-jobfinder"},"type JobFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-jobfinisher"},"type JobFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-jobinserter"},"type JobInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-jobreloader"},"type JobReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-jobslice"},"type JobSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-jobupdater"},"type JobUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-jobupserter"},"type JobUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-jobwarning"},"type JobWarning"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findjobwarning"},"func FindJobWarning(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*JobWarning, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-jobwarningdeleter"},"type JobWarningDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-jobwarningfinder"},"type JobWarningFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-jobwarningfinisher"},"type JobWarningFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-jobwarninginserter"},"type JobWarningInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-jobwarningreloader"},"type JobWarningReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-jobwarningslice"},"type JobWarningSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-jobwarningupdater"},"type JobWarningUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-jobwarningupserter"},"type JobWarningUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-kpacklifecycledatum"},"type KpackLifecycleDatum"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findkpacklifecycledatum"},"func FindKpackLifecycleDatum(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*KpackLifecycleDatum, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-kpacklifecycledatumdeleter"},"type KpackLifecycleDatumDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-kpacklifecycledatumfinder"},"type KpackLifecycleDatumFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-kpacklifecycledatumfinisher"},"type KpackLifecycleDatumFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-kpacklifecycledatuminserter"},"type KpackLifecycleDatumInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-kpacklifecycledatumreloader"},"type KpackLifecycleDatumReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-kpacklifecycledatumslice"},"type KpackLifecycleDatumSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-kpacklifecycledatumupdater"},"type KpackLifecycleDatumUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-kpacklifecycledatumupserter"},"type KpackLifecycleDatumUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-locking"},"type Locking"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findlocking"},"func FindLocking(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Locking, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-lockingdeleter"},"type LockingDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-lockingfinder"},"type LockingFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-lockingfinisher"},"type LockingFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-lockinginserter"},"type LockingInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-lockingreloader"},"type LockingReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-lockingslice"},"type LockingSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-lockingupdater"},"type LockingUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-lockingupserter"},"type LockingUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-m"},"type M")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organization"},"type Organization"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findorganization"},"func FindOrganization(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Organization, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationannotation"},"type OrganizationAnnotation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findorganizationannotation"},"func FindOrganizationAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*OrganizationAnnotation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationannotationdeleter"},"type OrganizationAnnotationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationannotationfinder"},"type OrganizationAnnotationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationannotationfinisher"},"type OrganizationAnnotationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationannotationinserter"},"type OrganizationAnnotationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationannotationreloader"},"type OrganizationAnnotationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationannotationslice"},"type OrganizationAnnotationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationannotationupdater"},"type OrganizationAnnotationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationannotationupserter"},"type OrganizationAnnotationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationdeleter"},"type OrganizationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationfinder"},"type OrganizationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationfinisher"},"type OrganizationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationinserter"},"type OrganizationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationlabel"},"type OrganizationLabel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findorganizationlabel"},"func FindOrganizationLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*OrganizationLabel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationlabeldeleter"},"type OrganizationLabelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationlabelfinder"},"type OrganizationLabelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationlabelfinisher"},"type OrganizationLabelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationlabelinserter"},"type OrganizationLabelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationlabelreloader"},"type OrganizationLabelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationlabelslice"},"type OrganizationLabelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationlabelupdater"},"type OrganizationLabelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationlabelupserter"},"type OrganizationLabelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationreloader"},"type OrganizationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationslice"},"type OrganizationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationupdater"},"type OrganizationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationupserter"},"type OrganizationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsauditor"},"type OrganizationsAuditor"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findorganizationsauditor"},"func FindOrganizationsAuditor(ctx context.Context, exec boil.ContextExecutor, organizationsAuditorsPK int, selectCols ...string) (*OrganizationsAuditor, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsauditordeleter"},"type OrganizationsAuditorDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsauditorfinder"},"type OrganizationsAuditorFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsauditorfinisher"},"type OrganizationsAuditorFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsauditorinserter"},"type OrganizationsAuditorInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsauditorreloader"},"type OrganizationsAuditorReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsauditorslice"},"type OrganizationsAuditorSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsauditorupdater"},"type OrganizationsAuditorUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsauditorupserter"},"type OrganizationsAuditorUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsbillingmanager"},"type OrganizationsBillingManager"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findorganizationsbillingmanager"},"func FindOrganizationsBillingManager(ctx context.Context, exec boil.ContextExecutor, organizationsBillingManagersPK int, selectCols ...string) (*OrganizationsBillingManager, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsbillingmanagerdeleter"},"type OrganizationsBillingManagerDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsbillingmanagerfinder"},"type OrganizationsBillingManagerFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsbillingmanagerfinisher"},"type OrganizationsBillingManagerFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsbillingmanagerinserter"},"type OrganizationsBillingManagerInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsbillingmanagerreloader"},"type OrganizationsBillingManagerReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsbillingmanagerslice"},"type OrganizationsBillingManagerSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsbillingmanagerupdater"},"type OrganizationsBillingManagerUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsbillingmanagerupserter"},"type OrganizationsBillingManagerUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsmanager"},"type OrganizationsManager"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findorganizationsmanager"},"func FindOrganizationsManager(ctx context.Context, exec boil.ContextExecutor, organizationsManagersPK int, selectCols ...string) (*OrganizationsManager, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsmanagerdeleter"},"type OrganizationsManagerDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsmanagerfinder"},"type OrganizationsManagerFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsmanagerfinisher"},"type OrganizationsManagerFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsmanagerinserter"},"type OrganizationsManagerInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsmanagerreloader"},"type OrganizationsManagerReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsmanagerslice"},"type OrganizationsManagerSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsmanagerupdater"},"type OrganizationsManagerUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsmanagerupserter"},"type OrganizationsManagerUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsprivatedomain"},"type OrganizationsPrivateDomain"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findorganizationsprivatedomain"},"func FindOrganizationsPrivateDomain(ctx context.Context, exec boil.ContextExecutor, organizationsPrivateDomainsPK int, selectCols ...string) (*OrganizationsPrivateDomain, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsprivatedomaindeleter"},"type OrganizationsPrivateDomainDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsprivatedomainfinder"},"type OrganizationsPrivateDomainFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsprivatedomainfinisher"},"type OrganizationsPrivateDomainFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsprivatedomaininserter"},"type OrganizationsPrivateDomainInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsprivatedomainreloader"},"type OrganizationsPrivateDomainReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsprivatedomainslice"},"type OrganizationsPrivateDomainSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsprivatedomainupdater"},"type OrganizationsPrivateDomainUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsprivatedomainupserter"},"type OrganizationsPrivateDomainUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsuser"},"type OrganizationsUser"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findorganizationsuser"},"func FindOrganizationsUser(ctx context.Context, exec boil.ContextExecutor, organizationsUsersPK int, selectCols ...string) (*OrganizationsUser, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsuserdeleter"},"type OrganizationsUserDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsuserfinder"},"type OrganizationsUserFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsuserfinisher"},"type OrganizationsUserFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsuserinserter"},"type OrganizationsUserInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsuserreloader"},"type OrganizationsUserReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsuserslice"},"type OrganizationsUserSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsuserupdater"},"type OrganizationsUserUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsuserupserter"},"type OrganizationsUserUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-orphanedblob"},"type OrphanedBlob"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findorphanedblob"},"func FindOrphanedBlob(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*OrphanedBlob, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-orphanedblobdeleter"},"type OrphanedBlobDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-orphanedblobfinder"},"type OrphanedBlobFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-orphanedblobfinisher"},"type OrphanedBlobFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-orphanedblobinserter"},"type OrphanedBlobInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-orphanedblobreloader"},"type OrphanedBlobReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-orphanedblobslice"},"type OrphanedBlobSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-orphanedblobupdater"},"type OrphanedBlobUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-orphanedblobupserter"},"type OrphanedBlobUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-package"},"type Package"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findpackage"},"func FindPackage(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Package, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packageannotation"},"type PackageAnnotation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findpackageannotation"},"func FindPackageAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PackageAnnotation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packageannotationdeleter"},"type PackageAnnotationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packageannotationfinder"},"type PackageAnnotationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packageannotationfinisher"},"type PackageAnnotationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packageannotationinserter"},"type PackageAnnotationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packageannotationreloader"},"type PackageAnnotationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packageannotationslice"},"type PackageAnnotationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packageannotationupdater"},"type PackageAnnotationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packageannotationupserter"},"type PackageAnnotationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packagedeleter"},"type PackageDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packagefinder"},"type PackageFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packagefinisher"},"type PackageFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packageinserter"},"type PackageInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packagelabel"},"type PackageLabel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findpackagelabel"},"func FindPackageLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PackageLabel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packagelabeldeleter"},"type PackageLabelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packagelabelfinder"},"type PackageLabelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packagelabelfinisher"},"type PackageLabelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packagelabelinserter"},"type PackageLabelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packagelabelreloader"},"type PackageLabelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packagelabelslice"},"type PackageLabelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packagelabelupdater"},"type PackageLabelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packagelabelupserter"},"type PackageLabelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packagereloader"},"type PackageReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packageslice"},"type PackageSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packageupdater"},"type PackageUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packageupserter"},"type PackageUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-process"},"type Process"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findprocess"},"func FindProcess(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Process, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processannotation"},"type ProcessAnnotation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findprocessannotation"},"func FindProcessAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ProcessAnnotation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processannotationdeleter"},"type ProcessAnnotationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processannotationfinder"},"type ProcessAnnotationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processannotationfinisher"},"type ProcessAnnotationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processannotationinserter"},"type ProcessAnnotationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processannotationreloader"},"type ProcessAnnotationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processannotationslice"},"type ProcessAnnotationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processannotationupdater"},"type ProcessAnnotationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processannotationupserter"},"type ProcessAnnotationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processdeleter"},"type ProcessDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processfinder"},"type ProcessFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processfinisher"},"type ProcessFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processinserter"},"type ProcessInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processlabel"},"type ProcessLabel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findprocesslabel"},"func FindProcessLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ProcessLabel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processlabeldeleter"},"type ProcessLabelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processlabelfinder"},"type ProcessLabelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processlabelfinisher"},"type ProcessLabelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processlabelinserter"},"type ProcessLabelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processlabelreloader"},"type ProcessLabelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processlabelslice"},"type ProcessLabelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processlabelupdater"},"type ProcessLabelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processlabelupserter"},"type ProcessLabelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processreloader"},"type ProcessReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processslice"},"type ProcessSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processupdater"},"type ProcessUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processupserter"},"type ProcessUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-quotadefinition"},"type QuotaDefinition"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findquotadefinition"},"func FindQuotaDefinition(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*QuotaDefinition, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-quotadefinitiondeleter"},"type QuotaDefinitionDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-quotadefinitionfinder"},"type QuotaDefinitionFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-quotadefinitionfinisher"},"type QuotaDefinitionFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-quotadefinitioninserter"},"type QuotaDefinitionInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-quotadefinitionreloader"},"type QuotaDefinitionReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-quotadefinitionslice"},"type QuotaDefinitionSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-quotadefinitionupdater"},"type QuotaDefinitionUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-quotadefinitionupserter"},"type QuotaDefinitionUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-requestcount"},"type RequestCount"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findrequestcount"},"func FindRequestCount(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RequestCount, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-requestcountdeleter"},"type RequestCountDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-requestcountfinder"},"type RequestCountFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-requestcountfinisher"},"type RequestCountFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-requestcountinserter"},"type RequestCountInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-requestcountreloader"},"type RequestCountReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-requestcountslice"},"type RequestCountSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-requestcountupdater"},"type RequestCountUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-requestcountupserter"},"type RequestCountUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revision"},"type Revision"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findrevision"},"func FindRevision(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Revision, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionannotation"},"type RevisionAnnotation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findrevisionannotation"},"func FindRevisionAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RevisionAnnotation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionannotationdeleter"},"type RevisionAnnotationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionannotationfinder"},"type RevisionAnnotationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionannotationfinisher"},"type RevisionAnnotationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionannotationinserter"},"type RevisionAnnotationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionannotationreloader"},"type RevisionAnnotationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionannotationslice"},"type RevisionAnnotationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionannotationupdater"},"type RevisionAnnotationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionannotationupserter"},"type RevisionAnnotationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisiondeleter"},"type RevisionDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionfinder"},"type RevisionFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionfinisher"},"type RevisionFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisioninserter"},"type RevisionInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionlabel"},"type RevisionLabel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findrevisionlabel"},"func FindRevisionLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RevisionLabel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionlabeldeleter"},"type RevisionLabelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionlabelfinder"},"type RevisionLabelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionlabelfinisher"},"type RevisionLabelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionlabelinserter"},"type RevisionLabelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionlabelreloader"},"type RevisionLabelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionlabelslice"},"type RevisionLabelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionlabelupdater"},"type RevisionLabelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionlabelupserter"},"type RevisionLabelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionprocesscommand"},"type RevisionProcessCommand"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findrevisionprocesscommand"},"func FindRevisionProcessCommand(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RevisionProcessCommand, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionprocesscommanddeleter"},"type RevisionProcessCommandDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionprocesscommandfinder"},"type RevisionProcessCommandFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionprocesscommandfinisher"},"type RevisionProcessCommandFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionprocesscommandinserter"},"type RevisionProcessCommandInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionprocesscommandreloader"},"type RevisionProcessCommandReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionprocesscommandslice"},"type RevisionProcessCommandSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionprocesscommandupdater"},"type RevisionProcessCommandUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionprocesscommandupserter"},"type RevisionProcessCommandUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionreloader"},"type RevisionReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionsidecar"},"type RevisionSidecar"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findrevisionsidecar"},"func FindRevisionSidecar(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RevisionSidecar, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionsidecardeleter"},"type RevisionSidecarDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionsidecarfinder"},"type RevisionSidecarFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionsidecarfinisher"},"type RevisionSidecarFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionsidecarinserter"},"type RevisionSidecarInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionsidecarprocesstype"},"type RevisionSidecarProcessType"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findrevisionsidecarprocesstype"},"func FindRevisionSidecarProcessType(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RevisionSidecarProcessType, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionsidecarprocesstypedeleter"},"type RevisionSidecarProcessTypeDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionsidecarprocesstypefinder"},"type RevisionSidecarProcessTypeFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionsidecarprocesstypefinisher"},"type RevisionSidecarProcessTypeFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionsidecarprocesstypeinserter"},"type RevisionSidecarProcessTypeInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionsidecarprocesstypereloader"},"type RevisionSidecarProcessTypeReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionsidecarprocesstypeslice"},"type RevisionSidecarProcessTypeSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionsidecarprocesstypeupdater"},"type RevisionSidecarProcessTypeUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionsidecarprocesstypeupserter"},"type RevisionSidecarProcessTypeUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionsidecarreloader"},"type RevisionSidecarReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionsidecarslice"},"type RevisionSidecarSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionsidecarupdater"},"type RevisionSidecarUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionsidecarupserter"},"type RevisionSidecarUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionslice"},"type RevisionSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionupdater"},"type RevisionUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionupserter"},"type RevisionUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-route"},"type Route"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findroute"},"func FindRoute(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Route, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routeannotation"},"type RouteAnnotation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findrouteannotation"},"func FindRouteAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RouteAnnotation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routeannotationdeleter"},"type RouteAnnotationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routeannotationfinder"},"type RouteAnnotationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routeannotationfinisher"},"type RouteAnnotationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routeannotationinserter"},"type RouteAnnotationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routeannotationreloader"},"type RouteAnnotationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routeannotationslice"},"type RouteAnnotationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routeannotationupdater"},"type RouteAnnotationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routeannotationupserter"},"type RouteAnnotationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebinding"},"type RouteBinding"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findroutebinding"},"func FindRouteBinding(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RouteBinding, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingannotation"},"type RouteBindingAnnotation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findroutebindingannotation"},"func FindRouteBindingAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RouteBindingAnnotation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingannotationdeleter"},"type RouteBindingAnnotationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingannotationfinder"},"type RouteBindingAnnotationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingannotationfinisher"},"type RouteBindingAnnotationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingannotationinserter"},"type RouteBindingAnnotationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingannotationreloader"},"type RouteBindingAnnotationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingannotationslice"},"type RouteBindingAnnotationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingannotationupdater"},"type RouteBindingAnnotationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingannotationupserter"},"type RouteBindingAnnotationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingdeleter"},"type RouteBindingDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingfinder"},"type RouteBindingFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingfinisher"},"type RouteBindingFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindinginserter"},"type RouteBindingInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindinglabel"},"type RouteBindingLabel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findroutebindinglabel"},"func FindRouteBindingLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RouteBindingLabel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindinglabeldeleter"},"type RouteBindingLabelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindinglabelfinder"},"type RouteBindingLabelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindinglabelfinisher"},"type RouteBindingLabelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindinglabelinserter"},"type RouteBindingLabelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindinglabelreloader"},"type RouteBindingLabelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindinglabelslice"},"type RouteBindingLabelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindinglabelupdater"},"type RouteBindingLabelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindinglabelupserter"},"type RouteBindingLabelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingoperation"},"type RouteBindingOperation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findroutebindingoperation"},"func FindRouteBindingOperation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RouteBindingOperation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingoperationdeleter"},"type RouteBindingOperationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingoperationfinder"},"type RouteBindingOperationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingoperationfinisher"},"type RouteBindingOperationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingoperationinserter"},"type RouteBindingOperationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingoperationreloader"},"type RouteBindingOperationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingoperationslice"},"type RouteBindingOperationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingoperationupdater"},"type RouteBindingOperationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingoperationupserter"},"type RouteBindingOperationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingreloader"},"type RouteBindingReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingslice"},"type RouteBindingSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingupdater"},"type RouteBindingUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingupserter"},"type RouteBindingUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routedeleter"},"type RouteDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routefinder"},"type RouteFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routefinisher"},"type RouteFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routeinserter"},"type RouteInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routelabel"},"type RouteLabel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findroutelabel"},"func FindRouteLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RouteLabel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routelabeldeleter"},"type RouteLabelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routelabelfinder"},"type RouteLabelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routelabelfinisher"},"type RouteLabelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routelabelinserter"},"type RouteLabelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routelabelreloader"},"type RouteLabelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routelabelslice"},"type RouteLabelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routelabelupdater"},"type RouteLabelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routelabelupserter"},"type RouteLabelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routemapping"},"type RouteMapping"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findroutemapping"},"func FindRouteMapping(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RouteMapping, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routemappingdeleter"},"type RouteMappingDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routemappingfinder"},"type RouteMappingFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routemappingfinisher"},"type RouteMappingFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routemappinginserter"},"type RouteMappingInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routemappingreloader"},"type RouteMappingReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routemappingslice"},"type RouteMappingSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routemappingupdater"},"type RouteMappingUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routemappingupserter"},"type RouteMappingUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routereloader"},"type RouteReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routeslice"},"type RouteSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routeupdater"},"type RouteUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routeupserter"},"type RouteUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-schemamigration"},"type SchemaMigration"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findschemamigration"},"func FindSchemaMigration(ctx context.Context, exec boil.ContextExecutor, filename string, selectCols ...string) (*SchemaMigration, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-schemamigrationdeleter"},"type SchemaMigrationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-schemamigrationfinder"},"type SchemaMigrationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-schemamigrationfinisher"},"type SchemaMigrationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-schemamigrationinserter"},"type SchemaMigrationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-schemamigrationreloader"},"type SchemaMigrationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-schemamigrationslice"},"type SchemaMigrationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-schemamigrationupdater"},"type SchemaMigrationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-schemamigrationupserter"},"type SchemaMigrationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-securitygroup"},"type SecurityGroup"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findsecuritygroup"},"func FindSecurityGroup(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SecurityGroup, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-securitygroupdeleter"},"type SecurityGroupDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-securitygroupfinder"},"type SecurityGroupFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-securitygroupfinisher"},"type SecurityGroupFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-securitygroupinserter"},"type SecurityGroupInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-securitygroupreloader"},"type SecurityGroupReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-securitygroupslice"},"type SecurityGroupSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-securitygroupupdater"},"type SecurityGroupUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-securitygroupupserter"},"type SecurityGroupUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-securitygroupsspace"},"type SecurityGroupsSpace"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findsecuritygroupsspace"},"func FindSecurityGroupsSpace(ctx context.Context, exec boil.ContextExecutor, securityGroupsSpacesPK int, selectCols ...string) (*SecurityGroupsSpace, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-securitygroupsspacedeleter"},"type SecurityGroupsSpaceDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-securitygroupsspacefinder"},"type SecurityGroupsSpaceFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-securitygroupsspacefinisher"},"type SecurityGroupsSpaceFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-securitygroupsspaceinserter"},"type SecurityGroupsSpaceInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-securitygroupsspacereloader"},"type SecurityGroupsSpaceReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-securitygroupsspaceslice"},"type SecurityGroupsSpaceSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-securitygroupsspaceupdater"},"type SecurityGroupsSpaceUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-securitygroupsspaceupserter"},"type SecurityGroupsSpaceUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-service"},"type Service"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findservice"},"func FindService(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Service, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebinding"},"type ServiceBinding"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findservicebinding"},"func FindServiceBinding(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBinding, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingannotation"},"type ServiceBindingAnnotation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findservicebindingannotation"},"func FindServiceBindingAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBindingAnnotation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingannotationdeleter"},"type ServiceBindingAnnotationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingannotationfinder"},"type ServiceBindingAnnotationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingannotationfinisher"},"type ServiceBindingAnnotationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingannotationinserter"},"type ServiceBindingAnnotationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingannotationreloader"},"type ServiceBindingAnnotationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingannotationslice"},"type ServiceBindingAnnotationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingannotationupdater"},"type ServiceBindingAnnotationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingannotationupserter"},"type ServiceBindingAnnotationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingdeleter"},"type ServiceBindingDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingfinder"},"type ServiceBindingFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingfinisher"},"type ServiceBindingFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindinginserter"},"type ServiceBindingInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindinglabel"},"type ServiceBindingLabel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findservicebindinglabel"},"func FindServiceBindingLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBindingLabel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindinglabeldeleter"},"type ServiceBindingLabelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindinglabelfinder"},"type ServiceBindingLabelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindinglabelfinisher"},"type ServiceBindingLabelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindinglabelinserter"},"type ServiceBindingLabelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindinglabelreloader"},"type ServiceBindingLabelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindinglabelslice"},"type ServiceBindingLabelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindinglabelupdater"},"type ServiceBindingLabelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindinglabelupserter"},"type ServiceBindingLabelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingoperation"},"type ServiceBindingOperation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findservicebindingoperation"},"func FindServiceBindingOperation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBindingOperation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingoperationdeleter"},"type ServiceBindingOperationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingoperationfinder"},"type ServiceBindingOperationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingoperationfinisher"},"type ServiceBindingOperationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingoperationinserter"},"type ServiceBindingOperationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingoperationreloader"},"type ServiceBindingOperationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingoperationslice"},"type ServiceBindingOperationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingoperationupdater"},"type ServiceBindingOperationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingoperationupserter"},"type ServiceBindingOperationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingreloader"},"type ServiceBindingReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingslice"},"type ServiceBindingSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingupdater"},"type ServiceBindingUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingupserter"},"type ServiceBindingUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebroker"},"type ServiceBroker"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findservicebroker"},"func FindServiceBroker(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBroker, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerannotation"},"type ServiceBrokerAnnotation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findservicebrokerannotation"},"func FindServiceBrokerAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBrokerAnnotation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerannotationdeleter"},"type ServiceBrokerAnnotationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerannotationfinder"},"type ServiceBrokerAnnotationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerannotationfinisher"},"type ServiceBrokerAnnotationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerannotationinserter"},"type ServiceBrokerAnnotationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerannotationreloader"},"type ServiceBrokerAnnotationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerannotationslice"},"type ServiceBrokerAnnotationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerannotationupdater"},"type ServiceBrokerAnnotationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerannotationupserter"},"type ServiceBrokerAnnotationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerdeleter"},"type ServiceBrokerDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerfinder"},"type ServiceBrokerFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerfinisher"},"type ServiceBrokerFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerinserter"},"type ServiceBrokerInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerlabel"},"type ServiceBrokerLabel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findservicebrokerlabel"},"func FindServiceBrokerLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBrokerLabel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerlabeldeleter"},"type ServiceBrokerLabelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerlabelfinder"},"type ServiceBrokerLabelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerlabelfinisher"},"type ServiceBrokerLabelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerlabelinserter"},"type ServiceBrokerLabelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerlabelreloader"},"type ServiceBrokerLabelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerlabelslice"},"type ServiceBrokerLabelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerlabelupdater"},"type ServiceBrokerLabelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerlabelupserter"},"type ServiceBrokerLabelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerreloader"},"type ServiceBrokerReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerslice"},"type ServiceBrokerSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequest"},"type ServiceBrokerUpdateRequest"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findservicebrokerupdaterequest"},"func FindServiceBrokerUpdateRequest(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBrokerUpdateRequest, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestannotation"},"type ServiceBrokerUpdateRequestAnnotation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findservicebrokerupdaterequestannotation"},"func FindServiceBrokerUpdateRequestAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBrokerUpdateRequestAnnotation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestannotationdeleter"},"type ServiceBrokerUpdateRequestAnnotationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestannotationfinder"},"type ServiceBrokerUpdateRequestAnnotationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestannotationfinisher"},"type ServiceBrokerUpdateRequestAnnotationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestannotationinserter"},"type ServiceBrokerUpdateRequestAnnotationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestannotationreloader"},"type ServiceBrokerUpdateRequestAnnotationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestannotationslice"},"type ServiceBrokerUpdateRequestAnnotationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestannotationupdater"},"type ServiceBrokerUpdateRequestAnnotationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestannotationupserter"},"type ServiceBrokerUpdateRequestAnnotationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestdeleter"},"type ServiceBrokerUpdateRequestDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestfinder"},"type ServiceBrokerUpdateRequestFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestfinisher"},"type ServiceBrokerUpdateRequestFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestinserter"},"type ServiceBrokerUpdateRequestInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestlabel"},"type ServiceBrokerUpdateRequestLabel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findservicebrokerupdaterequestlabel"},"func FindServiceBrokerUpdateRequestLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBrokerUpdateRequestLabel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestlabeldeleter"},"type ServiceBrokerUpdateRequestLabelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestlabelfinder"},"type ServiceBrokerUpdateRequestLabelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestlabelfinisher"},"type ServiceBrokerUpdateRequestLabelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestlabelinserter"},"type ServiceBrokerUpdateRequestLabelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestlabelreloader"},"type ServiceBrokerUpdateRequestLabelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestlabelslice"},"type ServiceBrokerUpdateRequestLabelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestlabelupdater"},"type ServiceBrokerUpdateRequestLabelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestlabelupserter"},"type ServiceBrokerUpdateRequestLabelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestreloader"},"type ServiceBrokerUpdateRequestReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestslice"},"type ServiceBrokerUpdateRequestSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestupdater"},"type ServiceBrokerUpdateRequestUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestupserter"},"type ServiceBrokerUpdateRequestUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdater"},"type ServiceBrokerUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupserter"},"type ServiceBrokerUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicedashboardclient"},"type ServiceDashboardClient"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findservicedashboardclient"},"func FindServiceDashboardClient(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceDashboardClient, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicedashboardclientdeleter"},"type ServiceDashboardClientDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicedashboardclientfinder"},"type ServiceDashboardClientFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicedashboardclientfinisher"},"type ServiceDashboardClientFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicedashboardclientinserter"},"type ServiceDashboardClientInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicedashboardclientreloader"},"type ServiceDashboardClientReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicedashboardclientslice"},"type ServiceDashboardClientSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicedashboardclientupdater"},"type ServiceDashboardClientUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicedashboardclientupserter"},"type ServiceDashboardClientUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicedeleter"},"type ServiceDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicefinder"},"type ServiceFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicefinisher"},"type ServiceFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinserter"},"type ServiceInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstance"},"type ServiceInstance"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findserviceinstance"},"func FindServiceInstance(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceInstance, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceannotation"},"type ServiceInstanceAnnotation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findserviceinstanceannotation"},"func FindServiceInstanceAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceInstanceAnnotation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceannotationdeleter"},"type ServiceInstanceAnnotationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceannotationfinder"},"type ServiceInstanceAnnotationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceannotationfinisher"},"type ServiceInstanceAnnotationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceannotationinserter"},"type ServiceInstanceAnnotationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceannotationreloader"},"type ServiceInstanceAnnotationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceannotationslice"},"type ServiceInstanceAnnotationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceannotationupdater"},"type ServiceInstanceAnnotationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceannotationupserter"},"type ServiceInstanceAnnotationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstancedeleter"},"type ServiceInstanceDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstancefinder"},"type ServiceInstanceFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstancefinisher"},"type ServiceInstanceFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceinserter"},"type ServiceInstanceInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstancelabel"},"type ServiceInstanceLabel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findserviceinstancelabel"},"func FindServiceInstanceLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceInstanceLabel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstancelabeldeleter"},"type ServiceInstanceLabelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstancelabelfinder"},"type ServiceInstanceLabelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstancelabelfinisher"},"type ServiceInstanceLabelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstancelabelinserter"},"type ServiceInstanceLabelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstancelabelreloader"},"type ServiceInstanceLabelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstancelabelslice"},"type ServiceInstanceLabelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstancelabelupdater"},"type ServiceInstanceLabelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstancelabelupserter"},"type ServiceInstanceLabelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceoperation"},"type ServiceInstanceOperation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findserviceinstanceoperation"},"func FindServiceInstanceOperation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceInstanceOperation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceoperationdeleter"},"type ServiceInstanceOperationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceoperationfinder"},"type ServiceInstanceOperationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceoperationfinisher"},"type ServiceInstanceOperationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceoperationinserter"},"type ServiceInstanceOperationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceoperationreloader"},"type ServiceInstanceOperationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceoperationslice"},"type ServiceInstanceOperationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceoperationupdater"},"type ServiceInstanceOperationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceoperationupserter"},"type ServiceInstanceOperationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstancereloader"},"type ServiceInstanceReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceslice"},"type ServiceInstanceSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceupdater"},"type ServiceInstanceUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceupserter"},"type ServiceInstanceUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekey"},"type ServiceKey"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findservicekey"},"func FindServiceKey(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceKey, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyannotation"},"type ServiceKeyAnnotation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findservicekeyannotation"},"func FindServiceKeyAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceKeyAnnotation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyannotationdeleter"},"type ServiceKeyAnnotationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyannotationfinder"},"type ServiceKeyAnnotationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyannotationfinisher"},"type ServiceKeyAnnotationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyannotationinserter"},"type ServiceKeyAnnotationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyannotationreloader"},"type ServiceKeyAnnotationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyannotationslice"},"type ServiceKeyAnnotationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyannotationupdater"},"type ServiceKeyAnnotationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyannotationupserter"},"type ServiceKeyAnnotationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeydeleter"},"type ServiceKeyDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyfinder"},"type ServiceKeyFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyfinisher"},"type ServiceKeyFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyinserter"},"type ServiceKeyInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeylabel"},"type ServiceKeyLabel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findservicekeylabel"},"func FindServiceKeyLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceKeyLabel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeylabeldeleter"},"type ServiceKeyLabelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeylabelfinder"},"type ServiceKeyLabelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeylabelfinisher"},"type ServiceKeyLabelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeylabelinserter"},"type ServiceKeyLabelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeylabelreloader"},"type ServiceKeyLabelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeylabelslice"},"type ServiceKeyLabelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeylabelupdater"},"type ServiceKeyLabelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeylabelupserter"},"type ServiceKeyLabelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyoperation"},"type ServiceKeyOperation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findservicekeyoperation"},"func FindServiceKeyOperation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceKeyOperation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyoperationdeleter"},"type ServiceKeyOperationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyoperationfinder"},"type ServiceKeyOperationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyoperationfinisher"},"type ServiceKeyOperationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyoperationinserter"},"type ServiceKeyOperationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyoperationreloader"},"type ServiceKeyOperationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyoperationslice"},"type ServiceKeyOperationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyoperationupdater"},"type ServiceKeyOperationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyoperationupserter"},"type ServiceKeyOperationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyreloader"},"type ServiceKeyReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyslice"},"type ServiceKeySlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyupdater"},"type ServiceKeyUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyupserter"},"type ServiceKeyUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceofferingannotation"},"type ServiceOfferingAnnotation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findserviceofferingannotation"},"func FindServiceOfferingAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceOfferingAnnotation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceofferingannotationdeleter"},"type ServiceOfferingAnnotationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceofferingannotationfinder"},"type ServiceOfferingAnnotationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceofferingannotationfinisher"},"type ServiceOfferingAnnotationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceofferingannotationinserter"},"type ServiceOfferingAnnotationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceofferingannotationreloader"},"type ServiceOfferingAnnotationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceofferingannotationslice"},"type ServiceOfferingAnnotationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceofferingannotationupdater"},"type ServiceOfferingAnnotationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceofferingannotationupserter"},"type ServiceOfferingAnnotationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceofferinglabel"},"type ServiceOfferingLabel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findserviceofferinglabel"},"func FindServiceOfferingLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceOfferingLabel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceofferinglabeldeleter"},"type ServiceOfferingLabelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceofferinglabelfinder"},"type ServiceOfferingLabelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceofferinglabelfinisher"},"type ServiceOfferingLabelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceofferinglabelinserter"},"type ServiceOfferingLabelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceofferinglabelreloader"},"type ServiceOfferingLabelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceofferinglabelslice"},"type ServiceOfferingLabelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceofferinglabelupdater"},"type ServiceOfferingLabelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceofferinglabelupserter"},"type ServiceOfferingLabelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplan"},"type ServicePlan"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findserviceplan"},"func FindServicePlan(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServicePlan, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanannotation"},"type ServicePlanAnnotation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findserviceplanannotation"},"func FindServicePlanAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServicePlanAnnotation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanannotationdeleter"},"type ServicePlanAnnotationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanannotationfinder"},"type ServicePlanAnnotationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanannotationfinisher"},"type ServicePlanAnnotationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanannotationinserter"},"type ServicePlanAnnotationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanannotationreloader"},"type ServicePlanAnnotationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanannotationslice"},"type ServicePlanAnnotationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanannotationupdater"},"type ServicePlanAnnotationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanannotationupserter"},"type ServicePlanAnnotationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplandeleter"},"type ServicePlanDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanfinder"},"type ServicePlanFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanfinisher"},"type ServicePlanFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplaninserter"},"type ServicePlanInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanlabel"},"type ServicePlanLabel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findserviceplanlabel"},"func FindServicePlanLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServicePlanLabel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanlabeldeleter"},"type ServicePlanLabelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanlabelfinder"},"type ServicePlanLabelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanlabelfinisher"},"type ServicePlanLabelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanlabelinserter"},"type ServicePlanLabelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanlabelreloader"},"type ServicePlanLabelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanlabelslice"},"type ServicePlanLabelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanlabelupdater"},"type ServicePlanLabelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanlabelupserter"},"type ServicePlanLabelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanreloader"},"type ServicePlanReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanslice"},"type ServicePlanSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanupdater"},"type ServicePlanUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanupserter"},"type ServicePlanUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanvisibility"},"type ServicePlanVisibility"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findserviceplanvisibility"},"func FindServicePlanVisibility(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServicePlanVisibility, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanvisibilitydeleter"},"type ServicePlanVisibilityDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanvisibilityfinder"},"type ServicePlanVisibilityFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanvisibilityfinisher"},"type ServicePlanVisibilityFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanvisibilityinserter"},"type ServicePlanVisibilityInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanvisibilityreloader"},"type ServicePlanVisibilityReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanvisibilityslice"},"type ServicePlanVisibilitySlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanvisibilityupdater"},"type ServicePlanVisibilityUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanvisibilityupserter"},"type ServicePlanVisibilityUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicereloader"},"type ServiceReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceslice"},"type ServiceSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceupdater"},"type ServiceUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceupserter"},"type ServiceUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceusageevent"},"type ServiceUsageEvent"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findserviceusageevent"},"func FindServiceUsageEvent(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceUsageEvent, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceusageeventdeleter"},"type ServiceUsageEventDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceusageeventfinder"},"type ServiceUsageEventFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceusageeventfinisher"},"type ServiceUsageEventFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceusageeventinserter"},"type ServiceUsageEventInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceusageeventreloader"},"type ServiceUsageEventReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceusageeventslice"},"type ServiceUsageEventSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceusageeventupdater"},"type ServiceUsageEventUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceusageeventupserter"},"type ServiceUsageEventUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-sidecar"},"type Sidecar"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findsidecar"},"func FindSidecar(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Sidecar, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-sidecardeleter"},"type SidecarDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-sidecarfinder"},"type SidecarFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-sidecarfinisher"},"type SidecarFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-sidecarinserter"},"type SidecarInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-sidecarprocesstype"},"type SidecarProcessType"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findsidecarprocesstype"},"func FindSidecarProcessType(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SidecarProcessType, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-sidecarprocesstypedeleter"},"type SidecarProcessTypeDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-sidecarprocesstypefinder"},"type SidecarProcessTypeFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-sidecarprocesstypefinisher"},"type SidecarProcessTypeFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-sidecarprocesstypeinserter"},"type SidecarProcessTypeInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-sidecarprocesstypereloader"},"type SidecarProcessTypeReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-sidecarprocesstypeslice"},"type SidecarProcessTypeSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-sidecarprocesstypeupdater"},"type SidecarProcessTypeUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-sidecarprocesstypeupserter"},"type SidecarProcessTypeUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-sidecarreloader"},"type SidecarReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-sidecarslice"},"type SidecarSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-sidecarupdater"},"type SidecarUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-sidecarupserter"},"type SidecarUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-space"},"type Space"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findspace"},"func FindSpace(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Space, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spaceannotation"},"type SpaceAnnotation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findspaceannotation"},"func FindSpaceAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SpaceAnnotation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spaceannotationdeleter"},"type SpaceAnnotationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spaceannotationfinder"},"type SpaceAnnotationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spaceannotationfinisher"},"type SpaceAnnotationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spaceannotationinserter"},"type SpaceAnnotationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spaceannotationreloader"},"type SpaceAnnotationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spaceannotationslice"},"type SpaceAnnotationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spaceannotationupdater"},"type SpaceAnnotationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spaceannotationupserter"},"type SpaceAnnotationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacedeleter"},"type SpaceDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacefinder"},"type SpaceFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacefinisher"},"type SpaceFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spaceinserter"},"type SpaceInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacelabel"},"type SpaceLabel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findspacelabel"},"func FindSpaceLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SpaceLabel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacelabeldeleter"},"type SpaceLabelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacelabelfinder"},"type SpaceLabelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacelabelfinisher"},"type SpaceLabelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacelabelinserter"},"type SpaceLabelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacelabelreloader"},"type SpaceLabelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacelabelslice"},"type SpaceLabelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacelabelupdater"},"type SpaceLabelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacelabelupserter"},"type SpaceLabelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacequotadefinition"},"type SpaceQuotaDefinition"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findspacequotadefinition"},"func FindSpaceQuotaDefinition(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SpaceQuotaDefinition, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacequotadefinitiondeleter"},"type SpaceQuotaDefinitionDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacequotadefinitionfinder"},"type SpaceQuotaDefinitionFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacequotadefinitionfinisher"},"type SpaceQuotaDefinitionFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacequotadefinitioninserter"},"type SpaceQuotaDefinitionInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacequotadefinitionreloader"},"type SpaceQuotaDefinitionReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacequotadefinitionslice"},"type SpaceQuotaDefinitionSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacequotadefinitionupdater"},"type SpaceQuotaDefinitionUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacequotadefinitionupserter"},"type SpaceQuotaDefinitionUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacereloader"},"type SpaceReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spaceslice"},"type SpaceSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spaceupdater"},"type SpaceUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spaceupserter"},"type SpaceUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesapplicationsupporter"},"type SpacesApplicationSupporter"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findspacesapplicationsupporter"},"func FindSpacesApplicationSupporter(ctx context.Context, exec boil.ContextExecutor, spacesApplicationSupportersPK int, selectCols ...string) (*SpacesApplicationSupporter, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesapplicationsupporterdeleter"},"type SpacesApplicationSupporterDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesapplicationsupporterfinder"},"type SpacesApplicationSupporterFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesapplicationsupporterfinisher"},"type SpacesApplicationSupporterFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesapplicationsupporterinserter"},"type SpacesApplicationSupporterInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesapplicationsupporterreloader"},"type SpacesApplicationSupporterReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesapplicationsupporterslice"},"type SpacesApplicationSupporterSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesapplicationsupporterupdater"},"type SpacesApplicationSupporterUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesapplicationsupporterupserter"},"type SpacesApplicationSupporterUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesauditor"},"type SpacesAuditor"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findspacesauditor"},"func FindSpacesAuditor(ctx context.Context, exec boil.ContextExecutor, spacesAuditorsPK int, selectCols ...string) (*SpacesAuditor, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesauditordeleter"},"type SpacesAuditorDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesauditorfinder"},"type SpacesAuditorFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesauditorfinisher"},"type SpacesAuditorFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesauditorinserter"},"type SpacesAuditorInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesauditorreloader"},"type SpacesAuditorReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesauditorslice"},"type SpacesAuditorSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesauditorupdater"},"type SpacesAuditorUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesauditorupserter"},"type SpacesAuditorUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesdeveloper"},"type SpacesDeveloper"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findspacesdeveloper"},"func FindSpacesDeveloper(ctx context.Context, exec boil.ContextExecutor, spacesDevelopersPK int, selectCols ...string) (*SpacesDeveloper, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesdeveloperdeleter"},"type SpacesDeveloperDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesdeveloperfinder"},"type SpacesDeveloperFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesdeveloperfinisher"},"type SpacesDeveloperFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesdeveloperinserter"},"type SpacesDeveloperInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesdeveloperreloader"},"type SpacesDeveloperReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesdeveloperslice"},"type SpacesDeveloperSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesdeveloperupdater"},"type SpacesDeveloperUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesdeveloperupserter"},"type SpacesDeveloperUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesmanager"},"type SpacesManager"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findspacesmanager"},"func FindSpacesManager(ctx context.Context, exec boil.ContextExecutor, spacesManagersPK int, selectCols ...string) (*SpacesManager, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesmanagerdeleter"},"type SpacesManagerDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesmanagerfinder"},"type SpacesManagerFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesmanagerfinisher"},"type SpacesManagerFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesmanagerinserter"},"type SpacesManagerInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesmanagerreloader"},"type SpacesManagerReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesmanagerslice"},"type SpacesManagerSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesmanagerupdater"},"type SpacesManagerUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesmanagerupserter"},"type SpacesManagerUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stack"},"type Stack"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findstack"},"func FindStack(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Stack, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stackannotation"},"type StackAnnotation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findstackannotation"},"func FindStackAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*StackAnnotation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stackannotationdeleter"},"type StackAnnotationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stackannotationfinder"},"type StackAnnotationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stackannotationfinisher"},"type StackAnnotationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stackannotationinserter"},"type StackAnnotationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stackannotationreloader"},"type StackAnnotationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stackannotationslice"},"type StackAnnotationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stackannotationupdater"},"type StackAnnotationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stackannotationupserter"},"type StackAnnotationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stackdeleter"},"type StackDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stackfinder"},"type StackFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stackfinisher"},"type StackFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stackinserter"},"type StackInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stacklabel"},"type StackLabel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findstacklabel"},"func FindStackLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*StackLabel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stacklabeldeleter"},"type StackLabelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stacklabelfinder"},"type StackLabelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stacklabelfinisher"},"type StackLabelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stacklabelinserter"},"type StackLabelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stacklabelreloader"},"type StackLabelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stacklabelslice"},"type StackLabelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stacklabelupdater"},"type StackLabelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stacklabelupserter"},"type StackLabelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stackreloader"},"type StackReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stackslice"},"type StackSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stackupdater"},"type StackUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stackupserter"},"type StackUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stagingsecuritygroupsspace"},"type StagingSecurityGroupsSpace"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findstagingsecuritygroupsspace"},"func FindStagingSecurityGroupsSpace(ctx context.Context, exec boil.ContextExecutor, stagingSecurityGroupsSpacesPK int, selectCols ...string) (*StagingSecurityGroupsSpace, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stagingsecuritygroupsspacedeleter"},"type StagingSecurityGroupsSpaceDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stagingsecuritygroupsspacefinder"},"type StagingSecurityGroupsSpaceFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stagingsecuritygroupsspacefinisher"},"type StagingSecurityGroupsSpaceFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stagingsecuritygroupsspaceinserter"},"type StagingSecurityGroupsSpaceInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stagingsecuritygroupsspacereloader"},"type StagingSecurityGroupsSpaceReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stagingsecuritygroupsspaceslice"},"type StagingSecurityGroupsSpaceSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stagingsecuritygroupsspaceupdater"},"type StagingSecurityGroupsSpaceUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stagingsecuritygroupsspaceupserter"},"type StagingSecurityGroupsSpaceUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-subquery"},"type Subquery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-newsubquery"},"func NewSubquery(mods ...qm.QueryMod) *Subquery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-subquery-sql"},"func (s *Subquery) SQL() (string, []interface{})")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-task"},"type Task"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findtask"},"func FindTask(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Task, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-taskannotation"},"type TaskAnnotation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findtaskannotation"},"func FindTaskAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TaskAnnotation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-taskannotationdeleter"},"type TaskAnnotationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-taskannotationfinder"},"type TaskAnnotationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-taskannotationfinisher"},"type TaskAnnotationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-taskannotationinserter"},"type TaskAnnotationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-taskannotationreloader"},"type TaskAnnotationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-taskannotationslice"},"type TaskAnnotationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-taskannotationupdater"},"type TaskAnnotationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-taskannotationupserter"},"type TaskAnnotationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-taskdeleter"},"type TaskDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-taskfinder"},"type TaskFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-taskfinisher"},"type TaskFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-taskinserter"},"type TaskInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-tasklabel"},"type TaskLabel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-findtasklabel"},"func FindTaskLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TaskLabel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-tasklabeldeleter"},"type TaskLabelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-tasklabelfinder"},"type TaskLabelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-tasklabelfinisher"},"type TaskLabelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-tasklabelinserter"},"type TaskLabelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-tasklabelreloader"},"type TaskLabelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-tasklabelslice"},"type TaskLabelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-tasklabelupdater"},"type TaskLabelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-tasklabelupserter"},"type TaskLabelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-taskreloader"},"type TaskReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-taskslice"},"type TaskSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-taskupdater"},"type TaskUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-taskupserter"},"type TaskUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-user"},"type User"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-finduser"},"func FindUser(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*User, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userannotation"},"type UserAnnotation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-finduserannotation"},"func FindUserAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UserAnnotation, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userannotationdeleter"},"type UserAnnotationDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userannotationfinder"},"type UserAnnotationFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userannotationfinisher"},"type UserAnnotationFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userannotationinserter"},"type UserAnnotationInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userannotationreloader"},"type UserAnnotationReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userannotationslice"},"type UserAnnotationSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userannotationupdater"},"type UserAnnotationUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userannotationupserter"},"type UserAnnotationUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userdeleter"},"type UserDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userfinder"},"type UserFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userfinisher"},"type UserFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userinserter"},"type UserInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userlabel"},"type UserLabel"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-finduserlabel"},"func FindUserLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UserLabel, error)")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userlabeldeleter"},"type UserLabelDeleter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userlabelfinder"},"type UserLabelFinder")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userlabelfinisher"},"type UserLabelFinisher")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userlabelinserter"},"type UserLabelInserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userlabelreloader"},"type UserLabelReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userlabelslice"},"type UserLabelSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userlabelupdater"},"type UserLabelUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userlabelupserter"},"type UserLabelUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userreloader"},"type UserReloader")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userslice"},"type UserSlice")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userupdater"},"type UserUpdater")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userupserter"},"type UserUpserter")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appannotationl"},"type appAnnotationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appannotationl-loadresource"},"func (appAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAppAnnotation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appannotationquery"},"type appAnnotationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appannotations"},"func AppAnnotations(mods ...qm.QueryMod) appAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appannotationquery-all"},"func (q appAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (AppAnnotationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appannotationquery-count"},"func (q appAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appannotationquery-delete"},"func (q appAnnotationQuery) Delete(o *AppAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appannotationquery-deleteall"},"func (q appAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appannotationquery-deleteallslice"},"func (q appAnnotationQuery) DeleteAllSlice(o AppAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appannotationquery-exists"},"func (q appAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appannotationquery-insert"},"func (q appAnnotationQuery) Insert(o *AppAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appannotationquery-one"},"func (q appAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AppAnnotation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appannotationquery-reload"},"func (q appAnnotationQuery) Reload(o *AppAnnotation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appannotationquery-reloadall"},"func (q appAnnotationQuery) ReloadAll(o *AppAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appannotationquery-removeresource"},"func (q appAnnotationQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"AppAnnotation, ctx context.Context, exec boil.ContextExecutor, related "),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appannotationquery-resource"},"func (q appAnnotationQuery) Resource(o *AppAnnotation, mods ...qm.QueryMod) appQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appannotationquery-setresource"},"func (q appAnnotationQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"AppAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appannotationquery-update"},"func (q appAnnotationQuery) Update(o *AppAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appannotationquery-updateall"},"func (q appAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appannotationquery-updateallslice"},"func (q appAnnotationQuery) UpdateAllSlice(o AppAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appannotationquery-upsert"},"func (q appAnnotationQuery) Upsert(o *AppAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appannotationr"},"type appAnnotationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appannotationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"appAnnotationR) NewStruct() "),"appAnnotationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appeventl"},"type appEventL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appeventl-loadapp"},"func (appEventL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAppEvent interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appeventquery"},"type appEventQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appevents"},"func AppEvents(mods ...qm.QueryMod) appEventQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appeventquery-all"},"func (q appEventQuery) All(ctx context.Context, exec boil.ContextExecutor) (AppEventSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appeventquery-app"},"func (q appEventQuery) App(o *AppEvent, mods ...qm.QueryMod) processQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appeventquery-count"},"func (q appEventQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appeventquery-delete"},"func (q appEventQuery) Delete(o *AppEvent, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appeventquery-deleteall"},"func (q appEventQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appeventquery-deleteallslice"},"func (q appEventQuery) DeleteAllSlice(o AppEventSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appeventquery-exists"},"func (q appEventQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appeventquery-insert"},"func (q appEventQuery) Insert(o *AppEvent, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appeventquery-one"},"func (q appEventQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AppEvent, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appeventquery-reload"},"func (q appEventQuery) Reload(o *AppEvent, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appeventquery-reloadall"},"func (q appEventQuery) ReloadAll(o *AppEventSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appeventquery-setapp"},"func (q appEventQuery) SetApp(o ",(0,o.kt)("em",{parentName:"a"},"AppEvent, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Process) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appeventquery-update"},"func (q appEventQuery) Update(o *AppEvent, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appeventquery-updateall"},"func (q appEventQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appeventquery-updateallslice"},"func (q appEventQuery) UpdateAllSlice(o AppEventSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appeventquery-upsert"},"func (q appEventQuery) Upsert(o *AppEvent, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appeventr"},"type appEventR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appeventr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"appEventR) NewStruct() "),"appEventR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appl"},"type appL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appl-loadbuilds"},"func (appL) LoadBuilds(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appl-loaddeployments"},"func (appL) LoadDeployments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appl-loaddroplets"},"func (appL) LoadDroplets(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appl-loadkpacklifecycledata"},"func (appL) LoadKpackLifecycleData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appl-loadpackages"},"func (appL) LoadPackages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appl-loadprocesses"},"func (appL) LoadProcesses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appl-loadresourceappannotations"},"func (appL) LoadResourceAppAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appl-loadresourceapplabels"},"func (appL) LoadResourceAppLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appl-loadrevisions"},"func (appL) LoadRevisions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appl-loadroutemappings"},"func (appL) LoadRouteMappings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appl-loadservicebindings"},"func (appL) LoadServiceBindings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appl-loadsidecars"},"func (appL) LoadSidecars(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appl-loadspace"},"func (appL) LoadSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appl-loadtasks"},"func (appL) LoadTasks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-applabell"},"type appLabelL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-applabell-loadresource"},"func (appLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAppLabel interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-applabelquery"},"type appLabelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-applabels"},"func AppLabels(mods ...qm.QueryMod) appLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-applabelquery-all"},"func (q appLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (AppLabelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-applabelquery-count"},"func (q appLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-applabelquery-delete"},"func (q appLabelQuery) Delete(o *AppLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-applabelquery-deleteall"},"func (q appLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-applabelquery-deleteallslice"},"func (q appLabelQuery) DeleteAllSlice(o AppLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-applabelquery-exists"},"func (q appLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-applabelquery-insert"},"func (q appLabelQuery) Insert(o *AppLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-applabelquery-one"},"func (q appLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AppLabel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-applabelquery-reload"},"func (q appLabelQuery) Reload(o *AppLabel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-applabelquery-reloadall"},"func (q appLabelQuery) ReloadAll(o *AppLabelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-applabelquery-removeresource"},"func (q appLabelQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"AppLabel, ctx context.Context, exec boil.ContextExecutor, related "),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-applabelquery-resource"},"func (q appLabelQuery) Resource(o *AppLabel, mods ...qm.QueryMod) appQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-applabelquery-setresource"},"func (q appLabelQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"AppLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-applabelquery-update"},"func (q appLabelQuery) Update(o *AppLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-applabelquery-updateall"},"func (q appLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-applabelquery-updateallslice"},"func (q appLabelQuery) UpdateAllSlice(o AppLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-applabelquery-upsert"},"func (q appLabelQuery) Upsert(o *AppLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-applabelr"},"type appLabelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-applabelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"appLabelR) NewStruct() "),"appLabelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appquery"},"type appQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-apps"},"func Apps(mods ...qm.QueryMod) appQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-addbuilds"},"func (q appQuery) AddBuilds(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Build) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-adddeployments"},"func (q appQuery) AddDeployments(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Deployment) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-adddroplets"},"func (q appQuery) AddDroplets(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Droplet) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-addkpacklifecycledata"},"func (q appQuery) AddKpackLifecycleData(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"KpackLifecycleDatum) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-addpackages"},"func (q appQuery) AddPackages(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Package) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-addprocesses"},"func (q appQuery) AddProcesses(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Process) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-addresourceappannotations"},"func (q appQuery) AddResourceAppAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"AppAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-addresourceapplabels"},"func (q appQuery) AddResourceAppLabels(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"AppLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-addrevisions"},"func (q appQuery) AddRevisions(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Revision) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-addroutemappings"},"func (q appQuery) AddRouteMappings(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"RouteMapping) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-addservicebindings"},"func (q appQuery) AddServiceBindings(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceBinding) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-addsidecars"},"func (q appQuery) AddSidecars(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Sidecar) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-addtasks"},"func (q appQuery) AddTasks(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Task) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-all"},"func (q appQuery) All(ctx context.Context, exec boil.ContextExecutor) (AppSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-builds"},"func (q appQuery) Builds(o *App, mods ...qm.QueryMod) buildQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-count"},"func (q appQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-delete"},"func (q appQuery) Delete(o *App, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-deleteall"},"func (q appQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-deleteallslice"},"func (q appQuery) DeleteAllSlice(o AppSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-deployments"},"func (q appQuery) Deployments(o *App, mods ...qm.QueryMod) deploymentQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-droplets"},"func (q appQuery) Droplets(o *App, mods ...qm.QueryMod) dropletQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-exists"},"func (q appQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-insert"},"func (q appQuery) Insert(o *App, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-kpacklifecycledata"},"func (q appQuery) KpackLifecycleData(o *App, mods ...qm.QueryMod) kpackLifecycleDatumQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-one"},"func (q appQuery) One(ctx context.Context, exec boil.ContextExecutor) (*App, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-packages"},"func (q appQuery) Packages(o *App, mods ...qm.QueryMod) packageQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-processes"},"func (q appQuery) Processes(o *App, mods ...qm.QueryMod) processQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-reload"},"func (q appQuery) Reload(o *App, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-reloadall"},"func (q appQuery) ReloadAll(o *AppSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-removebuilds"},"func (q appQuery) RemoveBuilds(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, related ..."),"Build) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-removedeployments"},"func (q appQuery) RemoveDeployments(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, related ..."),"Deployment) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-removedroplets"},"func (q appQuery) RemoveDroplets(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, related ..."),"Droplet) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-removekpacklifecycledata"},"func (q appQuery) RemoveKpackLifecycleData(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, related ..."),"KpackLifecycleDatum) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-removepackages"},"func (q appQuery) RemovePackages(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, related ..."),"Package) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-removeprocesses"},"func (q appQuery) RemoveProcesses(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, related ..."),"Process) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-removeresourceappannotations"},"func (q appQuery) RemoveResourceAppAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, related ..."),"AppAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-removeresourceapplabels"},"func (q appQuery) RemoveResourceAppLabels(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, related ..."),"AppLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-removerevisions"},"func (q appQuery) RemoveRevisions(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, related ..."),"Revision) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-removespace"},"func (q appQuery) RemoveSpace(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, related "),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-resourceappannotations"},"func (q appQuery) ResourceAppAnnotations(o *App, mods ...qm.QueryMod) appAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-resourceapplabels"},"func (q appQuery) ResourceAppLabels(o *App, mods ...qm.QueryMod) appLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-revisions"},"func (q appQuery) Revisions(o *App, mods ...qm.QueryMod) revisionQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-routemappings"},"func (q appQuery) RouteMappings(o *App, mods ...qm.QueryMod) routeMappingQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-servicebindings"},"func (q appQuery) ServiceBindings(o *App, mods ...qm.QueryMod) serviceBindingQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-setbuilds"},"func (q appQuery) SetBuilds(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Build) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-setdeployments"},"func (q appQuery) SetDeployments(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Deployment) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-setdroplets"},"func (q appQuery) SetDroplets(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Droplet) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-setkpacklifecycledata"},"func (q appQuery) SetKpackLifecycleData(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"KpackLifecycleDatum) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-setpackages"},"func (q appQuery) SetPackages(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Package) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-setprocesses"},"func (q appQuery) SetProcesses(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Process) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-setresourceappannotations"},"func (q appQuery) SetResourceAppAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"AppAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-setresourceapplabels"},"func (q appQuery) SetResourceAppLabels(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"AppLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-setrevisions"},"func (q appQuery) SetRevisions(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Revision) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-setspace"},"func (q appQuery) SetSpace(o ",(0,o.kt)("em",{parentName:"a"},"App, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-sidecars"},"func (q appQuery) Sidecars(o *App, mods ...qm.QueryMod) sidecarQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-space"},"func (q appQuery) Space(o *App, mods ...qm.QueryMod) spaceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-tasks"},"func (q appQuery) Tasks(o *App, mods ...qm.QueryMod) taskQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-update"},"func (q appQuery) Update(o *App, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-updateall"},"func (q appQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-updateallslice"},"func (q appQuery) UpdateAllSlice(o AppSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appquery-upsert"},"func (q appQuery) Upsert(o *App, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appr"},"type appR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"appR) NewStruct() "),"appR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appusageeventl"},"type appUsageEventL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appusageeventquery"},"type appUsageEventQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appusageevents"},"func AppUsageEvents(mods ...qm.QueryMod) appUsageEventQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appusageeventquery-all"},"func (q appUsageEventQuery) All(ctx context.Context, exec boil.ContextExecutor) (AppUsageEventSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appusageeventquery-count"},"func (q appUsageEventQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appusageeventquery-delete"},"func (q appUsageEventQuery) Delete(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appusageeventquery-deleteall"},"func (q appUsageEventQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appusageeventquery-deleteallslice"},"func (q appUsageEventQuery) DeleteAllSlice(o AppUsageEventSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appusageeventquery-exists"},"func (q appUsageEventQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appusageeventquery-insert"},"func (q appUsageEventQuery) Insert(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appusageeventquery-one"},"func (q appUsageEventQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AppUsageEvent, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appusageeventquery-reload"},"func (q appUsageEventQuery) Reload(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appusageeventquery-reloadall"},"func (q appUsageEventQuery) ReloadAll(o *AppUsageEventSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appusageeventquery-update"},"func (q appUsageEventQuery) Update(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appusageeventquery-updateall"},"func (q appUsageEventQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appusageeventquery-updateallslice"},"func (q appUsageEventQuery) UpdateAllSlice(o AppUsageEventSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appusageeventquery-upsert"},"func (q appUsageEventQuery) Upsert(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-appusageeventr"},"type appUsageEventR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-appusageeventr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"appUsageEventR) NewStruct() "),"appUsageEventR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildannotationl"},"type buildAnnotationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildannotationl-loadresource"},"func (buildAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuildAnnotation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildannotationquery"},"type buildAnnotationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildannotations"},"func BuildAnnotations(mods ...qm.QueryMod) buildAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildannotationquery-all"},"func (q buildAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (BuildAnnotationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildannotationquery-count"},"func (q buildAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildannotationquery-delete"},"func (q buildAnnotationQuery) Delete(o *BuildAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildannotationquery-deleteall"},"func (q buildAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildannotationquery-deleteallslice"},"func (q buildAnnotationQuery) DeleteAllSlice(o BuildAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildannotationquery-exists"},"func (q buildAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildannotationquery-insert"},"func (q buildAnnotationQuery) Insert(o *BuildAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildannotationquery-one"},"func (q buildAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BuildAnnotation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildannotationquery-reload"},"func (q buildAnnotationQuery) Reload(o *BuildAnnotation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildannotationquery-reloadall"},"func (q buildAnnotationQuery) ReloadAll(o *BuildAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildannotationquery-removeresource"},"func (q buildAnnotationQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"BuildAnnotation, ctx context.Context, exec boil.ContextExecutor, related "),"Build) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildannotationquery-resource"},"func (q buildAnnotationQuery) Resource(o *BuildAnnotation, mods ...qm.QueryMod) buildQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildannotationquery-setresource"},"func (q buildAnnotationQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"BuildAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Build) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildannotationquery-update"},"func (q buildAnnotationQuery) Update(o *BuildAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildannotationquery-updateall"},"func (q buildAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildannotationquery-updateallslice"},"func (q buildAnnotationQuery) UpdateAllSlice(o BuildAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildannotationquery-upsert"},"func (q buildAnnotationQuery) Upsert(o *BuildAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildannotationr"},"type buildAnnotationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildannotationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"buildAnnotationR) NewStruct() "),"buildAnnotationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildl"},"type buildL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildl-loadapp"},"func (buildL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuild interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildl-loadkpacklifecycledata"},"func (buildL) LoadKpackLifecycleData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuild interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildl-loadresourcebuildannotations"},"func (buildL) LoadResourceBuildAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuild interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildl-loadresourcebuildlabels"},"func (buildL) LoadResourceBuildLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuild interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildlabell"},"type buildLabelL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildlabell-loadresource"},"func (buildLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuildLabel interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildlabelquery"},"type buildLabelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildlabels"},"func BuildLabels(mods ...qm.QueryMod) buildLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildlabelquery-all"},"func (q buildLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (BuildLabelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildlabelquery-count"},"func (q buildLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildlabelquery-delete"},"func (q buildLabelQuery) Delete(o *BuildLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildlabelquery-deleteall"},"func (q buildLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildlabelquery-deleteallslice"},"func (q buildLabelQuery) DeleteAllSlice(o BuildLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildlabelquery-exists"},"func (q buildLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildlabelquery-insert"},"func (q buildLabelQuery) Insert(o *BuildLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildlabelquery-one"},"func (q buildLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BuildLabel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildlabelquery-reload"},"func (q buildLabelQuery) Reload(o *BuildLabel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildlabelquery-reloadall"},"func (q buildLabelQuery) ReloadAll(o *BuildLabelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildlabelquery-removeresource"},"func (q buildLabelQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"BuildLabel, ctx context.Context, exec boil.ContextExecutor, related "),"Build) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildlabelquery-resource"},"func (q buildLabelQuery) Resource(o *BuildLabel, mods ...qm.QueryMod) buildQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildlabelquery-setresource"},"func (q buildLabelQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"BuildLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Build) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildlabelquery-update"},"func (q buildLabelQuery) Update(o *BuildLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildlabelquery-updateall"},"func (q buildLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildlabelquery-updateallslice"},"func (q buildLabelQuery) UpdateAllSlice(o BuildLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildlabelquery-upsert"},"func (q buildLabelQuery) Upsert(o *BuildLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildlabelr"},"type buildLabelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildlabelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"buildLabelR) NewStruct() "),"buildLabelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildquery"},"type buildQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-builds"},"func Builds(mods ...qm.QueryMod) buildQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-addkpacklifecycledata"},"func (q buildQuery) AddKpackLifecycleData(o ",(0,o.kt)("em",{parentName:"a"},"Build, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"KpackLifecycleDatum) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-addresourcebuildannotations"},"func (q buildQuery) AddResourceBuildAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Build, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"BuildAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-addresourcebuildlabels"},"func (q buildQuery) AddResourceBuildLabels(o ",(0,o.kt)("em",{parentName:"a"},"Build, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"BuildLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-all"},"func (q buildQuery) All(ctx context.Context, exec boil.ContextExecutor) (BuildSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-app"},"func (q buildQuery) App(o *Build, mods ...qm.QueryMod) appQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-count"},"func (q buildQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-delete"},"func (q buildQuery) Delete(o *Build, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-deleteall"},"func (q buildQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-deleteallslice"},"func (q buildQuery) DeleteAllSlice(o BuildSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-exists"},"func (q buildQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-insert"},"func (q buildQuery) Insert(o *Build, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-kpacklifecycledata"},"func (q buildQuery) KpackLifecycleData(o *Build, mods ...qm.QueryMod) kpackLifecycleDatumQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-one"},"func (q buildQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Build, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-reload"},"func (q buildQuery) Reload(o *Build, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-reloadall"},"func (q buildQuery) ReloadAll(o *BuildSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-removeapp"},"func (q buildQuery) RemoveApp(o ",(0,o.kt)("em",{parentName:"a"},"Build, ctx context.Context, exec boil.ContextExecutor, related "),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-removekpacklifecycledata"},"func (q buildQuery) RemoveKpackLifecycleData(o ",(0,o.kt)("em",{parentName:"a"},"Build, ctx context.Context, exec boil.ContextExecutor, related ..."),"KpackLifecycleDatum) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-removeresourcebuildannotations"},"func (q buildQuery) RemoveResourceBuildAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Build, ctx context.Context, exec boil.ContextExecutor, related ..."),"BuildAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-removeresourcebuildlabels"},"func (q buildQuery) RemoveResourceBuildLabels(o ",(0,o.kt)("em",{parentName:"a"},"Build, ctx context.Context, exec boil.ContextExecutor, related ..."),"BuildLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-resourcebuildannotations"},"func (q buildQuery) ResourceBuildAnnotations(o *Build, mods ...qm.QueryMod) buildAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-resourcebuildlabels"},"func (q buildQuery) ResourceBuildLabels(o *Build, mods ...qm.QueryMod) buildLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-setapp"},"func (q buildQuery) SetApp(o ",(0,o.kt)("em",{parentName:"a"},"Build, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-setkpacklifecycledata"},"func (q buildQuery) SetKpackLifecycleData(o ",(0,o.kt)("em",{parentName:"a"},"Build, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"KpackLifecycleDatum) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-setresourcebuildannotations"},"func (q buildQuery) SetResourceBuildAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Build, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"BuildAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-setresourcebuildlabels"},"func (q buildQuery) SetResourceBuildLabels(o ",(0,o.kt)("em",{parentName:"a"},"Build, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"BuildLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-update"},"func (q buildQuery) Update(o *Build, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-updateall"},"func (q buildQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-updateallslice"},"func (q buildQuery) UpdateAllSlice(o BuildSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildquery-upsert"},"func (q buildQuery) Upsert(o *Build, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildr"},"type buildR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"buildR) NewStruct() "),"buildR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpackannotationl"},"type buildpackAnnotationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackannotationl-loadresource"},"func (buildpackAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuildpackAnnotation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpackannotationquery"},"type buildpackAnnotationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackannotations"},"func BuildpackAnnotations(mods ...qm.QueryMod) buildpackAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackannotationquery-all"},"func (q buildpackAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (BuildpackAnnotationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackannotationquery-count"},"func (q buildpackAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackannotationquery-delete"},"func (q buildpackAnnotationQuery) Delete(o *BuildpackAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackannotationquery-deleteall"},"func (q buildpackAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackannotationquery-deleteallslice"},"func (q buildpackAnnotationQuery) DeleteAllSlice(o BuildpackAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackannotationquery-exists"},"func (q buildpackAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackannotationquery-insert"},"func (q buildpackAnnotationQuery) Insert(o *BuildpackAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackannotationquery-one"},"func (q buildpackAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BuildpackAnnotation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackannotationquery-reload"},"func (q buildpackAnnotationQuery) Reload(o *BuildpackAnnotation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackannotationquery-reloadall"},"func (q buildpackAnnotationQuery) ReloadAll(o *BuildpackAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackannotationquery-removeresource"},"func (q buildpackAnnotationQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"BuildpackAnnotation, ctx context.Context, exec boil.ContextExecutor, related "),"Buildpack) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackannotationquery-resource"},"func (q buildpackAnnotationQuery) Resource(o *BuildpackAnnotation, mods ...qm.QueryMod) buildpackQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackannotationquery-setresource"},"func (q buildpackAnnotationQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"BuildpackAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Buildpack) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackannotationquery-update"},"func (q buildpackAnnotationQuery) Update(o *BuildpackAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackannotationquery-updateall"},"func (q buildpackAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackannotationquery-updateallslice"},"func (q buildpackAnnotationQuery) UpdateAllSlice(o BuildpackAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackannotationquery-upsert"},"func (q buildpackAnnotationQuery) Upsert(o *BuildpackAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpackannotationr"},"type buildpackAnnotationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackannotationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"buildpackAnnotationR) NewStruct() "),"buildpackAnnotationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpackl"},"type buildpackL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackl-loadresourcebuildpackannotations"},"func (buildpackL) LoadResourceBuildpackAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuildpack interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackl-loadresourcebuildpacklabels"},"func (buildpackL) LoadResourceBuildpackLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuildpack interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklabell"},"type buildpackLabelL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklabell-loadresource"},"func (buildpackLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuildpackLabel interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklabelquery"},"type buildpackLabelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklabels"},"func BuildpackLabels(mods ...qm.QueryMod) buildpackLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklabelquery-all"},"func (q buildpackLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (BuildpackLabelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklabelquery-count"},"func (q buildpackLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklabelquery-delete"},"func (q buildpackLabelQuery) Delete(o *BuildpackLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklabelquery-deleteall"},"func (q buildpackLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklabelquery-deleteallslice"},"func (q buildpackLabelQuery) DeleteAllSlice(o BuildpackLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklabelquery-exists"},"func (q buildpackLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklabelquery-insert"},"func (q buildpackLabelQuery) Insert(o *BuildpackLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklabelquery-one"},"func (q buildpackLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BuildpackLabel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklabelquery-reload"},"func (q buildpackLabelQuery) Reload(o *BuildpackLabel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklabelquery-reloadall"},"func (q buildpackLabelQuery) ReloadAll(o *BuildpackLabelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklabelquery-removeresource"},"func (q buildpackLabelQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"BuildpackLabel, ctx context.Context, exec boil.ContextExecutor, related "),"Buildpack) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklabelquery-resource"},"func (q buildpackLabelQuery) Resource(o *BuildpackLabel, mods ...qm.QueryMod) buildpackQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklabelquery-setresource"},"func (q buildpackLabelQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"BuildpackLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Buildpack) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklabelquery-update"},"func (q buildpackLabelQuery) Update(o *BuildpackLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklabelquery-updateall"},"func (q buildpackLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklabelquery-updateallslice"},"func (q buildpackLabelQuery) UpdateAllSlice(o BuildpackLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklabelquery-upsert"},"func (q buildpackLabelQuery) Upsert(o *BuildpackLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklabelr"},"type buildpackLabelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklabelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"buildpackLabelR) NewStruct() "),"buildpackLabelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklifecyclebuildpackl"},"type buildpackLifecycleBuildpackL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecyclebuildpackl-loadbuildpacklifecycledatum"},"func (buildpackLifecycleBuildpackL) LoadBuildpackLifecycleDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuildpackLifecycleBuildpack interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklifecyclebuildpackquery"},"type buildpackLifecycleBuildpackQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecyclebuildpacks"},"func BuildpackLifecycleBuildpacks(mods ...qm.QueryMod) buildpackLifecycleBuildpackQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecyclebuildpackquery-all"},"func (q buildpackLifecycleBuildpackQuery) All(ctx context.Context, exec boil.ContextExecutor) (BuildpackLifecycleBuildpackSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecyclebuildpackquery-buildpacklifecycledatum"},"func (q buildpackLifecycleBuildpackQuery) BuildpackLifecycleDatum(o *BuildpackLifecycleBuildpack, mods ...qm.QueryMod) buildpackLifecycleDatumQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecyclebuildpackquery-count"},"func (q buildpackLifecycleBuildpackQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecyclebuildpackquery-delete"},"func (q buildpackLifecycleBuildpackQuery) Delete(o *BuildpackLifecycleBuildpack, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecyclebuildpackquery-deleteall"},"func (q buildpackLifecycleBuildpackQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecyclebuildpackquery-deleteallslice"},"func (q buildpackLifecycleBuildpackQuery) DeleteAllSlice(o BuildpackLifecycleBuildpackSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecyclebuildpackquery-exists"},"func (q buildpackLifecycleBuildpackQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecyclebuildpackquery-insert"},"func (q buildpackLifecycleBuildpackQuery) Insert(o *BuildpackLifecycleBuildpack, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecyclebuildpackquery-one"},"func (q buildpackLifecycleBuildpackQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BuildpackLifecycleBuildpack, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecyclebuildpackquery-reload"},"func (q buildpackLifecycleBuildpackQuery) Reload(o *BuildpackLifecycleBuildpack, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecyclebuildpackquery-reloadall"},"func (q buildpackLifecycleBuildpackQuery) ReloadAll(o *BuildpackLifecycleBuildpackSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecyclebuildpackquery-removebuildpacklifecycledatum"},"func (q buildpackLifecycleBuildpackQuery) RemoveBuildpackLifecycleDatum(o ",(0,o.kt)("em",{parentName:"a"},"BuildpackLifecycleBuildpack, ctx context.Context, exec boil.ContextExecutor, related "),"BuildpackLifecycleDatum) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecyclebuildpackquery-setbuildpacklifecycledatum"},"func (q buildpackLifecycleBuildpackQuery) SetBuildpackLifecycleDatum(o ",(0,o.kt)("em",{parentName:"a"},"BuildpackLifecycleBuildpack, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"BuildpackLifecycleDatum) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecyclebuildpackquery-update"},"func (q buildpackLifecycleBuildpackQuery) Update(o *BuildpackLifecycleBuildpack, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecyclebuildpackquery-updateall"},"func (q buildpackLifecycleBuildpackQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecyclebuildpackquery-updateallslice"},"func (q buildpackLifecycleBuildpackQuery) UpdateAllSlice(o BuildpackLifecycleBuildpackSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecyclebuildpackquery-upsert"},"func (q buildpackLifecycleBuildpackQuery) Upsert(o *BuildpackLifecycleBuildpack, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklifecyclebuildpackr"},"type buildpackLifecycleBuildpackR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecyclebuildpackr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"buildpackLifecycleBuildpackR) NewStruct() "),"buildpackLifecycleBuildpackR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklifecycledatuml"},"type buildpackLifecycleDatumL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecycledatuml-loadbuildpacklifecyclebuildpacks"},"func (buildpackLifecycleDatumL) LoadBuildpackLifecycleBuildpacks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuildpackLifecycleDatum interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklifecycledatumquery"},"type buildpackLifecycleDatumQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecycledata"},"func BuildpackLifecycleData(mods ...qm.QueryMod) buildpackLifecycleDatumQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecycledatumquery-addbuildpacklifecyclebuildpacks"},"func (q buildpackLifecycleDatumQuery) AddBuildpackLifecycleBuildpacks(o ",(0,o.kt)("em",{parentName:"a"},"BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"BuildpackLifecycleBuildpack) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecycledatumquery-all"},"func (q buildpackLifecycleDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (BuildpackLifecycleDatumSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecycledatumquery-buildpacklifecyclebuildpacks"},"func (q buildpackLifecycleDatumQuery) BuildpackLifecycleBuildpacks(o *BuildpackLifecycleDatum, mods ...qm.QueryMod) buildpackLifecycleBuildpackQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecycledatumquery-count"},"func (q buildpackLifecycleDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecycledatumquery-delete"},"func (q buildpackLifecycleDatumQuery) Delete(o *BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecycledatumquery-deleteall"},"func (q buildpackLifecycleDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecycledatumquery-deleteallslice"},"func (q buildpackLifecycleDatumQuery) DeleteAllSlice(o BuildpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecycledatumquery-exists"},"func (q buildpackLifecycleDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecycledatumquery-insert"},"func (q buildpackLifecycleDatumQuery) Insert(o *BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecycledatumquery-one"},"func (q buildpackLifecycleDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BuildpackLifecycleDatum, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecycledatumquery-reload"},"func (q buildpackLifecycleDatumQuery) Reload(o *BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecycledatumquery-reloadall"},"func (q buildpackLifecycleDatumQuery) ReloadAll(o *BuildpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecycledatumquery-removebuildpacklifecyclebuildpacks"},"func (q buildpackLifecycleDatumQuery) RemoveBuildpackLifecycleBuildpacks(o ",(0,o.kt)("em",{parentName:"a"},"BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, related ..."),"BuildpackLifecycleBuildpack) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecycledatumquery-setbuildpacklifecyclebuildpacks"},"func (q buildpackLifecycleDatumQuery) SetBuildpackLifecycleBuildpacks(o ",(0,o.kt)("em",{parentName:"a"},"BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"BuildpackLifecycleBuildpack) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecycledatumquery-update"},"func (q buildpackLifecycleDatumQuery) Update(o *BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecycledatumquery-updateall"},"func (q buildpackLifecycleDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecycledatumquery-updateallslice"},"func (q buildpackLifecycleDatumQuery) UpdateAllSlice(o BuildpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecycledatumquery-upsert"},"func (q buildpackLifecycleDatumQuery) Upsert(o *BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpacklifecycledatumr"},"type buildpackLifecycleDatumR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacklifecycledatumr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"buildpackLifecycleDatumR) NewStruct() "),"buildpackLifecycleDatumR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpackquery"},"type buildpackQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpacks"},"func Buildpacks(mods ...qm.QueryMod) buildpackQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackquery-addresourcebuildpackannotations"},"func (q buildpackQuery) AddResourceBuildpackAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Buildpack, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"BuildpackAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackquery-addresourcebuildpacklabels"},"func (q buildpackQuery) AddResourceBuildpackLabels(o ",(0,o.kt)("em",{parentName:"a"},"Buildpack, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"BuildpackLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackquery-all"},"func (q buildpackQuery) All(ctx context.Context, exec boil.ContextExecutor) (BuildpackSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackquery-count"},"func (q buildpackQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackquery-delete"},"func (q buildpackQuery) Delete(o *Buildpack, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackquery-deleteall"},"func (q buildpackQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackquery-deleteallslice"},"func (q buildpackQuery) DeleteAllSlice(o BuildpackSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackquery-exists"},"func (q buildpackQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackquery-insert"},"func (q buildpackQuery) Insert(o *Buildpack, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackquery-one"},"func (q buildpackQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Buildpack, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackquery-reload"},"func (q buildpackQuery) Reload(o *Buildpack, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackquery-reloadall"},"func (q buildpackQuery) ReloadAll(o *BuildpackSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackquery-removeresourcebuildpackannotations"},"func (q buildpackQuery) RemoveResourceBuildpackAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Buildpack, ctx context.Context, exec boil.ContextExecutor, related ..."),"BuildpackAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackquery-removeresourcebuildpacklabels"},"func (q buildpackQuery) RemoveResourceBuildpackLabels(o ",(0,o.kt)("em",{parentName:"a"},"Buildpack, ctx context.Context, exec boil.ContextExecutor, related ..."),"BuildpackLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackquery-resourcebuildpackannotations"},"func (q buildpackQuery) ResourceBuildpackAnnotations(o *Buildpack, mods ...qm.QueryMod) buildpackAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackquery-resourcebuildpacklabels"},"func (q buildpackQuery) ResourceBuildpackLabels(o *Buildpack, mods ...qm.QueryMod) buildpackLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackquery-setresourcebuildpackannotations"},"func (q buildpackQuery) SetResourceBuildpackAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Buildpack, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"BuildpackAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackquery-setresourcebuildpacklabels"},"func (q buildpackQuery) SetResourceBuildpackLabels(o ",(0,o.kt)("em",{parentName:"a"},"Buildpack, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"BuildpackLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackquery-update"},"func (q buildpackQuery) Update(o *Buildpack, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackquery-updateall"},"func (q buildpackQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackquery-updateallslice"},"func (q buildpackQuery) UpdateAllSlice(o BuildpackSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackquery-upsert"},"func (q buildpackQuery) Upsert(o *Buildpack, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-buildpackr"},"type buildpackR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildpackr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"buildpackR) NewStruct() "),"buildpackR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-clockjobl"},"type clockJobL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-clockjobquery"},"type clockJobQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-clockjobs"},"func ClockJobs(mods ...qm.QueryMod) clockJobQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-clockjobquery-all"},"func (q clockJobQuery) All(ctx context.Context, exec boil.ContextExecutor) (ClockJobSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-clockjobquery-count"},"func (q clockJobQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-clockjobquery-delete"},"func (q clockJobQuery) Delete(o *ClockJob, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-clockjobquery-deleteall"},"func (q clockJobQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-clockjobquery-deleteallslice"},"func (q clockJobQuery) DeleteAllSlice(o ClockJobSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-clockjobquery-exists"},"func (q clockJobQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-clockjobquery-insert"},"func (q clockJobQuery) Insert(o *ClockJob, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-clockjobquery-one"},"func (q clockJobQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ClockJob, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-clockjobquery-reload"},"func (q clockJobQuery) Reload(o *ClockJob, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-clockjobquery-reloadall"},"func (q clockJobQuery) ReloadAll(o *ClockJobSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-clockjobquery-update"},"func (q clockJobQuery) Update(o *ClockJob, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-clockjobquery-updateall"},"func (q clockJobQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-clockjobquery-updateallslice"},"func (q clockJobQuery) UpdateAllSlice(o ClockJobSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-clockjobquery-upsert"},"func (q clockJobQuery) Upsert(o *ClockJob, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-clockjobr"},"type clockJobR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-clockjobr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"clockJobR) NewStruct() "),"clockJobR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-delayedjobl"},"type delayedJobL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-delayedjobquery"},"type delayedJobQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-delayedjobs"},"func DelayedJobs(mods ...qm.QueryMod) delayedJobQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-delayedjobquery-all"},"func (q delayedJobQuery) All(ctx context.Context, exec boil.ContextExecutor) (DelayedJobSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-delayedjobquery-count"},"func (q delayedJobQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-delayedjobquery-delete"},"func (q delayedJobQuery) Delete(o *DelayedJob, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-delayedjobquery-deleteall"},"func (q delayedJobQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-delayedjobquery-deleteallslice"},"func (q delayedJobQuery) DeleteAllSlice(o DelayedJobSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-delayedjobquery-exists"},"func (q delayedJobQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-delayedjobquery-insert"},"func (q delayedJobQuery) Insert(o *DelayedJob, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-delayedjobquery-one"},"func (q delayedJobQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DelayedJob, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-delayedjobquery-reload"},"func (q delayedJobQuery) Reload(o *DelayedJob, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-delayedjobquery-reloadall"},"func (q delayedJobQuery) ReloadAll(o *DelayedJobSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-delayedjobquery-update"},"func (q delayedJobQuery) Update(o *DelayedJob, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-delayedjobquery-updateall"},"func (q delayedJobQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-delayedjobquery-updateallslice"},"func (q delayedJobQuery) UpdateAllSlice(o DelayedJobSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-delayedjobquery-upsert"},"func (q delayedJobQuery) Upsert(o *DelayedJob, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-delayedjobr"},"type delayedJobR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-delayedjobr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"delayedJobR) NewStruct() "),"delayedJobR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentannotationl"},"type deploymentAnnotationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentannotationl-loadresource"},"func (deploymentAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeploymentAnnotation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentannotationquery"},"type deploymentAnnotationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentannotations"},"func DeploymentAnnotations(mods ...qm.QueryMod) deploymentAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentannotationquery-all"},"func (q deploymentAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeploymentAnnotationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentannotationquery-count"},"func (q deploymentAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentannotationquery-delete"},"func (q deploymentAnnotationQuery) Delete(o *DeploymentAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentannotationquery-deleteall"},"func (q deploymentAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentannotationquery-deleteallslice"},"func (q deploymentAnnotationQuery) DeleteAllSlice(o DeploymentAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentannotationquery-exists"},"func (q deploymentAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentannotationquery-insert"},"func (q deploymentAnnotationQuery) Insert(o *DeploymentAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentannotationquery-one"},"func (q deploymentAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeploymentAnnotation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentannotationquery-reload"},"func (q deploymentAnnotationQuery) Reload(o *DeploymentAnnotation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentannotationquery-reloadall"},"func (q deploymentAnnotationQuery) ReloadAll(o *DeploymentAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentannotationquery-removeresource"},"func (q deploymentAnnotationQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"DeploymentAnnotation, ctx context.Context, exec boil.ContextExecutor, related "),"Deployment) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentannotationquery-resource"},"func (q deploymentAnnotationQuery) Resource(o *DeploymentAnnotation, mods ...qm.QueryMod) deploymentQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentannotationquery-setresource"},"func (q deploymentAnnotationQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"DeploymentAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Deployment) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentannotationquery-update"},"func (q deploymentAnnotationQuery) Update(o *DeploymentAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentannotationquery-updateall"},"func (q deploymentAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentannotationquery-updateallslice"},"func (q deploymentAnnotationQuery) UpdateAllSlice(o DeploymentAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentannotationquery-upsert"},"func (q deploymentAnnotationQuery) Upsert(o *DeploymentAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentannotationr"},"type deploymentAnnotationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentannotationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"deploymentAnnotationR) NewStruct() "),"deploymentAnnotationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentl"},"type deploymentL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentl-loadapp"},"func (deploymentL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeployment interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentl-loaddeploymentprocesses"},"func (deploymentL) LoadDeploymentProcesses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeployment interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentl-loadresourcedeploymentannotations"},"func (deploymentL) LoadResourceDeploymentAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeployment interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentl-loadresourcedeploymentlabels"},"func (deploymentL) LoadResourceDeploymentLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeployment interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentlabell"},"type deploymentLabelL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentlabell-loadresource"},"func (deploymentLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeploymentLabel interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentlabelquery"},"type deploymentLabelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentlabels"},"func DeploymentLabels(mods ...qm.QueryMod) deploymentLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentlabelquery-all"},"func (q deploymentLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeploymentLabelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentlabelquery-count"},"func (q deploymentLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentlabelquery-delete"},"func (q deploymentLabelQuery) Delete(o *DeploymentLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentlabelquery-deleteall"},"func (q deploymentLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentlabelquery-deleteallslice"},"func (q deploymentLabelQuery) DeleteAllSlice(o DeploymentLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentlabelquery-exists"},"func (q deploymentLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentlabelquery-insert"},"func (q deploymentLabelQuery) Insert(o *DeploymentLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentlabelquery-one"},"func (q deploymentLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeploymentLabel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentlabelquery-reload"},"func (q deploymentLabelQuery) Reload(o *DeploymentLabel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentlabelquery-reloadall"},"func (q deploymentLabelQuery) ReloadAll(o *DeploymentLabelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentlabelquery-removeresource"},"func (q deploymentLabelQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"DeploymentLabel, ctx context.Context, exec boil.ContextExecutor, related "),"Deployment) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentlabelquery-resource"},"func (q deploymentLabelQuery) Resource(o *DeploymentLabel, mods ...qm.QueryMod) deploymentQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentlabelquery-setresource"},"func (q deploymentLabelQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"DeploymentLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Deployment) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentlabelquery-update"},"func (q deploymentLabelQuery) Update(o *DeploymentLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentlabelquery-updateall"},"func (q deploymentLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentlabelquery-updateallslice"},"func (q deploymentLabelQuery) UpdateAllSlice(o DeploymentLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentlabelquery-upsert"},"func (q deploymentLabelQuery) Upsert(o *DeploymentLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentlabelr"},"type deploymentLabelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentlabelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"deploymentLabelR) NewStruct() "),"deploymentLabelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentprocessl"},"type deploymentProcessL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentprocessl-loaddeployment"},"func (deploymentProcessL) LoadDeployment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeploymentProcess interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentprocessquery"},"type deploymentProcessQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentprocesses"},"func DeploymentProcesses(mods ...qm.QueryMod) deploymentProcessQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentprocessquery-all"},"func (q deploymentProcessQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeploymentProcessSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentprocessquery-count"},"func (q deploymentProcessQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentprocessquery-delete"},"func (q deploymentProcessQuery) Delete(o *DeploymentProcess, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentprocessquery-deleteall"},"func (q deploymentProcessQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentprocessquery-deleteallslice"},"func (q deploymentProcessQuery) DeleteAllSlice(o DeploymentProcessSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentprocessquery-deployment"},"func (q deploymentProcessQuery) Deployment(o *DeploymentProcess, mods ...qm.QueryMod) deploymentQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentprocessquery-exists"},"func (q deploymentProcessQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentprocessquery-insert"},"func (q deploymentProcessQuery) Insert(o *DeploymentProcess, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentprocessquery-one"},"func (q deploymentProcessQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeploymentProcess, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentprocessquery-reload"},"func (q deploymentProcessQuery) Reload(o *DeploymentProcess, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentprocessquery-reloadall"},"func (q deploymentProcessQuery) ReloadAll(o *DeploymentProcessSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentprocessquery-removedeployment"},"func (q deploymentProcessQuery) RemoveDeployment(o ",(0,o.kt)("em",{parentName:"a"},"DeploymentProcess, ctx context.Context, exec boil.ContextExecutor, related "),"Deployment) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentprocessquery-setdeployment"},"func (q deploymentProcessQuery) SetDeployment(o ",(0,o.kt)("em",{parentName:"a"},"DeploymentProcess, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Deployment) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentprocessquery-update"},"func (q deploymentProcessQuery) Update(o *DeploymentProcess, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentprocessquery-updateall"},"func (q deploymentProcessQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentprocessquery-updateallslice"},"func (q deploymentProcessQuery) UpdateAllSlice(o DeploymentProcessSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentprocessquery-upsert"},"func (q deploymentProcessQuery) Upsert(o *DeploymentProcess, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentprocessr"},"type deploymentProcessR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentprocessr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"deploymentProcessR) NewStruct() "),"deploymentProcessR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentquery"},"type deploymentQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deployments"},"func Deployments(mods ...qm.QueryMod) deploymentQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-adddeploymentprocesses"},"func (q deploymentQuery) AddDeploymentProcesses(o ",(0,o.kt)("em",{parentName:"a"},"Deployment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"DeploymentProcess) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-addresourcedeploymentannotations"},"func (q deploymentQuery) AddResourceDeploymentAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Deployment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"DeploymentAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-addresourcedeploymentlabels"},"func (q deploymentQuery) AddResourceDeploymentLabels(o ",(0,o.kt)("em",{parentName:"a"},"Deployment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"DeploymentLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-all"},"func (q deploymentQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeploymentSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-app"},"func (q deploymentQuery) App(o *Deployment, mods ...qm.QueryMod) appQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-count"},"func (q deploymentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-delete"},"func (q deploymentQuery) Delete(o *Deployment, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-deleteall"},"func (q deploymentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-deleteallslice"},"func (q deploymentQuery) DeleteAllSlice(o DeploymentSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-deploymentprocesses"},"func (q deploymentQuery) DeploymentProcesses(o *Deployment, mods ...qm.QueryMod) deploymentProcessQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-exists"},"func (q deploymentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-insert"},"func (q deploymentQuery) Insert(o *Deployment, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-one"},"func (q deploymentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Deployment, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-reload"},"func (q deploymentQuery) Reload(o *Deployment, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-reloadall"},"func (q deploymentQuery) ReloadAll(o *DeploymentSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-removeapp"},"func (q deploymentQuery) RemoveApp(o ",(0,o.kt)("em",{parentName:"a"},"Deployment, ctx context.Context, exec boil.ContextExecutor, related "),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-removedeploymentprocesses"},"func (q deploymentQuery) RemoveDeploymentProcesses(o ",(0,o.kt)("em",{parentName:"a"},"Deployment, ctx context.Context, exec boil.ContextExecutor, related ..."),"DeploymentProcess) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-removeresourcedeploymentannotations"},"func (q deploymentQuery) RemoveResourceDeploymentAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Deployment, ctx context.Context, exec boil.ContextExecutor, related ..."),"DeploymentAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-removeresourcedeploymentlabels"},"func (q deploymentQuery) RemoveResourceDeploymentLabels(o ",(0,o.kt)("em",{parentName:"a"},"Deployment, ctx context.Context, exec boil.ContextExecutor, related ..."),"DeploymentLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-resourcedeploymentannotations"},"func (q deploymentQuery) ResourceDeploymentAnnotations(o *Deployment, mods ...qm.QueryMod) deploymentAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-resourcedeploymentlabels"},"func (q deploymentQuery) ResourceDeploymentLabels(o *Deployment, mods ...qm.QueryMod) deploymentLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-setapp"},"func (q deploymentQuery) SetApp(o ",(0,o.kt)("em",{parentName:"a"},"Deployment, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-setdeploymentprocesses"},"func (q deploymentQuery) SetDeploymentProcesses(o ",(0,o.kt)("em",{parentName:"a"},"Deployment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"DeploymentProcess) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-setresourcedeploymentannotations"},"func (q deploymentQuery) SetResourceDeploymentAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Deployment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"DeploymentAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-setresourcedeploymentlabels"},"func (q deploymentQuery) SetResourceDeploymentLabels(o ",(0,o.kt)("em",{parentName:"a"},"Deployment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"DeploymentLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-update"},"func (q deploymentQuery) Update(o *Deployment, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-updateall"},"func (q deploymentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-updateallslice"},"func (q deploymentQuery) UpdateAllSlice(o DeploymentSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentquery-upsert"},"func (q deploymentQuery) Upsert(o *Deployment, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-deploymentr"},"type deploymentR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-deploymentr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"deploymentR) NewStruct() "),"deploymentR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainannotationl"},"type domainAnnotationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainannotationl-loadresource"},"func (domainAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomainAnnotation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainannotationquery"},"type domainAnnotationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainannotations"},"func DomainAnnotations(mods ...qm.QueryMod) domainAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainannotationquery-all"},"func (q domainAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (DomainAnnotationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainannotationquery-count"},"func (q domainAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainannotationquery-delete"},"func (q domainAnnotationQuery) Delete(o *DomainAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainannotationquery-deleteall"},"func (q domainAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainannotationquery-deleteallslice"},"func (q domainAnnotationQuery) DeleteAllSlice(o DomainAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainannotationquery-exists"},"func (q domainAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainannotationquery-insert"},"func (q domainAnnotationQuery) Insert(o *DomainAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainannotationquery-one"},"func (q domainAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DomainAnnotation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainannotationquery-reload"},"func (q domainAnnotationQuery) Reload(o *DomainAnnotation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainannotationquery-reloadall"},"func (q domainAnnotationQuery) ReloadAll(o *DomainAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainannotationquery-removeresource"},"func (q domainAnnotationQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"DomainAnnotation, ctx context.Context, exec boil.ContextExecutor, related "),"Domain) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainannotationquery-resource"},"func (q domainAnnotationQuery) Resource(o *DomainAnnotation, mods ...qm.QueryMod) domainQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainannotationquery-setresource"},"func (q domainAnnotationQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"DomainAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Domain) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainannotationquery-update"},"func (q domainAnnotationQuery) Update(o *DomainAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainannotationquery-updateall"},"func (q domainAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainannotationquery-updateallslice"},"func (q domainAnnotationQuery) UpdateAllSlice(o DomainAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainannotationquery-upsert"},"func (q domainAnnotationQuery) Upsert(o *DomainAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainannotationr"},"type domainAnnotationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainannotationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"domainAnnotationR) NewStruct() "),"domainAnnotationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainl"},"type domainL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainl-loadowningorganization"},"func (domainL) LoadOwningOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomain interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainl-loadprivatedomainorganizationsprivatedomains"},"func (domainL) LoadPrivateDomainOrganizationsPrivateDomains(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomain interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainl-loadresourcedomainannotations"},"func (domainL) LoadResourceDomainAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomain interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainl-loadresourcedomainlabels"},"func (domainL) LoadResourceDomainLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomain interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainl-loadroutes"},"func (domainL) LoadRoutes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomain interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainlabell"},"type domainLabelL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainlabell-loadresource"},"func (domainLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomainLabel interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainlabelquery"},"type domainLabelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainlabels"},"func DomainLabels(mods ...qm.QueryMod) domainLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainlabelquery-all"},"func (q domainLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (DomainLabelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainlabelquery-count"},"func (q domainLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainlabelquery-delete"},"func (q domainLabelQuery) Delete(o *DomainLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainlabelquery-deleteall"},"func (q domainLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainlabelquery-deleteallslice"},"func (q domainLabelQuery) DeleteAllSlice(o DomainLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainlabelquery-exists"},"func (q domainLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainlabelquery-insert"},"func (q domainLabelQuery) Insert(o *DomainLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainlabelquery-one"},"func (q domainLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DomainLabel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainlabelquery-reload"},"func (q domainLabelQuery) Reload(o *DomainLabel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainlabelquery-reloadall"},"func (q domainLabelQuery) ReloadAll(o *DomainLabelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainlabelquery-removeresource"},"func (q domainLabelQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"DomainLabel, ctx context.Context, exec boil.ContextExecutor, related "),"Domain) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainlabelquery-resource"},"func (q domainLabelQuery) Resource(o *DomainLabel, mods ...qm.QueryMod) domainQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainlabelquery-setresource"},"func (q domainLabelQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"DomainLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Domain) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainlabelquery-update"},"func (q domainLabelQuery) Update(o *DomainLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainlabelquery-updateall"},"func (q domainLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainlabelquery-updateallslice"},"func (q domainLabelQuery) UpdateAllSlice(o DomainLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainlabelquery-upsert"},"func (q domainLabelQuery) Upsert(o *DomainLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainlabelr"},"type domainLabelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainlabelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"domainLabelR) NewStruct() "),"domainLabelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainquery"},"type domainQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domains"},"func Domains(mods ...qm.QueryMod) domainQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-addprivatedomainorganizationsprivatedomains"},"func (q domainQuery) AddPrivateDomainOrganizationsPrivateDomains(o ",(0,o.kt)("em",{parentName:"a"},"Domain, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"OrganizationsPrivateDomain) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-addresourcedomainannotations"},"func (q domainQuery) AddResourceDomainAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Domain, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"DomainAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-addresourcedomainlabels"},"func (q domainQuery) AddResourceDomainLabels(o ",(0,o.kt)("em",{parentName:"a"},"Domain, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"DomainLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-addroutes"},"func (q domainQuery) AddRoutes(o ",(0,o.kt)("em",{parentName:"a"},"Domain, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Route) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-all"},"func (q domainQuery) All(ctx context.Context, exec boil.ContextExecutor) (DomainSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-count"},"func (q domainQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-delete"},"func (q domainQuery) Delete(o *Domain, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-deleteall"},"func (q domainQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-deleteallslice"},"func (q domainQuery) DeleteAllSlice(o DomainSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-exists"},"func (q domainQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-insert"},"func (q domainQuery) Insert(o *Domain, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-one"},"func (q domainQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Domain, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-owningorganization"},"func (q domainQuery) OwningOrganization(o *Domain, mods ...qm.QueryMod) organizationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-privatedomainorganizationsprivatedomains"},"func (q domainQuery) PrivateDomainOrganizationsPrivateDomains(o *Domain, mods ...qm.QueryMod) organizationsPrivateDomainQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-reload"},"func (q domainQuery) Reload(o *Domain, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-reloadall"},"func (q domainQuery) ReloadAll(o *DomainSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-removeowningorganization"},"func (q domainQuery) RemoveOwningOrganization(o ",(0,o.kt)("em",{parentName:"a"},"Domain, ctx context.Context, exec boil.ContextExecutor, related "),"Organization) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-removeresourcedomainannotations"},"func (q domainQuery) RemoveResourceDomainAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Domain, ctx context.Context, exec boil.ContextExecutor, related ..."),"DomainAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-removeresourcedomainlabels"},"func (q domainQuery) RemoveResourceDomainLabels(o ",(0,o.kt)("em",{parentName:"a"},"Domain, ctx context.Context, exec boil.ContextExecutor, related ..."),"DomainLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-resourcedomainannotations"},"func (q domainQuery) ResourceDomainAnnotations(o *Domain, mods ...qm.QueryMod) domainAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-resourcedomainlabels"},"func (q domainQuery) ResourceDomainLabels(o *Domain, mods ...qm.QueryMod) domainLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-routes"},"func (q domainQuery) Routes(o *Domain, mods ...qm.QueryMod) routeQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-setowningorganization"},"func (q domainQuery) SetOwningOrganization(o ",(0,o.kt)("em",{parentName:"a"},"Domain, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Organization) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-setresourcedomainannotations"},"func (q domainQuery) SetResourceDomainAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Domain, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"DomainAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-setresourcedomainlabels"},"func (q domainQuery) SetResourceDomainLabels(o ",(0,o.kt)("em",{parentName:"a"},"Domain, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"DomainLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-update"},"func (q domainQuery) Update(o *Domain, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-updateall"},"func (q domainQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-updateallslice"},"func (q domainQuery) UpdateAllSlice(o DomainSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainquery-upsert"},"func (q domainQuery) Upsert(o *Domain, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-domainr"},"type domainR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-domainr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"domainR) NewStruct() "),"domainR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletannotationl"},"type dropletAnnotationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletannotationl-loadresource"},"func (dropletAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDropletAnnotation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletannotationquery"},"type dropletAnnotationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletannotations"},"func DropletAnnotations(mods ...qm.QueryMod) dropletAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletannotationquery-all"},"func (q dropletAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (DropletAnnotationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletannotationquery-count"},"func (q dropletAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletannotationquery-delete"},"func (q dropletAnnotationQuery) Delete(o *DropletAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletannotationquery-deleteall"},"func (q dropletAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletannotationquery-deleteallslice"},"func (q dropletAnnotationQuery) DeleteAllSlice(o DropletAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletannotationquery-exists"},"func (q dropletAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletannotationquery-insert"},"func (q dropletAnnotationQuery) Insert(o *DropletAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletannotationquery-one"},"func (q dropletAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DropletAnnotation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletannotationquery-reload"},"func (q dropletAnnotationQuery) Reload(o *DropletAnnotation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletannotationquery-reloadall"},"func (q dropletAnnotationQuery) ReloadAll(o *DropletAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletannotationquery-removeresource"},"func (q dropletAnnotationQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"DropletAnnotation, ctx context.Context, exec boil.ContextExecutor, related "),"Droplet) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletannotationquery-resource"},"func (q dropletAnnotationQuery) Resource(o *DropletAnnotation, mods ...qm.QueryMod) dropletQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletannotationquery-setresource"},"func (q dropletAnnotationQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"DropletAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Droplet) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletannotationquery-update"},"func (q dropletAnnotationQuery) Update(o *DropletAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletannotationquery-updateall"},"func (q dropletAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletannotationquery-updateallslice"},"func (q dropletAnnotationQuery) UpdateAllSlice(o DropletAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletannotationquery-upsert"},"func (q dropletAnnotationQuery) Upsert(o *DropletAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletannotationr"},"type dropletAnnotationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletannotationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"dropletAnnotationR) NewStruct() "),"dropletAnnotationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletl"},"type dropletL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletl-loadapp"},"func (dropletL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDroplet interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletl-loadresourcedropletannotations"},"func (dropletL) LoadResourceDropletAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDroplet interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletl-loadresourcedropletlabels"},"func (dropletL) LoadResourceDropletLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDroplet interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletlabell"},"type dropletLabelL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletlabell-loadresource"},"func (dropletLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDropletLabel interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletlabelquery"},"type dropletLabelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletlabels"},"func DropletLabels(mods ...qm.QueryMod) dropletLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletlabelquery-all"},"func (q dropletLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (DropletLabelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletlabelquery-count"},"func (q dropletLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletlabelquery-delete"},"func (q dropletLabelQuery) Delete(o *DropletLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletlabelquery-deleteall"},"func (q dropletLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletlabelquery-deleteallslice"},"func (q dropletLabelQuery) DeleteAllSlice(o DropletLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletlabelquery-exists"},"func (q dropletLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletlabelquery-insert"},"func (q dropletLabelQuery) Insert(o *DropletLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletlabelquery-one"},"func (q dropletLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DropletLabel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletlabelquery-reload"},"func (q dropletLabelQuery) Reload(o *DropletLabel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletlabelquery-reloadall"},"func (q dropletLabelQuery) ReloadAll(o *DropletLabelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletlabelquery-removeresource"},"func (q dropletLabelQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"DropletLabel, ctx context.Context, exec boil.ContextExecutor, related "),"Droplet) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletlabelquery-resource"},"func (q dropletLabelQuery) Resource(o *DropletLabel, mods ...qm.QueryMod) dropletQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletlabelquery-setresource"},"func (q dropletLabelQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"DropletLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Droplet) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletlabelquery-update"},"func (q dropletLabelQuery) Update(o *DropletLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletlabelquery-updateall"},"func (q dropletLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletlabelquery-updateallslice"},"func (q dropletLabelQuery) UpdateAllSlice(o DropletLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletlabelquery-upsert"},"func (q dropletLabelQuery) Upsert(o *DropletLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletlabelr"},"type dropletLabelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletlabelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"dropletLabelR) NewStruct() "),"dropletLabelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletquery"},"type dropletQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-droplets"},"func Droplets(mods ...qm.QueryMod) dropletQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-addresourcedropletannotations"},"func (q dropletQuery) AddResourceDropletAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Droplet, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"DropletAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-addresourcedropletlabels"},"func (q dropletQuery) AddResourceDropletLabels(o ",(0,o.kt)("em",{parentName:"a"},"Droplet, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"DropletLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-all"},"func (q dropletQuery) All(ctx context.Context, exec boil.ContextExecutor) (DropletSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-app"},"func (q dropletQuery) App(o *Droplet, mods ...qm.QueryMod) appQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-count"},"func (q dropletQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-delete"},"func (q dropletQuery) Delete(o *Droplet, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-deleteall"},"func (q dropletQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-deleteallslice"},"func (q dropletQuery) DeleteAllSlice(o DropletSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-exists"},"func (q dropletQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-insert"},"func (q dropletQuery) Insert(o *Droplet, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-one"},"func (q dropletQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Droplet, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-reload"},"func (q dropletQuery) Reload(o *Droplet, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-reloadall"},"func (q dropletQuery) ReloadAll(o *DropletSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-removeapp"},"func (q dropletQuery) RemoveApp(o ",(0,o.kt)("em",{parentName:"a"},"Droplet, ctx context.Context, exec boil.ContextExecutor, related "),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-removeresourcedropletannotations"},"func (q dropletQuery) RemoveResourceDropletAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Droplet, ctx context.Context, exec boil.ContextExecutor, related ..."),"DropletAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-removeresourcedropletlabels"},"func (q dropletQuery) RemoveResourceDropletLabels(o ",(0,o.kt)("em",{parentName:"a"},"Droplet, ctx context.Context, exec boil.ContextExecutor, related ..."),"DropletLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-resourcedropletannotations"},"func (q dropletQuery) ResourceDropletAnnotations(o *Droplet, mods ...qm.QueryMod) dropletAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-resourcedropletlabels"},"func (q dropletQuery) ResourceDropletLabels(o *Droplet, mods ...qm.QueryMod) dropletLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-setapp"},"func (q dropletQuery) SetApp(o ",(0,o.kt)("em",{parentName:"a"},"Droplet, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-setresourcedropletannotations"},"func (q dropletQuery) SetResourceDropletAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Droplet, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"DropletAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-setresourcedropletlabels"},"func (q dropletQuery) SetResourceDropletLabels(o ",(0,o.kt)("em",{parentName:"a"},"Droplet, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"DropletLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-update"},"func (q dropletQuery) Update(o *Droplet, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-updateall"},"func (q dropletQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-updateallslice"},"func (q dropletQuery) UpdateAllSlice(o DropletSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletquery-upsert"},"func (q dropletQuery) Upsert(o *Droplet, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-dropletr"},"type dropletR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-dropletr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"dropletR) NewStruct() "),"dropletR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-encryptionkeysentinell"},"type encryptionKeySentinelL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-encryptionkeysentinelquery"},"type encryptionKeySentinelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-encryptionkeysentinels"},"func EncryptionKeySentinels(mods ...qm.QueryMod) encryptionKeySentinelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-encryptionkeysentinelquery-all"},"func (q encryptionKeySentinelQuery) All(ctx context.Context, exec boil.ContextExecutor) (EncryptionKeySentinelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-encryptionkeysentinelquery-count"},"func (q encryptionKeySentinelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-encryptionkeysentinelquery-delete"},"func (q encryptionKeySentinelQuery) Delete(o *EncryptionKeySentinel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-encryptionkeysentinelquery-deleteall"},"func (q encryptionKeySentinelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-encryptionkeysentinelquery-deleteallslice"},"func (q encryptionKeySentinelQuery) DeleteAllSlice(o EncryptionKeySentinelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-encryptionkeysentinelquery-exists"},"func (q encryptionKeySentinelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-encryptionkeysentinelquery-insert"},"func (q encryptionKeySentinelQuery) Insert(o *EncryptionKeySentinel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-encryptionkeysentinelquery-one"},"func (q encryptionKeySentinelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EncryptionKeySentinel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-encryptionkeysentinelquery-reload"},"func (q encryptionKeySentinelQuery) Reload(o *EncryptionKeySentinel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-encryptionkeysentinelquery-reloadall"},"func (q encryptionKeySentinelQuery) ReloadAll(o *EncryptionKeySentinelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-encryptionkeysentinelquery-update"},"func (q encryptionKeySentinelQuery) Update(o *EncryptionKeySentinel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-encryptionkeysentinelquery-updateall"},"func (q encryptionKeySentinelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-encryptionkeysentinelquery-updateallslice"},"func (q encryptionKeySentinelQuery) UpdateAllSlice(o EncryptionKeySentinelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-encryptionkeysentinelquery-upsert"},"func (q encryptionKeySentinelQuery) Upsert(o *EncryptionKeySentinel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-encryptionkeysentinelr"},"type encryptionKeySentinelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-encryptionkeysentinelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"encryptionKeySentinelR) NewStruct() "),"encryptionKeySentinelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-envgroupl"},"type envGroupL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-envgroupquery"},"type envGroupQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-envgroups"},"func EnvGroups(mods ...qm.QueryMod) envGroupQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-envgroupquery-all"},"func (q envGroupQuery) All(ctx context.Context, exec boil.ContextExecutor) (EnvGroupSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-envgroupquery-count"},"func (q envGroupQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-envgroupquery-delete"},"func (q envGroupQuery) Delete(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-envgroupquery-deleteall"},"func (q envGroupQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-envgroupquery-deleteallslice"},"func (q envGroupQuery) DeleteAllSlice(o EnvGroupSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-envgroupquery-exists"},"func (q envGroupQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-envgroupquery-insert"},"func (q envGroupQuery) Insert(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-envgroupquery-one"},"func (q envGroupQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EnvGroup, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-envgroupquery-reload"},"func (q envGroupQuery) Reload(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-envgroupquery-reloadall"},"func (q envGroupQuery) ReloadAll(o *EnvGroupSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-envgroupquery-update"},"func (q envGroupQuery) Update(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-envgroupquery-updateall"},"func (q envGroupQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-envgroupquery-updateallslice"},"func (q envGroupQuery) UpdateAllSlice(o EnvGroupSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-envgroupquery-upsert"},"func (q envGroupQuery) Upsert(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-envgroupr"},"type envGroupR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-envgroupr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"envGroupR) NewStruct() "),"envGroupR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-eventl"},"type eventL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-eventquery"},"type eventQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-events"},"func Events(mods ...qm.QueryMod) eventQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-eventquery-all"},"func (q eventQuery) All(ctx context.Context, exec boil.ContextExecutor) (EventSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-eventquery-count"},"func (q eventQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-eventquery-delete"},"func (q eventQuery) Delete(o *Event, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-eventquery-deleteall"},"func (q eventQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-eventquery-deleteallslice"},"func (q eventQuery) DeleteAllSlice(o EventSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-eventquery-exists"},"func (q eventQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-eventquery-insert"},"func (q eventQuery) Insert(o *Event, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-eventquery-one"},"func (q eventQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Event, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-eventquery-reload"},"func (q eventQuery) Reload(o *Event, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-eventquery-reloadall"},"func (q eventQuery) ReloadAll(o *EventSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-eventquery-update"},"func (q eventQuery) Update(o *Event, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-eventquery-updateall"},"func (q eventQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-eventquery-updateallslice"},"func (q eventQuery) UpdateAllSlice(o EventSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-eventquery-upsert"},"func (q eventQuery) Upsert(o *Event, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-eventr"},"type eventR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-eventr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"eventR) NewStruct() "),"eventR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-featureflagl"},"type featureFlagL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-featureflagquery"},"type featureFlagQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-featureflags"},"func FeatureFlags(mods ...qm.QueryMod) featureFlagQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-featureflagquery-all"},"func (q featureFlagQuery) All(ctx context.Context, exec boil.ContextExecutor) (FeatureFlagSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-featureflagquery-count"},"func (q featureFlagQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-featureflagquery-delete"},"func (q featureFlagQuery) Delete(o *FeatureFlag, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-featureflagquery-deleteall"},"func (q featureFlagQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-featureflagquery-deleteallslice"},"func (q featureFlagQuery) DeleteAllSlice(o FeatureFlagSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-featureflagquery-exists"},"func (q featureFlagQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-featureflagquery-insert"},"func (q featureFlagQuery) Insert(o *FeatureFlag, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-featureflagquery-one"},"func (q featureFlagQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FeatureFlag, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-featureflagquery-reload"},"func (q featureFlagQuery) Reload(o *FeatureFlag, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-featureflagquery-reloadall"},"func (q featureFlagQuery) ReloadAll(o *FeatureFlagSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-featureflagquery-update"},"func (q featureFlagQuery) Update(o *FeatureFlag, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-featureflagquery-updateall"},"func (q featureFlagQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-featureflagquery-updateallslice"},"func (q featureFlagQuery) UpdateAllSlice(o FeatureFlagSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-featureflagquery-upsert"},"func (q featureFlagQuery) Upsert(o *FeatureFlag, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-featureflagr"},"type featureFlagR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-featureflagr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"featureFlagR) NewStruct() "),"featureFlagR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-insertcache"},"type insertCache")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentannotationl"},"type isolationSegmentAnnotationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentannotationl-loadresource"},"func (isolationSegmentAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIsolationSegmentAnnotation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentannotationquery"},"type isolationSegmentAnnotationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentannotations"},"func IsolationSegmentAnnotations(mods ...qm.QueryMod) isolationSegmentAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentannotationquery-all"},"func (q isolationSegmentAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (IsolationSegmentAnnotationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentannotationquery-count"},"func (q isolationSegmentAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentannotationquery-delete"},"func (q isolationSegmentAnnotationQuery) Delete(o *IsolationSegmentAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentannotationquery-deleteall"},"func (q isolationSegmentAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentannotationquery-deleteallslice"},"func (q isolationSegmentAnnotationQuery) DeleteAllSlice(o IsolationSegmentAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentannotationquery-exists"},"func (q isolationSegmentAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentannotationquery-insert"},"func (q isolationSegmentAnnotationQuery) Insert(o *IsolationSegmentAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentannotationquery-one"},"func (q isolationSegmentAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*IsolationSegmentAnnotation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentannotationquery-reload"},"func (q isolationSegmentAnnotationQuery) Reload(o *IsolationSegmentAnnotation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentannotationquery-reloadall"},"func (q isolationSegmentAnnotationQuery) ReloadAll(o *IsolationSegmentAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentannotationquery-removeresource"},"func (q isolationSegmentAnnotationQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"IsolationSegmentAnnotation, ctx context.Context, exec boil.ContextExecutor, related "),"IsolationSegment) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentannotationquery-resource"},"func (q isolationSegmentAnnotationQuery) Resource(o *IsolationSegmentAnnotation, mods ...qm.QueryMod) isolationSegmentQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentannotationquery-setresource"},"func (q isolationSegmentAnnotationQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"IsolationSegmentAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"IsolationSegment) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentannotationquery-update"},"func (q isolationSegmentAnnotationQuery) Update(o *IsolationSegmentAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentannotationquery-updateall"},"func (q isolationSegmentAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentannotationquery-updateallslice"},"func (q isolationSegmentAnnotationQuery) UpdateAllSlice(o IsolationSegmentAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentannotationquery-upsert"},"func (q isolationSegmentAnnotationQuery) Upsert(o *IsolationSegmentAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentannotationr"},"type isolationSegmentAnnotationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentannotationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"isolationSegmentAnnotationR) NewStruct() "),"isolationSegmentAnnotationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentl"},"type isolationSegmentL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentl-loadorganizations"},"func (isolationSegmentL) LoadOrganizations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIsolationSegment interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentl-loadresourceisolationsegmentannotations"},"func (isolationSegmentL) LoadResourceIsolationSegmentAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIsolationSegment interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentl-loadresourceisolationsegmentlabels"},"func (isolationSegmentL) LoadResourceIsolationSegmentLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIsolationSegment interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentl-loadspaces"},"func (isolationSegmentL) LoadSpaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIsolationSegment interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentlabell"},"type isolationSegmentLabelL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentlabell-loadresource"},"func (isolationSegmentLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIsolationSegmentLabel interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentlabelquery"},"type isolationSegmentLabelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentlabels"},"func IsolationSegmentLabels(mods ...qm.QueryMod) isolationSegmentLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentlabelquery-all"},"func (q isolationSegmentLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (IsolationSegmentLabelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentlabelquery-count"},"func (q isolationSegmentLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentlabelquery-delete"},"func (q isolationSegmentLabelQuery) Delete(o *IsolationSegmentLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentlabelquery-deleteall"},"func (q isolationSegmentLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentlabelquery-deleteallslice"},"func (q isolationSegmentLabelQuery) DeleteAllSlice(o IsolationSegmentLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentlabelquery-exists"},"func (q isolationSegmentLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentlabelquery-insert"},"func (q isolationSegmentLabelQuery) Insert(o *IsolationSegmentLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentlabelquery-one"},"func (q isolationSegmentLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*IsolationSegmentLabel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentlabelquery-reload"},"func (q isolationSegmentLabelQuery) Reload(o *IsolationSegmentLabel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentlabelquery-reloadall"},"func (q isolationSegmentLabelQuery) ReloadAll(o *IsolationSegmentLabelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentlabelquery-removeresource"},"func (q isolationSegmentLabelQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"IsolationSegmentLabel, ctx context.Context, exec boil.ContextExecutor, related "),"IsolationSegment) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentlabelquery-resource"},"func (q isolationSegmentLabelQuery) Resource(o *IsolationSegmentLabel, mods ...qm.QueryMod) isolationSegmentQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentlabelquery-setresource"},"func (q isolationSegmentLabelQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"IsolationSegmentLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"IsolationSegment) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentlabelquery-update"},"func (q isolationSegmentLabelQuery) Update(o *IsolationSegmentLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentlabelquery-updateall"},"func (q isolationSegmentLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentlabelquery-updateallslice"},"func (q isolationSegmentLabelQuery) UpdateAllSlice(o IsolationSegmentLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentlabelquery-upsert"},"func (q isolationSegmentLabelQuery) Upsert(o *IsolationSegmentLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentlabelr"},"type isolationSegmentLabelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentlabelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"isolationSegmentLabelR) NewStruct() "),"isolationSegmentLabelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentquery"},"type isolationSegmentQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegments"},"func IsolationSegments(mods ...qm.QueryMod) isolationSegmentQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-addorganizations"},"func (q isolationSegmentQuery) AddOrganizations(o ",(0,o.kt)("em",{parentName:"a"},"IsolationSegment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Organization) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-addresourceisolationsegmentannotations"},"func (q isolationSegmentQuery) AddResourceIsolationSegmentAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"IsolationSegment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"IsolationSegmentAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-addresourceisolationsegmentlabels"},"func (q isolationSegmentQuery) AddResourceIsolationSegmentLabels(o ",(0,o.kt)("em",{parentName:"a"},"IsolationSegment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"IsolationSegmentLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-addspaces"},"func (q isolationSegmentQuery) AddSpaces(o ",(0,o.kt)("em",{parentName:"a"},"IsolationSegment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-all"},"func (q isolationSegmentQuery) All(ctx context.Context, exec boil.ContextExecutor) (IsolationSegmentSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-count"},"func (q isolationSegmentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-delete"},"func (q isolationSegmentQuery) Delete(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-deleteall"},"func (q isolationSegmentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-deleteallslice"},"func (q isolationSegmentQuery) DeleteAllSlice(o IsolationSegmentSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-exists"},"func (q isolationSegmentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-insert"},"func (q isolationSegmentQuery) Insert(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-one"},"func (q isolationSegmentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*IsolationSegment, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-organizations"},"func (q isolationSegmentQuery) Organizations(o *IsolationSegment, mods ...qm.QueryMod) organizationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-reload"},"func (q isolationSegmentQuery) Reload(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-reloadall"},"func (q isolationSegmentQuery) ReloadAll(o *IsolationSegmentSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-removeorganizations"},"func (q isolationSegmentQuery) RemoveOrganizations(o ",(0,o.kt)("em",{parentName:"a"},"IsolationSegment, ctx context.Context, exec boil.ContextExecutor, related ..."),"Organization) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-removeresourceisolationsegmentannotations"},"func (q isolationSegmentQuery) RemoveResourceIsolationSegmentAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"IsolationSegment, ctx context.Context, exec boil.ContextExecutor, related ..."),"IsolationSegmentAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-removeresourceisolationsegmentlabels"},"func (q isolationSegmentQuery) RemoveResourceIsolationSegmentLabels(o ",(0,o.kt)("em",{parentName:"a"},"IsolationSegment, ctx context.Context, exec boil.ContextExecutor, related ..."),"IsolationSegmentLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-removespaces"},"func (q isolationSegmentQuery) RemoveSpaces(o ",(0,o.kt)("em",{parentName:"a"},"IsolationSegment, ctx context.Context, exec boil.ContextExecutor, related ..."),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-resourceisolationsegmentannotations"},"func (q isolationSegmentQuery) ResourceIsolationSegmentAnnotations(o *IsolationSegment, mods ...qm.QueryMod) isolationSegmentAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-resourceisolationsegmentlabels"},"func (q isolationSegmentQuery) ResourceIsolationSegmentLabels(o *IsolationSegment, mods ...qm.QueryMod) isolationSegmentLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-setorganizations"},"func (q isolationSegmentQuery) SetOrganizations(o ",(0,o.kt)("em",{parentName:"a"},"IsolationSegment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Organization) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-setresourceisolationsegmentannotations"},"func (q isolationSegmentQuery) SetResourceIsolationSegmentAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"IsolationSegment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"IsolationSegmentAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-setresourceisolationsegmentlabels"},"func (q isolationSegmentQuery) SetResourceIsolationSegmentLabels(o ",(0,o.kt)("em",{parentName:"a"},"IsolationSegment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"IsolationSegmentLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-setspaces"},"func (q isolationSegmentQuery) SetSpaces(o ",(0,o.kt)("em",{parentName:"a"},"IsolationSegment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-spaces"},"func (q isolationSegmentQuery) Spaces(o *IsolationSegment, mods ...qm.QueryMod) spaceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-update"},"func (q isolationSegmentQuery) Update(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-updateall"},"func (q isolationSegmentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-updateallslice"},"func (q isolationSegmentQuery) UpdateAllSlice(o IsolationSegmentSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentquery-upsert"},"func (q isolationSegmentQuery) Upsert(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-isolationsegmentr"},"type isolationSegmentR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-isolationsegmentr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"isolationSegmentR) NewStruct() "),"isolationSegmentR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-jobl"},"type jobL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobl-loadfkjobjobwarnings"},"func (jobL) LoadFKJobJobWarnings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJob interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-jobquery"},"type jobQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobs"},"func Jobs(mods ...qm.QueryMod) jobQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobquery-addfkjobjobwarnings"},"func (q jobQuery) AddFKJobJobWarnings(o ",(0,o.kt)("em",{parentName:"a"},"Job, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"JobWarning) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobquery-all"},"func (q jobQuery) All(ctx context.Context, exec boil.ContextExecutor) (JobSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobquery-count"},"func (q jobQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobquery-delete"},"func (q jobQuery) Delete(o *Job, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobquery-deleteall"},"func (q jobQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobquery-deleteallslice"},"func (q jobQuery) DeleteAllSlice(o JobSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobquery-exists"},"func (q jobQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobquery-fkjobjobwarnings"},"func (q jobQuery) FKJobJobWarnings(o *Job, mods ...qm.QueryMod) jobWarningQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobquery-insert"},"func (q jobQuery) Insert(o *Job, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobquery-one"},"func (q jobQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Job, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobquery-reload"},"func (q jobQuery) Reload(o *Job, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobquery-reloadall"},"func (q jobQuery) ReloadAll(o *JobSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobquery-removefkjobjobwarnings"},"func (q jobQuery) RemoveFKJobJobWarnings(o ",(0,o.kt)("em",{parentName:"a"},"Job, ctx context.Context, exec boil.ContextExecutor, related ..."),"JobWarning) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobquery-setfkjobjobwarnings"},"func (q jobQuery) SetFKJobJobWarnings(o ",(0,o.kt)("em",{parentName:"a"},"Job, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"JobWarning) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobquery-update"},"func (q jobQuery) Update(o *Job, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobquery-updateall"},"func (q jobQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobquery-updateallslice"},"func (q jobQuery) UpdateAllSlice(o JobSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobquery-upsert"},"func (q jobQuery) Upsert(o *Job, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-jobr"},"type jobR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"jobR) NewStruct() "),"jobR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-jobwarningl"},"type jobWarningL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobwarningl-loadfkjob"},"func (jobWarningL) LoadFKJob(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJobWarning interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-jobwarningquery"},"type jobWarningQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobwarnings"},"func JobWarnings(mods ...qm.QueryMod) jobWarningQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobwarningquery-all"},"func (q jobWarningQuery) All(ctx context.Context, exec boil.ContextExecutor) (JobWarningSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobwarningquery-count"},"func (q jobWarningQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobwarningquery-delete"},"func (q jobWarningQuery) Delete(o *JobWarning, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobwarningquery-deleteall"},"func (q jobWarningQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobwarningquery-deleteallslice"},"func (q jobWarningQuery) DeleteAllSlice(o JobWarningSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobwarningquery-exists"},"func (q jobWarningQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobwarningquery-fkjob"},"func (q jobWarningQuery) FKJob(o *JobWarning, mods ...qm.QueryMod) jobQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobwarningquery-insert"},"func (q jobWarningQuery) Insert(o *JobWarning, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobwarningquery-one"},"func (q jobWarningQuery) One(ctx context.Context, exec boil.ContextExecutor) (*JobWarning, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobwarningquery-reload"},"func (q jobWarningQuery) Reload(o *JobWarning, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobwarningquery-reloadall"},"func (q jobWarningQuery) ReloadAll(o *JobWarningSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobwarningquery-removefkjob"},"func (q jobWarningQuery) RemoveFKJob(o ",(0,o.kt)("em",{parentName:"a"},"JobWarning, ctx context.Context, exec boil.ContextExecutor, related "),"Job) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobwarningquery-setfkjob"},"func (q jobWarningQuery) SetFKJob(o ",(0,o.kt)("em",{parentName:"a"},"JobWarning, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Job) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobwarningquery-update"},"func (q jobWarningQuery) Update(o *JobWarning, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobwarningquery-updateall"},"func (q jobWarningQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobwarningquery-updateallslice"},"func (q jobWarningQuery) UpdateAllSlice(o JobWarningSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobwarningquery-upsert"},"func (q jobWarningQuery) Upsert(o *JobWarning, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-jobwarningr"},"type jobWarningR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-jobwarningr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"jobWarningR) NewStruct() "),"jobWarningR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-kpacklifecycledatuml"},"type kpackLifecycleDatumL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledatuml-loadapp"},"func (kpackLifecycleDatumL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeKpackLifecycleDatum interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledatuml-loadbuild"},"func (kpackLifecycleDatumL) LoadBuild(ctx context.Context, e boil.ContextExecutor, singular bool, maybeKpackLifecycleDatum interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-kpacklifecycledatumquery"},"type kpackLifecycleDatumQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledata"},"func KpackLifecycleData(mods ...qm.QueryMod) kpackLifecycleDatumQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledatumquery-all"},"func (q kpackLifecycleDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (KpackLifecycleDatumSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledatumquery-app"},"func (q kpackLifecycleDatumQuery) App(o *KpackLifecycleDatum, mods ...qm.QueryMod) appQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledatumquery-build"},"func (q kpackLifecycleDatumQuery) Build(o *KpackLifecycleDatum, mods ...qm.QueryMod) buildQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledatumquery-count"},"func (q kpackLifecycleDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledatumquery-delete"},"func (q kpackLifecycleDatumQuery) Delete(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledatumquery-deleteall"},"func (q kpackLifecycleDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledatumquery-deleteallslice"},"func (q kpackLifecycleDatumQuery) DeleteAllSlice(o KpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledatumquery-exists"},"func (q kpackLifecycleDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledatumquery-insert"},"func (q kpackLifecycleDatumQuery) Insert(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledatumquery-one"},"func (q kpackLifecycleDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*KpackLifecycleDatum, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledatumquery-reload"},"func (q kpackLifecycleDatumQuery) Reload(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledatumquery-reloadall"},"func (q kpackLifecycleDatumQuery) ReloadAll(o *KpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledatumquery-removeapp"},"func (q kpackLifecycleDatumQuery) RemoveApp(o ",(0,o.kt)("em",{parentName:"a"},"KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, related "),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledatumquery-removebuild"},"func (q kpackLifecycleDatumQuery) RemoveBuild(o ",(0,o.kt)("em",{parentName:"a"},"KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, related "),"Build) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledatumquery-setapp"},"func (q kpackLifecycleDatumQuery) SetApp(o ",(0,o.kt)("em",{parentName:"a"},"KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledatumquery-setbuild"},"func (q kpackLifecycleDatumQuery) SetBuild(o ",(0,o.kt)("em",{parentName:"a"},"KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Build) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledatumquery-update"},"func (q kpackLifecycleDatumQuery) Update(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledatumquery-updateall"},"func (q kpackLifecycleDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledatumquery-updateallslice"},"func (q kpackLifecycleDatumQuery) UpdateAllSlice(o KpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledatumquery-upsert"},"func (q kpackLifecycleDatumQuery) Upsert(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-kpacklifecycledatumr"},"type kpackLifecycleDatumR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-kpacklifecycledatumr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"kpackLifecycleDatumR) NewStruct() "),"kpackLifecycleDatumR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-lockingl"},"type lockingL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-lockingquery"},"type lockingQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-lockings"},"func Lockings(mods ...qm.QueryMod) lockingQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-lockingquery-all"},"func (q lockingQuery) All(ctx context.Context, exec boil.ContextExecutor) (LockingSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-lockingquery-count"},"func (q lockingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-lockingquery-delete"},"func (q lockingQuery) Delete(o *Locking, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-lockingquery-deleteall"},"func (q lockingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-lockingquery-deleteallslice"},"func (q lockingQuery) DeleteAllSlice(o LockingSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-lockingquery-exists"},"func (q lockingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-lockingquery-insert"},"func (q lockingQuery) Insert(o *Locking, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-lockingquery-one"},"func (q lockingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Locking, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-lockingquery-reload"},"func (q lockingQuery) Reload(o *Locking, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-lockingquery-reloadall"},"func (q lockingQuery) ReloadAll(o *LockingSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-lockingquery-update"},"func (q lockingQuery) Update(o *Locking, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-lockingquery-updateall"},"func (q lockingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-lockingquery-updateallslice"},"func (q lockingQuery) UpdateAllSlice(o LockingSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-lockingquery-upsert"},"func (q lockingQuery) Upsert(o *Locking, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-lockingr"},"type lockingR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-lockingr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"lockingR) NewStruct() "),"lockingR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationannotationl"},"type organizationAnnotationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationannotationl-loadresource"},"func (organizationAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationAnnotation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationannotationquery"},"type organizationAnnotationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationannotations"},"func OrganizationAnnotations(mods ...qm.QueryMod) organizationAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationannotationquery-all"},"func (q organizationAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationAnnotationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationannotationquery-count"},"func (q organizationAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationannotationquery-delete"},"func (q organizationAnnotationQuery) Delete(o *OrganizationAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationannotationquery-deleteall"},"func (q organizationAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationannotationquery-deleteallslice"},"func (q organizationAnnotationQuery) DeleteAllSlice(o OrganizationAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationannotationquery-exists"},"func (q organizationAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationannotationquery-insert"},"func (q organizationAnnotationQuery) Insert(o *OrganizationAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationannotationquery-one"},"func (q organizationAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationAnnotation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationannotationquery-reload"},"func (q organizationAnnotationQuery) Reload(o *OrganizationAnnotation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationannotationquery-reloadall"},"func (q organizationAnnotationQuery) ReloadAll(o *OrganizationAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationannotationquery-removeresource"},"func (q organizationAnnotationQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"OrganizationAnnotation, ctx context.Context, exec boil.ContextExecutor, related "),"Organization) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationannotationquery-resource"},"func (q organizationAnnotationQuery) Resource(o *OrganizationAnnotation, mods ...qm.QueryMod) organizationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationannotationquery-setresource"},"func (q organizationAnnotationQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"OrganizationAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Organization) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationannotationquery-update"},"func (q organizationAnnotationQuery) Update(o *OrganizationAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationannotationquery-updateall"},"func (q organizationAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationannotationquery-updateallslice"},"func (q organizationAnnotationQuery) UpdateAllSlice(o OrganizationAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationannotationquery-upsert"},"func (q organizationAnnotationQuery) Upsert(o *OrganizationAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationannotationr"},"type organizationAnnotationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationannotationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"organizationAnnotationR) NewStruct() "),"organizationAnnotationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationl"},"type organizationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationl-loadisolationsegments"},"func (organizationL) LoadIsolationSegments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationl-loadorganizationsauditors"},"func (organizationL) LoadOrganizationsAuditors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationl-loadorganizationsbillingmanagers"},"func (organizationL) LoadOrganizationsBillingManagers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationl-loadorganizationsmanagers"},"func (organizationL) LoadOrganizationsManagers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationl-loadorganizationsprivatedomains"},"func (organizationL) LoadOrganizationsPrivateDomains(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationl-loadorganizationsusers"},"func (organizationL) LoadOrganizationsUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationl-loadowningorganizationdomains"},"func (organizationL) LoadOwningOrganizationDomains(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationl-loadquotadefinition"},"func (organizationL) LoadQuotaDefinition(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationl-loadresourceorganizationannotations"},"func (organizationL) LoadResourceOrganizationAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationl-loadresourceorganizationlabels"},"func (organizationL) LoadResourceOrganizationLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationl-loadserviceplanvisibilities"},"func (organizationL) LoadServicePlanVisibilities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationl-loadspacequotadefinitions"},"func (organizationL) LoadSpaceQuotaDefinitions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationl-loadspaces"},"func (organizationL) LoadSpaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationlabell"},"type organizationLabelL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationlabell-loadresource"},"func (organizationLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationLabel interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationlabelquery"},"type organizationLabelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationlabels"},"func OrganizationLabels(mods ...qm.QueryMod) organizationLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationlabelquery-all"},"func (q organizationLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationLabelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationlabelquery-count"},"func (q organizationLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationlabelquery-delete"},"func (q organizationLabelQuery) Delete(o *OrganizationLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationlabelquery-deleteall"},"func (q organizationLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationlabelquery-deleteallslice"},"func (q organizationLabelQuery) DeleteAllSlice(o OrganizationLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationlabelquery-exists"},"func (q organizationLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationlabelquery-insert"},"func (q organizationLabelQuery) Insert(o *OrganizationLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationlabelquery-one"},"func (q organizationLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationLabel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationlabelquery-reload"},"func (q organizationLabelQuery) Reload(o *OrganizationLabel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationlabelquery-reloadall"},"func (q organizationLabelQuery) ReloadAll(o *OrganizationLabelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationlabelquery-removeresource"},"func (q organizationLabelQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"OrganizationLabel, ctx context.Context, exec boil.ContextExecutor, related "),"Organization) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationlabelquery-resource"},"func (q organizationLabelQuery) Resource(o *OrganizationLabel, mods ...qm.QueryMod) organizationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationlabelquery-setresource"},"func (q organizationLabelQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"OrganizationLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Organization) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationlabelquery-update"},"func (q organizationLabelQuery) Update(o *OrganizationLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationlabelquery-updateall"},"func (q organizationLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationlabelquery-updateallslice"},"func (q organizationLabelQuery) UpdateAllSlice(o OrganizationLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationlabelquery-upsert"},"func (q organizationLabelQuery) Upsert(o *OrganizationLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationlabelr"},"type organizationLabelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationlabelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"organizationLabelR) NewStruct() "),"organizationLabelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationquery"},"type organizationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizations"},"func Organizations(mods ...qm.QueryMod) organizationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-addisolationsegments"},"func (q organizationQuery) AddIsolationSegments(o ",(0,o.kt)("em",{parentName:"a"},"Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"IsolationSegment) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-addorganizationsauditors"},"func (q organizationQuery) AddOrganizationsAuditors(o ",(0,o.kt)("em",{parentName:"a"},"Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"OrganizationsAuditor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-addorganizationsbillingmanagers"},"func (q organizationQuery) AddOrganizationsBillingManagers(o ",(0,o.kt)("em",{parentName:"a"},"Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"OrganizationsBillingManager) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-addorganizationsmanagers"},"func (q organizationQuery) AddOrganizationsManagers(o ",(0,o.kt)("em",{parentName:"a"},"Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"OrganizationsManager) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-addorganizationsprivatedomains"},"func (q organizationQuery) AddOrganizationsPrivateDomains(o ",(0,o.kt)("em",{parentName:"a"},"Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"OrganizationsPrivateDomain) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-addorganizationsusers"},"func (q organizationQuery) AddOrganizationsUsers(o ",(0,o.kt)("em",{parentName:"a"},"Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"OrganizationsUser) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-addowningorganizationdomains"},"func (q organizationQuery) AddOwningOrganizationDomains(o ",(0,o.kt)("em",{parentName:"a"},"Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Domain) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-addresourceorganizationannotations"},"func (q organizationQuery) AddResourceOrganizationAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"OrganizationAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-addresourceorganizationlabels"},"func (q organizationQuery) AddResourceOrganizationLabels(o ",(0,o.kt)("em",{parentName:"a"},"Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"OrganizationLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-addserviceplanvisibilities"},"func (q organizationQuery) AddServicePlanVisibilities(o ",(0,o.kt)("em",{parentName:"a"},"Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServicePlanVisibility) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-addspacequotadefinitions"},"func (q organizationQuery) AddSpaceQuotaDefinitions(o ",(0,o.kt)("em",{parentName:"a"},"Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"SpaceQuotaDefinition) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-addspaces"},"func (q organizationQuery) AddSpaces(o ",(0,o.kt)("em",{parentName:"a"},"Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-all"},"func (q organizationQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-count"},"func (q organizationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-delete"},"func (q organizationQuery) Delete(o *Organization, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-deleteall"},"func (q organizationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-deleteallslice"},"func (q organizationQuery) DeleteAllSlice(o OrganizationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-exists"},"func (q organizationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-insert"},"func (q organizationQuery) Insert(o *Organization, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-isolationsegments"},"func (q organizationQuery) IsolationSegments(o *Organization, mods ...qm.QueryMod) isolationSegmentQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-one"},"func (q organizationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Organization, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-organizationsauditors"},"func (q organizationQuery) OrganizationsAuditors(o *Organization, mods ...qm.QueryMod) organizationsAuditorQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-organizationsbillingmanagers"},"func (q organizationQuery) OrganizationsBillingManagers(o *Organization, mods ...qm.QueryMod) organizationsBillingManagerQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-organizationsmanagers"},"func (q organizationQuery) OrganizationsManagers(o *Organization, mods ...qm.QueryMod) organizationsManagerQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-organizationsprivatedomains"},"func (q organizationQuery) OrganizationsPrivateDomains(o *Organization, mods ...qm.QueryMod) organizationsPrivateDomainQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-organizationsusers"},"func (q organizationQuery) OrganizationsUsers(o *Organization, mods ...qm.QueryMod) organizationsUserQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-owningorganizationdomains"},"func (q organizationQuery) OwningOrganizationDomains(o *Organization, mods ...qm.QueryMod) domainQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-quotadefinition"},"func (q organizationQuery) QuotaDefinition(o *Organization, mods ...qm.QueryMod) quotaDefinitionQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-reload"},"func (q organizationQuery) Reload(o *Organization, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-reloadall"},"func (q organizationQuery) ReloadAll(o *OrganizationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-removeisolationsegments"},"func (q organizationQuery) RemoveIsolationSegments(o ",(0,o.kt)("em",{parentName:"a"},"Organization, ctx context.Context, exec boil.ContextExecutor, related ..."),"IsolationSegment) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-removeowningorganizationdomains"},"func (q organizationQuery) RemoveOwningOrganizationDomains(o ",(0,o.kt)("em",{parentName:"a"},"Organization, ctx context.Context, exec boil.ContextExecutor, related ..."),"Domain) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-removeresourceorganizationannotations"},"func (q organizationQuery) RemoveResourceOrganizationAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Organization, ctx context.Context, exec boil.ContextExecutor, related ..."),"OrganizationAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-removeresourceorganizationlabels"},"func (q organizationQuery) RemoveResourceOrganizationLabels(o ",(0,o.kt)("em",{parentName:"a"},"Organization, ctx context.Context, exec boil.ContextExecutor, related ..."),"OrganizationLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-resourceorganizationannotations"},"func (q organizationQuery) ResourceOrganizationAnnotations(o *Organization, mods ...qm.QueryMod) organizationAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-resourceorganizationlabels"},"func (q organizationQuery) ResourceOrganizationLabels(o *Organization, mods ...qm.QueryMod) organizationLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-serviceplanvisibilities"},"func (q organizationQuery) ServicePlanVisibilities(o *Organization, mods ...qm.QueryMod) servicePlanVisibilityQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-setisolationsegments"},"func (q organizationQuery) SetIsolationSegments(o ",(0,o.kt)("em",{parentName:"a"},"Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"IsolationSegment) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-setowningorganizationdomains"},"func (q organizationQuery) SetOwningOrganizationDomains(o ",(0,o.kt)("em",{parentName:"a"},"Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Domain) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-setquotadefinition"},"func (q organizationQuery) SetQuotaDefinition(o ",(0,o.kt)("em",{parentName:"a"},"Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"QuotaDefinition) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-setresourceorganizationannotations"},"func (q organizationQuery) SetResourceOrganizationAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"OrganizationAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-setresourceorganizationlabels"},"func (q organizationQuery) SetResourceOrganizationLabels(o ",(0,o.kt)("em",{parentName:"a"},"Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"OrganizationLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-spacequotadefinitions"},"func (q organizationQuery) SpaceQuotaDefinitions(o *Organization, mods ...qm.QueryMod) spaceQuotaDefinitionQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-spaces"},"func (q organizationQuery) Spaces(o *Organization, mods ...qm.QueryMod) spaceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-update"},"func (q organizationQuery) Update(o *Organization, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-updateall"},"func (q organizationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-updateallslice"},"func (q organizationQuery) UpdateAllSlice(o OrganizationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationquery-upsert"},"func (q organizationQuery) Upsert(o *Organization, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationr"},"type organizationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"organizationR) NewStruct() "),"organizationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsauditorl"},"type organizationsAuditorL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsauditorl-loadorganization"},"func (organizationsAuditorL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationsAuditor interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsauditorl-loaduser"},"func (organizationsAuditorL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationsAuditor interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsauditorquery"},"type organizationsAuditorQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsauditors"},"func OrganizationsAuditors(mods ...qm.QueryMod) organizationsAuditorQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsauditorquery-all"},"func (q organizationsAuditorQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationsAuditorSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsauditorquery-count"},"func (q organizationsAuditorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsauditorquery-delete"},"func (q organizationsAuditorQuery) Delete(o *OrganizationsAuditor, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsauditorquery-deleteall"},"func (q organizationsAuditorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsauditorquery-deleteallslice"},"func (q organizationsAuditorQuery) DeleteAllSlice(o OrganizationsAuditorSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsauditorquery-exists"},"func (q organizationsAuditorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsauditorquery-insert"},"func (q organizationsAuditorQuery) Insert(o *OrganizationsAuditor, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsauditorquery-one"},"func (q organizationsAuditorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationsAuditor, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsauditorquery-organization"},"func (q organizationsAuditorQuery) Organization(o *OrganizationsAuditor, mods ...qm.QueryMod) organizationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsauditorquery-reload"},"func (q organizationsAuditorQuery) Reload(o *OrganizationsAuditor, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsauditorquery-reloadall"},"func (q organizationsAuditorQuery) ReloadAll(o *OrganizationsAuditorSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsauditorquery-setorganization"},"func (q organizationsAuditorQuery) SetOrganization(o ",(0,o.kt)("em",{parentName:"a"},"OrganizationsAuditor, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Organization) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsauditorquery-setuser"},"func (q organizationsAuditorQuery) SetUser(o ",(0,o.kt)("em",{parentName:"a"},"OrganizationsAuditor, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"User) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsauditorquery-update"},"func (q organizationsAuditorQuery) Update(o *OrganizationsAuditor, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsauditorquery-updateall"},"func (q organizationsAuditorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsauditorquery-updateallslice"},"func (q organizationsAuditorQuery) UpdateAllSlice(o OrganizationsAuditorSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsauditorquery-upsert"},"func (q organizationsAuditorQuery) Upsert(o *OrganizationsAuditor, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsauditorquery-user"},"func (q organizationsAuditorQuery) User(o *OrganizationsAuditor, mods ...qm.QueryMod) userQuery")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsauditorr"},"type organizationsAuditorR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsauditorr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"organizationsAuditorR) NewStruct() "),"organizationsAuditorR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsbillingmanagerl"},"type organizationsBillingManagerL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsbillingmanagerl-loadorganization"},"func (organizationsBillingManagerL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationsBillingManager interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsbillingmanagerl-loaduser"},"func (organizationsBillingManagerL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationsBillingManager interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsbillingmanagerquery"},"type organizationsBillingManagerQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsbillingmanagers"},"func OrganizationsBillingManagers(mods ...qm.QueryMod) organizationsBillingManagerQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsbillingmanagerquery-all"},"func (q organizationsBillingManagerQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationsBillingManagerSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsbillingmanagerquery-count"},"func (q organizationsBillingManagerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsbillingmanagerquery-delete"},"func (q organizationsBillingManagerQuery) Delete(o *OrganizationsBillingManager, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsbillingmanagerquery-deleteall"},"func (q organizationsBillingManagerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsbillingmanagerquery-deleteallslice"},"func (q organizationsBillingManagerQuery) DeleteAllSlice(o OrganizationsBillingManagerSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsbillingmanagerquery-exists"},"func (q organizationsBillingManagerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsbillingmanagerquery-insert"},"func (q organizationsBillingManagerQuery) Insert(o *OrganizationsBillingManager, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsbillingmanagerquery-one"},"func (q organizationsBillingManagerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationsBillingManager, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsbillingmanagerquery-organization"},"func (q organizationsBillingManagerQuery) Organization(o *OrganizationsBillingManager, mods ...qm.QueryMod) organizationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsbillingmanagerquery-reload"},"func (q organizationsBillingManagerQuery) Reload(o *OrganizationsBillingManager, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsbillingmanagerquery-reloadall"},"func (q organizationsBillingManagerQuery) ReloadAll(o *OrganizationsBillingManagerSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsbillingmanagerquery-setorganization"},"func (q organizationsBillingManagerQuery) SetOrganization(o ",(0,o.kt)("em",{parentName:"a"},"OrganizationsBillingManager, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Organization) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsbillingmanagerquery-setuser"},"func (q organizationsBillingManagerQuery) SetUser(o ",(0,o.kt)("em",{parentName:"a"},"OrganizationsBillingManager, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"User) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsbillingmanagerquery-update"},"func (q organizationsBillingManagerQuery) Update(o *OrganizationsBillingManager, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsbillingmanagerquery-updateall"},"func (q organizationsBillingManagerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsbillingmanagerquery-updateallslice"},"func (q organizationsBillingManagerQuery) UpdateAllSlice(o OrganizationsBillingManagerSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsbillingmanagerquery-upsert"},"func (q organizationsBillingManagerQuery) Upsert(o *OrganizationsBillingManager, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsbillingmanagerquery-user"},"func (q organizationsBillingManagerQuery) User(o *OrganizationsBillingManager, mods ...qm.QueryMod) userQuery")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsbillingmanagerr"},"type organizationsBillingManagerR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsbillingmanagerr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"organizationsBillingManagerR) NewStruct() "),"organizationsBillingManagerR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsmanagerl"},"type organizationsManagerL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsmanagerl-loadorganization"},"func (organizationsManagerL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationsManager interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsmanagerl-loaduser"},"func (organizationsManagerL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationsManager interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsmanagerquery"},"type organizationsManagerQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsmanagers"},"func OrganizationsManagers(mods ...qm.QueryMod) organizationsManagerQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsmanagerquery-all"},"func (q organizationsManagerQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationsManagerSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsmanagerquery-count"},"func (q organizationsManagerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsmanagerquery-delete"},"func (q organizationsManagerQuery) Delete(o *OrganizationsManager, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsmanagerquery-deleteall"},"func (q organizationsManagerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsmanagerquery-deleteallslice"},"func (q organizationsManagerQuery) DeleteAllSlice(o OrganizationsManagerSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsmanagerquery-exists"},"func (q organizationsManagerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsmanagerquery-insert"},"func (q organizationsManagerQuery) Insert(o *OrganizationsManager, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsmanagerquery-one"},"func (q organizationsManagerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationsManager, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsmanagerquery-organization"},"func (q organizationsManagerQuery) Organization(o *OrganizationsManager, mods ...qm.QueryMod) organizationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsmanagerquery-reload"},"func (q organizationsManagerQuery) Reload(o *OrganizationsManager, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsmanagerquery-reloadall"},"func (q organizationsManagerQuery) ReloadAll(o *OrganizationsManagerSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsmanagerquery-setorganization"},"func (q organizationsManagerQuery) SetOrganization(o ",(0,o.kt)("em",{parentName:"a"},"OrganizationsManager, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Organization) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsmanagerquery-setuser"},"func (q organizationsManagerQuery) SetUser(o ",(0,o.kt)("em",{parentName:"a"},"OrganizationsManager, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"User) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsmanagerquery-update"},"func (q organizationsManagerQuery) Update(o *OrganizationsManager, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsmanagerquery-updateall"},"func (q organizationsManagerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsmanagerquery-updateallslice"},"func (q organizationsManagerQuery) UpdateAllSlice(o OrganizationsManagerSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsmanagerquery-upsert"},"func (q organizationsManagerQuery) Upsert(o *OrganizationsManager, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsmanagerquery-user"},"func (q organizationsManagerQuery) User(o *OrganizationsManager, mods ...qm.QueryMod) userQuery")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsmanagerr"},"type organizationsManagerR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsmanagerr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"organizationsManagerR) NewStruct() "),"organizationsManagerR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsprivatedomainl"},"type organizationsPrivateDomainL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsprivatedomainl-loadorganization"},"func (organizationsPrivateDomainL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationsPrivateDomain interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsprivatedomainl-loadprivatedomain"},"func (organizationsPrivateDomainL) LoadPrivateDomain(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationsPrivateDomain interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsprivatedomainquery"},"type organizationsPrivateDomainQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsprivatedomains"},"func OrganizationsPrivateDomains(mods ...qm.QueryMod) organizationsPrivateDomainQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsprivatedomainquery-all"},"func (q organizationsPrivateDomainQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationsPrivateDomainSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsprivatedomainquery-count"},"func (q organizationsPrivateDomainQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsprivatedomainquery-delete"},"func (q organizationsPrivateDomainQuery) Delete(o *OrganizationsPrivateDomain, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsprivatedomainquery-deleteall"},"func (q organizationsPrivateDomainQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsprivatedomainquery-deleteallslice"},"func (q organizationsPrivateDomainQuery) DeleteAllSlice(o OrganizationsPrivateDomainSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsprivatedomainquery-exists"},"func (q organizationsPrivateDomainQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsprivatedomainquery-insert"},"func (q organizationsPrivateDomainQuery) Insert(o *OrganizationsPrivateDomain, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsprivatedomainquery-one"},"func (q organizationsPrivateDomainQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationsPrivateDomain, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsprivatedomainquery-organization"},"func (q organizationsPrivateDomainQuery) Organization(o *OrganizationsPrivateDomain, mods ...qm.QueryMod) organizationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsprivatedomainquery-privatedomain"},"func (q organizationsPrivateDomainQuery) PrivateDomain(o *OrganizationsPrivateDomain, mods ...qm.QueryMod) domainQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsprivatedomainquery-reload"},"func (q organizationsPrivateDomainQuery) Reload(o *OrganizationsPrivateDomain, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsprivatedomainquery-reloadall"},"func (q organizationsPrivateDomainQuery) ReloadAll(o *OrganizationsPrivateDomainSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsprivatedomainquery-setorganization"},"func (q organizationsPrivateDomainQuery) SetOrganization(o ",(0,o.kt)("em",{parentName:"a"},"OrganizationsPrivateDomain, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Organization) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsprivatedomainquery-setprivatedomain"},"func (q organizationsPrivateDomainQuery) SetPrivateDomain(o ",(0,o.kt)("em",{parentName:"a"},"OrganizationsPrivateDomain, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Domain) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsprivatedomainquery-update"},"func (q organizationsPrivateDomainQuery) Update(o *OrganizationsPrivateDomain, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsprivatedomainquery-updateall"},"func (q organizationsPrivateDomainQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsprivatedomainquery-updateallslice"},"func (q organizationsPrivateDomainQuery) UpdateAllSlice(o OrganizationsPrivateDomainSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsprivatedomainquery-upsert"},"func (q organizationsPrivateDomainQuery) Upsert(o *OrganizationsPrivateDomain, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsprivatedomainr"},"type organizationsPrivateDomainR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsprivatedomainr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"organizationsPrivateDomainR) NewStruct() "),"organizationsPrivateDomainR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsuserl"},"type organizationsUserL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsuserl-loadorganization"},"func (organizationsUserL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationsUser interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsuserl-loaduser"},"func (organizationsUserL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationsUser interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsuserquery"},"type organizationsUserQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsusers"},"func OrganizationsUsers(mods ...qm.QueryMod) organizationsUserQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsuserquery-all"},"func (q organizationsUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationsUserSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsuserquery-count"},"func (q organizationsUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsuserquery-delete"},"func (q organizationsUserQuery) Delete(o *OrganizationsUser, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsuserquery-deleteall"},"func (q organizationsUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsuserquery-deleteallslice"},"func (q organizationsUserQuery) DeleteAllSlice(o OrganizationsUserSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsuserquery-exists"},"func (q organizationsUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsuserquery-insert"},"func (q organizationsUserQuery) Insert(o *OrganizationsUser, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsuserquery-one"},"func (q organizationsUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationsUser, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsuserquery-organization"},"func (q organizationsUserQuery) Organization(o *OrganizationsUser, mods ...qm.QueryMod) organizationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsuserquery-reload"},"func (q organizationsUserQuery) Reload(o *OrganizationsUser, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsuserquery-reloadall"},"func (q organizationsUserQuery) ReloadAll(o *OrganizationsUserSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsuserquery-setorganization"},"func (q organizationsUserQuery) SetOrganization(o ",(0,o.kt)("em",{parentName:"a"},"OrganizationsUser, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Organization) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsuserquery-setuser"},"func (q organizationsUserQuery) SetUser(o ",(0,o.kt)("em",{parentName:"a"},"OrganizationsUser, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"User) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsuserquery-update"},"func (q organizationsUserQuery) Update(o *OrganizationsUser, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsuserquery-updateall"},"func (q organizationsUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsuserquery-updateallslice"},"func (q organizationsUserQuery) UpdateAllSlice(o OrganizationsUserSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsuserquery-upsert"},"func (q organizationsUserQuery) Upsert(o *OrganizationsUser, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsuserquery-user"},"func (q organizationsUserQuery) User(o *OrganizationsUser, mods ...qm.QueryMod) userQuery")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-organizationsuserr"},"type organizationsUserR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-organizationsuserr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"organizationsUserR) NewStruct() "),"organizationsUserR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-orphanedblobl"},"type orphanedBlobL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-orphanedblobquery"},"type orphanedBlobQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-orphanedblobs"},"func OrphanedBlobs(mods ...qm.QueryMod) orphanedBlobQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-orphanedblobquery-all"},"func (q orphanedBlobQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrphanedBlobSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-orphanedblobquery-count"},"func (q orphanedBlobQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-orphanedblobquery-delete"},"func (q orphanedBlobQuery) Delete(o *OrphanedBlob, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-orphanedblobquery-deleteall"},"func (q orphanedBlobQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-orphanedblobquery-deleteallslice"},"func (q orphanedBlobQuery) DeleteAllSlice(o OrphanedBlobSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-orphanedblobquery-exists"},"func (q orphanedBlobQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-orphanedblobquery-insert"},"func (q orphanedBlobQuery) Insert(o *OrphanedBlob, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-orphanedblobquery-one"},"func (q orphanedBlobQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrphanedBlob, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-orphanedblobquery-reload"},"func (q orphanedBlobQuery) Reload(o *OrphanedBlob, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-orphanedblobquery-reloadall"},"func (q orphanedBlobQuery) ReloadAll(o *OrphanedBlobSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-orphanedblobquery-update"},"func (q orphanedBlobQuery) Update(o *OrphanedBlob, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-orphanedblobquery-updateall"},"func (q orphanedBlobQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-orphanedblobquery-updateallslice"},"func (q orphanedBlobQuery) UpdateAllSlice(o OrphanedBlobSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-orphanedblobquery-upsert"},"func (q orphanedBlobQuery) Upsert(o *OrphanedBlob, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-orphanedblobr"},"type orphanedBlobR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-orphanedblobr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"orphanedBlobR) NewStruct() "),"orphanedBlobR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packageannotationl"},"type packageAnnotationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packageannotationl-loadresource"},"func (packageAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybePackageAnnotation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packageannotationquery"},"type packageAnnotationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packageannotations"},"func PackageAnnotations(mods ...qm.QueryMod) packageAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packageannotationquery-all"},"func (q packageAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (PackageAnnotationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packageannotationquery-count"},"func (q packageAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packageannotationquery-delete"},"func (q packageAnnotationQuery) Delete(o *PackageAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packageannotationquery-deleteall"},"func (q packageAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packageannotationquery-deleteallslice"},"func (q packageAnnotationQuery) DeleteAllSlice(o PackageAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packageannotationquery-exists"},"func (q packageAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packageannotationquery-insert"},"func (q packageAnnotationQuery) Insert(o *PackageAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packageannotationquery-one"},"func (q packageAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PackageAnnotation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packageannotationquery-reload"},"func (q packageAnnotationQuery) Reload(o *PackageAnnotation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packageannotationquery-reloadall"},"func (q packageAnnotationQuery) ReloadAll(o *PackageAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packageannotationquery-removeresource"},"func (q packageAnnotationQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"PackageAnnotation, ctx context.Context, exec boil.ContextExecutor, related "),"Package) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packageannotationquery-resource"},"func (q packageAnnotationQuery) Resource(o *PackageAnnotation, mods ...qm.QueryMod) packageQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packageannotationquery-setresource"},"func (q packageAnnotationQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"PackageAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Package) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packageannotationquery-update"},"func (q packageAnnotationQuery) Update(o *PackageAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packageannotationquery-updateall"},"func (q packageAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packageannotationquery-updateallslice"},"func (q packageAnnotationQuery) UpdateAllSlice(o PackageAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packageannotationquery-upsert"},"func (q packageAnnotationQuery) Upsert(o *PackageAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packageannotationr"},"type packageAnnotationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packageannotationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"packageAnnotationR) NewStruct() "),"packageAnnotationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packagel"},"type packageL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagel-loadapp"},"func (packageL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybePackage interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagel-loadresourcepackageannotations"},"func (packageL) LoadResourcePackageAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybePackage interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagel-loadresourcepackagelabels"},"func (packageL) LoadResourcePackageLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybePackage interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packagelabell"},"type packageLabelL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagelabell-loadresource"},"func (packageLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybePackageLabel interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packagelabelquery"},"type packageLabelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagelabels"},"func PackageLabels(mods ...qm.QueryMod) packageLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagelabelquery-all"},"func (q packageLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (PackageLabelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagelabelquery-count"},"func (q packageLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagelabelquery-delete"},"func (q packageLabelQuery) Delete(o *PackageLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagelabelquery-deleteall"},"func (q packageLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagelabelquery-deleteallslice"},"func (q packageLabelQuery) DeleteAllSlice(o PackageLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagelabelquery-exists"},"func (q packageLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagelabelquery-insert"},"func (q packageLabelQuery) Insert(o *PackageLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagelabelquery-one"},"func (q packageLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PackageLabel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagelabelquery-reload"},"func (q packageLabelQuery) Reload(o *PackageLabel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagelabelquery-reloadall"},"func (q packageLabelQuery) ReloadAll(o *PackageLabelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagelabelquery-removeresource"},"func (q packageLabelQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"PackageLabel, ctx context.Context, exec boil.ContextExecutor, related "),"Package) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagelabelquery-resource"},"func (q packageLabelQuery) Resource(o *PackageLabel, mods ...qm.QueryMod) packageQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagelabelquery-setresource"},"func (q packageLabelQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"PackageLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Package) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagelabelquery-update"},"func (q packageLabelQuery) Update(o *PackageLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagelabelquery-updateall"},"func (q packageLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagelabelquery-updateallslice"},"func (q packageLabelQuery) UpdateAllSlice(o PackageLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagelabelquery-upsert"},"func (q packageLabelQuery) Upsert(o *PackageLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packagelabelr"},"type packageLabelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagelabelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"packageLabelR) NewStruct() "),"packageLabelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packagequery"},"type packageQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packages"},"func Packages(mods ...qm.QueryMod) packageQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-addresourcepackageannotations"},"func (q packageQuery) AddResourcePackageAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Package, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"PackageAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-addresourcepackagelabels"},"func (q packageQuery) AddResourcePackageLabels(o ",(0,o.kt)("em",{parentName:"a"},"Package, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"PackageLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-all"},"func (q packageQuery) All(ctx context.Context, exec boil.ContextExecutor) (PackageSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-app"},"func (q packageQuery) App(o *Package, mods ...qm.QueryMod) appQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-count"},"func (q packageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-delete"},"func (q packageQuery) Delete(o *Package, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-deleteall"},"func (q packageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-deleteallslice"},"func (q packageQuery) DeleteAllSlice(o PackageSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-exists"},"func (q packageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-insert"},"func (q packageQuery) Insert(o *Package, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-one"},"func (q packageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Package, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-reload"},"func (q packageQuery) Reload(o *Package, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-reloadall"},"func (q packageQuery) ReloadAll(o *PackageSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-removeapp"},"func (q packageQuery) RemoveApp(o ",(0,o.kt)("em",{parentName:"a"},"Package, ctx context.Context, exec boil.ContextExecutor, related "),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-removeresourcepackageannotations"},"func (q packageQuery) RemoveResourcePackageAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Package, ctx context.Context, exec boil.ContextExecutor, related ..."),"PackageAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-removeresourcepackagelabels"},"func (q packageQuery) RemoveResourcePackageLabels(o ",(0,o.kt)("em",{parentName:"a"},"Package, ctx context.Context, exec boil.ContextExecutor, related ..."),"PackageLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-resourcepackageannotations"},"func (q packageQuery) ResourcePackageAnnotations(o *Package, mods ...qm.QueryMod) packageAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-resourcepackagelabels"},"func (q packageQuery) ResourcePackageLabels(o *Package, mods ...qm.QueryMod) packageLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-setapp"},"func (q packageQuery) SetApp(o ",(0,o.kt)("em",{parentName:"a"},"Package, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-setresourcepackageannotations"},"func (q packageQuery) SetResourcePackageAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Package, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"PackageAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-setresourcepackagelabels"},"func (q packageQuery) SetResourcePackageLabels(o ",(0,o.kt)("em",{parentName:"a"},"Package, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"PackageLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-update"},"func (q packageQuery) Update(o *Package, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-updateall"},"func (q packageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-updateallslice"},"func (q packageQuery) UpdateAllSlice(o PackageSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packagequery-upsert"},"func (q packageQuery) Upsert(o *Package, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-packager"},"type packageR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-packager-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"packageR) NewStruct() "),"packageR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processannotationl"},"type processAnnotationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processannotationl-loadresource"},"func (processAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProcessAnnotation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processannotationquery"},"type processAnnotationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processannotations"},"func ProcessAnnotations(mods ...qm.QueryMod) processAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processannotationquery-all"},"func (q processAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProcessAnnotationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processannotationquery-count"},"func (q processAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processannotationquery-delete"},"func (q processAnnotationQuery) Delete(o *ProcessAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processannotationquery-deleteall"},"func (q processAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processannotationquery-deleteallslice"},"func (q processAnnotationQuery) DeleteAllSlice(o ProcessAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processannotationquery-exists"},"func (q processAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processannotationquery-insert"},"func (q processAnnotationQuery) Insert(o *ProcessAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processannotationquery-one"},"func (q processAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProcessAnnotation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processannotationquery-reload"},"func (q processAnnotationQuery) Reload(o *ProcessAnnotation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processannotationquery-reloadall"},"func (q processAnnotationQuery) ReloadAll(o *ProcessAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processannotationquery-removeresource"},"func (q processAnnotationQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"ProcessAnnotation, ctx context.Context, exec boil.ContextExecutor, related "),"Process) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processannotationquery-resource"},"func (q processAnnotationQuery) Resource(o *ProcessAnnotation, mods ...qm.QueryMod) processQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processannotationquery-setresource"},"func (q processAnnotationQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"ProcessAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Process) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processannotationquery-update"},"func (q processAnnotationQuery) Update(o *ProcessAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processannotationquery-updateall"},"func (q processAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processannotationquery-updateallslice"},"func (q processAnnotationQuery) UpdateAllSlice(o ProcessAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processannotationquery-upsert"},"func (q processAnnotationQuery) Upsert(o *ProcessAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processannotationr"},"type processAnnotationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processannotationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"processAnnotationR) NewStruct() "),"processAnnotationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processl"},"type processL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processl-loadapp"},"func (processL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProcess interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processl-loadappappevents"},"func (processL) LoadAppAppEvents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProcess interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processl-loadresourceprocessannotations"},"func (processL) LoadResourceProcessAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProcess interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processl-loadresourceprocesslabels"},"func (processL) LoadResourceProcessLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProcess interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processlabell"},"type processLabelL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processlabell-loadresource"},"func (processLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProcessLabel interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processlabelquery"},"type processLabelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processlabels"},"func ProcessLabels(mods ...qm.QueryMod) processLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processlabelquery-all"},"func (q processLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProcessLabelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processlabelquery-count"},"func (q processLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processlabelquery-delete"},"func (q processLabelQuery) Delete(o *ProcessLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processlabelquery-deleteall"},"func (q processLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processlabelquery-deleteallslice"},"func (q processLabelQuery) DeleteAllSlice(o ProcessLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processlabelquery-exists"},"func (q processLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processlabelquery-insert"},"func (q processLabelQuery) Insert(o *ProcessLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processlabelquery-one"},"func (q processLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProcessLabel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processlabelquery-reload"},"func (q processLabelQuery) Reload(o *ProcessLabel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processlabelquery-reloadall"},"func (q processLabelQuery) ReloadAll(o *ProcessLabelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processlabelquery-removeresource"},"func (q processLabelQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"ProcessLabel, ctx context.Context, exec boil.ContextExecutor, related "),"Process) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processlabelquery-resource"},"func (q processLabelQuery) Resource(o *ProcessLabel, mods ...qm.QueryMod) processQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processlabelquery-setresource"},"func (q processLabelQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"ProcessLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Process) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processlabelquery-update"},"func (q processLabelQuery) Update(o *ProcessLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processlabelquery-updateall"},"func (q processLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processlabelquery-updateallslice"},"func (q processLabelQuery) UpdateAllSlice(o ProcessLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processlabelquery-upsert"},"func (q processLabelQuery) Upsert(o *ProcessLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processlabelr"},"type processLabelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processlabelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"processLabelR) NewStruct() "),"processLabelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processquery"},"type processQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processes"},"func Processes(mods ...qm.QueryMod) processQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-addappappevents"},"func (q processQuery) AddAppAppEvents(o ",(0,o.kt)("em",{parentName:"a"},"Process, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"AppEvent) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-addresourceprocessannotations"},"func (q processQuery) AddResourceProcessAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Process, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ProcessAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-addresourceprocesslabels"},"func (q processQuery) AddResourceProcessLabels(o ",(0,o.kt)("em",{parentName:"a"},"Process, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ProcessLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-all"},"func (q processQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProcessSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-app"},"func (q processQuery) App(o *Process, mods ...qm.QueryMod) appQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-appappevents"},"func (q processQuery) AppAppEvents(o *Process, mods ...qm.QueryMod) appEventQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-count"},"func (q processQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-delete"},"func (q processQuery) Delete(o *Process, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-deleteall"},"func (q processQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-deleteallslice"},"func (q processQuery) DeleteAllSlice(o ProcessSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-exists"},"func (q processQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-insert"},"func (q processQuery) Insert(o *Process, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-one"},"func (q processQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Process, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-reload"},"func (q processQuery) Reload(o *Process, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-reloadall"},"func (q processQuery) ReloadAll(o *ProcessSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-removeapp"},"func (q processQuery) RemoveApp(o ",(0,o.kt)("em",{parentName:"a"},"Process, ctx context.Context, exec boil.ContextExecutor, related "),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-removeresourceprocessannotations"},"func (q processQuery) RemoveResourceProcessAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Process, ctx context.Context, exec boil.ContextExecutor, related ..."),"ProcessAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-removeresourceprocesslabels"},"func (q processQuery) RemoveResourceProcessLabels(o ",(0,o.kt)("em",{parentName:"a"},"Process, ctx context.Context, exec boil.ContextExecutor, related ..."),"ProcessLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-resourceprocessannotations"},"func (q processQuery) ResourceProcessAnnotations(o *Process, mods ...qm.QueryMod) processAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-resourceprocesslabels"},"func (q processQuery) ResourceProcessLabels(o *Process, mods ...qm.QueryMod) processLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-setapp"},"func (q processQuery) SetApp(o ",(0,o.kt)("em",{parentName:"a"},"Process, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-setresourceprocessannotations"},"func (q processQuery) SetResourceProcessAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Process, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ProcessAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-setresourceprocesslabels"},"func (q processQuery) SetResourceProcessLabels(o ",(0,o.kt)("em",{parentName:"a"},"Process, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ProcessLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-update"},"func (q processQuery) Update(o *Process, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-updateall"},"func (q processQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-updateallslice"},"func (q processQuery) UpdateAllSlice(o ProcessSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processquery-upsert"},"func (q processQuery) Upsert(o *Process, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-processr"},"type processR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-processr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"processR) NewStruct() "),"processR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-quotadefinitionl"},"type quotaDefinitionL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-quotadefinitionl-loadorganizations"},"func (quotaDefinitionL) LoadOrganizations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeQuotaDefinition interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-quotadefinitionquery"},"type quotaDefinitionQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-quotadefinitions"},"func QuotaDefinitions(mods ...qm.QueryMod) quotaDefinitionQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-quotadefinitionquery-addorganizations"},"func (q quotaDefinitionQuery) AddOrganizations(o ",(0,o.kt)("em",{parentName:"a"},"QuotaDefinition, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Organization) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-quotadefinitionquery-all"},"func (q quotaDefinitionQuery) All(ctx context.Context, exec boil.ContextExecutor) (QuotaDefinitionSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-quotadefinitionquery-count"},"func (q quotaDefinitionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-quotadefinitionquery-delete"},"func (q quotaDefinitionQuery) Delete(o *QuotaDefinition, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-quotadefinitionquery-deleteall"},"func (q quotaDefinitionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-quotadefinitionquery-deleteallslice"},"func (q quotaDefinitionQuery) DeleteAllSlice(o QuotaDefinitionSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-quotadefinitionquery-exists"},"func (q quotaDefinitionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-quotadefinitionquery-insert"},"func (q quotaDefinitionQuery) Insert(o *QuotaDefinition, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-quotadefinitionquery-one"},"func (q quotaDefinitionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*QuotaDefinition, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-quotadefinitionquery-organizations"},"func (q quotaDefinitionQuery) Organizations(o *QuotaDefinition, mods ...qm.QueryMod) organizationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-quotadefinitionquery-reload"},"func (q quotaDefinitionQuery) Reload(o *QuotaDefinition, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-quotadefinitionquery-reloadall"},"func (q quotaDefinitionQuery) ReloadAll(o *QuotaDefinitionSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-quotadefinitionquery-update"},"func (q quotaDefinitionQuery) Update(o *QuotaDefinition, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-quotadefinitionquery-updateall"},"func (q quotaDefinitionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-quotadefinitionquery-updateallslice"},"func (q quotaDefinitionQuery) UpdateAllSlice(o QuotaDefinitionSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-quotadefinitionquery-upsert"},"func (q quotaDefinitionQuery) Upsert(o *QuotaDefinition, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-quotadefinitionr"},"type quotaDefinitionR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-quotadefinitionr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"quotaDefinitionR) NewStruct() "),"quotaDefinitionR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-requestcountl"},"type requestCountL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-requestcountquery"},"type requestCountQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-requestcounts"},"func RequestCounts(mods ...qm.QueryMod) requestCountQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-requestcountquery-all"},"func (q requestCountQuery) All(ctx context.Context, exec boil.ContextExecutor) (RequestCountSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-requestcountquery-count"},"func (q requestCountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-requestcountquery-delete"},"func (q requestCountQuery) Delete(o *RequestCount, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-requestcountquery-deleteall"},"func (q requestCountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-requestcountquery-deleteallslice"},"func (q requestCountQuery) DeleteAllSlice(o RequestCountSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-requestcountquery-exists"},"func (q requestCountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-requestcountquery-insert"},"func (q requestCountQuery) Insert(o *RequestCount, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-requestcountquery-one"},"func (q requestCountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RequestCount, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-requestcountquery-reload"},"func (q requestCountQuery) Reload(o *RequestCount, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-requestcountquery-reloadall"},"func (q requestCountQuery) ReloadAll(o *RequestCountSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-requestcountquery-update"},"func (q requestCountQuery) Update(o *RequestCount, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-requestcountquery-updateall"},"func (q requestCountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-requestcountquery-updateallslice"},"func (q requestCountQuery) UpdateAllSlice(o RequestCountSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-requestcountquery-upsert"},"func (q requestCountQuery) Upsert(o *RequestCount, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-requestcountr"},"type requestCountR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-requestcountr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"requestCountR) NewStruct() "),"requestCountR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionannotationl"},"type revisionAnnotationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionannotationl-loadresource"},"func (revisionAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevisionAnnotation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionannotationquery"},"type revisionAnnotationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionannotations"},"func RevisionAnnotations(mods ...qm.QueryMod) revisionAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionannotationquery-all"},"func (q revisionAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (RevisionAnnotationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionannotationquery-count"},"func (q revisionAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionannotationquery-delete"},"func (q revisionAnnotationQuery) Delete(o *RevisionAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionannotationquery-deleteall"},"func (q revisionAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionannotationquery-deleteallslice"},"func (q revisionAnnotationQuery) DeleteAllSlice(o RevisionAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionannotationquery-exists"},"func (q revisionAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionannotationquery-insert"},"func (q revisionAnnotationQuery) Insert(o *RevisionAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionannotationquery-one"},"func (q revisionAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RevisionAnnotation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionannotationquery-reload"},"func (q revisionAnnotationQuery) Reload(o *RevisionAnnotation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionannotationquery-reloadall"},"func (q revisionAnnotationQuery) ReloadAll(o *RevisionAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionannotationquery-removeresource"},"func (q revisionAnnotationQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"RevisionAnnotation, ctx context.Context, exec boil.ContextExecutor, related "),"Revision) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionannotationquery-resource"},"func (q revisionAnnotationQuery) Resource(o *RevisionAnnotation, mods ...qm.QueryMod) revisionQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionannotationquery-setresource"},"func (q revisionAnnotationQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"RevisionAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Revision) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionannotationquery-update"},"func (q revisionAnnotationQuery) Update(o *RevisionAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionannotationquery-updateall"},"func (q revisionAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionannotationquery-updateallslice"},"func (q revisionAnnotationQuery) UpdateAllSlice(o RevisionAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionannotationquery-upsert"},"func (q revisionAnnotationQuery) Upsert(o *RevisionAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionannotationr"},"type revisionAnnotationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionannotationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"revisionAnnotationR) NewStruct() "),"revisionAnnotationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionl"},"type revisionL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionl-loadapp"},"func (revisionL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevision interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionl-loadresourcerevisionannotations"},"func (revisionL) LoadResourceRevisionAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevision interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionl-loadresourcerevisionlabels"},"func (revisionL) LoadResourceRevisionLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevision interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionl-loadrevisionprocesscommands"},"func (revisionL) LoadRevisionProcessCommands(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevision interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionl-loadrevisionsidecars"},"func (revisionL) LoadRevisionSidecars(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevision interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionlabell"},"type revisionLabelL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionlabell-loadresource"},"func (revisionLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevisionLabel interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionlabelquery"},"type revisionLabelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionlabels"},"func RevisionLabels(mods ...qm.QueryMod) revisionLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionlabelquery-all"},"func (q revisionLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (RevisionLabelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionlabelquery-count"},"func (q revisionLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionlabelquery-delete"},"func (q revisionLabelQuery) Delete(o *RevisionLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionlabelquery-deleteall"},"func (q revisionLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionlabelquery-deleteallslice"},"func (q revisionLabelQuery) DeleteAllSlice(o RevisionLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionlabelquery-exists"},"func (q revisionLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionlabelquery-insert"},"func (q revisionLabelQuery) Insert(o *RevisionLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionlabelquery-one"},"func (q revisionLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RevisionLabel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionlabelquery-reload"},"func (q revisionLabelQuery) Reload(o *RevisionLabel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionlabelquery-reloadall"},"func (q revisionLabelQuery) ReloadAll(o *RevisionLabelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionlabelquery-removeresource"},"func (q revisionLabelQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"RevisionLabel, ctx context.Context, exec boil.ContextExecutor, related "),"Revision) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionlabelquery-resource"},"func (q revisionLabelQuery) Resource(o *RevisionLabel, mods ...qm.QueryMod) revisionQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionlabelquery-setresource"},"func (q revisionLabelQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"RevisionLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Revision) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionlabelquery-update"},"func (q revisionLabelQuery) Update(o *RevisionLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionlabelquery-updateall"},"func (q revisionLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionlabelquery-updateallslice"},"func (q revisionLabelQuery) UpdateAllSlice(o RevisionLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionlabelquery-upsert"},"func (q revisionLabelQuery) Upsert(o *RevisionLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionlabelr"},"type revisionLabelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionlabelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"revisionLabelR) NewStruct() "),"revisionLabelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionprocesscommandl"},"type revisionProcessCommandL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionprocesscommandl-loadrevision"},"func (revisionProcessCommandL) LoadRevision(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevisionProcessCommand interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionprocesscommandquery"},"type revisionProcessCommandQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionprocesscommands"},"func RevisionProcessCommands(mods ...qm.QueryMod) revisionProcessCommandQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionprocesscommandquery-all"},"func (q revisionProcessCommandQuery) All(ctx context.Context, exec boil.ContextExecutor) (RevisionProcessCommandSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionprocesscommandquery-count"},"func (q revisionProcessCommandQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionprocesscommandquery-delete"},"func (q revisionProcessCommandQuery) Delete(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionprocesscommandquery-deleteall"},"func (q revisionProcessCommandQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionprocesscommandquery-deleteallslice"},"func (q revisionProcessCommandQuery) DeleteAllSlice(o RevisionProcessCommandSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionprocesscommandquery-exists"},"func (q revisionProcessCommandQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionprocesscommandquery-insert"},"func (q revisionProcessCommandQuery) Insert(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionprocesscommandquery-one"},"func (q revisionProcessCommandQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RevisionProcessCommand, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionprocesscommandquery-reload"},"func (q revisionProcessCommandQuery) Reload(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionprocesscommandquery-reloadall"},"func (q revisionProcessCommandQuery) ReloadAll(o *RevisionProcessCommandSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionprocesscommandquery-revision"},"func (q revisionProcessCommandQuery) Revision(o *RevisionProcessCommand, mods ...qm.QueryMod) revisionQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionprocesscommandquery-setrevision"},"func (q revisionProcessCommandQuery) SetRevision(o ",(0,o.kt)("em",{parentName:"a"},"RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Revision) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionprocesscommandquery-update"},"func (q revisionProcessCommandQuery) Update(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionprocesscommandquery-updateall"},"func (q revisionProcessCommandQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionprocesscommandquery-updateallslice"},"func (q revisionProcessCommandQuery) UpdateAllSlice(o RevisionProcessCommandSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionprocesscommandquery-upsert"},"func (q revisionProcessCommandQuery) Upsert(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionprocesscommandr"},"type revisionProcessCommandR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionprocesscommandr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"revisionProcessCommandR) NewStruct() "),"revisionProcessCommandR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionquery"},"type revisionQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisions"},"func Revisions(mods ...qm.QueryMod) revisionQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-addresourcerevisionannotations"},"func (q revisionQuery) AddResourceRevisionAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Revision, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"RevisionAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-addresourcerevisionlabels"},"func (q revisionQuery) AddResourceRevisionLabels(o ",(0,o.kt)("em",{parentName:"a"},"Revision, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"RevisionLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-addrevisionprocesscommands"},"func (q revisionQuery) AddRevisionProcessCommands(o ",(0,o.kt)("em",{parentName:"a"},"Revision, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"RevisionProcessCommand) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-addrevisionsidecars"},"func (q revisionQuery) AddRevisionSidecars(o ",(0,o.kt)("em",{parentName:"a"},"Revision, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"RevisionSidecar) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-all"},"func (q revisionQuery) All(ctx context.Context, exec boil.ContextExecutor) (RevisionSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-app"},"func (q revisionQuery) App(o *Revision, mods ...qm.QueryMod) appQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-count"},"func (q revisionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-delete"},"func (q revisionQuery) Delete(o *Revision, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-deleteall"},"func (q revisionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-deleteallslice"},"func (q revisionQuery) DeleteAllSlice(o RevisionSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-exists"},"func (q revisionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-insert"},"func (q revisionQuery) Insert(o *Revision, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-one"},"func (q revisionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Revision, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-reload"},"func (q revisionQuery) Reload(o *Revision, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-reloadall"},"func (q revisionQuery) ReloadAll(o *RevisionSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-removeapp"},"func (q revisionQuery) RemoveApp(o ",(0,o.kt)("em",{parentName:"a"},"Revision, ctx context.Context, exec boil.ContextExecutor, related "),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-removeresourcerevisionannotations"},"func (q revisionQuery) RemoveResourceRevisionAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Revision, ctx context.Context, exec boil.ContextExecutor, related ..."),"RevisionAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-removeresourcerevisionlabels"},"func (q revisionQuery) RemoveResourceRevisionLabels(o ",(0,o.kt)("em",{parentName:"a"},"Revision, ctx context.Context, exec boil.ContextExecutor, related ..."),"RevisionLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-resourcerevisionannotations"},"func (q revisionQuery) ResourceRevisionAnnotations(o *Revision, mods ...qm.QueryMod) revisionAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-resourcerevisionlabels"},"func (q revisionQuery) ResourceRevisionLabels(o *Revision, mods ...qm.QueryMod) revisionLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-revisionprocesscommands"},"func (q revisionQuery) RevisionProcessCommands(o *Revision, mods ...qm.QueryMod) revisionProcessCommandQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-revisionsidecars"},"func (q revisionQuery) RevisionSidecars(o *Revision, mods ...qm.QueryMod) revisionSidecarQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-setapp"},"func (q revisionQuery) SetApp(o ",(0,o.kt)("em",{parentName:"a"},"Revision, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-setresourcerevisionannotations"},"func (q revisionQuery) SetResourceRevisionAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Revision, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"RevisionAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-setresourcerevisionlabels"},"func (q revisionQuery) SetResourceRevisionLabels(o ",(0,o.kt)("em",{parentName:"a"},"Revision, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"RevisionLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-update"},"func (q revisionQuery) Update(o *Revision, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-updateall"},"func (q revisionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-updateallslice"},"func (q revisionQuery) UpdateAllSlice(o RevisionSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionquery-upsert"},"func (q revisionQuery) Upsert(o *Revision, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionr"},"type revisionR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"revisionR) NewStruct() "),"revisionR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionsidecarl"},"type revisionSidecarL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarl-loadrevision"},"func (revisionSidecarL) LoadRevision(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevisionSidecar interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarl-loadrevisionsidecarprocesstypes"},"func (revisionSidecarL) LoadRevisionSidecarProcessTypes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevisionSidecar interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionsidecarprocesstypel"},"type revisionSidecarProcessTypeL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarprocesstypel-loadrevisionsidecar"},"func (revisionSidecarProcessTypeL) LoadRevisionSidecar(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevisionSidecarProcessType interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionsidecarprocesstypequery"},"type revisionSidecarProcessTypeQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarprocesstypes"},"func RevisionSidecarProcessTypes(mods ...qm.QueryMod) revisionSidecarProcessTypeQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarprocesstypequery-all"},"func (q revisionSidecarProcessTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (RevisionSidecarProcessTypeSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarprocesstypequery-count"},"func (q revisionSidecarProcessTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarprocesstypequery-delete"},"func (q revisionSidecarProcessTypeQuery) Delete(o *RevisionSidecarProcessType, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarprocesstypequery-deleteall"},"func (q revisionSidecarProcessTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarprocesstypequery-deleteallslice"},"func (q revisionSidecarProcessTypeQuery) DeleteAllSlice(o RevisionSidecarProcessTypeSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarprocesstypequery-exists"},"func (q revisionSidecarProcessTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarprocesstypequery-insert"},"func (q revisionSidecarProcessTypeQuery) Insert(o *RevisionSidecarProcessType, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarprocesstypequery-one"},"func (q revisionSidecarProcessTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RevisionSidecarProcessType, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarprocesstypequery-reload"},"func (q revisionSidecarProcessTypeQuery) Reload(o *RevisionSidecarProcessType, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarprocesstypequery-reloadall"},"func (q revisionSidecarProcessTypeQuery) ReloadAll(o *RevisionSidecarProcessTypeSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarprocesstypequery-revisionsidecar"},"func (q revisionSidecarProcessTypeQuery) RevisionSidecar(o *RevisionSidecarProcessType, mods ...qm.QueryMod) revisionSidecarQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarprocesstypequery-setrevisionsidecar"},"func (q revisionSidecarProcessTypeQuery) SetRevisionSidecar(o ",(0,o.kt)("em",{parentName:"a"},"RevisionSidecarProcessType, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"RevisionSidecar) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarprocesstypequery-update"},"func (q revisionSidecarProcessTypeQuery) Update(o *RevisionSidecarProcessType, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarprocesstypequery-updateall"},"func (q revisionSidecarProcessTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarprocesstypequery-updateallslice"},"func (q revisionSidecarProcessTypeQuery) UpdateAllSlice(o RevisionSidecarProcessTypeSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarprocesstypequery-upsert"},"func (q revisionSidecarProcessTypeQuery) Upsert(o *RevisionSidecarProcessType, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionsidecarprocesstyper"},"type revisionSidecarProcessTypeR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarprocesstyper-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"revisionSidecarProcessTypeR) NewStruct() "),"revisionSidecarProcessTypeR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionsidecarquery"},"type revisionSidecarQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecars"},"func RevisionSidecars(mods ...qm.QueryMod) revisionSidecarQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarquery-addrevisionsidecarprocesstypes"},"func (q revisionSidecarQuery) AddRevisionSidecarProcessTypes(o ",(0,o.kt)("em",{parentName:"a"},"RevisionSidecar, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"RevisionSidecarProcessType) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarquery-all"},"func (q revisionSidecarQuery) All(ctx context.Context, exec boil.ContextExecutor) (RevisionSidecarSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarquery-count"},"func (q revisionSidecarQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarquery-delete"},"func (q revisionSidecarQuery) Delete(o *RevisionSidecar, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarquery-deleteall"},"func (q revisionSidecarQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarquery-deleteallslice"},"func (q revisionSidecarQuery) DeleteAllSlice(o RevisionSidecarSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarquery-exists"},"func (q revisionSidecarQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarquery-insert"},"func (q revisionSidecarQuery) Insert(o *RevisionSidecar, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarquery-one"},"func (q revisionSidecarQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RevisionSidecar, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarquery-reload"},"func (q revisionSidecarQuery) Reload(o *RevisionSidecar, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarquery-reloadall"},"func (q revisionSidecarQuery) ReloadAll(o *RevisionSidecarSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarquery-revision"},"func (q revisionSidecarQuery) Revision(o *RevisionSidecar, mods ...qm.QueryMod) revisionQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarquery-revisionsidecarprocesstypes"},"func (q revisionSidecarQuery) RevisionSidecarProcessTypes(o *RevisionSidecar, mods ...qm.QueryMod) revisionSidecarProcessTypeQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarquery-setrevision"},"func (q revisionSidecarQuery) SetRevision(o ",(0,o.kt)("em",{parentName:"a"},"RevisionSidecar, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Revision) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarquery-update"},"func (q revisionSidecarQuery) Update(o *RevisionSidecar, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarquery-updateall"},"func (q revisionSidecarQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarquery-updateallslice"},"func (q revisionSidecarQuery) UpdateAllSlice(o RevisionSidecarSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarquery-upsert"},"func (q revisionSidecarQuery) Upsert(o *RevisionSidecar, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-revisionsidecarr"},"type revisionSidecarR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-revisionsidecarr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"revisionSidecarR) NewStruct() "),"revisionSidecarR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routeannotationl"},"type routeAnnotationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routeannotationl-loadresource"},"func (routeAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteAnnotation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routeannotationquery"},"type routeAnnotationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routeannotations"},"func RouteAnnotations(mods ...qm.QueryMod) routeAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routeannotationquery-all"},"func (q routeAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (RouteAnnotationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routeannotationquery-count"},"func (q routeAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routeannotationquery-delete"},"func (q routeAnnotationQuery) Delete(o *RouteAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routeannotationquery-deleteall"},"func (q routeAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routeannotationquery-deleteallslice"},"func (q routeAnnotationQuery) DeleteAllSlice(o RouteAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routeannotationquery-exists"},"func (q routeAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routeannotationquery-insert"},"func (q routeAnnotationQuery) Insert(o *RouteAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routeannotationquery-one"},"func (q routeAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RouteAnnotation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routeannotationquery-reload"},"func (q routeAnnotationQuery) Reload(o *RouteAnnotation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routeannotationquery-reloadall"},"func (q routeAnnotationQuery) ReloadAll(o *RouteAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routeannotationquery-removeresource"},"func (q routeAnnotationQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"RouteAnnotation, ctx context.Context, exec boil.ContextExecutor, related "),"Route) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routeannotationquery-resource"},"func (q routeAnnotationQuery) Resource(o *RouteAnnotation, mods ...qm.QueryMod) routeQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routeannotationquery-setresource"},"func (q routeAnnotationQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"RouteAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Route) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routeannotationquery-update"},"func (q routeAnnotationQuery) Update(o *RouteAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routeannotationquery-updateall"},"func (q routeAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routeannotationquery-updateallslice"},"func (q routeAnnotationQuery) UpdateAllSlice(o RouteAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routeannotationquery-upsert"},"func (q routeAnnotationQuery) Upsert(o *RouteAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routeannotationr"},"type routeAnnotationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routeannotationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"routeAnnotationR) NewStruct() "),"routeAnnotationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingannotationl"},"type routeBindingAnnotationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingannotationl-loadresource"},"func (routeBindingAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteBindingAnnotation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingannotationquery"},"type routeBindingAnnotationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingannotations"},"func RouteBindingAnnotations(mods ...qm.QueryMod) routeBindingAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingannotationquery-all"},"func (q routeBindingAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (RouteBindingAnnotationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingannotationquery-count"},"func (q routeBindingAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingannotationquery-delete"},"func (q routeBindingAnnotationQuery) Delete(o *RouteBindingAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingannotationquery-deleteall"},"func (q routeBindingAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingannotationquery-deleteallslice"},"func (q routeBindingAnnotationQuery) DeleteAllSlice(o RouteBindingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingannotationquery-exists"},"func (q routeBindingAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingannotationquery-insert"},"func (q routeBindingAnnotationQuery) Insert(o *RouteBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingannotationquery-one"},"func (q routeBindingAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RouteBindingAnnotation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingannotationquery-reload"},"func (q routeBindingAnnotationQuery) Reload(o *RouteBindingAnnotation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingannotationquery-reloadall"},"func (q routeBindingAnnotationQuery) ReloadAll(o *RouteBindingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingannotationquery-removeresource"},"func (q routeBindingAnnotationQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"RouteBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, related "),"RouteBinding) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingannotationquery-resource"},"func (q routeBindingAnnotationQuery) Resource(o *RouteBindingAnnotation, mods ...qm.QueryMod) routeBindingQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingannotationquery-setresource"},"func (q routeBindingAnnotationQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"RouteBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"RouteBinding) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingannotationquery-update"},"func (q routeBindingAnnotationQuery) Update(o *RouteBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingannotationquery-updateall"},"func (q routeBindingAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingannotationquery-updateallslice"},"func (q routeBindingAnnotationQuery) UpdateAllSlice(o RouteBindingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingannotationquery-upsert"},"func (q routeBindingAnnotationQuery) Upsert(o *RouteBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingannotationr"},"type routeBindingAnnotationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingannotationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"routeBindingAnnotationR) NewStruct() "),"routeBindingAnnotationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingl"},"type routeBindingL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingl-loadresourceroutebindingannotations"},"func (routeBindingL) LoadResourceRouteBindingAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteBinding interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingl-loadresourceroutebindinglabels"},"func (routeBindingL) LoadResourceRouteBindingLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteBinding interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingl-loadroute"},"func (routeBindingL) LoadRoute(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteBinding interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingl-loadroutebindingoperation"},"func (routeBindingL) LoadRouteBindingOperation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteBinding interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingl-loadserviceinstance"},"func (routeBindingL) LoadServiceInstance(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteBinding interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindinglabell"},"type routeBindingLabelL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindinglabell-loadresource"},"func (routeBindingLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteBindingLabel interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindinglabelquery"},"type routeBindingLabelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindinglabels"},"func RouteBindingLabels(mods ...qm.QueryMod) routeBindingLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindinglabelquery-all"},"func (q routeBindingLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (RouteBindingLabelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindinglabelquery-count"},"func (q routeBindingLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindinglabelquery-delete"},"func (q routeBindingLabelQuery) Delete(o *RouteBindingLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindinglabelquery-deleteall"},"func (q routeBindingLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindinglabelquery-deleteallslice"},"func (q routeBindingLabelQuery) DeleteAllSlice(o RouteBindingLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindinglabelquery-exists"},"func (q routeBindingLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindinglabelquery-insert"},"func (q routeBindingLabelQuery) Insert(o *RouteBindingLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindinglabelquery-one"},"func (q routeBindingLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RouteBindingLabel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindinglabelquery-reload"},"func (q routeBindingLabelQuery) Reload(o *RouteBindingLabel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindinglabelquery-reloadall"},"func (q routeBindingLabelQuery) ReloadAll(o *RouteBindingLabelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindinglabelquery-removeresource"},"func (q routeBindingLabelQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"RouteBindingLabel, ctx context.Context, exec boil.ContextExecutor, related "),"RouteBinding) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindinglabelquery-resource"},"func (q routeBindingLabelQuery) Resource(o *RouteBindingLabel, mods ...qm.QueryMod) routeBindingQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindinglabelquery-setresource"},"func (q routeBindingLabelQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"RouteBindingLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"RouteBinding) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindinglabelquery-update"},"func (q routeBindingLabelQuery) Update(o *RouteBindingLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindinglabelquery-updateall"},"func (q routeBindingLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindinglabelquery-updateallslice"},"func (q routeBindingLabelQuery) UpdateAllSlice(o RouteBindingLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindinglabelquery-upsert"},"func (q routeBindingLabelQuery) Upsert(o *RouteBindingLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindinglabelr"},"type routeBindingLabelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindinglabelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"routeBindingLabelR) NewStruct() "),"routeBindingLabelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingoperationl"},"type routeBindingOperationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingoperationl-loadroutebinding"},"func (routeBindingOperationL) LoadRouteBinding(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteBindingOperation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingoperationquery"},"type routeBindingOperationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingoperations"},"func RouteBindingOperations(mods ...qm.QueryMod) routeBindingOperationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingoperationquery-all"},"func (q routeBindingOperationQuery) All(ctx context.Context, exec boil.ContextExecutor) (RouteBindingOperationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingoperationquery-count"},"func (q routeBindingOperationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingoperationquery-delete"},"func (q routeBindingOperationQuery) Delete(o *RouteBindingOperation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingoperationquery-deleteall"},"func (q routeBindingOperationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingoperationquery-deleteallslice"},"func (q routeBindingOperationQuery) DeleteAllSlice(o RouteBindingOperationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingoperationquery-exists"},"func (q routeBindingOperationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingoperationquery-insert"},"func (q routeBindingOperationQuery) Insert(o *RouteBindingOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingoperationquery-one"},"func (q routeBindingOperationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RouteBindingOperation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingoperationquery-reload"},"func (q routeBindingOperationQuery) Reload(o *RouteBindingOperation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingoperationquery-reloadall"},"func (q routeBindingOperationQuery) ReloadAll(o *RouteBindingOperationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingoperationquery-removeroutebinding"},"func (q routeBindingOperationQuery) RemoveRouteBinding(o ",(0,o.kt)("em",{parentName:"a"},"RouteBindingOperation, ctx context.Context, exec boil.ContextExecutor, related "),"RouteBinding) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingoperationquery-routebinding"},"func (q routeBindingOperationQuery) RouteBinding(o *RouteBindingOperation, mods ...qm.QueryMod) routeBindingQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingoperationquery-setroutebinding"},"func (q routeBindingOperationQuery) SetRouteBinding(o ",(0,o.kt)("em",{parentName:"a"},"RouteBindingOperation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"RouteBinding) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingoperationquery-update"},"func (q routeBindingOperationQuery) Update(o *RouteBindingOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingoperationquery-updateall"},"func (q routeBindingOperationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingoperationquery-updateallslice"},"func (q routeBindingOperationQuery) UpdateAllSlice(o RouteBindingOperationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingoperationquery-upsert"},"func (q routeBindingOperationQuery) Upsert(o *RouteBindingOperation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingoperationr"},"type routeBindingOperationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingoperationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"routeBindingOperationR) NewStruct() "),"routeBindingOperationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingquery"},"type routeBindingQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindings"},"func RouteBindings(mods ...qm.QueryMod) routeBindingQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-addresourceroutebindingannotations"},"func (q routeBindingQuery) AddResourceRouteBindingAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"RouteBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"RouteBindingAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-addresourceroutebindinglabels"},"func (q routeBindingQuery) AddResourceRouteBindingLabels(o ",(0,o.kt)("em",{parentName:"a"},"RouteBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"RouteBindingLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-all"},"func (q routeBindingQuery) All(ctx context.Context, exec boil.ContextExecutor) (RouteBindingSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-count"},"func (q routeBindingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-delete"},"func (q routeBindingQuery) Delete(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-deleteall"},"func (q routeBindingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-deleteallslice"},"func (q routeBindingQuery) DeleteAllSlice(o RouteBindingSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-exists"},"func (q routeBindingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-insert"},"func (q routeBindingQuery) Insert(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-one"},"func (q routeBindingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RouteBinding, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-reload"},"func (q routeBindingQuery) Reload(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-reloadall"},"func (q routeBindingQuery) ReloadAll(o *RouteBindingSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-removeresourceroutebindingannotations"},"func (q routeBindingQuery) RemoveResourceRouteBindingAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"RouteBinding, ctx context.Context, exec boil.ContextExecutor, related ..."),"RouteBindingAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-removeresourceroutebindinglabels"},"func (q routeBindingQuery) RemoveResourceRouteBindingLabels(o ",(0,o.kt)("em",{parentName:"a"},"RouteBinding, ctx context.Context, exec boil.ContextExecutor, related ..."),"RouteBindingLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-removeroute"},"func (q routeBindingQuery) RemoveRoute(o ",(0,o.kt)("em",{parentName:"a"},"RouteBinding, ctx context.Context, exec boil.ContextExecutor, related "),"Route) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-removeroutebindingoperation"},"func (q routeBindingQuery) RemoveRouteBindingOperation(o ",(0,o.kt)("em",{parentName:"a"},"RouteBinding, ctx context.Context, exec boil.ContextExecutor, related "),"RouteBindingOperation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-removeserviceinstance"},"func (q routeBindingQuery) RemoveServiceInstance(o ",(0,o.kt)("em",{parentName:"a"},"RouteBinding, ctx context.Context, exec boil.ContextExecutor, related "),"ServiceInstance) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-resourceroutebindingannotations"},"func (q routeBindingQuery) ResourceRouteBindingAnnotations(o *RouteBinding, mods ...qm.QueryMod) routeBindingAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-resourceroutebindinglabels"},"func (q routeBindingQuery) ResourceRouteBindingLabels(o *RouteBinding, mods ...qm.QueryMod) routeBindingLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-route"},"func (q routeBindingQuery) Route(o *RouteBinding, mods ...qm.QueryMod) routeQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-routebindingoperation"},"func (q routeBindingQuery) RouteBindingOperation(o *RouteBinding, mods ...qm.QueryMod) routeBindingOperationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-serviceinstance"},"func (q routeBindingQuery) ServiceInstance(o *RouteBinding, mods ...qm.QueryMod) serviceInstanceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-setresourceroutebindingannotations"},"func (q routeBindingQuery) SetResourceRouteBindingAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"RouteBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"RouteBindingAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-setresourceroutebindinglabels"},"func (q routeBindingQuery) SetResourceRouteBindingLabels(o ",(0,o.kt)("em",{parentName:"a"},"RouteBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"RouteBindingLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-setroute"},"func (q routeBindingQuery) SetRoute(o ",(0,o.kt)("em",{parentName:"a"},"RouteBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Route) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-setroutebindingoperation"},"func (q routeBindingQuery) SetRouteBindingOperation(o ",(0,o.kt)("em",{parentName:"a"},"RouteBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"RouteBindingOperation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-setserviceinstance"},"func (q routeBindingQuery) SetServiceInstance(o ",(0,o.kt)("em",{parentName:"a"},"RouteBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"ServiceInstance) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-update"},"func (q routeBindingQuery) Update(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-updateall"},"func (q routeBindingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-updateallslice"},"func (q routeBindingQuery) UpdateAllSlice(o RouteBindingSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingquery-upsert"},"func (q routeBindingQuery) Upsert(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routebindingr"},"type routeBindingR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routebindingr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"routeBindingR) NewStruct() "),"routeBindingR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routel"},"type routeL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routel-loaddomain"},"func (routeL) LoadDomain(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoute interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routel-loadresourcerouteannotations"},"func (routeL) LoadResourceRouteAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoute interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routel-loadresourceroutelabels"},"func (routeL) LoadResourceRouteLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoute interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routel-loadroutebindings"},"func (routeL) LoadRouteBindings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoute interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routel-loadroutemappings"},"func (routeL) LoadRouteMappings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoute interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routel-loadspace"},"func (routeL) LoadSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoute interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routelabell"},"type routeLabelL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routelabell-loadresource"},"func (routeLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteLabel interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routelabelquery"},"type routeLabelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routelabels"},"func RouteLabels(mods ...qm.QueryMod) routeLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routelabelquery-all"},"func (q routeLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (RouteLabelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routelabelquery-count"},"func (q routeLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routelabelquery-delete"},"func (q routeLabelQuery) Delete(o *RouteLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routelabelquery-deleteall"},"func (q routeLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routelabelquery-deleteallslice"},"func (q routeLabelQuery) DeleteAllSlice(o RouteLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routelabelquery-exists"},"func (q routeLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routelabelquery-insert"},"func (q routeLabelQuery) Insert(o *RouteLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routelabelquery-one"},"func (q routeLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RouteLabel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routelabelquery-reload"},"func (q routeLabelQuery) Reload(o *RouteLabel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routelabelquery-reloadall"},"func (q routeLabelQuery) ReloadAll(o *RouteLabelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routelabelquery-removeresource"},"func (q routeLabelQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"RouteLabel, ctx context.Context, exec boil.ContextExecutor, related "),"Route) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routelabelquery-resource"},"func (q routeLabelQuery) Resource(o *RouteLabel, mods ...qm.QueryMod) routeQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routelabelquery-setresource"},"func (q routeLabelQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"RouteLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Route) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routelabelquery-update"},"func (q routeLabelQuery) Update(o *RouteLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routelabelquery-updateall"},"func (q routeLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routelabelquery-updateallslice"},"func (q routeLabelQuery) UpdateAllSlice(o RouteLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routelabelquery-upsert"},"func (q routeLabelQuery) Upsert(o *RouteLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routelabelr"},"type routeLabelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routelabelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"routeLabelR) NewStruct() "),"routeLabelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routemappingl"},"type routeMappingL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routemappingl-loadapp"},"func (routeMappingL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteMapping interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routemappingl-loadroute"},"func (routeMappingL) LoadRoute(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteMapping interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routemappingquery"},"type routeMappingQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routemappings"},"func RouteMappings(mods ...qm.QueryMod) routeMappingQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routemappingquery-all"},"func (q routeMappingQuery) All(ctx context.Context, exec boil.ContextExecutor) (RouteMappingSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routemappingquery-app"},"func (q routeMappingQuery) App(o *RouteMapping, mods ...qm.QueryMod) appQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routemappingquery-count"},"func (q routeMappingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routemappingquery-delete"},"func (q routeMappingQuery) Delete(o *RouteMapping, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routemappingquery-deleteall"},"func (q routeMappingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routemappingquery-deleteallslice"},"func (q routeMappingQuery) DeleteAllSlice(o RouteMappingSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routemappingquery-exists"},"func (q routeMappingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routemappingquery-insert"},"func (q routeMappingQuery) Insert(o *RouteMapping, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routemappingquery-one"},"func (q routeMappingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RouteMapping, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routemappingquery-reload"},"func (q routeMappingQuery) Reload(o *RouteMapping, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routemappingquery-reloadall"},"func (q routeMappingQuery) ReloadAll(o *RouteMappingSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routemappingquery-route"},"func (q routeMappingQuery) Route(o *RouteMapping, mods ...qm.QueryMod) routeQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routemappingquery-setapp"},"func (q routeMappingQuery) SetApp(o ",(0,o.kt)("em",{parentName:"a"},"RouteMapping, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routemappingquery-setroute"},"func (q routeMappingQuery) SetRoute(o ",(0,o.kt)("em",{parentName:"a"},"RouteMapping, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Route) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routemappingquery-update"},"func (q routeMappingQuery) Update(o *RouteMapping, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routemappingquery-updateall"},"func (q routeMappingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routemappingquery-updateallslice"},"func (q routeMappingQuery) UpdateAllSlice(o RouteMappingSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routemappingquery-upsert"},"func (q routeMappingQuery) Upsert(o *RouteMapping, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routemappingr"},"type routeMappingR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routemappingr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"routeMappingR) NewStruct() "),"routeMappingR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-routequery"},"type routeQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routes"},"func Routes(mods ...qm.QueryMod) routeQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-addresourcerouteannotations"},"func (q routeQuery) AddResourceRouteAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"RouteAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-addresourceroutelabels"},"func (q routeQuery) AddResourceRouteLabels(o ",(0,o.kt)("em",{parentName:"a"},"Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"RouteLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-addroutebindings"},"func (q routeQuery) AddRouteBindings(o ",(0,o.kt)("em",{parentName:"a"},"Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"RouteBinding) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-addroutemappings"},"func (q routeQuery) AddRouteMappings(o ",(0,o.kt)("em",{parentName:"a"},"Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"RouteMapping) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-all"},"func (q routeQuery) All(ctx context.Context, exec boil.ContextExecutor) (RouteSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-count"},"func (q routeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-delete"},"func (q routeQuery) Delete(o *Route, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-deleteall"},"func (q routeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-deleteallslice"},"func (q routeQuery) DeleteAllSlice(o RouteSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-domain"},"func (q routeQuery) Domain(o *Route, mods ...qm.QueryMod) domainQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-exists"},"func (q routeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-insert"},"func (q routeQuery) Insert(o *Route, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-one"},"func (q routeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Route, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-reload"},"func (q routeQuery) Reload(o *Route, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-reloadall"},"func (q routeQuery) ReloadAll(o *RouteSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-removeresourcerouteannotations"},"func (q routeQuery) RemoveResourceRouteAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Route, ctx context.Context, exec boil.ContextExecutor, related ..."),"RouteAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-removeresourceroutelabels"},"func (q routeQuery) RemoveResourceRouteLabels(o ",(0,o.kt)("em",{parentName:"a"},"Route, ctx context.Context, exec boil.ContextExecutor, related ..."),"RouteLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-removeroutebindings"},"func (q routeQuery) RemoveRouteBindings(o ",(0,o.kt)("em",{parentName:"a"},"Route, ctx context.Context, exec boil.ContextExecutor, related ..."),"RouteBinding) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-resourcerouteannotations"},"func (q routeQuery) ResourceRouteAnnotations(o *Route, mods ...qm.QueryMod) routeAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-resourceroutelabels"},"func (q routeQuery) ResourceRouteLabels(o *Route, mods ...qm.QueryMod) routeLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-routebindings"},"func (q routeQuery) RouteBindings(o *Route, mods ...qm.QueryMod) routeBindingQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-routemappings"},"func (q routeQuery) RouteMappings(o *Route, mods ...qm.QueryMod) routeMappingQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-setdomain"},"func (q routeQuery) SetDomain(o ",(0,o.kt)("em",{parentName:"a"},"Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Domain) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-setresourcerouteannotations"},"func (q routeQuery) SetResourceRouteAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"RouteAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-setresourceroutelabels"},"func (q routeQuery) SetResourceRouteLabels(o ",(0,o.kt)("em",{parentName:"a"},"Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"RouteLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-setroutebindings"},"func (q routeQuery) SetRouteBindings(o ",(0,o.kt)("em",{parentName:"a"},"Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"RouteBinding) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-setspace"},"func (q routeQuery) SetSpace(o ",(0,o.kt)("em",{parentName:"a"},"Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-space"},"func (q routeQuery) Space(o *Route, mods ...qm.QueryMod) spaceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-update"},"func (q routeQuery) Update(o *Route, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-updateall"},"func (q routeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-updateallslice"},"func (q routeQuery) UpdateAllSlice(o RouteSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-routequery-upsert"},"func (q routeQuery) Upsert(o *Route, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-router"},"type routeR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-router-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"routeR) NewStruct() "),"routeR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-schemamigrationl"},"type schemaMigrationL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-schemamigrationquery"},"type schemaMigrationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-schemamigrations"},"func SchemaMigrations(mods ...qm.QueryMod) schemaMigrationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-schemamigrationquery-all"},"func (q schemaMigrationQuery) All(ctx context.Context, exec boil.ContextExecutor) (SchemaMigrationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-schemamigrationquery-count"},"func (q schemaMigrationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-schemamigrationquery-delete"},"func (q schemaMigrationQuery) Delete(o *SchemaMigration, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-schemamigrationquery-deleteall"},"func (q schemaMigrationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-schemamigrationquery-deleteallslice"},"func (q schemaMigrationQuery) DeleteAllSlice(o SchemaMigrationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-schemamigrationquery-exists"},"func (q schemaMigrationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-schemamigrationquery-insert"},"func (q schemaMigrationQuery) Insert(o *SchemaMigration, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-schemamigrationquery-one"},"func (q schemaMigrationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SchemaMigration, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-schemamigrationquery-reload"},"func (q schemaMigrationQuery) Reload(o *SchemaMigration, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-schemamigrationquery-reloadall"},"func (q schemaMigrationQuery) ReloadAll(o *SchemaMigrationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-schemamigrationquery-update"},"func (q schemaMigrationQuery) Update(o *SchemaMigration, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-schemamigrationquery-updateall"},"func (q schemaMigrationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-schemamigrationquery-updateallslice"},"func (q schemaMigrationQuery) UpdateAllSlice(o SchemaMigrationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-schemamigrationquery-upsert"},"func (q schemaMigrationQuery) Upsert(o *SchemaMigration, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-schemamigrationr"},"type schemaMigrationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-schemamigrationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"schemaMigrationR) NewStruct() "),"schemaMigrationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-securitygroupl"},"type securityGroupL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupl-loadsecuritygroupsspaces"},"func (securityGroupL) LoadSecurityGroupsSpaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSecurityGroup interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupl-loadstagingsecuritygroupstagingsecuritygroupsspaces"},"func (securityGroupL) LoadStagingSecurityGroupStagingSecurityGroupsSpaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSecurityGroup interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-securitygroupquery"},"type securityGroupQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroups"},"func SecurityGroups(mods ...qm.QueryMod) securityGroupQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupquery-addsecuritygroupsspaces"},"func (q securityGroupQuery) AddSecurityGroupsSpaces(o ",(0,o.kt)("em",{parentName:"a"},"SecurityGroup, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"SecurityGroupsSpace) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupquery-addstagingsecuritygroupstagingsecuritygroupsspaces"},"func (q securityGroupQuery) AddStagingSecurityGroupStagingSecurityGroupsSpaces(o ",(0,o.kt)("em",{parentName:"a"},"SecurityGroup, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"StagingSecurityGroupsSpace) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupquery-all"},"func (q securityGroupQuery) All(ctx context.Context, exec boil.ContextExecutor) (SecurityGroupSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupquery-count"},"func (q securityGroupQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupquery-delete"},"func (q securityGroupQuery) Delete(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupquery-deleteall"},"func (q securityGroupQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupquery-deleteallslice"},"func (q securityGroupQuery) DeleteAllSlice(o SecurityGroupSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupquery-exists"},"func (q securityGroupQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupquery-insert"},"func (q securityGroupQuery) Insert(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupquery-one"},"func (q securityGroupQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SecurityGroup, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupquery-reload"},"func (q securityGroupQuery) Reload(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupquery-reloadall"},"func (q securityGroupQuery) ReloadAll(o *SecurityGroupSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupquery-securitygroupsspaces"},"func (q securityGroupQuery) SecurityGroupsSpaces(o *SecurityGroup, mods ...qm.QueryMod) securityGroupsSpaceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupquery-stagingsecuritygroupstagingsecuritygroupsspaces"},"func (q securityGroupQuery) StagingSecurityGroupStagingSecurityGroupsSpaces(o *SecurityGroup, mods ...qm.QueryMod) stagingSecurityGroupsSpaceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupquery-update"},"func (q securityGroupQuery) Update(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupquery-updateall"},"func (q securityGroupQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupquery-updateallslice"},"func (q securityGroupQuery) UpdateAllSlice(o SecurityGroupSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupquery-upsert"},"func (q securityGroupQuery) Upsert(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-securitygroupr"},"type securityGroupR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"securityGroupR) NewStruct() "),"securityGroupR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-securitygroupsspacel"},"type securityGroupsSpaceL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupsspacel-loadsecuritygroup"},"func (securityGroupsSpaceL) LoadSecurityGroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSecurityGroupsSpace interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupsspacel-loadspace"},"func (securityGroupsSpaceL) LoadSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSecurityGroupsSpace interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-securitygroupsspacequery"},"type securityGroupsSpaceQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupsspaces"},"func SecurityGroupsSpaces(mods ...qm.QueryMod) securityGroupsSpaceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupsspacequery-all"},"func (q securityGroupsSpaceQuery) All(ctx context.Context, exec boil.ContextExecutor) (SecurityGroupsSpaceSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupsspacequery-count"},"func (q securityGroupsSpaceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupsspacequery-delete"},"func (q securityGroupsSpaceQuery) Delete(o *SecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupsspacequery-deleteall"},"func (q securityGroupsSpaceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupsspacequery-deleteallslice"},"func (q securityGroupsSpaceQuery) DeleteAllSlice(o SecurityGroupsSpaceSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupsspacequery-exists"},"func (q securityGroupsSpaceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupsspacequery-insert"},"func (q securityGroupsSpaceQuery) Insert(o *SecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupsspacequery-one"},"func (q securityGroupsSpaceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SecurityGroupsSpace, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupsspacequery-reload"},"func (q securityGroupsSpaceQuery) Reload(o *SecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupsspacequery-reloadall"},"func (q securityGroupsSpaceQuery) ReloadAll(o *SecurityGroupsSpaceSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupsspacequery-securitygroup"},"func (q securityGroupsSpaceQuery) SecurityGroup(o *SecurityGroupsSpace, mods ...qm.QueryMod) securityGroupQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupsspacequery-setsecuritygroup"},"func (q securityGroupsSpaceQuery) SetSecurityGroup(o ",(0,o.kt)("em",{parentName:"a"},"SecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"SecurityGroup) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupsspacequery-setspace"},"func (q securityGroupsSpaceQuery) SetSpace(o ",(0,o.kt)("em",{parentName:"a"},"SecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupsspacequery-space"},"func (q securityGroupsSpaceQuery) Space(o *SecurityGroupsSpace, mods ...qm.QueryMod) spaceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupsspacequery-update"},"func (q securityGroupsSpaceQuery) Update(o *SecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupsspacequery-updateall"},"func (q securityGroupsSpaceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupsspacequery-updateallslice"},"func (q securityGroupsSpaceQuery) UpdateAllSlice(o SecurityGroupsSpaceSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupsspacequery-upsert"},"func (q securityGroupsSpaceQuery) Upsert(o *SecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-securitygroupsspacer"},"type securityGroupsSpaceR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-securitygroupsspacer-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"securityGroupsSpaceR) NewStruct() "),"securityGroupsSpaceR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingannotationl"},"type serviceBindingAnnotationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingannotationl-loadresource"},"func (serviceBindingAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBindingAnnotation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingannotationquery"},"type serviceBindingAnnotationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingannotations"},"func ServiceBindingAnnotations(mods ...qm.QueryMod) serviceBindingAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingannotationquery-all"},"func (q serviceBindingAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceBindingAnnotationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingannotationquery-count"},"func (q serviceBindingAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingannotationquery-delete"},"func (q serviceBindingAnnotationQuery) Delete(o *ServiceBindingAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingannotationquery-deleteall"},"func (q serviceBindingAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingannotationquery-deleteallslice"},"func (q serviceBindingAnnotationQuery) DeleteAllSlice(o ServiceBindingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingannotationquery-exists"},"func (q serviceBindingAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingannotationquery-insert"},"func (q serviceBindingAnnotationQuery) Insert(o *ServiceBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingannotationquery-one"},"func (q serviceBindingAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBindingAnnotation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingannotationquery-reload"},"func (q serviceBindingAnnotationQuery) Reload(o *ServiceBindingAnnotation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingannotationquery-reloadall"},"func (q serviceBindingAnnotationQuery) ReloadAll(o *ServiceBindingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingannotationquery-removeresource"},"func (q serviceBindingAnnotationQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, related "),"ServiceBinding) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingannotationquery-resource"},"func (q serviceBindingAnnotationQuery) Resource(o *ServiceBindingAnnotation, mods ...qm.QueryMod) serviceBindingQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingannotationquery-setresource"},"func (q serviceBindingAnnotationQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"ServiceBinding) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingannotationquery-update"},"func (q serviceBindingAnnotationQuery) Update(o *ServiceBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingannotationquery-updateall"},"func (q serviceBindingAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingannotationquery-updateallslice"},"func (q serviceBindingAnnotationQuery) UpdateAllSlice(o ServiceBindingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingannotationquery-upsert"},"func (q serviceBindingAnnotationQuery) Upsert(o *ServiceBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingannotationr"},"type serviceBindingAnnotationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingannotationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"serviceBindingAnnotationR) NewStruct() "),"serviceBindingAnnotationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingl"},"type serviceBindingL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingl-loadapp"},"func (serviceBindingL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBinding interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingl-loadresourceservicebindingannotations"},"func (serviceBindingL) LoadResourceServiceBindingAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBinding interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingl-loadresourceservicebindinglabels"},"func (serviceBindingL) LoadResourceServiceBindingLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBinding interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingl-loadservicebindingoperation"},"func (serviceBindingL) LoadServiceBindingOperation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBinding interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingl-loadserviceinstance"},"func (serviceBindingL) LoadServiceInstance(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBinding interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindinglabell"},"type serviceBindingLabelL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindinglabell-loadresource"},"func (serviceBindingLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBindingLabel interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindinglabelquery"},"type serviceBindingLabelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindinglabels"},"func ServiceBindingLabels(mods ...qm.QueryMod) serviceBindingLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindinglabelquery-all"},"func (q serviceBindingLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceBindingLabelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindinglabelquery-count"},"func (q serviceBindingLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindinglabelquery-delete"},"func (q serviceBindingLabelQuery) Delete(o *ServiceBindingLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindinglabelquery-deleteall"},"func (q serviceBindingLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindinglabelquery-deleteallslice"},"func (q serviceBindingLabelQuery) DeleteAllSlice(o ServiceBindingLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindinglabelquery-exists"},"func (q serviceBindingLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindinglabelquery-insert"},"func (q serviceBindingLabelQuery) Insert(o *ServiceBindingLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindinglabelquery-one"},"func (q serviceBindingLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBindingLabel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindinglabelquery-reload"},"func (q serviceBindingLabelQuery) Reload(o *ServiceBindingLabel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindinglabelquery-reloadall"},"func (q serviceBindingLabelQuery) ReloadAll(o *ServiceBindingLabelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindinglabelquery-removeresource"},"func (q serviceBindingLabelQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBindingLabel, ctx context.Context, exec boil.ContextExecutor, related "),"ServiceBinding) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindinglabelquery-resource"},"func (q serviceBindingLabelQuery) Resource(o *ServiceBindingLabel, mods ...qm.QueryMod) serviceBindingQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindinglabelquery-setresource"},"func (q serviceBindingLabelQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBindingLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"ServiceBinding) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindinglabelquery-update"},"func (q serviceBindingLabelQuery) Update(o *ServiceBindingLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindinglabelquery-updateall"},"func (q serviceBindingLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindinglabelquery-updateallslice"},"func (q serviceBindingLabelQuery) UpdateAllSlice(o ServiceBindingLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindinglabelquery-upsert"},"func (q serviceBindingLabelQuery) Upsert(o *ServiceBindingLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindinglabelr"},"type serviceBindingLabelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindinglabelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"serviceBindingLabelR) NewStruct() "),"serviceBindingLabelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingoperationl"},"type serviceBindingOperationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingoperationl-loadservicebinding"},"func (serviceBindingOperationL) LoadServiceBinding(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBindingOperation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingoperationquery"},"type serviceBindingOperationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingoperations"},"func ServiceBindingOperations(mods ...qm.QueryMod) serviceBindingOperationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingoperationquery-all"},"func (q serviceBindingOperationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceBindingOperationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingoperationquery-count"},"func (q serviceBindingOperationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingoperationquery-delete"},"func (q serviceBindingOperationQuery) Delete(o *ServiceBindingOperation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingoperationquery-deleteall"},"func (q serviceBindingOperationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingoperationquery-deleteallslice"},"func (q serviceBindingOperationQuery) DeleteAllSlice(o ServiceBindingOperationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingoperationquery-exists"},"func (q serviceBindingOperationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingoperationquery-insert"},"func (q serviceBindingOperationQuery) Insert(o *ServiceBindingOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingoperationquery-one"},"func (q serviceBindingOperationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBindingOperation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingoperationquery-reload"},"func (q serviceBindingOperationQuery) Reload(o *ServiceBindingOperation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingoperationquery-reloadall"},"func (q serviceBindingOperationQuery) ReloadAll(o *ServiceBindingOperationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingoperationquery-removeservicebinding"},"func (q serviceBindingOperationQuery) RemoveServiceBinding(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBindingOperation, ctx context.Context, exec boil.ContextExecutor, related "),"ServiceBinding) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingoperationquery-servicebinding"},"func (q serviceBindingOperationQuery) ServiceBinding(o *ServiceBindingOperation, mods ...qm.QueryMod) serviceBindingQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingoperationquery-setservicebinding"},"func (q serviceBindingOperationQuery) SetServiceBinding(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBindingOperation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"ServiceBinding) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingoperationquery-update"},"func (q serviceBindingOperationQuery) Update(o *ServiceBindingOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingoperationquery-updateall"},"func (q serviceBindingOperationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingoperationquery-updateallslice"},"func (q serviceBindingOperationQuery) UpdateAllSlice(o ServiceBindingOperationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingoperationquery-upsert"},"func (q serviceBindingOperationQuery) Upsert(o *ServiceBindingOperation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingoperationr"},"type serviceBindingOperationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingoperationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"serviceBindingOperationR) NewStruct() "),"serviceBindingOperationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingquery"},"type serviceBindingQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindings"},"func ServiceBindings(mods ...qm.QueryMod) serviceBindingQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-addresourceservicebindingannotations"},"func (q serviceBindingQuery) AddResourceServiceBindingAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceBindingAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-addresourceservicebindinglabels"},"func (q serviceBindingQuery) AddResourceServiceBindingLabels(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceBindingLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-all"},"func (q serviceBindingQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceBindingSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-app"},"func (q serviceBindingQuery) App(o *ServiceBinding, mods ...qm.QueryMod) appQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-count"},"func (q serviceBindingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-delete"},"func (q serviceBindingQuery) Delete(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-deleteall"},"func (q serviceBindingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-deleteallslice"},"func (q serviceBindingQuery) DeleteAllSlice(o ServiceBindingSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-exists"},"func (q serviceBindingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-insert"},"func (q serviceBindingQuery) Insert(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-one"},"func (q serviceBindingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBinding, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-reload"},"func (q serviceBindingQuery) Reload(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-reloadall"},"func (q serviceBindingQuery) ReloadAll(o *ServiceBindingSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-removeresourceservicebindingannotations"},"func (q serviceBindingQuery) RemoveResourceServiceBindingAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBinding, ctx context.Context, exec boil.ContextExecutor, related ..."),"ServiceBindingAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-removeresourceservicebindinglabels"},"func (q serviceBindingQuery) RemoveResourceServiceBindingLabels(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBinding, ctx context.Context, exec boil.ContextExecutor, related ..."),"ServiceBindingLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-removeservicebindingoperation"},"func (q serviceBindingQuery) RemoveServiceBindingOperation(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBinding, ctx context.Context, exec boil.ContextExecutor, related "),"ServiceBindingOperation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-resourceservicebindingannotations"},"func (q serviceBindingQuery) ResourceServiceBindingAnnotations(o *ServiceBinding, mods ...qm.QueryMod) serviceBindingAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-resourceservicebindinglabels"},"func (q serviceBindingQuery) ResourceServiceBindingLabels(o *ServiceBinding, mods ...qm.QueryMod) serviceBindingLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-servicebindingoperation"},"func (q serviceBindingQuery) ServiceBindingOperation(o *ServiceBinding, mods ...qm.QueryMod) serviceBindingOperationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-serviceinstance"},"func (q serviceBindingQuery) ServiceInstance(o *ServiceBinding, mods ...qm.QueryMod) serviceInstanceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-setapp"},"func (q serviceBindingQuery) SetApp(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-setresourceservicebindingannotations"},"func (q serviceBindingQuery) SetResourceServiceBindingAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceBindingAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-setresourceservicebindinglabels"},"func (q serviceBindingQuery) SetResourceServiceBindingLabels(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceBindingLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-setservicebindingoperation"},"func (q serviceBindingQuery) SetServiceBindingOperation(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"ServiceBindingOperation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-setserviceinstance"},"func (q serviceBindingQuery) SetServiceInstance(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"ServiceInstance) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-update"},"func (q serviceBindingQuery) Update(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-updateall"},"func (q serviceBindingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-updateallslice"},"func (q serviceBindingQuery) UpdateAllSlice(o ServiceBindingSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingquery-upsert"},"func (q serviceBindingQuery) Upsert(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebindingr"},"type serviceBindingR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebindingr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"serviceBindingR) NewStruct() "),"serviceBindingR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerannotationl"},"type serviceBrokerAnnotationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerannotationl-loadresource"},"func (serviceBrokerAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBrokerAnnotation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerannotationquery"},"type serviceBrokerAnnotationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerannotations"},"func ServiceBrokerAnnotations(mods ...qm.QueryMod) serviceBrokerAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerannotationquery-all"},"func (q serviceBrokerAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceBrokerAnnotationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerannotationquery-count"},"func (q serviceBrokerAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerannotationquery-delete"},"func (q serviceBrokerAnnotationQuery) Delete(o *ServiceBrokerAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerannotationquery-deleteall"},"func (q serviceBrokerAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerannotationquery-deleteallslice"},"func (q serviceBrokerAnnotationQuery) DeleteAllSlice(o ServiceBrokerAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerannotationquery-exists"},"func (q serviceBrokerAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerannotationquery-insert"},"func (q serviceBrokerAnnotationQuery) Insert(o *ServiceBrokerAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerannotationquery-one"},"func (q serviceBrokerAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBrokerAnnotation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerannotationquery-reload"},"func (q serviceBrokerAnnotationQuery) Reload(o *ServiceBrokerAnnotation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerannotationquery-reloadall"},"func (q serviceBrokerAnnotationQuery) ReloadAll(o *ServiceBrokerAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerannotationquery-removeresource"},"func (q serviceBrokerAnnotationQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBrokerAnnotation, ctx context.Context, exec boil.ContextExecutor, related "),"ServiceBroker) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerannotationquery-resource"},"func (q serviceBrokerAnnotationQuery) Resource(o *ServiceBrokerAnnotation, mods ...qm.QueryMod) serviceBrokerQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerannotationquery-setresource"},"func (q serviceBrokerAnnotationQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBrokerAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"ServiceBroker) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerannotationquery-update"},"func (q serviceBrokerAnnotationQuery) Update(o *ServiceBrokerAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerannotationquery-updateall"},"func (q serviceBrokerAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerannotationquery-updateallslice"},"func (q serviceBrokerAnnotationQuery) UpdateAllSlice(o ServiceBrokerAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerannotationquery-upsert"},"func (q serviceBrokerAnnotationQuery) Upsert(o *ServiceBrokerAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerannotationr"},"type serviceBrokerAnnotationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerannotationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"serviceBrokerAnnotationR) NewStruct() "),"serviceBrokerAnnotationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerl"},"type serviceBrokerL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerl-loadfkservicebrokerservicebrokerupdaterequests"},"func (serviceBrokerL) LoadFKServiceBrokerServiceBrokerUpdateRequests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBroker interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerl-loadresourceservicebrokerannotations"},"func (serviceBrokerL) LoadResourceServiceBrokerAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBroker interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerl-loadresourceservicebrokerlabels"},"func (serviceBrokerL) LoadResourceServiceBrokerLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBroker interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerl-loadservices"},"func (serviceBrokerL) LoadServices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBroker interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerl-loadspace"},"func (serviceBrokerL) LoadSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBroker interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerlabell"},"type serviceBrokerLabelL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerlabell-loadresource"},"func (serviceBrokerLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBrokerLabel interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerlabelquery"},"type serviceBrokerLabelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerlabels"},"func ServiceBrokerLabels(mods ...qm.QueryMod) serviceBrokerLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerlabelquery-all"},"func (q serviceBrokerLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceBrokerLabelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerlabelquery-count"},"func (q serviceBrokerLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerlabelquery-delete"},"func (q serviceBrokerLabelQuery) Delete(o *ServiceBrokerLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerlabelquery-deleteall"},"func (q serviceBrokerLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerlabelquery-deleteallslice"},"func (q serviceBrokerLabelQuery) DeleteAllSlice(o ServiceBrokerLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerlabelquery-exists"},"func (q serviceBrokerLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerlabelquery-insert"},"func (q serviceBrokerLabelQuery) Insert(o *ServiceBrokerLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerlabelquery-one"},"func (q serviceBrokerLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBrokerLabel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerlabelquery-reload"},"func (q serviceBrokerLabelQuery) Reload(o *ServiceBrokerLabel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerlabelquery-reloadall"},"func (q serviceBrokerLabelQuery) ReloadAll(o *ServiceBrokerLabelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerlabelquery-removeresource"},"func (q serviceBrokerLabelQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBrokerLabel, ctx context.Context, exec boil.ContextExecutor, related "),"ServiceBroker) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerlabelquery-resource"},"func (q serviceBrokerLabelQuery) Resource(o *ServiceBrokerLabel, mods ...qm.QueryMod) serviceBrokerQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerlabelquery-setresource"},"func (q serviceBrokerLabelQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBrokerLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"ServiceBroker) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerlabelquery-update"},"func (q serviceBrokerLabelQuery) Update(o *ServiceBrokerLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerlabelquery-updateall"},"func (q serviceBrokerLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerlabelquery-updateallslice"},"func (q serviceBrokerLabelQuery) UpdateAllSlice(o ServiceBrokerLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerlabelquery-upsert"},"func (q serviceBrokerLabelQuery) Upsert(o *ServiceBrokerLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerlabelr"},"type serviceBrokerLabelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerlabelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"serviceBrokerLabelR) NewStruct() "),"serviceBrokerLabelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerquery"},"type serviceBrokerQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokers"},"func ServiceBrokers(mods ...qm.QueryMod) serviceBrokerQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-addfkservicebrokerservicebrokerupdaterequests"},"func (q serviceBrokerQuery) AddFKServiceBrokerServiceBrokerUpdateRequests(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceBrokerUpdateRequest) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-addresourceservicebrokerannotations"},"func (q serviceBrokerQuery) AddResourceServiceBrokerAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceBrokerAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-addresourceservicebrokerlabels"},"func (q serviceBrokerQuery) AddResourceServiceBrokerLabels(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceBrokerLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-addservices"},"func (q serviceBrokerQuery) AddServices(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Service) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-all"},"func (q serviceBrokerQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceBrokerSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-count"},"func (q serviceBrokerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-delete"},"func (q serviceBrokerQuery) Delete(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-deleteall"},"func (q serviceBrokerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-deleteallslice"},"func (q serviceBrokerQuery) DeleteAllSlice(o ServiceBrokerSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-exists"},"func (q serviceBrokerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-fkservicebrokerservicebrokerupdaterequests"},"func (q serviceBrokerQuery) FKServiceBrokerServiceBrokerUpdateRequests(o *ServiceBroker, mods ...qm.QueryMod) serviceBrokerUpdateRequestQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-insert"},"func (q serviceBrokerQuery) Insert(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-one"},"func (q serviceBrokerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBroker, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-reload"},"func (q serviceBrokerQuery) Reload(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-reloadall"},"func (q serviceBrokerQuery) ReloadAll(o *ServiceBrokerSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-removefkservicebrokerservicebrokerupdaterequests"},"func (q serviceBrokerQuery) RemoveFKServiceBrokerServiceBrokerUpdateRequests(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBroker, ctx context.Context, exec boil.ContextExecutor, related ..."),"ServiceBrokerUpdateRequest) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-removeresourceservicebrokerannotations"},"func (q serviceBrokerQuery) RemoveResourceServiceBrokerAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBroker, ctx context.Context, exec boil.ContextExecutor, related ..."),"ServiceBrokerAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-removeresourceservicebrokerlabels"},"func (q serviceBrokerQuery) RemoveResourceServiceBrokerLabels(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBroker, ctx context.Context, exec boil.ContextExecutor, related ..."),"ServiceBrokerLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-removeservices"},"func (q serviceBrokerQuery) RemoveServices(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBroker, ctx context.Context, exec boil.ContextExecutor, related ..."),"Service) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-removespace"},"func (q serviceBrokerQuery) RemoveSpace(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBroker, ctx context.Context, exec boil.ContextExecutor, related "),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-resourceservicebrokerannotations"},"func (q serviceBrokerQuery) ResourceServiceBrokerAnnotations(o *ServiceBroker, mods ...qm.QueryMod) serviceBrokerAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-resourceservicebrokerlabels"},"func (q serviceBrokerQuery) ResourceServiceBrokerLabels(o *ServiceBroker, mods ...qm.QueryMod) serviceBrokerLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-services"},"func (q serviceBrokerQuery) Services(o *ServiceBroker, mods ...qm.QueryMod) serviceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-setfkservicebrokerservicebrokerupdaterequests"},"func (q serviceBrokerQuery) SetFKServiceBrokerServiceBrokerUpdateRequests(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceBrokerUpdateRequest) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-setresourceservicebrokerannotations"},"func (q serviceBrokerQuery) SetResourceServiceBrokerAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceBrokerAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-setresourceservicebrokerlabels"},"func (q serviceBrokerQuery) SetResourceServiceBrokerLabels(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceBrokerLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-setservices"},"func (q serviceBrokerQuery) SetServices(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Service) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-setspace"},"func (q serviceBrokerQuery) SetSpace(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-space"},"func (q serviceBrokerQuery) Space(o *ServiceBroker, mods ...qm.QueryMod) spaceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-update"},"func (q serviceBrokerQuery) Update(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-updateall"},"func (q serviceBrokerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-updateallslice"},"func (q serviceBrokerQuery) UpdateAllSlice(o ServiceBrokerSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerquery-upsert"},"func (q serviceBrokerQuery) Upsert(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerr"},"type serviceBrokerR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"serviceBrokerR) NewStruct() "),"serviceBrokerR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestannotationl"},"type serviceBrokerUpdateRequestAnnotationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestannotationl-loadresource"},"func (serviceBrokerUpdateRequestAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBrokerUpdateRequestAnnotation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestannotationquery"},"type serviceBrokerUpdateRequestAnnotationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestannotations"},"func ServiceBrokerUpdateRequestAnnotations(mods ...qm.QueryMod) serviceBrokerUpdateRequestAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestannotationquery-all"},"func (q serviceBrokerUpdateRequestAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceBrokerUpdateRequestAnnotationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestannotationquery-count"},"func (q serviceBrokerUpdateRequestAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestannotationquery-delete"},"func (q serviceBrokerUpdateRequestAnnotationQuery) Delete(o *ServiceBrokerUpdateRequestAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestannotationquery-deleteall"},"func (q serviceBrokerUpdateRequestAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestannotationquery-deleteallslice"},"func (q serviceBrokerUpdateRequestAnnotationQuery) DeleteAllSlice(o ServiceBrokerUpdateRequestAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestannotationquery-exists"},"func (q serviceBrokerUpdateRequestAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestannotationquery-insert"},"func (q serviceBrokerUpdateRequestAnnotationQuery) Insert(o *ServiceBrokerUpdateRequestAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestannotationquery-one"},"func (q serviceBrokerUpdateRequestAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBrokerUpdateRequestAnnotation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestannotationquery-reload"},"func (q serviceBrokerUpdateRequestAnnotationQuery) Reload(o *ServiceBrokerUpdateRequestAnnotation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestannotationquery-reloadall"},"func (q serviceBrokerUpdateRequestAnnotationQuery) ReloadAll(o *ServiceBrokerUpdateRequestAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestannotationquery-removeresource"},"func (q serviceBrokerUpdateRequestAnnotationQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBrokerUpdateRequestAnnotation, ctx context.Context, exec boil.ContextExecutor, related "),"ServiceBrokerUpdateRequest) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestannotationquery-resource"},"func (q serviceBrokerUpdateRequestAnnotationQuery) Resource(o *ServiceBrokerUpdateRequestAnnotation, mods ...qm.QueryMod) serviceBrokerUpdateRequestQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestannotationquery-setresource"},"func (q serviceBrokerUpdateRequestAnnotationQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBrokerUpdateRequestAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"ServiceBrokerUpdateRequest) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestannotationquery-update"},"func (q serviceBrokerUpdateRequestAnnotationQuery) Update(o *ServiceBrokerUpdateRequestAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestannotationquery-updateall"},"func (q serviceBrokerUpdateRequestAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestannotationquery-updateallslice"},"func (q serviceBrokerUpdateRequestAnnotationQuery) UpdateAllSlice(o ServiceBrokerUpdateRequestAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestannotationquery-upsert"},"func (q serviceBrokerUpdateRequestAnnotationQuery) Upsert(o *ServiceBrokerUpdateRequestAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestannotationr"},"type serviceBrokerUpdateRequestAnnotationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestannotationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"serviceBrokerUpdateRequestAnnotationR) NewStruct() "),"serviceBrokerUpdateRequestAnnotationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestl"},"type serviceBrokerUpdateRequestL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestl-loadfkservicebroker"},"func (serviceBrokerUpdateRequestL) LoadFKServiceBroker(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBrokerUpdateRequest interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestl-loadresourceservicebrokerupdaterequestannotations"},"func (serviceBrokerUpdateRequestL) LoadResourceServiceBrokerUpdateRequestAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBrokerUpdateRequest interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestl-loadresourceservicebrokerupdaterequestlabels"},"func (serviceBrokerUpdateRequestL) LoadResourceServiceBrokerUpdateRequestLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBrokerUpdateRequest interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestlabell"},"type serviceBrokerUpdateRequestLabelL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestlabell-loadresource"},"func (serviceBrokerUpdateRequestLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBrokerUpdateRequestLabel interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestlabelquery"},"type serviceBrokerUpdateRequestLabelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestlabels"},"func ServiceBrokerUpdateRequestLabels(mods ...qm.QueryMod) serviceBrokerUpdateRequestLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestlabelquery-all"},"func (q serviceBrokerUpdateRequestLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceBrokerUpdateRequestLabelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestlabelquery-count"},"func (q serviceBrokerUpdateRequestLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestlabelquery-delete"},"func (q serviceBrokerUpdateRequestLabelQuery) Delete(o *ServiceBrokerUpdateRequestLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestlabelquery-deleteall"},"func (q serviceBrokerUpdateRequestLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestlabelquery-deleteallslice"},"func (q serviceBrokerUpdateRequestLabelQuery) DeleteAllSlice(o ServiceBrokerUpdateRequestLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestlabelquery-exists"},"func (q serviceBrokerUpdateRequestLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestlabelquery-insert"},"func (q serviceBrokerUpdateRequestLabelQuery) Insert(o *ServiceBrokerUpdateRequestLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestlabelquery-one"},"func (q serviceBrokerUpdateRequestLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBrokerUpdateRequestLabel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestlabelquery-reload"},"func (q serviceBrokerUpdateRequestLabelQuery) Reload(o *ServiceBrokerUpdateRequestLabel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestlabelquery-reloadall"},"func (q serviceBrokerUpdateRequestLabelQuery) ReloadAll(o *ServiceBrokerUpdateRequestLabelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestlabelquery-removeresource"},"func (q serviceBrokerUpdateRequestLabelQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBrokerUpdateRequestLabel, ctx context.Context, exec boil.ContextExecutor, related "),"ServiceBrokerUpdateRequest) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestlabelquery-resource"},"func (q serviceBrokerUpdateRequestLabelQuery) Resource(o *ServiceBrokerUpdateRequestLabel, mods ...qm.QueryMod) serviceBrokerUpdateRequestQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestlabelquery-setresource"},"func (q serviceBrokerUpdateRequestLabelQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBrokerUpdateRequestLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"ServiceBrokerUpdateRequest) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestlabelquery-update"},"func (q serviceBrokerUpdateRequestLabelQuery) Update(o *ServiceBrokerUpdateRequestLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestlabelquery-updateall"},"func (q serviceBrokerUpdateRequestLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestlabelquery-updateallslice"},"func (q serviceBrokerUpdateRequestLabelQuery) UpdateAllSlice(o ServiceBrokerUpdateRequestLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestlabelquery-upsert"},"func (q serviceBrokerUpdateRequestLabelQuery) Upsert(o *ServiceBrokerUpdateRequestLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestlabelr"},"type serviceBrokerUpdateRequestLabelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestlabelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"serviceBrokerUpdateRequestLabelR) NewStruct() "),"serviceBrokerUpdateRequestLabelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestquery"},"type serviceBrokerUpdateRequestQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequests"},"func ServiceBrokerUpdateRequests(mods ...qm.QueryMod) serviceBrokerUpdateRequestQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-addresourceservicebrokerupdaterequestannotations"},"func (q serviceBrokerUpdateRequestQuery) AddResourceServiceBrokerUpdateRequestAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceBrokerUpdateRequestAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-addresourceservicebrokerupdaterequestlabels"},"func (q serviceBrokerUpdateRequestQuery) AddResourceServiceBrokerUpdateRequestLabels(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceBrokerUpdateRequestLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-all"},"func (q serviceBrokerUpdateRequestQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceBrokerUpdateRequestSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-count"},"func (q serviceBrokerUpdateRequestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-delete"},"func (q serviceBrokerUpdateRequestQuery) Delete(o *ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-deleteall"},"func (q serviceBrokerUpdateRequestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-deleteallslice"},"func (q serviceBrokerUpdateRequestQuery) DeleteAllSlice(o ServiceBrokerUpdateRequestSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-exists"},"func (q serviceBrokerUpdateRequestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-fkservicebroker"},"func (q serviceBrokerUpdateRequestQuery) FKServiceBroker(o *ServiceBrokerUpdateRequest, mods ...qm.QueryMod) serviceBrokerQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-insert"},"func (q serviceBrokerUpdateRequestQuery) Insert(o *ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-one"},"func (q serviceBrokerUpdateRequestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBrokerUpdateRequest, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-reload"},"func (q serviceBrokerUpdateRequestQuery) Reload(o *ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-reloadall"},"func (q serviceBrokerUpdateRequestQuery) ReloadAll(o *ServiceBrokerUpdateRequestSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-removefkservicebroker"},"func (q serviceBrokerUpdateRequestQuery) RemoveFKServiceBroker(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, related "),"ServiceBroker) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-removeresourceservicebrokerupdaterequestannotations"},"func (q serviceBrokerUpdateRequestQuery) RemoveResourceServiceBrokerUpdateRequestAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, related ..."),"ServiceBrokerUpdateRequestAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-removeresourceservicebrokerupdaterequestlabels"},"func (q serviceBrokerUpdateRequestQuery) RemoveResourceServiceBrokerUpdateRequestLabels(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, related ..."),"ServiceBrokerUpdateRequestLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-resourceservicebrokerupdaterequestannotations"},"func (q serviceBrokerUpdateRequestQuery) ResourceServiceBrokerUpdateRequestAnnotations(o *ServiceBrokerUpdateRequest, mods ...qm.QueryMod) serviceBrokerUpdateRequestAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-resourceservicebrokerupdaterequestlabels"},"func (q serviceBrokerUpdateRequestQuery) ResourceServiceBrokerUpdateRequestLabels(o *ServiceBrokerUpdateRequest, mods ...qm.QueryMod) serviceBrokerUpdateRequestLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-setfkservicebroker"},"func (q serviceBrokerUpdateRequestQuery) SetFKServiceBroker(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"ServiceBroker) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-setresourceservicebrokerupdaterequestannotations"},"func (q serviceBrokerUpdateRequestQuery) SetResourceServiceBrokerUpdateRequestAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceBrokerUpdateRequestAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-setresourceservicebrokerupdaterequestlabels"},"func (q serviceBrokerUpdateRequestQuery) SetResourceServiceBrokerUpdateRequestLabels(o ",(0,o.kt)("em",{parentName:"a"},"ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceBrokerUpdateRequestLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-update"},"func (q serviceBrokerUpdateRequestQuery) Update(o *ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-updateall"},"func (q serviceBrokerUpdateRequestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-updateallslice"},"func (q serviceBrokerUpdateRequestQuery) UpdateAllSlice(o ServiceBrokerUpdateRequestSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestquery-upsert"},"func (q serviceBrokerUpdateRequestQuery) Upsert(o *ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicebrokerupdaterequestr"},"type serviceBrokerUpdateRequestR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicebrokerupdaterequestr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"serviceBrokerUpdateRequestR) NewStruct() "),"serviceBrokerUpdateRequestR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicedashboardclientl"},"type serviceDashboardClientL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicedashboardclientquery"},"type serviceDashboardClientQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicedashboardclients"},"func ServiceDashboardClients(mods ...qm.QueryMod) serviceDashboardClientQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicedashboardclientquery-all"},"func (q serviceDashboardClientQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceDashboardClientSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicedashboardclientquery-count"},"func (q serviceDashboardClientQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicedashboardclientquery-delete"},"func (q serviceDashboardClientQuery) Delete(o *ServiceDashboardClient, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicedashboardclientquery-deleteall"},"func (q serviceDashboardClientQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicedashboardclientquery-deleteallslice"},"func (q serviceDashboardClientQuery) DeleteAllSlice(o ServiceDashboardClientSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicedashboardclientquery-exists"},"func (q serviceDashboardClientQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicedashboardclientquery-insert"},"func (q serviceDashboardClientQuery) Insert(o *ServiceDashboardClient, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicedashboardclientquery-one"},"func (q serviceDashboardClientQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceDashboardClient, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicedashboardclientquery-reload"},"func (q serviceDashboardClientQuery) Reload(o *ServiceDashboardClient, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicedashboardclientquery-reloadall"},"func (q serviceDashboardClientQuery) ReloadAll(o *ServiceDashboardClientSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicedashboardclientquery-update"},"func (q serviceDashboardClientQuery) Update(o *ServiceDashboardClient, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicedashboardclientquery-updateall"},"func (q serviceDashboardClientQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicedashboardclientquery-updateallslice"},"func (q serviceDashboardClientQuery) UpdateAllSlice(o ServiceDashboardClientSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicedashboardclientquery-upsert"},"func (q serviceDashboardClientQuery) Upsert(o *ServiceDashboardClient, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicedashboardclientr"},"type serviceDashboardClientR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicedashboardclientr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"serviceDashboardClientR) NewStruct() "),"serviceDashboardClientR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceannotationl"},"type serviceInstanceAnnotationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceannotationl-loadresource"},"func (serviceInstanceAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceInstanceAnnotation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceannotationquery"},"type serviceInstanceAnnotationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceannotations"},"func ServiceInstanceAnnotations(mods ...qm.QueryMod) serviceInstanceAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceannotationquery-all"},"func (q serviceInstanceAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceInstanceAnnotationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceannotationquery-count"},"func (q serviceInstanceAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceannotationquery-delete"},"func (q serviceInstanceAnnotationQuery) Delete(o *ServiceInstanceAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceannotationquery-deleteall"},"func (q serviceInstanceAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceannotationquery-deleteallslice"},"func (q serviceInstanceAnnotationQuery) DeleteAllSlice(o ServiceInstanceAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceannotationquery-exists"},"func (q serviceInstanceAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceannotationquery-insert"},"func (q serviceInstanceAnnotationQuery) Insert(o *ServiceInstanceAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceannotationquery-one"},"func (q serviceInstanceAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceInstanceAnnotation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceannotationquery-reload"},"func (q serviceInstanceAnnotationQuery) Reload(o *ServiceInstanceAnnotation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceannotationquery-reloadall"},"func (q serviceInstanceAnnotationQuery) ReloadAll(o *ServiceInstanceAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceannotationquery-removeresource"},"func (q serviceInstanceAnnotationQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstanceAnnotation, ctx context.Context, exec boil.ContextExecutor, related "),"ServiceInstance) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceannotationquery-resource"},"func (q serviceInstanceAnnotationQuery) Resource(o *ServiceInstanceAnnotation, mods ...qm.QueryMod) serviceInstanceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceannotationquery-setresource"},"func (q serviceInstanceAnnotationQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstanceAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"ServiceInstance) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceannotationquery-update"},"func (q serviceInstanceAnnotationQuery) Update(o *ServiceInstanceAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceannotationquery-updateall"},"func (q serviceInstanceAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceannotationquery-updateallslice"},"func (q serviceInstanceAnnotationQuery) UpdateAllSlice(o ServiceInstanceAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceannotationquery-upsert"},"func (q serviceInstanceAnnotationQuery) Upsert(o *ServiceInstanceAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceannotationr"},"type serviceInstanceAnnotationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceannotationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"serviceInstanceAnnotationR) NewStruct() "),"serviceInstanceAnnotationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstancel"},"type serviceInstanceL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancel-loadresourceserviceinstanceannotations"},"func (serviceInstanceL) LoadResourceServiceInstanceAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceInstance interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancel-loadresourceserviceinstancelabels"},"func (serviceInstanceL) LoadResourceServiceInstanceLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceInstance interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancel-loadroutebindings"},"func (serviceInstanceL) LoadRouteBindings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceInstance interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancel-loadservicebindings"},"func (serviceInstanceL) LoadServiceBindings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceInstance interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancel-loadserviceinstanceoperations"},"func (serviceInstanceL) LoadServiceInstanceOperations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceInstance interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancel-loadservicekeys"},"func (serviceInstanceL) LoadServiceKeys(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceInstance interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancel-loadserviceplan"},"func (serviceInstanceL) LoadServicePlan(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceInstance interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancel-loadspace"},"func (serviceInstanceL) LoadSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceInstance interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancel-loadspaces"},"func (serviceInstanceL) LoadSpaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceInstance interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstancelabell"},"type serviceInstanceLabelL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancelabell-loadresource"},"func (serviceInstanceLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceInstanceLabel interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstancelabelquery"},"type serviceInstanceLabelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancelabels"},"func ServiceInstanceLabels(mods ...qm.QueryMod) serviceInstanceLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancelabelquery-all"},"func (q serviceInstanceLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceInstanceLabelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancelabelquery-count"},"func (q serviceInstanceLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancelabelquery-delete"},"func (q serviceInstanceLabelQuery) Delete(o *ServiceInstanceLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancelabelquery-deleteall"},"func (q serviceInstanceLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancelabelquery-deleteallslice"},"func (q serviceInstanceLabelQuery) DeleteAllSlice(o ServiceInstanceLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancelabelquery-exists"},"func (q serviceInstanceLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancelabelquery-insert"},"func (q serviceInstanceLabelQuery) Insert(o *ServiceInstanceLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancelabelquery-one"},"func (q serviceInstanceLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceInstanceLabel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancelabelquery-reload"},"func (q serviceInstanceLabelQuery) Reload(o *ServiceInstanceLabel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancelabelquery-reloadall"},"func (q serviceInstanceLabelQuery) ReloadAll(o *ServiceInstanceLabelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancelabelquery-removeresource"},"func (q serviceInstanceLabelQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstanceLabel, ctx context.Context, exec boil.ContextExecutor, related "),"ServiceInstance) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancelabelquery-resource"},"func (q serviceInstanceLabelQuery) Resource(o *ServiceInstanceLabel, mods ...qm.QueryMod) serviceInstanceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancelabelquery-setresource"},"func (q serviceInstanceLabelQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstanceLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"ServiceInstance) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancelabelquery-update"},"func (q serviceInstanceLabelQuery) Update(o *ServiceInstanceLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancelabelquery-updateall"},"func (q serviceInstanceLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancelabelquery-updateallslice"},"func (q serviceInstanceLabelQuery) UpdateAllSlice(o ServiceInstanceLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancelabelquery-upsert"},"func (q serviceInstanceLabelQuery) Upsert(o *ServiceInstanceLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstancelabelr"},"type serviceInstanceLabelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancelabelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"serviceInstanceLabelR) NewStruct() "),"serviceInstanceLabelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceoperationl"},"type serviceInstanceOperationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceoperationl-loadserviceinstance"},"func (serviceInstanceOperationL) LoadServiceInstance(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceInstanceOperation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceoperationquery"},"type serviceInstanceOperationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceoperations"},"func ServiceInstanceOperations(mods ...qm.QueryMod) serviceInstanceOperationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceoperationquery-all"},"func (q serviceInstanceOperationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceInstanceOperationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceoperationquery-count"},"func (q serviceInstanceOperationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceoperationquery-delete"},"func (q serviceInstanceOperationQuery) Delete(o *ServiceInstanceOperation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceoperationquery-deleteall"},"func (q serviceInstanceOperationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceoperationquery-deleteallslice"},"func (q serviceInstanceOperationQuery) DeleteAllSlice(o ServiceInstanceOperationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceoperationquery-exists"},"func (q serviceInstanceOperationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceoperationquery-insert"},"func (q serviceInstanceOperationQuery) Insert(o *ServiceInstanceOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceoperationquery-one"},"func (q serviceInstanceOperationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceInstanceOperation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceoperationquery-reload"},"func (q serviceInstanceOperationQuery) Reload(o *ServiceInstanceOperation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceoperationquery-reloadall"},"func (q serviceInstanceOperationQuery) ReloadAll(o *ServiceInstanceOperationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceoperationquery-removeserviceinstance"},"func (q serviceInstanceOperationQuery) RemoveServiceInstance(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstanceOperation, ctx context.Context, exec boil.ContextExecutor, related "),"ServiceInstance) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceoperationquery-serviceinstance"},"func (q serviceInstanceOperationQuery) ServiceInstance(o *ServiceInstanceOperation, mods ...qm.QueryMod) serviceInstanceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceoperationquery-setserviceinstance"},"func (q serviceInstanceOperationQuery) SetServiceInstance(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstanceOperation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"ServiceInstance) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceoperationquery-update"},"func (q serviceInstanceOperationQuery) Update(o *ServiceInstanceOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceoperationquery-updateall"},"func (q serviceInstanceOperationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceoperationquery-updateallslice"},"func (q serviceInstanceOperationQuery) UpdateAllSlice(o ServiceInstanceOperationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceoperationquery-upsert"},"func (q serviceInstanceOperationQuery) Upsert(o *ServiceInstanceOperation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstanceoperationr"},"type serviceInstanceOperationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstanceoperationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"serviceInstanceOperationR) NewStruct() "),"serviceInstanceOperationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstancequery"},"type serviceInstanceQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstances"},"func ServiceInstances(mods ...qm.QueryMod) serviceInstanceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-addresourceserviceinstanceannotations"},"func (q serviceInstanceQuery) AddResourceServiceInstanceAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceInstanceAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-addresourceserviceinstancelabels"},"func (q serviceInstanceQuery) AddResourceServiceInstanceLabels(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceInstanceLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-addroutebindings"},"func (q serviceInstanceQuery) AddRouteBindings(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"RouteBinding) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-addservicebindings"},"func (q serviceInstanceQuery) AddServiceBindings(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceBinding) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-addserviceinstanceoperations"},"func (q serviceInstanceQuery) AddServiceInstanceOperations(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceInstanceOperation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-addservicekeys"},"func (q serviceInstanceQuery) AddServiceKeys(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceKey) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-addspaces"},"func (q serviceInstanceQuery) AddSpaces(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-all"},"func (q serviceInstanceQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceInstanceSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-count"},"func (q serviceInstanceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-delete"},"func (q serviceInstanceQuery) Delete(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-deleteall"},"func (q serviceInstanceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-deleteallslice"},"func (q serviceInstanceQuery) DeleteAllSlice(o ServiceInstanceSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-exists"},"func (q serviceInstanceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-insert"},"func (q serviceInstanceQuery) Insert(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-one"},"func (q serviceInstanceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceInstance, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-reload"},"func (q serviceInstanceQuery) Reload(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-reloadall"},"func (q serviceInstanceQuery) ReloadAll(o *ServiceInstanceSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-removeresourceserviceinstanceannotations"},"func (q serviceInstanceQuery) RemoveResourceServiceInstanceAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstance, ctx context.Context, exec boil.ContextExecutor, related ..."),"ServiceInstanceAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-removeresourceserviceinstancelabels"},"func (q serviceInstanceQuery) RemoveResourceServiceInstanceLabels(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstance, ctx context.Context, exec boil.ContextExecutor, related ..."),"ServiceInstanceLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-removeroutebindings"},"func (q serviceInstanceQuery) RemoveRouteBindings(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstance, ctx context.Context, exec boil.ContextExecutor, related ..."),"RouteBinding) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-removeserviceinstanceoperations"},"func (q serviceInstanceQuery) RemoveServiceInstanceOperations(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstance, ctx context.Context, exec boil.ContextExecutor, related ..."),"ServiceInstanceOperation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-removeserviceplan"},"func (q serviceInstanceQuery) RemoveServicePlan(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstance, ctx context.Context, exec boil.ContextExecutor, related "),"ServicePlan) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-removespaces"},"func (q serviceInstanceQuery) RemoveSpaces(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstance, ctx context.Context, exec boil.ContextExecutor, related ..."),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-resourceserviceinstanceannotations"},"func (q serviceInstanceQuery) ResourceServiceInstanceAnnotations(o *ServiceInstance, mods ...qm.QueryMod) serviceInstanceAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-resourceserviceinstancelabels"},"func (q serviceInstanceQuery) ResourceServiceInstanceLabels(o *ServiceInstance, mods ...qm.QueryMod) serviceInstanceLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-routebindings"},"func (q serviceInstanceQuery) RouteBindings(o *ServiceInstance, mods ...qm.QueryMod) routeBindingQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-servicebindings"},"func (q serviceInstanceQuery) ServiceBindings(o *ServiceInstance, mods ...qm.QueryMod) serviceBindingQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-serviceinstanceoperations"},"func (q serviceInstanceQuery) ServiceInstanceOperations(o *ServiceInstance, mods ...qm.QueryMod) serviceInstanceOperationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-servicekeys"},"func (q serviceInstanceQuery) ServiceKeys(o *ServiceInstance, mods ...qm.QueryMod) serviceKeyQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-serviceplan"},"func (q serviceInstanceQuery) ServicePlan(o *ServiceInstance, mods ...qm.QueryMod) servicePlanQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-setresourceserviceinstanceannotations"},"func (q serviceInstanceQuery) SetResourceServiceInstanceAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceInstanceAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-setresourceserviceinstancelabels"},"func (q serviceInstanceQuery) SetResourceServiceInstanceLabels(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceInstanceLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-setroutebindings"},"func (q serviceInstanceQuery) SetRouteBindings(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"RouteBinding) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-setserviceinstanceoperations"},"func (q serviceInstanceQuery) SetServiceInstanceOperations(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceInstanceOperation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-setserviceplan"},"func (q serviceInstanceQuery) SetServicePlan(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"ServicePlan) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-setspace"},"func (q serviceInstanceQuery) SetSpace(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-setspaces"},"func (q serviceInstanceQuery) SetSpaces(o ",(0,o.kt)("em",{parentName:"a"},"ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-space"},"func (q serviceInstanceQuery) Space(o *ServiceInstance, mods ...qm.QueryMod) spaceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-spaces"},"func (q serviceInstanceQuery) Spaces(o *ServiceInstance, mods ...qm.QueryMod) spaceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-update"},"func (q serviceInstanceQuery) Update(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-updateall"},"func (q serviceInstanceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-updateallslice"},"func (q serviceInstanceQuery) UpdateAllSlice(o ServiceInstanceSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancequery-upsert"},"func (q serviceInstanceQuery) Upsert(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceinstancer"},"type serviceInstanceR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceinstancer-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"serviceInstanceR) NewStruct() "),"serviceInstanceR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyannotationl"},"type serviceKeyAnnotationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyannotationl-loadresource"},"func (serviceKeyAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceKeyAnnotation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyannotationquery"},"type serviceKeyAnnotationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyannotations"},"func ServiceKeyAnnotations(mods ...qm.QueryMod) serviceKeyAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyannotationquery-all"},"func (q serviceKeyAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceKeyAnnotationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyannotationquery-count"},"func (q serviceKeyAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyannotationquery-delete"},"func (q serviceKeyAnnotationQuery) Delete(o *ServiceKeyAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyannotationquery-deleteall"},"func (q serviceKeyAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyannotationquery-deleteallslice"},"func (q serviceKeyAnnotationQuery) DeleteAllSlice(o ServiceKeyAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyannotationquery-exists"},"func (q serviceKeyAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyannotationquery-insert"},"func (q serviceKeyAnnotationQuery) Insert(o *ServiceKeyAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyannotationquery-one"},"func (q serviceKeyAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceKeyAnnotation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyannotationquery-reload"},"func (q serviceKeyAnnotationQuery) Reload(o *ServiceKeyAnnotation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyannotationquery-reloadall"},"func (q serviceKeyAnnotationQuery) ReloadAll(o *ServiceKeyAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyannotationquery-removeresource"},"func (q serviceKeyAnnotationQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"ServiceKeyAnnotation, ctx context.Context, exec boil.ContextExecutor, related "),"ServiceKey) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyannotationquery-resource"},"func (q serviceKeyAnnotationQuery) Resource(o *ServiceKeyAnnotation, mods ...qm.QueryMod) serviceKeyQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyannotationquery-setresource"},"func (q serviceKeyAnnotationQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"ServiceKeyAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"ServiceKey) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyannotationquery-update"},"func (q serviceKeyAnnotationQuery) Update(o *ServiceKeyAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyannotationquery-updateall"},"func (q serviceKeyAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyannotationquery-updateallslice"},"func (q serviceKeyAnnotationQuery) UpdateAllSlice(o ServiceKeyAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyannotationquery-upsert"},"func (q serviceKeyAnnotationQuery) Upsert(o *ServiceKeyAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyannotationr"},"type serviceKeyAnnotationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyannotationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"serviceKeyAnnotationR) NewStruct() "),"serviceKeyAnnotationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyl"},"type serviceKeyL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyl-loadresourceservicekeyannotations"},"func (serviceKeyL) LoadResourceServiceKeyAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceKey interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyl-loadresourceservicekeylabels"},"func (serviceKeyL) LoadResourceServiceKeyLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceKey interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyl-loadserviceinstance"},"func (serviceKeyL) LoadServiceInstance(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceKey interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyl-loadservicekeyoperation"},"func (serviceKeyL) LoadServiceKeyOperation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceKey interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeylabell"},"type serviceKeyLabelL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeylabell-loadresource"},"func (serviceKeyLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceKeyLabel interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeylabelquery"},"type serviceKeyLabelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeylabels"},"func ServiceKeyLabels(mods ...qm.QueryMod) serviceKeyLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeylabelquery-all"},"func (q serviceKeyLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceKeyLabelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeylabelquery-count"},"func (q serviceKeyLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeylabelquery-delete"},"func (q serviceKeyLabelQuery) Delete(o *ServiceKeyLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeylabelquery-deleteall"},"func (q serviceKeyLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeylabelquery-deleteallslice"},"func (q serviceKeyLabelQuery) DeleteAllSlice(o ServiceKeyLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeylabelquery-exists"},"func (q serviceKeyLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeylabelquery-insert"},"func (q serviceKeyLabelQuery) Insert(o *ServiceKeyLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeylabelquery-one"},"func (q serviceKeyLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceKeyLabel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeylabelquery-reload"},"func (q serviceKeyLabelQuery) Reload(o *ServiceKeyLabel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeylabelquery-reloadall"},"func (q serviceKeyLabelQuery) ReloadAll(o *ServiceKeyLabelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeylabelquery-removeresource"},"func (q serviceKeyLabelQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"ServiceKeyLabel, ctx context.Context, exec boil.ContextExecutor, related "),"ServiceKey) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeylabelquery-resource"},"func (q serviceKeyLabelQuery) Resource(o *ServiceKeyLabel, mods ...qm.QueryMod) serviceKeyQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeylabelquery-setresource"},"func (q serviceKeyLabelQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"ServiceKeyLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"ServiceKey) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeylabelquery-update"},"func (q serviceKeyLabelQuery) Update(o *ServiceKeyLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeylabelquery-updateall"},"func (q serviceKeyLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeylabelquery-updateallslice"},"func (q serviceKeyLabelQuery) UpdateAllSlice(o ServiceKeyLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeylabelquery-upsert"},"func (q serviceKeyLabelQuery) Upsert(o *ServiceKeyLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeylabelr"},"type serviceKeyLabelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeylabelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"serviceKeyLabelR) NewStruct() "),"serviceKeyLabelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyoperationl"},"type serviceKeyOperationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyoperationl-loadservicekey"},"func (serviceKeyOperationL) LoadServiceKey(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceKeyOperation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyoperationquery"},"type serviceKeyOperationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyoperations"},"func ServiceKeyOperations(mods ...qm.QueryMod) serviceKeyOperationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyoperationquery-all"},"func (q serviceKeyOperationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceKeyOperationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyoperationquery-count"},"func (q serviceKeyOperationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyoperationquery-delete"},"func (q serviceKeyOperationQuery) Delete(o *ServiceKeyOperation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyoperationquery-deleteall"},"func (q serviceKeyOperationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyoperationquery-deleteallslice"},"func (q serviceKeyOperationQuery) DeleteAllSlice(o ServiceKeyOperationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyoperationquery-exists"},"func (q serviceKeyOperationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyoperationquery-insert"},"func (q serviceKeyOperationQuery) Insert(o *ServiceKeyOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyoperationquery-one"},"func (q serviceKeyOperationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceKeyOperation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyoperationquery-reload"},"func (q serviceKeyOperationQuery) Reload(o *ServiceKeyOperation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyoperationquery-reloadall"},"func (q serviceKeyOperationQuery) ReloadAll(o *ServiceKeyOperationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyoperationquery-removeservicekey"},"func (q serviceKeyOperationQuery) RemoveServiceKey(o ",(0,o.kt)("em",{parentName:"a"},"ServiceKeyOperation, ctx context.Context, exec boil.ContextExecutor, related "),"ServiceKey) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyoperationquery-servicekey"},"func (q serviceKeyOperationQuery) ServiceKey(o *ServiceKeyOperation, mods ...qm.QueryMod) serviceKeyQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyoperationquery-setservicekey"},"func (q serviceKeyOperationQuery) SetServiceKey(o ",(0,o.kt)("em",{parentName:"a"},"ServiceKeyOperation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"ServiceKey) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyoperationquery-update"},"func (q serviceKeyOperationQuery) Update(o *ServiceKeyOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyoperationquery-updateall"},"func (q serviceKeyOperationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyoperationquery-updateallslice"},"func (q serviceKeyOperationQuery) UpdateAllSlice(o ServiceKeyOperationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyoperationquery-upsert"},"func (q serviceKeyOperationQuery) Upsert(o *ServiceKeyOperation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyoperationr"},"type serviceKeyOperationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyoperationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"serviceKeyOperationR) NewStruct() "),"serviceKeyOperationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyquery"},"type serviceKeyQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeys"},"func ServiceKeys(mods ...qm.QueryMod) serviceKeyQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-addresourceservicekeyannotations"},"func (q serviceKeyQuery) AddResourceServiceKeyAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"ServiceKey, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceKeyAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-addresourceservicekeylabels"},"func (q serviceKeyQuery) AddResourceServiceKeyLabels(o ",(0,o.kt)("em",{parentName:"a"},"ServiceKey, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceKeyLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-all"},"func (q serviceKeyQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceKeySlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-count"},"func (q serviceKeyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-delete"},"func (q serviceKeyQuery) Delete(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-deleteall"},"func (q serviceKeyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-deleteallslice"},"func (q serviceKeyQuery) DeleteAllSlice(o ServiceKeySlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-exists"},"func (q serviceKeyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-insert"},"func (q serviceKeyQuery) Insert(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-one"},"func (q serviceKeyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceKey, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-reload"},"func (q serviceKeyQuery) Reload(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-reloadall"},"func (q serviceKeyQuery) ReloadAll(o *ServiceKeySlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-removeresourceservicekeyannotations"},"func (q serviceKeyQuery) RemoveResourceServiceKeyAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"ServiceKey, ctx context.Context, exec boil.ContextExecutor, related ..."),"ServiceKeyAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-removeresourceservicekeylabels"},"func (q serviceKeyQuery) RemoveResourceServiceKeyLabels(o ",(0,o.kt)("em",{parentName:"a"},"ServiceKey, ctx context.Context, exec boil.ContextExecutor, related ..."),"ServiceKeyLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-removeservicekeyoperation"},"func (q serviceKeyQuery) RemoveServiceKeyOperation(o ",(0,o.kt)("em",{parentName:"a"},"ServiceKey, ctx context.Context, exec boil.ContextExecutor, related "),"ServiceKeyOperation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-resourceservicekeyannotations"},"func (q serviceKeyQuery) ResourceServiceKeyAnnotations(o *ServiceKey, mods ...qm.QueryMod) serviceKeyAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-resourceservicekeylabels"},"func (q serviceKeyQuery) ResourceServiceKeyLabels(o *ServiceKey, mods ...qm.QueryMod) serviceKeyLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-serviceinstance"},"func (q serviceKeyQuery) ServiceInstance(o *ServiceKey, mods ...qm.QueryMod) serviceInstanceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-servicekeyoperation"},"func (q serviceKeyQuery) ServiceKeyOperation(o *ServiceKey, mods ...qm.QueryMod) serviceKeyOperationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-setresourceservicekeyannotations"},"func (q serviceKeyQuery) SetResourceServiceKeyAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"ServiceKey, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceKeyAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-setresourceservicekeylabels"},"func (q serviceKeyQuery) SetResourceServiceKeyLabels(o ",(0,o.kt)("em",{parentName:"a"},"ServiceKey, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceKeyLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-setserviceinstance"},"func (q serviceKeyQuery) SetServiceInstance(o ",(0,o.kt)("em",{parentName:"a"},"ServiceKey, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"ServiceInstance) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-setservicekeyoperation"},"func (q serviceKeyQuery) SetServiceKeyOperation(o ",(0,o.kt)("em",{parentName:"a"},"ServiceKey, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"ServiceKeyOperation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-update"},"func (q serviceKeyQuery) Update(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-updateall"},"func (q serviceKeyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-updateallslice"},"func (q serviceKeyQuery) UpdateAllSlice(o ServiceKeySlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyquery-upsert"},"func (q serviceKeyQuery) Upsert(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicekeyr"},"type serviceKeyR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicekeyr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"serviceKeyR) NewStruct() "),"serviceKeyR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicel"},"type serviceL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicel-loadresourceserviceofferingannotations"},"func (serviceL) LoadResourceServiceOfferingAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeService interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicel-loadresourceserviceofferinglabels"},"func (serviceL) LoadResourceServiceOfferingLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeService interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicel-loadservicebroker"},"func (serviceL) LoadServiceBroker(ctx context.Context, e boil.ContextExecutor, singular bool, maybeService interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicel-loadserviceplans"},"func (serviceL) LoadServicePlans(ctx context.Context, e boil.ContextExecutor, singular bool, maybeService interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceofferingannotationl"},"type serviceOfferingAnnotationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferingannotationl-loadresource"},"func (serviceOfferingAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceOfferingAnnotation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceofferingannotationquery"},"type serviceOfferingAnnotationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferingannotations"},"func ServiceOfferingAnnotations(mods ...qm.QueryMod) serviceOfferingAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferingannotationquery-all"},"func (q serviceOfferingAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceOfferingAnnotationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferingannotationquery-count"},"func (q serviceOfferingAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferingannotationquery-delete"},"func (q serviceOfferingAnnotationQuery) Delete(o *ServiceOfferingAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferingannotationquery-deleteall"},"func (q serviceOfferingAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferingannotationquery-deleteallslice"},"func (q serviceOfferingAnnotationQuery) DeleteAllSlice(o ServiceOfferingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferingannotationquery-exists"},"func (q serviceOfferingAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferingannotationquery-insert"},"func (q serviceOfferingAnnotationQuery) Insert(o *ServiceOfferingAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferingannotationquery-one"},"func (q serviceOfferingAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceOfferingAnnotation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferingannotationquery-reload"},"func (q serviceOfferingAnnotationQuery) Reload(o *ServiceOfferingAnnotation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferingannotationquery-reloadall"},"func (q serviceOfferingAnnotationQuery) ReloadAll(o *ServiceOfferingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferingannotationquery-removeresource"},"func (q serviceOfferingAnnotationQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"ServiceOfferingAnnotation, ctx context.Context, exec boil.ContextExecutor, related "),"Service) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferingannotationquery-resource"},"func (q serviceOfferingAnnotationQuery) Resource(o *ServiceOfferingAnnotation, mods ...qm.QueryMod) serviceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferingannotationquery-setresource"},"func (q serviceOfferingAnnotationQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"ServiceOfferingAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Service) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferingannotationquery-update"},"func (q serviceOfferingAnnotationQuery) Update(o *ServiceOfferingAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferingannotationquery-updateall"},"func (q serviceOfferingAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferingannotationquery-updateallslice"},"func (q serviceOfferingAnnotationQuery) UpdateAllSlice(o ServiceOfferingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferingannotationquery-upsert"},"func (q serviceOfferingAnnotationQuery) Upsert(o *ServiceOfferingAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceofferingannotationr"},"type serviceOfferingAnnotationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferingannotationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"serviceOfferingAnnotationR) NewStruct() "),"serviceOfferingAnnotationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceofferinglabell"},"type serviceOfferingLabelL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferinglabell-loadresource"},"func (serviceOfferingLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceOfferingLabel interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceofferinglabelquery"},"type serviceOfferingLabelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferinglabels"},"func ServiceOfferingLabels(mods ...qm.QueryMod) serviceOfferingLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferinglabelquery-all"},"func (q serviceOfferingLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceOfferingLabelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferinglabelquery-count"},"func (q serviceOfferingLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferinglabelquery-delete"},"func (q serviceOfferingLabelQuery) Delete(o *ServiceOfferingLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferinglabelquery-deleteall"},"func (q serviceOfferingLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferinglabelquery-deleteallslice"},"func (q serviceOfferingLabelQuery) DeleteAllSlice(o ServiceOfferingLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferinglabelquery-exists"},"func (q serviceOfferingLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferinglabelquery-insert"},"func (q serviceOfferingLabelQuery) Insert(o *ServiceOfferingLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferinglabelquery-one"},"func (q serviceOfferingLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceOfferingLabel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferinglabelquery-reload"},"func (q serviceOfferingLabelQuery) Reload(o *ServiceOfferingLabel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferinglabelquery-reloadall"},"func (q serviceOfferingLabelQuery) ReloadAll(o *ServiceOfferingLabelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferinglabelquery-removeresource"},"func (q serviceOfferingLabelQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"ServiceOfferingLabel, ctx context.Context, exec boil.ContextExecutor, related "),"Service) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferinglabelquery-resource"},"func (q serviceOfferingLabelQuery) Resource(o *ServiceOfferingLabel, mods ...qm.QueryMod) serviceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferinglabelquery-setresource"},"func (q serviceOfferingLabelQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"ServiceOfferingLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Service) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferinglabelquery-update"},"func (q serviceOfferingLabelQuery) Update(o *ServiceOfferingLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferinglabelquery-updateall"},"func (q serviceOfferingLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferinglabelquery-updateallslice"},"func (q serviceOfferingLabelQuery) UpdateAllSlice(o ServiceOfferingLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferinglabelquery-upsert"},"func (q serviceOfferingLabelQuery) Upsert(o *ServiceOfferingLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceofferinglabelr"},"type serviceOfferingLabelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceofferinglabelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"serviceOfferingLabelR) NewStruct() "),"serviceOfferingLabelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanannotationl"},"type servicePlanAnnotationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanannotationl-loadresource"},"func (servicePlanAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServicePlanAnnotation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanannotationquery"},"type servicePlanAnnotationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanannotations"},"func ServicePlanAnnotations(mods ...qm.QueryMod) servicePlanAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanannotationquery-all"},"func (q servicePlanAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServicePlanAnnotationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanannotationquery-count"},"func (q servicePlanAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanannotationquery-delete"},"func (q servicePlanAnnotationQuery) Delete(o *ServicePlanAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanannotationquery-deleteall"},"func (q servicePlanAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanannotationquery-deleteallslice"},"func (q servicePlanAnnotationQuery) DeleteAllSlice(o ServicePlanAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanannotationquery-exists"},"func (q servicePlanAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanannotationquery-insert"},"func (q servicePlanAnnotationQuery) Insert(o *ServicePlanAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanannotationquery-one"},"func (q servicePlanAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServicePlanAnnotation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanannotationquery-reload"},"func (q servicePlanAnnotationQuery) Reload(o *ServicePlanAnnotation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanannotationquery-reloadall"},"func (q servicePlanAnnotationQuery) ReloadAll(o *ServicePlanAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanannotationquery-removeresource"},"func (q servicePlanAnnotationQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"ServicePlanAnnotation, ctx context.Context, exec boil.ContextExecutor, related "),"ServicePlan) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanannotationquery-resource"},"func (q servicePlanAnnotationQuery) Resource(o *ServicePlanAnnotation, mods ...qm.QueryMod) servicePlanQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanannotationquery-setresource"},"func (q servicePlanAnnotationQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"ServicePlanAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"ServicePlan) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanannotationquery-update"},"func (q servicePlanAnnotationQuery) Update(o *ServicePlanAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanannotationquery-updateall"},"func (q servicePlanAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanannotationquery-updateallslice"},"func (q servicePlanAnnotationQuery) UpdateAllSlice(o ServicePlanAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanannotationquery-upsert"},"func (q servicePlanAnnotationQuery) Upsert(o *ServicePlanAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanannotationr"},"type servicePlanAnnotationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanannotationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"servicePlanAnnotationR) NewStruct() "),"servicePlanAnnotationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanl"},"type servicePlanL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanl-loadresourceserviceplanannotations"},"func (servicePlanL) LoadResourceServicePlanAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServicePlan interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanl-loadresourceserviceplanlabels"},"func (servicePlanL) LoadResourceServicePlanLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServicePlan interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanl-loadservice"},"func (servicePlanL) LoadService(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServicePlan interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanl-loadserviceinstances"},"func (servicePlanL) LoadServiceInstances(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServicePlan interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanl-loadserviceplanvisibilities"},"func (servicePlanL) LoadServicePlanVisibilities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServicePlan interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanlabell"},"type servicePlanLabelL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanlabell-loadresource"},"func (servicePlanLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServicePlanLabel interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanlabelquery"},"type servicePlanLabelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanlabels"},"func ServicePlanLabels(mods ...qm.QueryMod) servicePlanLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanlabelquery-all"},"func (q servicePlanLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServicePlanLabelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanlabelquery-count"},"func (q servicePlanLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanlabelquery-delete"},"func (q servicePlanLabelQuery) Delete(o *ServicePlanLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanlabelquery-deleteall"},"func (q servicePlanLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanlabelquery-deleteallslice"},"func (q servicePlanLabelQuery) DeleteAllSlice(o ServicePlanLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanlabelquery-exists"},"func (q servicePlanLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanlabelquery-insert"},"func (q servicePlanLabelQuery) Insert(o *ServicePlanLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanlabelquery-one"},"func (q servicePlanLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServicePlanLabel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanlabelquery-reload"},"func (q servicePlanLabelQuery) Reload(o *ServicePlanLabel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanlabelquery-reloadall"},"func (q servicePlanLabelQuery) ReloadAll(o *ServicePlanLabelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanlabelquery-removeresource"},"func (q servicePlanLabelQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"ServicePlanLabel, ctx context.Context, exec boil.ContextExecutor, related "),"ServicePlan) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanlabelquery-resource"},"func (q servicePlanLabelQuery) Resource(o *ServicePlanLabel, mods ...qm.QueryMod) servicePlanQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanlabelquery-setresource"},"func (q servicePlanLabelQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"ServicePlanLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"ServicePlan) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanlabelquery-update"},"func (q servicePlanLabelQuery) Update(o *ServicePlanLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanlabelquery-updateall"},"func (q servicePlanLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanlabelquery-updateallslice"},"func (q servicePlanLabelQuery) UpdateAllSlice(o ServicePlanLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanlabelquery-upsert"},"func (q servicePlanLabelQuery) Upsert(o *ServicePlanLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanlabelr"},"type servicePlanLabelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanlabelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"servicePlanLabelR) NewStruct() "),"servicePlanLabelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanquery"},"type servicePlanQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplans"},"func ServicePlans(mods ...qm.QueryMod) servicePlanQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-addresourceserviceplanannotations"},"func (q servicePlanQuery) AddResourceServicePlanAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"ServicePlan, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServicePlanAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-addresourceserviceplanlabels"},"func (q servicePlanQuery) AddResourceServicePlanLabels(o ",(0,o.kt)("em",{parentName:"a"},"ServicePlan, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServicePlanLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-addserviceinstances"},"func (q servicePlanQuery) AddServiceInstances(o ",(0,o.kt)("em",{parentName:"a"},"ServicePlan, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceInstance) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-addserviceplanvisibilities"},"func (q servicePlanQuery) AddServicePlanVisibilities(o ",(0,o.kt)("em",{parentName:"a"},"ServicePlan, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServicePlanVisibility) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-all"},"func (q servicePlanQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServicePlanSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-count"},"func (q servicePlanQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-delete"},"func (q servicePlanQuery) Delete(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-deleteall"},"func (q servicePlanQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-deleteallslice"},"func (q servicePlanQuery) DeleteAllSlice(o ServicePlanSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-exists"},"func (q servicePlanQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-insert"},"func (q servicePlanQuery) Insert(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-one"},"func (q servicePlanQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServicePlan, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-reload"},"func (q servicePlanQuery) Reload(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-reloadall"},"func (q servicePlanQuery) ReloadAll(o *ServicePlanSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-removeresourceserviceplanannotations"},"func (q servicePlanQuery) RemoveResourceServicePlanAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"ServicePlan, ctx context.Context, exec boil.ContextExecutor, related ..."),"ServicePlanAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-removeresourceserviceplanlabels"},"func (q servicePlanQuery) RemoveResourceServicePlanLabels(o ",(0,o.kt)("em",{parentName:"a"},"ServicePlan, ctx context.Context, exec boil.ContextExecutor, related ..."),"ServicePlanLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-removeserviceinstances"},"func (q servicePlanQuery) RemoveServiceInstances(o ",(0,o.kt)("em",{parentName:"a"},"ServicePlan, ctx context.Context, exec boil.ContextExecutor, related ..."),"ServiceInstance) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-resourceserviceplanannotations"},"func (q servicePlanQuery) ResourceServicePlanAnnotations(o *ServicePlan, mods ...qm.QueryMod) servicePlanAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-resourceserviceplanlabels"},"func (q servicePlanQuery) ResourceServicePlanLabels(o *ServicePlan, mods ...qm.QueryMod) servicePlanLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-service"},"func (q servicePlanQuery) Service(o *ServicePlan, mods ...qm.QueryMod) serviceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-serviceinstances"},"func (q servicePlanQuery) ServiceInstances(o *ServicePlan, mods ...qm.QueryMod) serviceInstanceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-serviceplanvisibilities"},"func (q servicePlanQuery) ServicePlanVisibilities(o *ServicePlan, mods ...qm.QueryMod) servicePlanVisibilityQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-setresourceserviceplanannotations"},"func (q servicePlanQuery) SetResourceServicePlanAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"ServicePlan, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServicePlanAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-setresourceserviceplanlabels"},"func (q servicePlanQuery) SetResourceServicePlanLabels(o ",(0,o.kt)("em",{parentName:"a"},"ServicePlan, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServicePlanLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-setservice"},"func (q servicePlanQuery) SetService(o ",(0,o.kt)("em",{parentName:"a"},"ServicePlan, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Service) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-setserviceinstances"},"func (q servicePlanQuery) SetServiceInstances(o ",(0,o.kt)("em",{parentName:"a"},"ServicePlan, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceInstance) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-update"},"func (q servicePlanQuery) Update(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-updateall"},"func (q servicePlanQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-updateallslice"},"func (q servicePlanQuery) UpdateAllSlice(o ServicePlanSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanquery-upsert"},"func (q servicePlanQuery) Upsert(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanr"},"type servicePlanR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"servicePlanR) NewStruct() "),"servicePlanR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanvisibilityl"},"type servicePlanVisibilityL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanvisibilityl-loadorganization"},"func (servicePlanVisibilityL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServicePlanVisibility interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanvisibilityl-loadserviceplan"},"func (servicePlanVisibilityL) LoadServicePlan(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServicePlanVisibility interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanvisibilityquery"},"type servicePlanVisibilityQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanvisibilities"},"func ServicePlanVisibilities(mods ...qm.QueryMod) servicePlanVisibilityQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanvisibilityquery-all"},"func (q servicePlanVisibilityQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServicePlanVisibilitySlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanvisibilityquery-count"},"func (q servicePlanVisibilityQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanvisibilityquery-delete"},"func (q servicePlanVisibilityQuery) Delete(o *ServicePlanVisibility, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanvisibilityquery-deleteall"},"func (q servicePlanVisibilityQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanvisibilityquery-deleteallslice"},"func (q servicePlanVisibilityQuery) DeleteAllSlice(o ServicePlanVisibilitySlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanvisibilityquery-exists"},"func (q servicePlanVisibilityQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanvisibilityquery-insert"},"func (q servicePlanVisibilityQuery) Insert(o *ServicePlanVisibility, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanvisibilityquery-one"},"func (q servicePlanVisibilityQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServicePlanVisibility, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanvisibilityquery-organization"},"func (q servicePlanVisibilityQuery) Organization(o *ServicePlanVisibility, mods ...qm.QueryMod) organizationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanvisibilityquery-reload"},"func (q servicePlanVisibilityQuery) Reload(o *ServicePlanVisibility, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanvisibilityquery-reloadall"},"func (q servicePlanVisibilityQuery) ReloadAll(o *ServicePlanVisibilitySlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanvisibilityquery-serviceplan"},"func (q servicePlanVisibilityQuery) ServicePlan(o *ServicePlanVisibility, mods ...qm.QueryMod) servicePlanQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanvisibilityquery-setorganization"},"func (q servicePlanVisibilityQuery) SetOrganization(o ",(0,o.kt)("em",{parentName:"a"},"ServicePlanVisibility, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Organization) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanvisibilityquery-setserviceplan"},"func (q servicePlanVisibilityQuery) SetServicePlan(o ",(0,o.kt)("em",{parentName:"a"},"ServicePlanVisibility, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"ServicePlan) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanvisibilityquery-update"},"func (q servicePlanVisibilityQuery) Update(o *ServicePlanVisibility, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanvisibilityquery-updateall"},"func (q servicePlanVisibilityQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanvisibilityquery-updateallslice"},"func (q servicePlanVisibilityQuery) UpdateAllSlice(o ServicePlanVisibilitySlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanvisibilityquery-upsert"},"func (q servicePlanVisibilityQuery) Upsert(o *ServicePlanVisibility, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceplanvisibilityr"},"type servicePlanVisibilityR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceplanvisibilityr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"servicePlanVisibilityR) NewStruct() "),"servicePlanVisibilityR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicequery"},"type serviceQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-services"},"func Services(mods ...qm.QueryMod) serviceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-addresourceserviceofferingannotations"},"func (q serviceQuery) AddResourceServiceOfferingAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Service, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceOfferingAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-addresourceserviceofferinglabels"},"func (q serviceQuery) AddResourceServiceOfferingLabels(o ",(0,o.kt)("em",{parentName:"a"},"Service, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceOfferingLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-addserviceplans"},"func (q serviceQuery) AddServicePlans(o ",(0,o.kt)("em",{parentName:"a"},"Service, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServicePlan) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-all"},"func (q serviceQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-count"},"func (q serviceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-delete"},"func (q serviceQuery) Delete(o *Service, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-deleteall"},"func (q serviceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-deleteallslice"},"func (q serviceQuery) DeleteAllSlice(o ServiceSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-exists"},"func (q serviceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-insert"},"func (q serviceQuery) Insert(o *Service, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-one"},"func (q serviceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Service, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-reload"},"func (q serviceQuery) Reload(o *Service, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-reloadall"},"func (q serviceQuery) ReloadAll(o *ServiceSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-removeresourceserviceofferingannotations"},"func (q serviceQuery) RemoveResourceServiceOfferingAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Service, ctx context.Context, exec boil.ContextExecutor, related ..."),"ServiceOfferingAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-removeresourceserviceofferinglabels"},"func (q serviceQuery) RemoveResourceServiceOfferingLabels(o ",(0,o.kt)("em",{parentName:"a"},"Service, ctx context.Context, exec boil.ContextExecutor, related ..."),"ServiceOfferingLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-removeservicebroker"},"func (q serviceQuery) RemoveServiceBroker(o ",(0,o.kt)("em",{parentName:"a"},"Service, ctx context.Context, exec boil.ContextExecutor, related "),"ServiceBroker) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-resourceserviceofferingannotations"},"func (q serviceQuery) ResourceServiceOfferingAnnotations(o *Service, mods ...qm.QueryMod) serviceOfferingAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-resourceserviceofferinglabels"},"func (q serviceQuery) ResourceServiceOfferingLabels(o *Service, mods ...qm.QueryMod) serviceOfferingLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-servicebroker"},"func (q serviceQuery) ServiceBroker(o *Service, mods ...qm.QueryMod) serviceBrokerQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-serviceplans"},"func (q serviceQuery) ServicePlans(o *Service, mods ...qm.QueryMod) servicePlanQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-setresourceserviceofferingannotations"},"func (q serviceQuery) SetResourceServiceOfferingAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Service, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceOfferingAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-setresourceserviceofferinglabels"},"func (q serviceQuery) SetResourceServiceOfferingLabels(o ",(0,o.kt)("em",{parentName:"a"},"Service, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceOfferingLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-setservicebroker"},"func (q serviceQuery) SetServiceBroker(o ",(0,o.kt)("em",{parentName:"a"},"Service, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"ServiceBroker) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-update"},"func (q serviceQuery) Update(o *Service, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-updateall"},"func (q serviceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-updateallslice"},"func (q serviceQuery) UpdateAllSlice(o ServiceSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicequery-upsert"},"func (q serviceQuery) Upsert(o *Service, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-servicer"},"type serviceR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-servicer-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"serviceR) NewStruct() "),"serviceR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceusageeventl"},"type serviceUsageEventL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceusageeventquery"},"type serviceUsageEventQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceusageevents"},"func ServiceUsageEvents(mods ...qm.QueryMod) serviceUsageEventQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceusageeventquery-all"},"func (q serviceUsageEventQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceUsageEventSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceusageeventquery-count"},"func (q serviceUsageEventQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceusageeventquery-delete"},"func (q serviceUsageEventQuery) Delete(o *ServiceUsageEvent, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceusageeventquery-deleteall"},"func (q serviceUsageEventQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceusageeventquery-deleteallslice"},"func (q serviceUsageEventQuery) DeleteAllSlice(o ServiceUsageEventSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceusageeventquery-exists"},"func (q serviceUsageEventQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceusageeventquery-insert"},"func (q serviceUsageEventQuery) Insert(o *ServiceUsageEvent, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceusageeventquery-one"},"func (q serviceUsageEventQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceUsageEvent, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceusageeventquery-reload"},"func (q serviceUsageEventQuery) Reload(o *ServiceUsageEvent, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceusageeventquery-reloadall"},"func (q serviceUsageEventQuery) ReloadAll(o *ServiceUsageEventSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceusageeventquery-update"},"func (q serviceUsageEventQuery) Update(o *ServiceUsageEvent, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceusageeventquery-updateall"},"func (q serviceUsageEventQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceusageeventquery-updateallslice"},"func (q serviceUsageEventQuery) UpdateAllSlice(o ServiceUsageEventSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceusageeventquery-upsert"},"func (q serviceUsageEventQuery) Upsert(o *ServiceUsageEvent, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-serviceusageeventr"},"type serviceUsageEventR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-serviceusageeventr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"serviceUsageEventR) NewStruct() "),"serviceUsageEventR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-sidecarl"},"type sidecarL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarl-loadapp"},"func (sidecarL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSidecar interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarl-loadsidecarprocesstypes"},"func (sidecarL) LoadSidecarProcessTypes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSidecar interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-sidecarprocesstypel"},"type sidecarProcessTypeL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarprocesstypel-loadsidecar"},"func (sidecarProcessTypeL) LoadSidecar(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSidecarProcessType interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-sidecarprocesstypequery"},"type sidecarProcessTypeQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarprocesstypes"},"func SidecarProcessTypes(mods ...qm.QueryMod) sidecarProcessTypeQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarprocesstypequery-all"},"func (q sidecarProcessTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (SidecarProcessTypeSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarprocesstypequery-count"},"func (q sidecarProcessTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarprocesstypequery-delete"},"func (q sidecarProcessTypeQuery) Delete(o *SidecarProcessType, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarprocesstypequery-deleteall"},"func (q sidecarProcessTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarprocesstypequery-deleteallslice"},"func (q sidecarProcessTypeQuery) DeleteAllSlice(o SidecarProcessTypeSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarprocesstypequery-exists"},"func (q sidecarProcessTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarprocesstypequery-insert"},"func (q sidecarProcessTypeQuery) Insert(o *SidecarProcessType, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarprocesstypequery-one"},"func (q sidecarProcessTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SidecarProcessType, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarprocesstypequery-reload"},"func (q sidecarProcessTypeQuery) Reload(o *SidecarProcessType, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarprocesstypequery-reloadall"},"func (q sidecarProcessTypeQuery) ReloadAll(o *SidecarProcessTypeSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarprocesstypequery-setsidecar"},"func (q sidecarProcessTypeQuery) SetSidecar(o ",(0,o.kt)("em",{parentName:"a"},"SidecarProcessType, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Sidecar) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarprocesstypequery-sidecar"},"func (q sidecarProcessTypeQuery) Sidecar(o *SidecarProcessType, mods ...qm.QueryMod) sidecarQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarprocesstypequery-update"},"func (q sidecarProcessTypeQuery) Update(o *SidecarProcessType, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarprocesstypequery-updateall"},"func (q sidecarProcessTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarprocesstypequery-updateallslice"},"func (q sidecarProcessTypeQuery) UpdateAllSlice(o SidecarProcessTypeSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarprocesstypequery-upsert"},"func (q sidecarProcessTypeQuery) Upsert(o *SidecarProcessType, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-sidecarprocesstyper"},"type sidecarProcessTypeR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarprocesstyper-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"sidecarProcessTypeR) NewStruct() "),"sidecarProcessTypeR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-sidecarquery"},"type sidecarQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecars"},"func Sidecars(mods ...qm.QueryMod) sidecarQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarquery-addsidecarprocesstypes"},"func (q sidecarQuery) AddSidecarProcessTypes(o ",(0,o.kt)("em",{parentName:"a"},"Sidecar, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"SidecarProcessType) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarquery-all"},"func (q sidecarQuery) All(ctx context.Context, exec boil.ContextExecutor) (SidecarSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarquery-app"},"func (q sidecarQuery) App(o *Sidecar, mods ...qm.QueryMod) appQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarquery-count"},"func (q sidecarQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarquery-delete"},"func (q sidecarQuery) Delete(o *Sidecar, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarquery-deleteall"},"func (q sidecarQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarquery-deleteallslice"},"func (q sidecarQuery) DeleteAllSlice(o SidecarSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarquery-exists"},"func (q sidecarQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarquery-insert"},"func (q sidecarQuery) Insert(o *Sidecar, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarquery-one"},"func (q sidecarQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Sidecar, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarquery-reload"},"func (q sidecarQuery) Reload(o *Sidecar, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarquery-reloadall"},"func (q sidecarQuery) ReloadAll(o *SidecarSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarquery-setapp"},"func (q sidecarQuery) SetApp(o ",(0,o.kt)("em",{parentName:"a"},"Sidecar, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarquery-sidecarprocesstypes"},"func (q sidecarQuery) SidecarProcessTypes(o *Sidecar, mods ...qm.QueryMod) sidecarProcessTypeQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarquery-update"},"func (q sidecarQuery) Update(o *Sidecar, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarquery-updateall"},"func (q sidecarQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarquery-updateallslice"},"func (q sidecarQuery) UpdateAllSlice(o SidecarSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarquery-upsert"},"func (q sidecarQuery) Upsert(o *Sidecar, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-sidecarr"},"type sidecarR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-sidecarr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"sidecarR) NewStruct() "),"sidecarR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spaceannotationl"},"type spaceAnnotationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spaceannotationl-loadresource"},"func (spaceAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpaceAnnotation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spaceannotationquery"},"type spaceAnnotationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spaceannotations"},"func SpaceAnnotations(mods ...qm.QueryMod) spaceAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spaceannotationquery-all"},"func (q spaceAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpaceAnnotationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spaceannotationquery-count"},"func (q spaceAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spaceannotationquery-delete"},"func (q spaceAnnotationQuery) Delete(o *SpaceAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spaceannotationquery-deleteall"},"func (q spaceAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spaceannotationquery-deleteallslice"},"func (q spaceAnnotationQuery) DeleteAllSlice(o SpaceAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spaceannotationquery-exists"},"func (q spaceAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spaceannotationquery-insert"},"func (q spaceAnnotationQuery) Insert(o *SpaceAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spaceannotationquery-one"},"func (q spaceAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SpaceAnnotation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spaceannotationquery-reload"},"func (q spaceAnnotationQuery) Reload(o *SpaceAnnotation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spaceannotationquery-reloadall"},"func (q spaceAnnotationQuery) ReloadAll(o *SpaceAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spaceannotationquery-removeresource"},"func (q spaceAnnotationQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"SpaceAnnotation, ctx context.Context, exec boil.ContextExecutor, related "),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spaceannotationquery-resource"},"func (q spaceAnnotationQuery) Resource(o *SpaceAnnotation, mods ...qm.QueryMod) spaceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spaceannotationquery-setresource"},"func (q spaceAnnotationQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"SpaceAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spaceannotationquery-update"},"func (q spaceAnnotationQuery) Update(o *SpaceAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spaceannotationquery-updateall"},"func (q spaceAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spaceannotationquery-updateallslice"},"func (q spaceAnnotationQuery) UpdateAllSlice(o SpaceAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spaceannotationquery-upsert"},"func (q spaceAnnotationQuery) Upsert(o *SpaceAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spaceannotationr"},"type spaceAnnotationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spaceannotationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"spaceAnnotationR) NewStruct() "),"spaceAnnotationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacel"},"type spaceL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacel-loadapps"},"func (spaceL) LoadApps(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacel-loaddefaultspaceusers"},"func (spaceL) LoadDefaultSpaceUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacel-loadisolationsegment"},"func (spaceL) LoadIsolationSegment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacel-loadorganization"},"func (spaceL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacel-loadresourcespaceannotations"},"func (spaceL) LoadResourceSpaceAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacel-loadresourcespacelabels"},"func (spaceL) LoadResourceSpaceLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacel-loadroutes"},"func (spaceL) LoadRoutes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacel-loadsecuritygroupsspaces"},"func (spaceL) LoadSecurityGroupsSpaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacel-loadservicebrokers"},"func (spaceL) LoadServiceBrokers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacel-loadserviceinstances"},"func (spaceL) LoadServiceInstances(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacel-loadsharedserviceinstances"},"func (spaceL) LoadSharedServiceInstances(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacel-loadspacequotadefinition"},"func (spaceL) LoadSpaceQuotaDefinition(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacel-loadspacesapplicationsupporters"},"func (spaceL) LoadSpacesApplicationSupporters(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacel-loadspacesauditors"},"func (spaceL) LoadSpacesAuditors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacel-loadspacesdevelopers"},"func (spaceL) LoadSpacesDevelopers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacel-loadspacesmanagers"},"func (spaceL) LoadSpacesManagers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacel-loadstagingspacestagingsecuritygroupsspaces"},"func (spaceL) LoadStagingSpaceStagingSecurityGroupsSpaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacelabell"},"type spaceLabelL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacelabell-loadresource"},"func (spaceLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpaceLabel interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacelabelquery"},"type spaceLabelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacelabels"},"func SpaceLabels(mods ...qm.QueryMod) spaceLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacelabelquery-all"},"func (q spaceLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpaceLabelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacelabelquery-count"},"func (q spaceLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacelabelquery-delete"},"func (q spaceLabelQuery) Delete(o *SpaceLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacelabelquery-deleteall"},"func (q spaceLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacelabelquery-deleteallslice"},"func (q spaceLabelQuery) DeleteAllSlice(o SpaceLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacelabelquery-exists"},"func (q spaceLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacelabelquery-insert"},"func (q spaceLabelQuery) Insert(o *SpaceLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacelabelquery-one"},"func (q spaceLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SpaceLabel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacelabelquery-reload"},"func (q spaceLabelQuery) Reload(o *SpaceLabel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacelabelquery-reloadall"},"func (q spaceLabelQuery) ReloadAll(o *SpaceLabelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacelabelquery-removeresource"},"func (q spaceLabelQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"SpaceLabel, ctx context.Context, exec boil.ContextExecutor, related "),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacelabelquery-resource"},"func (q spaceLabelQuery) Resource(o *SpaceLabel, mods ...qm.QueryMod) spaceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacelabelquery-setresource"},"func (q spaceLabelQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"SpaceLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacelabelquery-update"},"func (q spaceLabelQuery) Update(o *SpaceLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacelabelquery-updateall"},"func (q spaceLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacelabelquery-updateallslice"},"func (q spaceLabelQuery) UpdateAllSlice(o SpaceLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacelabelquery-upsert"},"func (q spaceLabelQuery) Upsert(o *SpaceLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacelabelr"},"type spaceLabelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacelabelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"spaceLabelR) NewStruct() "),"spaceLabelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacequery"},"type spaceQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spaces"},"func Spaces(mods ...qm.QueryMod) spaceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-addapps"},"func (q spaceQuery) AddApps(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-adddefaultspaceusers"},"func (q spaceQuery) AddDefaultSpaceUsers(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"User) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-addresourcespaceannotations"},"func (q spaceQuery) AddResourceSpaceAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"SpaceAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-addresourcespacelabels"},"func (q spaceQuery) AddResourceSpaceLabels(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"SpaceLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-addroutes"},"func (q spaceQuery) AddRoutes(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Route) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-addsecuritygroupsspaces"},"func (q spaceQuery) AddSecurityGroupsSpaces(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"SecurityGroupsSpace) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-addservicebrokers"},"func (q spaceQuery) AddServiceBrokers(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceBroker) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-addserviceinstances"},"func (q spaceQuery) AddServiceInstances(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceInstance) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-addsharedserviceinstances"},"func (q spaceQuery) AddSharedServiceInstances(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceInstance) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-addspacesapplicationsupporters"},"func (q spaceQuery) AddSpacesApplicationSupporters(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"SpacesApplicationSupporter) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-addspacesauditors"},"func (q spaceQuery) AddSpacesAuditors(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"SpacesAuditor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-addspacesdevelopers"},"func (q spaceQuery) AddSpacesDevelopers(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"SpacesDeveloper) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-addspacesmanagers"},"func (q spaceQuery) AddSpacesManagers(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"SpacesManager) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-addstagingspacestagingsecuritygroupsspaces"},"func (q spaceQuery) AddStagingSpaceStagingSecurityGroupsSpaces(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"StagingSecurityGroupsSpace) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-all"},"func (q spaceQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpaceSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-apps"},"func (q spaceQuery) Apps(o *Space, mods ...qm.QueryMod) appQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-count"},"func (q spaceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-defaultspaceusers"},"func (q spaceQuery) DefaultSpaceUsers(o *Space, mods ...qm.QueryMod) userQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-delete"},"func (q spaceQuery) Delete(o *Space, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-deleteall"},"func (q spaceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-deleteallslice"},"func (q spaceQuery) DeleteAllSlice(o SpaceSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-exists"},"func (q spaceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-insert"},"func (q spaceQuery) Insert(o *Space, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-isolationsegment"},"func (q spaceQuery) IsolationSegment(o *Space, mods ...qm.QueryMod) isolationSegmentQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-one"},"func (q spaceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Space, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-organization"},"func (q spaceQuery) Organization(o *Space, mods ...qm.QueryMod) organizationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-reload"},"func (q spaceQuery) Reload(o *Space, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-reloadall"},"func (q spaceQuery) ReloadAll(o *SpaceSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-removeapps"},"func (q spaceQuery) RemoveApps(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, related ..."),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-removedefaultspaceusers"},"func (q spaceQuery) RemoveDefaultSpaceUsers(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, related ..."),"User) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-removeisolationsegment"},"func (q spaceQuery) RemoveIsolationSegment(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, related "),"IsolationSegment) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-removeresourcespaceannotations"},"func (q spaceQuery) RemoveResourceSpaceAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, related ..."),"SpaceAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-removeresourcespacelabels"},"func (q spaceQuery) RemoveResourceSpaceLabels(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, related ..."),"SpaceLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-removeservicebrokers"},"func (q spaceQuery) RemoveServiceBrokers(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, related ..."),"ServiceBroker) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-removesharedserviceinstances"},"func (q spaceQuery) RemoveSharedServiceInstances(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, related ..."),"ServiceInstance) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-removespacequotadefinition"},"func (q spaceQuery) RemoveSpaceQuotaDefinition(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, related "),"SpaceQuotaDefinition) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-resourcespaceannotations"},"func (q spaceQuery) ResourceSpaceAnnotations(o *Space, mods ...qm.QueryMod) spaceAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-resourcespacelabels"},"func (q spaceQuery) ResourceSpaceLabels(o *Space, mods ...qm.QueryMod) spaceLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-routes"},"func (q spaceQuery) Routes(o *Space, mods ...qm.QueryMod) routeQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-securitygroupsspaces"},"func (q spaceQuery) SecurityGroupsSpaces(o *Space, mods ...qm.QueryMod) securityGroupsSpaceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-servicebrokers"},"func (q spaceQuery) ServiceBrokers(o *Space, mods ...qm.QueryMod) serviceBrokerQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-serviceinstances"},"func (q spaceQuery) ServiceInstances(o *Space, mods ...qm.QueryMod) serviceInstanceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-setapps"},"func (q spaceQuery) SetApps(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-setdefaultspaceusers"},"func (q spaceQuery) SetDefaultSpaceUsers(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"User) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-setisolationsegment"},"func (q spaceQuery) SetIsolationSegment(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"IsolationSegment) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-setorganization"},"func (q spaceQuery) SetOrganization(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Organization) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-setresourcespaceannotations"},"func (q spaceQuery) SetResourceSpaceAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"SpaceAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-setresourcespacelabels"},"func (q spaceQuery) SetResourceSpaceLabels(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"SpaceLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-setservicebrokers"},"func (q spaceQuery) SetServiceBrokers(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceBroker) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-setsharedserviceinstances"},"func (q spaceQuery) SetSharedServiceInstances(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"ServiceInstance) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-setspacequotadefinition"},"func (q spaceQuery) SetSpaceQuotaDefinition(o ",(0,o.kt)("em",{parentName:"a"},"Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"SpaceQuotaDefinition) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-sharedserviceinstances"},"func (q spaceQuery) SharedServiceInstances(o *Space, mods ...qm.QueryMod) serviceInstanceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-spacequotadefinition"},"func (q spaceQuery) SpaceQuotaDefinition(o *Space, mods ...qm.QueryMod) spaceQuotaDefinitionQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-spacesapplicationsupporters"},"func (q spaceQuery) SpacesApplicationSupporters(o *Space, mods ...qm.QueryMod) spacesApplicationSupporterQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-spacesauditors"},"func (q spaceQuery) SpacesAuditors(o *Space, mods ...qm.QueryMod) spacesAuditorQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-spacesdevelopers"},"func (q spaceQuery) SpacesDevelopers(o *Space, mods ...qm.QueryMod) spacesDeveloperQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-spacesmanagers"},"func (q spaceQuery) SpacesManagers(o *Space, mods ...qm.QueryMod) spacesManagerQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-stagingspacestagingsecuritygroupsspaces"},"func (q spaceQuery) StagingSpaceStagingSecurityGroupsSpaces(o *Space, mods ...qm.QueryMod) stagingSecurityGroupsSpaceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-update"},"func (q spaceQuery) Update(o *Space, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-updateall"},"func (q spaceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-updateallslice"},"func (q spaceQuery) UpdateAllSlice(o SpaceSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequery-upsert"},"func (q spaceQuery) Upsert(o *Space, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacequotadefinitionl"},"type spaceQuotaDefinitionL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitionl-loadorganization"},"func (spaceQuotaDefinitionL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpaceQuotaDefinition interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitionl-loadspaces"},"func (spaceQuotaDefinitionL) LoadSpaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpaceQuotaDefinition interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacequotadefinitionquery"},"type spaceQuotaDefinitionQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitions"},"func SpaceQuotaDefinitions(mods ...qm.QueryMod) spaceQuotaDefinitionQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitionquery-addspaces"},"func (q spaceQuotaDefinitionQuery) AddSpaces(o ",(0,o.kt)("em",{parentName:"a"},"SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitionquery-all"},"func (q spaceQuotaDefinitionQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpaceQuotaDefinitionSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitionquery-count"},"func (q spaceQuotaDefinitionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitionquery-delete"},"func (q spaceQuotaDefinitionQuery) Delete(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitionquery-deleteall"},"func (q spaceQuotaDefinitionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitionquery-deleteallslice"},"func (q spaceQuotaDefinitionQuery) DeleteAllSlice(o SpaceQuotaDefinitionSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitionquery-exists"},"func (q spaceQuotaDefinitionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitionquery-insert"},"func (q spaceQuotaDefinitionQuery) Insert(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitionquery-one"},"func (q spaceQuotaDefinitionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SpaceQuotaDefinition, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitionquery-organization"},"func (q spaceQuotaDefinitionQuery) Organization(o *SpaceQuotaDefinition, mods ...qm.QueryMod) organizationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitionquery-reload"},"func (q spaceQuotaDefinitionQuery) Reload(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitionquery-reloadall"},"func (q spaceQuotaDefinitionQuery) ReloadAll(o *SpaceQuotaDefinitionSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitionquery-removespaces"},"func (q spaceQuotaDefinitionQuery) RemoveSpaces(o ",(0,o.kt)("em",{parentName:"a"},"SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, related ..."),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitionquery-setorganization"},"func (q spaceQuotaDefinitionQuery) SetOrganization(o ",(0,o.kt)("em",{parentName:"a"},"SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Organization) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitionquery-setspaces"},"func (q spaceQuotaDefinitionQuery) SetSpaces(o ",(0,o.kt)("em",{parentName:"a"},"SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitionquery-spaces"},"func (q spaceQuotaDefinitionQuery) Spaces(o *SpaceQuotaDefinition, mods ...qm.QueryMod) spaceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitionquery-update"},"func (q spaceQuotaDefinitionQuery) Update(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitionquery-updateall"},"func (q spaceQuotaDefinitionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitionquery-updateallslice"},"func (q spaceQuotaDefinitionQuery) UpdateAllSlice(o SpaceQuotaDefinitionSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitionquery-upsert"},"func (q spaceQuotaDefinitionQuery) Upsert(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacequotadefinitionr"},"type spaceQuotaDefinitionR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacequotadefinitionr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"spaceQuotaDefinitionR) NewStruct() "),"spaceQuotaDefinitionR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacer"},"type spaceR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacer-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"spaceR) NewStruct() "),"spaceR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesapplicationsupporterl"},"type spacesApplicationSupporterL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesapplicationsupporterl-loadspace"},"func (spacesApplicationSupporterL) LoadSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpacesApplicationSupporter interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesapplicationsupporterl-loaduser"},"func (spacesApplicationSupporterL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpacesApplicationSupporter interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesapplicationsupporterquery"},"type spacesApplicationSupporterQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesapplicationsupporters"},"func SpacesApplicationSupporters(mods ...qm.QueryMod) spacesApplicationSupporterQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesapplicationsupporterquery-all"},"func (q spacesApplicationSupporterQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpacesApplicationSupporterSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesapplicationsupporterquery-count"},"func (q spacesApplicationSupporterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesapplicationsupporterquery-delete"},"func (q spacesApplicationSupporterQuery) Delete(o *SpacesApplicationSupporter, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesapplicationsupporterquery-deleteall"},"func (q spacesApplicationSupporterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesapplicationsupporterquery-deleteallslice"},"func (q spacesApplicationSupporterQuery) DeleteAllSlice(o SpacesApplicationSupporterSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesapplicationsupporterquery-exists"},"func (q spacesApplicationSupporterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesapplicationsupporterquery-insert"},"func (q spacesApplicationSupporterQuery) Insert(o *SpacesApplicationSupporter, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesapplicationsupporterquery-one"},"func (q spacesApplicationSupporterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SpacesApplicationSupporter, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesapplicationsupporterquery-reload"},"func (q spacesApplicationSupporterQuery) Reload(o *SpacesApplicationSupporter, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesapplicationsupporterquery-reloadall"},"func (q spacesApplicationSupporterQuery) ReloadAll(o *SpacesApplicationSupporterSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesapplicationsupporterquery-setspace"},"func (q spacesApplicationSupporterQuery) SetSpace(o ",(0,o.kt)("em",{parentName:"a"},"SpacesApplicationSupporter, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesapplicationsupporterquery-setuser"},"func (q spacesApplicationSupporterQuery) SetUser(o ",(0,o.kt)("em",{parentName:"a"},"SpacesApplicationSupporter, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"User) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesapplicationsupporterquery-space"},"func (q spacesApplicationSupporterQuery) Space(o *SpacesApplicationSupporter, mods ...qm.QueryMod) spaceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesapplicationsupporterquery-update"},"func (q spacesApplicationSupporterQuery) Update(o *SpacesApplicationSupporter, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesapplicationsupporterquery-updateall"},"func (q spacesApplicationSupporterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesapplicationsupporterquery-updateallslice"},"func (q spacesApplicationSupporterQuery) UpdateAllSlice(o SpacesApplicationSupporterSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesapplicationsupporterquery-upsert"},"func (q spacesApplicationSupporterQuery) Upsert(o *SpacesApplicationSupporter, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesapplicationsupporterquery-user"},"func (q spacesApplicationSupporterQuery) User(o *SpacesApplicationSupporter, mods ...qm.QueryMod) userQuery")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesapplicationsupporterr"},"type spacesApplicationSupporterR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesapplicationsupporterr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"spacesApplicationSupporterR) NewStruct() "),"spacesApplicationSupporterR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesauditorl"},"type spacesAuditorL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesauditorl-loadspace"},"func (spacesAuditorL) LoadSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpacesAuditor interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesauditorl-loaduser"},"func (spacesAuditorL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpacesAuditor interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesauditorquery"},"type spacesAuditorQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesauditors"},"func SpacesAuditors(mods ...qm.QueryMod) spacesAuditorQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesauditorquery-all"},"func (q spacesAuditorQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpacesAuditorSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesauditorquery-count"},"func (q spacesAuditorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesauditorquery-delete"},"func (q spacesAuditorQuery) Delete(o *SpacesAuditor, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesauditorquery-deleteall"},"func (q spacesAuditorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesauditorquery-deleteallslice"},"func (q spacesAuditorQuery) DeleteAllSlice(o SpacesAuditorSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesauditorquery-exists"},"func (q spacesAuditorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesauditorquery-insert"},"func (q spacesAuditorQuery) Insert(o *SpacesAuditor, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesauditorquery-one"},"func (q spacesAuditorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SpacesAuditor, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesauditorquery-reload"},"func (q spacesAuditorQuery) Reload(o *SpacesAuditor, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesauditorquery-reloadall"},"func (q spacesAuditorQuery) ReloadAll(o *SpacesAuditorSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesauditorquery-setspace"},"func (q spacesAuditorQuery) SetSpace(o ",(0,o.kt)("em",{parentName:"a"},"SpacesAuditor, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesauditorquery-setuser"},"func (q spacesAuditorQuery) SetUser(o ",(0,o.kt)("em",{parentName:"a"},"SpacesAuditor, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"User) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesauditorquery-space"},"func (q spacesAuditorQuery) Space(o *SpacesAuditor, mods ...qm.QueryMod) spaceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesauditorquery-update"},"func (q spacesAuditorQuery) Update(o *SpacesAuditor, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesauditorquery-updateall"},"func (q spacesAuditorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesauditorquery-updateallslice"},"func (q spacesAuditorQuery) UpdateAllSlice(o SpacesAuditorSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesauditorquery-upsert"},"func (q spacesAuditorQuery) Upsert(o *SpacesAuditor, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesauditorquery-user"},"func (q spacesAuditorQuery) User(o *SpacesAuditor, mods ...qm.QueryMod) userQuery")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesauditorr"},"type spacesAuditorR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesauditorr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"spacesAuditorR) NewStruct() "),"spacesAuditorR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesdeveloperl"},"type spacesDeveloperL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesdeveloperl-loadspace"},"func (spacesDeveloperL) LoadSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpacesDeveloper interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesdeveloperl-loaduser"},"func (spacesDeveloperL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpacesDeveloper interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesdeveloperquery"},"type spacesDeveloperQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesdevelopers"},"func SpacesDevelopers(mods ...qm.QueryMod) spacesDeveloperQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesdeveloperquery-all"},"func (q spacesDeveloperQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpacesDeveloperSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesdeveloperquery-count"},"func (q spacesDeveloperQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesdeveloperquery-delete"},"func (q spacesDeveloperQuery) Delete(o *SpacesDeveloper, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesdeveloperquery-deleteall"},"func (q spacesDeveloperQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesdeveloperquery-deleteallslice"},"func (q spacesDeveloperQuery) DeleteAllSlice(o SpacesDeveloperSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesdeveloperquery-exists"},"func (q spacesDeveloperQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesdeveloperquery-insert"},"func (q spacesDeveloperQuery) Insert(o *SpacesDeveloper, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesdeveloperquery-one"},"func (q spacesDeveloperQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SpacesDeveloper, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesdeveloperquery-reload"},"func (q spacesDeveloperQuery) Reload(o *SpacesDeveloper, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesdeveloperquery-reloadall"},"func (q spacesDeveloperQuery) ReloadAll(o *SpacesDeveloperSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesdeveloperquery-setspace"},"func (q spacesDeveloperQuery) SetSpace(o ",(0,o.kt)("em",{parentName:"a"},"SpacesDeveloper, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesdeveloperquery-setuser"},"func (q spacesDeveloperQuery) SetUser(o ",(0,o.kt)("em",{parentName:"a"},"SpacesDeveloper, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"User) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesdeveloperquery-space"},"func (q spacesDeveloperQuery) Space(o *SpacesDeveloper, mods ...qm.QueryMod) spaceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesdeveloperquery-update"},"func (q spacesDeveloperQuery) Update(o *SpacesDeveloper, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesdeveloperquery-updateall"},"func (q spacesDeveloperQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesdeveloperquery-updateallslice"},"func (q spacesDeveloperQuery) UpdateAllSlice(o SpacesDeveloperSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesdeveloperquery-upsert"},"func (q spacesDeveloperQuery) Upsert(o *SpacesDeveloper, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesdeveloperquery-user"},"func (q spacesDeveloperQuery) User(o *SpacesDeveloper, mods ...qm.QueryMod) userQuery")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesdeveloperr"},"type spacesDeveloperR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesdeveloperr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"spacesDeveloperR) NewStruct() "),"spacesDeveloperR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesmanagerl"},"type spacesManagerL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesmanagerl-loadspace"},"func (spacesManagerL) LoadSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpacesManager interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesmanagerl-loaduser"},"func (spacesManagerL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpacesManager interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesmanagerquery"},"type spacesManagerQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesmanagers"},"func SpacesManagers(mods ...qm.QueryMod) spacesManagerQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesmanagerquery-all"},"func (q spacesManagerQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpacesManagerSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesmanagerquery-count"},"func (q spacesManagerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesmanagerquery-delete"},"func (q spacesManagerQuery) Delete(o *SpacesManager, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesmanagerquery-deleteall"},"func (q spacesManagerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesmanagerquery-deleteallslice"},"func (q spacesManagerQuery) DeleteAllSlice(o SpacesManagerSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesmanagerquery-exists"},"func (q spacesManagerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesmanagerquery-insert"},"func (q spacesManagerQuery) Insert(o *SpacesManager, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesmanagerquery-one"},"func (q spacesManagerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SpacesManager, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesmanagerquery-reload"},"func (q spacesManagerQuery) Reload(o *SpacesManager, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesmanagerquery-reloadall"},"func (q spacesManagerQuery) ReloadAll(o *SpacesManagerSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesmanagerquery-setspace"},"func (q spacesManagerQuery) SetSpace(o ",(0,o.kt)("em",{parentName:"a"},"SpacesManager, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesmanagerquery-setuser"},"func (q spacesManagerQuery) SetUser(o ",(0,o.kt)("em",{parentName:"a"},"SpacesManager, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"User) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesmanagerquery-space"},"func (q spacesManagerQuery) Space(o *SpacesManager, mods ...qm.QueryMod) spaceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesmanagerquery-update"},"func (q spacesManagerQuery) Update(o *SpacesManager, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesmanagerquery-updateall"},"func (q spacesManagerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesmanagerquery-updateallslice"},"func (q spacesManagerQuery) UpdateAllSlice(o SpacesManagerSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesmanagerquery-upsert"},"func (q spacesManagerQuery) Upsert(o *SpacesManager, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesmanagerquery-user"},"func (q spacesManagerQuery) User(o *SpacesManager, mods ...qm.QueryMod) userQuery")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-spacesmanagerr"},"type spacesManagerR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-spacesmanagerr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"spacesManagerR) NewStruct() "),"spacesManagerR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stackannotationl"},"type stackAnnotationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackannotationl-loadresource"},"func (stackAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStackAnnotation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stackannotationquery"},"type stackAnnotationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackannotations"},"func StackAnnotations(mods ...qm.QueryMod) stackAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackannotationquery-all"},"func (q stackAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (StackAnnotationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackannotationquery-count"},"func (q stackAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackannotationquery-delete"},"func (q stackAnnotationQuery) Delete(o *StackAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackannotationquery-deleteall"},"func (q stackAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackannotationquery-deleteallslice"},"func (q stackAnnotationQuery) DeleteAllSlice(o StackAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackannotationquery-exists"},"func (q stackAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackannotationquery-insert"},"func (q stackAnnotationQuery) Insert(o *StackAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackannotationquery-one"},"func (q stackAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StackAnnotation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackannotationquery-reload"},"func (q stackAnnotationQuery) Reload(o *StackAnnotation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackannotationquery-reloadall"},"func (q stackAnnotationQuery) ReloadAll(o *StackAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackannotationquery-removeresource"},"func (q stackAnnotationQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"StackAnnotation, ctx context.Context, exec boil.ContextExecutor, related "),"Stack) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackannotationquery-resource"},"func (q stackAnnotationQuery) Resource(o *StackAnnotation, mods ...qm.QueryMod) stackQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackannotationquery-setresource"},"func (q stackAnnotationQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"StackAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Stack) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackannotationquery-update"},"func (q stackAnnotationQuery) Update(o *StackAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackannotationquery-updateall"},"func (q stackAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackannotationquery-updateallslice"},"func (q stackAnnotationQuery) UpdateAllSlice(o StackAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackannotationquery-upsert"},"func (q stackAnnotationQuery) Upsert(o *StackAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stackannotationr"},"type stackAnnotationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackannotationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"stackAnnotationR) NewStruct() "),"stackAnnotationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stackl"},"type stackL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackl-loadresourcestackannotations"},"func (stackL) LoadResourceStackAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStack interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackl-loadresourcestacklabels"},"func (stackL) LoadResourceStackLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStack interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stacklabell"},"type stackLabelL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stacklabell-loadresource"},"func (stackLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStackLabel interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stacklabelquery"},"type stackLabelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stacklabels"},"func StackLabels(mods ...qm.QueryMod) stackLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stacklabelquery-all"},"func (q stackLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (StackLabelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stacklabelquery-count"},"func (q stackLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stacklabelquery-delete"},"func (q stackLabelQuery) Delete(o *StackLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stacklabelquery-deleteall"},"func (q stackLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stacklabelquery-deleteallslice"},"func (q stackLabelQuery) DeleteAllSlice(o StackLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stacklabelquery-exists"},"func (q stackLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stacklabelquery-insert"},"func (q stackLabelQuery) Insert(o *StackLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stacklabelquery-one"},"func (q stackLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StackLabel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stacklabelquery-reload"},"func (q stackLabelQuery) Reload(o *StackLabel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stacklabelquery-reloadall"},"func (q stackLabelQuery) ReloadAll(o *StackLabelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stacklabelquery-removeresource"},"func (q stackLabelQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"StackLabel, ctx context.Context, exec boil.ContextExecutor, related "),"Stack) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stacklabelquery-resource"},"func (q stackLabelQuery) Resource(o *StackLabel, mods ...qm.QueryMod) stackQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stacklabelquery-setresource"},"func (q stackLabelQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"StackLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Stack) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stacklabelquery-update"},"func (q stackLabelQuery) Update(o *StackLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stacklabelquery-updateall"},"func (q stackLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stacklabelquery-updateallslice"},"func (q stackLabelQuery) UpdateAllSlice(o StackLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stacklabelquery-upsert"},"func (q stackLabelQuery) Upsert(o *StackLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stacklabelr"},"type stackLabelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stacklabelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"stackLabelR) NewStruct() "),"stackLabelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stackquery"},"type stackQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stacks"},"func Stacks(mods ...qm.QueryMod) stackQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackquery-addresourcestackannotations"},"func (q stackQuery) AddResourceStackAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Stack, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"StackAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackquery-addresourcestacklabels"},"func (q stackQuery) AddResourceStackLabels(o ",(0,o.kt)("em",{parentName:"a"},"Stack, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"StackLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackquery-all"},"func (q stackQuery) All(ctx context.Context, exec boil.ContextExecutor) (StackSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackquery-count"},"func (q stackQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackquery-delete"},"func (q stackQuery) Delete(o *Stack, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackquery-deleteall"},"func (q stackQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackquery-deleteallslice"},"func (q stackQuery) DeleteAllSlice(o StackSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackquery-exists"},"func (q stackQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackquery-insert"},"func (q stackQuery) Insert(o *Stack, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackquery-one"},"func (q stackQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Stack, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackquery-reload"},"func (q stackQuery) Reload(o *Stack, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackquery-reloadall"},"func (q stackQuery) ReloadAll(o *StackSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackquery-removeresourcestackannotations"},"func (q stackQuery) RemoveResourceStackAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Stack, ctx context.Context, exec boil.ContextExecutor, related ..."),"StackAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackquery-removeresourcestacklabels"},"func (q stackQuery) RemoveResourceStackLabels(o ",(0,o.kt)("em",{parentName:"a"},"Stack, ctx context.Context, exec boil.ContextExecutor, related ..."),"StackLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackquery-resourcestackannotations"},"func (q stackQuery) ResourceStackAnnotations(o *Stack, mods ...qm.QueryMod) stackAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackquery-resourcestacklabels"},"func (q stackQuery) ResourceStackLabels(o *Stack, mods ...qm.QueryMod) stackLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackquery-setresourcestackannotations"},"func (q stackQuery) SetResourceStackAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Stack, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"StackAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackquery-setresourcestacklabels"},"func (q stackQuery) SetResourceStackLabels(o ",(0,o.kt)("em",{parentName:"a"},"Stack, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"StackLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackquery-update"},"func (q stackQuery) Update(o *Stack, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackquery-updateall"},"func (q stackQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackquery-updateallslice"},"func (q stackQuery) UpdateAllSlice(o StackSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackquery-upsert"},"func (q stackQuery) Upsert(o *Stack, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stackr"},"type stackR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stackr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"stackR) NewStruct() "),"stackR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stagingsecuritygroupsspacel"},"type stagingSecurityGroupsSpaceL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stagingsecuritygroupsspacel-loadstagingsecuritygroup"},"func (stagingSecurityGroupsSpaceL) LoadStagingSecurityGroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStagingSecurityGroupsSpace interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stagingsecuritygroupsspacel-loadstagingspace"},"func (stagingSecurityGroupsSpaceL) LoadStagingSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStagingSecurityGroupsSpace interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stagingsecuritygroupsspacequery"},"type stagingSecurityGroupsSpaceQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stagingsecuritygroupsspaces"},"func StagingSecurityGroupsSpaces(mods ...qm.QueryMod) stagingSecurityGroupsSpaceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stagingsecuritygroupsspacequery-all"},"func (q stagingSecurityGroupsSpaceQuery) All(ctx context.Context, exec boil.ContextExecutor) (StagingSecurityGroupsSpaceSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stagingsecuritygroupsspacequery-count"},"func (q stagingSecurityGroupsSpaceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stagingsecuritygroupsspacequery-delete"},"func (q stagingSecurityGroupsSpaceQuery) Delete(o *StagingSecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stagingsecuritygroupsspacequery-deleteall"},"func (q stagingSecurityGroupsSpaceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stagingsecuritygroupsspacequery-deleteallslice"},"func (q stagingSecurityGroupsSpaceQuery) DeleteAllSlice(o StagingSecurityGroupsSpaceSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stagingsecuritygroupsspacequery-exists"},"func (q stagingSecurityGroupsSpaceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stagingsecuritygroupsspacequery-insert"},"func (q stagingSecurityGroupsSpaceQuery) Insert(o *StagingSecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stagingsecuritygroupsspacequery-one"},"func (q stagingSecurityGroupsSpaceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StagingSecurityGroupsSpace, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stagingsecuritygroupsspacequery-reload"},"func (q stagingSecurityGroupsSpaceQuery) Reload(o *StagingSecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stagingsecuritygroupsspacequery-reloadall"},"func (q stagingSecurityGroupsSpaceQuery) ReloadAll(o *StagingSecurityGroupsSpaceSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stagingsecuritygroupsspacequery-setstagingsecuritygroup"},"func (q stagingSecurityGroupsSpaceQuery) SetStagingSecurityGroup(o ",(0,o.kt)("em",{parentName:"a"},"StagingSecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"SecurityGroup) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stagingsecuritygroupsspacequery-setstagingspace"},"func (q stagingSecurityGroupsSpaceQuery) SetStagingSpace(o ",(0,o.kt)("em",{parentName:"a"},"StagingSecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stagingsecuritygroupsspacequery-stagingsecuritygroup"},"func (q stagingSecurityGroupsSpaceQuery) StagingSecurityGroup(o *StagingSecurityGroupsSpace, mods ...qm.QueryMod) securityGroupQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stagingsecuritygroupsspacequery-stagingspace"},"func (q stagingSecurityGroupsSpaceQuery) StagingSpace(o *StagingSecurityGroupsSpace, mods ...qm.QueryMod) spaceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stagingsecuritygroupsspacequery-update"},"func (q stagingSecurityGroupsSpaceQuery) Update(o *StagingSecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stagingsecuritygroupsspacequery-updateall"},"func (q stagingSecurityGroupsSpaceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stagingsecuritygroupsspacequery-updateallslice"},"func (q stagingSecurityGroupsSpaceQuery) UpdateAllSlice(o StagingSecurityGroupsSpaceSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stagingsecuritygroupsspacequery-upsert"},"func (q stagingSecurityGroupsSpaceQuery) Upsert(o *StagingSecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-stagingsecuritygroupsspacer"},"type stagingSecurityGroupsSpaceR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-stagingsecuritygroupsspacer-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"stagingSecurityGroupsSpaceR) NewStruct() "),"stagingSecurityGroupsSpaceR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-taskannotationl"},"type taskAnnotationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskannotationl-loadresource"},"func (taskAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTaskAnnotation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-taskannotationquery"},"type taskAnnotationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskannotations"},"func TaskAnnotations(mods ...qm.QueryMod) taskAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskannotationquery-all"},"func (q taskAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (TaskAnnotationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskannotationquery-count"},"func (q taskAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskannotationquery-delete"},"func (q taskAnnotationQuery) Delete(o *TaskAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskannotationquery-deleteall"},"func (q taskAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskannotationquery-deleteallslice"},"func (q taskAnnotationQuery) DeleteAllSlice(o TaskAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskannotationquery-exists"},"func (q taskAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskannotationquery-insert"},"func (q taskAnnotationQuery) Insert(o *TaskAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskannotationquery-one"},"func (q taskAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TaskAnnotation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskannotationquery-reload"},"func (q taskAnnotationQuery) Reload(o *TaskAnnotation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskannotationquery-reloadall"},"func (q taskAnnotationQuery) ReloadAll(o *TaskAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskannotationquery-removeresource"},"func (q taskAnnotationQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"TaskAnnotation, ctx context.Context, exec boil.ContextExecutor, related "),"Task) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskannotationquery-resource"},"func (q taskAnnotationQuery) Resource(o *TaskAnnotation, mods ...qm.QueryMod) taskQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskannotationquery-setresource"},"func (q taskAnnotationQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"TaskAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Task) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskannotationquery-update"},"func (q taskAnnotationQuery) Update(o *TaskAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskannotationquery-updateall"},"func (q taskAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskannotationquery-updateallslice"},"func (q taskAnnotationQuery) UpdateAllSlice(o TaskAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskannotationquery-upsert"},"func (q taskAnnotationQuery) Upsert(o *TaskAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-taskannotationr"},"type taskAnnotationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskannotationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"taskAnnotationR) NewStruct() "),"taskAnnotationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-taskl"},"type taskL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskl-loadapp"},"func (taskL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTask interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskl-loadresourcetaskannotations"},"func (taskL) LoadResourceTaskAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTask interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskl-loadresourcetasklabels"},"func (taskL) LoadResourceTaskLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTask interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-tasklabell"},"type taskLabelL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-tasklabell-loadresource"},"func (taskLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTaskLabel interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-tasklabelquery"},"type taskLabelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-tasklabels"},"func TaskLabels(mods ...qm.QueryMod) taskLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-tasklabelquery-all"},"func (q taskLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (TaskLabelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-tasklabelquery-count"},"func (q taskLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-tasklabelquery-delete"},"func (q taskLabelQuery) Delete(o *TaskLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-tasklabelquery-deleteall"},"func (q taskLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-tasklabelquery-deleteallslice"},"func (q taskLabelQuery) DeleteAllSlice(o TaskLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-tasklabelquery-exists"},"func (q taskLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-tasklabelquery-insert"},"func (q taskLabelQuery) Insert(o *TaskLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-tasklabelquery-one"},"func (q taskLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TaskLabel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-tasklabelquery-reload"},"func (q taskLabelQuery) Reload(o *TaskLabel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-tasklabelquery-reloadall"},"func (q taskLabelQuery) ReloadAll(o *TaskLabelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-tasklabelquery-removeresource"},"func (q taskLabelQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"TaskLabel, ctx context.Context, exec boil.ContextExecutor, related "),"Task) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-tasklabelquery-resource"},"func (q taskLabelQuery) Resource(o *TaskLabel, mods ...qm.QueryMod) taskQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-tasklabelquery-setresource"},"func (q taskLabelQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"TaskLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Task) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-tasklabelquery-update"},"func (q taskLabelQuery) Update(o *TaskLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-tasklabelquery-updateall"},"func (q taskLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-tasklabelquery-updateallslice"},"func (q taskLabelQuery) UpdateAllSlice(o TaskLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-tasklabelquery-upsert"},"func (q taskLabelQuery) Upsert(o *TaskLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-tasklabelr"},"type taskLabelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-tasklabelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"taskLabelR) NewStruct() "),"taskLabelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-taskquery"},"type taskQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-tasks"},"func Tasks(mods ...qm.QueryMod) taskQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskquery-addresourcetaskannotations"},"func (q taskQuery) AddResourceTaskAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Task, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"TaskAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskquery-addresourcetasklabels"},"func (q taskQuery) AddResourceTaskLabels(o ",(0,o.kt)("em",{parentName:"a"},"Task, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"TaskLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskquery-all"},"func (q taskQuery) All(ctx context.Context, exec boil.ContextExecutor) (TaskSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskquery-app"},"func (q taskQuery) App(o *Task, mods ...qm.QueryMod) appQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskquery-count"},"func (q taskQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskquery-delete"},"func (q taskQuery) Delete(o *Task, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskquery-deleteall"},"func (q taskQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskquery-deleteallslice"},"func (q taskQuery) DeleteAllSlice(o TaskSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskquery-exists"},"func (q taskQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskquery-insert"},"func (q taskQuery) Insert(o *Task, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskquery-one"},"func (q taskQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Task, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskquery-reload"},"func (q taskQuery) Reload(o *Task, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskquery-reloadall"},"func (q taskQuery) ReloadAll(o *TaskSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskquery-removeresourcetaskannotations"},"func (q taskQuery) RemoveResourceTaskAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Task, ctx context.Context, exec boil.ContextExecutor, related ..."),"TaskAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskquery-removeresourcetasklabels"},"func (q taskQuery) RemoveResourceTaskLabels(o ",(0,o.kt)("em",{parentName:"a"},"Task, ctx context.Context, exec boil.ContextExecutor, related ..."),"TaskLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskquery-resourcetaskannotations"},"func (q taskQuery) ResourceTaskAnnotations(o *Task, mods ...qm.QueryMod) taskAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskquery-resourcetasklabels"},"func (q taskQuery) ResourceTaskLabels(o *Task, mods ...qm.QueryMod) taskLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskquery-setapp"},"func (q taskQuery) SetApp(o ",(0,o.kt)("em",{parentName:"a"},"Task, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"App) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskquery-setresourcetaskannotations"},"func (q taskQuery) SetResourceTaskAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"Task, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"TaskAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskquery-setresourcetasklabels"},"func (q taskQuery) SetResourceTaskLabels(o ",(0,o.kt)("em",{parentName:"a"},"Task, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"TaskLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskquery-update"},"func (q taskQuery) Update(o *Task, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskquery-updateall"},"func (q taskQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskquery-updateallslice"},"func (q taskQuery) UpdateAllSlice(o TaskSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskquery-upsert"},"func (q taskQuery) Upsert(o *Task, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-taskr"},"type taskR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-taskr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"taskR) NewStruct() "),"taskR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-updatecache"},"type updateCache")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userannotationl"},"type userAnnotationL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userannotationl-loadresource"},"func (userAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserAnnotation interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userannotationquery"},"type userAnnotationQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userannotations"},"func UserAnnotations(mods ...qm.QueryMod) userAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userannotationquery-all"},"func (q userAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserAnnotationSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userannotationquery-count"},"func (q userAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userannotationquery-delete"},"func (q userAnnotationQuery) Delete(o *UserAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userannotationquery-deleteall"},"func (q userAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userannotationquery-deleteallslice"},"func (q userAnnotationQuery) DeleteAllSlice(o UserAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userannotationquery-exists"},"func (q userAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userannotationquery-insert"},"func (q userAnnotationQuery) Insert(o *UserAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userannotationquery-one"},"func (q userAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserAnnotation, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userannotationquery-reload"},"func (q userAnnotationQuery) Reload(o *UserAnnotation, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userannotationquery-reloadall"},"func (q userAnnotationQuery) ReloadAll(o *UserAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userannotationquery-removeresource"},"func (q userAnnotationQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"UserAnnotation, ctx context.Context, exec boil.ContextExecutor, related "),"User) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userannotationquery-resource"},"func (q userAnnotationQuery) Resource(o *UserAnnotation, mods ...qm.QueryMod) userQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userannotationquery-setresource"},"func (q userAnnotationQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"UserAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"User) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userannotationquery-update"},"func (q userAnnotationQuery) Update(o *UserAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userannotationquery-updateall"},"func (q userAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userannotationquery-updateallslice"},"func (q userAnnotationQuery) UpdateAllSlice(o UserAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userannotationquery-upsert"},"func (q userAnnotationQuery) Upsert(o *UserAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userannotationr"},"type userAnnotationR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userannotationr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"userAnnotationR) NewStruct() "),"userAnnotationR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userl"},"type userL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userl-loaddefaultspace"},"func (userL) LoadDefaultSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userl-loadorganizationsauditors"},"func (userL) LoadOrganizationsAuditors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userl-loadorganizationsbillingmanagers"},"func (userL) LoadOrganizationsBillingManagers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userl-loadorganizationsmanagers"},"func (userL) LoadOrganizationsManagers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userl-loadorganizationsusers"},"func (userL) LoadOrganizationsUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userl-loadresourceuserannotations"},"func (userL) LoadResourceUserAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userl-loadresourceuserlabels"},"func (userL) LoadResourceUserLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userl-loadspacesapplicationsupporters"},"func (userL) LoadSpacesApplicationSupporters(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userl-loadspacesauditors"},"func (userL) LoadSpacesAuditors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userl-loadspacesdevelopers"},"func (userL) LoadSpacesDevelopers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userl-loadspacesmanagers"},"func (userL) LoadSpacesManagers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userlabell"},"type userLabelL"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userlabell-loadresource"},"func (userLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserLabel interface{}, mods queries.Applicator) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userlabelquery"},"type userLabelQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userlabels"},"func UserLabels(mods ...qm.QueryMod) userLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userlabelquery-all"},"func (q userLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserLabelSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userlabelquery-count"},"func (q userLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userlabelquery-delete"},"func (q userLabelQuery) Delete(o *UserLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userlabelquery-deleteall"},"func (q userLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userlabelquery-deleteallslice"},"func (q userLabelQuery) DeleteAllSlice(o UserLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userlabelquery-exists"},"func (q userLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userlabelquery-insert"},"func (q userLabelQuery) Insert(o *UserLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userlabelquery-one"},"func (q userLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserLabel, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userlabelquery-reload"},"func (q userLabelQuery) Reload(o *UserLabel, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userlabelquery-reloadall"},"func (q userLabelQuery) ReloadAll(o *UserLabelSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userlabelquery-removeresource"},"func (q userLabelQuery) RemoveResource(o ",(0,o.kt)("em",{parentName:"a"},"UserLabel, ctx context.Context, exec boil.ContextExecutor, related "),"User) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userlabelquery-resource"},"func (q userLabelQuery) Resource(o *UserLabel, mods ...qm.QueryMod) userQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userlabelquery-setresource"},"func (q userLabelQuery) SetResource(o ",(0,o.kt)("em",{parentName:"a"},"UserLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"User) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userlabelquery-update"},"func (q userLabelQuery) Update(o *UserLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userlabelquery-updateall"},"func (q userLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userlabelquery-updateallslice"},"func (q userLabelQuery) UpdateAllSlice(o UserLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userlabelquery-upsert"},"func (q userLabelQuery) Upsert(o *UserLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userlabelr"},"type userLabelR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userlabelr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"userLabelR) NewStruct() "),"userLabelR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userquery"},"type userQuery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-users"},"func Users(mods ...qm.QueryMod) userQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-addorganizationsauditors"},"func (q userQuery) AddOrganizationsAuditors(o ",(0,o.kt)("em",{parentName:"a"},"User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"OrganizationsAuditor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-addorganizationsbillingmanagers"},"func (q userQuery) AddOrganizationsBillingManagers(o ",(0,o.kt)("em",{parentName:"a"},"User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"OrganizationsBillingManager) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-addorganizationsmanagers"},"func (q userQuery) AddOrganizationsManagers(o ",(0,o.kt)("em",{parentName:"a"},"User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"OrganizationsManager) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-addorganizationsusers"},"func (q userQuery) AddOrganizationsUsers(o ",(0,o.kt)("em",{parentName:"a"},"User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"OrganizationsUser) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-addresourceuserannotations"},"func (q userQuery) AddResourceUserAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"UserAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-addresourceuserlabels"},"func (q userQuery) AddResourceUserLabels(o ",(0,o.kt)("em",{parentName:"a"},"User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"UserLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-addspacesapplicationsupporters"},"func (q userQuery) AddSpacesApplicationSupporters(o ",(0,o.kt)("em",{parentName:"a"},"User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"SpacesApplicationSupporter) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-addspacesauditors"},"func (q userQuery) AddSpacesAuditors(o ",(0,o.kt)("em",{parentName:"a"},"User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"SpacesAuditor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-addspacesdevelopers"},"func (q userQuery) AddSpacesDevelopers(o ",(0,o.kt)("em",{parentName:"a"},"User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"SpacesDeveloper) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-addspacesmanagers"},"func (q userQuery) AddSpacesManagers(o ",(0,o.kt)("em",{parentName:"a"},"User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"SpacesManager) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-all"},"func (q userQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserSlice, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-count"},"func (q userQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-defaultspace"},"func (q userQuery) DefaultSpace(o *User, mods ...qm.QueryMod) spaceQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-delete"},"func (q userQuery) Delete(o *User, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-deleteall"},"func (q userQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-deleteallslice"},"func (q userQuery) DeleteAllSlice(o UserSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-exists"},"func (q userQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-insert"},"func (q userQuery) Insert(o *User, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-one"},"func (q userQuery) One(ctx context.Context, exec boil.ContextExecutor) (*User, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-organizationsauditors"},"func (q userQuery) OrganizationsAuditors(o *User, mods ...qm.QueryMod) organizationsAuditorQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-organizationsbillingmanagers"},"func (q userQuery) OrganizationsBillingManagers(o *User, mods ...qm.QueryMod) organizationsBillingManagerQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-organizationsmanagers"},"func (q userQuery) OrganizationsManagers(o *User, mods ...qm.QueryMod) organizationsManagerQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-organizationsusers"},"func (q userQuery) OrganizationsUsers(o *User, mods ...qm.QueryMod) organizationsUserQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-reload"},"func (q userQuery) Reload(o *User, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-reloadall"},"func (q userQuery) ReloadAll(o *UserSlice, ctx context.Context, exec boil.ContextExecutor) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-removedefaultspace"},"func (q userQuery) RemoveDefaultSpace(o ",(0,o.kt)("em",{parentName:"a"},"User, ctx context.Context, exec boil.ContextExecutor, related "),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-removeresourceuserannotations"},"func (q userQuery) RemoveResourceUserAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"User, ctx context.Context, exec boil.ContextExecutor, related ..."),"UserAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-removeresourceuserlabels"},"func (q userQuery) RemoveResourceUserLabels(o ",(0,o.kt)("em",{parentName:"a"},"User, ctx context.Context, exec boil.ContextExecutor, related ..."),"UserLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-resourceuserannotations"},"func (q userQuery) ResourceUserAnnotations(o *User, mods ...qm.QueryMod) userAnnotationQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-resourceuserlabels"},"func (q userQuery) ResourceUserLabels(o *User, mods ...qm.QueryMod) userLabelQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-setdefaultspace"},"func (q userQuery) SetDefaultSpace(o ",(0,o.kt)("em",{parentName:"a"},"User, ctx context.Context, exec boil.ContextExecutor, insert bool, related "),"Space) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-setresourceuserannotations"},"func (q userQuery) SetResourceUserAnnotations(o ",(0,o.kt)("em",{parentName:"a"},"User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"UserAnnotation) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-setresourceuserlabels"},"func (q userQuery) SetResourceUserLabels(o ",(0,o.kt)("em",{parentName:"a"},"User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ..."),"UserLabel) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-spacesapplicationsupporters"},"func (q userQuery) SpacesApplicationSupporters(o *User, mods ...qm.QueryMod) spacesApplicationSupporterQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-spacesauditors"},"func (q userQuery) SpacesAuditors(o *User, mods ...qm.QueryMod) spacesAuditorQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-spacesdevelopers"},"func (q userQuery) SpacesDevelopers(o *User, mods ...qm.QueryMod) spacesDeveloperQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-spacesmanagers"},"func (q userQuery) SpacesManagers(o *User, mods ...qm.QueryMod) spacesManagerQuery")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-update"},"func (q userQuery) Update(o *User, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-updateall"},"func (q userQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-updateallslice"},"func (q userQuery) UpdateAllSlice(o UserSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userquery-upsert"},"func (q userQuery) Upsert(o *User, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-userr"},"type userR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-userr-newstruct"},"func (",(0,o.kt)("em",{parentName:"a"},"userR) NewStruct() "),"userR")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-wherehelperbool"},"type whereHelperbool"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelperbool-eq"},"func (w whereHelperbool) EQ(x bool) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelperbool-gt"},"func (w whereHelperbool) GT(x bool) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelperbool-gte"},"func (w whereHelperbool) GTE(x bool) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelperbool-lt"},"func (w whereHelperbool) LT(x bool) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelperbool-lte"},"func (w whereHelperbool) LTE(x bool) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelperbool-neq"},"func (w whereHelperbool) NEQ(x bool) qm.QueryMod")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-wherehelperint"},"type whereHelperint"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelperint-eq"},"func (w whereHelperint) EQ(x int) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelperint-gt"},"func (w whereHelperint) GT(x int) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelperint-gte"},"func (w whereHelperint) GTE(x int) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelperint-in"},"func (w whereHelperint) IN(slice []int) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelperint-lt"},"func (w whereHelperint) LT(x int) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelperint-lte"},"func (w whereHelperint) LTE(x int) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelperint-neq"},"func (w whereHelperint) NEQ(x int) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelperint-nin"},"func (w whereHelperint) NIN(slice []int) qm.QueryMod")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-wherehelpernull_bool"},"type whereHelpernull_Bool"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_bool-eq"},"func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_bool-gt"},"func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_bool-gte"},"func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_bool-isnotnull"},"func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_bool-isnull"},"func (w whereHelpernull_Bool) IsNull() qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_bool-lt"},"func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_bool-lte"},"func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_bool-neq"},"func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-wherehelpernull_int"},"type whereHelpernull_Int"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_int-eq"},"func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_int-gt"},"func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_int-gte"},"func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_int-isnotnull"},"func (w whereHelpernull_Int) IsNotNull() qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_int-isnull"},"func (w whereHelpernull_Int) IsNull() qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_int-lt"},"func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_int-lte"},"func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_int-neq"},"func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-wherehelpernull_string"},"type whereHelpernull_String"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_string-eq"},"func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_string-gt"},"func (w whereHelpernull_String) GT(x null.String) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_string-gte"},"func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_string-isnotnull"},"func (w whereHelpernull_String) IsNotNull() qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_string-isnull"},"func (w whereHelpernull_String) IsNull() qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_string-lt"},"func (w whereHelpernull_String) LT(x null.String) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_string-lte"},"func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_string-neq"},"func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-wherehelpernull_time"},"type whereHelpernull_Time"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_time-eq"},"func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_time-gt"},"func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_time-gte"},"func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_time-isnotnull"},"func (w whereHelpernull_Time) IsNotNull() qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_time-isnull"},"func (w whereHelpernull_Time) IsNull() qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_time-lt"},"func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_time-lte"},"func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpernull_time-neq"},"func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-wherehelperstring"},"type whereHelperstring"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelperstring-eq"},"func (w whereHelperstring) EQ(x string) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelperstring-gt"},"func (w whereHelperstring) GT(x string) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelperstring-gte"},"func (w whereHelperstring) GTE(x string) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelperstring-in"},"func (w whereHelperstring) IN(slice []string) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelperstring-lt"},"func (w whereHelperstring) LT(x string) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelperstring-lte"},"func (w whereHelperstring) LTE(x string) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelperstring-neq"},"func (w whereHelperstring) NEQ(x string) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelperstring-nin"},"func (w whereHelperstring) NIN(slice []string) qm.QueryMod")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-wherehelpertime_time"},"type whereHelpertime_Time"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpertime_time-eq"},"func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpertime_time-gt"},"func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpertime_time-gte"},"func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpertime_time-lt"},"func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpertime_time-lte"},"func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-wherehelpertime_time-neq"},"func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod"))))),(0,o.kt)("h2",{id:"variables"},"Variables"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    appAnnotationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    appAnnotationColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    appAnnotationColumnsWithDefault    = []string{"id", "created_at"}\n    appAnnotationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    appAnnotationType                 = reflect.TypeOf(&AppAnnotation{})\n    appAnnotationMapping              = queries.MakeStructMapping(appAnnotationType)\n    appAnnotationPrimaryKeyMapping, _ = queries.BindMapping(appAnnotationType, appAnnotationMapping, appAnnotationPrimaryKeyColumns)\n    appAnnotationInsertCacheMut       sync.RWMutex\n    appAnnotationInsertCache          = make(map[string]insertCache)\n    appAnnotationUpdateCacheMut       sync.RWMutex\n    appAnnotationUpdateCache          = make(map[string]updateCache)\n    appAnnotationUpsertCacheMut       sync.RWMutex\n    appAnnotationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    appEventAllColumns            = []string{"id", "guid", "created_at", "updated_at", "app_id", "instance_guid", "instance_index", "exit_status", "timestamp", "exit_description"}\n    appEventColumnsWithoutDefault = []string{"guid", "updated_at", "app_id", "instance_guid", "instance_index", "exit_status", "timestamp", "exit_description"}\n    appEventColumnsWithDefault    = []string{"id", "created_at"}\n    appEventPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    appEventType                 = reflect.TypeOf(&AppEvent{})\n    appEventMapping              = queries.MakeStructMapping(appEventType)\n    appEventPrimaryKeyMapping, _ = queries.BindMapping(appEventType, appEventMapping, appEventPrimaryKeyColumns)\n    appEventInsertCacheMut       sync.RWMutex\n    appEventInsertCache          = make(map[string]insertCache)\n    appEventUpdateCacheMut       sync.RWMutex\n    appEventUpdateCache          = make(map[string]updateCache)\n    appEventUpsertCacheMut       sync.RWMutex\n    appEventUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    appLabelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    appLabelColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    appLabelColumnsWithDefault    = []string{"id", "created_at"}\n    appLabelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    appLabelType                 = reflect.TypeOf(&AppLabel{})\n    appLabelMapping              = queries.MakeStructMapping(appLabelType)\n    appLabelPrimaryKeyMapping, _ = queries.BindMapping(appLabelType, appLabelMapping, appLabelPrimaryKeyColumns)\n    appLabelInsertCacheMut       sync.RWMutex\n    appLabelInsertCache          = make(map[string]insertCache)\n    appLabelUpdateCacheMut       sync.RWMutex\n    appLabelUpdateCache          = make(map[string]updateCache)\n    appLabelUpsertCacheMut       sync.RWMutex\n    appLabelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    appUsageEventAllColumns            = []string{"id", "guid", "created_at", "instance_count", "memory_in_mb_per_instance", "state", "app_guid", "app_name", "space_guid", "space_name", "org_guid", "buildpack_guid", "buildpack_name", "package_state", "parent_app_name", "parent_app_guid", "process_type", "task_guid", "task_name", "package_guid", "previous_state", "previous_package_state", "previous_memory_in_mb_per_instance", "previous_instance_count"}\n    appUsageEventColumnsWithoutDefault = []string{"guid", "created_at", "instance_count", "memory_in_mb_per_instance", "state", "app_guid", "app_name", "space_guid", "space_name", "org_guid", "buildpack_guid", "buildpack_name", "package_state", "parent_app_name", "parent_app_guid", "process_type", "task_guid", "task_name", "package_guid", "previous_state", "previous_package_state", "previous_memory_in_mb_per_instance", "previous_instance_count"}\n    appUsageEventColumnsWithDefault    = []string{"id"}\n    appUsageEventPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    appUsageEventType                 = reflect.TypeOf(&AppUsageEvent{})\n    appUsageEventMapping              = queries.MakeStructMapping(appUsageEventType)\n    appUsageEventPrimaryKeyMapping, _ = queries.BindMapping(appUsageEventType, appUsageEventMapping, appUsageEventPrimaryKeyColumns)\n    appUsageEventInsertCacheMut       sync.RWMutex\n    appUsageEventInsertCache          = make(map[string]insertCache)\n    appUsageEventUpdateCacheMut       sync.RWMutex\n    appUsageEventUpdateCache          = make(map[string]updateCache)\n    appUsageEventUpsertCacheMut       sync.RWMutex\n    appUsageEventUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    appAllColumns            = []string{"id", "guid", "created_at", "updated_at", "space_guid", "name", "droplet_guid", "desired_state", "encrypted_environment_variables", "salt", "max_task_sequence_id", "buildpack_cache_sha256_checksum", "enable_ssh", "encryption_key_label", "encryption_iterations", "revisions_enabled"}\n    appColumnsWithoutDefault = []string{"guid", "updated_at", "space_guid", "name", "droplet_guid", "encrypted_environment_variables", "salt", "buildpack_cache_sha256_checksum", "enable_ssh", "encryption_key_label"}\n    appColumnsWithDefault    = []string{"id", "created_at", "desired_state", "max_task_sequence_id", "encryption_iterations", "revisions_enabled"}\n    appPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    appType                 = reflect.TypeOf(&App{})\n    appMapping              = queries.MakeStructMapping(appType)\n    appPrimaryKeyMapping, _ = queries.BindMapping(appType, appMapping, appPrimaryKeyColumns)\n    appInsertCacheMut       sync.RWMutex\n    appInsertCache          = make(map[string]insertCache)\n    appUpdateCacheMut       sync.RWMutex\n    appUpdateCache          = make(map[string]updateCache)\n    appUpsertCacheMut       sync.RWMutex\n    appUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    buildAnnotationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    buildAnnotationColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    buildAnnotationColumnsWithDefault    = []string{"id", "created_at"}\n    buildAnnotationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    buildAnnotationType                 = reflect.TypeOf(&BuildAnnotation{})\n    buildAnnotationMapping              = queries.MakeStructMapping(buildAnnotationType)\n    buildAnnotationPrimaryKeyMapping, _ = queries.BindMapping(buildAnnotationType, buildAnnotationMapping, buildAnnotationPrimaryKeyColumns)\n    buildAnnotationInsertCacheMut       sync.RWMutex\n    buildAnnotationInsertCache          = make(map[string]insertCache)\n    buildAnnotationUpdateCacheMut       sync.RWMutex\n    buildAnnotationUpdateCache          = make(map[string]updateCache)\n    buildAnnotationUpsertCacheMut       sync.RWMutex\n    buildAnnotationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    buildLabelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    buildLabelColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    buildLabelColumnsWithDefault    = []string{"id", "created_at"}\n    buildLabelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    buildLabelType                 = reflect.TypeOf(&BuildLabel{})\n    buildLabelMapping              = queries.MakeStructMapping(buildLabelType)\n    buildLabelPrimaryKeyMapping, _ = queries.BindMapping(buildLabelType, buildLabelMapping, buildLabelPrimaryKeyColumns)\n    buildLabelInsertCacheMut       sync.RWMutex\n    buildLabelInsertCache          = make(map[string]insertCache)\n    buildLabelUpdateCacheMut       sync.RWMutex\n    buildLabelUpdateCache          = make(map[string]updateCache)\n    buildLabelUpsertCacheMut       sync.RWMutex\n    buildLabelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    buildpackAnnotationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    buildpackAnnotationColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    buildpackAnnotationColumnsWithDefault    = []string{"id", "created_at"}\n    buildpackAnnotationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    buildpackAnnotationType                 = reflect.TypeOf(&BuildpackAnnotation{})\n    buildpackAnnotationMapping              = queries.MakeStructMapping(buildpackAnnotationType)\n    buildpackAnnotationPrimaryKeyMapping, _ = queries.BindMapping(buildpackAnnotationType, buildpackAnnotationMapping, buildpackAnnotationPrimaryKeyColumns)\n    buildpackAnnotationInsertCacheMut       sync.RWMutex\n    buildpackAnnotationInsertCache          = make(map[string]insertCache)\n    buildpackAnnotationUpdateCacheMut       sync.RWMutex\n    buildpackAnnotationUpdateCache          = make(map[string]updateCache)\n    buildpackAnnotationUpsertCacheMut       sync.RWMutex\n    buildpackAnnotationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    buildpackLabelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    buildpackLabelColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    buildpackLabelColumnsWithDefault    = []string{"id", "created_at"}\n    buildpackLabelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    buildpackLabelType                 = reflect.TypeOf(&BuildpackLabel{})\n    buildpackLabelMapping              = queries.MakeStructMapping(buildpackLabelType)\n    buildpackLabelPrimaryKeyMapping, _ = queries.BindMapping(buildpackLabelType, buildpackLabelMapping, buildpackLabelPrimaryKeyColumns)\n    buildpackLabelInsertCacheMut       sync.RWMutex\n    buildpackLabelInsertCache          = make(map[string]insertCache)\n    buildpackLabelUpdateCacheMut       sync.RWMutex\n    buildpackLabelUpdateCache          = make(map[string]updateCache)\n    buildpackLabelUpsertCacheMut       sync.RWMutex\n    buildpackLabelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    buildpackLifecycleBuildpackAllColumns            = []string{"id", "guid", "created_at", "updated_at", "admin_buildpack_name", "encrypted_buildpack_url", "encrypted_buildpack_url_salt", "buildpack_lifecycle_data_guid", "encryption_key_label", "version", "buildpack_name", "encryption_iterations"}\n    buildpackLifecycleBuildpackColumnsWithoutDefault = []string{"guid", "updated_at", "admin_buildpack_name", "encrypted_buildpack_url", "encrypted_buildpack_url_salt", "buildpack_lifecycle_data_guid", "encryption_key_label", "version", "buildpack_name"}\n    buildpackLifecycleBuildpackColumnsWithDefault    = []string{"id", "created_at", "encryption_iterations"}\n    buildpackLifecycleBuildpackPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    buildpackLifecycleBuildpackType                 = reflect.TypeOf(&BuildpackLifecycleBuildpack{})\n    buildpackLifecycleBuildpackMapping              = queries.MakeStructMapping(buildpackLifecycleBuildpackType)\n    buildpackLifecycleBuildpackPrimaryKeyMapping, _ = queries.BindMapping(buildpackLifecycleBuildpackType, buildpackLifecycleBuildpackMapping, buildpackLifecycleBuildpackPrimaryKeyColumns)\n    buildpackLifecycleBuildpackInsertCacheMut       sync.RWMutex\n    buildpackLifecycleBuildpackInsertCache          = make(map[string]insertCache)\n    buildpackLifecycleBuildpackUpdateCacheMut       sync.RWMutex\n    buildpackLifecycleBuildpackUpdateCache          = make(map[string]updateCache)\n    buildpackLifecycleBuildpackUpsertCacheMut       sync.RWMutex\n    buildpackLifecycleBuildpackUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    buildpackLifecycleDatumAllColumns            = []string{"id", "guid", "created_at", "updated_at", "app_guid", "droplet_guid", "stack", "encrypted_buildpack_url", "encrypted_buildpack_url_salt", "admin_buildpack_name", "build_guid", "encryption_key_label", "encryption_iterations"}\n    buildpackLifecycleDatumColumnsWithoutDefault = []string{"guid", "updated_at", "app_guid", "droplet_guid", "stack", "encrypted_buildpack_url", "encrypted_buildpack_url_salt", "admin_buildpack_name", "build_guid", "encryption_key_label"}\n    buildpackLifecycleDatumColumnsWithDefault    = []string{"id", "created_at", "encryption_iterations"}\n    buildpackLifecycleDatumPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    buildpackLifecycleDatumType                 = reflect.TypeOf(&BuildpackLifecycleDatum{})\n    buildpackLifecycleDatumMapping              = queries.MakeStructMapping(buildpackLifecycleDatumType)\n    buildpackLifecycleDatumPrimaryKeyMapping, _ = queries.BindMapping(buildpackLifecycleDatumType, buildpackLifecycleDatumMapping, buildpackLifecycleDatumPrimaryKeyColumns)\n    buildpackLifecycleDatumInsertCacheMut       sync.RWMutex\n    buildpackLifecycleDatumInsertCache          = make(map[string]insertCache)\n    buildpackLifecycleDatumUpdateCacheMut       sync.RWMutex\n    buildpackLifecycleDatumUpdateCache          = make(map[string]updateCache)\n    buildpackLifecycleDatumUpsertCacheMut       sync.RWMutex\n    buildpackLifecycleDatumUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    buildpackAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "key", "position", "enabled", "locked", "filename", "sha256_checksum", "stack"}\n    buildpackColumnsWithoutDefault = []string{"guid", "updated_at", "name", "key", "position", "filename", "sha256_checksum", "stack"}\n    buildpackColumnsWithDefault    = []string{"id", "created_at", "enabled", "locked"}\n    buildpackPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    buildpackType                 = reflect.TypeOf(&Buildpack{})\n    buildpackMapping              = queries.MakeStructMapping(buildpackType)\n    buildpackPrimaryKeyMapping, _ = queries.BindMapping(buildpackType, buildpackMapping, buildpackPrimaryKeyColumns)\n    buildpackInsertCacheMut       sync.RWMutex\n    buildpackInsertCache          = make(map[string]insertCache)\n    buildpackUpdateCacheMut       sync.RWMutex\n    buildpackUpdateCache          = make(map[string]updateCache)\n    buildpackUpsertCacheMut       sync.RWMutex\n    buildpackUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    buildAllColumns            = []string{"id", "guid", "created_at", "updated_at", "state", "package_guid", "error_description", "app_guid", "error_id", "created_by_user_guid", "created_by_user_name", "created_by_user_email", "staging_memory_in_mb", "staging_disk_in_mb"}\n    buildColumnsWithoutDefault = []string{"guid", "updated_at", "state", "package_guid", "error_description", "app_guid", "error_id", "created_by_user_guid", "created_by_user_name", "created_by_user_email", "staging_memory_in_mb", "staging_disk_in_mb"}\n    buildColumnsWithDefault    = []string{"id", "created_at"}\n    buildPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    buildType                 = reflect.TypeOf(&Build{})\n    buildMapping              = queries.MakeStructMapping(buildType)\n    buildPrimaryKeyMapping, _ = queries.BindMapping(buildType, buildMapping, buildPrimaryKeyColumns)\n    buildInsertCacheMut       sync.RWMutex\n    buildInsertCache          = make(map[string]insertCache)\n    buildUpdateCacheMut       sync.RWMutex\n    buildUpdateCache          = make(map[string]updateCache)\n    buildUpsertCacheMut       sync.RWMutex\n    buildUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    clockJobAllColumns            = []string{"id", "name", "last_started_at", "last_completed_at"}\n    clockJobColumnsWithoutDefault = []string{"name", "last_started_at", "last_completed_at"}\n    clockJobColumnsWithDefault    = []string{"id"}\n    clockJobPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    clockJobType                 = reflect.TypeOf(&ClockJob{})\n    clockJobMapping              = queries.MakeStructMapping(clockJobType)\n    clockJobPrimaryKeyMapping, _ = queries.BindMapping(clockJobType, clockJobMapping, clockJobPrimaryKeyColumns)\n    clockJobInsertCacheMut       sync.RWMutex\n    clockJobInsertCache          = make(map[string]insertCache)\n    clockJobUpdateCacheMut       sync.RWMutex\n    clockJobUpdateCache          = make(map[string]updateCache)\n    clockJobUpsertCacheMut       sync.RWMutex\n    clockJobUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    delayedJobAllColumns            = []string{"id", "guid", "created_at", "updated_at", "priority", "attempts", "handler", "last_error", "run_at", "locked_at", "failed_at", "locked_by", "queue", "cf_api_error"}\n    delayedJobColumnsWithoutDefault = []string{"guid", "updated_at", "handler", "last_error", "run_at", "locked_at", "failed_at", "locked_by", "queue", "cf_api_error"}\n    delayedJobColumnsWithDefault    = []string{"id", "created_at", "priority", "attempts"}\n    delayedJobPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    delayedJobType                 = reflect.TypeOf(&DelayedJob{})\n    delayedJobMapping              = queries.MakeStructMapping(delayedJobType)\n    delayedJobPrimaryKeyMapping, _ = queries.BindMapping(delayedJobType, delayedJobMapping, delayedJobPrimaryKeyColumns)\n    delayedJobInsertCacheMut       sync.RWMutex\n    delayedJobInsertCache          = make(map[string]insertCache)\n    delayedJobUpdateCacheMut       sync.RWMutex\n    delayedJobUpdateCache          = make(map[string]updateCache)\n    delayedJobUpsertCacheMut       sync.RWMutex\n    delayedJobUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    deploymentAnnotationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    deploymentAnnotationColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    deploymentAnnotationColumnsWithDefault    = []string{"id", "created_at"}\n    deploymentAnnotationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    deploymentAnnotationType                 = reflect.TypeOf(&DeploymentAnnotation{})\n    deploymentAnnotationMapping              = queries.MakeStructMapping(deploymentAnnotationType)\n    deploymentAnnotationPrimaryKeyMapping, _ = queries.BindMapping(deploymentAnnotationType, deploymentAnnotationMapping, deploymentAnnotationPrimaryKeyColumns)\n    deploymentAnnotationInsertCacheMut       sync.RWMutex\n    deploymentAnnotationInsertCache          = make(map[string]insertCache)\n    deploymentAnnotationUpdateCacheMut       sync.RWMutex\n    deploymentAnnotationUpdateCache          = make(map[string]updateCache)\n    deploymentAnnotationUpsertCacheMut       sync.RWMutex\n    deploymentAnnotationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    deploymentLabelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    deploymentLabelColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    deploymentLabelColumnsWithDefault    = []string{"id", "created_at"}\n    deploymentLabelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    deploymentLabelType                 = reflect.TypeOf(&DeploymentLabel{})\n    deploymentLabelMapping              = queries.MakeStructMapping(deploymentLabelType)\n    deploymentLabelPrimaryKeyMapping, _ = queries.BindMapping(deploymentLabelType, deploymentLabelMapping, deploymentLabelPrimaryKeyColumns)\n    deploymentLabelInsertCacheMut       sync.RWMutex\n    deploymentLabelInsertCache          = make(map[string]insertCache)\n    deploymentLabelUpdateCacheMut       sync.RWMutex\n    deploymentLabelUpdateCache          = make(map[string]updateCache)\n    deploymentLabelUpsertCacheMut       sync.RWMutex\n    deploymentLabelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    deploymentProcessAllColumns            = []string{"id", "guid", "created_at", "updated_at", "process_guid", "process_type", "deployment_guid"}\n    deploymentProcessColumnsWithoutDefault = []string{"guid", "updated_at", "process_guid", "process_type", "deployment_guid"}\n    deploymentProcessColumnsWithDefault    = []string{"id", "created_at"}\n    deploymentProcessPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    deploymentProcessType                 = reflect.TypeOf(&DeploymentProcess{})\n    deploymentProcessMapping              = queries.MakeStructMapping(deploymentProcessType)\n    deploymentProcessPrimaryKeyMapping, _ = queries.BindMapping(deploymentProcessType, deploymentProcessMapping, deploymentProcessPrimaryKeyColumns)\n    deploymentProcessInsertCacheMut       sync.RWMutex\n    deploymentProcessInsertCache          = make(map[string]insertCache)\n    deploymentProcessUpdateCacheMut       sync.RWMutex\n    deploymentProcessUpdateCache          = make(map[string]updateCache)\n    deploymentProcessUpsertCacheMut       sync.RWMutex\n    deploymentProcessUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    deploymentAllColumns            = []string{"id", "guid", "created_at", "updated_at", "state", "app_guid", "droplet_guid", "deploying_web_process_guid", "previous_droplet_guid", "original_web_process_instance_count", "revision_guid", "revision_version", "last_healthy_at", "status_value", "status_reason", "strategy"}\n    deploymentColumnsWithoutDefault = []string{"guid", "updated_at", "state", "app_guid", "droplet_guid", "deploying_web_process_guid", "previous_droplet_guid", "original_web_process_instance_count", "revision_guid", "revision_version", "status_value", "status_reason"}\n    deploymentColumnsWithDefault    = []string{"id", "created_at", "last_healthy_at", "strategy"}\n    deploymentPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    deploymentType                 = reflect.TypeOf(&Deployment{})\n    deploymentMapping              = queries.MakeStructMapping(deploymentType)\n    deploymentPrimaryKeyMapping, _ = queries.BindMapping(deploymentType, deploymentMapping, deploymentPrimaryKeyColumns)\n    deploymentInsertCacheMut       sync.RWMutex\n    deploymentInsertCache          = make(map[string]insertCache)\n    deploymentUpdateCacheMut       sync.RWMutex\n    deploymentUpdateCache          = make(map[string]updateCache)\n    deploymentUpsertCacheMut       sync.RWMutex\n    deploymentUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    domainAnnotationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    domainAnnotationColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    domainAnnotationColumnsWithDefault    = []string{"id", "created_at"}\n    domainAnnotationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    domainAnnotationType                 = reflect.TypeOf(&DomainAnnotation{})\n    domainAnnotationMapping              = queries.MakeStructMapping(domainAnnotationType)\n    domainAnnotationPrimaryKeyMapping, _ = queries.BindMapping(domainAnnotationType, domainAnnotationMapping, domainAnnotationPrimaryKeyColumns)\n    domainAnnotationInsertCacheMut       sync.RWMutex\n    domainAnnotationInsertCache          = make(map[string]insertCache)\n    domainAnnotationUpdateCacheMut       sync.RWMutex\n    domainAnnotationUpdateCache          = make(map[string]updateCache)\n    domainAnnotationUpsertCacheMut       sync.RWMutex\n    domainAnnotationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    domainLabelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    domainLabelColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    domainLabelColumnsWithDefault    = []string{"id", "created_at"}\n    domainLabelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    domainLabelType                 = reflect.TypeOf(&DomainLabel{})\n    domainLabelMapping              = queries.MakeStructMapping(domainLabelType)\n    domainLabelPrimaryKeyMapping, _ = queries.BindMapping(domainLabelType, domainLabelMapping, domainLabelPrimaryKeyColumns)\n    domainLabelInsertCacheMut       sync.RWMutex\n    domainLabelInsertCache          = make(map[string]insertCache)\n    domainLabelUpdateCacheMut       sync.RWMutex\n    domainLabelUpdateCache          = make(map[string]updateCache)\n    domainLabelUpsertCacheMut       sync.RWMutex\n    domainLabelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    domainAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "wildcard", "owning_organization_id", "router_group_guid", "internal"}\n    domainColumnsWithoutDefault = []string{"guid", "updated_at", "name", "owning_organization_id", "router_group_guid"}\n    domainColumnsWithDefault    = []string{"id", "created_at", "wildcard", "internal"}\n    domainPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    domainType                 = reflect.TypeOf(&Domain{})\n    domainMapping              = queries.MakeStructMapping(domainType)\n    domainPrimaryKeyMapping, _ = queries.BindMapping(domainType, domainMapping, domainPrimaryKeyColumns)\n    domainInsertCacheMut       sync.RWMutex\n    domainInsertCache          = make(map[string]insertCache)\n    domainUpdateCacheMut       sync.RWMutex\n    domainUpdateCache          = make(map[string]updateCache)\n    domainUpsertCacheMut       sync.RWMutex\n    domainUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    dropletAnnotationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    dropletAnnotationColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    dropletAnnotationColumnsWithDefault    = []string{"id", "created_at"}\n    dropletAnnotationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    dropletAnnotationType                 = reflect.TypeOf(&DropletAnnotation{})\n    dropletAnnotationMapping              = queries.MakeStructMapping(dropletAnnotationType)\n    dropletAnnotationPrimaryKeyMapping, _ = queries.BindMapping(dropletAnnotationType, dropletAnnotationMapping, dropletAnnotationPrimaryKeyColumns)\n    dropletAnnotationInsertCacheMut       sync.RWMutex\n    dropletAnnotationInsertCache          = make(map[string]insertCache)\n    dropletAnnotationUpdateCacheMut       sync.RWMutex\n    dropletAnnotationUpdateCache          = make(map[string]updateCache)\n    dropletAnnotationUpsertCacheMut       sync.RWMutex\n    dropletAnnotationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    dropletLabelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    dropletLabelColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    dropletLabelColumnsWithDefault    = []string{"id", "created_at"}\n    dropletLabelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    dropletLabelType                 = reflect.TypeOf(&DropletLabel{})\n    dropletLabelMapping              = queries.MakeStructMapping(dropletLabelType)\n    dropletLabelPrimaryKeyMapping, _ = queries.BindMapping(dropletLabelType, dropletLabelMapping, dropletLabelPrimaryKeyColumns)\n    dropletLabelInsertCacheMut       sync.RWMutex\n    dropletLabelInsertCache          = make(map[string]insertCache)\n    dropletLabelUpdateCacheMut       sync.RWMutex\n    dropletLabelUpdateCache          = make(map[string]updateCache)\n    dropletLabelUpsertCacheMut       sync.RWMutex\n    dropletLabelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    dropletAllColumns            = []string{"id", "guid", "created_at", "updated_at", "droplet_hash", "execution_metadata", "state", "process_types", "error_id", "error_description", "encrypted_environment_variables", "salt", "staging_memory_in_mb", "staging_disk_in_mb", "buildpack_receipt_buildpack", "buildpack_receipt_buildpack_guid", "buildpack_receipt_detect_output", "docker_receipt_image", "package_guid", "app_guid", "sha256_checksum", "build_guid", "docker_receipt_username", "docker_receipt_password_salt", "encrypted_docker_receipt_password", "encryption_key_label", "encryption_iterations", "sidecars"}\n    dropletColumnsWithoutDefault = []string{"guid", "updated_at", "droplet_hash", "execution_metadata", "state", "process_types", "error_id", "error_description", "encrypted_environment_variables", "salt", "staging_memory_in_mb", "staging_disk_in_mb", "buildpack_receipt_buildpack", "buildpack_receipt_buildpack_guid", "buildpack_receipt_detect_output", "docker_receipt_image", "package_guid", "app_guid", "sha256_checksum", "build_guid", "docker_receipt_username", "docker_receipt_password_salt", "encrypted_docker_receipt_password", "encryption_key_label", "sidecars"}\n    dropletColumnsWithDefault    = []string{"id", "created_at", "encryption_iterations"}\n    dropletPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    dropletType                 = reflect.TypeOf(&Droplet{})\n    dropletMapping              = queries.MakeStructMapping(dropletType)\n    dropletPrimaryKeyMapping, _ = queries.BindMapping(dropletType, dropletMapping, dropletPrimaryKeyColumns)\n    dropletInsertCacheMut       sync.RWMutex\n    dropletInsertCache          = make(map[string]insertCache)\n    dropletUpdateCacheMut       sync.RWMutex\n    dropletUpdateCache          = make(map[string]updateCache)\n    dropletUpsertCacheMut       sync.RWMutex\n    dropletUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    encryptionKeySentinelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "expected_value", "encrypted_value", "encryption_key_label", "salt", "encryption_iterations"}\n    encryptionKeySentinelColumnsWithoutDefault = []string{"guid", "updated_at", "expected_value", "encrypted_value", "encryption_key_label", "salt"}\n    encryptionKeySentinelColumnsWithDefault    = []string{"id", "created_at", "encryption_iterations"}\n    encryptionKeySentinelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    encryptionKeySentinelType                 = reflect.TypeOf(&EncryptionKeySentinel{})\n    encryptionKeySentinelMapping              = queries.MakeStructMapping(encryptionKeySentinelType)\n    encryptionKeySentinelPrimaryKeyMapping, _ = queries.BindMapping(encryptionKeySentinelType, encryptionKeySentinelMapping, encryptionKeySentinelPrimaryKeyColumns)\n    encryptionKeySentinelInsertCacheMut       sync.RWMutex\n    encryptionKeySentinelInsertCache          = make(map[string]insertCache)\n    encryptionKeySentinelUpdateCacheMut       sync.RWMutex\n    encryptionKeySentinelUpdateCache          = make(map[string]updateCache)\n    encryptionKeySentinelUpsertCacheMut       sync.RWMutex\n    encryptionKeySentinelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    envGroupAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "environment_json", "salt", "encryption_key_label", "encryption_iterations"}\n    envGroupColumnsWithoutDefault = []string{"guid", "updated_at", "name", "environment_json", "salt", "encryption_key_label"}\n    envGroupColumnsWithDefault    = []string{"id", "created_at", "encryption_iterations"}\n    envGroupPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    envGroupType                 = reflect.TypeOf(&EnvGroup{})\n    envGroupMapping              = queries.MakeStructMapping(envGroupType)\n    envGroupPrimaryKeyMapping, _ = queries.BindMapping(envGroupType, envGroupMapping, envGroupPrimaryKeyColumns)\n    envGroupInsertCacheMut       sync.RWMutex\n    envGroupInsertCache          = make(map[string]insertCache)\n    envGroupUpdateCacheMut       sync.RWMutex\n    envGroupUpdateCache          = make(map[string]updateCache)\n    envGroupUpsertCacheMut       sync.RWMutex\n    envGroupUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    eventAllColumns            = []string{"id", "guid", "created_at", "updated_at", "timestamp", "type", "actor", "actor_type", "actee", "actee_type", "metadata", "organization_guid", "space_guid", "actor_name", "actee_name", "actor_username"}\n    eventColumnsWithoutDefault = []string{"guid", "updated_at", "timestamp", "type", "actor", "actor_type", "actee", "actee_type", "metadata", "actor_name", "actee_name", "actor_username"}\n    eventColumnsWithDefault    = []string{"id", "created_at", "organization_guid", "space_guid"}\n    eventPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    eventType                 = reflect.TypeOf(&Event{})\n    eventMapping              = queries.MakeStructMapping(eventType)\n    eventPrimaryKeyMapping, _ = queries.BindMapping(eventType, eventMapping, eventPrimaryKeyColumns)\n    eventInsertCacheMut       sync.RWMutex\n    eventInsertCache          = make(map[string]insertCache)\n    eventUpdateCacheMut       sync.RWMutex\n    eventUpdateCache          = make(map[string]updateCache)\n    eventUpsertCacheMut       sync.RWMutex\n    eventUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    featureFlagAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "enabled", "error_message"}\n    featureFlagColumnsWithoutDefault = []string{"guid", "updated_at", "name", "enabled", "error_message"}\n    featureFlagColumnsWithDefault    = []string{"id", "created_at"}\n    featureFlagPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    featureFlagType                 = reflect.TypeOf(&FeatureFlag{})\n    featureFlagMapping              = queries.MakeStructMapping(featureFlagType)\n    featureFlagPrimaryKeyMapping, _ = queries.BindMapping(featureFlagType, featureFlagMapping, featureFlagPrimaryKeyColumns)\n    featureFlagInsertCacheMut       sync.RWMutex\n    featureFlagInsertCache          = make(map[string]insertCache)\n    featureFlagUpdateCacheMut       sync.RWMutex\n    featureFlagUpdateCache          = make(map[string]updateCache)\n    featureFlagUpsertCacheMut       sync.RWMutex\n    featureFlagUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    isolationSegmentAnnotationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    isolationSegmentAnnotationColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    isolationSegmentAnnotationColumnsWithDefault    = []string{"id", "created_at"}\n    isolationSegmentAnnotationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    isolationSegmentAnnotationType                 = reflect.TypeOf(&IsolationSegmentAnnotation{})\n    isolationSegmentAnnotationMapping              = queries.MakeStructMapping(isolationSegmentAnnotationType)\n    isolationSegmentAnnotationPrimaryKeyMapping, _ = queries.BindMapping(isolationSegmentAnnotationType, isolationSegmentAnnotationMapping, isolationSegmentAnnotationPrimaryKeyColumns)\n    isolationSegmentAnnotationInsertCacheMut       sync.RWMutex\n    isolationSegmentAnnotationInsertCache          = make(map[string]insertCache)\n    isolationSegmentAnnotationUpdateCacheMut       sync.RWMutex\n    isolationSegmentAnnotationUpdateCache          = make(map[string]updateCache)\n    isolationSegmentAnnotationUpsertCacheMut       sync.RWMutex\n    isolationSegmentAnnotationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    isolationSegmentLabelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    isolationSegmentLabelColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    isolationSegmentLabelColumnsWithDefault    = []string{"id", "created_at"}\n    isolationSegmentLabelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    isolationSegmentLabelType                 = reflect.TypeOf(&IsolationSegmentLabel{})\n    isolationSegmentLabelMapping              = queries.MakeStructMapping(isolationSegmentLabelType)\n    isolationSegmentLabelPrimaryKeyMapping, _ = queries.BindMapping(isolationSegmentLabelType, isolationSegmentLabelMapping, isolationSegmentLabelPrimaryKeyColumns)\n    isolationSegmentLabelInsertCacheMut       sync.RWMutex\n    isolationSegmentLabelInsertCache          = make(map[string]insertCache)\n    isolationSegmentLabelUpdateCacheMut       sync.RWMutex\n    isolationSegmentLabelUpdateCache          = make(map[string]updateCache)\n    isolationSegmentLabelUpsertCacheMut       sync.RWMutex\n    isolationSegmentLabelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    isolationSegmentAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name"}\n    isolationSegmentColumnsWithoutDefault = []string{"guid", "updated_at", "name"}\n    isolationSegmentColumnsWithDefault    = []string{"id", "created_at"}\n    isolationSegmentPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    isolationSegmentType                 = reflect.TypeOf(&IsolationSegment{})\n    isolationSegmentMapping              = queries.MakeStructMapping(isolationSegmentType)\n    isolationSegmentPrimaryKeyMapping, _ = queries.BindMapping(isolationSegmentType, isolationSegmentMapping, isolationSegmentPrimaryKeyColumns)\n    isolationSegmentInsertCacheMut       sync.RWMutex\n    isolationSegmentInsertCache          = make(map[string]insertCache)\n    isolationSegmentUpdateCacheMut       sync.RWMutex\n    isolationSegmentUpdateCache          = make(map[string]updateCache)\n    isolationSegmentUpsertCacheMut       sync.RWMutex\n    isolationSegmentUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    jobWarningAllColumns            = []string{"id", "guid", "created_at", "updated_at", "detail", "job_id", "fk_jobs_id"}\n    jobWarningColumnsWithoutDefault = []string{"guid", "updated_at", "detail", "job_id", "fk_jobs_id"}\n    jobWarningColumnsWithDefault    = []string{"id", "created_at"}\n    jobWarningPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    jobWarningType                 = reflect.TypeOf(&JobWarning{})\n    jobWarningMapping              = queries.MakeStructMapping(jobWarningType)\n    jobWarningPrimaryKeyMapping, _ = queries.BindMapping(jobWarningType, jobWarningMapping, jobWarningPrimaryKeyColumns)\n    jobWarningInsertCacheMut       sync.RWMutex\n    jobWarningInsertCache          = make(map[string]insertCache)\n    jobWarningUpdateCacheMut       sync.RWMutex\n    jobWarningUpdateCache          = make(map[string]updateCache)\n    jobWarningUpsertCacheMut       sync.RWMutex\n    jobWarningUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    jobAllColumns            = []string{"id", "guid", "created_at", "updated_at", "state", "operation", "resource_guid", "resource_type", "delayed_job_guid", "cf_api_error"}\n    jobColumnsWithoutDefault = []string{"guid", "updated_at", "state", "operation", "resource_guid", "resource_type", "delayed_job_guid", "cf_api_error"}\n    jobColumnsWithDefault    = []string{"id", "created_at"}\n    jobPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    jobType                 = reflect.TypeOf(&Job{})\n    jobMapping              = queries.MakeStructMapping(jobType)\n    jobPrimaryKeyMapping, _ = queries.BindMapping(jobType, jobMapping, jobPrimaryKeyColumns)\n    jobInsertCacheMut       sync.RWMutex\n    jobInsertCache          = make(map[string]insertCache)\n    jobUpdateCacheMut       sync.RWMutex\n    jobUpdateCache          = make(map[string]updateCache)\n    jobUpsertCacheMut       sync.RWMutex\n    jobUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    kpackLifecycleDatumAllColumns            = []string{"id", "guid", "created_at", "updated_at", "build_guid", "droplet_guid", "app_guid", "buildpacks"}\n    kpackLifecycleDatumColumnsWithoutDefault = []string{"guid", "updated_at", "build_guid", "droplet_guid", "app_guid"}\n    kpackLifecycleDatumColumnsWithDefault    = []string{"id", "created_at", "buildpacks"}\n    kpackLifecycleDatumPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    kpackLifecycleDatumType                 = reflect.TypeOf(&KpackLifecycleDatum{})\n    kpackLifecycleDatumMapping              = queries.MakeStructMapping(kpackLifecycleDatumType)\n    kpackLifecycleDatumPrimaryKeyMapping, _ = queries.BindMapping(kpackLifecycleDatumType, kpackLifecycleDatumMapping, kpackLifecycleDatumPrimaryKeyColumns)\n    kpackLifecycleDatumInsertCacheMut       sync.RWMutex\n    kpackLifecycleDatumInsertCache          = make(map[string]insertCache)\n    kpackLifecycleDatumUpdateCacheMut       sync.RWMutex\n    kpackLifecycleDatumUpdateCache          = make(map[string]updateCache)\n    kpackLifecycleDatumUpsertCacheMut       sync.RWMutex\n    kpackLifecycleDatumUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    lockingAllColumns            = []string{"id", "name"}\n    lockingColumnsWithoutDefault = []string{"name"}\n    lockingColumnsWithDefault    = []string{"id"}\n    lockingPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    lockingType                 = reflect.TypeOf(&Locking{})\n    lockingMapping              = queries.MakeStructMapping(lockingType)\n    lockingPrimaryKeyMapping, _ = queries.BindMapping(lockingType, lockingMapping, lockingPrimaryKeyColumns)\n    lockingInsertCacheMut       sync.RWMutex\n    lockingInsertCache          = make(map[string]insertCache)\n    lockingUpdateCacheMut       sync.RWMutex\n    lockingUpdateCache          = make(map[string]updateCache)\n    lockingUpsertCacheMut       sync.RWMutex\n    lockingUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    organizationAnnotationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    organizationAnnotationColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    organizationAnnotationColumnsWithDefault    = []string{"id", "created_at"}\n    organizationAnnotationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    organizationAnnotationType                 = reflect.TypeOf(&OrganizationAnnotation{})\n    organizationAnnotationMapping              = queries.MakeStructMapping(organizationAnnotationType)\n    organizationAnnotationPrimaryKeyMapping, _ = queries.BindMapping(organizationAnnotationType, organizationAnnotationMapping, organizationAnnotationPrimaryKeyColumns)\n    organizationAnnotationInsertCacheMut       sync.RWMutex\n    organizationAnnotationInsertCache          = make(map[string]insertCache)\n    organizationAnnotationUpdateCacheMut       sync.RWMutex\n    organizationAnnotationUpdateCache          = make(map[string]updateCache)\n    organizationAnnotationUpsertCacheMut       sync.RWMutex\n    organizationAnnotationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    organizationLabelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    organizationLabelColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    organizationLabelColumnsWithDefault    = []string{"id", "created_at"}\n    organizationLabelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    organizationLabelType                 = reflect.TypeOf(&OrganizationLabel{})\n    organizationLabelMapping              = queries.MakeStructMapping(organizationLabelType)\n    organizationLabelPrimaryKeyMapping, _ = queries.BindMapping(organizationLabelType, organizationLabelMapping, organizationLabelPrimaryKeyColumns)\n    organizationLabelInsertCacheMut       sync.RWMutex\n    organizationLabelInsertCache          = make(map[string]insertCache)\n    organizationLabelUpdateCacheMut       sync.RWMutex\n    organizationLabelUpdateCache          = make(map[string]updateCache)\n    organizationLabelUpsertCacheMut       sync.RWMutex\n    organizationLabelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    organizationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "billing_enabled", "quota_definition_id", "status", "default_isolation_segment_guid"}\n    organizationColumnsWithoutDefault = []string{"guid", "updated_at", "name", "quota_definition_id", "default_isolation_segment_guid"}\n    organizationColumnsWithDefault    = []string{"id", "created_at", "billing_enabled", "status"}\n    organizationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    organizationType                 = reflect.TypeOf(&Organization{})\n    organizationMapping              = queries.MakeStructMapping(organizationType)\n    organizationPrimaryKeyMapping, _ = queries.BindMapping(organizationType, organizationMapping, organizationPrimaryKeyColumns)\n    organizationInsertCacheMut       sync.RWMutex\n    organizationInsertCache          = make(map[string]insertCache)\n    organizationUpdateCacheMut       sync.RWMutex\n    organizationUpdateCache          = make(map[string]updateCache)\n    organizationUpsertCacheMut       sync.RWMutex\n    organizationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    organizationsAuditorAllColumns            = []string{"organization_id", "user_id", "organizations_auditors_pk", "role_guid", "created_at", "updated_at"}\n    organizationsAuditorColumnsWithoutDefault = []string{"organization_id", "user_id", "role_guid"}\n    organizationsAuditorColumnsWithDefault    = []string{"organizations_auditors_pk", "created_at", "updated_at"}\n    organizationsAuditorPrimaryKeyColumns     = []string{"organizations_auditors_pk"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    organizationsAuditorType                 = reflect.TypeOf(&OrganizationsAuditor{})\n    organizationsAuditorMapping              = queries.MakeStructMapping(organizationsAuditorType)\n    organizationsAuditorPrimaryKeyMapping, _ = queries.BindMapping(organizationsAuditorType, organizationsAuditorMapping, organizationsAuditorPrimaryKeyColumns)\n    organizationsAuditorInsertCacheMut       sync.RWMutex\n    organizationsAuditorInsertCache          = make(map[string]insertCache)\n    organizationsAuditorUpdateCacheMut       sync.RWMutex\n    organizationsAuditorUpdateCache          = make(map[string]updateCache)\n    organizationsAuditorUpsertCacheMut       sync.RWMutex\n    organizationsAuditorUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    organizationsBillingManagerAllColumns            = []string{"organization_id", "user_id", "organizations_billing_managers_pk", "role_guid", "created_at", "updated_at"}\n    organizationsBillingManagerColumnsWithoutDefault = []string{"organization_id", "user_id", "role_guid"}\n    organizationsBillingManagerColumnsWithDefault    = []string{"organizations_billing_managers_pk", "created_at", "updated_at"}\n    organizationsBillingManagerPrimaryKeyColumns     = []string{"organizations_billing_managers_pk"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    organizationsBillingManagerType                 = reflect.TypeOf(&OrganizationsBillingManager{})\n    organizationsBillingManagerMapping              = queries.MakeStructMapping(organizationsBillingManagerType)\n    organizationsBillingManagerPrimaryKeyMapping, _ = queries.BindMapping(organizationsBillingManagerType, organizationsBillingManagerMapping, organizationsBillingManagerPrimaryKeyColumns)\n    organizationsBillingManagerInsertCacheMut       sync.RWMutex\n    organizationsBillingManagerInsertCache          = make(map[string]insertCache)\n    organizationsBillingManagerUpdateCacheMut       sync.RWMutex\n    organizationsBillingManagerUpdateCache          = make(map[string]updateCache)\n    organizationsBillingManagerUpsertCacheMut       sync.RWMutex\n    organizationsBillingManagerUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    organizationsManagerAllColumns            = []string{"organization_id", "user_id", "organizations_managers_pk", "role_guid", "created_at", "updated_at"}\n    organizationsManagerColumnsWithoutDefault = []string{"organization_id", "user_id", "role_guid"}\n    organizationsManagerColumnsWithDefault    = []string{"organizations_managers_pk", "created_at", "updated_at"}\n    organizationsManagerPrimaryKeyColumns     = []string{"organizations_managers_pk"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    organizationsManagerType                 = reflect.TypeOf(&OrganizationsManager{})\n    organizationsManagerMapping              = queries.MakeStructMapping(organizationsManagerType)\n    organizationsManagerPrimaryKeyMapping, _ = queries.BindMapping(organizationsManagerType, organizationsManagerMapping, organizationsManagerPrimaryKeyColumns)\n    organizationsManagerInsertCacheMut       sync.RWMutex\n    organizationsManagerInsertCache          = make(map[string]insertCache)\n    organizationsManagerUpdateCacheMut       sync.RWMutex\n    organizationsManagerUpdateCache          = make(map[string]updateCache)\n    organizationsManagerUpsertCacheMut       sync.RWMutex\n    organizationsManagerUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    organizationsPrivateDomainAllColumns            = []string{"organization_id", "private_domain_id", "organizations_private_domains_pk"}\n    organizationsPrivateDomainColumnsWithoutDefault = []string{"organization_id", "private_domain_id"}\n    organizationsPrivateDomainColumnsWithDefault    = []string{"organizations_private_domains_pk"}\n    organizationsPrivateDomainPrimaryKeyColumns     = []string{"organizations_private_domains_pk"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    organizationsPrivateDomainType                 = reflect.TypeOf(&OrganizationsPrivateDomain{})\n    organizationsPrivateDomainMapping              = queries.MakeStructMapping(organizationsPrivateDomainType)\n    organizationsPrivateDomainPrimaryKeyMapping, _ = queries.BindMapping(organizationsPrivateDomainType, organizationsPrivateDomainMapping, organizationsPrivateDomainPrimaryKeyColumns)\n    organizationsPrivateDomainInsertCacheMut       sync.RWMutex\n    organizationsPrivateDomainInsertCache          = make(map[string]insertCache)\n    organizationsPrivateDomainUpdateCacheMut       sync.RWMutex\n    organizationsPrivateDomainUpdateCache          = make(map[string]updateCache)\n    organizationsPrivateDomainUpsertCacheMut       sync.RWMutex\n    organizationsPrivateDomainUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    organizationsUserAllColumns            = []string{"organization_id", "user_id", "organizations_users_pk", "role_guid", "created_at", "updated_at"}\n    organizationsUserColumnsWithoutDefault = []string{"organization_id", "user_id", "role_guid"}\n    organizationsUserColumnsWithDefault    = []string{"organizations_users_pk", "created_at", "updated_at"}\n    organizationsUserPrimaryKeyColumns     = []string{"organizations_users_pk"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    organizationsUserType                 = reflect.TypeOf(&OrganizationsUser{})\n    organizationsUserMapping              = queries.MakeStructMapping(organizationsUserType)\n    organizationsUserPrimaryKeyMapping, _ = queries.BindMapping(organizationsUserType, organizationsUserMapping, organizationsUserPrimaryKeyColumns)\n    organizationsUserInsertCacheMut       sync.RWMutex\n    organizationsUserInsertCache          = make(map[string]insertCache)\n    organizationsUserUpdateCacheMut       sync.RWMutex\n    organizationsUserUpdateCache          = make(map[string]updateCache)\n    organizationsUserUpsertCacheMut       sync.RWMutex\n    organizationsUserUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    orphanedBlobAllColumns            = []string{"id", "guid", "created_at", "updated_at", "blob_key", "dirty_count", "blobstore_type"}\n    orphanedBlobColumnsWithoutDefault = []string{"guid", "updated_at", "blob_key", "dirty_count", "blobstore_type"}\n    orphanedBlobColumnsWithDefault    = []string{"id", "created_at"}\n    orphanedBlobPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    orphanedBlobType                 = reflect.TypeOf(&OrphanedBlob{})\n    orphanedBlobMapping              = queries.MakeStructMapping(orphanedBlobType)\n    orphanedBlobPrimaryKeyMapping, _ = queries.BindMapping(orphanedBlobType, orphanedBlobMapping, orphanedBlobPrimaryKeyColumns)\n    orphanedBlobInsertCacheMut       sync.RWMutex\n    orphanedBlobInsertCache          = make(map[string]insertCache)\n    orphanedBlobUpdateCacheMut       sync.RWMutex\n    orphanedBlobUpdateCache          = make(map[string]updateCache)\n    orphanedBlobUpsertCacheMut       sync.RWMutex\n    orphanedBlobUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    packageAnnotationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    packageAnnotationColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    packageAnnotationColumnsWithDefault    = []string{"id", "created_at"}\n    packageAnnotationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    packageAnnotationType                 = reflect.TypeOf(&PackageAnnotation{})\n    packageAnnotationMapping              = queries.MakeStructMapping(packageAnnotationType)\n    packageAnnotationPrimaryKeyMapping, _ = queries.BindMapping(packageAnnotationType, packageAnnotationMapping, packageAnnotationPrimaryKeyColumns)\n    packageAnnotationInsertCacheMut       sync.RWMutex\n    packageAnnotationInsertCache          = make(map[string]insertCache)\n    packageAnnotationUpdateCacheMut       sync.RWMutex\n    packageAnnotationUpdateCache          = make(map[string]updateCache)\n    packageAnnotationUpsertCacheMut       sync.RWMutex\n    packageAnnotationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    packageLabelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    packageLabelColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    packageLabelColumnsWithDefault    = []string{"id", "created_at"}\n    packageLabelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    packageLabelType                 = reflect.TypeOf(&PackageLabel{})\n    packageLabelMapping              = queries.MakeStructMapping(packageLabelType)\n    packageLabelPrimaryKeyMapping, _ = queries.BindMapping(packageLabelType, packageLabelMapping, packageLabelPrimaryKeyColumns)\n    packageLabelInsertCacheMut       sync.RWMutex\n    packageLabelInsertCache          = make(map[string]insertCache)\n    packageLabelUpdateCacheMut       sync.RWMutex\n    packageLabelUpdateCache          = make(map[string]updateCache)\n    packageLabelUpsertCacheMut       sync.RWMutex\n    packageLabelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    packageAllColumns            = []string{"id", "guid", "created_at", "updated_at", "type", "package_hash", "state", "error", "app_guid", "docker_image", "sha256_checksum", "docker_username", "docker_password_salt", "encrypted_docker_password", "encryption_key_label", "encryption_iterations"}\n    packageColumnsWithoutDefault = []string{"guid", "updated_at", "type", "package_hash", "state", "error", "app_guid", "docker_image", "sha256_checksum", "docker_username", "docker_password_salt", "encrypted_docker_password", "encryption_key_label"}\n    packageColumnsWithDefault    = []string{"id", "created_at", "encryption_iterations"}\n    packagePrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    packageType                 = reflect.TypeOf(&Package{})\n    packageMapping              = queries.MakeStructMapping(packageType)\n    packagePrimaryKeyMapping, _ = queries.BindMapping(packageType, packageMapping, packagePrimaryKeyColumns)\n    packageInsertCacheMut       sync.RWMutex\n    packageInsertCache          = make(map[string]insertCache)\n    packageUpdateCacheMut       sync.RWMutex\n    packageUpdateCache          = make(map[string]updateCache)\n    packageUpsertCacheMut       sync.RWMutex\n    packageUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    processAnnotationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    processAnnotationColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    processAnnotationColumnsWithDefault    = []string{"id", "created_at"}\n    processAnnotationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    processAnnotationType                 = reflect.TypeOf(&ProcessAnnotation{})\n    processAnnotationMapping              = queries.MakeStructMapping(processAnnotationType)\n    processAnnotationPrimaryKeyMapping, _ = queries.BindMapping(processAnnotationType, processAnnotationMapping, processAnnotationPrimaryKeyColumns)\n    processAnnotationInsertCacheMut       sync.RWMutex\n    processAnnotationInsertCache          = make(map[string]insertCache)\n    processAnnotationUpdateCacheMut       sync.RWMutex\n    processAnnotationUpdateCache          = make(map[string]updateCache)\n    processAnnotationUpsertCacheMut       sync.RWMutex\n    processAnnotationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    processLabelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    processLabelColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    processLabelColumnsWithDefault    = []string{"id", "created_at"}\n    processLabelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    processLabelType                 = reflect.TypeOf(&ProcessLabel{})\n    processLabelMapping              = queries.MakeStructMapping(processLabelType)\n    processLabelPrimaryKeyMapping, _ = queries.BindMapping(processLabelType, processLabelMapping, processLabelPrimaryKeyColumns)\n    processLabelInsertCacheMut       sync.RWMutex\n    processLabelInsertCache          = make(map[string]insertCache)\n    processLabelUpdateCacheMut       sync.RWMutex\n    processLabelUpdateCache          = make(map[string]updateCache)\n    processLabelUpsertCacheMut       sync.RWMutex\n    processLabelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    processAllColumns            = []string{"id", "guid", "created_at", "updated_at", "production", "memory", "instances", "file_descriptors", "disk_quota", "state", "version", "metadata", "detected_buildpack", "not_deleted", "health_check_timeout", "diego", "package_updated_at", "app_guid", "type", "health_check_type", "command", "enable_ssh", "encrypted_docker_credentials_json", "docker_salt", "ports", "health_check_http_endpoint", "health_check_invocation_timeout", "revision_guid"}\n    processColumnsWithoutDefault = []string{"guid", "updated_at", "memory", "version", "detected_buildpack", "health_check_timeout", "package_updated_at", "app_guid", "command", "encrypted_docker_credentials_json", "docker_salt", "ports", "health_check_http_endpoint", "health_check_invocation_timeout", "revision_guid"}\n    processColumnsWithDefault    = []string{"id", "created_at", "production", "instances", "file_descriptors", "disk_quota", "state", "metadata", "not_deleted", "diego", "type", "health_check_type", "enable_ssh"}\n    processPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    processType                 = reflect.TypeOf(&Process{})\n    processMapping              = queries.MakeStructMapping(processType)\n    processPrimaryKeyMapping, _ = queries.BindMapping(processType, processMapping, processPrimaryKeyColumns)\n    processInsertCacheMut       sync.RWMutex\n    processInsertCache          = make(map[string]insertCache)\n    processUpdateCacheMut       sync.RWMutex\n    processUpdateCache          = make(map[string]updateCache)\n    processUpsertCacheMut       sync.RWMutex\n    processUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    quotaDefinitionAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "non_basic_services_allowed", "total_services", "memory_limit", "total_routes", "instance_memory_limit", "total_private_domains", "app_instance_limit", "app_task_limit", "total_service_keys", "total_reserved_route_ports"}\n    quotaDefinitionColumnsWithoutDefault = []string{"guid", "updated_at", "name", "non_basic_services_allowed", "total_services", "memory_limit", "total_routes"}\n    quotaDefinitionColumnsWithDefault    = []string{"id", "created_at", "instance_memory_limit", "total_private_domains", "app_instance_limit", "app_task_limit", "total_service_keys", "total_reserved_route_ports"}\n    quotaDefinitionPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    quotaDefinitionType                 = reflect.TypeOf(&QuotaDefinition{})\n    quotaDefinitionMapping              = queries.MakeStructMapping(quotaDefinitionType)\n    quotaDefinitionPrimaryKeyMapping, _ = queries.BindMapping(quotaDefinitionType, quotaDefinitionMapping, quotaDefinitionPrimaryKeyColumns)\n    quotaDefinitionInsertCacheMut       sync.RWMutex\n    quotaDefinitionInsertCache          = make(map[string]insertCache)\n    quotaDefinitionUpdateCacheMut       sync.RWMutex\n    quotaDefinitionUpdateCache          = make(map[string]updateCache)\n    quotaDefinitionUpsertCacheMut       sync.RWMutex\n    quotaDefinitionUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    requestCountAllColumns            = []string{"id", "user_guid", "count", "valid_until"}\n    requestCountColumnsWithoutDefault = []string{"user_guid", "valid_until"}\n    requestCountColumnsWithDefault    = []string{"id", "count"}\n    requestCountPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    requestCountType                 = reflect.TypeOf(&RequestCount{})\n    requestCountMapping              = queries.MakeStructMapping(requestCountType)\n    requestCountPrimaryKeyMapping, _ = queries.BindMapping(requestCountType, requestCountMapping, requestCountPrimaryKeyColumns)\n    requestCountInsertCacheMut       sync.RWMutex\n    requestCountInsertCache          = make(map[string]insertCache)\n    requestCountUpdateCacheMut       sync.RWMutex\n    requestCountUpdateCache          = make(map[string]updateCache)\n    requestCountUpsertCacheMut       sync.RWMutex\n    requestCountUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    revisionAnnotationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    revisionAnnotationColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    revisionAnnotationColumnsWithDefault    = []string{"id", "created_at"}\n    revisionAnnotationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    revisionAnnotationType                 = reflect.TypeOf(&RevisionAnnotation{})\n    revisionAnnotationMapping              = queries.MakeStructMapping(revisionAnnotationType)\n    revisionAnnotationPrimaryKeyMapping, _ = queries.BindMapping(revisionAnnotationType, revisionAnnotationMapping, revisionAnnotationPrimaryKeyColumns)\n    revisionAnnotationInsertCacheMut       sync.RWMutex\n    revisionAnnotationInsertCache          = make(map[string]insertCache)\n    revisionAnnotationUpdateCacheMut       sync.RWMutex\n    revisionAnnotationUpdateCache          = make(map[string]updateCache)\n    revisionAnnotationUpsertCacheMut       sync.RWMutex\n    revisionAnnotationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    revisionLabelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    revisionLabelColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    revisionLabelColumnsWithDefault    = []string{"id", "created_at"}\n    revisionLabelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    revisionLabelType                 = reflect.TypeOf(&RevisionLabel{})\n    revisionLabelMapping              = queries.MakeStructMapping(revisionLabelType)\n    revisionLabelPrimaryKeyMapping, _ = queries.BindMapping(revisionLabelType, revisionLabelMapping, revisionLabelPrimaryKeyColumns)\n    revisionLabelInsertCacheMut       sync.RWMutex\n    revisionLabelInsertCache          = make(map[string]insertCache)\n    revisionLabelUpdateCacheMut       sync.RWMutex\n    revisionLabelUpdateCache          = make(map[string]updateCache)\n    revisionLabelUpsertCacheMut       sync.RWMutex\n    revisionLabelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    revisionProcessCommandAllColumns            = []string{"id", "guid", "created_at", "updated_at", "revision_guid", "process_type", "process_command"}\n    revisionProcessCommandColumnsWithoutDefault = []string{"guid", "updated_at", "revision_guid", "process_type", "process_command"}\n    revisionProcessCommandColumnsWithDefault    = []string{"id", "created_at"}\n    revisionProcessCommandPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    revisionProcessCommandType                 = reflect.TypeOf(&RevisionProcessCommand{})\n    revisionProcessCommandMapping              = queries.MakeStructMapping(revisionProcessCommandType)\n    revisionProcessCommandPrimaryKeyMapping, _ = queries.BindMapping(revisionProcessCommandType, revisionProcessCommandMapping, revisionProcessCommandPrimaryKeyColumns)\n    revisionProcessCommandInsertCacheMut       sync.RWMutex\n    revisionProcessCommandInsertCache          = make(map[string]insertCache)\n    revisionProcessCommandUpdateCacheMut       sync.RWMutex\n    revisionProcessCommandUpdateCache          = make(map[string]updateCache)\n    revisionProcessCommandUpsertCacheMut       sync.RWMutex\n    revisionProcessCommandUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    revisionSidecarProcessTypeAllColumns            = []string{"id", "guid", "created_at", "updated_at", "type", "revision_sidecar_guid"}\n    revisionSidecarProcessTypeColumnsWithoutDefault = []string{"guid", "updated_at", "type", "revision_sidecar_guid"}\n    revisionSidecarProcessTypeColumnsWithDefault    = []string{"id", "created_at"}\n    revisionSidecarProcessTypePrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    revisionSidecarProcessTypeType                 = reflect.TypeOf(&RevisionSidecarProcessType{})\n    revisionSidecarProcessTypeMapping              = queries.MakeStructMapping(revisionSidecarProcessTypeType)\n    revisionSidecarProcessTypePrimaryKeyMapping, _ = queries.BindMapping(revisionSidecarProcessTypeType, revisionSidecarProcessTypeMapping, revisionSidecarProcessTypePrimaryKeyColumns)\n    revisionSidecarProcessTypeInsertCacheMut       sync.RWMutex\n    revisionSidecarProcessTypeInsertCache          = make(map[string]insertCache)\n    revisionSidecarProcessTypeUpdateCacheMut       sync.RWMutex\n    revisionSidecarProcessTypeUpdateCache          = make(map[string]updateCache)\n    revisionSidecarProcessTypeUpsertCacheMut       sync.RWMutex\n    revisionSidecarProcessTypeUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    revisionSidecarAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "command", "revision_guid", "memory"}\n    revisionSidecarColumnsWithoutDefault = []string{"guid", "updated_at", "name", "command", "revision_guid", "memory"}\n    revisionSidecarColumnsWithDefault    = []string{"id", "created_at"}\n    revisionSidecarPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    revisionSidecarType                 = reflect.TypeOf(&RevisionSidecar{})\n    revisionSidecarMapping              = queries.MakeStructMapping(revisionSidecarType)\n    revisionSidecarPrimaryKeyMapping, _ = queries.BindMapping(revisionSidecarType, revisionSidecarMapping, revisionSidecarPrimaryKeyColumns)\n    revisionSidecarInsertCacheMut       sync.RWMutex\n    revisionSidecarInsertCache          = make(map[string]insertCache)\n    revisionSidecarUpdateCacheMut       sync.RWMutex\n    revisionSidecarUpdateCache          = make(map[string]updateCache)\n    revisionSidecarUpsertCacheMut       sync.RWMutex\n    revisionSidecarUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    revisionAllColumns            = []string{"id", "guid", "created_at", "updated_at", "app_guid", "version", "droplet_guid", "encrypted_environment_variables", "salt", "encryption_key_label", "encryption_iterations", "description"}\n    revisionColumnsWithoutDefault = []string{"guid", "updated_at", "app_guid", "droplet_guid", "encrypted_environment_variables", "salt", "encryption_key_label"}\n    revisionColumnsWithDefault    = []string{"id", "created_at", "version", "encryption_iterations", "description"}\n    revisionPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    revisionType                 = reflect.TypeOf(&Revision{})\n    revisionMapping              = queries.MakeStructMapping(revisionType)\n    revisionPrimaryKeyMapping, _ = queries.BindMapping(revisionType, revisionMapping, revisionPrimaryKeyColumns)\n    revisionInsertCacheMut       sync.RWMutex\n    revisionInsertCache          = make(map[string]insertCache)\n    revisionUpdateCacheMut       sync.RWMutex\n    revisionUpdateCache          = make(map[string]updateCache)\n    revisionUpsertCacheMut       sync.RWMutex\n    revisionUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    routeAnnotationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    routeAnnotationColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    routeAnnotationColumnsWithDefault    = []string{"id", "created_at"}\n    routeAnnotationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    routeAnnotationType                 = reflect.TypeOf(&RouteAnnotation{})\n    routeAnnotationMapping              = queries.MakeStructMapping(routeAnnotationType)\n    routeAnnotationPrimaryKeyMapping, _ = queries.BindMapping(routeAnnotationType, routeAnnotationMapping, routeAnnotationPrimaryKeyColumns)\n    routeAnnotationInsertCacheMut       sync.RWMutex\n    routeAnnotationInsertCache          = make(map[string]insertCache)\n    routeAnnotationUpdateCacheMut       sync.RWMutex\n    routeAnnotationUpdateCache          = make(map[string]updateCache)\n    routeAnnotationUpsertCacheMut       sync.RWMutex\n    routeAnnotationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    routeBindingAnnotationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    routeBindingAnnotationColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    routeBindingAnnotationColumnsWithDefault    = []string{"id", "created_at"}\n    routeBindingAnnotationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    routeBindingAnnotationType                 = reflect.TypeOf(&RouteBindingAnnotation{})\n    routeBindingAnnotationMapping              = queries.MakeStructMapping(routeBindingAnnotationType)\n    routeBindingAnnotationPrimaryKeyMapping, _ = queries.BindMapping(routeBindingAnnotationType, routeBindingAnnotationMapping, routeBindingAnnotationPrimaryKeyColumns)\n    routeBindingAnnotationInsertCacheMut       sync.RWMutex\n    routeBindingAnnotationInsertCache          = make(map[string]insertCache)\n    routeBindingAnnotationUpdateCacheMut       sync.RWMutex\n    routeBindingAnnotationUpdateCache          = make(map[string]updateCache)\n    routeBindingAnnotationUpsertCacheMut       sync.RWMutex\n    routeBindingAnnotationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    routeBindingLabelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    routeBindingLabelColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    routeBindingLabelColumnsWithDefault    = []string{"id", "created_at"}\n    routeBindingLabelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    routeBindingLabelType                 = reflect.TypeOf(&RouteBindingLabel{})\n    routeBindingLabelMapping              = queries.MakeStructMapping(routeBindingLabelType)\n    routeBindingLabelPrimaryKeyMapping, _ = queries.BindMapping(routeBindingLabelType, routeBindingLabelMapping, routeBindingLabelPrimaryKeyColumns)\n    routeBindingLabelInsertCacheMut       sync.RWMutex\n    routeBindingLabelInsertCache          = make(map[string]insertCache)\n    routeBindingLabelUpdateCacheMut       sync.RWMutex\n    routeBindingLabelUpdateCache          = make(map[string]updateCache)\n    routeBindingLabelUpsertCacheMut       sync.RWMutex\n    routeBindingLabelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    routeBindingOperationAllColumns            = []string{"id", "created_at", "updated_at", "route_binding_id", "state", "type", "description", "broker_provided_operation"}\n    routeBindingOperationColumnsWithoutDefault = []string{"updated_at", "route_binding_id", "state", "type", "description", "broker_provided_operation"}\n    routeBindingOperationColumnsWithDefault    = []string{"id", "created_at"}\n    routeBindingOperationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    routeBindingOperationType                 = reflect.TypeOf(&RouteBindingOperation{})\n    routeBindingOperationMapping              = queries.MakeStructMapping(routeBindingOperationType)\n    routeBindingOperationPrimaryKeyMapping, _ = queries.BindMapping(routeBindingOperationType, routeBindingOperationMapping, routeBindingOperationPrimaryKeyColumns)\n    routeBindingOperationInsertCacheMut       sync.RWMutex\n    routeBindingOperationInsertCache          = make(map[string]insertCache)\n    routeBindingOperationUpdateCacheMut       sync.RWMutex\n    routeBindingOperationUpdateCache          = make(map[string]updateCache)\n    routeBindingOperationUpsertCacheMut       sync.RWMutex\n    routeBindingOperationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    routeBindingAllColumns            = []string{"id", "guid", "created_at", "updated_at", "route_id", "service_instance_id", "route_service_url"}\n    routeBindingColumnsWithoutDefault = []string{"guid", "updated_at", "route_id", "service_instance_id", "route_service_url"}\n    routeBindingColumnsWithDefault    = []string{"id", "created_at"}\n    routeBindingPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    routeBindingType                 = reflect.TypeOf(&RouteBinding{})\n    routeBindingMapping              = queries.MakeStructMapping(routeBindingType)\n    routeBindingPrimaryKeyMapping, _ = queries.BindMapping(routeBindingType, routeBindingMapping, routeBindingPrimaryKeyColumns)\n    routeBindingInsertCacheMut       sync.RWMutex\n    routeBindingInsertCache          = make(map[string]insertCache)\n    routeBindingUpdateCacheMut       sync.RWMutex\n    routeBindingUpdateCache          = make(map[string]updateCache)\n    routeBindingUpsertCacheMut       sync.RWMutex\n    routeBindingUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    routeLabelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    routeLabelColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    routeLabelColumnsWithDefault    = []string{"id", "created_at"}\n    routeLabelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    routeLabelType                 = reflect.TypeOf(&RouteLabel{})\n    routeLabelMapping              = queries.MakeStructMapping(routeLabelType)\n    routeLabelPrimaryKeyMapping, _ = queries.BindMapping(routeLabelType, routeLabelMapping, routeLabelPrimaryKeyColumns)\n    routeLabelInsertCacheMut       sync.RWMutex\n    routeLabelInsertCache          = make(map[string]insertCache)\n    routeLabelUpdateCacheMut       sync.RWMutex\n    routeLabelUpdateCache          = make(map[string]updateCache)\n    routeLabelUpsertCacheMut       sync.RWMutex\n    routeLabelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    routeMappingAllColumns            = []string{"id", "created_at", "updated_at", "app_port", "guid", "app_guid", "route_guid", "process_type", "weight"}\n    routeMappingColumnsWithoutDefault = []string{"updated_at", "guid", "app_guid", "route_guid", "process_type", "weight"}\n    routeMappingColumnsWithDefault    = []string{"id", "created_at", "app_port"}\n    routeMappingPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    routeMappingType                 = reflect.TypeOf(&RouteMapping{})\n    routeMappingMapping              = queries.MakeStructMapping(routeMappingType)\n    routeMappingPrimaryKeyMapping, _ = queries.BindMapping(routeMappingType, routeMappingMapping, routeMappingPrimaryKeyColumns)\n    routeMappingInsertCacheMut       sync.RWMutex\n    routeMappingInsertCache          = make(map[string]insertCache)\n    routeMappingUpdateCacheMut       sync.RWMutex\n    routeMappingUpdateCache          = make(map[string]updateCache)\n    routeMappingUpsertCacheMut       sync.RWMutex\n    routeMappingUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    routeAllColumns            = []string{"id", "guid", "created_at", "updated_at", "host", "domain_id", "space_id", "path", "port", "vip_offset"}\n    routeColumnsWithoutDefault = []string{"guid", "updated_at", "domain_id", "space_id", "vip_offset"}\n    routeColumnsWithDefault    = []string{"id", "created_at", "host", "path", "port"}\n    routePrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    routeType                 = reflect.TypeOf(&Route{})\n    routeMapping              = queries.MakeStructMapping(routeType)\n    routePrimaryKeyMapping, _ = queries.BindMapping(routeType, routeMapping, routePrimaryKeyColumns)\n    routeInsertCacheMut       sync.RWMutex\n    routeInsertCache          = make(map[string]insertCache)\n    routeUpdateCacheMut       sync.RWMutex\n    routeUpdateCache          = make(map[string]updateCache)\n    routeUpsertCacheMut       sync.RWMutex\n    routeUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    schemaMigrationAllColumns            = []string{"filename"}\n    schemaMigrationColumnsWithoutDefault = []string{"filename"}\n    schemaMigrationColumnsWithDefault    = []string{}\n    schemaMigrationPrimaryKeyColumns     = []string{"filename"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    schemaMigrationType                 = reflect.TypeOf(&SchemaMigration{})\n    schemaMigrationMapping              = queries.MakeStructMapping(schemaMigrationType)\n    schemaMigrationPrimaryKeyMapping, _ = queries.BindMapping(schemaMigrationType, schemaMigrationMapping, schemaMigrationPrimaryKeyColumns)\n    schemaMigrationInsertCacheMut       sync.RWMutex\n    schemaMigrationInsertCache          = make(map[string]insertCache)\n    schemaMigrationUpdateCacheMut       sync.RWMutex\n    schemaMigrationUpdateCache          = make(map[string]updateCache)\n    schemaMigrationUpsertCacheMut       sync.RWMutex\n    schemaMigrationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    securityGroupAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "rules", "staging_default", "running_default"}\n    securityGroupColumnsWithoutDefault = []string{"guid", "updated_at", "name", "rules"}\n    securityGroupColumnsWithDefault    = []string{"id", "created_at", "staging_default", "running_default"}\n    securityGroupPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    securityGroupType                 = reflect.TypeOf(&SecurityGroup{})\n    securityGroupMapping              = queries.MakeStructMapping(securityGroupType)\n    securityGroupPrimaryKeyMapping, _ = queries.BindMapping(securityGroupType, securityGroupMapping, securityGroupPrimaryKeyColumns)\n    securityGroupInsertCacheMut       sync.RWMutex\n    securityGroupInsertCache          = make(map[string]insertCache)\n    securityGroupUpdateCacheMut       sync.RWMutex\n    securityGroupUpdateCache          = make(map[string]updateCache)\n    securityGroupUpsertCacheMut       sync.RWMutex\n    securityGroupUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    securityGroupsSpaceAllColumns            = []string{"security_group_id", "space_id", "security_groups_spaces_pk"}\n    securityGroupsSpaceColumnsWithoutDefault = []string{"security_group_id", "space_id"}\n    securityGroupsSpaceColumnsWithDefault    = []string{"security_groups_spaces_pk"}\n    securityGroupsSpacePrimaryKeyColumns     = []string{"security_groups_spaces_pk"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    securityGroupsSpaceType                 = reflect.TypeOf(&SecurityGroupsSpace{})\n    securityGroupsSpaceMapping              = queries.MakeStructMapping(securityGroupsSpaceType)\n    securityGroupsSpacePrimaryKeyMapping, _ = queries.BindMapping(securityGroupsSpaceType, securityGroupsSpaceMapping, securityGroupsSpacePrimaryKeyColumns)\n    securityGroupsSpaceInsertCacheMut       sync.RWMutex\n    securityGroupsSpaceInsertCache          = make(map[string]insertCache)\n    securityGroupsSpaceUpdateCacheMut       sync.RWMutex\n    securityGroupsSpaceUpdateCache          = make(map[string]updateCache)\n    securityGroupsSpaceUpsertCacheMut       sync.RWMutex\n    securityGroupsSpaceUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    serviceBindingAnnotationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    serviceBindingAnnotationColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    serviceBindingAnnotationColumnsWithDefault    = []string{"id", "created_at"}\n    serviceBindingAnnotationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    serviceBindingAnnotationType                 = reflect.TypeOf(&ServiceBindingAnnotation{})\n    serviceBindingAnnotationMapping              = queries.MakeStructMapping(serviceBindingAnnotationType)\n    serviceBindingAnnotationPrimaryKeyMapping, _ = queries.BindMapping(serviceBindingAnnotationType, serviceBindingAnnotationMapping, serviceBindingAnnotationPrimaryKeyColumns)\n    serviceBindingAnnotationInsertCacheMut       sync.RWMutex\n    serviceBindingAnnotationInsertCache          = make(map[string]insertCache)\n    serviceBindingAnnotationUpdateCacheMut       sync.RWMutex\n    serviceBindingAnnotationUpdateCache          = make(map[string]updateCache)\n    serviceBindingAnnotationUpsertCacheMut       sync.RWMutex\n    serviceBindingAnnotationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    serviceBindingLabelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    serviceBindingLabelColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    serviceBindingLabelColumnsWithDefault    = []string{"id", "created_at"}\n    serviceBindingLabelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    serviceBindingLabelType                 = reflect.TypeOf(&ServiceBindingLabel{})\n    serviceBindingLabelMapping              = queries.MakeStructMapping(serviceBindingLabelType)\n    serviceBindingLabelPrimaryKeyMapping, _ = queries.BindMapping(serviceBindingLabelType, serviceBindingLabelMapping, serviceBindingLabelPrimaryKeyColumns)\n    serviceBindingLabelInsertCacheMut       sync.RWMutex\n    serviceBindingLabelInsertCache          = make(map[string]insertCache)\n    serviceBindingLabelUpdateCacheMut       sync.RWMutex\n    serviceBindingLabelUpdateCache          = make(map[string]updateCache)\n    serviceBindingLabelUpsertCacheMut       sync.RWMutex\n    serviceBindingLabelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    serviceBindingOperationAllColumns            = []string{"id", "created_at", "updated_at", "service_binding_id", "state", "type", "description", "broker_provided_operation"}\n    serviceBindingOperationColumnsWithoutDefault = []string{"updated_at", "service_binding_id", "state", "type", "description", "broker_provided_operation"}\n    serviceBindingOperationColumnsWithDefault    = []string{"id", "created_at"}\n    serviceBindingOperationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    serviceBindingOperationType                 = reflect.TypeOf(&ServiceBindingOperation{})\n    serviceBindingOperationMapping              = queries.MakeStructMapping(serviceBindingOperationType)\n    serviceBindingOperationPrimaryKeyMapping, _ = queries.BindMapping(serviceBindingOperationType, serviceBindingOperationMapping, serviceBindingOperationPrimaryKeyColumns)\n    serviceBindingOperationInsertCacheMut       sync.RWMutex\n    serviceBindingOperationInsertCache          = make(map[string]insertCache)\n    serviceBindingOperationUpdateCacheMut       sync.RWMutex\n    serviceBindingOperationUpdateCache          = make(map[string]updateCache)\n    serviceBindingOperationUpsertCacheMut       sync.RWMutex\n    serviceBindingOperationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    serviceBindingAllColumns            = []string{"id", "guid", "created_at", "updated_at", "credentials", "salt", "syslog_drain_url", "volume_mounts", "volume_mounts_salt", "app_guid", "service_instance_guid", "type", "name", "encryption_key_label", "encryption_iterations"}\n    serviceBindingColumnsWithoutDefault = []string{"guid", "updated_at", "credentials", "salt", "syslog_drain_url", "volume_mounts", "volume_mounts_salt", "app_guid", "service_instance_guid", "type", "name", "encryption_key_label"}\n    serviceBindingColumnsWithDefault    = []string{"id", "created_at", "encryption_iterations"}\n    serviceBindingPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    serviceBindingType                 = reflect.TypeOf(&ServiceBinding{})\n    serviceBindingMapping              = queries.MakeStructMapping(serviceBindingType)\n    serviceBindingPrimaryKeyMapping, _ = queries.BindMapping(serviceBindingType, serviceBindingMapping, serviceBindingPrimaryKeyColumns)\n    serviceBindingInsertCacheMut       sync.RWMutex\n    serviceBindingInsertCache          = make(map[string]insertCache)\n    serviceBindingUpdateCacheMut       sync.RWMutex\n    serviceBindingUpdateCache          = make(map[string]updateCache)\n    serviceBindingUpsertCacheMut       sync.RWMutex\n    serviceBindingUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    serviceBrokerAnnotationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    serviceBrokerAnnotationColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    serviceBrokerAnnotationColumnsWithDefault    = []string{"id", "created_at"}\n    serviceBrokerAnnotationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    serviceBrokerAnnotationType                 = reflect.TypeOf(&ServiceBrokerAnnotation{})\n    serviceBrokerAnnotationMapping              = queries.MakeStructMapping(serviceBrokerAnnotationType)\n    serviceBrokerAnnotationPrimaryKeyMapping, _ = queries.BindMapping(serviceBrokerAnnotationType, serviceBrokerAnnotationMapping, serviceBrokerAnnotationPrimaryKeyColumns)\n    serviceBrokerAnnotationInsertCacheMut       sync.RWMutex\n    serviceBrokerAnnotationInsertCache          = make(map[string]insertCache)\n    serviceBrokerAnnotationUpdateCacheMut       sync.RWMutex\n    serviceBrokerAnnotationUpdateCache          = make(map[string]updateCache)\n    serviceBrokerAnnotationUpsertCacheMut       sync.RWMutex\n    serviceBrokerAnnotationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    serviceBrokerLabelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    serviceBrokerLabelColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    serviceBrokerLabelColumnsWithDefault    = []string{"id", "created_at"}\n    serviceBrokerLabelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    serviceBrokerLabelType                 = reflect.TypeOf(&ServiceBrokerLabel{})\n    serviceBrokerLabelMapping              = queries.MakeStructMapping(serviceBrokerLabelType)\n    serviceBrokerLabelPrimaryKeyMapping, _ = queries.BindMapping(serviceBrokerLabelType, serviceBrokerLabelMapping, serviceBrokerLabelPrimaryKeyColumns)\n    serviceBrokerLabelInsertCacheMut       sync.RWMutex\n    serviceBrokerLabelInsertCache          = make(map[string]insertCache)\n    serviceBrokerLabelUpdateCacheMut       sync.RWMutex\n    serviceBrokerLabelUpdateCache          = make(map[string]updateCache)\n    serviceBrokerLabelUpsertCacheMut       sync.RWMutex\n    serviceBrokerLabelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    serviceBrokerUpdateRequestAnnotationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    serviceBrokerUpdateRequestAnnotationColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    serviceBrokerUpdateRequestAnnotationColumnsWithDefault    = []string{"id", "created_at"}\n    serviceBrokerUpdateRequestAnnotationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    serviceBrokerUpdateRequestAnnotationType                 = reflect.TypeOf(&ServiceBrokerUpdateRequestAnnotation{})\n    serviceBrokerUpdateRequestAnnotationMapping              = queries.MakeStructMapping(serviceBrokerUpdateRequestAnnotationType)\n    serviceBrokerUpdateRequestAnnotationPrimaryKeyMapping, _ = queries.BindMapping(serviceBrokerUpdateRequestAnnotationType, serviceBrokerUpdateRequestAnnotationMapping, serviceBrokerUpdateRequestAnnotationPrimaryKeyColumns)\n    serviceBrokerUpdateRequestAnnotationInsertCacheMut       sync.RWMutex\n    serviceBrokerUpdateRequestAnnotationInsertCache          = make(map[string]insertCache)\n    serviceBrokerUpdateRequestAnnotationUpdateCacheMut       sync.RWMutex\n    serviceBrokerUpdateRequestAnnotationUpdateCache          = make(map[string]updateCache)\n    serviceBrokerUpdateRequestAnnotationUpsertCacheMut       sync.RWMutex\n    serviceBrokerUpdateRequestAnnotationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    serviceBrokerUpdateRequestLabelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    serviceBrokerUpdateRequestLabelColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    serviceBrokerUpdateRequestLabelColumnsWithDefault    = []string{"id", "created_at"}\n    serviceBrokerUpdateRequestLabelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    serviceBrokerUpdateRequestLabelType                 = reflect.TypeOf(&ServiceBrokerUpdateRequestLabel{})\n    serviceBrokerUpdateRequestLabelMapping              = queries.MakeStructMapping(serviceBrokerUpdateRequestLabelType)\n    serviceBrokerUpdateRequestLabelPrimaryKeyMapping, _ = queries.BindMapping(serviceBrokerUpdateRequestLabelType, serviceBrokerUpdateRequestLabelMapping, serviceBrokerUpdateRequestLabelPrimaryKeyColumns)\n    serviceBrokerUpdateRequestLabelInsertCacheMut       sync.RWMutex\n    serviceBrokerUpdateRequestLabelInsertCache          = make(map[string]insertCache)\n    serviceBrokerUpdateRequestLabelUpdateCacheMut       sync.RWMutex\n    serviceBrokerUpdateRequestLabelUpdateCache          = make(map[string]updateCache)\n    serviceBrokerUpdateRequestLabelUpsertCacheMut       sync.RWMutex\n    serviceBrokerUpdateRequestLabelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    serviceBrokerUpdateRequestAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "broker_url", "authentication", "salt", "encryption_key_label", "encryption_iterations", "service_broker_id", "fk_service_brokers_id"}\n    serviceBrokerUpdateRequestColumnsWithoutDefault = []string{"guid", "updated_at", "name", "broker_url", "authentication", "salt", "encryption_key_label", "service_broker_id", "fk_service_brokers_id"}\n    serviceBrokerUpdateRequestColumnsWithDefault    = []string{"id", "created_at", "encryption_iterations"}\n    serviceBrokerUpdateRequestPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    serviceBrokerUpdateRequestType                 = reflect.TypeOf(&ServiceBrokerUpdateRequest{})\n    serviceBrokerUpdateRequestMapping              = queries.MakeStructMapping(serviceBrokerUpdateRequestType)\n    serviceBrokerUpdateRequestPrimaryKeyMapping, _ = queries.BindMapping(serviceBrokerUpdateRequestType, serviceBrokerUpdateRequestMapping, serviceBrokerUpdateRequestPrimaryKeyColumns)\n    serviceBrokerUpdateRequestInsertCacheMut       sync.RWMutex\n    serviceBrokerUpdateRequestInsertCache          = make(map[string]insertCache)\n    serviceBrokerUpdateRequestUpdateCacheMut       sync.RWMutex\n    serviceBrokerUpdateRequestUpdateCache          = make(map[string]updateCache)\n    serviceBrokerUpdateRequestUpsertCacheMut       sync.RWMutex\n    serviceBrokerUpdateRequestUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    serviceBrokerAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "broker_url", "auth_password", "salt", "auth_username", "space_id", "encryption_key_label", "encryption_iterations", "state"}\n    serviceBrokerColumnsWithoutDefault = []string{"guid", "updated_at", "name", "broker_url", "auth_password", "salt", "auth_username", "space_id", "encryption_key_label"}\n    serviceBrokerColumnsWithDefault    = []string{"id", "created_at", "encryption_iterations", "state"}\n    serviceBrokerPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    serviceBrokerType                 = reflect.TypeOf(&ServiceBroker{})\n    serviceBrokerMapping              = queries.MakeStructMapping(serviceBrokerType)\n    serviceBrokerPrimaryKeyMapping, _ = queries.BindMapping(serviceBrokerType, serviceBrokerMapping, serviceBrokerPrimaryKeyColumns)\n    serviceBrokerInsertCacheMut       sync.RWMutex\n    serviceBrokerInsertCache          = make(map[string]insertCache)\n    serviceBrokerUpdateCacheMut       sync.RWMutex\n    serviceBrokerUpdateCache          = make(map[string]updateCache)\n    serviceBrokerUpsertCacheMut       sync.RWMutex\n    serviceBrokerUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    serviceDashboardClientAllColumns            = []string{"id", "created_at", "updated_at", "uaa_id", "service_broker_id"}\n    serviceDashboardClientColumnsWithoutDefault = []string{"updated_at", "uaa_id", "service_broker_id"}\n    serviceDashboardClientColumnsWithDefault    = []string{"id", "created_at"}\n    serviceDashboardClientPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    serviceDashboardClientType                 = reflect.TypeOf(&ServiceDashboardClient{})\n    serviceDashboardClientMapping              = queries.MakeStructMapping(serviceDashboardClientType)\n    serviceDashboardClientPrimaryKeyMapping, _ = queries.BindMapping(serviceDashboardClientType, serviceDashboardClientMapping, serviceDashboardClientPrimaryKeyColumns)\n    serviceDashboardClientInsertCacheMut       sync.RWMutex\n    serviceDashboardClientInsertCache          = make(map[string]insertCache)\n    serviceDashboardClientUpdateCacheMut       sync.RWMutex\n    serviceDashboardClientUpdateCache          = make(map[string]updateCache)\n    serviceDashboardClientUpsertCacheMut       sync.RWMutex\n    serviceDashboardClientUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    serviceInstanceAnnotationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    serviceInstanceAnnotationColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    serviceInstanceAnnotationColumnsWithDefault    = []string{"id", "created_at"}\n    serviceInstanceAnnotationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    serviceInstanceAnnotationType                 = reflect.TypeOf(&ServiceInstanceAnnotation{})\n    serviceInstanceAnnotationMapping              = queries.MakeStructMapping(serviceInstanceAnnotationType)\n    serviceInstanceAnnotationPrimaryKeyMapping, _ = queries.BindMapping(serviceInstanceAnnotationType, serviceInstanceAnnotationMapping, serviceInstanceAnnotationPrimaryKeyColumns)\n    serviceInstanceAnnotationInsertCacheMut       sync.RWMutex\n    serviceInstanceAnnotationInsertCache          = make(map[string]insertCache)\n    serviceInstanceAnnotationUpdateCacheMut       sync.RWMutex\n    serviceInstanceAnnotationUpdateCache          = make(map[string]updateCache)\n    serviceInstanceAnnotationUpsertCacheMut       sync.RWMutex\n    serviceInstanceAnnotationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    serviceInstanceLabelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    serviceInstanceLabelColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    serviceInstanceLabelColumnsWithDefault    = []string{"id", "created_at"}\n    serviceInstanceLabelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    serviceInstanceLabelType                 = reflect.TypeOf(&ServiceInstanceLabel{})\n    serviceInstanceLabelMapping              = queries.MakeStructMapping(serviceInstanceLabelType)\n    serviceInstanceLabelPrimaryKeyMapping, _ = queries.BindMapping(serviceInstanceLabelType, serviceInstanceLabelMapping, serviceInstanceLabelPrimaryKeyColumns)\n    serviceInstanceLabelInsertCacheMut       sync.RWMutex\n    serviceInstanceLabelInsertCache          = make(map[string]insertCache)\n    serviceInstanceLabelUpdateCacheMut       sync.RWMutex\n    serviceInstanceLabelUpdateCache          = make(map[string]updateCache)\n    serviceInstanceLabelUpsertCacheMut       sync.RWMutex\n    serviceInstanceLabelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    serviceInstanceOperationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "service_instance_id", "type", "state", "description", "proposed_changes", "broker_provided_operation"}\n    serviceInstanceOperationColumnsWithoutDefault = []string{"guid", "updated_at", "service_instance_id", "type", "state", "description", "broker_provided_operation"}\n    serviceInstanceOperationColumnsWithDefault    = []string{"id", "created_at", "proposed_changes"}\n    serviceInstanceOperationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    serviceInstanceOperationType                 = reflect.TypeOf(&ServiceInstanceOperation{})\n    serviceInstanceOperationMapping              = queries.MakeStructMapping(serviceInstanceOperationType)\n    serviceInstanceOperationPrimaryKeyMapping, _ = queries.BindMapping(serviceInstanceOperationType, serviceInstanceOperationMapping, serviceInstanceOperationPrimaryKeyColumns)\n    serviceInstanceOperationInsertCacheMut       sync.RWMutex\n    serviceInstanceOperationInsertCache          = make(map[string]insertCache)\n    serviceInstanceOperationUpdateCacheMut       sync.RWMutex\n    serviceInstanceOperationUpdateCache          = make(map[string]updateCache)\n    serviceInstanceOperationUpsertCacheMut       sync.RWMutex\n    serviceInstanceOperationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    serviceInstanceAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "credentials", "gateway_name", "gateway_data", "space_id", "service_plan_id", "salt", "dashboard_url", "is_gateway_service", "syslog_drain_url", "tags", "route_service_url", "encryption_key_label", "encryption_iterations", "maintenance_info"}\n    serviceInstanceColumnsWithoutDefault = []string{"guid", "updated_at", "name", "credentials", "gateway_name", "gateway_data", "space_id", "service_plan_id", "salt", "dashboard_url", "syslog_drain_url", "tags", "route_service_url", "encryption_key_label", "maintenance_info"}\n    serviceInstanceColumnsWithDefault    = []string{"id", "created_at", "is_gateway_service", "encryption_iterations"}\n    serviceInstancePrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    serviceInstanceType                 = reflect.TypeOf(&ServiceInstance{})\n    serviceInstanceMapping              = queries.MakeStructMapping(serviceInstanceType)\n    serviceInstancePrimaryKeyMapping, _ = queries.BindMapping(serviceInstanceType, serviceInstanceMapping, serviceInstancePrimaryKeyColumns)\n    serviceInstanceInsertCacheMut       sync.RWMutex\n    serviceInstanceInsertCache          = make(map[string]insertCache)\n    serviceInstanceUpdateCacheMut       sync.RWMutex\n    serviceInstanceUpdateCache          = make(map[string]updateCache)\n    serviceInstanceUpsertCacheMut       sync.RWMutex\n    serviceInstanceUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    serviceKeyAnnotationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    serviceKeyAnnotationColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    serviceKeyAnnotationColumnsWithDefault    = []string{"id", "created_at"}\n    serviceKeyAnnotationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    serviceKeyAnnotationType                 = reflect.TypeOf(&ServiceKeyAnnotation{})\n    serviceKeyAnnotationMapping              = queries.MakeStructMapping(serviceKeyAnnotationType)\n    serviceKeyAnnotationPrimaryKeyMapping, _ = queries.BindMapping(serviceKeyAnnotationType, serviceKeyAnnotationMapping, serviceKeyAnnotationPrimaryKeyColumns)\n    serviceKeyAnnotationInsertCacheMut       sync.RWMutex\n    serviceKeyAnnotationInsertCache          = make(map[string]insertCache)\n    serviceKeyAnnotationUpdateCacheMut       sync.RWMutex\n    serviceKeyAnnotationUpdateCache          = make(map[string]updateCache)\n    serviceKeyAnnotationUpsertCacheMut       sync.RWMutex\n    serviceKeyAnnotationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    serviceKeyLabelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    serviceKeyLabelColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    serviceKeyLabelColumnsWithDefault    = []string{"id", "created_at"}\n    serviceKeyLabelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    serviceKeyLabelType                 = reflect.TypeOf(&ServiceKeyLabel{})\n    serviceKeyLabelMapping              = queries.MakeStructMapping(serviceKeyLabelType)\n    serviceKeyLabelPrimaryKeyMapping, _ = queries.BindMapping(serviceKeyLabelType, serviceKeyLabelMapping, serviceKeyLabelPrimaryKeyColumns)\n    serviceKeyLabelInsertCacheMut       sync.RWMutex\n    serviceKeyLabelInsertCache          = make(map[string]insertCache)\n    serviceKeyLabelUpdateCacheMut       sync.RWMutex\n    serviceKeyLabelUpdateCache          = make(map[string]updateCache)\n    serviceKeyLabelUpsertCacheMut       sync.RWMutex\n    serviceKeyLabelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    serviceKeyOperationAllColumns            = []string{"id", "created_at", "updated_at", "service_key_id", "state", "type", "description", "broker_provided_operation"}\n    serviceKeyOperationColumnsWithoutDefault = []string{"updated_at", "service_key_id", "state", "type", "description", "broker_provided_operation"}\n    serviceKeyOperationColumnsWithDefault    = []string{"id", "created_at"}\n    serviceKeyOperationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    serviceKeyOperationType                 = reflect.TypeOf(&ServiceKeyOperation{})\n    serviceKeyOperationMapping              = queries.MakeStructMapping(serviceKeyOperationType)\n    serviceKeyOperationPrimaryKeyMapping, _ = queries.BindMapping(serviceKeyOperationType, serviceKeyOperationMapping, serviceKeyOperationPrimaryKeyColumns)\n    serviceKeyOperationInsertCacheMut       sync.RWMutex\n    serviceKeyOperationInsertCache          = make(map[string]insertCache)\n    serviceKeyOperationUpdateCacheMut       sync.RWMutex\n    serviceKeyOperationUpdateCache          = make(map[string]updateCache)\n    serviceKeyOperationUpsertCacheMut       sync.RWMutex\n    serviceKeyOperationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    serviceKeyAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "salt", "credentials", "service_instance_id", "encryption_key_label", "encryption_iterations"}\n    serviceKeyColumnsWithoutDefault = []string{"guid", "updated_at", "name", "salt", "credentials", "service_instance_id", "encryption_key_label"}\n    serviceKeyColumnsWithDefault    = []string{"id", "created_at", "encryption_iterations"}\n    serviceKeyPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    serviceKeyType                 = reflect.TypeOf(&ServiceKey{})\n    serviceKeyMapping              = queries.MakeStructMapping(serviceKeyType)\n    serviceKeyPrimaryKeyMapping, _ = queries.BindMapping(serviceKeyType, serviceKeyMapping, serviceKeyPrimaryKeyColumns)\n    serviceKeyInsertCacheMut       sync.RWMutex\n    serviceKeyInsertCache          = make(map[string]insertCache)\n    serviceKeyUpdateCacheMut       sync.RWMutex\n    serviceKeyUpdateCache          = make(map[string]updateCache)\n    serviceKeyUpsertCacheMut       sync.RWMutex\n    serviceKeyUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    serviceOfferingAnnotationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    serviceOfferingAnnotationColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    serviceOfferingAnnotationColumnsWithDefault    = []string{"id", "created_at"}\n    serviceOfferingAnnotationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    serviceOfferingAnnotationType                 = reflect.TypeOf(&ServiceOfferingAnnotation{})\n    serviceOfferingAnnotationMapping              = queries.MakeStructMapping(serviceOfferingAnnotationType)\n    serviceOfferingAnnotationPrimaryKeyMapping, _ = queries.BindMapping(serviceOfferingAnnotationType, serviceOfferingAnnotationMapping, serviceOfferingAnnotationPrimaryKeyColumns)\n    serviceOfferingAnnotationInsertCacheMut       sync.RWMutex\n    serviceOfferingAnnotationInsertCache          = make(map[string]insertCache)\n    serviceOfferingAnnotationUpdateCacheMut       sync.RWMutex\n    serviceOfferingAnnotationUpdateCache          = make(map[string]updateCache)\n    serviceOfferingAnnotationUpsertCacheMut       sync.RWMutex\n    serviceOfferingAnnotationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    serviceOfferingLabelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    serviceOfferingLabelColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    serviceOfferingLabelColumnsWithDefault    = []string{"id", "created_at"}\n    serviceOfferingLabelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    serviceOfferingLabelType                 = reflect.TypeOf(&ServiceOfferingLabel{})\n    serviceOfferingLabelMapping              = queries.MakeStructMapping(serviceOfferingLabelType)\n    serviceOfferingLabelPrimaryKeyMapping, _ = queries.BindMapping(serviceOfferingLabelType, serviceOfferingLabelMapping, serviceOfferingLabelPrimaryKeyColumns)\n    serviceOfferingLabelInsertCacheMut       sync.RWMutex\n    serviceOfferingLabelInsertCache          = make(map[string]insertCache)\n    serviceOfferingLabelUpdateCacheMut       sync.RWMutex\n    serviceOfferingLabelUpdateCache          = make(map[string]updateCache)\n    serviceOfferingLabelUpsertCacheMut       sync.RWMutex\n    serviceOfferingLabelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    servicePlanAnnotationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    servicePlanAnnotationColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    servicePlanAnnotationColumnsWithDefault    = []string{"id", "created_at"}\n    servicePlanAnnotationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    servicePlanAnnotationType                 = reflect.TypeOf(&ServicePlanAnnotation{})\n    servicePlanAnnotationMapping              = queries.MakeStructMapping(servicePlanAnnotationType)\n    servicePlanAnnotationPrimaryKeyMapping, _ = queries.BindMapping(servicePlanAnnotationType, servicePlanAnnotationMapping, servicePlanAnnotationPrimaryKeyColumns)\n    servicePlanAnnotationInsertCacheMut       sync.RWMutex\n    servicePlanAnnotationInsertCache          = make(map[string]insertCache)\n    servicePlanAnnotationUpdateCacheMut       sync.RWMutex\n    servicePlanAnnotationUpdateCache          = make(map[string]updateCache)\n    servicePlanAnnotationUpsertCacheMut       sync.RWMutex\n    servicePlanAnnotationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    servicePlanLabelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    servicePlanLabelColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    servicePlanLabelColumnsWithDefault    = []string{"id", "created_at"}\n    servicePlanLabelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    servicePlanLabelType                 = reflect.TypeOf(&ServicePlanLabel{})\n    servicePlanLabelMapping              = queries.MakeStructMapping(servicePlanLabelType)\n    servicePlanLabelPrimaryKeyMapping, _ = queries.BindMapping(servicePlanLabelType, servicePlanLabelMapping, servicePlanLabelPrimaryKeyColumns)\n    servicePlanLabelInsertCacheMut       sync.RWMutex\n    servicePlanLabelInsertCache          = make(map[string]insertCache)\n    servicePlanLabelUpdateCacheMut       sync.RWMutex\n    servicePlanLabelUpdateCache          = make(map[string]updateCache)\n    servicePlanLabelUpsertCacheMut       sync.RWMutex\n    servicePlanLabelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    servicePlanVisibilityAllColumns            = []string{"id", "guid", "created_at", "updated_at", "service_plan_id", "organization_id"}\n    servicePlanVisibilityColumnsWithoutDefault = []string{"guid", "updated_at", "service_plan_id", "organization_id"}\n    servicePlanVisibilityColumnsWithDefault    = []string{"id", "created_at"}\n    servicePlanVisibilityPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    servicePlanVisibilityType                 = reflect.TypeOf(&ServicePlanVisibility{})\n    servicePlanVisibilityMapping              = queries.MakeStructMapping(servicePlanVisibilityType)\n    servicePlanVisibilityPrimaryKeyMapping, _ = queries.BindMapping(servicePlanVisibilityType, servicePlanVisibilityMapping, servicePlanVisibilityPrimaryKeyColumns)\n    servicePlanVisibilityInsertCacheMut       sync.RWMutex\n    servicePlanVisibilityInsertCache          = make(map[string]insertCache)\n    servicePlanVisibilityUpdateCacheMut       sync.RWMutex\n    servicePlanVisibilityUpdateCache          = make(map[string]updateCache)\n    servicePlanVisibilityUpsertCacheMut       sync.RWMutex\n    servicePlanVisibilityUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    servicePlanAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "description", "free", "service_id", "extra", "unique_id", "public", "active", "bindable", "create_instance_schema", "update_instance_schema", "create_binding_schema", "plan_updateable", "maximum_polling_duration", "maintenance_info"}\n    servicePlanColumnsWithoutDefault = []string{"guid", "updated_at", "name", "description", "free", "service_id", "extra", "unique_id", "bindable", "create_instance_schema", "update_instance_schema", "create_binding_schema", "plan_updateable", "maximum_polling_duration", "maintenance_info"}\n    servicePlanColumnsWithDefault    = []string{"id", "created_at", "public", "active"}\n    servicePlanPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    servicePlanType                 = reflect.TypeOf(&ServicePlan{})\n    servicePlanMapping              = queries.MakeStructMapping(servicePlanType)\n    servicePlanPrimaryKeyMapping, _ = queries.BindMapping(servicePlanType, servicePlanMapping, servicePlanPrimaryKeyColumns)\n    servicePlanInsertCacheMut       sync.RWMutex\n    servicePlanInsertCache          = make(map[string]insertCache)\n    servicePlanUpdateCacheMut       sync.RWMutex\n    servicePlanUpdateCache          = make(map[string]updateCache)\n    servicePlanUpsertCacheMut       sync.RWMutex\n    servicePlanUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    serviceUsageEventAllColumns            = []string{"id", "guid", "created_at", "state", "org_guid", "space_guid", "space_name", "service_instance_guid", "service_instance_name", "service_instance_type", "service_plan_guid", "service_plan_name", "service_guid", "service_label", "service_broker_name", "service_broker_guid"}\n    serviceUsageEventColumnsWithoutDefault = []string{"guid", "created_at", "state", "org_guid", "space_guid", "space_name", "service_instance_guid", "service_instance_name", "service_instance_type", "service_plan_guid", "service_plan_name", "service_guid", "service_label", "service_broker_name", "service_broker_guid"}\n    serviceUsageEventColumnsWithDefault    = []string{"id"}\n    serviceUsageEventPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    serviceUsageEventType                 = reflect.TypeOf(&ServiceUsageEvent{})\n    serviceUsageEventMapping              = queries.MakeStructMapping(serviceUsageEventType)\n    serviceUsageEventPrimaryKeyMapping, _ = queries.BindMapping(serviceUsageEventType, serviceUsageEventMapping, serviceUsageEventPrimaryKeyColumns)\n    serviceUsageEventInsertCacheMut       sync.RWMutex\n    serviceUsageEventInsertCache          = make(map[string]insertCache)\n    serviceUsageEventUpdateCacheMut       sync.RWMutex\n    serviceUsageEventUpdateCache          = make(map[string]updateCache)\n    serviceUsageEventUpsertCacheMut       sync.RWMutex\n    serviceUsageEventUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    serviceAllColumns            = []string{"id", "guid", "created_at", "updated_at", "label", "description", "info_url", "acls", "timeout", "active", "extra", "unique_id", "bindable", "tags", "documentation_url", "service_broker_id", "long_description", "requires", "purging", "plan_updateable", "bindings_retrievable", "instances_retrievable", "allow_context_updates"}\n    serviceColumnsWithoutDefault = []string{"guid", "updated_at", "label", "description", "info_url", "acls", "timeout", "extra", "unique_id", "bindable", "tags", "documentation_url", "service_broker_id", "long_description", "requires"}\n    serviceColumnsWithDefault    = []string{"id", "created_at", "active", "purging", "plan_updateable", "bindings_retrievable", "instances_retrievable", "allow_context_updates"}\n    servicePrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    serviceType                 = reflect.TypeOf(&Service{})\n    serviceMapping              = queries.MakeStructMapping(serviceType)\n    servicePrimaryKeyMapping, _ = queries.BindMapping(serviceType, serviceMapping, servicePrimaryKeyColumns)\n    serviceInsertCacheMut       sync.RWMutex\n    serviceInsertCache          = make(map[string]insertCache)\n    serviceUpdateCacheMut       sync.RWMutex\n    serviceUpdateCache          = make(map[string]updateCache)\n    serviceUpsertCacheMut       sync.RWMutex\n    serviceUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    sidecarProcessTypeAllColumns            = []string{"id", "guid", "created_at", "updated_at", "type", "sidecar_guid", "app_guid"}\n    sidecarProcessTypeColumnsWithoutDefault = []string{"guid", "updated_at", "type", "sidecar_guid", "app_guid"}\n    sidecarProcessTypeColumnsWithDefault    = []string{"id", "created_at"}\n    sidecarProcessTypePrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    sidecarProcessTypeType                 = reflect.TypeOf(&SidecarProcessType{})\n    sidecarProcessTypeMapping              = queries.MakeStructMapping(sidecarProcessTypeType)\n    sidecarProcessTypePrimaryKeyMapping, _ = queries.BindMapping(sidecarProcessTypeType, sidecarProcessTypeMapping, sidecarProcessTypePrimaryKeyColumns)\n    sidecarProcessTypeInsertCacheMut       sync.RWMutex\n    sidecarProcessTypeInsertCache          = make(map[string]insertCache)\n    sidecarProcessTypeUpdateCacheMut       sync.RWMutex\n    sidecarProcessTypeUpdateCache          = make(map[string]updateCache)\n    sidecarProcessTypeUpsertCacheMut       sync.RWMutex\n    sidecarProcessTypeUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    sidecarAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "command", "app_guid", "memory", "origin"}\n    sidecarColumnsWithoutDefault = []string{"guid", "updated_at", "name", "command", "app_guid", "memory"}\n    sidecarColumnsWithDefault    = []string{"id", "created_at", "origin"}\n    sidecarPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    sidecarType                 = reflect.TypeOf(&Sidecar{})\n    sidecarMapping              = queries.MakeStructMapping(sidecarType)\n    sidecarPrimaryKeyMapping, _ = queries.BindMapping(sidecarType, sidecarMapping, sidecarPrimaryKeyColumns)\n    sidecarInsertCacheMut       sync.RWMutex\n    sidecarInsertCache          = make(map[string]insertCache)\n    sidecarUpdateCacheMut       sync.RWMutex\n    sidecarUpdateCache          = make(map[string]updateCache)\n    sidecarUpsertCacheMut       sync.RWMutex\n    sidecarUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    spaceAnnotationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    spaceAnnotationColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    spaceAnnotationColumnsWithDefault    = []string{"id", "created_at"}\n    spaceAnnotationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    spaceAnnotationType                 = reflect.TypeOf(&SpaceAnnotation{})\n    spaceAnnotationMapping              = queries.MakeStructMapping(spaceAnnotationType)\n    spaceAnnotationPrimaryKeyMapping, _ = queries.BindMapping(spaceAnnotationType, spaceAnnotationMapping, spaceAnnotationPrimaryKeyColumns)\n    spaceAnnotationInsertCacheMut       sync.RWMutex\n    spaceAnnotationInsertCache          = make(map[string]insertCache)\n    spaceAnnotationUpdateCacheMut       sync.RWMutex\n    spaceAnnotationUpdateCache          = make(map[string]updateCache)\n    spaceAnnotationUpsertCacheMut       sync.RWMutex\n    spaceAnnotationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    spaceLabelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    spaceLabelColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    spaceLabelColumnsWithDefault    = []string{"id", "created_at"}\n    spaceLabelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    spaceLabelType                 = reflect.TypeOf(&SpaceLabel{})\n    spaceLabelMapping              = queries.MakeStructMapping(spaceLabelType)\n    spaceLabelPrimaryKeyMapping, _ = queries.BindMapping(spaceLabelType, spaceLabelMapping, spaceLabelPrimaryKeyColumns)\n    spaceLabelInsertCacheMut       sync.RWMutex\n    spaceLabelInsertCache          = make(map[string]insertCache)\n    spaceLabelUpdateCacheMut       sync.RWMutex\n    spaceLabelUpdateCache          = make(map[string]updateCache)\n    spaceLabelUpsertCacheMut       sync.RWMutex\n    spaceLabelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    spaceQuotaDefinitionAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "non_basic_services_allowed", "total_services", "memory_limit", "total_routes", "instance_memory_limit", "organization_id", "app_instance_limit", "app_task_limit", "total_service_keys", "total_reserved_route_ports"}\n    spaceQuotaDefinitionColumnsWithoutDefault = []string{"guid", "updated_at", "name", "non_basic_services_allowed", "total_services", "memory_limit", "total_routes", "organization_id"}\n    spaceQuotaDefinitionColumnsWithDefault    = []string{"id", "created_at", "instance_memory_limit", "app_instance_limit", "app_task_limit", "total_service_keys", "total_reserved_route_ports"}\n    spaceQuotaDefinitionPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    spaceQuotaDefinitionType                 = reflect.TypeOf(&SpaceQuotaDefinition{})\n    spaceQuotaDefinitionMapping              = queries.MakeStructMapping(spaceQuotaDefinitionType)\n    spaceQuotaDefinitionPrimaryKeyMapping, _ = queries.BindMapping(spaceQuotaDefinitionType, spaceQuotaDefinitionMapping, spaceQuotaDefinitionPrimaryKeyColumns)\n    spaceQuotaDefinitionInsertCacheMut       sync.RWMutex\n    spaceQuotaDefinitionInsertCache          = make(map[string]insertCache)\n    spaceQuotaDefinitionUpdateCacheMut       sync.RWMutex\n    spaceQuotaDefinitionUpdateCache          = make(map[string]updateCache)\n    spaceQuotaDefinitionUpsertCacheMut       sync.RWMutex\n    spaceQuotaDefinitionUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    spaceAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "organization_id", "space_quota_definition_id", "allow_ssh", "isolation_segment_guid"}\n    spaceColumnsWithoutDefault = []string{"guid", "updated_at", "name", "organization_id", "space_quota_definition_id", "isolation_segment_guid"}\n    spaceColumnsWithDefault    = []string{"id", "created_at", "allow_ssh"}\n    spacePrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    spaceType                 = reflect.TypeOf(&Space{})\n    spaceMapping              = queries.MakeStructMapping(spaceType)\n    spacePrimaryKeyMapping, _ = queries.BindMapping(spaceType, spaceMapping, spacePrimaryKeyColumns)\n    spaceInsertCacheMut       sync.RWMutex\n    spaceInsertCache          = make(map[string]insertCache)\n    spaceUpdateCacheMut       sync.RWMutex\n    spaceUpdateCache          = make(map[string]updateCache)\n    spaceUpsertCacheMut       sync.RWMutex\n    spaceUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    spacesApplicationSupporterAllColumns            = []string{"spaces_application_supporters_pk", "role_guid", "space_id", "user_id", "created_at", "updated_at"}\n    spacesApplicationSupporterColumnsWithoutDefault = []string{"role_guid", "space_id", "user_id"}\n    spacesApplicationSupporterColumnsWithDefault    = []string{"spaces_application_supporters_pk", "created_at", "updated_at"}\n    spacesApplicationSupporterPrimaryKeyColumns     = []string{"spaces_application_supporters_pk"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    spacesApplicationSupporterType                 = reflect.TypeOf(&SpacesApplicationSupporter{})\n    spacesApplicationSupporterMapping              = queries.MakeStructMapping(spacesApplicationSupporterType)\n    spacesApplicationSupporterPrimaryKeyMapping, _ = queries.BindMapping(spacesApplicationSupporterType, spacesApplicationSupporterMapping, spacesApplicationSupporterPrimaryKeyColumns)\n    spacesApplicationSupporterInsertCacheMut       sync.RWMutex\n    spacesApplicationSupporterInsertCache          = make(map[string]insertCache)\n    spacesApplicationSupporterUpdateCacheMut       sync.RWMutex\n    spacesApplicationSupporterUpdateCache          = make(map[string]updateCache)\n    spacesApplicationSupporterUpsertCacheMut       sync.RWMutex\n    spacesApplicationSupporterUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    spacesAuditorAllColumns            = []string{"space_id", "user_id", "spaces_auditors_pk", "role_guid", "created_at", "updated_at"}\n    spacesAuditorColumnsWithoutDefault = []string{"space_id", "user_id", "role_guid"}\n    spacesAuditorColumnsWithDefault    = []string{"spaces_auditors_pk", "created_at", "updated_at"}\n    spacesAuditorPrimaryKeyColumns     = []string{"spaces_auditors_pk"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    spacesAuditorType                 = reflect.TypeOf(&SpacesAuditor{})\n    spacesAuditorMapping              = queries.MakeStructMapping(spacesAuditorType)\n    spacesAuditorPrimaryKeyMapping, _ = queries.BindMapping(spacesAuditorType, spacesAuditorMapping, spacesAuditorPrimaryKeyColumns)\n    spacesAuditorInsertCacheMut       sync.RWMutex\n    spacesAuditorInsertCache          = make(map[string]insertCache)\n    spacesAuditorUpdateCacheMut       sync.RWMutex\n    spacesAuditorUpdateCache          = make(map[string]updateCache)\n    spacesAuditorUpsertCacheMut       sync.RWMutex\n    spacesAuditorUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    spacesDeveloperAllColumns            = []string{"space_id", "user_id", "spaces_developers_pk", "role_guid", "created_at", "updated_at"}\n    spacesDeveloperColumnsWithoutDefault = []string{"space_id", "user_id", "role_guid"}\n    spacesDeveloperColumnsWithDefault    = []string{"spaces_developers_pk", "created_at", "updated_at"}\n    spacesDeveloperPrimaryKeyColumns     = []string{"spaces_developers_pk"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    spacesDeveloperType                 = reflect.TypeOf(&SpacesDeveloper{})\n    spacesDeveloperMapping              = queries.MakeStructMapping(spacesDeveloperType)\n    spacesDeveloperPrimaryKeyMapping, _ = queries.BindMapping(spacesDeveloperType, spacesDeveloperMapping, spacesDeveloperPrimaryKeyColumns)\n    spacesDeveloperInsertCacheMut       sync.RWMutex\n    spacesDeveloperInsertCache          = make(map[string]insertCache)\n    spacesDeveloperUpdateCacheMut       sync.RWMutex\n    spacesDeveloperUpdateCache          = make(map[string]updateCache)\n    spacesDeveloperUpsertCacheMut       sync.RWMutex\n    spacesDeveloperUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    spacesManagerAllColumns            = []string{"space_id", "user_id", "spaces_managers_pk", "role_guid", "created_at", "updated_at"}\n    spacesManagerColumnsWithoutDefault = []string{"space_id", "user_id", "role_guid"}\n    spacesManagerColumnsWithDefault    = []string{"spaces_managers_pk", "created_at", "updated_at"}\n    spacesManagerPrimaryKeyColumns     = []string{"spaces_managers_pk"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    spacesManagerType                 = reflect.TypeOf(&SpacesManager{})\n    spacesManagerMapping              = queries.MakeStructMapping(spacesManagerType)\n    spacesManagerPrimaryKeyMapping, _ = queries.BindMapping(spacesManagerType, spacesManagerMapping, spacesManagerPrimaryKeyColumns)\n    spacesManagerInsertCacheMut       sync.RWMutex\n    spacesManagerInsertCache          = make(map[string]insertCache)\n    spacesManagerUpdateCacheMut       sync.RWMutex\n    spacesManagerUpdateCache          = make(map[string]updateCache)\n    spacesManagerUpsertCacheMut       sync.RWMutex\n    spacesManagerUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    stackAnnotationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    stackAnnotationColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    stackAnnotationColumnsWithDefault    = []string{"id", "created_at"}\n    stackAnnotationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    stackAnnotationType                 = reflect.TypeOf(&StackAnnotation{})\n    stackAnnotationMapping              = queries.MakeStructMapping(stackAnnotationType)\n    stackAnnotationPrimaryKeyMapping, _ = queries.BindMapping(stackAnnotationType, stackAnnotationMapping, stackAnnotationPrimaryKeyColumns)\n    stackAnnotationInsertCacheMut       sync.RWMutex\n    stackAnnotationInsertCache          = make(map[string]insertCache)\n    stackAnnotationUpdateCacheMut       sync.RWMutex\n    stackAnnotationUpdateCache          = make(map[string]updateCache)\n    stackAnnotationUpsertCacheMut       sync.RWMutex\n    stackAnnotationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    stackLabelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    stackLabelColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    stackLabelColumnsWithDefault    = []string{"id", "created_at"}\n    stackLabelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    stackLabelType                 = reflect.TypeOf(&StackLabel{})\n    stackLabelMapping              = queries.MakeStructMapping(stackLabelType)\n    stackLabelPrimaryKeyMapping, _ = queries.BindMapping(stackLabelType, stackLabelMapping, stackLabelPrimaryKeyColumns)\n    stackLabelInsertCacheMut       sync.RWMutex\n    stackLabelInsertCache          = make(map[string]insertCache)\n    stackLabelUpdateCacheMut       sync.RWMutex\n    stackLabelUpdateCache          = make(map[string]updateCache)\n    stackLabelUpsertCacheMut       sync.RWMutex\n    stackLabelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    stackAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "description"}\n    stackColumnsWithoutDefault = []string{"guid", "updated_at", "name", "description"}\n    stackColumnsWithDefault    = []string{"id", "created_at"}\n    stackPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    stackType                 = reflect.TypeOf(&Stack{})\n    stackMapping              = queries.MakeStructMapping(stackType)\n    stackPrimaryKeyMapping, _ = queries.BindMapping(stackType, stackMapping, stackPrimaryKeyColumns)\n    stackInsertCacheMut       sync.RWMutex\n    stackInsertCache          = make(map[string]insertCache)\n    stackUpdateCacheMut       sync.RWMutex\n    stackUpdateCache          = make(map[string]updateCache)\n    stackUpsertCacheMut       sync.RWMutex\n    stackUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    stagingSecurityGroupsSpaceAllColumns            = []string{"staging_security_group_id", "staging_space_id", "staging_security_groups_spaces_pk"}\n    stagingSecurityGroupsSpaceColumnsWithoutDefault = []string{"staging_security_group_id", "staging_space_id"}\n    stagingSecurityGroupsSpaceColumnsWithDefault    = []string{"staging_security_groups_spaces_pk"}\n    stagingSecurityGroupsSpacePrimaryKeyColumns     = []string{"staging_security_groups_spaces_pk"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    stagingSecurityGroupsSpaceType                 = reflect.TypeOf(&StagingSecurityGroupsSpace{})\n    stagingSecurityGroupsSpaceMapping              = queries.MakeStructMapping(stagingSecurityGroupsSpaceType)\n    stagingSecurityGroupsSpacePrimaryKeyMapping, _ = queries.BindMapping(stagingSecurityGroupsSpaceType, stagingSecurityGroupsSpaceMapping, stagingSecurityGroupsSpacePrimaryKeyColumns)\n    stagingSecurityGroupsSpaceInsertCacheMut       sync.RWMutex\n    stagingSecurityGroupsSpaceInsertCache          = make(map[string]insertCache)\n    stagingSecurityGroupsSpaceUpdateCacheMut       sync.RWMutex\n    stagingSecurityGroupsSpaceUpdateCache          = make(map[string]updateCache)\n    stagingSecurityGroupsSpaceUpsertCacheMut       sync.RWMutex\n    stagingSecurityGroupsSpaceUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    taskAnnotationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    taskAnnotationColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    taskAnnotationColumnsWithDefault    = []string{"id", "created_at"}\n    taskAnnotationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    taskAnnotationType                 = reflect.TypeOf(&TaskAnnotation{})\n    taskAnnotationMapping              = queries.MakeStructMapping(taskAnnotationType)\n    taskAnnotationPrimaryKeyMapping, _ = queries.BindMapping(taskAnnotationType, taskAnnotationMapping, taskAnnotationPrimaryKeyColumns)\n    taskAnnotationInsertCacheMut       sync.RWMutex\n    taskAnnotationInsertCache          = make(map[string]insertCache)\n    taskAnnotationUpdateCacheMut       sync.RWMutex\n    taskAnnotationUpdateCache          = make(map[string]updateCache)\n    taskAnnotationUpsertCacheMut       sync.RWMutex\n    taskAnnotationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    taskLabelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    taskLabelColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    taskLabelColumnsWithDefault    = []string{"id", "created_at"}\n    taskLabelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    taskLabelType                 = reflect.TypeOf(&TaskLabel{})\n    taskLabelMapping              = queries.MakeStructMapping(taskLabelType)\n    taskLabelPrimaryKeyMapping, _ = queries.BindMapping(taskLabelType, taskLabelMapping, taskLabelPrimaryKeyColumns)\n    taskLabelInsertCacheMut       sync.RWMutex\n    taskLabelInsertCache          = make(map[string]insertCache)\n    taskLabelUpdateCacheMut       sync.RWMutex\n    taskLabelUpdateCache          = make(map[string]updateCache)\n    taskLabelUpsertCacheMut       sync.RWMutex\n    taskLabelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    taskAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "command", "state", "memory_in_mb", "encrypted_environment_variables", "salt", "failure_reason", "app_guid", "droplet_guid", "sequence_id", "disk_in_mb", "encryption_key_label", "encryption_iterations"}\n    taskColumnsWithoutDefault = []string{"guid", "updated_at", "name", "command", "state", "memory_in_mb", "encrypted_environment_variables", "salt", "failure_reason", "app_guid", "droplet_guid", "sequence_id", "disk_in_mb", "encryption_key_label"}\n    taskColumnsWithDefault    = []string{"id", "created_at", "encryption_iterations"}\n    taskPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    taskType                 = reflect.TypeOf(&Task{})\n    taskMapping              = queries.MakeStructMapping(taskType)\n    taskPrimaryKeyMapping, _ = queries.BindMapping(taskType, taskMapping, taskPrimaryKeyColumns)\n    taskInsertCacheMut       sync.RWMutex\n    taskInsertCache          = make(map[string]insertCache)\n    taskUpdateCacheMut       sync.RWMutex\n    taskUpdateCache          = make(map[string]updateCache)\n    taskUpsertCacheMut       sync.RWMutex\n    taskUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    userAnnotationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    userAnnotationColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key", "value"}\n    userAnnotationColumnsWithDefault    = []string{"id", "created_at"}\n    userAnnotationPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    userAnnotationType                 = reflect.TypeOf(&UserAnnotation{})\n    userAnnotationMapping              = queries.MakeStructMapping(userAnnotationType)\n    userAnnotationPrimaryKeyMapping, _ = queries.BindMapping(userAnnotationType, userAnnotationMapping, userAnnotationPrimaryKeyColumns)\n    userAnnotationInsertCacheMut       sync.RWMutex\n    userAnnotationInsertCache          = make(map[string]insertCache)\n    userAnnotationUpdateCacheMut       sync.RWMutex\n    userAnnotationUpdateCache          = make(map[string]updateCache)\n    userAnnotationUpsertCacheMut       sync.RWMutex\n    userAnnotationUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    userLabelAllColumns            = []string{"id", "guid", "created_at", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    userLabelColumnsWithoutDefault = []string{"guid", "updated_at", "resource_guid", "key_prefix", "key_name", "value"}\n    userLabelColumnsWithDefault    = []string{"id", "created_at"}\n    userLabelPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    userLabelType                 = reflect.TypeOf(&UserLabel{})\n    userLabelMapping              = queries.MakeStructMapping(userLabelType)\n    userLabelPrimaryKeyMapping, _ = queries.BindMapping(userLabelType, userLabelMapping, userLabelPrimaryKeyColumns)\n    userLabelInsertCacheMut       sync.RWMutex\n    userLabelInsertCache          = make(map[string]insertCache)\n    userLabelUpdateCacheMut       sync.RWMutex\n    userLabelUpdateCache          = make(map[string]updateCache)\n    userLabelUpsertCacheMut       sync.RWMutex\n    userLabelUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    userAllColumns            = []string{"id", "guid", "created_at", "updated_at", "default_space_id", "admin", "active", "is_oauth_client"}\n    userColumnsWithoutDefault = []string{"guid", "updated_at", "default_space_id", "is_oauth_client"}\n    userColumnsWithDefault    = []string{"id", "created_at", "admin", "active"}\n    userPrimaryKeyColumns     = []string{"id"}\n)\n')),(0,o.kt)("p",null,"Cache for insert\\, update and upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    userType                 = reflect.TypeOf(&User{})\n    userMapping              = queries.MakeStructMapping(userType)\n    userPrimaryKeyMapping, _ = queries.BindMapping(userType, userMapping, userPrimaryKeyColumns)\n    userInsertCacheMut       sync.RWMutex\n    userInsertCache          = make(map[string]insertCache)\n    userUpdateCacheMut       sync.RWMutex\n    userUpdateCache          = make(map[string]updateCache)\n    userUpsertCacheMut       sync.RWMutex\n    userUpsertCache          = make(map[string]insertCache)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _   = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _   = qmhelper.Where\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var AppAnnotationColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    Key:          "key",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"AppAnnotationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var AppAnnotationRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var AppAnnotationTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "app_annotations.id",\n    GUID:         "app_annotations.guid",\n    CreatedAt:    "app_annotations.created_at",\n    UpdatedAt:    "app_annotations.updated_at",\n    ResourceGUID: "app_annotations.resource_guid",\n    KeyPrefix:    "app_annotations.key_prefix",\n    Key:          "app_annotations.key",\n    Value:        "app_annotations.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var AppAnnotationWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    Key          whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"app_annotations\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"app_annotations\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"app_annotations\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"app_annotations\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"app_annotations\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"app_annotations\\".\\"key_prefix\\""},\n    Key:          whereHelpernull_String{field: "\\"app_annotations\\".\\"key\\""},\n    Value:        whereHelpernull_String{field: "\\"app_annotations\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var AppColumns = struct {\n    ID                            string\n    GUID                          string\n    CreatedAt                     string\n    UpdatedAt                     string\n    SpaceGUID                     string\n    Name                          string\n    DropletGUID                   string\n    DesiredState                  string\n    EncryptedEnvironmentVariables string\n    Salt                          string\n    MaxTaskSequenceID             string\n    BuildpackCacheSha256Checksum  string\n    EnableSSH                     string\n    EncryptionKeyLabel            string\n    EncryptionIterations          string\n    RevisionsEnabled              string\n}{\n    ID:                            "id",\n    GUID:                          "guid",\n    CreatedAt:                     "created_at",\n    UpdatedAt:                     "updated_at",\n    SpaceGUID:                     "space_guid",\n    Name:                          "name",\n    DropletGUID:                   "droplet_guid",\n    DesiredState:                  "desired_state",\n    EncryptedEnvironmentVariables: "encrypted_environment_variables",\n    Salt:                          "salt",\n    MaxTaskSequenceID:             "max_task_sequence_id",\n    BuildpackCacheSha256Checksum:  "buildpack_cache_sha256_checksum",\n    EnableSSH:                     "enable_ssh",\n    EncryptionKeyLabel:            "encryption_key_label",\n    EncryptionIterations:          "encryption_iterations",\n    RevisionsEnabled:              "revisions_enabled",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var AppEventColumns = struct {\n    ID              string\n    GUID            string\n    CreatedAt       string\n    UpdatedAt       string\n    AppID           string\n    InstanceGUID    string\n    InstanceIndex   string\n    ExitStatus      string\n    Timestamp       string\n    ExitDescription string\n}{\n    ID:              "id",\n    GUID:            "guid",\n    CreatedAt:       "created_at",\n    UpdatedAt:       "updated_at",\n    AppID:           "app_id",\n    InstanceGUID:    "instance_guid",\n    InstanceIndex:   "instance_index",\n    ExitStatus:      "exit_status",\n    Timestamp:       "timestamp",\n    ExitDescription: "exit_description",\n}\n')),(0,o.kt)("p",null,"AppEventRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var AppEventRels = struct {\n    App string\n}{\n    App: "App",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var AppEventTableColumns = struct {\n    ID              string\n    GUID            string\n    CreatedAt       string\n    UpdatedAt       string\n    AppID           string\n    InstanceGUID    string\n    InstanceIndex   string\n    ExitStatus      string\n    Timestamp       string\n    ExitDescription string\n}{\n    ID:              "app_events.id",\n    GUID:            "app_events.guid",\n    CreatedAt:       "app_events.created_at",\n    UpdatedAt:       "app_events.updated_at",\n    AppID:           "app_events.app_id",\n    InstanceGUID:    "app_events.instance_guid",\n    InstanceIndex:   "app_events.instance_index",\n    ExitStatus:      "app_events.exit_status",\n    Timestamp:       "app_events.timestamp",\n    ExitDescription: "app_events.exit_description",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var AppEventWhere = struct {\n    ID              whereHelperint\n    GUID            whereHelperstring\n    CreatedAt       whereHelpertime_Time\n    UpdatedAt       whereHelpernull_Time\n    AppID           whereHelperint\n    InstanceGUID    whereHelperstring\n    InstanceIndex   whereHelperint\n    ExitStatus      whereHelperint\n    Timestamp       whereHelpertime_Time\n    ExitDescription whereHelpernull_String\n}{\n    ID:              whereHelperint{field: "\\"app_events\\".\\"id\\""},\n    GUID:            whereHelperstring{field: "\\"app_events\\".\\"guid\\""},\n    CreatedAt:       whereHelpertime_Time{field: "\\"app_events\\".\\"created_at\\""},\n    UpdatedAt:       whereHelpernull_Time{field: "\\"app_events\\".\\"updated_at\\""},\n    AppID:           whereHelperint{field: "\\"app_events\\".\\"app_id\\""},\n    InstanceGUID:    whereHelperstring{field: "\\"app_events\\".\\"instance_guid\\""},\n    InstanceIndex:   whereHelperint{field: "\\"app_events\\".\\"instance_index\\""},\n    ExitStatus:      whereHelperint{field: "\\"app_events\\".\\"exit_status\\""},\n    Timestamp:       whereHelpertime_Time{field: "\\"app_events\\".\\"timestamp\\""},\n    ExitDescription: whereHelpernull_String{field: "\\"app_events\\".\\"exit_description\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var AppLabelColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    KeyName:      "key_name",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"AppLabelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var AppLabelRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var AppLabelTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "app_labels.id",\n    GUID:         "app_labels.guid",\n    CreatedAt:    "app_labels.created_at",\n    UpdatedAt:    "app_labels.updated_at",\n    ResourceGUID: "app_labels.resource_guid",\n    KeyPrefix:    "app_labels.key_prefix",\n    KeyName:      "app_labels.key_name",\n    Value:        "app_labels.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var AppLabelWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    KeyName      whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"app_labels\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"app_labels\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"app_labels\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"app_labels\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"app_labels\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"app_labels\\".\\"key_prefix\\""},\n    KeyName:      whereHelpernull_String{field: "\\"app_labels\\".\\"key_name\\""},\n    Value:        whereHelpernull_String{field: "\\"app_labels\\".\\"value\\""},\n}\n')),(0,o.kt)("p",null,"AppRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var AppRels = struct {\n    Space                  string\n    ResourceAppAnnotations string\n    ResourceAppLabels      string\n    Builds                 string\n    Deployments            string\n    Droplets               string\n    KpackLifecycleData     string\n    Packages               string\n    Processes              string\n    Revisions              string\n    RouteMappings          string\n    ServiceBindings        string\n    Sidecars               string\n    Tasks                  string\n}{\n    Space:                  "Space",\n    ResourceAppAnnotations: "ResourceAppAnnotations",\n    ResourceAppLabels:      "ResourceAppLabels",\n    Builds:                 "Builds",\n    Deployments:            "Deployments",\n    Droplets:               "Droplets",\n    KpackLifecycleData:     "KpackLifecycleData",\n    Packages:               "Packages",\n    Processes:              "Processes",\n    Revisions:              "Revisions",\n    RouteMappings:          "RouteMappings",\n    ServiceBindings:        "ServiceBindings",\n    Sidecars:               "Sidecars",\n    Tasks:                  "Tasks",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var AppTableColumns = struct {\n    ID                            string\n    GUID                          string\n    CreatedAt                     string\n    UpdatedAt                     string\n    SpaceGUID                     string\n    Name                          string\n    DropletGUID                   string\n    DesiredState                  string\n    EncryptedEnvironmentVariables string\n    Salt                          string\n    MaxTaskSequenceID             string\n    BuildpackCacheSha256Checksum  string\n    EnableSSH                     string\n    EncryptionKeyLabel            string\n    EncryptionIterations          string\n    RevisionsEnabled              string\n}{\n    ID:                            "apps.id",\n    GUID:                          "apps.guid",\n    CreatedAt:                     "apps.created_at",\n    UpdatedAt:                     "apps.updated_at",\n    SpaceGUID:                     "apps.space_guid",\n    Name:                          "apps.name",\n    DropletGUID:                   "apps.droplet_guid",\n    DesiredState:                  "apps.desired_state",\n    EncryptedEnvironmentVariables: "apps.encrypted_environment_variables",\n    Salt:                          "apps.salt",\n    MaxTaskSequenceID:             "apps.max_task_sequence_id",\n    BuildpackCacheSha256Checksum:  "apps.buildpack_cache_sha256_checksum",\n    EnableSSH:                     "apps.enable_ssh",\n    EncryptionKeyLabel:            "apps.encryption_key_label",\n    EncryptionIterations:          "apps.encryption_iterations",\n    RevisionsEnabled:              "apps.revisions_enabled",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var AppUsageEventColumns = struct {\n    ID                            string\n    GUID                          string\n    CreatedAt                     string\n    InstanceCount                 string\n    MemoryInMBPerInstance         string\n    State                         string\n    AppGUID                       string\n    AppName                       string\n    SpaceGUID                     string\n    SpaceName                     string\n    OrgGUID                       string\n    BuildpackGUID                 string\n    BuildpackName                 string\n    PackageState                  string\n    ParentAppName                 string\n    ParentAppGUID                 string\n    ProcessType                   string\n    TaskGUID                      string\n    TaskName                      string\n    PackageGUID                   string\n    PreviousState                 string\n    PreviousPackageState          string\n    PreviousMemoryInMBPerInstance string\n    PreviousInstanceCount         string\n}{\n    ID:                            "id",\n    GUID:                          "guid",\n    CreatedAt:                     "created_at",\n    InstanceCount:                 "instance_count",\n    MemoryInMBPerInstance:         "memory_in_mb_per_instance",\n    State:                         "state",\n    AppGUID:                       "app_guid",\n    AppName:                       "app_name",\n    SpaceGUID:                     "space_guid",\n    SpaceName:                     "space_name",\n    OrgGUID:                       "org_guid",\n    BuildpackGUID:                 "buildpack_guid",\n    BuildpackName:                 "buildpack_name",\n    PackageState:                  "package_state",\n    ParentAppName:                 "parent_app_name",\n    ParentAppGUID:                 "parent_app_guid",\n    ProcessType:                   "process_type",\n    TaskGUID:                      "task_guid",\n    TaskName:                      "task_name",\n    PackageGUID:                   "package_guid",\n    PreviousState:                 "previous_state",\n    PreviousPackageState:          "previous_package_state",\n    PreviousMemoryInMBPerInstance: "previous_memory_in_mb_per_instance",\n    PreviousInstanceCount:         "previous_instance_count",\n}\n')),(0,o.kt)("p",null,"AppUsageEventRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var AppUsageEventRels = struct {\n}{}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var AppUsageEventTableColumns = struct {\n    ID                            string\n    GUID                          string\n    CreatedAt                     string\n    InstanceCount                 string\n    MemoryInMBPerInstance         string\n    State                         string\n    AppGUID                       string\n    AppName                       string\n    SpaceGUID                     string\n    SpaceName                     string\n    OrgGUID                       string\n    BuildpackGUID                 string\n    BuildpackName                 string\n    PackageState                  string\n    ParentAppName                 string\n    ParentAppGUID                 string\n    ProcessType                   string\n    TaskGUID                      string\n    TaskName                      string\n    PackageGUID                   string\n    PreviousState                 string\n    PreviousPackageState          string\n    PreviousMemoryInMBPerInstance string\n    PreviousInstanceCount         string\n}{\n    ID:                            "app_usage_events.id",\n    GUID:                          "app_usage_events.guid",\n    CreatedAt:                     "app_usage_events.created_at",\n    InstanceCount:                 "app_usage_events.instance_count",\n    MemoryInMBPerInstance:         "app_usage_events.memory_in_mb_per_instance",\n    State:                         "app_usage_events.state",\n    AppGUID:                       "app_usage_events.app_guid",\n    AppName:                       "app_usage_events.app_name",\n    SpaceGUID:                     "app_usage_events.space_guid",\n    SpaceName:                     "app_usage_events.space_name",\n    OrgGUID:                       "app_usage_events.org_guid",\n    BuildpackGUID:                 "app_usage_events.buildpack_guid",\n    BuildpackName:                 "app_usage_events.buildpack_name",\n    PackageState:                  "app_usage_events.package_state",\n    ParentAppName:                 "app_usage_events.parent_app_name",\n    ParentAppGUID:                 "app_usage_events.parent_app_guid",\n    ProcessType:                   "app_usage_events.process_type",\n    TaskGUID:                      "app_usage_events.task_guid",\n    TaskName:                      "app_usage_events.task_name",\n    PackageGUID:                   "app_usage_events.package_guid",\n    PreviousState:                 "app_usage_events.previous_state",\n    PreviousPackageState:          "app_usage_events.previous_package_state",\n    PreviousMemoryInMBPerInstance: "app_usage_events.previous_memory_in_mb_per_instance",\n    PreviousInstanceCount:         "app_usage_events.previous_instance_count",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var AppUsageEventWhere = struct {\n    ID                            whereHelperint\n    GUID                          whereHelperstring\n    CreatedAt                     whereHelpertime_Time\n    InstanceCount                 whereHelperint\n    MemoryInMBPerInstance         whereHelperint\n    State                         whereHelperstring\n    AppGUID                       whereHelperstring\n    AppName                       whereHelperstring\n    SpaceGUID                     whereHelperstring\n    SpaceName                     whereHelperstring\n    OrgGUID                       whereHelperstring\n    BuildpackGUID                 whereHelpernull_String\n    BuildpackName                 whereHelpernull_String\n    PackageState                  whereHelpernull_String\n    ParentAppName                 whereHelpernull_String\n    ParentAppGUID                 whereHelpernull_String\n    ProcessType                   whereHelpernull_String\n    TaskGUID                      whereHelpernull_String\n    TaskName                      whereHelpernull_String\n    PackageGUID                   whereHelpernull_String\n    PreviousState                 whereHelpernull_String\n    PreviousPackageState          whereHelpernull_String\n    PreviousMemoryInMBPerInstance whereHelpernull_Int\n    PreviousInstanceCount         whereHelpernull_Int\n}{\n    ID:                            whereHelperint{field: "\\"app_usage_events\\".\\"id\\""},\n    GUID:                          whereHelperstring{field: "\\"app_usage_events\\".\\"guid\\""},\n    CreatedAt:                     whereHelpertime_Time{field: "\\"app_usage_events\\".\\"created_at\\""},\n    InstanceCount:                 whereHelperint{field: "\\"app_usage_events\\".\\"instance_count\\""},\n    MemoryInMBPerInstance:         whereHelperint{field: "\\"app_usage_events\\".\\"memory_in_mb_per_instance\\""},\n    State:                         whereHelperstring{field: "\\"app_usage_events\\".\\"state\\""},\n    AppGUID:                       whereHelperstring{field: "\\"app_usage_events\\".\\"app_guid\\""},\n    AppName:                       whereHelperstring{field: "\\"app_usage_events\\".\\"app_name\\""},\n    SpaceGUID:                     whereHelperstring{field: "\\"app_usage_events\\".\\"space_guid\\""},\n    SpaceName:                     whereHelperstring{field: "\\"app_usage_events\\".\\"space_name\\""},\n    OrgGUID:                       whereHelperstring{field: "\\"app_usage_events\\".\\"org_guid\\""},\n    BuildpackGUID:                 whereHelpernull_String{field: "\\"app_usage_events\\".\\"buildpack_guid\\""},\n    BuildpackName:                 whereHelpernull_String{field: "\\"app_usage_events\\".\\"buildpack_name\\""},\n    PackageState:                  whereHelpernull_String{field: "\\"app_usage_events\\".\\"package_state\\""},\n    ParentAppName:                 whereHelpernull_String{field: "\\"app_usage_events\\".\\"parent_app_name\\""},\n    ParentAppGUID:                 whereHelpernull_String{field: "\\"app_usage_events\\".\\"parent_app_guid\\""},\n    ProcessType:                   whereHelpernull_String{field: "\\"app_usage_events\\".\\"process_type\\""},\n    TaskGUID:                      whereHelpernull_String{field: "\\"app_usage_events\\".\\"task_guid\\""},\n    TaskName:                      whereHelpernull_String{field: "\\"app_usage_events\\".\\"task_name\\""},\n    PackageGUID:                   whereHelpernull_String{field: "\\"app_usage_events\\".\\"package_guid\\""},\n    PreviousState:                 whereHelpernull_String{field: "\\"app_usage_events\\".\\"previous_state\\""},\n    PreviousPackageState:          whereHelpernull_String{field: "\\"app_usage_events\\".\\"previous_package_state\\""},\n    PreviousMemoryInMBPerInstance: whereHelpernull_Int{field: "\\"app_usage_events\\".\\"previous_memory_in_mb_per_instance\\""},\n    PreviousInstanceCount:         whereHelpernull_Int{field: "\\"app_usage_events\\".\\"previous_instance_count\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var AppWhere = struct {\n    ID                            whereHelperint\n    GUID                          whereHelperstring\n    CreatedAt                     whereHelpertime_Time\n    UpdatedAt                     whereHelpernull_Time\n    SpaceGUID                     whereHelpernull_String\n    Name                          whereHelpernull_String\n    DropletGUID                   whereHelpernull_String\n    DesiredState                  whereHelpernull_String\n    EncryptedEnvironmentVariables whereHelpernull_String\n    Salt                          whereHelpernull_String\n    MaxTaskSequenceID             whereHelpernull_Int\n    BuildpackCacheSha256Checksum  whereHelpernull_String\n    EnableSSH                     whereHelpernull_Bool\n    EncryptionKeyLabel            whereHelpernull_String\n    EncryptionIterations          whereHelperint\n    RevisionsEnabled              whereHelpernull_Bool\n}{\n    ID:                            whereHelperint{field: "\\"apps\\".\\"id\\""},\n    GUID:                          whereHelperstring{field: "\\"apps\\".\\"guid\\""},\n    CreatedAt:                     whereHelpertime_Time{field: "\\"apps\\".\\"created_at\\""},\n    UpdatedAt:                     whereHelpernull_Time{field: "\\"apps\\".\\"updated_at\\""},\n    SpaceGUID:                     whereHelpernull_String{field: "\\"apps\\".\\"space_guid\\""},\n    Name:                          whereHelpernull_String{field: "\\"apps\\".\\"name\\""},\n    DropletGUID:                   whereHelpernull_String{field: "\\"apps\\".\\"droplet_guid\\""},\n    DesiredState:                  whereHelpernull_String{field: "\\"apps\\".\\"desired_state\\""},\n    EncryptedEnvironmentVariables: whereHelpernull_String{field: "\\"apps\\".\\"encrypted_environment_variables\\""},\n    Salt:                          whereHelpernull_String{field: "\\"apps\\".\\"salt\\""},\n    MaxTaskSequenceID:             whereHelpernull_Int{field: "\\"apps\\".\\"max_task_sequence_id\\""},\n    BuildpackCacheSha256Checksum:  whereHelpernull_String{field: "\\"apps\\".\\"buildpack_cache_sha256_checksum\\""},\n    EnableSSH:                     whereHelpernull_Bool{field: "\\"apps\\".\\"enable_ssh\\""},\n    EncryptionKeyLabel:            whereHelpernull_String{field: "\\"apps\\".\\"encryption_key_label\\""},\n    EncryptionIterations:          whereHelperint{field: "\\"apps\\".\\"encryption_iterations\\""},\n    RevisionsEnabled:              whereHelpernull_Bool{field: "\\"apps\\".\\"revisions_enabled\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildAnnotationColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    Key:          "key",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"BuildAnnotationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildAnnotationRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildAnnotationTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "build_annotations.id",\n    GUID:         "build_annotations.guid",\n    CreatedAt:    "build_annotations.created_at",\n    UpdatedAt:    "build_annotations.updated_at",\n    ResourceGUID: "build_annotations.resource_guid",\n    KeyPrefix:    "build_annotations.key_prefix",\n    Key:          "build_annotations.key",\n    Value:        "build_annotations.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildAnnotationWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    Key          whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"build_annotations\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"build_annotations\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"build_annotations\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"build_annotations\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"build_annotations\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"build_annotations\\".\\"key_prefix\\""},\n    Key:          whereHelpernull_String{field: "\\"build_annotations\\".\\"key\\""},\n    Value:        whereHelpernull_String{field: "\\"build_annotations\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildColumns = struct {\n    ID                 string\n    GUID               string\n    CreatedAt          string\n    UpdatedAt          string\n    State              string\n    PackageGUID        string\n    ErrorDescription   string\n    AppGUID            string\n    ErrorID            string\n    CreatedByUserGUID  string\n    CreatedByUserName  string\n    CreatedByUserEmail string\n    StagingMemoryInMB  string\n    StagingDiskInMB    string\n}{\n    ID:                 "id",\n    GUID:               "guid",\n    CreatedAt:          "created_at",\n    UpdatedAt:          "updated_at",\n    State:              "state",\n    PackageGUID:        "package_guid",\n    ErrorDescription:   "error_description",\n    AppGUID:            "app_guid",\n    ErrorID:            "error_id",\n    CreatedByUserGUID:  "created_by_user_guid",\n    CreatedByUserName:  "created_by_user_name",\n    CreatedByUserEmail: "created_by_user_email",\n    StagingMemoryInMB:  "staging_memory_in_mb",\n    StagingDiskInMB:    "staging_disk_in_mb",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildLabelColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    KeyName:      "key_name",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"BuildLabelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildLabelRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildLabelTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "build_labels.id",\n    GUID:         "build_labels.guid",\n    CreatedAt:    "build_labels.created_at",\n    UpdatedAt:    "build_labels.updated_at",\n    ResourceGUID: "build_labels.resource_guid",\n    KeyPrefix:    "build_labels.key_prefix",\n    KeyName:      "build_labels.key_name",\n    Value:        "build_labels.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildLabelWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    KeyName      whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"build_labels\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"build_labels\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"build_labels\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"build_labels\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"build_labels\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"build_labels\\".\\"key_prefix\\""},\n    KeyName:      whereHelpernull_String{field: "\\"build_labels\\".\\"key_name\\""},\n    Value:        whereHelpernull_String{field: "\\"build_labels\\".\\"value\\""},\n}\n')),(0,o.kt)("p",null,"BuildRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildRels = struct {\n    App                      string\n    ResourceBuildAnnotations string\n    ResourceBuildLabels      string\n    KpackLifecycleData       string\n}{\n    App:                      "App",\n    ResourceBuildAnnotations: "ResourceBuildAnnotations",\n    ResourceBuildLabels:      "ResourceBuildLabels",\n    KpackLifecycleData:       "KpackLifecycleData",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildTableColumns = struct {\n    ID                 string\n    GUID               string\n    CreatedAt          string\n    UpdatedAt          string\n    State              string\n    PackageGUID        string\n    ErrorDescription   string\n    AppGUID            string\n    ErrorID            string\n    CreatedByUserGUID  string\n    CreatedByUserName  string\n    CreatedByUserEmail string\n    StagingMemoryInMB  string\n    StagingDiskInMB    string\n}{\n    ID:                 "builds.id",\n    GUID:               "builds.guid",\n    CreatedAt:          "builds.created_at",\n    UpdatedAt:          "builds.updated_at",\n    State:              "builds.state",\n    PackageGUID:        "builds.package_guid",\n    ErrorDescription:   "builds.error_description",\n    AppGUID:            "builds.app_guid",\n    ErrorID:            "builds.error_id",\n    CreatedByUserGUID:  "builds.created_by_user_guid",\n    CreatedByUserName:  "builds.created_by_user_name",\n    CreatedByUserEmail: "builds.created_by_user_email",\n    StagingMemoryInMB:  "builds.staging_memory_in_mb",\n    StagingDiskInMB:    "builds.staging_disk_in_mb",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildWhere = struct {\n    ID                 whereHelperint\n    GUID               whereHelperstring\n    CreatedAt          whereHelpertime_Time\n    UpdatedAt          whereHelpernull_Time\n    State              whereHelpernull_String\n    PackageGUID        whereHelpernull_String\n    ErrorDescription   whereHelpernull_String\n    AppGUID            whereHelpernull_String\n    ErrorID            whereHelpernull_String\n    CreatedByUserGUID  whereHelpernull_String\n    CreatedByUserName  whereHelpernull_String\n    CreatedByUserEmail whereHelpernull_String\n    StagingMemoryInMB  whereHelpernull_Int\n    StagingDiskInMB    whereHelpernull_Int\n}{\n    ID:                 whereHelperint{field: "\\"builds\\".\\"id\\""},\n    GUID:               whereHelperstring{field: "\\"builds\\".\\"guid\\""},\n    CreatedAt:          whereHelpertime_Time{field: "\\"builds\\".\\"created_at\\""},\n    UpdatedAt:          whereHelpernull_Time{field: "\\"builds\\".\\"updated_at\\""},\n    State:              whereHelpernull_String{field: "\\"builds\\".\\"state\\""},\n    PackageGUID:        whereHelpernull_String{field: "\\"builds\\".\\"package_guid\\""},\n    ErrorDescription:   whereHelpernull_String{field: "\\"builds\\".\\"error_description\\""},\n    AppGUID:            whereHelpernull_String{field: "\\"builds\\".\\"app_guid\\""},\n    ErrorID:            whereHelpernull_String{field: "\\"builds\\".\\"error_id\\""},\n    CreatedByUserGUID:  whereHelpernull_String{field: "\\"builds\\".\\"created_by_user_guid\\""},\n    CreatedByUserName:  whereHelpernull_String{field: "\\"builds\\".\\"created_by_user_name\\""},\n    CreatedByUserEmail: whereHelpernull_String{field: "\\"builds\\".\\"created_by_user_email\\""},\n    StagingMemoryInMB:  whereHelpernull_Int{field: "\\"builds\\".\\"staging_memory_in_mb\\""},\n    StagingDiskInMB:    whereHelpernull_Int{field: "\\"builds\\".\\"staging_disk_in_mb\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildpackAnnotationColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    Key:          "key",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"BuildpackAnnotationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildpackAnnotationRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildpackAnnotationTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "buildpack_annotations.id",\n    GUID:         "buildpack_annotations.guid",\n    CreatedAt:    "buildpack_annotations.created_at",\n    UpdatedAt:    "buildpack_annotations.updated_at",\n    ResourceGUID: "buildpack_annotations.resource_guid",\n    KeyPrefix:    "buildpack_annotations.key_prefix",\n    Key:          "buildpack_annotations.key",\n    Value:        "buildpack_annotations.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildpackAnnotationWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    Key          whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"buildpack_annotations\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"buildpack_annotations\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"buildpack_annotations\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"buildpack_annotations\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"buildpack_annotations\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"buildpack_annotations\\".\\"key_prefix\\""},\n    Key:          whereHelpernull_String{field: "\\"buildpack_annotations\\".\\"key\\""},\n    Value:        whereHelpernull_String{field: "\\"buildpack_annotations\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildpackColumns = struct {\n    ID             string\n    GUID           string\n    CreatedAt      string\n    UpdatedAt      string\n    Name           string\n    Key            string\n    Position       string\n    Enabled        string\n    Locked         string\n    Filename       string\n    Sha256Checksum string\n    Stack          string\n}{\n    ID:             "id",\n    GUID:           "guid",\n    CreatedAt:      "created_at",\n    UpdatedAt:      "updated_at",\n    Name:           "name",\n    Key:            "key",\n    Position:       "position",\n    Enabled:        "enabled",\n    Locked:         "locked",\n    Filename:       "filename",\n    Sha256Checksum: "sha256_checksum",\n    Stack:          "stack",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildpackLabelColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    KeyName:      "key_name",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"BuildpackLabelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildpackLabelRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildpackLabelTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "buildpack_labels.id",\n    GUID:         "buildpack_labels.guid",\n    CreatedAt:    "buildpack_labels.created_at",\n    UpdatedAt:    "buildpack_labels.updated_at",\n    ResourceGUID: "buildpack_labels.resource_guid",\n    KeyPrefix:    "buildpack_labels.key_prefix",\n    KeyName:      "buildpack_labels.key_name",\n    Value:        "buildpack_labels.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildpackLabelWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    KeyName      whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"buildpack_labels\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"buildpack_labels\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"buildpack_labels\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"buildpack_labels\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"buildpack_labels\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"buildpack_labels\\".\\"key_prefix\\""},\n    KeyName:      whereHelpernull_String{field: "\\"buildpack_labels\\".\\"key_name\\""},\n    Value:        whereHelpernull_String{field: "\\"buildpack_labels\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildpackLifecycleBuildpackColumns = struct {\n    ID                         string\n    GUID                       string\n    CreatedAt                  string\n    UpdatedAt                  string\n    AdminBuildpackName         string\n    EncryptedBuildpackURL      string\n    EncryptedBuildpackURLSalt  string\n    BuildpackLifecycleDataGUID string\n    EncryptionKeyLabel         string\n    Version                    string\n    BuildpackName              string\n    EncryptionIterations       string\n}{\n    ID:                         "id",\n    GUID:                       "guid",\n    CreatedAt:                  "created_at",\n    UpdatedAt:                  "updated_at",\n    AdminBuildpackName:         "admin_buildpack_name",\n    EncryptedBuildpackURL:      "encrypted_buildpack_url",\n    EncryptedBuildpackURLSalt:  "encrypted_buildpack_url_salt",\n    BuildpackLifecycleDataGUID: "buildpack_lifecycle_data_guid",\n    EncryptionKeyLabel:         "encryption_key_label",\n    Version:                    "version",\n    BuildpackName:              "buildpack_name",\n    EncryptionIterations:       "encryption_iterations",\n}\n')),(0,o.kt)("p",null,"BuildpackLifecycleBuildpackRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildpackLifecycleBuildpackRels = struct {\n    BuildpackLifecycleDatum string\n}{\n    BuildpackLifecycleDatum: "BuildpackLifecycleDatum",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildpackLifecycleBuildpackTableColumns = struct {\n    ID                         string\n    GUID                       string\n    CreatedAt                  string\n    UpdatedAt                  string\n    AdminBuildpackName         string\n    EncryptedBuildpackURL      string\n    EncryptedBuildpackURLSalt  string\n    BuildpackLifecycleDataGUID string\n    EncryptionKeyLabel         string\n    Version                    string\n    BuildpackName              string\n    EncryptionIterations       string\n}{\n    ID:                         "buildpack_lifecycle_buildpacks.id",\n    GUID:                       "buildpack_lifecycle_buildpacks.guid",\n    CreatedAt:                  "buildpack_lifecycle_buildpacks.created_at",\n    UpdatedAt:                  "buildpack_lifecycle_buildpacks.updated_at",\n    AdminBuildpackName:         "buildpack_lifecycle_buildpacks.admin_buildpack_name",\n    EncryptedBuildpackURL:      "buildpack_lifecycle_buildpacks.encrypted_buildpack_url",\n    EncryptedBuildpackURLSalt:  "buildpack_lifecycle_buildpacks.encrypted_buildpack_url_salt",\n    BuildpackLifecycleDataGUID: "buildpack_lifecycle_buildpacks.buildpack_lifecycle_data_guid",\n    EncryptionKeyLabel:         "buildpack_lifecycle_buildpacks.encryption_key_label",\n    Version:                    "buildpack_lifecycle_buildpacks.version",\n    BuildpackName:              "buildpack_lifecycle_buildpacks.buildpack_name",\n    EncryptionIterations:       "buildpack_lifecycle_buildpacks.encryption_iterations",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildpackLifecycleBuildpackWhere = struct {\n    ID                         whereHelperint\n    GUID                       whereHelperstring\n    CreatedAt                  whereHelpertime_Time\n    UpdatedAt                  whereHelpernull_Time\n    AdminBuildpackName         whereHelpernull_String\n    EncryptedBuildpackURL      whereHelpernull_String\n    EncryptedBuildpackURLSalt  whereHelpernull_String\n    BuildpackLifecycleDataGUID whereHelpernull_String\n    EncryptionKeyLabel         whereHelpernull_String\n    Version                    whereHelpernull_String\n    BuildpackName              whereHelpernull_String\n    EncryptionIterations       whereHelperint\n}{\n    ID:                         whereHelperint{field: "\\"buildpack_lifecycle_buildpacks\\".\\"id\\""},\n    GUID:                       whereHelperstring{field: "\\"buildpack_lifecycle_buildpacks\\".\\"guid\\""},\n    CreatedAt:                  whereHelpertime_Time{field: "\\"buildpack_lifecycle_buildpacks\\".\\"created_at\\""},\n    UpdatedAt:                  whereHelpernull_Time{field: "\\"buildpack_lifecycle_buildpacks\\".\\"updated_at\\""},\n    AdminBuildpackName:         whereHelpernull_String{field: "\\"buildpack_lifecycle_buildpacks\\".\\"admin_buildpack_name\\""},\n    EncryptedBuildpackURL:      whereHelpernull_String{field: "\\"buildpack_lifecycle_buildpacks\\".\\"encrypted_buildpack_url\\""},\n    EncryptedBuildpackURLSalt:  whereHelpernull_String{field: "\\"buildpack_lifecycle_buildpacks\\".\\"encrypted_buildpack_url_salt\\""},\n    BuildpackLifecycleDataGUID: whereHelpernull_String{field: "\\"buildpack_lifecycle_buildpacks\\".\\"buildpack_lifecycle_data_guid\\""},\n    EncryptionKeyLabel:         whereHelpernull_String{field: "\\"buildpack_lifecycle_buildpacks\\".\\"encryption_key_label\\""},\n    Version:                    whereHelpernull_String{field: "\\"buildpack_lifecycle_buildpacks\\".\\"version\\""},\n    BuildpackName:              whereHelpernull_String{field: "\\"buildpack_lifecycle_buildpacks\\".\\"buildpack_name\\""},\n    EncryptionIterations:       whereHelperint{field: "\\"buildpack_lifecycle_buildpacks\\".\\"encryption_iterations\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildpackLifecycleDatumColumns = struct {\n    ID                        string\n    GUID                      string\n    CreatedAt                 string\n    UpdatedAt                 string\n    AppGUID                   string\n    DropletGUID               string\n    Stack                     string\n    EncryptedBuildpackURL     string\n    EncryptedBuildpackURLSalt string\n    AdminBuildpackName        string\n    BuildGUID                 string\n    EncryptionKeyLabel        string\n    EncryptionIterations      string\n}{\n    ID:                        "id",\n    GUID:                      "guid",\n    CreatedAt:                 "created_at",\n    UpdatedAt:                 "updated_at",\n    AppGUID:                   "app_guid",\n    DropletGUID:               "droplet_guid",\n    Stack:                     "stack",\n    EncryptedBuildpackURL:     "encrypted_buildpack_url",\n    EncryptedBuildpackURLSalt: "encrypted_buildpack_url_salt",\n    AdminBuildpackName:        "admin_buildpack_name",\n    BuildGUID:                 "build_guid",\n    EncryptionKeyLabel:        "encryption_key_label",\n    EncryptionIterations:      "encryption_iterations",\n}\n')),(0,o.kt)("p",null,"BuildpackLifecycleDatumRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildpackLifecycleDatumRels = struct {\n    BuildpackLifecycleBuildpacks string\n}{\n    BuildpackLifecycleBuildpacks: "BuildpackLifecycleBuildpacks",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildpackLifecycleDatumTableColumns = struct {\n    ID                        string\n    GUID                      string\n    CreatedAt                 string\n    UpdatedAt                 string\n    AppGUID                   string\n    DropletGUID               string\n    Stack                     string\n    EncryptedBuildpackURL     string\n    EncryptedBuildpackURLSalt string\n    AdminBuildpackName        string\n    BuildGUID                 string\n    EncryptionKeyLabel        string\n    EncryptionIterations      string\n}{\n    ID:                        "buildpack_lifecycle_data.id",\n    GUID:                      "buildpack_lifecycle_data.guid",\n    CreatedAt:                 "buildpack_lifecycle_data.created_at",\n    UpdatedAt:                 "buildpack_lifecycle_data.updated_at",\n    AppGUID:                   "buildpack_lifecycle_data.app_guid",\n    DropletGUID:               "buildpack_lifecycle_data.droplet_guid",\n    Stack:                     "buildpack_lifecycle_data.stack",\n    EncryptedBuildpackURL:     "buildpack_lifecycle_data.encrypted_buildpack_url",\n    EncryptedBuildpackURLSalt: "buildpack_lifecycle_data.encrypted_buildpack_url_salt",\n    AdminBuildpackName:        "buildpack_lifecycle_data.admin_buildpack_name",\n    BuildGUID:                 "buildpack_lifecycle_data.build_guid",\n    EncryptionKeyLabel:        "buildpack_lifecycle_data.encryption_key_label",\n    EncryptionIterations:      "buildpack_lifecycle_data.encryption_iterations",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildpackLifecycleDatumWhere = struct {\n    ID                        whereHelperint\n    GUID                      whereHelperstring\n    CreatedAt                 whereHelpertime_Time\n    UpdatedAt                 whereHelpernull_Time\n    AppGUID                   whereHelpernull_String\n    DropletGUID               whereHelpernull_String\n    Stack                     whereHelpernull_String\n    EncryptedBuildpackURL     whereHelpernull_String\n    EncryptedBuildpackURLSalt whereHelpernull_String\n    AdminBuildpackName        whereHelpernull_String\n    BuildGUID                 whereHelpernull_String\n    EncryptionKeyLabel        whereHelpernull_String\n    EncryptionIterations      whereHelperint\n}{\n    ID:                        whereHelperint{field: "\\"buildpack_lifecycle_data\\".\\"id\\""},\n    GUID:                      whereHelperstring{field: "\\"buildpack_lifecycle_data\\".\\"guid\\""},\n    CreatedAt:                 whereHelpertime_Time{field: "\\"buildpack_lifecycle_data\\".\\"created_at\\""},\n    UpdatedAt:                 whereHelpernull_Time{field: "\\"buildpack_lifecycle_data\\".\\"updated_at\\""},\n    AppGUID:                   whereHelpernull_String{field: "\\"buildpack_lifecycle_data\\".\\"app_guid\\""},\n    DropletGUID:               whereHelpernull_String{field: "\\"buildpack_lifecycle_data\\".\\"droplet_guid\\""},\n    Stack:                     whereHelpernull_String{field: "\\"buildpack_lifecycle_data\\".\\"stack\\""},\n    EncryptedBuildpackURL:     whereHelpernull_String{field: "\\"buildpack_lifecycle_data\\".\\"encrypted_buildpack_url\\""},\n    EncryptedBuildpackURLSalt: whereHelpernull_String{field: "\\"buildpack_lifecycle_data\\".\\"encrypted_buildpack_url_salt\\""},\n    AdminBuildpackName:        whereHelpernull_String{field: "\\"buildpack_lifecycle_data\\".\\"admin_buildpack_name\\""},\n    BuildGUID:                 whereHelpernull_String{field: "\\"buildpack_lifecycle_data\\".\\"build_guid\\""},\n    EncryptionKeyLabel:        whereHelpernull_String{field: "\\"buildpack_lifecycle_data\\".\\"encryption_key_label\\""},\n    EncryptionIterations:      whereHelperint{field: "\\"buildpack_lifecycle_data\\".\\"encryption_iterations\\""},\n}\n')),(0,o.kt)("p",null,"BuildpackRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildpackRels = struct {\n    ResourceBuildpackAnnotations string\n    ResourceBuildpackLabels      string\n}{\n    ResourceBuildpackAnnotations: "ResourceBuildpackAnnotations",\n    ResourceBuildpackLabels:      "ResourceBuildpackLabels",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildpackTableColumns = struct {\n    ID             string\n    GUID           string\n    CreatedAt      string\n    UpdatedAt      string\n    Name           string\n    Key            string\n    Position       string\n    Enabled        string\n    Locked         string\n    Filename       string\n    Sha256Checksum string\n    Stack          string\n}{\n    ID:             "buildpacks.id",\n    GUID:           "buildpacks.guid",\n    CreatedAt:      "buildpacks.created_at",\n    UpdatedAt:      "buildpacks.updated_at",\n    Name:           "buildpacks.name",\n    Key:            "buildpacks.key",\n    Position:       "buildpacks.position",\n    Enabled:        "buildpacks.enabled",\n    Locked:         "buildpacks.locked",\n    Filename:       "buildpacks.filename",\n    Sha256Checksum: "buildpacks.sha256_checksum",\n    Stack:          "buildpacks.stack",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var BuildpackWhere = struct {\n    ID             whereHelperint\n    GUID           whereHelperstring\n    CreatedAt      whereHelpertime_Time\n    UpdatedAt      whereHelpernull_Time\n    Name           whereHelperstring\n    Key            whereHelpernull_String\n    Position       whereHelperint\n    Enabled        whereHelpernull_Bool\n    Locked         whereHelpernull_Bool\n    Filename       whereHelpernull_String\n    Sha256Checksum whereHelpernull_String\n    Stack          whereHelpernull_String\n}{\n    ID:             whereHelperint{field: "\\"buildpacks\\".\\"id\\""},\n    GUID:           whereHelperstring{field: "\\"buildpacks\\".\\"guid\\""},\n    CreatedAt:      whereHelpertime_Time{field: "\\"buildpacks\\".\\"created_at\\""},\n    UpdatedAt:      whereHelpernull_Time{field: "\\"buildpacks\\".\\"updated_at\\""},\n    Name:           whereHelperstring{field: "\\"buildpacks\\".\\"name\\""},\n    Key:            whereHelpernull_String{field: "\\"buildpacks\\".\\"key\\""},\n    Position:       whereHelperint{field: "\\"buildpacks\\".\\"position\\""},\n    Enabled:        whereHelpernull_Bool{field: "\\"buildpacks\\".\\"enabled\\""},\n    Locked:         whereHelpernull_Bool{field: "\\"buildpacks\\".\\"locked\\""},\n    Filename:       whereHelpernull_String{field: "\\"buildpacks\\".\\"filename\\""},\n    Sha256Checksum: whereHelpernull_String{field: "\\"buildpacks\\".\\"sha256_checksum\\""},\n    Stack:          whereHelpernull_String{field: "\\"buildpacks\\".\\"stack\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ClockJobColumns = struct {\n    ID              string\n    Name            string\n    LastStartedAt   string\n    LastCompletedAt string\n}{\n    ID:              "id",\n    Name:            "name",\n    LastStartedAt:   "last_started_at",\n    LastCompletedAt: "last_completed_at",\n}\n')),(0,o.kt)("p",null,"ClockJobRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var ClockJobRels = struct {\n}{}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ClockJobTableColumns = struct {\n    ID              string\n    Name            string\n    LastStartedAt   string\n    LastCompletedAt string\n}{\n    ID:              "clock_jobs.id",\n    Name:            "clock_jobs.name",\n    LastStartedAt:   "clock_jobs.last_started_at",\n    LastCompletedAt: "clock_jobs.last_completed_at",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ClockJobWhere = struct {\n    ID              whereHelperint\n    Name            whereHelperstring\n    LastStartedAt   whereHelpernull_Time\n    LastCompletedAt whereHelpernull_Time\n}{\n    ID:              whereHelperint{field: "\\"clock_jobs\\".\\"id\\""},\n    Name:            whereHelperstring{field: "\\"clock_jobs\\".\\"name\\""},\n    LastStartedAt:   whereHelpernull_Time{field: "\\"clock_jobs\\".\\"last_started_at\\""},\n    LastCompletedAt: whereHelpernull_Time{field: "\\"clock_jobs\\".\\"last_completed_at\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DelayedJobColumns = struct {\n    ID         string\n    GUID       string\n    CreatedAt  string\n    UpdatedAt  string\n    Priority   string\n    Attempts   string\n    Handler    string\n    LastError  string\n    RunAt      string\n    LockedAt   string\n    FailedAt   string\n    LockedBy   string\n    Queue      string\n    CFAPIError string\n}{\n    ID:         "id",\n    GUID:       "guid",\n    CreatedAt:  "created_at",\n    UpdatedAt:  "updated_at",\n    Priority:   "priority",\n    Attempts:   "attempts",\n    Handler:    "handler",\n    LastError:  "last_error",\n    RunAt:      "run_at",\n    LockedAt:   "locked_at",\n    FailedAt:   "failed_at",\n    LockedBy:   "locked_by",\n    Queue:      "queue",\n    CFAPIError: "cf_api_error",\n}\n')),(0,o.kt)("p",null,"DelayedJobRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var DelayedJobRels = struct {\n}{}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DelayedJobTableColumns = struct {\n    ID         string\n    GUID       string\n    CreatedAt  string\n    UpdatedAt  string\n    Priority   string\n    Attempts   string\n    Handler    string\n    LastError  string\n    RunAt      string\n    LockedAt   string\n    FailedAt   string\n    LockedBy   string\n    Queue      string\n    CFAPIError string\n}{\n    ID:         "delayed_jobs.id",\n    GUID:       "delayed_jobs.guid",\n    CreatedAt:  "delayed_jobs.created_at",\n    UpdatedAt:  "delayed_jobs.updated_at",\n    Priority:   "delayed_jobs.priority",\n    Attempts:   "delayed_jobs.attempts",\n    Handler:    "delayed_jobs.handler",\n    LastError:  "delayed_jobs.last_error",\n    RunAt:      "delayed_jobs.run_at",\n    LockedAt:   "delayed_jobs.locked_at",\n    FailedAt:   "delayed_jobs.failed_at",\n    LockedBy:   "delayed_jobs.locked_by",\n    Queue:      "delayed_jobs.queue",\n    CFAPIError: "delayed_jobs.cf_api_error",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DelayedJobWhere = struct {\n    ID         whereHelperint\n    GUID       whereHelperstring\n    CreatedAt  whereHelpertime_Time\n    UpdatedAt  whereHelpernull_Time\n    Priority   whereHelpernull_Int\n    Attempts   whereHelpernull_Int\n    Handler    whereHelpernull_String\n    LastError  whereHelpernull_String\n    RunAt      whereHelpernull_Time\n    LockedAt   whereHelpernull_Time\n    FailedAt   whereHelpernull_Time\n    LockedBy   whereHelpernull_String\n    Queue      whereHelpernull_String\n    CFAPIError whereHelpernull_String\n}{\n    ID:         whereHelperint{field: "\\"delayed_jobs\\".\\"id\\""},\n    GUID:       whereHelperstring{field: "\\"delayed_jobs\\".\\"guid\\""},\n    CreatedAt:  whereHelpertime_Time{field: "\\"delayed_jobs\\".\\"created_at\\""},\n    UpdatedAt:  whereHelpernull_Time{field: "\\"delayed_jobs\\".\\"updated_at\\""},\n    Priority:   whereHelpernull_Int{field: "\\"delayed_jobs\\".\\"priority\\""},\n    Attempts:   whereHelpernull_Int{field: "\\"delayed_jobs\\".\\"attempts\\""},\n    Handler:    whereHelpernull_String{field: "\\"delayed_jobs\\".\\"handler\\""},\n    LastError:  whereHelpernull_String{field: "\\"delayed_jobs\\".\\"last_error\\""},\n    RunAt:      whereHelpernull_Time{field: "\\"delayed_jobs\\".\\"run_at\\""},\n    LockedAt:   whereHelpernull_Time{field: "\\"delayed_jobs\\".\\"locked_at\\""},\n    FailedAt:   whereHelpernull_Time{field: "\\"delayed_jobs\\".\\"failed_at\\""},\n    LockedBy:   whereHelpernull_String{field: "\\"delayed_jobs\\".\\"locked_by\\""},\n    Queue:      whereHelpernull_String{field: "\\"delayed_jobs\\".\\"queue\\""},\n    CFAPIError: whereHelpernull_String{field: "\\"delayed_jobs\\".\\"cf_api_error\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DeploymentAnnotationColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    Key:          "key",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"DeploymentAnnotationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DeploymentAnnotationRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DeploymentAnnotationTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "deployment_annotations.id",\n    GUID:         "deployment_annotations.guid",\n    CreatedAt:    "deployment_annotations.created_at",\n    UpdatedAt:    "deployment_annotations.updated_at",\n    ResourceGUID: "deployment_annotations.resource_guid",\n    KeyPrefix:    "deployment_annotations.key_prefix",\n    Key:          "deployment_annotations.key",\n    Value:        "deployment_annotations.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DeploymentAnnotationWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    Key          whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"deployment_annotations\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"deployment_annotations\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"deployment_annotations\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"deployment_annotations\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"deployment_annotations\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"deployment_annotations\\".\\"key_prefix\\""},\n    Key:          whereHelpernull_String{field: "\\"deployment_annotations\\".\\"key\\""},\n    Value:        whereHelpernull_String{field: "\\"deployment_annotations\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DeploymentColumns = struct {\n    ID                              string\n    GUID                            string\n    CreatedAt                       string\n    UpdatedAt                       string\n    State                           string\n    AppGUID                         string\n    DropletGUID                     string\n    DeployingWebProcessGUID         string\n    PreviousDropletGUID             string\n    OriginalWebProcessInstanceCount string\n    RevisionGUID                    string\n    RevisionVersion                 string\n    LastHealthyAt                   string\n    StatusValue                     string\n    StatusReason                    string\n    Strategy                        string\n}{\n    ID:                              "id",\n    GUID:                            "guid",\n    CreatedAt:                       "created_at",\n    UpdatedAt:                       "updated_at",\n    State:                           "state",\n    AppGUID:                         "app_guid",\n    DropletGUID:                     "droplet_guid",\n    DeployingWebProcessGUID:         "deploying_web_process_guid",\n    PreviousDropletGUID:             "previous_droplet_guid",\n    OriginalWebProcessInstanceCount: "original_web_process_instance_count",\n    RevisionGUID:                    "revision_guid",\n    RevisionVersion:                 "revision_version",\n    LastHealthyAt:                   "last_healthy_at",\n    StatusValue:                     "status_value",\n    StatusReason:                    "status_reason",\n    Strategy:                        "strategy",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DeploymentLabelColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    KeyName:      "key_name",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"DeploymentLabelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DeploymentLabelRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DeploymentLabelTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "deployment_labels.id",\n    GUID:         "deployment_labels.guid",\n    CreatedAt:    "deployment_labels.created_at",\n    UpdatedAt:    "deployment_labels.updated_at",\n    ResourceGUID: "deployment_labels.resource_guid",\n    KeyPrefix:    "deployment_labels.key_prefix",\n    KeyName:      "deployment_labels.key_name",\n    Value:        "deployment_labels.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DeploymentLabelWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    KeyName      whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"deployment_labels\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"deployment_labels\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"deployment_labels\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"deployment_labels\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"deployment_labels\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"deployment_labels\\".\\"key_prefix\\""},\n    KeyName:      whereHelpernull_String{field: "\\"deployment_labels\\".\\"key_name\\""},\n    Value:        whereHelpernull_String{field: "\\"deployment_labels\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DeploymentProcessColumns = struct {\n    ID             string\n    GUID           string\n    CreatedAt      string\n    UpdatedAt      string\n    ProcessGUID    string\n    ProcessType    string\n    DeploymentGUID string\n}{\n    ID:             "id",\n    GUID:           "guid",\n    CreatedAt:      "created_at",\n    UpdatedAt:      "updated_at",\n    ProcessGUID:    "process_guid",\n    ProcessType:    "process_type",\n    DeploymentGUID: "deployment_guid",\n}\n')),(0,o.kt)("p",null,"DeploymentProcessRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DeploymentProcessRels = struct {\n    Deployment string\n}{\n    Deployment: "Deployment",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DeploymentProcessTableColumns = struct {\n    ID             string\n    GUID           string\n    CreatedAt      string\n    UpdatedAt      string\n    ProcessGUID    string\n    ProcessType    string\n    DeploymentGUID string\n}{\n    ID:             "deployment_processes.id",\n    GUID:           "deployment_processes.guid",\n    CreatedAt:      "deployment_processes.created_at",\n    UpdatedAt:      "deployment_processes.updated_at",\n    ProcessGUID:    "deployment_processes.process_guid",\n    ProcessType:    "deployment_processes.process_type",\n    DeploymentGUID: "deployment_processes.deployment_guid",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DeploymentProcessWhere = struct {\n    ID             whereHelperint\n    GUID           whereHelperstring\n    CreatedAt      whereHelpertime_Time\n    UpdatedAt      whereHelpernull_Time\n    ProcessGUID    whereHelpernull_String\n    ProcessType    whereHelpernull_String\n    DeploymentGUID whereHelpernull_String\n}{\n    ID:             whereHelperint{field: "\\"deployment_processes\\".\\"id\\""},\n    GUID:           whereHelperstring{field: "\\"deployment_processes\\".\\"guid\\""},\n    CreatedAt:      whereHelpertime_Time{field: "\\"deployment_processes\\".\\"created_at\\""},\n    UpdatedAt:      whereHelpernull_Time{field: "\\"deployment_processes\\".\\"updated_at\\""},\n    ProcessGUID:    whereHelpernull_String{field: "\\"deployment_processes\\".\\"process_guid\\""},\n    ProcessType:    whereHelpernull_String{field: "\\"deployment_processes\\".\\"process_type\\""},\n    DeploymentGUID: whereHelpernull_String{field: "\\"deployment_processes\\".\\"deployment_guid\\""},\n}\n')),(0,o.kt)("p",null,"DeploymentRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DeploymentRels = struct {\n    App                           string\n    ResourceDeploymentAnnotations string\n    ResourceDeploymentLabels      string\n    DeploymentProcesses           string\n}{\n    App:                           "App",\n    ResourceDeploymentAnnotations: "ResourceDeploymentAnnotations",\n    ResourceDeploymentLabels:      "ResourceDeploymentLabels",\n    DeploymentProcesses:           "DeploymentProcesses",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DeploymentTableColumns = struct {\n    ID                              string\n    GUID                            string\n    CreatedAt                       string\n    UpdatedAt                       string\n    State                           string\n    AppGUID                         string\n    DropletGUID                     string\n    DeployingWebProcessGUID         string\n    PreviousDropletGUID             string\n    OriginalWebProcessInstanceCount string\n    RevisionGUID                    string\n    RevisionVersion                 string\n    LastHealthyAt                   string\n    StatusValue                     string\n    StatusReason                    string\n    Strategy                        string\n}{\n    ID:                              "deployments.id",\n    GUID:                            "deployments.guid",\n    CreatedAt:                       "deployments.created_at",\n    UpdatedAt:                       "deployments.updated_at",\n    State:                           "deployments.state",\n    AppGUID:                         "deployments.app_guid",\n    DropletGUID:                     "deployments.droplet_guid",\n    DeployingWebProcessGUID:         "deployments.deploying_web_process_guid",\n    PreviousDropletGUID:             "deployments.previous_droplet_guid",\n    OriginalWebProcessInstanceCount: "deployments.original_web_process_instance_count",\n    RevisionGUID:                    "deployments.revision_guid",\n    RevisionVersion:                 "deployments.revision_version",\n    LastHealthyAt:                   "deployments.last_healthy_at",\n    StatusValue:                     "deployments.status_value",\n    StatusReason:                    "deployments.status_reason",\n    Strategy:                        "deployments.strategy",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DeploymentWhere = struct {\n    ID                              whereHelperint\n    GUID                            whereHelperstring\n    CreatedAt                       whereHelpertime_Time\n    UpdatedAt                       whereHelpernull_Time\n    State                           whereHelpernull_String\n    AppGUID                         whereHelpernull_String\n    DropletGUID                     whereHelpernull_String\n    DeployingWebProcessGUID         whereHelpernull_String\n    PreviousDropletGUID             whereHelpernull_String\n    OriginalWebProcessInstanceCount whereHelperint\n    RevisionGUID                    whereHelpernull_String\n    RevisionVersion                 whereHelpernull_Int\n    LastHealthyAt                   whereHelpertime_Time\n    StatusValue                     whereHelpernull_String\n    StatusReason                    whereHelpernull_String\n    Strategy                        whereHelperstring\n}{\n    ID:                              whereHelperint{field: "\\"deployments\\".\\"id\\""},\n    GUID:                            whereHelperstring{field: "\\"deployments\\".\\"guid\\""},\n    CreatedAt:                       whereHelpertime_Time{field: "\\"deployments\\".\\"created_at\\""},\n    UpdatedAt:                       whereHelpernull_Time{field: "\\"deployments\\".\\"updated_at\\""},\n    State:                           whereHelpernull_String{field: "\\"deployments\\".\\"state\\""},\n    AppGUID:                         whereHelpernull_String{field: "\\"deployments\\".\\"app_guid\\""},\n    DropletGUID:                     whereHelpernull_String{field: "\\"deployments\\".\\"droplet_guid\\""},\n    DeployingWebProcessGUID:         whereHelpernull_String{field: "\\"deployments\\".\\"deploying_web_process_guid\\""},\n    PreviousDropletGUID:             whereHelpernull_String{field: "\\"deployments\\".\\"previous_droplet_guid\\""},\n    OriginalWebProcessInstanceCount: whereHelperint{field: "\\"deployments\\".\\"original_web_process_instance_count\\""},\n    RevisionGUID:                    whereHelpernull_String{field: "\\"deployments\\".\\"revision_guid\\""},\n    RevisionVersion:                 whereHelpernull_Int{field: "\\"deployments\\".\\"revision_version\\""},\n    LastHealthyAt:                   whereHelpertime_Time{field: "\\"deployments\\".\\"last_healthy_at\\""},\n    StatusValue:                     whereHelpernull_String{field: "\\"deployments\\".\\"status_value\\""},\n    StatusReason:                    whereHelpernull_String{field: "\\"deployments\\".\\"status_reason\\""},\n    Strategy:                        whereHelperstring{field: "\\"deployments\\".\\"strategy\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DomainAnnotationColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    Key:          "key",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"DomainAnnotationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DomainAnnotationRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DomainAnnotationTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "domain_annotations.id",\n    GUID:         "domain_annotations.guid",\n    CreatedAt:    "domain_annotations.created_at",\n    UpdatedAt:    "domain_annotations.updated_at",\n    ResourceGUID: "domain_annotations.resource_guid",\n    KeyPrefix:    "domain_annotations.key_prefix",\n    Key:          "domain_annotations.key",\n    Value:        "domain_annotations.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DomainAnnotationWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    Key          whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"domain_annotations\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"domain_annotations\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"domain_annotations\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"domain_annotations\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"domain_annotations\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"domain_annotations\\".\\"key_prefix\\""},\n    Key:          whereHelpernull_String{field: "\\"domain_annotations\\".\\"key\\""},\n    Value:        whereHelpernull_String{field: "\\"domain_annotations\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DomainColumns = struct {\n    ID                   string\n    GUID                 string\n    CreatedAt            string\n    UpdatedAt            string\n    Name                 string\n    Wildcard             string\n    OwningOrganizationID string\n    RouterGroupGUID      string\n    Internal             string\n}{\n    ID:                   "id",\n    GUID:                 "guid",\n    CreatedAt:            "created_at",\n    UpdatedAt:            "updated_at",\n    Name:                 "name",\n    Wildcard:             "wildcard",\n    OwningOrganizationID: "owning_organization_id",\n    RouterGroupGUID:      "router_group_guid",\n    Internal:             "internal",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DomainLabelColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    KeyName:      "key_name",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"DomainLabelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DomainLabelRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DomainLabelTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "domain_labels.id",\n    GUID:         "domain_labels.guid",\n    CreatedAt:    "domain_labels.created_at",\n    UpdatedAt:    "domain_labels.updated_at",\n    ResourceGUID: "domain_labels.resource_guid",\n    KeyPrefix:    "domain_labels.key_prefix",\n    KeyName:      "domain_labels.key_name",\n    Value:        "domain_labels.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DomainLabelWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    KeyName      whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"domain_labels\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"domain_labels\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"domain_labels\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"domain_labels\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"domain_labels\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"domain_labels\\".\\"key_prefix\\""},\n    KeyName:      whereHelpernull_String{field: "\\"domain_labels\\".\\"key_name\\""},\n    Value:        whereHelpernull_String{field: "\\"domain_labels\\".\\"value\\""},\n}\n')),(0,o.kt)("p",null,"DomainRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DomainRels = struct {\n    OwningOrganization                       string\n    ResourceDomainAnnotations                string\n    ResourceDomainLabels                     string\n    PrivateDomainOrganizationsPrivateDomains string\n    Routes                                   string\n}{\n    OwningOrganization:                       "OwningOrganization",\n    ResourceDomainAnnotations:                "ResourceDomainAnnotations",\n    ResourceDomainLabels:                     "ResourceDomainLabels",\n    PrivateDomainOrganizationsPrivateDomains: "PrivateDomainOrganizationsPrivateDomains",\n    Routes:                                   "Routes",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DomainTableColumns = struct {\n    ID                   string\n    GUID                 string\n    CreatedAt            string\n    UpdatedAt            string\n    Name                 string\n    Wildcard             string\n    OwningOrganizationID string\n    RouterGroupGUID      string\n    Internal             string\n}{\n    ID:                   "domains.id",\n    GUID:                 "domains.guid",\n    CreatedAt:            "domains.created_at",\n    UpdatedAt:            "domains.updated_at",\n    Name:                 "domains.name",\n    Wildcard:             "domains.wildcard",\n    OwningOrganizationID: "domains.owning_organization_id",\n    RouterGroupGUID:      "domains.router_group_guid",\n    Internal:             "domains.internal",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DomainWhere = struct {\n    ID                   whereHelperint\n    GUID                 whereHelperstring\n    CreatedAt            whereHelpertime_Time\n    UpdatedAt            whereHelpernull_Time\n    Name                 whereHelperstring\n    Wildcard             whereHelperbool\n    OwningOrganizationID whereHelpernull_Int\n    RouterGroupGUID      whereHelpernull_String\n    Internal             whereHelpernull_Bool\n}{\n    ID:                   whereHelperint{field: "\\"domains\\".\\"id\\""},\n    GUID:                 whereHelperstring{field: "\\"domains\\".\\"guid\\""},\n    CreatedAt:            whereHelpertime_Time{field: "\\"domains\\".\\"created_at\\""},\n    UpdatedAt:            whereHelpernull_Time{field: "\\"domains\\".\\"updated_at\\""},\n    Name:                 whereHelperstring{field: "\\"domains\\".\\"name\\""},\n    Wildcard:             whereHelperbool{field: "\\"domains\\".\\"wildcard\\""},\n    OwningOrganizationID: whereHelpernull_Int{field: "\\"domains\\".\\"owning_organization_id\\""},\n    RouterGroupGUID:      whereHelpernull_String{field: "\\"domains\\".\\"router_group_guid\\""},\n    Internal:             whereHelpernull_Bool{field: "\\"domains\\".\\"internal\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DropletAnnotationColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    Key:          "key",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"DropletAnnotationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DropletAnnotationRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DropletAnnotationTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "droplet_annotations.id",\n    GUID:         "droplet_annotations.guid",\n    CreatedAt:    "droplet_annotations.created_at",\n    UpdatedAt:    "droplet_annotations.updated_at",\n    ResourceGUID: "droplet_annotations.resource_guid",\n    KeyPrefix:    "droplet_annotations.key_prefix",\n    Key:          "droplet_annotations.key",\n    Value:        "droplet_annotations.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DropletAnnotationWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    Key          whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"droplet_annotations\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"droplet_annotations\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"droplet_annotations\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"droplet_annotations\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"droplet_annotations\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"droplet_annotations\\".\\"key_prefix\\""},\n    Key:          whereHelpernull_String{field: "\\"droplet_annotations\\".\\"key\\""},\n    Value:        whereHelpernull_String{field: "\\"droplet_annotations\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DropletColumns = struct {\n    ID                             string\n    GUID                           string\n    CreatedAt                      string\n    UpdatedAt                      string\n    DropletHash                    string\n    ExecutionMetadata              string\n    State                          string\n    ProcessTypes                   string\n    ErrorID                        string\n    ErrorDescription               string\n    EncryptedEnvironmentVariables  string\n    Salt                           string\n    StagingMemoryInMB              string\n    StagingDiskInMB                string\n    BuildpackReceiptBuildpack      string\n    BuildpackReceiptBuildpackGUID  string\n    BuildpackReceiptDetectOutput   string\n    DockerReceiptImage             string\n    PackageGUID                    string\n    AppGUID                        string\n    Sha256Checksum                 string\n    BuildGUID                      string\n    DockerReceiptUsername          string\n    DockerReceiptPasswordSalt      string\n    EncryptedDockerReceiptPassword string\n    EncryptionKeyLabel             string\n    EncryptionIterations           string\n    Sidecars                       string\n}{\n    ID:                             "id",\n    GUID:                           "guid",\n    CreatedAt:                      "created_at",\n    UpdatedAt:                      "updated_at",\n    DropletHash:                    "droplet_hash",\n    ExecutionMetadata:              "execution_metadata",\n    State:                          "state",\n    ProcessTypes:                   "process_types",\n    ErrorID:                        "error_id",\n    ErrorDescription:               "error_description",\n    EncryptedEnvironmentVariables:  "encrypted_environment_variables",\n    Salt:                           "salt",\n    StagingMemoryInMB:              "staging_memory_in_mb",\n    StagingDiskInMB:                "staging_disk_in_mb",\n    BuildpackReceiptBuildpack:      "buildpack_receipt_buildpack",\n    BuildpackReceiptBuildpackGUID:  "buildpack_receipt_buildpack_guid",\n    BuildpackReceiptDetectOutput:   "buildpack_receipt_detect_output",\n    DockerReceiptImage:             "docker_receipt_image",\n    PackageGUID:                    "package_guid",\n    AppGUID:                        "app_guid",\n    Sha256Checksum:                 "sha256_checksum",\n    BuildGUID:                      "build_guid",\n    DockerReceiptUsername:          "docker_receipt_username",\n    DockerReceiptPasswordSalt:      "docker_receipt_password_salt",\n    EncryptedDockerReceiptPassword: "encrypted_docker_receipt_password",\n    EncryptionKeyLabel:             "encryption_key_label",\n    EncryptionIterations:           "encryption_iterations",\n    Sidecars:                       "sidecars",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DropletLabelColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    KeyName:      "key_name",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"DropletLabelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DropletLabelRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DropletLabelTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "droplet_labels.id",\n    GUID:         "droplet_labels.guid",\n    CreatedAt:    "droplet_labels.created_at",\n    UpdatedAt:    "droplet_labels.updated_at",\n    ResourceGUID: "droplet_labels.resource_guid",\n    KeyPrefix:    "droplet_labels.key_prefix",\n    KeyName:      "droplet_labels.key_name",\n    Value:        "droplet_labels.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DropletLabelWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    KeyName      whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"droplet_labels\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"droplet_labels\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"droplet_labels\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"droplet_labels\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"droplet_labels\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"droplet_labels\\".\\"key_prefix\\""},\n    KeyName:      whereHelpernull_String{field: "\\"droplet_labels\\".\\"key_name\\""},\n    Value:        whereHelpernull_String{field: "\\"droplet_labels\\".\\"value\\""},\n}\n')),(0,o.kt)("p",null,"DropletRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DropletRels = struct {\n    App                        string\n    ResourceDropletAnnotations string\n    ResourceDropletLabels      string\n}{\n    App:                        "App",\n    ResourceDropletAnnotations: "ResourceDropletAnnotations",\n    ResourceDropletLabels:      "ResourceDropletLabels",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DropletTableColumns = struct {\n    ID                             string\n    GUID                           string\n    CreatedAt                      string\n    UpdatedAt                      string\n    DropletHash                    string\n    ExecutionMetadata              string\n    State                          string\n    ProcessTypes                   string\n    ErrorID                        string\n    ErrorDescription               string\n    EncryptedEnvironmentVariables  string\n    Salt                           string\n    StagingMemoryInMB              string\n    StagingDiskInMB                string\n    BuildpackReceiptBuildpack      string\n    BuildpackReceiptBuildpackGUID  string\n    BuildpackReceiptDetectOutput   string\n    DockerReceiptImage             string\n    PackageGUID                    string\n    AppGUID                        string\n    Sha256Checksum                 string\n    BuildGUID                      string\n    DockerReceiptUsername          string\n    DockerReceiptPasswordSalt      string\n    EncryptedDockerReceiptPassword string\n    EncryptionKeyLabel             string\n    EncryptionIterations           string\n    Sidecars                       string\n}{\n    ID:                             "droplets.id",\n    GUID:                           "droplets.guid",\n    CreatedAt:                      "droplets.created_at",\n    UpdatedAt:                      "droplets.updated_at",\n    DropletHash:                    "droplets.droplet_hash",\n    ExecutionMetadata:              "droplets.execution_metadata",\n    State:                          "droplets.state",\n    ProcessTypes:                   "droplets.process_types",\n    ErrorID:                        "droplets.error_id",\n    ErrorDescription:               "droplets.error_description",\n    EncryptedEnvironmentVariables:  "droplets.encrypted_environment_variables",\n    Salt:                           "droplets.salt",\n    StagingMemoryInMB:              "droplets.staging_memory_in_mb",\n    StagingDiskInMB:                "droplets.staging_disk_in_mb",\n    BuildpackReceiptBuildpack:      "droplets.buildpack_receipt_buildpack",\n    BuildpackReceiptBuildpackGUID:  "droplets.buildpack_receipt_buildpack_guid",\n    BuildpackReceiptDetectOutput:   "droplets.buildpack_receipt_detect_output",\n    DockerReceiptImage:             "droplets.docker_receipt_image",\n    PackageGUID:                    "droplets.package_guid",\n    AppGUID:                        "droplets.app_guid",\n    Sha256Checksum:                 "droplets.sha256_checksum",\n    BuildGUID:                      "droplets.build_guid",\n    DockerReceiptUsername:          "droplets.docker_receipt_username",\n    DockerReceiptPasswordSalt:      "droplets.docker_receipt_password_salt",\n    EncryptedDockerReceiptPassword: "droplets.encrypted_docker_receipt_password",\n    EncryptionKeyLabel:             "droplets.encryption_key_label",\n    EncryptionIterations:           "droplets.encryption_iterations",\n    Sidecars:                       "droplets.sidecars",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var DropletWhere = struct {\n    ID                             whereHelperint\n    GUID                           whereHelperstring\n    CreatedAt                      whereHelpertime_Time\n    UpdatedAt                      whereHelpernull_Time\n    DropletHash                    whereHelpernull_String\n    ExecutionMetadata              whereHelpernull_String\n    State                          whereHelperstring\n    ProcessTypes                   whereHelpernull_String\n    ErrorID                        whereHelpernull_String\n    ErrorDescription               whereHelpernull_String\n    EncryptedEnvironmentVariables  whereHelpernull_String\n    Salt                           whereHelpernull_String\n    StagingMemoryInMB              whereHelpernull_Int\n    StagingDiskInMB                whereHelpernull_Int\n    BuildpackReceiptBuildpack      whereHelpernull_String\n    BuildpackReceiptBuildpackGUID  whereHelpernull_String\n    BuildpackReceiptDetectOutput   whereHelpernull_String\n    DockerReceiptImage             whereHelpernull_String\n    PackageGUID                    whereHelpernull_String\n    AppGUID                        whereHelpernull_String\n    Sha256Checksum                 whereHelpernull_String\n    BuildGUID                      whereHelpernull_String\n    DockerReceiptUsername          whereHelpernull_String\n    DockerReceiptPasswordSalt      whereHelpernull_String\n    EncryptedDockerReceiptPassword whereHelpernull_String\n    EncryptionKeyLabel             whereHelpernull_String\n    EncryptionIterations           whereHelperint\n    Sidecars                       whereHelpernull_String\n}{\n    ID:                             whereHelperint{field: "\\"droplets\\".\\"id\\""},\n    GUID:                           whereHelperstring{field: "\\"droplets\\".\\"guid\\""},\n    CreatedAt:                      whereHelpertime_Time{field: "\\"droplets\\".\\"created_at\\""},\n    UpdatedAt:                      whereHelpernull_Time{field: "\\"droplets\\".\\"updated_at\\""},\n    DropletHash:                    whereHelpernull_String{field: "\\"droplets\\".\\"droplet_hash\\""},\n    ExecutionMetadata:              whereHelpernull_String{field: "\\"droplets\\".\\"execution_metadata\\""},\n    State:                          whereHelperstring{field: "\\"droplets\\".\\"state\\""},\n    ProcessTypes:                   whereHelpernull_String{field: "\\"droplets\\".\\"process_types\\""},\n    ErrorID:                        whereHelpernull_String{field: "\\"droplets\\".\\"error_id\\""},\n    ErrorDescription:               whereHelpernull_String{field: "\\"droplets\\".\\"error_description\\""},\n    EncryptedEnvironmentVariables:  whereHelpernull_String{field: "\\"droplets\\".\\"encrypted_environment_variables\\""},\n    Salt:                           whereHelpernull_String{field: "\\"droplets\\".\\"salt\\""},\n    StagingMemoryInMB:              whereHelpernull_Int{field: "\\"droplets\\".\\"staging_memory_in_mb\\""},\n    StagingDiskInMB:                whereHelpernull_Int{field: "\\"droplets\\".\\"staging_disk_in_mb\\""},\n    BuildpackReceiptBuildpack:      whereHelpernull_String{field: "\\"droplets\\".\\"buildpack_receipt_buildpack\\""},\n    BuildpackReceiptBuildpackGUID:  whereHelpernull_String{field: "\\"droplets\\".\\"buildpack_receipt_buildpack_guid\\""},\n    BuildpackReceiptDetectOutput:   whereHelpernull_String{field: "\\"droplets\\".\\"buildpack_receipt_detect_output\\""},\n    DockerReceiptImage:             whereHelpernull_String{field: "\\"droplets\\".\\"docker_receipt_image\\""},\n    PackageGUID:                    whereHelpernull_String{field: "\\"droplets\\".\\"package_guid\\""},\n    AppGUID:                        whereHelpernull_String{field: "\\"droplets\\".\\"app_guid\\""},\n    Sha256Checksum:                 whereHelpernull_String{field: "\\"droplets\\".\\"sha256_checksum\\""},\n    BuildGUID:                      whereHelpernull_String{field: "\\"droplets\\".\\"build_guid\\""},\n    DockerReceiptUsername:          whereHelpernull_String{field: "\\"droplets\\".\\"docker_receipt_username\\""},\n    DockerReceiptPasswordSalt:      whereHelpernull_String{field: "\\"droplets\\".\\"docker_receipt_password_salt\\""},\n    EncryptedDockerReceiptPassword: whereHelpernull_String{field: "\\"droplets\\".\\"encrypted_docker_receipt_password\\""},\n    EncryptionKeyLabel:             whereHelpernull_String{field: "\\"droplets\\".\\"encryption_key_label\\""},\n    EncryptionIterations:           whereHelperint{field: "\\"droplets\\".\\"encryption_iterations\\""},\n    Sidecars:                       whereHelpernull_String{field: "\\"droplets\\".\\"sidecars\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var EncryptionKeySentinelColumns = struct {\n    ID                   string\n    GUID                 string\n    CreatedAt            string\n    UpdatedAt            string\n    ExpectedValue        string\n    EncryptedValue       string\n    EncryptionKeyLabel   string\n    Salt                 string\n    EncryptionIterations string\n}{\n    ID:                   "id",\n    GUID:                 "guid",\n    CreatedAt:            "created_at",\n    UpdatedAt:            "updated_at",\n    ExpectedValue:        "expected_value",\n    EncryptedValue:       "encrypted_value",\n    EncryptionKeyLabel:   "encryption_key_label",\n    Salt:                 "salt",\n    EncryptionIterations: "encryption_iterations",\n}\n')),(0,o.kt)("p",null,"EncryptionKeySentinelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var EncryptionKeySentinelRels = struct {\n}{}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var EncryptionKeySentinelTableColumns = struct {\n    ID                   string\n    GUID                 string\n    CreatedAt            string\n    UpdatedAt            string\n    ExpectedValue        string\n    EncryptedValue       string\n    EncryptionKeyLabel   string\n    Salt                 string\n    EncryptionIterations string\n}{\n    ID:                   "encryption_key_sentinels.id",\n    GUID:                 "encryption_key_sentinels.guid",\n    CreatedAt:            "encryption_key_sentinels.created_at",\n    UpdatedAt:            "encryption_key_sentinels.updated_at",\n    ExpectedValue:        "encryption_key_sentinels.expected_value",\n    EncryptedValue:       "encryption_key_sentinels.encrypted_value",\n    EncryptionKeyLabel:   "encryption_key_sentinels.encryption_key_label",\n    Salt:                 "encryption_key_sentinels.salt",\n    EncryptionIterations: "encryption_key_sentinels.encryption_iterations",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var EncryptionKeySentinelWhere = struct {\n    ID                   whereHelperint\n    GUID                 whereHelperstring\n    CreatedAt            whereHelpertime_Time\n    UpdatedAt            whereHelpernull_Time\n    ExpectedValue        whereHelpernull_String\n    EncryptedValue       whereHelpernull_String\n    EncryptionKeyLabel   whereHelpernull_String\n    Salt                 whereHelpernull_String\n    EncryptionIterations whereHelperint\n}{\n    ID:                   whereHelperint{field: "\\"encryption_key_sentinels\\".\\"id\\""},\n    GUID:                 whereHelperstring{field: "\\"encryption_key_sentinels\\".\\"guid\\""},\n    CreatedAt:            whereHelpertime_Time{field: "\\"encryption_key_sentinels\\".\\"created_at\\""},\n    UpdatedAt:            whereHelpernull_Time{field: "\\"encryption_key_sentinels\\".\\"updated_at\\""},\n    ExpectedValue:        whereHelpernull_String{field: "\\"encryption_key_sentinels\\".\\"expected_value\\""},\n    EncryptedValue:       whereHelpernull_String{field: "\\"encryption_key_sentinels\\".\\"encrypted_value\\""},\n    EncryptionKeyLabel:   whereHelpernull_String{field: "\\"encryption_key_sentinels\\".\\"encryption_key_label\\""},\n    Salt:                 whereHelpernull_String{field: "\\"encryption_key_sentinels\\".\\"salt\\""},\n    EncryptionIterations: whereHelperint{field: "\\"encryption_key_sentinels\\".\\"encryption_iterations\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var EnvGroupColumns = struct {\n    ID                   string\n    GUID                 string\n    CreatedAt            string\n    UpdatedAt            string\n    Name                 string\n    EnvironmentJSON      string\n    Salt                 string\n    EncryptionKeyLabel   string\n    EncryptionIterations string\n}{\n    ID:                   "id",\n    GUID:                 "guid",\n    CreatedAt:            "created_at",\n    UpdatedAt:            "updated_at",\n    Name:                 "name",\n    EnvironmentJSON:      "environment_json",\n    Salt:                 "salt",\n    EncryptionKeyLabel:   "encryption_key_label",\n    EncryptionIterations: "encryption_iterations",\n}\n')),(0,o.kt)("p",null,"EnvGroupRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var EnvGroupRels = struct {\n}{}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var EnvGroupTableColumns = struct {\n    ID                   string\n    GUID                 string\n    CreatedAt            string\n    UpdatedAt            string\n    Name                 string\n    EnvironmentJSON      string\n    Salt                 string\n    EncryptionKeyLabel   string\n    EncryptionIterations string\n}{\n    ID:                   "env_groups.id",\n    GUID:                 "env_groups.guid",\n    CreatedAt:            "env_groups.created_at",\n    UpdatedAt:            "env_groups.updated_at",\n    Name:                 "env_groups.name",\n    EnvironmentJSON:      "env_groups.environment_json",\n    Salt:                 "env_groups.salt",\n    EncryptionKeyLabel:   "env_groups.encryption_key_label",\n    EncryptionIterations: "env_groups.encryption_iterations",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var EnvGroupWhere = struct {\n    ID                   whereHelperint\n    GUID                 whereHelperstring\n    CreatedAt            whereHelpertime_Time\n    UpdatedAt            whereHelpernull_Time\n    Name                 whereHelperstring\n    EnvironmentJSON      whereHelpernull_String\n    Salt                 whereHelpernull_String\n    EncryptionKeyLabel   whereHelpernull_String\n    EncryptionIterations whereHelperint\n}{\n    ID:                   whereHelperint{field: "\\"env_groups\\".\\"id\\""},\n    GUID:                 whereHelperstring{field: "\\"env_groups\\".\\"guid\\""},\n    CreatedAt:            whereHelpertime_Time{field: "\\"env_groups\\".\\"created_at\\""},\n    UpdatedAt:            whereHelpernull_Time{field: "\\"env_groups\\".\\"updated_at\\""},\n    Name:                 whereHelperstring{field: "\\"env_groups\\".\\"name\\""},\n    EnvironmentJSON:      whereHelpernull_String{field: "\\"env_groups\\".\\"environment_json\\""},\n    Salt:                 whereHelpernull_String{field: "\\"env_groups\\".\\"salt\\""},\n    EncryptionKeyLabel:   whereHelpernull_String{field: "\\"env_groups\\".\\"encryption_key_label\\""},\n    EncryptionIterations: whereHelperint{field: "\\"env_groups\\".\\"encryption_iterations\\""},\n}\n')),(0,o.kt)("p",null,"ErrSyncFail occurs during insert when the record could not be retrieved in order to populate default value information","."," This usually happens when LastInsertId fails or there was a primary key configuration that was not resolvable","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ErrSyncFail = errors.New("models: failed to synchronize data after insert")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var EventColumns = struct {\n    ID               string\n    GUID             string\n    CreatedAt        string\n    UpdatedAt        string\n    Timestamp        string\n    Type             string\n    Actor            string\n    ActorType        string\n    Actee            string\n    ActeeType        string\n    Metadata         string\n    OrganizationGUID string\n    SpaceGUID        string\n    ActorName        string\n    ActeeName        string\n    ActorUsername    string\n}{\n    ID:               "id",\n    GUID:             "guid",\n    CreatedAt:        "created_at",\n    UpdatedAt:        "updated_at",\n    Timestamp:        "timestamp",\n    Type:             "type",\n    Actor:            "actor",\n    ActorType:        "actor_type",\n    Actee:            "actee",\n    ActeeType:        "actee_type",\n    Metadata:         "metadata",\n    OrganizationGUID: "organization_guid",\n    SpaceGUID:        "space_guid",\n    ActorName:        "actor_name",\n    ActeeName:        "actee_name",\n    ActorUsername:    "actor_username",\n}\n')),(0,o.kt)("p",null,"EventRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var EventRels = struct {\n}{}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var EventTableColumns = struct {\n    ID               string\n    GUID             string\n    CreatedAt        string\n    UpdatedAt        string\n    Timestamp        string\n    Type             string\n    Actor            string\n    ActorType        string\n    Actee            string\n    ActeeType        string\n    Metadata         string\n    OrganizationGUID string\n    SpaceGUID        string\n    ActorName        string\n    ActeeName        string\n    ActorUsername    string\n}{\n    ID:               "events.id",\n    GUID:             "events.guid",\n    CreatedAt:        "events.created_at",\n    UpdatedAt:        "events.updated_at",\n    Timestamp:        "events.timestamp",\n    Type:             "events.type",\n    Actor:            "events.actor",\n    ActorType:        "events.actor_type",\n    Actee:            "events.actee",\n    ActeeType:        "events.actee_type",\n    Metadata:         "events.metadata",\n    OrganizationGUID: "events.organization_guid",\n    SpaceGUID:        "events.space_guid",\n    ActorName:        "events.actor_name",\n    ActeeName:        "events.actee_name",\n    ActorUsername:    "events.actor_username",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var EventWhere = struct {\n    ID               whereHelperint\n    GUID             whereHelperstring\n    CreatedAt        whereHelpertime_Time\n    UpdatedAt        whereHelpernull_Time\n    Timestamp        whereHelpertime_Time\n    Type             whereHelperstring\n    Actor            whereHelperstring\n    ActorType        whereHelperstring\n    Actee            whereHelperstring\n    ActeeType        whereHelperstring\n    Metadata         whereHelpernull_String\n    OrganizationGUID whereHelperstring\n    SpaceGUID        whereHelperstring\n    ActorName        whereHelpernull_String\n    ActeeName        whereHelpernull_String\n    ActorUsername    whereHelpernull_String\n}{\n    ID:               whereHelperint{field: "\\"events\\".\\"id\\""},\n    GUID:             whereHelperstring{field: "\\"events\\".\\"guid\\""},\n    CreatedAt:        whereHelpertime_Time{field: "\\"events\\".\\"created_at\\""},\n    UpdatedAt:        whereHelpernull_Time{field: "\\"events\\".\\"updated_at\\""},\n    Timestamp:        whereHelpertime_Time{field: "\\"events\\".\\"timestamp\\""},\n    Type:             whereHelperstring{field: "\\"events\\".\\"type\\""},\n    Actor:            whereHelperstring{field: "\\"events\\".\\"actor\\""},\n    ActorType:        whereHelperstring{field: "\\"events\\".\\"actor_type\\""},\n    Actee:            whereHelperstring{field: "\\"events\\".\\"actee\\""},\n    ActeeType:        whereHelperstring{field: "\\"events\\".\\"actee_type\\""},\n    Metadata:         whereHelpernull_String{field: "\\"events\\".\\"metadata\\""},\n    OrganizationGUID: whereHelperstring{field: "\\"events\\".\\"organization_guid\\""},\n    SpaceGUID:        whereHelperstring{field: "\\"events\\".\\"space_guid\\""},\n    ActorName:        whereHelpernull_String{field: "\\"events\\".\\"actor_name\\""},\n    ActeeName:        whereHelpernull_String{field: "\\"events\\".\\"actee_name\\""},\n    ActorUsername:    whereHelpernull_String{field: "\\"events\\".\\"actor_username\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var FeatureFlagColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    Name         string\n    Enabled      string\n    ErrorMessage string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    Name:         "name",\n    Enabled:      "enabled",\n    ErrorMessage: "error_message",\n}\n')),(0,o.kt)("p",null,"FeatureFlagRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var FeatureFlagRels = struct {\n}{}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var FeatureFlagTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    Name         string\n    Enabled      string\n    ErrorMessage string\n}{\n    ID:           "feature_flags.id",\n    GUID:         "feature_flags.guid",\n    CreatedAt:    "feature_flags.created_at",\n    UpdatedAt:    "feature_flags.updated_at",\n    Name:         "feature_flags.name",\n    Enabled:      "feature_flags.enabled",\n    ErrorMessage: "feature_flags.error_message",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var FeatureFlagWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    Name         whereHelperstring\n    Enabled      whereHelperbool\n    ErrorMessage whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"feature_flags\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"feature_flags\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"feature_flags\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"feature_flags\\".\\"updated_at\\""},\n    Name:         whereHelperstring{field: "\\"feature_flags\\".\\"name\\""},\n    Enabled:      whereHelperbool{field: "\\"feature_flags\\".\\"enabled\\""},\n    ErrorMessage: whereHelpernull_String{field: "\\"feature_flags\\".\\"error_message\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var IsolationSegmentAnnotationColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    Key:          "key",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"IsolationSegmentAnnotationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var IsolationSegmentAnnotationRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var IsolationSegmentAnnotationTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "isolation_segment_annotations.id",\n    GUID:         "isolation_segment_annotations.guid",\n    CreatedAt:    "isolation_segment_annotations.created_at",\n    UpdatedAt:    "isolation_segment_annotations.updated_at",\n    ResourceGUID: "isolation_segment_annotations.resource_guid",\n    KeyPrefix:    "isolation_segment_annotations.key_prefix",\n    Key:          "isolation_segment_annotations.key",\n    Value:        "isolation_segment_annotations.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var IsolationSegmentAnnotationWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    Key          whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"isolation_segment_annotations\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"isolation_segment_annotations\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"isolation_segment_annotations\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"isolation_segment_annotations\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"isolation_segment_annotations\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"isolation_segment_annotations\\".\\"key_prefix\\""},\n    Key:          whereHelpernull_String{field: "\\"isolation_segment_annotations\\".\\"key\\""},\n    Value:        whereHelpernull_String{field: "\\"isolation_segment_annotations\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var IsolationSegmentColumns = struct {\n    ID        string\n    GUID      string\n    CreatedAt string\n    UpdatedAt string\n    Name      string\n}{\n    ID:        "id",\n    GUID:      "guid",\n    CreatedAt: "created_at",\n    UpdatedAt: "updated_at",\n    Name:      "name",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var IsolationSegmentLabelColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    KeyName:      "key_name",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"IsolationSegmentLabelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var IsolationSegmentLabelRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var IsolationSegmentLabelTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "isolation_segment_labels.id",\n    GUID:         "isolation_segment_labels.guid",\n    CreatedAt:    "isolation_segment_labels.created_at",\n    UpdatedAt:    "isolation_segment_labels.updated_at",\n    ResourceGUID: "isolation_segment_labels.resource_guid",\n    KeyPrefix:    "isolation_segment_labels.key_prefix",\n    KeyName:      "isolation_segment_labels.key_name",\n    Value:        "isolation_segment_labels.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var IsolationSegmentLabelWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    KeyName      whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"isolation_segment_labels\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"isolation_segment_labels\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"isolation_segment_labels\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"isolation_segment_labels\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"isolation_segment_labels\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"isolation_segment_labels\\".\\"key_prefix\\""},\n    KeyName:      whereHelpernull_String{field: "\\"isolation_segment_labels\\".\\"key_name\\""},\n    Value:        whereHelpernull_String{field: "\\"isolation_segment_labels\\".\\"value\\""},\n}\n')),(0,o.kt)("p",null,"IsolationSegmentRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var IsolationSegmentRels = struct {\n    ResourceIsolationSegmentAnnotations string\n    ResourceIsolationSegmentLabels      string\n    Organizations                       string\n    Spaces                              string\n}{\n    ResourceIsolationSegmentAnnotations: "ResourceIsolationSegmentAnnotations",\n    ResourceIsolationSegmentLabels:      "ResourceIsolationSegmentLabels",\n    Organizations:                       "Organizations",\n    Spaces:                              "Spaces",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var IsolationSegmentTableColumns = struct {\n    ID        string\n    GUID      string\n    CreatedAt string\n    UpdatedAt string\n    Name      string\n}{\n    ID:        "isolation_segments.id",\n    GUID:      "isolation_segments.guid",\n    CreatedAt: "isolation_segments.created_at",\n    UpdatedAt: "isolation_segments.updated_at",\n    Name:      "isolation_segments.name",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var IsolationSegmentWhere = struct {\n    ID        whereHelperint\n    GUID      whereHelperstring\n    CreatedAt whereHelpertime_Time\n    UpdatedAt whereHelpernull_Time\n    Name      whereHelperstring\n}{\n    ID:        whereHelperint{field: "\\"isolation_segments\\".\\"id\\""},\n    GUID:      whereHelperstring{field: "\\"isolation_segments\\".\\"guid\\""},\n    CreatedAt: whereHelpertime_Time{field: "\\"isolation_segments\\".\\"created_at\\""},\n    UpdatedAt: whereHelpernull_Time{field: "\\"isolation_segments\\".\\"updated_at\\""},\n    Name:      whereHelperstring{field: "\\"isolation_segments\\".\\"name\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var JobColumns = struct {\n    ID             string\n    GUID           string\n    CreatedAt      string\n    UpdatedAt      string\n    State          string\n    Operation      string\n    ResourceGUID   string\n    ResourceType   string\n    DelayedJobGUID string\n    CFAPIError     string\n}{\n    ID:             "id",\n    GUID:           "guid",\n    CreatedAt:      "created_at",\n    UpdatedAt:      "updated_at",\n    State:          "state",\n    Operation:      "operation",\n    ResourceGUID:   "resource_guid",\n    ResourceType:   "resource_type",\n    DelayedJobGUID: "delayed_job_guid",\n    CFAPIError:     "cf_api_error",\n}\n')),(0,o.kt)("p",null,"JobRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var JobRels = struct {\n    FKJobJobWarnings string\n}{\n    FKJobJobWarnings: "FKJobJobWarnings",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var JobTableColumns = struct {\n    ID             string\n    GUID           string\n    CreatedAt      string\n    UpdatedAt      string\n    State          string\n    Operation      string\n    ResourceGUID   string\n    ResourceType   string\n    DelayedJobGUID string\n    CFAPIError     string\n}{\n    ID:             "jobs.id",\n    GUID:           "jobs.guid",\n    CreatedAt:      "jobs.created_at",\n    UpdatedAt:      "jobs.updated_at",\n    State:          "jobs.state",\n    Operation:      "jobs.operation",\n    ResourceGUID:   "jobs.resource_guid",\n    ResourceType:   "jobs.resource_type",\n    DelayedJobGUID: "jobs.delayed_job_guid",\n    CFAPIError:     "jobs.cf_api_error",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var JobWarningColumns = struct {\n    ID        string\n    GUID      string\n    CreatedAt string\n    UpdatedAt string\n    Detail    string\n    JobID     string\n    FKJobsID  string\n}{\n    ID:        "id",\n    GUID:      "guid",\n    CreatedAt: "created_at",\n    UpdatedAt: "updated_at",\n    Detail:    "detail",\n    JobID:     "job_id",\n    FKJobsID:  "fk_jobs_id",\n}\n')),(0,o.kt)("p",null,"JobWarningRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var JobWarningRels = struct {\n    FKJob string\n}{\n    FKJob: "FKJob",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var JobWarningTableColumns = struct {\n    ID        string\n    GUID      string\n    CreatedAt string\n    UpdatedAt string\n    Detail    string\n    JobID     string\n    FKJobsID  string\n}{\n    ID:        "job_warnings.id",\n    GUID:      "job_warnings.guid",\n    CreatedAt: "job_warnings.created_at",\n    UpdatedAt: "job_warnings.updated_at",\n    Detail:    "job_warnings.detail",\n    JobID:     "job_warnings.job_id",\n    FKJobsID:  "job_warnings.fk_jobs_id",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var JobWarningWhere = struct {\n    ID        whereHelperint\n    GUID      whereHelperstring\n    CreatedAt whereHelpertime_Time\n    UpdatedAt whereHelpernull_Time\n    Detail    whereHelperstring\n    JobID     whereHelperint\n    FKJobsID  whereHelpernull_Int\n}{\n    ID:        whereHelperint{field: "\\"job_warnings\\".\\"id\\""},\n    GUID:      whereHelperstring{field: "\\"job_warnings\\".\\"guid\\""},\n    CreatedAt: whereHelpertime_Time{field: "\\"job_warnings\\".\\"created_at\\""},\n    UpdatedAt: whereHelpernull_Time{field: "\\"job_warnings\\".\\"updated_at\\""},\n    Detail:    whereHelperstring{field: "\\"job_warnings\\".\\"detail\\""},\n    JobID:     whereHelperint{field: "\\"job_warnings\\".\\"job_id\\""},\n    FKJobsID:  whereHelpernull_Int{field: "\\"job_warnings\\".\\"fk_jobs_id\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var JobWhere = struct {\n    ID             whereHelperint\n    GUID           whereHelperstring\n    CreatedAt      whereHelpertime_Time\n    UpdatedAt      whereHelpernull_Time\n    State          whereHelpernull_String\n    Operation      whereHelpernull_String\n    ResourceGUID   whereHelpernull_String\n    ResourceType   whereHelpernull_String\n    DelayedJobGUID whereHelpernull_String\n    CFAPIError     whereHelpernull_String\n}{\n    ID:             whereHelperint{field: "\\"jobs\\".\\"id\\""},\n    GUID:           whereHelperstring{field: "\\"jobs\\".\\"guid\\""},\n    CreatedAt:      whereHelpertime_Time{field: "\\"jobs\\".\\"created_at\\""},\n    UpdatedAt:      whereHelpernull_Time{field: "\\"jobs\\".\\"updated_at\\""},\n    State:          whereHelpernull_String{field: "\\"jobs\\".\\"state\\""},\n    Operation:      whereHelpernull_String{field: "\\"jobs\\".\\"operation\\""},\n    ResourceGUID:   whereHelpernull_String{field: "\\"jobs\\".\\"resource_guid\\""},\n    ResourceType:   whereHelpernull_String{field: "\\"jobs\\".\\"resource_type\\""},\n    DelayedJobGUID: whereHelpernull_String{field: "\\"jobs\\".\\"delayed_job_guid\\""},\n    CFAPIError:     whereHelpernull_String{field: "\\"jobs\\".\\"cf_api_error\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var KpackLifecycleDatumColumns = struct {\n    ID          string\n    GUID        string\n    CreatedAt   string\n    UpdatedAt   string\n    BuildGUID   string\n    DropletGUID string\n    AppGUID     string\n    Buildpacks  string\n}{\n    ID:          "id",\n    GUID:        "guid",\n    CreatedAt:   "created_at",\n    UpdatedAt:   "updated_at",\n    BuildGUID:   "build_guid",\n    DropletGUID: "droplet_guid",\n    AppGUID:     "app_guid",\n    Buildpacks:  "buildpacks",\n}\n')),(0,o.kt)("p",null,"KpackLifecycleDatumRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var KpackLifecycleDatumRels = struct {\n    App   string\n    Build string\n}{\n    App:   "App",\n    Build: "Build",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var KpackLifecycleDatumTableColumns = struct {\n    ID          string\n    GUID        string\n    CreatedAt   string\n    UpdatedAt   string\n    BuildGUID   string\n    DropletGUID string\n    AppGUID     string\n    Buildpacks  string\n}{\n    ID:          "kpack_lifecycle_data.id",\n    GUID:        "kpack_lifecycle_data.guid",\n    CreatedAt:   "kpack_lifecycle_data.created_at",\n    UpdatedAt:   "kpack_lifecycle_data.updated_at",\n    BuildGUID:   "kpack_lifecycle_data.build_guid",\n    DropletGUID: "kpack_lifecycle_data.droplet_guid",\n    AppGUID:     "kpack_lifecycle_data.app_guid",\n    Buildpacks:  "kpack_lifecycle_data.buildpacks",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var KpackLifecycleDatumWhere = struct {\n    ID          whereHelperint\n    GUID        whereHelperstring\n    CreatedAt   whereHelpertime_Time\n    UpdatedAt   whereHelpernull_Time\n    BuildGUID   whereHelpernull_String\n    DropletGUID whereHelpernull_String\n    AppGUID     whereHelpernull_String\n    Buildpacks  whereHelpernull_String\n}{\n    ID:          whereHelperint{field: "\\"kpack_lifecycle_data\\".\\"id\\""},\n    GUID:        whereHelperstring{field: "\\"kpack_lifecycle_data\\".\\"guid\\""},\n    CreatedAt:   whereHelpertime_Time{field: "\\"kpack_lifecycle_data\\".\\"created_at\\""},\n    UpdatedAt:   whereHelpernull_Time{field: "\\"kpack_lifecycle_data\\".\\"updated_at\\""},\n    BuildGUID:   whereHelpernull_String{field: "\\"kpack_lifecycle_data\\".\\"build_guid\\""},\n    DropletGUID: whereHelpernull_String{field: "\\"kpack_lifecycle_data\\".\\"droplet_guid\\""},\n    AppGUID:     whereHelpernull_String{field: "\\"kpack_lifecycle_data\\".\\"app_guid\\""},\n    Buildpacks:  whereHelpernull_String{field: "\\"kpack_lifecycle_data\\".\\"buildpacks\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var LockingColumns = struct {\n    ID   string\n    Name string\n}{\n    ID:   "id",\n    Name: "name",\n}\n')),(0,o.kt)("p",null,"LockingRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var LockingRels = struct {\n}{}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var LockingTableColumns = struct {\n    ID   string\n    Name string\n}{\n    ID:   "lockings.id",\n    Name: "lockings.name",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var LockingWhere = struct {\n    ID   whereHelperint\n    Name whereHelperstring\n}{\n    ID:   whereHelperint{field: "\\"lockings\\".\\"id\\""},\n    Name: whereHelperstring{field: "\\"lockings\\".\\"name\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationAnnotationColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    Key:          "key",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"OrganizationAnnotationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationAnnotationRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationAnnotationTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "organization_annotations.id",\n    GUID:         "organization_annotations.guid",\n    CreatedAt:    "organization_annotations.created_at",\n    UpdatedAt:    "organization_annotations.updated_at",\n    ResourceGUID: "organization_annotations.resource_guid",\n    KeyPrefix:    "organization_annotations.key_prefix",\n    Key:          "organization_annotations.key",\n    Value:        "organization_annotations.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationAnnotationWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    Key          whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"organization_annotations\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"organization_annotations\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"organization_annotations\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"organization_annotations\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"organization_annotations\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"organization_annotations\\".\\"key_prefix\\""},\n    Key:          whereHelpernull_String{field: "\\"organization_annotations\\".\\"key\\""},\n    Value:        whereHelpernull_String{field: "\\"organization_annotations\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationColumns = struct {\n    ID                          string\n    GUID                        string\n    CreatedAt                   string\n    UpdatedAt                   string\n    Name                        string\n    BillingEnabled              string\n    QuotaDefinitionID           string\n    Status                      string\n    DefaultIsolationSegmentGUID string\n}{\n    ID:                          "id",\n    GUID:                        "guid",\n    CreatedAt:                   "created_at",\n    UpdatedAt:                   "updated_at",\n    Name:                        "name",\n    BillingEnabled:              "billing_enabled",\n    QuotaDefinitionID:           "quota_definition_id",\n    Status:                      "status",\n    DefaultIsolationSegmentGUID: "default_isolation_segment_guid",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationLabelColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    KeyName:      "key_name",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"OrganizationLabelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationLabelRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationLabelTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "organization_labels.id",\n    GUID:         "organization_labels.guid",\n    CreatedAt:    "organization_labels.created_at",\n    UpdatedAt:    "organization_labels.updated_at",\n    ResourceGUID: "organization_labels.resource_guid",\n    KeyPrefix:    "organization_labels.key_prefix",\n    KeyName:      "organization_labels.key_name",\n    Value:        "organization_labels.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationLabelWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    KeyName      whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"organization_labels\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"organization_labels\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"organization_labels\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"organization_labels\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"organization_labels\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"organization_labels\\".\\"key_prefix\\""},\n    KeyName:      whereHelpernull_String{field: "\\"organization_labels\\".\\"key_name\\""},\n    Value:        whereHelpernull_String{field: "\\"organization_labels\\".\\"value\\""},\n}\n')),(0,o.kt)("p",null,"OrganizationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationRels = struct {\n    QuotaDefinition                 string\n    OwningOrganizationDomains       string\n    ResourceOrganizationAnnotations string\n    ResourceOrganizationLabels      string\n    OrganizationsAuditors           string\n    OrganizationsBillingManagers    string\n    IsolationSegments               string\n    OrganizationsManagers           string\n    OrganizationsPrivateDomains     string\n    OrganizationsUsers              string\n    ServicePlanVisibilities         string\n    SpaceQuotaDefinitions           string\n    Spaces                          string\n}{\n    QuotaDefinition:                 "QuotaDefinition",\n    OwningOrganizationDomains:       "OwningOrganizationDomains",\n    ResourceOrganizationAnnotations: "ResourceOrganizationAnnotations",\n    ResourceOrganizationLabels:      "ResourceOrganizationLabels",\n    OrganizationsAuditors:           "OrganizationsAuditors",\n    OrganizationsBillingManagers:    "OrganizationsBillingManagers",\n    IsolationSegments:               "IsolationSegments",\n    OrganizationsManagers:           "OrganizationsManagers",\n    OrganizationsPrivateDomains:     "OrganizationsPrivateDomains",\n    OrganizationsUsers:              "OrganizationsUsers",\n    ServicePlanVisibilities:         "ServicePlanVisibilities",\n    SpaceQuotaDefinitions:           "SpaceQuotaDefinitions",\n    Spaces:                          "Spaces",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationTableColumns = struct {\n    ID                          string\n    GUID                        string\n    CreatedAt                   string\n    UpdatedAt                   string\n    Name                        string\n    BillingEnabled              string\n    QuotaDefinitionID           string\n    Status                      string\n    DefaultIsolationSegmentGUID string\n}{\n    ID:                          "organizations.id",\n    GUID:                        "organizations.guid",\n    CreatedAt:                   "organizations.created_at",\n    UpdatedAt:                   "organizations.updated_at",\n    Name:                        "organizations.name",\n    BillingEnabled:              "organizations.billing_enabled",\n    QuotaDefinitionID:           "organizations.quota_definition_id",\n    Status:                      "organizations.status",\n    DefaultIsolationSegmentGUID: "organizations.default_isolation_segment_guid",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationWhere = struct {\n    ID                          whereHelperint\n    GUID                        whereHelperstring\n    CreatedAt                   whereHelpertime_Time\n    UpdatedAt                   whereHelpernull_Time\n    Name                        whereHelperstring\n    BillingEnabled              whereHelperbool\n    QuotaDefinitionID           whereHelperint\n    Status                      whereHelpernull_String\n    DefaultIsolationSegmentGUID whereHelpernull_String\n}{\n    ID:                          whereHelperint{field: "\\"organizations\\".\\"id\\""},\n    GUID:                        whereHelperstring{field: "\\"organizations\\".\\"guid\\""},\n    CreatedAt:                   whereHelpertime_Time{field: "\\"organizations\\".\\"created_at\\""},\n    UpdatedAt:                   whereHelpernull_Time{field: "\\"organizations\\".\\"updated_at\\""},\n    Name:                        whereHelperstring{field: "\\"organizations\\".\\"name\\""},\n    BillingEnabled:              whereHelperbool{field: "\\"organizations\\".\\"billing_enabled\\""},\n    QuotaDefinitionID:           whereHelperint{field: "\\"organizations\\".\\"quota_definition_id\\""},\n    Status:                      whereHelpernull_String{field: "\\"organizations\\".\\"status\\""},\n    DefaultIsolationSegmentGUID: whereHelpernull_String{field: "\\"organizations\\".\\"default_isolation_segment_guid\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationsAuditorColumns = struct {\n    OrganizationID          string\n    UserID                  string\n    OrganizationsAuditorsPK string\n    RoleGUID                string\n    CreatedAt               string\n    UpdatedAt               string\n}{\n    OrganizationID:          "organization_id",\n    UserID:                  "user_id",\n    OrganizationsAuditorsPK: "organizations_auditors_pk",\n    RoleGUID:                "role_guid",\n    CreatedAt:               "created_at",\n    UpdatedAt:               "updated_at",\n}\n')),(0,o.kt)("p",null,"OrganizationsAuditorRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationsAuditorRels = struct {\n    Organization string\n    User         string\n}{\n    Organization: "Organization",\n    User:         "User",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationsAuditorTableColumns = struct {\n    OrganizationID          string\n    UserID                  string\n    OrganizationsAuditorsPK string\n    RoleGUID                string\n    CreatedAt               string\n    UpdatedAt               string\n}{\n    OrganizationID:          "organizations_auditors.organization_id",\n    UserID:                  "organizations_auditors.user_id",\n    OrganizationsAuditorsPK: "organizations_auditors.organizations_auditors_pk",\n    RoleGUID:                "organizations_auditors.role_guid",\n    CreatedAt:               "organizations_auditors.created_at",\n    UpdatedAt:               "organizations_auditors.updated_at",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationsAuditorWhere = struct {\n    OrganizationID          whereHelperint\n    UserID                  whereHelperint\n    OrganizationsAuditorsPK whereHelperint\n    RoleGUID                whereHelpernull_String\n    CreatedAt               whereHelpertime_Time\n    UpdatedAt               whereHelpertime_Time\n}{\n    OrganizationID:          whereHelperint{field: "\\"organizations_auditors\\".\\"organization_id\\""},\n    UserID:                  whereHelperint{field: "\\"organizations_auditors\\".\\"user_id\\""},\n    OrganizationsAuditorsPK: whereHelperint{field: "\\"organizations_auditors\\".\\"organizations_auditors_pk\\""},\n    RoleGUID:                whereHelpernull_String{field: "\\"organizations_auditors\\".\\"role_guid\\""},\n    CreatedAt:               whereHelpertime_Time{field: "\\"organizations_auditors\\".\\"created_at\\""},\n    UpdatedAt:               whereHelpertime_Time{field: "\\"organizations_auditors\\".\\"updated_at\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationsBillingManagerColumns = struct {\n    OrganizationID                 string\n    UserID                         string\n    OrganizationsBillingManagersPK string\n    RoleGUID                       string\n    CreatedAt                      string\n    UpdatedAt                      string\n}{\n    OrganizationID:                 "organization_id",\n    UserID:                         "user_id",\n    OrganizationsBillingManagersPK: "organizations_billing_managers_pk",\n    RoleGUID:                       "role_guid",\n    CreatedAt:                      "created_at",\n    UpdatedAt:                      "updated_at",\n}\n')),(0,o.kt)("p",null,"OrganizationsBillingManagerRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationsBillingManagerRels = struct {\n    Organization string\n    User         string\n}{\n    Organization: "Organization",\n    User:         "User",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationsBillingManagerTableColumns = struct {\n    OrganizationID                 string\n    UserID                         string\n    OrganizationsBillingManagersPK string\n    RoleGUID                       string\n    CreatedAt                      string\n    UpdatedAt                      string\n}{\n    OrganizationID:                 "organizations_billing_managers.organization_id",\n    UserID:                         "organizations_billing_managers.user_id",\n    OrganizationsBillingManagersPK: "organizations_billing_managers.organizations_billing_managers_pk",\n    RoleGUID:                       "organizations_billing_managers.role_guid",\n    CreatedAt:                      "organizations_billing_managers.created_at",\n    UpdatedAt:                      "organizations_billing_managers.updated_at",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationsBillingManagerWhere = struct {\n    OrganizationID                 whereHelperint\n    UserID                         whereHelperint\n    OrganizationsBillingManagersPK whereHelperint\n    RoleGUID                       whereHelpernull_String\n    CreatedAt                      whereHelpertime_Time\n    UpdatedAt                      whereHelpertime_Time\n}{\n    OrganizationID:                 whereHelperint{field: "\\"organizations_billing_managers\\".\\"organization_id\\""},\n    UserID:                         whereHelperint{field: "\\"organizations_billing_managers\\".\\"user_id\\""},\n    OrganizationsBillingManagersPK: whereHelperint{field: "\\"organizations_billing_managers\\".\\"organizations_billing_managers_pk\\""},\n    RoleGUID:                       whereHelpernull_String{field: "\\"organizations_billing_managers\\".\\"role_guid\\""},\n    CreatedAt:                      whereHelpertime_Time{field: "\\"organizations_billing_managers\\".\\"created_at\\""},\n    UpdatedAt:                      whereHelpertime_Time{field: "\\"organizations_billing_managers\\".\\"updated_at\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationsManagerColumns = struct {\n    OrganizationID          string\n    UserID                  string\n    OrganizationsManagersPK string\n    RoleGUID                string\n    CreatedAt               string\n    UpdatedAt               string\n}{\n    OrganizationID:          "organization_id",\n    UserID:                  "user_id",\n    OrganizationsManagersPK: "organizations_managers_pk",\n    RoleGUID:                "role_guid",\n    CreatedAt:               "created_at",\n    UpdatedAt:               "updated_at",\n}\n')),(0,o.kt)("p",null,"OrganizationsManagerRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationsManagerRels = struct {\n    Organization string\n    User         string\n}{\n    Organization: "Organization",\n    User:         "User",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationsManagerTableColumns = struct {\n    OrganizationID          string\n    UserID                  string\n    OrganizationsManagersPK string\n    RoleGUID                string\n    CreatedAt               string\n    UpdatedAt               string\n}{\n    OrganizationID:          "organizations_managers.organization_id",\n    UserID:                  "organizations_managers.user_id",\n    OrganizationsManagersPK: "organizations_managers.organizations_managers_pk",\n    RoleGUID:                "organizations_managers.role_guid",\n    CreatedAt:               "organizations_managers.created_at",\n    UpdatedAt:               "organizations_managers.updated_at",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationsManagerWhere = struct {\n    OrganizationID          whereHelperint\n    UserID                  whereHelperint\n    OrganizationsManagersPK whereHelperint\n    RoleGUID                whereHelpernull_String\n    CreatedAt               whereHelpertime_Time\n    UpdatedAt               whereHelpertime_Time\n}{\n    OrganizationID:          whereHelperint{field: "\\"organizations_managers\\".\\"organization_id\\""},\n    UserID:                  whereHelperint{field: "\\"organizations_managers\\".\\"user_id\\""},\n    OrganizationsManagersPK: whereHelperint{field: "\\"organizations_managers\\".\\"organizations_managers_pk\\""},\n    RoleGUID:                whereHelpernull_String{field: "\\"organizations_managers\\".\\"role_guid\\""},\n    CreatedAt:               whereHelpertime_Time{field: "\\"organizations_managers\\".\\"created_at\\""},\n    UpdatedAt:               whereHelpertime_Time{field: "\\"organizations_managers\\".\\"updated_at\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationsPrivateDomainColumns = struct {\n    OrganizationID                string\n    PrivateDomainID               string\n    OrganizationsPrivateDomainsPK string\n}{\n    OrganizationID:                "organization_id",\n    PrivateDomainID:               "private_domain_id",\n    OrganizationsPrivateDomainsPK: "organizations_private_domains_pk",\n}\n')),(0,o.kt)("p",null,"OrganizationsPrivateDomainRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationsPrivateDomainRels = struct {\n    Organization  string\n    PrivateDomain string\n}{\n    Organization:  "Organization",\n    PrivateDomain: "PrivateDomain",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationsPrivateDomainTableColumns = struct {\n    OrganizationID                string\n    PrivateDomainID               string\n    OrganizationsPrivateDomainsPK string\n}{\n    OrganizationID:                "organizations_private_domains.organization_id",\n    PrivateDomainID:               "organizations_private_domains.private_domain_id",\n    OrganizationsPrivateDomainsPK: "organizations_private_domains.organizations_private_domains_pk",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationsPrivateDomainWhere = struct {\n    OrganizationID                whereHelperint\n    PrivateDomainID               whereHelperint\n    OrganizationsPrivateDomainsPK whereHelperint\n}{\n    OrganizationID:                whereHelperint{field: "\\"organizations_private_domains\\".\\"organization_id\\""},\n    PrivateDomainID:               whereHelperint{field: "\\"organizations_private_domains\\".\\"private_domain_id\\""},\n    OrganizationsPrivateDomainsPK: whereHelperint{field: "\\"organizations_private_domains\\".\\"organizations_private_domains_pk\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationsUserColumns = struct {\n    OrganizationID       string\n    UserID               string\n    OrganizationsUsersPK string\n    RoleGUID             string\n    CreatedAt            string\n    UpdatedAt            string\n}{\n    OrganizationID:       "organization_id",\n    UserID:               "user_id",\n    OrganizationsUsersPK: "organizations_users_pk",\n    RoleGUID:             "role_guid",\n    CreatedAt:            "created_at",\n    UpdatedAt:            "updated_at",\n}\n')),(0,o.kt)("p",null,"OrganizationsUserRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationsUserRels = struct {\n    Organization string\n    User         string\n}{\n    Organization: "Organization",\n    User:         "User",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationsUserTableColumns = struct {\n    OrganizationID       string\n    UserID               string\n    OrganizationsUsersPK string\n    RoleGUID             string\n    CreatedAt            string\n    UpdatedAt            string\n}{\n    OrganizationID:       "organizations_users.organization_id",\n    UserID:               "organizations_users.user_id",\n    OrganizationsUsersPK: "organizations_users.organizations_users_pk",\n    RoleGUID:             "organizations_users.role_guid",\n    CreatedAt:            "organizations_users.created_at",\n    UpdatedAt:            "organizations_users.updated_at",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrganizationsUserWhere = struct {\n    OrganizationID       whereHelperint\n    UserID               whereHelperint\n    OrganizationsUsersPK whereHelperint\n    RoleGUID             whereHelpernull_String\n    CreatedAt            whereHelpertime_Time\n    UpdatedAt            whereHelpertime_Time\n}{\n    OrganizationID:       whereHelperint{field: "\\"organizations_users\\".\\"organization_id\\""},\n    UserID:               whereHelperint{field: "\\"organizations_users\\".\\"user_id\\""},\n    OrganizationsUsersPK: whereHelperint{field: "\\"organizations_users\\".\\"organizations_users_pk\\""},\n    RoleGUID:             whereHelpernull_String{field: "\\"organizations_users\\".\\"role_guid\\""},\n    CreatedAt:            whereHelpertime_Time{field: "\\"organizations_users\\".\\"created_at\\""},\n    UpdatedAt:            whereHelpertime_Time{field: "\\"organizations_users\\".\\"updated_at\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrphanedBlobColumns = struct {\n    ID            string\n    GUID          string\n    CreatedAt     string\n    UpdatedAt     string\n    BlobKey       string\n    DirtyCount    string\n    BlobstoreType string\n}{\n    ID:            "id",\n    GUID:          "guid",\n    CreatedAt:     "created_at",\n    UpdatedAt:     "updated_at",\n    BlobKey:       "blob_key",\n    DirtyCount:    "dirty_count",\n    BlobstoreType: "blobstore_type",\n}\n')),(0,o.kt)("p",null,"OrphanedBlobRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var OrphanedBlobRels = struct {\n}{}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrphanedBlobTableColumns = struct {\n    ID            string\n    GUID          string\n    CreatedAt     string\n    UpdatedAt     string\n    BlobKey       string\n    DirtyCount    string\n    BlobstoreType string\n}{\n    ID:            "orphaned_blobs.id",\n    GUID:          "orphaned_blobs.guid",\n    CreatedAt:     "orphaned_blobs.created_at",\n    UpdatedAt:     "orphaned_blobs.updated_at",\n    BlobKey:       "orphaned_blobs.blob_key",\n    DirtyCount:    "orphaned_blobs.dirty_count",\n    BlobstoreType: "orphaned_blobs.blobstore_type",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var OrphanedBlobWhere = struct {\n    ID            whereHelperint\n    GUID          whereHelperstring\n    CreatedAt     whereHelpertime_Time\n    UpdatedAt     whereHelpernull_Time\n    BlobKey       whereHelpernull_String\n    DirtyCount    whereHelpernull_Int\n    BlobstoreType whereHelpernull_String\n}{\n    ID:            whereHelperint{field: "\\"orphaned_blobs\\".\\"id\\""},\n    GUID:          whereHelperstring{field: "\\"orphaned_blobs\\".\\"guid\\""},\n    CreatedAt:     whereHelpertime_Time{field: "\\"orphaned_blobs\\".\\"created_at\\""},\n    UpdatedAt:     whereHelpernull_Time{field: "\\"orphaned_blobs\\".\\"updated_at\\""},\n    BlobKey:       whereHelpernull_String{field: "\\"orphaned_blobs\\".\\"blob_key\\""},\n    DirtyCount:    whereHelpernull_Int{field: "\\"orphaned_blobs\\".\\"dirty_count\\""},\n    BlobstoreType: whereHelpernull_String{field: "\\"orphaned_blobs\\".\\"blobstore_type\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var PackageAnnotationColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    Key:          "key",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"PackageAnnotationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var PackageAnnotationRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var PackageAnnotationTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "package_annotations.id",\n    GUID:         "package_annotations.guid",\n    CreatedAt:    "package_annotations.created_at",\n    UpdatedAt:    "package_annotations.updated_at",\n    ResourceGUID: "package_annotations.resource_guid",\n    KeyPrefix:    "package_annotations.key_prefix",\n    Key:          "package_annotations.key",\n    Value:        "package_annotations.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var PackageAnnotationWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    Key          whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"package_annotations\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"package_annotations\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"package_annotations\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"package_annotations\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"package_annotations\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"package_annotations\\".\\"key_prefix\\""},\n    Key:          whereHelpernull_String{field: "\\"package_annotations\\".\\"key\\""},\n    Value:        whereHelpernull_String{field: "\\"package_annotations\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var PackageColumns = struct {\n    ID                      string\n    GUID                    string\n    CreatedAt               string\n    UpdatedAt               string\n    Type                    string\n    PackageHash             string\n    State                   string\n    Error                   string\n    AppGUID                 string\n    DockerImage             string\n    Sha256Checksum          string\n    DockerUsername          string\n    DockerPasswordSalt      string\n    EncryptedDockerPassword string\n    EncryptionKeyLabel      string\n    EncryptionIterations    string\n}{\n    ID:                      "id",\n    GUID:                    "guid",\n    CreatedAt:               "created_at",\n    UpdatedAt:               "updated_at",\n    Type:                    "type",\n    PackageHash:             "package_hash",\n    State:                   "state",\n    Error:                   "error",\n    AppGUID:                 "app_guid",\n    DockerImage:             "docker_image",\n    Sha256Checksum:          "sha256_checksum",\n    DockerUsername:          "docker_username",\n    DockerPasswordSalt:      "docker_password_salt",\n    EncryptedDockerPassword: "encrypted_docker_password",\n    EncryptionKeyLabel:      "encryption_key_label",\n    EncryptionIterations:    "encryption_iterations",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var PackageLabelColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    KeyName:      "key_name",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"PackageLabelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var PackageLabelRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var PackageLabelTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "package_labels.id",\n    GUID:         "package_labels.guid",\n    CreatedAt:    "package_labels.created_at",\n    UpdatedAt:    "package_labels.updated_at",\n    ResourceGUID: "package_labels.resource_guid",\n    KeyPrefix:    "package_labels.key_prefix",\n    KeyName:      "package_labels.key_name",\n    Value:        "package_labels.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var PackageLabelWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    KeyName      whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"package_labels\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"package_labels\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"package_labels\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"package_labels\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"package_labels\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"package_labels\\".\\"key_prefix\\""},\n    KeyName:      whereHelpernull_String{field: "\\"package_labels\\".\\"key_name\\""},\n    Value:        whereHelpernull_String{field: "\\"package_labels\\".\\"value\\""},\n}\n')),(0,o.kt)("p",null,"PackageRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var PackageRels = struct {\n    App                        string\n    ResourcePackageAnnotations string\n    ResourcePackageLabels      string\n}{\n    App:                        "App",\n    ResourcePackageAnnotations: "ResourcePackageAnnotations",\n    ResourcePackageLabels:      "ResourcePackageLabels",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var PackageTableColumns = struct {\n    ID                      string\n    GUID                    string\n    CreatedAt               string\n    UpdatedAt               string\n    Type                    string\n    PackageHash             string\n    State                   string\n    Error                   string\n    AppGUID                 string\n    DockerImage             string\n    Sha256Checksum          string\n    DockerUsername          string\n    DockerPasswordSalt      string\n    EncryptedDockerPassword string\n    EncryptionKeyLabel      string\n    EncryptionIterations    string\n}{\n    ID:                      "packages.id",\n    GUID:                    "packages.guid",\n    CreatedAt:               "packages.created_at",\n    UpdatedAt:               "packages.updated_at",\n    Type:                    "packages.type",\n    PackageHash:             "packages.package_hash",\n    State:                   "packages.state",\n    Error:                   "packages.error",\n    AppGUID:                 "packages.app_guid",\n    DockerImage:             "packages.docker_image",\n    Sha256Checksum:          "packages.sha256_checksum",\n    DockerUsername:          "packages.docker_username",\n    DockerPasswordSalt:      "packages.docker_password_salt",\n    EncryptedDockerPassword: "packages.encrypted_docker_password",\n    EncryptionKeyLabel:      "packages.encryption_key_label",\n    EncryptionIterations:    "packages.encryption_iterations",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var PackageWhere = struct {\n    ID                      whereHelperint\n    GUID                    whereHelperstring\n    CreatedAt               whereHelpertime_Time\n    UpdatedAt               whereHelpernull_Time\n    Type                    whereHelpernull_String\n    PackageHash             whereHelpernull_String\n    State                   whereHelperstring\n    Error                   whereHelpernull_String\n    AppGUID                 whereHelpernull_String\n    DockerImage             whereHelpernull_String\n    Sha256Checksum          whereHelpernull_String\n    DockerUsername          whereHelpernull_String\n    DockerPasswordSalt      whereHelpernull_String\n    EncryptedDockerPassword whereHelpernull_String\n    EncryptionKeyLabel      whereHelpernull_String\n    EncryptionIterations    whereHelperint\n}{\n    ID:                      whereHelperint{field: "\\"packages\\".\\"id\\""},\n    GUID:                    whereHelperstring{field: "\\"packages\\".\\"guid\\""},\n    CreatedAt:               whereHelpertime_Time{field: "\\"packages\\".\\"created_at\\""},\n    UpdatedAt:               whereHelpernull_Time{field: "\\"packages\\".\\"updated_at\\""},\n    Type:                    whereHelpernull_String{field: "\\"packages\\".\\"type\\""},\n    PackageHash:             whereHelpernull_String{field: "\\"packages\\".\\"package_hash\\""},\n    State:                   whereHelperstring{field: "\\"packages\\".\\"state\\""},\n    Error:                   whereHelpernull_String{field: "\\"packages\\".\\"error\\""},\n    AppGUID:                 whereHelpernull_String{field: "\\"packages\\".\\"app_guid\\""},\n    DockerImage:             whereHelpernull_String{field: "\\"packages\\".\\"docker_image\\""},\n    Sha256Checksum:          whereHelpernull_String{field: "\\"packages\\".\\"sha256_checksum\\""},\n    DockerUsername:          whereHelpernull_String{field: "\\"packages\\".\\"docker_username\\""},\n    DockerPasswordSalt:      whereHelpernull_String{field: "\\"packages\\".\\"docker_password_salt\\""},\n    EncryptedDockerPassword: whereHelpernull_String{field: "\\"packages\\".\\"encrypted_docker_password\\""},\n    EncryptionKeyLabel:      whereHelpernull_String{field: "\\"packages\\".\\"encryption_key_label\\""},\n    EncryptionIterations:    whereHelperint{field: "\\"packages\\".\\"encryption_iterations\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ProcessAnnotationColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    Key:          "key",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"ProcessAnnotationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ProcessAnnotationRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ProcessAnnotationTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "process_annotations.id",\n    GUID:         "process_annotations.guid",\n    CreatedAt:    "process_annotations.created_at",\n    UpdatedAt:    "process_annotations.updated_at",\n    ResourceGUID: "process_annotations.resource_guid",\n    KeyPrefix:    "process_annotations.key_prefix",\n    Key:          "process_annotations.key",\n    Value:        "process_annotations.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ProcessAnnotationWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    Key          whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"process_annotations\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"process_annotations\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"process_annotations\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"process_annotations\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"process_annotations\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"process_annotations\\".\\"key_prefix\\""},\n    Key:          whereHelpernull_String{field: "\\"process_annotations\\".\\"key\\""},\n    Value:        whereHelpernull_String{field: "\\"process_annotations\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ProcessColumns = struct {\n    ID                             string\n    GUID                           string\n    CreatedAt                      string\n    UpdatedAt                      string\n    Production                     string\n    Memory                         string\n    Instances                      string\n    FileDescriptors                string\n    DiskQuota                      string\n    State                          string\n    Version                        string\n    Metadata                       string\n    DetectedBuildpack              string\n    NotDeleted                     string\n    HealthCheckTimeout             string\n    Diego                          string\n    PackageUpdatedAt               string\n    AppGUID                        string\n    Type                           string\n    HealthCheckType                string\n    Command                        string\n    EnableSSH                      string\n    EncryptedDockerCredentialsJSON string\n    DockerSalt                     string\n    Ports                          string\n    HealthCheckHTTPEndpoint        string\n    HealthCheckInvocationTimeout   string\n    RevisionGUID                   string\n}{\n    ID:                             "id",\n    GUID:                           "guid",\n    CreatedAt:                      "created_at",\n    UpdatedAt:                      "updated_at",\n    Production:                     "production",\n    Memory:                         "memory",\n    Instances:                      "instances",\n    FileDescriptors:                "file_descriptors",\n    DiskQuota:                      "disk_quota",\n    State:                          "state",\n    Version:                        "version",\n    Metadata:                       "metadata",\n    DetectedBuildpack:              "detected_buildpack",\n    NotDeleted:                     "not_deleted",\n    HealthCheckTimeout:             "health_check_timeout",\n    Diego:                          "diego",\n    PackageUpdatedAt:               "package_updated_at",\n    AppGUID:                        "app_guid",\n    Type:                           "type",\n    HealthCheckType:                "health_check_type",\n    Command:                        "command",\n    EnableSSH:                      "enable_ssh",\n    EncryptedDockerCredentialsJSON: "encrypted_docker_credentials_json",\n    DockerSalt:                     "docker_salt",\n    Ports:                          "ports",\n    HealthCheckHTTPEndpoint:        "health_check_http_endpoint",\n    HealthCheckInvocationTimeout:   "health_check_invocation_timeout",\n    RevisionGUID:                   "revision_guid",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ProcessLabelColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    KeyName:      "key_name",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"ProcessLabelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ProcessLabelRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ProcessLabelTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "process_labels.id",\n    GUID:         "process_labels.guid",\n    CreatedAt:    "process_labels.created_at",\n    UpdatedAt:    "process_labels.updated_at",\n    ResourceGUID: "process_labels.resource_guid",\n    KeyPrefix:    "process_labels.key_prefix",\n    KeyName:      "process_labels.key_name",\n    Value:        "process_labels.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ProcessLabelWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    KeyName      whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"process_labels\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"process_labels\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"process_labels\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"process_labels\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"process_labels\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"process_labels\\".\\"key_prefix\\""},\n    KeyName:      whereHelpernull_String{field: "\\"process_labels\\".\\"key_name\\""},\n    Value:        whereHelpernull_String{field: "\\"process_labels\\".\\"value\\""},\n}\n')),(0,o.kt)("p",null,"ProcessRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ProcessRels = struct {\n    App                        string\n    AppAppEvents               string\n    ResourceProcessAnnotations string\n    ResourceProcessLabels      string\n}{\n    App:                        "App",\n    AppAppEvents:               "AppAppEvents",\n    ResourceProcessAnnotations: "ResourceProcessAnnotations",\n    ResourceProcessLabels:      "ResourceProcessLabels",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ProcessTableColumns = struct {\n    ID                             string\n    GUID                           string\n    CreatedAt                      string\n    UpdatedAt                      string\n    Production                     string\n    Memory                         string\n    Instances                      string\n    FileDescriptors                string\n    DiskQuota                      string\n    State                          string\n    Version                        string\n    Metadata                       string\n    DetectedBuildpack              string\n    NotDeleted                     string\n    HealthCheckTimeout             string\n    Diego                          string\n    PackageUpdatedAt               string\n    AppGUID                        string\n    Type                           string\n    HealthCheckType                string\n    Command                        string\n    EnableSSH                      string\n    EncryptedDockerCredentialsJSON string\n    DockerSalt                     string\n    Ports                          string\n    HealthCheckHTTPEndpoint        string\n    HealthCheckInvocationTimeout   string\n    RevisionGUID                   string\n}{\n    ID:                             "processes.id",\n    GUID:                           "processes.guid",\n    CreatedAt:                      "processes.created_at",\n    UpdatedAt:                      "processes.updated_at",\n    Production:                     "processes.production",\n    Memory:                         "processes.memory",\n    Instances:                      "processes.instances",\n    FileDescriptors:                "processes.file_descriptors",\n    DiskQuota:                      "processes.disk_quota",\n    State:                          "processes.state",\n    Version:                        "processes.version",\n    Metadata:                       "processes.metadata",\n    DetectedBuildpack:              "processes.detected_buildpack",\n    NotDeleted:                     "processes.not_deleted",\n    HealthCheckTimeout:             "processes.health_check_timeout",\n    Diego:                          "processes.diego",\n    PackageUpdatedAt:               "processes.package_updated_at",\n    AppGUID:                        "processes.app_guid",\n    Type:                           "processes.type",\n    HealthCheckType:                "processes.health_check_type",\n    Command:                        "processes.command",\n    EnableSSH:                      "processes.enable_ssh",\n    EncryptedDockerCredentialsJSON: "processes.encrypted_docker_credentials_json",\n    DockerSalt:                     "processes.docker_salt",\n    Ports:                          "processes.ports",\n    HealthCheckHTTPEndpoint:        "processes.health_check_http_endpoint",\n    HealthCheckInvocationTimeout:   "processes.health_check_invocation_timeout",\n    RevisionGUID:                   "processes.revision_guid",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ProcessWhere = struct {\n    ID                             whereHelperint\n    GUID                           whereHelperstring\n    CreatedAt                      whereHelpertime_Time\n    UpdatedAt                      whereHelpernull_Time\n    Production                     whereHelpernull_Bool\n    Memory                         whereHelpernull_Int\n    Instances                      whereHelpernull_Int\n    FileDescriptors                whereHelpernull_Int\n    DiskQuota                      whereHelpernull_Int\n    State                          whereHelperstring\n    Version                        whereHelpernull_String\n    Metadata                       whereHelperstring\n    DetectedBuildpack              whereHelpernull_String\n    NotDeleted                     whereHelpernull_Bool\n    HealthCheckTimeout             whereHelpernull_Int\n    Diego                          whereHelpernull_Bool\n    PackageUpdatedAt               whereHelpernull_Time\n    AppGUID                        whereHelpernull_String\n    Type                           whereHelpernull_String\n    HealthCheckType                whereHelpernull_String\n    Command                        whereHelpernull_String\n    EnableSSH                      whereHelpernull_Bool\n    EncryptedDockerCredentialsJSON whereHelpernull_String\n    DockerSalt                     whereHelpernull_String\n    Ports                          whereHelpernull_String\n    HealthCheckHTTPEndpoint        whereHelpernull_String\n    HealthCheckInvocationTimeout   whereHelpernull_Int\n    RevisionGUID                   whereHelpernull_String\n}{\n    ID:                             whereHelperint{field: "\\"processes\\".\\"id\\""},\n    GUID:                           whereHelperstring{field: "\\"processes\\".\\"guid\\""},\n    CreatedAt:                      whereHelpertime_Time{field: "\\"processes\\".\\"created_at\\""},\n    UpdatedAt:                      whereHelpernull_Time{field: "\\"processes\\".\\"updated_at\\""},\n    Production:                     whereHelpernull_Bool{field: "\\"processes\\".\\"production\\""},\n    Memory:                         whereHelpernull_Int{field: "\\"processes\\".\\"memory\\""},\n    Instances:                      whereHelpernull_Int{field: "\\"processes\\".\\"instances\\""},\n    FileDescriptors:                whereHelpernull_Int{field: "\\"processes\\".\\"file_descriptors\\""},\n    DiskQuota:                      whereHelpernull_Int{field: "\\"processes\\".\\"disk_quota\\""},\n    State:                          whereHelperstring{field: "\\"processes\\".\\"state\\""},\n    Version:                        whereHelpernull_String{field: "\\"processes\\".\\"version\\""},\n    Metadata:                       whereHelperstring{field: "\\"processes\\".\\"metadata\\""},\n    DetectedBuildpack:              whereHelpernull_String{field: "\\"processes\\".\\"detected_buildpack\\""},\n    NotDeleted:                     whereHelpernull_Bool{field: "\\"processes\\".\\"not_deleted\\""},\n    HealthCheckTimeout:             whereHelpernull_Int{field: "\\"processes\\".\\"health_check_timeout\\""},\n    Diego:                          whereHelpernull_Bool{field: "\\"processes\\".\\"diego\\""},\n    PackageUpdatedAt:               whereHelpernull_Time{field: "\\"processes\\".\\"package_updated_at\\""},\n    AppGUID:                        whereHelpernull_String{field: "\\"processes\\".\\"app_guid\\""},\n    Type:                           whereHelpernull_String{field: "\\"processes\\".\\"type\\""},\n    HealthCheckType:                whereHelpernull_String{field: "\\"processes\\".\\"health_check_type\\""},\n    Command:                        whereHelpernull_String{field: "\\"processes\\".\\"command\\""},\n    EnableSSH:                      whereHelpernull_Bool{field: "\\"processes\\".\\"enable_ssh\\""},\n    EncryptedDockerCredentialsJSON: whereHelpernull_String{field: "\\"processes\\".\\"encrypted_docker_credentials_json\\""},\n    DockerSalt:                     whereHelpernull_String{field: "\\"processes\\".\\"docker_salt\\""},\n    Ports:                          whereHelpernull_String{field: "\\"processes\\".\\"ports\\""},\n    HealthCheckHTTPEndpoint:        whereHelpernull_String{field: "\\"processes\\".\\"health_check_http_endpoint\\""},\n    HealthCheckInvocationTimeout:   whereHelpernull_Int{field: "\\"processes\\".\\"health_check_invocation_timeout\\""},\n    RevisionGUID:                   whereHelpernull_String{field: "\\"processes\\".\\"revision_guid\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var QuotaDefinitionColumns = struct {\n    ID                      string\n    GUID                    string\n    CreatedAt               string\n    UpdatedAt               string\n    Name                    string\n    NonBasicServicesAllowed string\n    TotalServices           string\n    MemoryLimit             string\n    TotalRoutes             string\n    InstanceMemoryLimit     string\n    TotalPrivateDomains     string\n    AppInstanceLimit        string\n    AppTaskLimit            string\n    TotalServiceKeys        string\n    TotalReservedRoutePorts string\n}{\n    ID:                      "id",\n    GUID:                    "guid",\n    CreatedAt:               "created_at",\n    UpdatedAt:               "updated_at",\n    Name:                    "name",\n    NonBasicServicesAllowed: "non_basic_services_allowed",\n    TotalServices:           "total_services",\n    MemoryLimit:             "memory_limit",\n    TotalRoutes:             "total_routes",\n    InstanceMemoryLimit:     "instance_memory_limit",\n    TotalPrivateDomains:     "total_private_domains",\n    AppInstanceLimit:        "app_instance_limit",\n    AppTaskLimit:            "app_task_limit",\n    TotalServiceKeys:        "total_service_keys",\n    TotalReservedRoutePorts: "total_reserved_route_ports",\n}\n')),(0,o.kt)("p",null,"QuotaDefinitionRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var QuotaDefinitionRels = struct {\n    Organizations string\n}{\n    Organizations: "Organizations",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var QuotaDefinitionTableColumns = struct {\n    ID                      string\n    GUID                    string\n    CreatedAt               string\n    UpdatedAt               string\n    Name                    string\n    NonBasicServicesAllowed string\n    TotalServices           string\n    MemoryLimit             string\n    TotalRoutes             string\n    InstanceMemoryLimit     string\n    TotalPrivateDomains     string\n    AppInstanceLimit        string\n    AppTaskLimit            string\n    TotalServiceKeys        string\n    TotalReservedRoutePorts string\n}{\n    ID:                      "quota_definitions.id",\n    GUID:                    "quota_definitions.guid",\n    CreatedAt:               "quota_definitions.created_at",\n    UpdatedAt:               "quota_definitions.updated_at",\n    Name:                    "quota_definitions.name",\n    NonBasicServicesAllowed: "quota_definitions.non_basic_services_allowed",\n    TotalServices:           "quota_definitions.total_services",\n    MemoryLimit:             "quota_definitions.memory_limit",\n    TotalRoutes:             "quota_definitions.total_routes",\n    InstanceMemoryLimit:     "quota_definitions.instance_memory_limit",\n    TotalPrivateDomains:     "quota_definitions.total_private_domains",\n    AppInstanceLimit:        "quota_definitions.app_instance_limit",\n    AppTaskLimit:            "quota_definitions.app_task_limit",\n    TotalServiceKeys:        "quota_definitions.total_service_keys",\n    TotalReservedRoutePorts: "quota_definitions.total_reserved_route_ports",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var QuotaDefinitionWhere = struct {\n    ID                      whereHelperint\n    GUID                    whereHelperstring\n    CreatedAt               whereHelpertime_Time\n    UpdatedAt               whereHelpernull_Time\n    Name                    whereHelperstring\n    NonBasicServicesAllowed whereHelperbool\n    TotalServices           whereHelperint\n    MemoryLimit             whereHelperint\n    TotalRoutes             whereHelperint\n    InstanceMemoryLimit     whereHelperint\n    TotalPrivateDomains     whereHelperint\n    AppInstanceLimit        whereHelpernull_Int\n    AppTaskLimit            whereHelpernull_Int\n    TotalServiceKeys        whereHelpernull_Int\n    TotalReservedRoutePorts whereHelpernull_Int\n}{\n    ID:                      whereHelperint{field: "\\"quota_definitions\\".\\"id\\""},\n    GUID:                    whereHelperstring{field: "\\"quota_definitions\\".\\"guid\\""},\n    CreatedAt:               whereHelpertime_Time{field: "\\"quota_definitions\\".\\"created_at\\""},\n    UpdatedAt:               whereHelpernull_Time{field: "\\"quota_definitions\\".\\"updated_at\\""},\n    Name:                    whereHelperstring{field: "\\"quota_definitions\\".\\"name\\""},\n    NonBasicServicesAllowed: whereHelperbool{field: "\\"quota_definitions\\".\\"non_basic_services_allowed\\""},\n    TotalServices:           whereHelperint{field: "\\"quota_definitions\\".\\"total_services\\""},\n    MemoryLimit:             whereHelperint{field: "\\"quota_definitions\\".\\"memory_limit\\""},\n    TotalRoutes:             whereHelperint{field: "\\"quota_definitions\\".\\"total_routes\\""},\n    InstanceMemoryLimit:     whereHelperint{field: "\\"quota_definitions\\".\\"instance_memory_limit\\""},\n    TotalPrivateDomains:     whereHelperint{field: "\\"quota_definitions\\".\\"total_private_domains\\""},\n    AppInstanceLimit:        whereHelpernull_Int{field: "\\"quota_definitions\\".\\"app_instance_limit\\""},\n    AppTaskLimit:            whereHelpernull_Int{field: "\\"quota_definitions\\".\\"app_task_limit\\""},\n    TotalServiceKeys:        whereHelpernull_Int{field: "\\"quota_definitions\\".\\"total_service_keys\\""},\n    TotalReservedRoutePorts: whereHelpernull_Int{field: "\\"quota_definitions\\".\\"total_reserved_route_ports\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RequestCountColumns = struct {\n    ID         string\n    UserGUID   string\n    Count      string\n    ValidUntil string\n}{\n    ID:         "id",\n    UserGUID:   "user_guid",\n    Count:      "count",\n    ValidUntil: "valid_until",\n}\n')),(0,o.kt)("p",null,"RequestCountRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var RequestCountRels = struct {\n}{}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RequestCountTableColumns = struct {\n    ID         string\n    UserGUID   string\n    Count      string\n    ValidUntil string\n}{\n    ID:         "request_counts.id",\n    UserGUID:   "request_counts.user_guid",\n    Count:      "request_counts.count",\n    ValidUntil: "request_counts.valid_until",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RequestCountWhere = struct {\n    ID         whereHelperint\n    UserGUID   whereHelpernull_String\n    Count      whereHelpernull_Int\n    ValidUntil whereHelpernull_Time\n}{\n    ID:         whereHelperint{field: "\\"request_counts\\".\\"id\\""},\n    UserGUID:   whereHelpernull_String{field: "\\"request_counts\\".\\"user_guid\\""},\n    Count:      whereHelpernull_Int{field: "\\"request_counts\\".\\"count\\""},\n    ValidUntil: whereHelpernull_Time{field: "\\"request_counts\\".\\"valid_until\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RevisionAnnotationColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    Key:          "key",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"RevisionAnnotationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RevisionAnnotationRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RevisionAnnotationTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "revision_annotations.id",\n    GUID:         "revision_annotations.guid",\n    CreatedAt:    "revision_annotations.created_at",\n    UpdatedAt:    "revision_annotations.updated_at",\n    ResourceGUID: "revision_annotations.resource_guid",\n    KeyPrefix:    "revision_annotations.key_prefix",\n    Key:          "revision_annotations.key",\n    Value:        "revision_annotations.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RevisionAnnotationWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    Key          whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"revision_annotations\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"revision_annotations\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"revision_annotations\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"revision_annotations\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"revision_annotations\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"revision_annotations\\".\\"key_prefix\\""},\n    Key:          whereHelpernull_String{field: "\\"revision_annotations\\".\\"key\\""},\n    Value:        whereHelpernull_String{field: "\\"revision_annotations\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RevisionColumns = struct {\n    ID                            string\n    GUID                          string\n    CreatedAt                     string\n    UpdatedAt                     string\n    AppGUID                       string\n    Version                       string\n    DropletGUID                   string\n    EncryptedEnvironmentVariables string\n    Salt                          string\n    EncryptionKeyLabel            string\n    EncryptionIterations          string\n    Description                   string\n}{\n    ID:                            "id",\n    GUID:                          "guid",\n    CreatedAt:                     "created_at",\n    UpdatedAt:                     "updated_at",\n    AppGUID:                       "app_guid",\n    Version:                       "version",\n    DropletGUID:                   "droplet_guid",\n    EncryptedEnvironmentVariables: "encrypted_environment_variables",\n    Salt:                          "salt",\n    EncryptionKeyLabel:            "encryption_key_label",\n    EncryptionIterations:          "encryption_iterations",\n    Description:                   "description",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RevisionLabelColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    KeyName:      "key_name",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"RevisionLabelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RevisionLabelRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RevisionLabelTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "revision_labels.id",\n    GUID:         "revision_labels.guid",\n    CreatedAt:    "revision_labels.created_at",\n    UpdatedAt:    "revision_labels.updated_at",\n    ResourceGUID: "revision_labels.resource_guid",\n    KeyPrefix:    "revision_labels.key_prefix",\n    KeyName:      "revision_labels.key_name",\n    Value:        "revision_labels.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RevisionLabelWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    KeyName      whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"revision_labels\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"revision_labels\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"revision_labels\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"revision_labels\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"revision_labels\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"revision_labels\\".\\"key_prefix\\""},\n    KeyName:      whereHelpernull_String{field: "\\"revision_labels\\".\\"key_name\\""},\n    Value:        whereHelpernull_String{field: "\\"revision_labels\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RevisionProcessCommandColumns = struct {\n    ID             string\n    GUID           string\n    CreatedAt      string\n    UpdatedAt      string\n    RevisionGUID   string\n    ProcessType    string\n    ProcessCommand string\n}{\n    ID:             "id",\n    GUID:           "guid",\n    CreatedAt:      "created_at",\n    UpdatedAt:      "updated_at",\n    RevisionGUID:   "revision_guid",\n    ProcessType:    "process_type",\n    ProcessCommand: "process_command",\n}\n')),(0,o.kt)("p",null,"RevisionProcessCommandRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RevisionProcessCommandRels = struct {\n    Revision string\n}{\n    Revision: "Revision",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RevisionProcessCommandTableColumns = struct {\n    ID             string\n    GUID           string\n    CreatedAt      string\n    UpdatedAt      string\n    RevisionGUID   string\n    ProcessType    string\n    ProcessCommand string\n}{\n    ID:             "revision_process_commands.id",\n    GUID:           "revision_process_commands.guid",\n    CreatedAt:      "revision_process_commands.created_at",\n    UpdatedAt:      "revision_process_commands.updated_at",\n    RevisionGUID:   "revision_process_commands.revision_guid",\n    ProcessType:    "revision_process_commands.process_type",\n    ProcessCommand: "revision_process_commands.process_command",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RevisionProcessCommandWhere = struct {\n    ID             whereHelperint\n    GUID           whereHelperstring\n    CreatedAt      whereHelpertime_Time\n    UpdatedAt      whereHelpernull_Time\n    RevisionGUID   whereHelperstring\n    ProcessType    whereHelperstring\n    ProcessCommand whereHelpernull_String\n}{\n    ID:             whereHelperint{field: "\\"revision_process_commands\\".\\"id\\""},\n    GUID:           whereHelperstring{field: "\\"revision_process_commands\\".\\"guid\\""},\n    CreatedAt:      whereHelpertime_Time{field: "\\"revision_process_commands\\".\\"created_at\\""},\n    UpdatedAt:      whereHelpernull_Time{field: "\\"revision_process_commands\\".\\"updated_at\\""},\n    RevisionGUID:   whereHelperstring{field: "\\"revision_process_commands\\".\\"revision_guid\\""},\n    ProcessType:    whereHelperstring{field: "\\"revision_process_commands\\".\\"process_type\\""},\n    ProcessCommand: whereHelpernull_String{field: "\\"revision_process_commands\\".\\"process_command\\""},\n}\n')),(0,o.kt)("p",null,"RevisionRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RevisionRels = struct {\n    App                         string\n    ResourceRevisionAnnotations string\n    ResourceRevisionLabels      string\n    RevisionProcessCommands     string\n    RevisionSidecars            string\n}{\n    App:                         "App",\n    ResourceRevisionAnnotations: "ResourceRevisionAnnotations",\n    ResourceRevisionLabels:      "ResourceRevisionLabels",\n    RevisionProcessCommands:     "RevisionProcessCommands",\n    RevisionSidecars:            "RevisionSidecars",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RevisionSidecarColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    Name         string\n    Command      string\n    RevisionGUID string\n    Memory       string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    Name:         "name",\n    Command:      "command",\n    RevisionGUID: "revision_guid",\n    Memory:       "memory",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RevisionSidecarProcessTypeColumns = struct {\n    ID                  string\n    GUID                string\n    CreatedAt           string\n    UpdatedAt           string\n    Type                string\n    RevisionSidecarGUID string\n}{\n    ID:                  "id",\n    GUID:                "guid",\n    CreatedAt:           "created_at",\n    UpdatedAt:           "updated_at",\n    Type:                "type",\n    RevisionSidecarGUID: "revision_sidecar_guid",\n}\n')),(0,o.kt)("p",null,"RevisionSidecarProcessTypeRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RevisionSidecarProcessTypeRels = struct {\n    RevisionSidecar string\n}{\n    RevisionSidecar: "RevisionSidecar",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RevisionSidecarProcessTypeTableColumns = struct {\n    ID                  string\n    GUID                string\n    CreatedAt           string\n    UpdatedAt           string\n    Type                string\n    RevisionSidecarGUID string\n}{\n    ID:                  "revision_sidecar_process_types.id",\n    GUID:                "revision_sidecar_process_types.guid",\n    CreatedAt:           "revision_sidecar_process_types.created_at",\n    UpdatedAt:           "revision_sidecar_process_types.updated_at",\n    Type:                "revision_sidecar_process_types.type",\n    RevisionSidecarGUID: "revision_sidecar_process_types.revision_sidecar_guid",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RevisionSidecarProcessTypeWhere = struct {\n    ID                  whereHelperint\n    GUID                whereHelperstring\n    CreatedAt           whereHelpertime_Time\n    UpdatedAt           whereHelpernull_Time\n    Type                whereHelperstring\n    RevisionSidecarGUID whereHelperstring\n}{\n    ID:                  whereHelperint{field: "\\"revision_sidecar_process_types\\".\\"id\\""},\n    GUID:                whereHelperstring{field: "\\"revision_sidecar_process_types\\".\\"guid\\""},\n    CreatedAt:           whereHelpertime_Time{field: "\\"revision_sidecar_process_types\\".\\"created_at\\""},\n    UpdatedAt:           whereHelpernull_Time{field: "\\"revision_sidecar_process_types\\".\\"updated_at\\""},\n    Type:                whereHelperstring{field: "\\"revision_sidecar_process_types\\".\\"type\\""},\n    RevisionSidecarGUID: whereHelperstring{field: "\\"revision_sidecar_process_types\\".\\"revision_sidecar_guid\\""},\n}\n')),(0,o.kt)("p",null,"RevisionSidecarRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RevisionSidecarRels = struct {\n    Revision                    string\n    RevisionSidecarProcessTypes string\n}{\n    Revision:                    "Revision",\n    RevisionSidecarProcessTypes: "RevisionSidecarProcessTypes",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RevisionSidecarTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    Name         string\n    Command      string\n    RevisionGUID string\n    Memory       string\n}{\n    ID:           "revision_sidecars.id",\n    GUID:         "revision_sidecars.guid",\n    CreatedAt:    "revision_sidecars.created_at",\n    UpdatedAt:    "revision_sidecars.updated_at",\n    Name:         "revision_sidecars.name",\n    Command:      "revision_sidecars.command",\n    RevisionGUID: "revision_sidecars.revision_guid",\n    Memory:       "revision_sidecars.memory",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RevisionSidecarWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    Name         whereHelperstring\n    Command      whereHelperstring\n    RevisionGUID whereHelperstring\n    Memory       whereHelpernull_Int\n}{\n    ID:           whereHelperint{field: "\\"revision_sidecars\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"revision_sidecars\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"revision_sidecars\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"revision_sidecars\\".\\"updated_at\\""},\n    Name:         whereHelperstring{field: "\\"revision_sidecars\\".\\"name\\""},\n    Command:      whereHelperstring{field: "\\"revision_sidecars\\".\\"command\\""},\n    RevisionGUID: whereHelperstring{field: "\\"revision_sidecars\\".\\"revision_guid\\""},\n    Memory:       whereHelpernull_Int{field: "\\"revision_sidecars\\".\\"memory\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RevisionTableColumns = struct {\n    ID                            string\n    GUID                          string\n    CreatedAt                     string\n    UpdatedAt                     string\n    AppGUID                       string\n    Version                       string\n    DropletGUID                   string\n    EncryptedEnvironmentVariables string\n    Salt                          string\n    EncryptionKeyLabel            string\n    EncryptionIterations          string\n    Description                   string\n}{\n    ID:                            "revisions.id",\n    GUID:                          "revisions.guid",\n    CreatedAt:                     "revisions.created_at",\n    UpdatedAt:                     "revisions.updated_at",\n    AppGUID:                       "revisions.app_guid",\n    Version:                       "revisions.version",\n    DropletGUID:                   "revisions.droplet_guid",\n    EncryptedEnvironmentVariables: "revisions.encrypted_environment_variables",\n    Salt:                          "revisions.salt",\n    EncryptionKeyLabel:            "revisions.encryption_key_label",\n    EncryptionIterations:          "revisions.encryption_iterations",\n    Description:                   "revisions.description",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RevisionWhere = struct {\n    ID                            whereHelperint\n    GUID                          whereHelperstring\n    CreatedAt                     whereHelpertime_Time\n    UpdatedAt                     whereHelpernull_Time\n    AppGUID                       whereHelpernull_String\n    Version                       whereHelpernull_Int\n    DropletGUID                   whereHelpernull_String\n    EncryptedEnvironmentVariables whereHelpernull_String\n    Salt                          whereHelpernull_String\n    EncryptionKeyLabel            whereHelpernull_String\n    EncryptionIterations          whereHelperint\n    Description                   whereHelperstring\n}{\n    ID:                            whereHelperint{field: "\\"revisions\\".\\"id\\""},\n    GUID:                          whereHelperstring{field: "\\"revisions\\".\\"guid\\""},\n    CreatedAt:                     whereHelpertime_Time{field: "\\"revisions\\".\\"created_at\\""},\n    UpdatedAt:                     whereHelpernull_Time{field: "\\"revisions\\".\\"updated_at\\""},\n    AppGUID:                       whereHelpernull_String{field: "\\"revisions\\".\\"app_guid\\""},\n    Version:                       whereHelpernull_Int{field: "\\"revisions\\".\\"version\\""},\n    DropletGUID:                   whereHelpernull_String{field: "\\"revisions\\".\\"droplet_guid\\""},\n    EncryptedEnvironmentVariables: whereHelpernull_String{field: "\\"revisions\\".\\"encrypted_environment_variables\\""},\n    Salt:                          whereHelpernull_String{field: "\\"revisions\\".\\"salt\\""},\n    EncryptionKeyLabel:            whereHelpernull_String{field: "\\"revisions\\".\\"encryption_key_label\\""},\n    EncryptionIterations:          whereHelperint{field: "\\"revisions\\".\\"encryption_iterations\\""},\n    Description:                   whereHelperstring{field: "\\"revisions\\".\\"description\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteAnnotationColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    Key:          "key",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"RouteAnnotationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteAnnotationRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteAnnotationTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "route_annotations.id",\n    GUID:         "route_annotations.guid",\n    CreatedAt:    "route_annotations.created_at",\n    UpdatedAt:    "route_annotations.updated_at",\n    ResourceGUID: "route_annotations.resource_guid",\n    KeyPrefix:    "route_annotations.key_prefix",\n    Key:          "route_annotations.key",\n    Value:        "route_annotations.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteAnnotationWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    Key          whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"route_annotations\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"route_annotations\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"route_annotations\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"route_annotations\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"route_annotations\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"route_annotations\\".\\"key_prefix\\""},\n    Key:          whereHelpernull_String{field: "\\"route_annotations\\".\\"key\\""},\n    Value:        whereHelpernull_String{field: "\\"route_annotations\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteBindingAnnotationColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    Key:          "key",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"RouteBindingAnnotationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteBindingAnnotationRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteBindingAnnotationTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "route_binding_annotations.id",\n    GUID:         "route_binding_annotations.guid",\n    CreatedAt:    "route_binding_annotations.created_at",\n    UpdatedAt:    "route_binding_annotations.updated_at",\n    ResourceGUID: "route_binding_annotations.resource_guid",\n    KeyPrefix:    "route_binding_annotations.key_prefix",\n    Key:          "route_binding_annotations.key",\n    Value:        "route_binding_annotations.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteBindingAnnotationWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    Key          whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"route_binding_annotations\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"route_binding_annotations\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"route_binding_annotations\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"route_binding_annotations\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"route_binding_annotations\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"route_binding_annotations\\".\\"key_prefix\\""},\n    Key:          whereHelpernull_String{field: "\\"route_binding_annotations\\".\\"key\\""},\n    Value:        whereHelpernull_String{field: "\\"route_binding_annotations\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteBindingColumns = struct {\n    ID                string\n    GUID              string\n    CreatedAt         string\n    UpdatedAt         string\n    RouteID           string\n    ServiceInstanceID string\n    RouteServiceURL   string\n}{\n    ID:                "id",\n    GUID:              "guid",\n    CreatedAt:         "created_at",\n    UpdatedAt:         "updated_at",\n    RouteID:           "route_id",\n    ServiceInstanceID: "service_instance_id",\n    RouteServiceURL:   "route_service_url",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteBindingLabelColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    KeyName:      "key_name",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"RouteBindingLabelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteBindingLabelRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteBindingLabelTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "route_binding_labels.id",\n    GUID:         "route_binding_labels.guid",\n    CreatedAt:    "route_binding_labels.created_at",\n    UpdatedAt:    "route_binding_labels.updated_at",\n    ResourceGUID: "route_binding_labels.resource_guid",\n    KeyPrefix:    "route_binding_labels.key_prefix",\n    KeyName:      "route_binding_labels.key_name",\n    Value:        "route_binding_labels.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteBindingLabelWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    KeyName      whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"route_binding_labels\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"route_binding_labels\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"route_binding_labels\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"route_binding_labels\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"route_binding_labels\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"route_binding_labels\\".\\"key_prefix\\""},\n    KeyName:      whereHelpernull_String{field: "\\"route_binding_labels\\".\\"key_name\\""},\n    Value:        whereHelpernull_String{field: "\\"route_binding_labels\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteBindingOperationColumns = struct {\n    ID                      string\n    CreatedAt               string\n    UpdatedAt               string\n    RouteBindingID          string\n    State                   string\n    Type                    string\n    Description             string\n    BrokerProvidedOperation string\n}{\n    ID:                      "id",\n    CreatedAt:               "created_at",\n    UpdatedAt:               "updated_at",\n    RouteBindingID:          "route_binding_id",\n    State:                   "state",\n    Type:                    "type",\n    Description:             "description",\n    BrokerProvidedOperation: "broker_provided_operation",\n}\n')),(0,o.kt)("p",null,"RouteBindingOperationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteBindingOperationRels = struct {\n    RouteBinding string\n}{\n    RouteBinding: "RouteBinding",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteBindingOperationTableColumns = struct {\n    ID                      string\n    CreatedAt               string\n    UpdatedAt               string\n    RouteBindingID          string\n    State                   string\n    Type                    string\n    Description             string\n    BrokerProvidedOperation string\n}{\n    ID:                      "route_binding_operations.id",\n    CreatedAt:               "route_binding_operations.created_at",\n    UpdatedAt:               "route_binding_operations.updated_at",\n    RouteBindingID:          "route_binding_operations.route_binding_id",\n    State:                   "route_binding_operations.state",\n    Type:                    "route_binding_operations.type",\n    Description:             "route_binding_operations.description",\n    BrokerProvidedOperation: "route_binding_operations.broker_provided_operation",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteBindingOperationWhere = struct {\n    ID                      whereHelperint\n    CreatedAt               whereHelpertime_Time\n    UpdatedAt               whereHelpernull_Time\n    RouteBindingID          whereHelpernull_Int\n    State                   whereHelperstring\n    Type                    whereHelperstring\n    Description             whereHelpernull_String\n    BrokerProvidedOperation whereHelpernull_String\n}{\n    ID:                      whereHelperint{field: "\\"route_binding_operations\\".\\"id\\""},\n    CreatedAt:               whereHelpertime_Time{field: "\\"route_binding_operations\\".\\"created_at\\""},\n    UpdatedAt:               whereHelpernull_Time{field: "\\"route_binding_operations\\".\\"updated_at\\""},\n    RouteBindingID:          whereHelpernull_Int{field: "\\"route_binding_operations\\".\\"route_binding_id\\""},\n    State:                   whereHelperstring{field: "\\"route_binding_operations\\".\\"state\\""},\n    Type:                    whereHelperstring{field: "\\"route_binding_operations\\".\\"type\\""},\n    Description:             whereHelpernull_String{field: "\\"route_binding_operations\\".\\"description\\""},\n    BrokerProvidedOperation: whereHelpernull_String{field: "\\"route_binding_operations\\".\\"broker_provided_operation\\""},\n}\n')),(0,o.kt)("p",null,"RouteBindingRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteBindingRels = struct {\n    Route                           string\n    ServiceInstance                 string\n    RouteBindingOperation           string\n    ResourceRouteBindingAnnotations string\n    ResourceRouteBindingLabels      string\n}{\n    Route:                           "Route",\n    ServiceInstance:                 "ServiceInstance",\n    RouteBindingOperation:           "RouteBindingOperation",\n    ResourceRouteBindingAnnotations: "ResourceRouteBindingAnnotations",\n    ResourceRouteBindingLabels:      "ResourceRouteBindingLabels",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteBindingTableColumns = struct {\n    ID                string\n    GUID              string\n    CreatedAt         string\n    UpdatedAt         string\n    RouteID           string\n    ServiceInstanceID string\n    RouteServiceURL   string\n}{\n    ID:                "route_bindings.id",\n    GUID:              "route_bindings.guid",\n    CreatedAt:         "route_bindings.created_at",\n    UpdatedAt:         "route_bindings.updated_at",\n    RouteID:           "route_bindings.route_id",\n    ServiceInstanceID: "route_bindings.service_instance_id",\n    RouteServiceURL:   "route_bindings.route_service_url",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteBindingWhere = struct {\n    ID                whereHelperint\n    GUID              whereHelperstring\n    CreatedAt         whereHelpertime_Time\n    UpdatedAt         whereHelpernull_Time\n    RouteID           whereHelpernull_Int\n    ServiceInstanceID whereHelpernull_Int\n    RouteServiceURL   whereHelpernull_String\n}{\n    ID:                whereHelperint{field: "\\"route_bindings\\".\\"id\\""},\n    GUID:              whereHelperstring{field: "\\"route_bindings\\".\\"guid\\""},\n    CreatedAt:         whereHelpertime_Time{field: "\\"route_bindings\\".\\"created_at\\""},\n    UpdatedAt:         whereHelpernull_Time{field: "\\"route_bindings\\".\\"updated_at\\""},\n    RouteID:           whereHelpernull_Int{field: "\\"route_bindings\\".\\"route_id\\""},\n    ServiceInstanceID: whereHelpernull_Int{field: "\\"route_bindings\\".\\"service_instance_id\\""},\n    RouteServiceURL:   whereHelpernull_String{field: "\\"route_bindings\\".\\"route_service_url\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteColumns = struct {\n    ID        string\n    GUID      string\n    CreatedAt string\n    UpdatedAt string\n    Host      string\n    DomainID  string\n    SpaceID   string\n    Path      string\n    Port      string\n    VipOffset string\n}{\n    ID:        "id",\n    GUID:      "guid",\n    CreatedAt: "created_at",\n    UpdatedAt: "updated_at",\n    Host:      "host",\n    DomainID:  "domain_id",\n    SpaceID:   "space_id",\n    Path:      "path",\n    Port:      "port",\n    VipOffset: "vip_offset",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteLabelColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    KeyName:      "key_name",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"RouteLabelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteLabelRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteLabelTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "route_labels.id",\n    GUID:         "route_labels.guid",\n    CreatedAt:    "route_labels.created_at",\n    UpdatedAt:    "route_labels.updated_at",\n    ResourceGUID: "route_labels.resource_guid",\n    KeyPrefix:    "route_labels.key_prefix",\n    KeyName:      "route_labels.key_name",\n    Value:        "route_labels.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteLabelWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    KeyName      whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"route_labels\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"route_labels\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"route_labels\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"route_labels\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"route_labels\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"route_labels\\".\\"key_prefix\\""},\n    KeyName:      whereHelpernull_String{field: "\\"route_labels\\".\\"key_name\\""},\n    Value:        whereHelpernull_String{field: "\\"route_labels\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteMappingColumns = struct {\n    ID          string\n    CreatedAt   string\n    UpdatedAt   string\n    AppPort     string\n    GUID        string\n    AppGUID     string\n    RouteGUID   string\n    ProcessType string\n    Weight      string\n}{\n    ID:          "id",\n    CreatedAt:   "created_at",\n    UpdatedAt:   "updated_at",\n    AppPort:     "app_port",\n    GUID:        "guid",\n    AppGUID:     "app_guid",\n    RouteGUID:   "route_guid",\n    ProcessType: "process_type",\n    Weight:      "weight",\n}\n')),(0,o.kt)("p",null,"RouteMappingRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteMappingRels = struct {\n    App   string\n    Route string\n}{\n    App:   "App",\n    Route: "Route",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteMappingTableColumns = struct {\n    ID          string\n    CreatedAt   string\n    UpdatedAt   string\n    AppPort     string\n    GUID        string\n    AppGUID     string\n    RouteGUID   string\n    ProcessType string\n    Weight      string\n}{\n    ID:          "route_mappings.id",\n    CreatedAt:   "route_mappings.created_at",\n    UpdatedAt:   "route_mappings.updated_at",\n    AppPort:     "route_mappings.app_port",\n    GUID:        "route_mappings.guid",\n    AppGUID:     "route_mappings.app_guid",\n    RouteGUID:   "route_mappings.route_guid",\n    ProcessType: "route_mappings.process_type",\n    Weight:      "route_mappings.weight",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteMappingWhere = struct {\n    ID          whereHelperint\n    CreatedAt   whereHelpertime_Time\n    UpdatedAt   whereHelpernull_Time\n    AppPort     whereHelpernull_Int\n    GUID        whereHelperstring\n    AppGUID     whereHelperstring\n    RouteGUID   whereHelperstring\n    ProcessType whereHelpernull_String\n    Weight      whereHelpernull_Int\n}{\n    ID:          whereHelperint{field: "\\"route_mappings\\".\\"id\\""},\n    CreatedAt:   whereHelpertime_Time{field: "\\"route_mappings\\".\\"created_at\\""},\n    UpdatedAt:   whereHelpernull_Time{field: "\\"route_mappings\\".\\"updated_at\\""},\n    AppPort:     whereHelpernull_Int{field: "\\"route_mappings\\".\\"app_port\\""},\n    GUID:        whereHelperstring{field: "\\"route_mappings\\".\\"guid\\""},\n    AppGUID:     whereHelperstring{field: "\\"route_mappings\\".\\"app_guid\\""},\n    RouteGUID:   whereHelperstring{field: "\\"route_mappings\\".\\"route_guid\\""},\n    ProcessType: whereHelpernull_String{field: "\\"route_mappings\\".\\"process_type\\""},\n    Weight:      whereHelpernull_Int{field: "\\"route_mappings\\".\\"weight\\""},\n}\n')),(0,o.kt)("p",null,"RouteRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteRels = struct {\n    Domain                   string\n    Space                    string\n    ResourceRouteAnnotations string\n    RouteBindings            string\n    ResourceRouteLabels      string\n    RouteMappings            string\n}{\n    Domain:                   "Domain",\n    Space:                    "Space",\n    ResourceRouteAnnotations: "ResourceRouteAnnotations",\n    RouteBindings:            "RouteBindings",\n    ResourceRouteLabels:      "ResourceRouteLabels",\n    RouteMappings:            "RouteMappings",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteTableColumns = struct {\n    ID        string\n    GUID      string\n    CreatedAt string\n    UpdatedAt string\n    Host      string\n    DomainID  string\n    SpaceID   string\n    Path      string\n    Port      string\n    VipOffset string\n}{\n    ID:        "routes.id",\n    GUID:      "routes.guid",\n    CreatedAt: "routes.created_at",\n    UpdatedAt: "routes.updated_at",\n    Host:      "routes.host",\n    DomainID:  "routes.domain_id",\n    SpaceID:   "routes.space_id",\n    Path:      "routes.path",\n    Port:      "routes.port",\n    VipOffset: "routes.vip_offset",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var RouteWhere = struct {\n    ID        whereHelperint\n    GUID      whereHelperstring\n    CreatedAt whereHelpertime_Time\n    UpdatedAt whereHelpernull_Time\n    Host      whereHelperstring\n    DomainID  whereHelperint\n    SpaceID   whereHelperint\n    Path      whereHelperstring\n    Port      whereHelperint\n    VipOffset whereHelpernull_Int\n}{\n    ID:        whereHelperint{field: "\\"routes\\".\\"id\\""},\n    GUID:      whereHelperstring{field: "\\"routes\\".\\"guid\\""},\n    CreatedAt: whereHelpertime_Time{field: "\\"routes\\".\\"created_at\\""},\n    UpdatedAt: whereHelpernull_Time{field: "\\"routes\\".\\"updated_at\\""},\n    Host:      whereHelperstring{field: "\\"routes\\".\\"host\\""},\n    DomainID:  whereHelperint{field: "\\"routes\\".\\"domain_id\\""},\n    SpaceID:   whereHelperint{field: "\\"routes\\".\\"space_id\\""},\n    Path:      whereHelperstring{field: "\\"routes\\".\\"path\\""},\n    Port:      whereHelperint{field: "\\"routes\\".\\"port\\""},\n    VipOffset: whereHelpernull_Int{field: "\\"routes\\".\\"vip_offset\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SchemaMigrationColumns = struct {\n    Filename string\n}{\n    Filename: "filename",\n}\n')),(0,o.kt)("p",null,"SchemaMigrationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var SchemaMigrationRels = struct {\n}{}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SchemaMigrationTableColumns = struct {\n    Filename string\n}{\n    Filename: "schema_migrations.filename",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SchemaMigrationWhere = struct {\n    Filename whereHelperstring\n}{\n    Filename: whereHelperstring{field: "\\"schema_migrations\\".\\"filename\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SecurityGroupColumns = struct {\n    ID             string\n    GUID           string\n    CreatedAt      string\n    UpdatedAt      string\n    Name           string\n    Rules          string\n    StagingDefault string\n    RunningDefault string\n}{\n    ID:             "id",\n    GUID:           "guid",\n    CreatedAt:      "created_at",\n    UpdatedAt:      "updated_at",\n    Name:           "name",\n    Rules:          "rules",\n    StagingDefault: "staging_default",\n    RunningDefault: "running_default",\n}\n')),(0,o.kt)("p",null,"SecurityGroupRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SecurityGroupRels = struct {\n    SecurityGroupsSpaces                            string\n    StagingSecurityGroupStagingSecurityGroupsSpaces string\n}{\n    SecurityGroupsSpaces:                            "SecurityGroupsSpaces",\n    StagingSecurityGroupStagingSecurityGroupsSpaces: "StagingSecurityGroupStagingSecurityGroupsSpaces",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SecurityGroupTableColumns = struct {\n    ID             string\n    GUID           string\n    CreatedAt      string\n    UpdatedAt      string\n    Name           string\n    Rules          string\n    StagingDefault string\n    RunningDefault string\n}{\n    ID:             "security_groups.id",\n    GUID:           "security_groups.guid",\n    CreatedAt:      "security_groups.created_at",\n    UpdatedAt:      "security_groups.updated_at",\n    Name:           "security_groups.name",\n    Rules:          "security_groups.rules",\n    StagingDefault: "security_groups.staging_default",\n    RunningDefault: "security_groups.running_default",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SecurityGroupWhere = struct {\n    ID             whereHelperint\n    GUID           whereHelperstring\n    CreatedAt      whereHelpertime_Time\n    UpdatedAt      whereHelpernull_Time\n    Name           whereHelperstring\n    Rules          whereHelpernull_String\n    StagingDefault whereHelpernull_Bool\n    RunningDefault whereHelpernull_Bool\n}{\n    ID:             whereHelperint{field: "\\"security_groups\\".\\"id\\""},\n    GUID:           whereHelperstring{field: "\\"security_groups\\".\\"guid\\""},\n    CreatedAt:      whereHelpertime_Time{field: "\\"security_groups\\".\\"created_at\\""},\n    UpdatedAt:      whereHelpernull_Time{field: "\\"security_groups\\".\\"updated_at\\""},\n    Name:           whereHelperstring{field: "\\"security_groups\\".\\"name\\""},\n    Rules:          whereHelpernull_String{field: "\\"security_groups\\".\\"rules\\""},\n    StagingDefault: whereHelpernull_Bool{field: "\\"security_groups\\".\\"staging_default\\""},\n    RunningDefault: whereHelpernull_Bool{field: "\\"security_groups\\".\\"running_default\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SecurityGroupsSpaceColumns = struct {\n    SecurityGroupID        string\n    SpaceID                string\n    SecurityGroupsSpacesPK string\n}{\n    SecurityGroupID:        "security_group_id",\n    SpaceID:                "space_id",\n    SecurityGroupsSpacesPK: "security_groups_spaces_pk",\n}\n')),(0,o.kt)("p",null,"SecurityGroupsSpaceRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SecurityGroupsSpaceRels = struct {\n    SecurityGroup string\n    Space         string\n}{\n    SecurityGroup: "SecurityGroup",\n    Space:         "Space",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SecurityGroupsSpaceTableColumns = struct {\n    SecurityGroupID        string\n    SpaceID                string\n    SecurityGroupsSpacesPK string\n}{\n    SecurityGroupID:        "security_groups_spaces.security_group_id",\n    SpaceID:                "security_groups_spaces.space_id",\n    SecurityGroupsSpacesPK: "security_groups_spaces.security_groups_spaces_pk",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SecurityGroupsSpaceWhere = struct {\n    SecurityGroupID        whereHelperint\n    SpaceID                whereHelperint\n    SecurityGroupsSpacesPK whereHelperint\n}{\n    SecurityGroupID:        whereHelperint{field: "\\"security_groups_spaces\\".\\"security_group_id\\""},\n    SpaceID:                whereHelperint{field: "\\"security_groups_spaces\\".\\"space_id\\""},\n    SecurityGroupsSpacesPK: whereHelperint{field: "\\"security_groups_spaces\\".\\"security_groups_spaces_pk\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBindingAnnotationColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    Key:          "key",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"ServiceBindingAnnotationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBindingAnnotationRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBindingAnnotationTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "service_binding_annotations.id",\n    GUID:         "service_binding_annotations.guid",\n    CreatedAt:    "service_binding_annotations.created_at",\n    UpdatedAt:    "service_binding_annotations.updated_at",\n    ResourceGUID: "service_binding_annotations.resource_guid",\n    KeyPrefix:    "service_binding_annotations.key_prefix",\n    Key:          "service_binding_annotations.key",\n    Value:        "service_binding_annotations.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBindingAnnotationWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    Key          whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"service_binding_annotations\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"service_binding_annotations\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"service_binding_annotations\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"service_binding_annotations\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"service_binding_annotations\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"service_binding_annotations\\".\\"key_prefix\\""},\n    Key:          whereHelpernull_String{field: "\\"service_binding_annotations\\".\\"key\\""},\n    Value:        whereHelpernull_String{field: "\\"service_binding_annotations\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBindingColumns = struct {\n    ID                   string\n    GUID                 string\n    CreatedAt            string\n    UpdatedAt            string\n    Credentials          string\n    Salt                 string\n    SyslogDrainURL       string\n    VolumeMounts         string\n    VolumeMountsSalt     string\n    AppGUID              string\n    ServiceInstanceGUID  string\n    Type                 string\n    Name                 string\n    EncryptionKeyLabel   string\n    EncryptionIterations string\n}{\n    ID:                   "id",\n    GUID:                 "guid",\n    CreatedAt:            "created_at",\n    UpdatedAt:            "updated_at",\n    Credentials:          "credentials",\n    Salt:                 "salt",\n    SyslogDrainURL:       "syslog_drain_url",\n    VolumeMounts:         "volume_mounts",\n    VolumeMountsSalt:     "volume_mounts_salt",\n    AppGUID:              "app_guid",\n    ServiceInstanceGUID:  "service_instance_guid",\n    Type:                 "type",\n    Name:                 "name",\n    EncryptionKeyLabel:   "encryption_key_label",\n    EncryptionIterations: "encryption_iterations",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBindingLabelColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    KeyName:      "key_name",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"ServiceBindingLabelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBindingLabelRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBindingLabelTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "service_binding_labels.id",\n    GUID:         "service_binding_labels.guid",\n    CreatedAt:    "service_binding_labels.created_at",\n    UpdatedAt:    "service_binding_labels.updated_at",\n    ResourceGUID: "service_binding_labels.resource_guid",\n    KeyPrefix:    "service_binding_labels.key_prefix",\n    KeyName:      "service_binding_labels.key_name",\n    Value:        "service_binding_labels.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBindingLabelWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    KeyName      whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"service_binding_labels\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"service_binding_labels\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"service_binding_labels\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"service_binding_labels\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"service_binding_labels\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"service_binding_labels\\".\\"key_prefix\\""},\n    KeyName:      whereHelpernull_String{field: "\\"service_binding_labels\\".\\"key_name\\""},\n    Value:        whereHelpernull_String{field: "\\"service_binding_labels\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBindingOperationColumns = struct {\n    ID                      string\n    CreatedAt               string\n    UpdatedAt               string\n    ServiceBindingID        string\n    State                   string\n    Type                    string\n    Description             string\n    BrokerProvidedOperation string\n}{\n    ID:                      "id",\n    CreatedAt:               "created_at",\n    UpdatedAt:               "updated_at",\n    ServiceBindingID:        "service_binding_id",\n    State:                   "state",\n    Type:                    "type",\n    Description:             "description",\n    BrokerProvidedOperation: "broker_provided_operation",\n}\n')),(0,o.kt)("p",null,"ServiceBindingOperationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBindingOperationRels = struct {\n    ServiceBinding string\n}{\n    ServiceBinding: "ServiceBinding",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBindingOperationTableColumns = struct {\n    ID                      string\n    CreatedAt               string\n    UpdatedAt               string\n    ServiceBindingID        string\n    State                   string\n    Type                    string\n    Description             string\n    BrokerProvidedOperation string\n}{\n    ID:                      "service_binding_operations.id",\n    CreatedAt:               "service_binding_operations.created_at",\n    UpdatedAt:               "service_binding_operations.updated_at",\n    ServiceBindingID:        "service_binding_operations.service_binding_id",\n    State:                   "service_binding_operations.state",\n    Type:                    "service_binding_operations.type",\n    Description:             "service_binding_operations.description",\n    BrokerProvidedOperation: "service_binding_operations.broker_provided_operation",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBindingOperationWhere = struct {\n    ID                      whereHelperint\n    CreatedAt               whereHelpertime_Time\n    UpdatedAt               whereHelpernull_Time\n    ServiceBindingID        whereHelpernull_Int\n    State                   whereHelperstring\n    Type                    whereHelperstring\n    Description             whereHelpernull_String\n    BrokerProvidedOperation whereHelpernull_String\n}{\n    ID:                      whereHelperint{field: "\\"service_binding_operations\\".\\"id\\""},\n    CreatedAt:               whereHelpertime_Time{field: "\\"service_binding_operations\\".\\"created_at\\""},\n    UpdatedAt:               whereHelpernull_Time{field: "\\"service_binding_operations\\".\\"updated_at\\""},\n    ServiceBindingID:        whereHelpernull_Int{field: "\\"service_binding_operations\\".\\"service_binding_id\\""},\n    State:                   whereHelperstring{field: "\\"service_binding_operations\\".\\"state\\""},\n    Type:                    whereHelperstring{field: "\\"service_binding_operations\\".\\"type\\""},\n    Description:             whereHelpernull_String{field: "\\"service_binding_operations\\".\\"description\\""},\n    BrokerProvidedOperation: whereHelpernull_String{field: "\\"service_binding_operations\\".\\"broker_provided_operation\\""},\n}\n')),(0,o.kt)("p",null,"ServiceBindingRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBindingRels = struct {\n    App                               string\n    ServiceInstance                   string\n    ServiceBindingOperation           string\n    ResourceServiceBindingAnnotations string\n    ResourceServiceBindingLabels      string\n}{\n    App:                               "App",\n    ServiceInstance:                   "ServiceInstance",\n    ServiceBindingOperation:           "ServiceBindingOperation",\n    ResourceServiceBindingAnnotations: "ResourceServiceBindingAnnotations",\n    ResourceServiceBindingLabels:      "ResourceServiceBindingLabels",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBindingTableColumns = struct {\n    ID                   string\n    GUID                 string\n    CreatedAt            string\n    UpdatedAt            string\n    Credentials          string\n    Salt                 string\n    SyslogDrainURL       string\n    VolumeMounts         string\n    VolumeMountsSalt     string\n    AppGUID              string\n    ServiceInstanceGUID  string\n    Type                 string\n    Name                 string\n    EncryptionKeyLabel   string\n    EncryptionIterations string\n}{\n    ID:                   "service_bindings.id",\n    GUID:                 "service_bindings.guid",\n    CreatedAt:            "service_bindings.created_at",\n    UpdatedAt:            "service_bindings.updated_at",\n    Credentials:          "service_bindings.credentials",\n    Salt:                 "service_bindings.salt",\n    SyslogDrainURL:       "service_bindings.syslog_drain_url",\n    VolumeMounts:         "service_bindings.volume_mounts",\n    VolumeMountsSalt:     "service_bindings.volume_mounts_salt",\n    AppGUID:              "service_bindings.app_guid",\n    ServiceInstanceGUID:  "service_bindings.service_instance_guid",\n    Type:                 "service_bindings.type",\n    Name:                 "service_bindings.name",\n    EncryptionKeyLabel:   "service_bindings.encryption_key_label",\n    EncryptionIterations: "service_bindings.encryption_iterations",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBindingWhere = struct {\n    ID                   whereHelperint\n    GUID                 whereHelperstring\n    CreatedAt            whereHelpertime_Time\n    UpdatedAt            whereHelpernull_Time\n    Credentials          whereHelperstring\n    Salt                 whereHelpernull_String\n    SyslogDrainURL       whereHelpernull_String\n    VolumeMounts         whereHelpernull_String\n    VolumeMountsSalt     whereHelpernull_String\n    AppGUID              whereHelperstring\n    ServiceInstanceGUID  whereHelperstring\n    Type                 whereHelpernull_String\n    Name                 whereHelpernull_String\n    EncryptionKeyLabel   whereHelpernull_String\n    EncryptionIterations whereHelperint\n}{\n    ID:                   whereHelperint{field: "\\"service_bindings\\".\\"id\\""},\n    GUID:                 whereHelperstring{field: "\\"service_bindings\\".\\"guid\\""},\n    CreatedAt:            whereHelpertime_Time{field: "\\"service_bindings\\".\\"created_at\\""},\n    UpdatedAt:            whereHelpernull_Time{field: "\\"service_bindings\\".\\"updated_at\\""},\n    Credentials:          whereHelperstring{field: "\\"service_bindings\\".\\"credentials\\""},\n    Salt:                 whereHelpernull_String{field: "\\"service_bindings\\".\\"salt\\""},\n    SyslogDrainURL:       whereHelpernull_String{field: "\\"service_bindings\\".\\"syslog_drain_url\\""},\n    VolumeMounts:         whereHelpernull_String{field: "\\"service_bindings\\".\\"volume_mounts\\""},\n    VolumeMountsSalt:     whereHelpernull_String{field: "\\"service_bindings\\".\\"volume_mounts_salt\\""},\n    AppGUID:              whereHelperstring{field: "\\"service_bindings\\".\\"app_guid\\""},\n    ServiceInstanceGUID:  whereHelperstring{field: "\\"service_bindings\\".\\"service_instance_guid\\""},\n    Type:                 whereHelpernull_String{field: "\\"service_bindings\\".\\"type\\""},\n    Name:                 whereHelpernull_String{field: "\\"service_bindings\\".\\"name\\""},\n    EncryptionKeyLabel:   whereHelpernull_String{field: "\\"service_bindings\\".\\"encryption_key_label\\""},\n    EncryptionIterations: whereHelperint{field: "\\"service_bindings\\".\\"encryption_iterations\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBrokerAnnotationColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    Key:          "key",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"ServiceBrokerAnnotationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBrokerAnnotationRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBrokerAnnotationTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "service_broker_annotations.id",\n    GUID:         "service_broker_annotations.guid",\n    CreatedAt:    "service_broker_annotations.created_at",\n    UpdatedAt:    "service_broker_annotations.updated_at",\n    ResourceGUID: "service_broker_annotations.resource_guid",\n    KeyPrefix:    "service_broker_annotations.key_prefix",\n    Key:          "service_broker_annotations.key",\n    Value:        "service_broker_annotations.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBrokerAnnotationWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    Key          whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"service_broker_annotations\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"service_broker_annotations\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"service_broker_annotations\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"service_broker_annotations\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"service_broker_annotations\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"service_broker_annotations\\".\\"key_prefix\\""},\n    Key:          whereHelpernull_String{field: "\\"service_broker_annotations\\".\\"key\\""},\n    Value:        whereHelpernull_String{field: "\\"service_broker_annotations\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBrokerColumns = struct {\n    ID                   string\n    GUID                 string\n    CreatedAt            string\n    UpdatedAt            string\n    Name                 string\n    BrokerURL            string\n    AuthPassword         string\n    Salt                 string\n    AuthUsername         string\n    SpaceID              string\n    EncryptionKeyLabel   string\n    EncryptionIterations string\n    State                string\n}{\n    ID:                   "id",\n    GUID:                 "guid",\n    CreatedAt:            "created_at",\n    UpdatedAt:            "updated_at",\n    Name:                 "name",\n    BrokerURL:            "broker_url",\n    AuthPassword:         "auth_password",\n    Salt:                 "salt",\n    AuthUsername:         "auth_username",\n    SpaceID:              "space_id",\n    EncryptionKeyLabel:   "encryption_key_label",\n    EncryptionIterations: "encryption_iterations",\n    State:                "state",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBrokerLabelColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    KeyName:      "key_name",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"ServiceBrokerLabelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBrokerLabelRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBrokerLabelTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "service_broker_labels.id",\n    GUID:         "service_broker_labels.guid",\n    CreatedAt:    "service_broker_labels.created_at",\n    UpdatedAt:    "service_broker_labels.updated_at",\n    ResourceGUID: "service_broker_labels.resource_guid",\n    KeyPrefix:    "service_broker_labels.key_prefix",\n    KeyName:      "service_broker_labels.key_name",\n    Value:        "service_broker_labels.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBrokerLabelWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    KeyName      whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"service_broker_labels\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"service_broker_labels\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"service_broker_labels\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"service_broker_labels\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"service_broker_labels\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"service_broker_labels\\".\\"key_prefix\\""},\n    KeyName:      whereHelpernull_String{field: "\\"service_broker_labels\\".\\"key_name\\""},\n    Value:        whereHelpernull_String{field: "\\"service_broker_labels\\".\\"value\\""},\n}\n')),(0,o.kt)("p",null,"ServiceBrokerRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBrokerRels = struct {\n    Space                                      string\n    ResourceServiceBrokerAnnotations           string\n    ResourceServiceBrokerLabels                string\n    FKServiceBrokerServiceBrokerUpdateRequests string\n    Services                                   string\n}{\n    Space:                            "Space",\n    ResourceServiceBrokerAnnotations: "ResourceServiceBrokerAnnotations",\n    ResourceServiceBrokerLabels:      "ResourceServiceBrokerLabels",\n    FKServiceBrokerServiceBrokerUpdateRequests: "FKServiceBrokerServiceBrokerUpdateRequests",\n    Services: "Services",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBrokerTableColumns = struct {\n    ID                   string\n    GUID                 string\n    CreatedAt            string\n    UpdatedAt            string\n    Name                 string\n    BrokerURL            string\n    AuthPassword         string\n    Salt                 string\n    AuthUsername         string\n    SpaceID              string\n    EncryptionKeyLabel   string\n    EncryptionIterations string\n    State                string\n}{\n    ID:                   "service_brokers.id",\n    GUID:                 "service_brokers.guid",\n    CreatedAt:            "service_brokers.created_at",\n    UpdatedAt:            "service_brokers.updated_at",\n    Name:                 "service_brokers.name",\n    BrokerURL:            "service_brokers.broker_url",\n    AuthPassword:         "service_brokers.auth_password",\n    Salt:                 "service_brokers.salt",\n    AuthUsername:         "service_brokers.auth_username",\n    SpaceID:              "service_brokers.space_id",\n    EncryptionKeyLabel:   "service_brokers.encryption_key_label",\n    EncryptionIterations: "service_brokers.encryption_iterations",\n    State:                "service_brokers.state",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBrokerUpdateRequestAnnotationColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    Key:          "key",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"ServiceBrokerUpdateRequestAnnotationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBrokerUpdateRequestAnnotationRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBrokerUpdateRequestAnnotationTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "service_broker_update_request_annotations.id",\n    GUID:         "service_broker_update_request_annotations.guid",\n    CreatedAt:    "service_broker_update_request_annotations.created_at",\n    UpdatedAt:    "service_broker_update_request_annotations.updated_at",\n    ResourceGUID: "service_broker_update_request_annotations.resource_guid",\n    KeyPrefix:    "service_broker_update_request_annotations.key_prefix",\n    Key:          "service_broker_update_request_annotations.key",\n    Value:        "service_broker_update_request_annotations.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBrokerUpdateRequestAnnotationWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    Key          whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"service_broker_update_request_annotations\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"service_broker_update_request_annotations\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"service_broker_update_request_annotations\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"service_broker_update_request_annotations\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"service_broker_update_request_annotations\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"service_broker_update_request_annotations\\".\\"key_prefix\\""},\n    Key:          whereHelpernull_String{field: "\\"service_broker_update_request_annotations\\".\\"key\\""},\n    Value:        whereHelpernull_String{field: "\\"service_broker_update_request_annotations\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBrokerUpdateRequestColumns = struct {\n    ID                   string\n    GUID                 string\n    CreatedAt            string\n    UpdatedAt            string\n    Name                 string\n    BrokerURL            string\n    Authentication       string\n    Salt                 string\n    EncryptionKeyLabel   string\n    EncryptionIterations string\n    ServiceBrokerID      string\n    FKServiceBrokersID   string\n}{\n    ID:                   "id",\n    GUID:                 "guid",\n    CreatedAt:            "created_at",\n    UpdatedAt:            "updated_at",\n    Name:                 "name",\n    BrokerURL:            "broker_url",\n    Authentication:       "authentication",\n    Salt:                 "salt",\n    EncryptionKeyLabel:   "encryption_key_label",\n    EncryptionIterations: "encryption_iterations",\n    ServiceBrokerID:      "service_broker_id",\n    FKServiceBrokersID:   "fk_service_brokers_id",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBrokerUpdateRequestLabelColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    KeyName:      "key_name",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"ServiceBrokerUpdateRequestLabelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBrokerUpdateRequestLabelRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBrokerUpdateRequestLabelTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "service_broker_update_request_labels.id",\n    GUID:         "service_broker_update_request_labels.guid",\n    CreatedAt:    "service_broker_update_request_labels.created_at",\n    UpdatedAt:    "service_broker_update_request_labels.updated_at",\n    ResourceGUID: "service_broker_update_request_labels.resource_guid",\n    KeyPrefix:    "service_broker_update_request_labels.key_prefix",\n    KeyName:      "service_broker_update_request_labels.key_name",\n    Value:        "service_broker_update_request_labels.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBrokerUpdateRequestLabelWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    KeyName      whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"service_broker_update_request_labels\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"service_broker_update_request_labels\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"service_broker_update_request_labels\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"service_broker_update_request_labels\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"service_broker_update_request_labels\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"service_broker_update_request_labels\\".\\"key_prefix\\""},\n    KeyName:      whereHelpernull_String{field: "\\"service_broker_update_request_labels\\".\\"key_name\\""},\n    Value:        whereHelpernull_String{field: "\\"service_broker_update_request_labels\\".\\"value\\""},\n}\n')),(0,o.kt)("p",null,"ServiceBrokerUpdateRequestRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBrokerUpdateRequestRels = struct {\n    FKServiceBroker                               string\n    ResourceServiceBrokerUpdateRequestAnnotations string\n    ResourceServiceBrokerUpdateRequestLabels      string\n}{\n    FKServiceBroker: "FKServiceBroker",\n    ResourceServiceBrokerUpdateRequestAnnotations: "ResourceServiceBrokerUpdateRequestAnnotations",\n    ResourceServiceBrokerUpdateRequestLabels:      "ResourceServiceBrokerUpdateRequestLabels",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBrokerUpdateRequestTableColumns = struct {\n    ID                   string\n    GUID                 string\n    CreatedAt            string\n    UpdatedAt            string\n    Name                 string\n    BrokerURL            string\n    Authentication       string\n    Salt                 string\n    EncryptionKeyLabel   string\n    EncryptionIterations string\n    ServiceBrokerID      string\n    FKServiceBrokersID   string\n}{\n    ID:                   "service_broker_update_requests.id",\n    GUID:                 "service_broker_update_requests.guid",\n    CreatedAt:            "service_broker_update_requests.created_at",\n    UpdatedAt:            "service_broker_update_requests.updated_at",\n    Name:                 "service_broker_update_requests.name",\n    BrokerURL:            "service_broker_update_requests.broker_url",\n    Authentication:       "service_broker_update_requests.authentication",\n    Salt:                 "service_broker_update_requests.salt",\n    EncryptionKeyLabel:   "service_broker_update_requests.encryption_key_label",\n    EncryptionIterations: "service_broker_update_requests.encryption_iterations",\n    ServiceBrokerID:      "service_broker_update_requests.service_broker_id",\n    FKServiceBrokersID:   "service_broker_update_requests.fk_service_brokers_id",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBrokerUpdateRequestWhere = struct {\n    ID                   whereHelperint\n    GUID                 whereHelperstring\n    CreatedAt            whereHelpertime_Time\n    UpdatedAt            whereHelpernull_Time\n    Name                 whereHelpernull_String\n    BrokerURL            whereHelpernull_String\n    Authentication       whereHelpernull_String\n    Salt                 whereHelpernull_String\n    EncryptionKeyLabel   whereHelpernull_String\n    EncryptionIterations whereHelperint\n    ServiceBrokerID      whereHelperint\n    FKServiceBrokersID   whereHelpernull_Int\n}{\n    ID:                   whereHelperint{field: "\\"service_broker_update_requests\\".\\"id\\""},\n    GUID:                 whereHelperstring{field: "\\"service_broker_update_requests\\".\\"guid\\""},\n    CreatedAt:            whereHelpertime_Time{field: "\\"service_broker_update_requests\\".\\"created_at\\""},\n    UpdatedAt:            whereHelpernull_Time{field: "\\"service_broker_update_requests\\".\\"updated_at\\""},\n    Name:                 whereHelpernull_String{field: "\\"service_broker_update_requests\\".\\"name\\""},\n    BrokerURL:            whereHelpernull_String{field: "\\"service_broker_update_requests\\".\\"broker_url\\""},\n    Authentication:       whereHelpernull_String{field: "\\"service_broker_update_requests\\".\\"authentication\\""},\n    Salt:                 whereHelpernull_String{field: "\\"service_broker_update_requests\\".\\"salt\\""},\n    EncryptionKeyLabel:   whereHelpernull_String{field: "\\"service_broker_update_requests\\".\\"encryption_key_label\\""},\n    EncryptionIterations: whereHelperint{field: "\\"service_broker_update_requests\\".\\"encryption_iterations\\""},\n    ServiceBrokerID:      whereHelperint{field: "\\"service_broker_update_requests\\".\\"service_broker_id\\""},\n    FKServiceBrokersID:   whereHelpernull_Int{field: "\\"service_broker_update_requests\\".\\"fk_service_brokers_id\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceBrokerWhere = struct {\n    ID                   whereHelperint\n    GUID                 whereHelperstring\n    CreatedAt            whereHelpertime_Time\n    UpdatedAt            whereHelpernull_Time\n    Name                 whereHelperstring\n    BrokerURL            whereHelperstring\n    AuthPassword         whereHelperstring\n    Salt                 whereHelpernull_String\n    AuthUsername         whereHelpernull_String\n    SpaceID              whereHelpernull_Int\n    EncryptionKeyLabel   whereHelpernull_String\n    EncryptionIterations whereHelperint\n    State                whereHelperstring\n}{\n    ID:                   whereHelperint{field: "\\"service_brokers\\".\\"id\\""},\n    GUID:                 whereHelperstring{field: "\\"service_brokers\\".\\"guid\\""},\n    CreatedAt:            whereHelpertime_Time{field: "\\"service_brokers\\".\\"created_at\\""},\n    UpdatedAt:            whereHelpernull_Time{field: "\\"service_brokers\\".\\"updated_at\\""},\n    Name:                 whereHelperstring{field: "\\"service_brokers\\".\\"name\\""},\n    BrokerURL:            whereHelperstring{field: "\\"service_brokers\\".\\"broker_url\\""},\n    AuthPassword:         whereHelperstring{field: "\\"service_brokers\\".\\"auth_password\\""},\n    Salt:                 whereHelpernull_String{field: "\\"service_brokers\\".\\"salt\\""},\n    AuthUsername:         whereHelpernull_String{field: "\\"service_brokers\\".\\"auth_username\\""},\n    SpaceID:              whereHelpernull_Int{field: "\\"service_brokers\\".\\"space_id\\""},\n    EncryptionKeyLabel:   whereHelpernull_String{field: "\\"service_brokers\\".\\"encryption_key_label\\""},\n    EncryptionIterations: whereHelperint{field: "\\"service_brokers\\".\\"encryption_iterations\\""},\n    State:                whereHelperstring{field: "\\"service_brokers\\".\\"state\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceColumns = struct {\n    ID                   string\n    GUID                 string\n    CreatedAt            string\n    UpdatedAt            string\n    Label                string\n    Description          string\n    InfoURL              string\n    Acls                 string\n    Timeout              string\n    Active               string\n    Extra                string\n    UniqueID             string\n    Bindable             string\n    Tags                 string\n    DocumentationURL     string\n    ServiceBrokerID      string\n    LongDescription      string\n    Requires             string\n    Purging              string\n    PlanUpdateable       string\n    BindingsRetrievable  string\n    InstancesRetrievable string\n    AllowContextUpdates  string\n}{\n    ID:                   "id",\n    GUID:                 "guid",\n    CreatedAt:            "created_at",\n    UpdatedAt:            "updated_at",\n    Label:                "label",\n    Description:          "description",\n    InfoURL:              "info_url",\n    Acls:                 "acls",\n    Timeout:              "timeout",\n    Active:               "active",\n    Extra:                "extra",\n    UniqueID:             "unique_id",\n    Bindable:             "bindable",\n    Tags:                 "tags",\n    DocumentationURL:     "documentation_url",\n    ServiceBrokerID:      "service_broker_id",\n    LongDescription:      "long_description",\n    Requires:             "requires",\n    Purging:              "purging",\n    PlanUpdateable:       "plan_updateable",\n    BindingsRetrievable:  "bindings_retrievable",\n    InstancesRetrievable: "instances_retrievable",\n    AllowContextUpdates:  "allow_context_updates",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceDashboardClientColumns = struct {\n    ID              string\n    CreatedAt       string\n    UpdatedAt       string\n    UaaID           string\n    ServiceBrokerID string\n}{\n    ID:              "id",\n    CreatedAt:       "created_at",\n    UpdatedAt:       "updated_at",\n    UaaID:           "uaa_id",\n    ServiceBrokerID: "service_broker_id",\n}\n')),(0,o.kt)("p",null,"ServiceDashboardClientRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var ServiceDashboardClientRels = struct {\n}{}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceDashboardClientTableColumns = struct {\n    ID              string\n    CreatedAt       string\n    UpdatedAt       string\n    UaaID           string\n    ServiceBrokerID string\n}{\n    ID:              "service_dashboard_clients.id",\n    CreatedAt:       "service_dashboard_clients.created_at",\n    UpdatedAt:       "service_dashboard_clients.updated_at",\n    UaaID:           "service_dashboard_clients.uaa_id",\n    ServiceBrokerID: "service_dashboard_clients.service_broker_id",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceDashboardClientWhere = struct {\n    ID              whereHelperint\n    CreatedAt       whereHelpertime_Time\n    UpdatedAt       whereHelpernull_Time\n    UaaID           whereHelperstring\n    ServiceBrokerID whereHelpernull_Int\n}{\n    ID:              whereHelperint{field: "\\"service_dashboard_clients\\".\\"id\\""},\n    CreatedAt:       whereHelpertime_Time{field: "\\"service_dashboard_clients\\".\\"created_at\\""},\n    UpdatedAt:       whereHelpernull_Time{field: "\\"service_dashboard_clients\\".\\"updated_at\\""},\n    UaaID:           whereHelperstring{field: "\\"service_dashboard_clients\\".\\"uaa_id\\""},\n    ServiceBrokerID: whereHelpernull_Int{field: "\\"service_dashboard_clients\\".\\"service_broker_id\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceInstanceAnnotationColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    Key:          "key",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"ServiceInstanceAnnotationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceInstanceAnnotationRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceInstanceAnnotationTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "service_instance_annotations.id",\n    GUID:         "service_instance_annotations.guid",\n    CreatedAt:    "service_instance_annotations.created_at",\n    UpdatedAt:    "service_instance_annotations.updated_at",\n    ResourceGUID: "service_instance_annotations.resource_guid",\n    KeyPrefix:    "service_instance_annotations.key_prefix",\n    Key:          "service_instance_annotations.key",\n    Value:        "service_instance_annotations.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceInstanceAnnotationWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    Key          whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"service_instance_annotations\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"service_instance_annotations\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"service_instance_annotations\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"service_instance_annotations\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"service_instance_annotations\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"service_instance_annotations\\".\\"key_prefix\\""},\n    Key:          whereHelpernull_String{field: "\\"service_instance_annotations\\".\\"key\\""},\n    Value:        whereHelpernull_String{field: "\\"service_instance_annotations\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceInstanceColumns = struct {\n    ID                   string\n    GUID                 string\n    CreatedAt            string\n    UpdatedAt            string\n    Name                 string\n    Credentials          string\n    GatewayName          string\n    GatewayData          string\n    SpaceID              string\n    ServicePlanID        string\n    Salt                 string\n    DashboardURL         string\n    IsGatewayService     string\n    SyslogDrainURL       string\n    Tags                 string\n    RouteServiceURL      string\n    EncryptionKeyLabel   string\n    EncryptionIterations string\n    MaintenanceInfo      string\n}{\n    ID:                   "id",\n    GUID:                 "guid",\n    CreatedAt:            "created_at",\n    UpdatedAt:            "updated_at",\n    Name:                 "name",\n    Credentials:          "credentials",\n    GatewayName:          "gateway_name",\n    GatewayData:          "gateway_data",\n    SpaceID:              "space_id",\n    ServicePlanID:        "service_plan_id",\n    Salt:                 "salt",\n    DashboardURL:         "dashboard_url",\n    IsGatewayService:     "is_gateway_service",\n    SyslogDrainURL:       "syslog_drain_url",\n    Tags:                 "tags",\n    RouteServiceURL:      "route_service_url",\n    EncryptionKeyLabel:   "encryption_key_label",\n    EncryptionIterations: "encryption_iterations",\n    MaintenanceInfo:      "maintenance_info",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceInstanceLabelColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    KeyName:      "key_name",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"ServiceInstanceLabelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceInstanceLabelRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceInstanceLabelTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "service_instance_labels.id",\n    GUID:         "service_instance_labels.guid",\n    CreatedAt:    "service_instance_labels.created_at",\n    UpdatedAt:    "service_instance_labels.updated_at",\n    ResourceGUID: "service_instance_labels.resource_guid",\n    KeyPrefix:    "service_instance_labels.key_prefix",\n    KeyName:      "service_instance_labels.key_name",\n    Value:        "service_instance_labels.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceInstanceLabelWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    KeyName      whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"service_instance_labels\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"service_instance_labels\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"service_instance_labels\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"service_instance_labels\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"service_instance_labels\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"service_instance_labels\\".\\"key_prefix\\""},\n    KeyName:      whereHelpernull_String{field: "\\"service_instance_labels\\".\\"key_name\\""},\n    Value:        whereHelpernull_String{field: "\\"service_instance_labels\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceInstanceOperationColumns = struct {\n    ID                      string\n    GUID                    string\n    CreatedAt               string\n    UpdatedAt               string\n    ServiceInstanceID       string\n    Type                    string\n    State                   string\n    Description             string\n    ProposedChanges         string\n    BrokerProvidedOperation string\n}{\n    ID:                      "id",\n    GUID:                    "guid",\n    CreatedAt:               "created_at",\n    UpdatedAt:               "updated_at",\n    ServiceInstanceID:       "service_instance_id",\n    Type:                    "type",\n    State:                   "state",\n    Description:             "description",\n    ProposedChanges:         "proposed_changes",\n    BrokerProvidedOperation: "broker_provided_operation",\n}\n')),(0,o.kt)("p",null,"ServiceInstanceOperationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceInstanceOperationRels = struct {\n    ServiceInstance string\n}{\n    ServiceInstance: "ServiceInstance",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceInstanceOperationTableColumns = struct {\n    ID                      string\n    GUID                    string\n    CreatedAt               string\n    UpdatedAt               string\n    ServiceInstanceID       string\n    Type                    string\n    State                   string\n    Description             string\n    ProposedChanges         string\n    BrokerProvidedOperation string\n}{\n    ID:                      "service_instance_operations.id",\n    GUID:                    "service_instance_operations.guid",\n    CreatedAt:               "service_instance_operations.created_at",\n    UpdatedAt:               "service_instance_operations.updated_at",\n    ServiceInstanceID:       "service_instance_operations.service_instance_id",\n    Type:                    "service_instance_operations.type",\n    State:                   "service_instance_operations.state",\n    Description:             "service_instance_operations.description",\n    ProposedChanges:         "service_instance_operations.proposed_changes",\n    BrokerProvidedOperation: "service_instance_operations.broker_provided_operation",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceInstanceOperationWhere = struct {\n    ID                      whereHelperint\n    GUID                    whereHelperstring\n    CreatedAt               whereHelpertime_Time\n    UpdatedAt               whereHelpernull_Time\n    ServiceInstanceID       whereHelpernull_Int\n    Type                    whereHelpernull_String\n    State                   whereHelpernull_String\n    Description             whereHelpernull_String\n    ProposedChanges         whereHelperstring\n    BrokerProvidedOperation whereHelpernull_String\n}{\n    ID:                      whereHelperint{field: "\\"service_instance_operations\\".\\"id\\""},\n    GUID:                    whereHelperstring{field: "\\"service_instance_operations\\".\\"guid\\""},\n    CreatedAt:               whereHelpertime_Time{field: "\\"service_instance_operations\\".\\"created_at\\""},\n    UpdatedAt:               whereHelpernull_Time{field: "\\"service_instance_operations\\".\\"updated_at\\""},\n    ServiceInstanceID:       whereHelpernull_Int{field: "\\"service_instance_operations\\".\\"service_instance_id\\""},\n    Type:                    whereHelpernull_String{field: "\\"service_instance_operations\\".\\"type\\""},\n    State:                   whereHelpernull_String{field: "\\"service_instance_operations\\".\\"state\\""},\n    Description:             whereHelpernull_String{field: "\\"service_instance_operations\\".\\"description\\""},\n    ProposedChanges:         whereHelperstring{field: "\\"service_instance_operations\\".\\"proposed_changes\\""},\n    BrokerProvidedOperation: whereHelpernull_String{field: "\\"service_instance_operations\\".\\"broker_provided_operation\\""},\n}\n')),(0,o.kt)("p",null,"ServiceInstanceRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceInstanceRels = struct {\n    Space                              string\n    ServicePlan                        string\n    RouteBindings                      string\n    ServiceBindings                    string\n    ResourceServiceInstanceAnnotations string\n    ResourceServiceInstanceLabels      string\n    ServiceInstanceOperations          string\n    Spaces                             string\n    ServiceKeys                        string\n}{\n    Space:                              "Space",\n    ServicePlan:                        "ServicePlan",\n    RouteBindings:                      "RouteBindings",\n    ServiceBindings:                    "ServiceBindings",\n    ResourceServiceInstanceAnnotations: "ResourceServiceInstanceAnnotations",\n    ResourceServiceInstanceLabels:      "ResourceServiceInstanceLabels",\n    ServiceInstanceOperations:          "ServiceInstanceOperations",\n    Spaces:                             "Spaces",\n    ServiceKeys:                        "ServiceKeys",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceInstanceTableColumns = struct {\n    ID                   string\n    GUID                 string\n    CreatedAt            string\n    UpdatedAt            string\n    Name                 string\n    Credentials          string\n    GatewayName          string\n    GatewayData          string\n    SpaceID              string\n    ServicePlanID        string\n    Salt                 string\n    DashboardURL         string\n    IsGatewayService     string\n    SyslogDrainURL       string\n    Tags                 string\n    RouteServiceURL      string\n    EncryptionKeyLabel   string\n    EncryptionIterations string\n    MaintenanceInfo      string\n}{\n    ID:                   "service_instances.id",\n    GUID:                 "service_instances.guid",\n    CreatedAt:            "service_instances.created_at",\n    UpdatedAt:            "service_instances.updated_at",\n    Name:                 "service_instances.name",\n    Credentials:          "service_instances.credentials",\n    GatewayName:          "service_instances.gateway_name",\n    GatewayData:          "service_instances.gateway_data",\n    SpaceID:              "service_instances.space_id",\n    ServicePlanID:        "service_instances.service_plan_id",\n    Salt:                 "service_instances.salt",\n    DashboardURL:         "service_instances.dashboard_url",\n    IsGatewayService:     "service_instances.is_gateway_service",\n    SyslogDrainURL:       "service_instances.syslog_drain_url",\n    Tags:                 "service_instances.tags",\n    RouteServiceURL:      "service_instances.route_service_url",\n    EncryptionKeyLabel:   "service_instances.encryption_key_label",\n    EncryptionIterations: "service_instances.encryption_iterations",\n    MaintenanceInfo:      "service_instances.maintenance_info",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceInstanceWhere = struct {\n    ID                   whereHelperint\n    GUID                 whereHelperstring\n    CreatedAt            whereHelpertime_Time\n    UpdatedAt            whereHelpernull_Time\n    Name                 whereHelperstring\n    Credentials          whereHelpernull_String\n    GatewayName          whereHelpernull_String\n    GatewayData          whereHelpernull_String\n    SpaceID              whereHelperint\n    ServicePlanID        whereHelpernull_Int\n    Salt                 whereHelpernull_String\n    DashboardURL         whereHelpernull_String\n    IsGatewayService     whereHelperbool\n    SyslogDrainURL       whereHelpernull_String\n    Tags                 whereHelpernull_String\n    RouteServiceURL      whereHelpernull_String\n    EncryptionKeyLabel   whereHelpernull_String\n    EncryptionIterations whereHelperint\n    MaintenanceInfo      whereHelpernull_String\n}{\n    ID:                   whereHelperint{field: "\\"service_instances\\".\\"id\\""},\n    GUID:                 whereHelperstring{field: "\\"service_instances\\".\\"guid\\""},\n    CreatedAt:            whereHelpertime_Time{field: "\\"service_instances\\".\\"created_at\\""},\n    UpdatedAt:            whereHelpernull_Time{field: "\\"service_instances\\".\\"updated_at\\""},\n    Name:                 whereHelperstring{field: "\\"service_instances\\".\\"name\\""},\n    Credentials:          whereHelpernull_String{field: "\\"service_instances\\".\\"credentials\\""},\n    GatewayName:          whereHelpernull_String{field: "\\"service_instances\\".\\"gateway_name\\""},\n    GatewayData:          whereHelpernull_String{field: "\\"service_instances\\".\\"gateway_data\\""},\n    SpaceID:              whereHelperint{field: "\\"service_instances\\".\\"space_id\\""},\n    ServicePlanID:        whereHelpernull_Int{field: "\\"service_instances\\".\\"service_plan_id\\""},\n    Salt:                 whereHelpernull_String{field: "\\"service_instances\\".\\"salt\\""},\n    DashboardURL:         whereHelpernull_String{field: "\\"service_instances\\".\\"dashboard_url\\""},\n    IsGatewayService:     whereHelperbool{field: "\\"service_instances\\".\\"is_gateway_service\\""},\n    SyslogDrainURL:       whereHelpernull_String{field: "\\"service_instances\\".\\"syslog_drain_url\\""},\n    Tags:                 whereHelpernull_String{field: "\\"service_instances\\".\\"tags\\""},\n    RouteServiceURL:      whereHelpernull_String{field: "\\"service_instances\\".\\"route_service_url\\""},\n    EncryptionKeyLabel:   whereHelpernull_String{field: "\\"service_instances\\".\\"encryption_key_label\\""},\n    EncryptionIterations: whereHelperint{field: "\\"service_instances\\".\\"encryption_iterations\\""},\n    MaintenanceInfo:      whereHelpernull_String{field: "\\"service_instances\\".\\"maintenance_info\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceKeyAnnotationColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    Key:          "key",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"ServiceKeyAnnotationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceKeyAnnotationRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceKeyAnnotationTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "service_key_annotations.id",\n    GUID:         "service_key_annotations.guid",\n    CreatedAt:    "service_key_annotations.created_at",\n    UpdatedAt:    "service_key_annotations.updated_at",\n    ResourceGUID: "service_key_annotations.resource_guid",\n    KeyPrefix:    "service_key_annotations.key_prefix",\n    Key:          "service_key_annotations.key",\n    Value:        "service_key_annotations.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceKeyAnnotationWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    Key          whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"service_key_annotations\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"service_key_annotations\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"service_key_annotations\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"service_key_annotations\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"service_key_annotations\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"service_key_annotations\\".\\"key_prefix\\""},\n    Key:          whereHelpernull_String{field: "\\"service_key_annotations\\".\\"key\\""},\n    Value:        whereHelpernull_String{field: "\\"service_key_annotations\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceKeyColumns = struct {\n    ID                   string\n    GUID                 string\n    CreatedAt            string\n    UpdatedAt            string\n    Name                 string\n    Salt                 string\n    Credentials          string\n    ServiceInstanceID    string\n    EncryptionKeyLabel   string\n    EncryptionIterations string\n}{\n    ID:                   "id",\n    GUID:                 "guid",\n    CreatedAt:            "created_at",\n    UpdatedAt:            "updated_at",\n    Name:                 "name",\n    Salt:                 "salt",\n    Credentials:          "credentials",\n    ServiceInstanceID:    "service_instance_id",\n    EncryptionKeyLabel:   "encryption_key_label",\n    EncryptionIterations: "encryption_iterations",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceKeyLabelColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    KeyName:      "key_name",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"ServiceKeyLabelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceKeyLabelRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceKeyLabelTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "service_key_labels.id",\n    GUID:         "service_key_labels.guid",\n    CreatedAt:    "service_key_labels.created_at",\n    UpdatedAt:    "service_key_labels.updated_at",\n    ResourceGUID: "service_key_labels.resource_guid",\n    KeyPrefix:    "service_key_labels.key_prefix",\n    KeyName:      "service_key_labels.key_name",\n    Value:        "service_key_labels.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceKeyLabelWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    KeyName      whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"service_key_labels\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"service_key_labels\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"service_key_labels\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"service_key_labels\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"service_key_labels\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"service_key_labels\\".\\"key_prefix\\""},\n    KeyName:      whereHelpernull_String{field: "\\"service_key_labels\\".\\"key_name\\""},\n    Value:        whereHelpernull_String{field: "\\"service_key_labels\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceKeyOperationColumns = struct {\n    ID                      string\n    CreatedAt               string\n    UpdatedAt               string\n    ServiceKeyID            string\n    State                   string\n    Type                    string\n    Description             string\n    BrokerProvidedOperation string\n}{\n    ID:                      "id",\n    CreatedAt:               "created_at",\n    UpdatedAt:               "updated_at",\n    ServiceKeyID:            "service_key_id",\n    State:                   "state",\n    Type:                    "type",\n    Description:             "description",\n    BrokerProvidedOperation: "broker_provided_operation",\n}\n')),(0,o.kt)("p",null,"ServiceKeyOperationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceKeyOperationRels = struct {\n    ServiceKey string\n}{\n    ServiceKey: "ServiceKey",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceKeyOperationTableColumns = struct {\n    ID                      string\n    CreatedAt               string\n    UpdatedAt               string\n    ServiceKeyID            string\n    State                   string\n    Type                    string\n    Description             string\n    BrokerProvidedOperation string\n}{\n    ID:                      "service_key_operations.id",\n    CreatedAt:               "service_key_operations.created_at",\n    UpdatedAt:               "service_key_operations.updated_at",\n    ServiceKeyID:            "service_key_operations.service_key_id",\n    State:                   "service_key_operations.state",\n    Type:                    "service_key_operations.type",\n    Description:             "service_key_operations.description",\n    BrokerProvidedOperation: "service_key_operations.broker_provided_operation",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceKeyOperationWhere = struct {\n    ID                      whereHelperint\n    CreatedAt               whereHelpertime_Time\n    UpdatedAt               whereHelpernull_Time\n    ServiceKeyID            whereHelpernull_Int\n    State                   whereHelperstring\n    Type                    whereHelperstring\n    Description             whereHelpernull_String\n    BrokerProvidedOperation whereHelpernull_String\n}{\n    ID:                      whereHelperint{field: "\\"service_key_operations\\".\\"id\\""},\n    CreatedAt:               whereHelpertime_Time{field: "\\"service_key_operations\\".\\"created_at\\""},\n    UpdatedAt:               whereHelpernull_Time{field: "\\"service_key_operations\\".\\"updated_at\\""},\n    ServiceKeyID:            whereHelpernull_Int{field: "\\"service_key_operations\\".\\"service_key_id\\""},\n    State:                   whereHelperstring{field: "\\"service_key_operations\\".\\"state\\""},\n    Type:                    whereHelperstring{field: "\\"service_key_operations\\".\\"type\\""},\n    Description:             whereHelpernull_String{field: "\\"service_key_operations\\".\\"description\\""},\n    BrokerProvidedOperation: whereHelpernull_String{field: "\\"service_key_operations\\".\\"broker_provided_operation\\""},\n}\n')),(0,o.kt)("p",null,"ServiceKeyRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceKeyRels = struct {\n    ServiceInstance               string\n    ServiceKeyOperation           string\n    ResourceServiceKeyAnnotations string\n    ResourceServiceKeyLabels      string\n}{\n    ServiceInstance:               "ServiceInstance",\n    ServiceKeyOperation:           "ServiceKeyOperation",\n    ResourceServiceKeyAnnotations: "ResourceServiceKeyAnnotations",\n    ResourceServiceKeyLabels:      "ResourceServiceKeyLabels",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceKeyTableColumns = struct {\n    ID                   string\n    GUID                 string\n    CreatedAt            string\n    UpdatedAt            string\n    Name                 string\n    Salt                 string\n    Credentials          string\n    ServiceInstanceID    string\n    EncryptionKeyLabel   string\n    EncryptionIterations string\n}{\n    ID:                   "service_keys.id",\n    GUID:                 "service_keys.guid",\n    CreatedAt:            "service_keys.created_at",\n    UpdatedAt:            "service_keys.updated_at",\n    Name:                 "service_keys.name",\n    Salt:                 "service_keys.salt",\n    Credentials:          "service_keys.credentials",\n    ServiceInstanceID:    "service_keys.service_instance_id",\n    EncryptionKeyLabel:   "service_keys.encryption_key_label",\n    EncryptionIterations: "service_keys.encryption_iterations",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceKeyWhere = struct {\n    ID                   whereHelperint\n    GUID                 whereHelperstring\n    CreatedAt            whereHelpertime_Time\n    UpdatedAt            whereHelpernull_Time\n    Name                 whereHelperstring\n    Salt                 whereHelpernull_String\n    Credentials          whereHelperstring\n    ServiceInstanceID    whereHelperint\n    EncryptionKeyLabel   whereHelpernull_String\n    EncryptionIterations whereHelperint\n}{\n    ID:                   whereHelperint{field: "\\"service_keys\\".\\"id\\""},\n    GUID:                 whereHelperstring{field: "\\"service_keys\\".\\"guid\\""},\n    CreatedAt:            whereHelpertime_Time{field: "\\"service_keys\\".\\"created_at\\""},\n    UpdatedAt:            whereHelpernull_Time{field: "\\"service_keys\\".\\"updated_at\\""},\n    Name:                 whereHelperstring{field: "\\"service_keys\\".\\"name\\""},\n    Salt:                 whereHelpernull_String{field: "\\"service_keys\\".\\"salt\\""},\n    Credentials:          whereHelperstring{field: "\\"service_keys\\".\\"credentials\\""},\n    ServiceInstanceID:    whereHelperint{field: "\\"service_keys\\".\\"service_instance_id\\""},\n    EncryptionKeyLabel:   whereHelpernull_String{field: "\\"service_keys\\".\\"encryption_key_label\\""},\n    EncryptionIterations: whereHelperint{field: "\\"service_keys\\".\\"encryption_iterations\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceOfferingAnnotationColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    Key:          "key",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"ServiceOfferingAnnotationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceOfferingAnnotationRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceOfferingAnnotationTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "service_offering_annotations.id",\n    GUID:         "service_offering_annotations.guid",\n    CreatedAt:    "service_offering_annotations.created_at",\n    UpdatedAt:    "service_offering_annotations.updated_at",\n    ResourceGUID: "service_offering_annotations.resource_guid",\n    KeyPrefix:    "service_offering_annotations.key_prefix",\n    Key:          "service_offering_annotations.key",\n    Value:        "service_offering_annotations.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceOfferingAnnotationWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    Key          whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"service_offering_annotations\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"service_offering_annotations\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"service_offering_annotations\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"service_offering_annotations\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"service_offering_annotations\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"service_offering_annotations\\".\\"key_prefix\\""},\n    Key:          whereHelpernull_String{field: "\\"service_offering_annotations\\".\\"key\\""},\n    Value:        whereHelpernull_String{field: "\\"service_offering_annotations\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceOfferingLabelColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    KeyName:      "key_name",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"ServiceOfferingLabelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceOfferingLabelRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceOfferingLabelTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "service_offering_labels.id",\n    GUID:         "service_offering_labels.guid",\n    CreatedAt:    "service_offering_labels.created_at",\n    UpdatedAt:    "service_offering_labels.updated_at",\n    ResourceGUID: "service_offering_labels.resource_guid",\n    KeyPrefix:    "service_offering_labels.key_prefix",\n    KeyName:      "service_offering_labels.key_name",\n    Value:        "service_offering_labels.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceOfferingLabelWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    KeyName      whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"service_offering_labels\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"service_offering_labels\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"service_offering_labels\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"service_offering_labels\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"service_offering_labels\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"service_offering_labels\\".\\"key_prefix\\""},\n    KeyName:      whereHelpernull_String{field: "\\"service_offering_labels\\".\\"key_name\\""},\n    Value:        whereHelpernull_String{field: "\\"service_offering_labels\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServicePlanAnnotationColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    Key:          "key",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"ServicePlanAnnotationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServicePlanAnnotationRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServicePlanAnnotationTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "service_plan_annotations.id",\n    GUID:         "service_plan_annotations.guid",\n    CreatedAt:    "service_plan_annotations.created_at",\n    UpdatedAt:    "service_plan_annotations.updated_at",\n    ResourceGUID: "service_plan_annotations.resource_guid",\n    KeyPrefix:    "service_plan_annotations.key_prefix",\n    Key:          "service_plan_annotations.key",\n    Value:        "service_plan_annotations.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServicePlanAnnotationWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    Key          whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"service_plan_annotations\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"service_plan_annotations\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"service_plan_annotations\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"service_plan_annotations\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"service_plan_annotations\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"service_plan_annotations\\".\\"key_prefix\\""},\n    Key:          whereHelpernull_String{field: "\\"service_plan_annotations\\".\\"key\\""},\n    Value:        whereHelpernull_String{field: "\\"service_plan_annotations\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServicePlanColumns = struct {\n    ID                     string\n    GUID                   string\n    CreatedAt              string\n    UpdatedAt              string\n    Name                   string\n    Description            string\n    Free                   string\n    ServiceID              string\n    Extra                  string\n    UniqueID               string\n    Public                 string\n    Active                 string\n    Bindable               string\n    CreateInstanceSchema   string\n    UpdateInstanceSchema   string\n    CreateBindingSchema    string\n    PlanUpdateable         string\n    MaximumPollingDuration string\n    MaintenanceInfo        string\n}{\n    ID:                     "id",\n    GUID:                   "guid",\n    CreatedAt:              "created_at",\n    UpdatedAt:              "updated_at",\n    Name:                   "name",\n    Description:            "description",\n    Free:                   "free",\n    ServiceID:              "service_id",\n    Extra:                  "extra",\n    UniqueID:               "unique_id",\n    Public:                 "public",\n    Active:                 "active",\n    Bindable:               "bindable",\n    CreateInstanceSchema:   "create_instance_schema",\n    UpdateInstanceSchema:   "update_instance_schema",\n    CreateBindingSchema:    "create_binding_schema",\n    PlanUpdateable:         "plan_updateable",\n    MaximumPollingDuration: "maximum_polling_duration",\n    MaintenanceInfo:        "maintenance_info",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServicePlanLabelColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    KeyName:      "key_name",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"ServicePlanLabelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServicePlanLabelRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServicePlanLabelTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "service_plan_labels.id",\n    GUID:         "service_plan_labels.guid",\n    CreatedAt:    "service_plan_labels.created_at",\n    UpdatedAt:    "service_plan_labels.updated_at",\n    ResourceGUID: "service_plan_labels.resource_guid",\n    KeyPrefix:    "service_plan_labels.key_prefix",\n    KeyName:      "service_plan_labels.key_name",\n    Value:        "service_plan_labels.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServicePlanLabelWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    KeyName      whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"service_plan_labels\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"service_plan_labels\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"service_plan_labels\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"service_plan_labels\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"service_plan_labels\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"service_plan_labels\\".\\"key_prefix\\""},\n    KeyName:      whereHelpernull_String{field: "\\"service_plan_labels\\".\\"key_name\\""},\n    Value:        whereHelpernull_String{field: "\\"service_plan_labels\\".\\"value\\""},\n}\n')),(0,o.kt)("p",null,"ServicePlanRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServicePlanRels = struct {\n    Service                        string\n    ServiceInstances               string\n    ResourceServicePlanAnnotations string\n    ResourceServicePlanLabels      string\n    ServicePlanVisibilities        string\n}{\n    Service:                        "Service",\n    ServiceInstances:               "ServiceInstances",\n    ResourceServicePlanAnnotations: "ResourceServicePlanAnnotations",\n    ResourceServicePlanLabels:      "ResourceServicePlanLabels",\n    ServicePlanVisibilities:        "ServicePlanVisibilities",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServicePlanTableColumns = struct {\n    ID                     string\n    GUID                   string\n    CreatedAt              string\n    UpdatedAt              string\n    Name                   string\n    Description            string\n    Free                   string\n    ServiceID              string\n    Extra                  string\n    UniqueID               string\n    Public                 string\n    Active                 string\n    Bindable               string\n    CreateInstanceSchema   string\n    UpdateInstanceSchema   string\n    CreateBindingSchema    string\n    PlanUpdateable         string\n    MaximumPollingDuration string\n    MaintenanceInfo        string\n}{\n    ID:                     "service_plans.id",\n    GUID:                   "service_plans.guid",\n    CreatedAt:              "service_plans.created_at",\n    UpdatedAt:              "service_plans.updated_at",\n    Name:                   "service_plans.name",\n    Description:            "service_plans.description",\n    Free:                   "service_plans.free",\n    ServiceID:              "service_plans.service_id",\n    Extra:                  "service_plans.extra",\n    UniqueID:               "service_plans.unique_id",\n    Public:                 "service_plans.public",\n    Active:                 "service_plans.active",\n    Bindable:               "service_plans.bindable",\n    CreateInstanceSchema:   "service_plans.create_instance_schema",\n    UpdateInstanceSchema:   "service_plans.update_instance_schema",\n    CreateBindingSchema:    "service_plans.create_binding_schema",\n    PlanUpdateable:         "service_plans.plan_updateable",\n    MaximumPollingDuration: "service_plans.maximum_polling_duration",\n    MaintenanceInfo:        "service_plans.maintenance_info",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServicePlanVisibilityColumns = struct {\n    ID             string\n    GUID           string\n    CreatedAt      string\n    UpdatedAt      string\n    ServicePlanID  string\n    OrganizationID string\n}{\n    ID:             "id",\n    GUID:           "guid",\n    CreatedAt:      "created_at",\n    UpdatedAt:      "updated_at",\n    ServicePlanID:  "service_plan_id",\n    OrganizationID: "organization_id",\n}\n')),(0,o.kt)("p",null,"ServicePlanVisibilityRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServicePlanVisibilityRels = struct {\n    Organization string\n    ServicePlan  string\n}{\n    Organization: "Organization",\n    ServicePlan:  "ServicePlan",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServicePlanVisibilityTableColumns = struct {\n    ID             string\n    GUID           string\n    CreatedAt      string\n    UpdatedAt      string\n    ServicePlanID  string\n    OrganizationID string\n}{\n    ID:             "service_plan_visibilities.id",\n    GUID:           "service_plan_visibilities.guid",\n    CreatedAt:      "service_plan_visibilities.created_at",\n    UpdatedAt:      "service_plan_visibilities.updated_at",\n    ServicePlanID:  "service_plan_visibilities.service_plan_id",\n    OrganizationID: "service_plan_visibilities.organization_id",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServicePlanVisibilityWhere = struct {\n    ID             whereHelperint\n    GUID           whereHelperstring\n    CreatedAt      whereHelpertime_Time\n    UpdatedAt      whereHelpernull_Time\n    ServicePlanID  whereHelperint\n    OrganizationID whereHelperint\n}{\n    ID:             whereHelperint{field: "\\"service_plan_visibilities\\".\\"id\\""},\n    GUID:           whereHelperstring{field: "\\"service_plan_visibilities\\".\\"guid\\""},\n    CreatedAt:      whereHelpertime_Time{field: "\\"service_plan_visibilities\\".\\"created_at\\""},\n    UpdatedAt:      whereHelpernull_Time{field: "\\"service_plan_visibilities\\".\\"updated_at\\""},\n    ServicePlanID:  whereHelperint{field: "\\"service_plan_visibilities\\".\\"service_plan_id\\""},\n    OrganizationID: whereHelperint{field: "\\"service_plan_visibilities\\".\\"organization_id\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServicePlanWhere = struct {\n    ID                     whereHelperint\n    GUID                   whereHelperstring\n    CreatedAt              whereHelpertime_Time\n    UpdatedAt              whereHelpernull_Time\n    Name                   whereHelperstring\n    Description            whereHelperstring\n    Free                   whereHelperbool\n    ServiceID              whereHelperint\n    Extra                  whereHelpernull_String\n    UniqueID               whereHelperstring\n    Public                 whereHelpernull_Bool\n    Active                 whereHelpernull_Bool\n    Bindable               whereHelpernull_Bool\n    CreateInstanceSchema   whereHelpernull_String\n    UpdateInstanceSchema   whereHelpernull_String\n    CreateBindingSchema    whereHelpernull_String\n    PlanUpdateable         whereHelpernull_Bool\n    MaximumPollingDuration whereHelpernull_Int\n    MaintenanceInfo        whereHelpernull_String\n}{\n    ID:                     whereHelperint{field: "\\"service_plans\\".\\"id\\""},\n    GUID:                   whereHelperstring{field: "\\"service_plans\\".\\"guid\\""},\n    CreatedAt:              whereHelpertime_Time{field: "\\"service_plans\\".\\"created_at\\""},\n    UpdatedAt:              whereHelpernull_Time{field: "\\"service_plans\\".\\"updated_at\\""},\n    Name:                   whereHelperstring{field: "\\"service_plans\\".\\"name\\""},\n    Description:            whereHelperstring{field: "\\"service_plans\\".\\"description\\""},\n    Free:                   whereHelperbool{field: "\\"service_plans\\".\\"free\\""},\n    ServiceID:              whereHelperint{field: "\\"service_plans\\".\\"service_id\\""},\n    Extra:                  whereHelpernull_String{field: "\\"service_plans\\".\\"extra\\""},\n    UniqueID:               whereHelperstring{field: "\\"service_plans\\".\\"unique_id\\""},\n    Public:                 whereHelpernull_Bool{field: "\\"service_plans\\".\\"public\\""},\n    Active:                 whereHelpernull_Bool{field: "\\"service_plans\\".\\"active\\""},\n    Bindable:               whereHelpernull_Bool{field: "\\"service_plans\\".\\"bindable\\""},\n    CreateInstanceSchema:   whereHelpernull_String{field: "\\"service_plans\\".\\"create_instance_schema\\""},\n    UpdateInstanceSchema:   whereHelpernull_String{field: "\\"service_plans\\".\\"update_instance_schema\\""},\n    CreateBindingSchema:    whereHelpernull_String{field: "\\"service_plans\\".\\"create_binding_schema\\""},\n    PlanUpdateable:         whereHelpernull_Bool{field: "\\"service_plans\\".\\"plan_updateable\\""},\n    MaximumPollingDuration: whereHelpernull_Int{field: "\\"service_plans\\".\\"maximum_polling_duration\\""},\n    MaintenanceInfo:        whereHelpernull_String{field: "\\"service_plans\\".\\"maintenance_info\\""},\n}\n')),(0,o.kt)("p",null,"ServiceRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceRels = struct {\n    ServiceBroker                      string\n    ResourceServiceOfferingAnnotations string\n    ResourceServiceOfferingLabels      string\n    ServicePlans                       string\n}{\n    ServiceBroker:                      "ServiceBroker",\n    ResourceServiceOfferingAnnotations: "ResourceServiceOfferingAnnotations",\n    ResourceServiceOfferingLabels:      "ResourceServiceOfferingLabels",\n    ServicePlans:                       "ServicePlans",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceTableColumns = struct {\n    ID                   string\n    GUID                 string\n    CreatedAt            string\n    UpdatedAt            string\n    Label                string\n    Description          string\n    InfoURL              string\n    Acls                 string\n    Timeout              string\n    Active               string\n    Extra                string\n    UniqueID             string\n    Bindable             string\n    Tags                 string\n    DocumentationURL     string\n    ServiceBrokerID      string\n    LongDescription      string\n    Requires             string\n    Purging              string\n    PlanUpdateable       string\n    BindingsRetrievable  string\n    InstancesRetrievable string\n    AllowContextUpdates  string\n}{\n    ID:                   "services.id",\n    GUID:                 "services.guid",\n    CreatedAt:            "services.created_at",\n    UpdatedAt:            "services.updated_at",\n    Label:                "services.label",\n    Description:          "services.description",\n    InfoURL:              "services.info_url",\n    Acls:                 "services.acls",\n    Timeout:              "services.timeout",\n    Active:               "services.active",\n    Extra:                "services.extra",\n    UniqueID:             "services.unique_id",\n    Bindable:             "services.bindable",\n    Tags:                 "services.tags",\n    DocumentationURL:     "services.documentation_url",\n    ServiceBrokerID:      "services.service_broker_id",\n    LongDescription:      "services.long_description",\n    Requires:             "services.requires",\n    Purging:              "services.purging",\n    PlanUpdateable:       "services.plan_updateable",\n    BindingsRetrievable:  "services.bindings_retrievable",\n    InstancesRetrievable: "services.instances_retrievable",\n    AllowContextUpdates:  "services.allow_context_updates",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceUsageEventColumns = struct {\n    ID                  string\n    GUID                string\n    CreatedAt           string\n    State               string\n    OrgGUID             string\n    SpaceGUID           string\n    SpaceName           string\n    ServiceInstanceGUID string\n    ServiceInstanceName string\n    ServiceInstanceType string\n    ServicePlanGUID     string\n    ServicePlanName     string\n    ServiceGUID         string\n    ServiceLabel        string\n    ServiceBrokerName   string\n    ServiceBrokerGUID   string\n}{\n    ID:                  "id",\n    GUID:                "guid",\n    CreatedAt:           "created_at",\n    State:               "state",\n    OrgGUID:             "org_guid",\n    SpaceGUID:           "space_guid",\n    SpaceName:           "space_name",\n    ServiceInstanceGUID: "service_instance_guid",\n    ServiceInstanceName: "service_instance_name",\n    ServiceInstanceType: "service_instance_type",\n    ServicePlanGUID:     "service_plan_guid",\n    ServicePlanName:     "service_plan_name",\n    ServiceGUID:         "service_guid",\n    ServiceLabel:        "service_label",\n    ServiceBrokerName:   "service_broker_name",\n    ServiceBrokerGUID:   "service_broker_guid",\n}\n')),(0,o.kt)("p",null,"ServiceUsageEventRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var ServiceUsageEventRels = struct {\n}{}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceUsageEventTableColumns = struct {\n    ID                  string\n    GUID                string\n    CreatedAt           string\n    State               string\n    OrgGUID             string\n    SpaceGUID           string\n    SpaceName           string\n    ServiceInstanceGUID string\n    ServiceInstanceName string\n    ServiceInstanceType string\n    ServicePlanGUID     string\n    ServicePlanName     string\n    ServiceGUID         string\n    ServiceLabel        string\n    ServiceBrokerName   string\n    ServiceBrokerGUID   string\n}{\n    ID:                  "service_usage_events.id",\n    GUID:                "service_usage_events.guid",\n    CreatedAt:           "service_usage_events.created_at",\n    State:               "service_usage_events.state",\n    OrgGUID:             "service_usage_events.org_guid",\n    SpaceGUID:           "service_usage_events.space_guid",\n    SpaceName:           "service_usage_events.space_name",\n    ServiceInstanceGUID: "service_usage_events.service_instance_guid",\n    ServiceInstanceName: "service_usage_events.service_instance_name",\n    ServiceInstanceType: "service_usage_events.service_instance_type",\n    ServicePlanGUID:     "service_usage_events.service_plan_guid",\n    ServicePlanName:     "service_usage_events.service_plan_name",\n    ServiceGUID:         "service_usage_events.service_guid",\n    ServiceLabel:        "service_usage_events.service_label",\n    ServiceBrokerName:   "service_usage_events.service_broker_name",\n    ServiceBrokerGUID:   "service_usage_events.service_broker_guid",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceUsageEventWhere = struct {\n    ID                  whereHelperint\n    GUID                whereHelperstring\n    CreatedAt           whereHelpertime_Time\n    State               whereHelperstring\n    OrgGUID             whereHelperstring\n    SpaceGUID           whereHelperstring\n    SpaceName           whereHelperstring\n    ServiceInstanceGUID whereHelperstring\n    ServiceInstanceName whereHelperstring\n    ServiceInstanceType whereHelperstring\n    ServicePlanGUID     whereHelpernull_String\n    ServicePlanName     whereHelpernull_String\n    ServiceGUID         whereHelpernull_String\n    ServiceLabel        whereHelpernull_String\n    ServiceBrokerName   whereHelpernull_String\n    ServiceBrokerGUID   whereHelpernull_String\n}{\n    ID:                  whereHelperint{field: "\\"service_usage_events\\".\\"id\\""},\n    GUID:                whereHelperstring{field: "\\"service_usage_events\\".\\"guid\\""},\n    CreatedAt:           whereHelpertime_Time{field: "\\"service_usage_events\\".\\"created_at\\""},\n    State:               whereHelperstring{field: "\\"service_usage_events\\".\\"state\\""},\n    OrgGUID:             whereHelperstring{field: "\\"service_usage_events\\".\\"org_guid\\""},\n    SpaceGUID:           whereHelperstring{field: "\\"service_usage_events\\".\\"space_guid\\""},\n    SpaceName:           whereHelperstring{field: "\\"service_usage_events\\".\\"space_name\\""},\n    ServiceInstanceGUID: whereHelperstring{field: "\\"service_usage_events\\".\\"service_instance_guid\\""},\n    ServiceInstanceName: whereHelperstring{field: "\\"service_usage_events\\".\\"service_instance_name\\""},\n    ServiceInstanceType: whereHelperstring{field: "\\"service_usage_events\\".\\"service_instance_type\\""},\n    ServicePlanGUID:     whereHelpernull_String{field: "\\"service_usage_events\\".\\"service_plan_guid\\""},\n    ServicePlanName:     whereHelpernull_String{field: "\\"service_usage_events\\".\\"service_plan_name\\""},\n    ServiceGUID:         whereHelpernull_String{field: "\\"service_usage_events\\".\\"service_guid\\""},\n    ServiceLabel:        whereHelpernull_String{field: "\\"service_usage_events\\".\\"service_label\\""},\n    ServiceBrokerName:   whereHelpernull_String{field: "\\"service_usage_events\\".\\"service_broker_name\\""},\n    ServiceBrokerGUID:   whereHelpernull_String{field: "\\"service_usage_events\\".\\"service_broker_guid\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var ServiceWhere = struct {\n    ID                   whereHelperint\n    GUID                 whereHelperstring\n    CreatedAt            whereHelpertime_Time\n    UpdatedAt            whereHelpernull_Time\n    Label                whereHelperstring\n    Description          whereHelperstring\n    InfoURL              whereHelpernull_String\n    Acls                 whereHelpernull_String\n    Timeout              whereHelpernull_Int\n    Active               whereHelpernull_Bool\n    Extra                whereHelpernull_String\n    UniqueID             whereHelpernull_String\n    Bindable             whereHelperbool\n    Tags                 whereHelpernull_String\n    DocumentationURL     whereHelpernull_String\n    ServiceBrokerID      whereHelpernull_Int\n    LongDescription      whereHelpernull_String\n    Requires             whereHelpernull_String\n    Purging              whereHelperbool\n    PlanUpdateable       whereHelpernull_Bool\n    BindingsRetrievable  whereHelperbool\n    InstancesRetrievable whereHelperbool\n    AllowContextUpdates  whereHelperbool\n}{\n    ID:                   whereHelperint{field: "\\"services\\".\\"id\\""},\n    GUID:                 whereHelperstring{field: "\\"services\\".\\"guid\\""},\n    CreatedAt:            whereHelpertime_Time{field: "\\"services\\".\\"created_at\\""},\n    UpdatedAt:            whereHelpernull_Time{field: "\\"services\\".\\"updated_at\\""},\n    Label:                whereHelperstring{field: "\\"services\\".\\"label\\""},\n    Description:          whereHelperstring{field: "\\"services\\".\\"description\\""},\n    InfoURL:              whereHelpernull_String{field: "\\"services\\".\\"info_url\\""},\n    Acls:                 whereHelpernull_String{field: "\\"services\\".\\"acls\\""},\n    Timeout:              whereHelpernull_Int{field: "\\"services\\".\\"timeout\\""},\n    Active:               whereHelpernull_Bool{field: "\\"services\\".\\"active\\""},\n    Extra:                whereHelpernull_String{field: "\\"services\\".\\"extra\\""},\n    UniqueID:             whereHelpernull_String{field: "\\"services\\".\\"unique_id\\""},\n    Bindable:             whereHelperbool{field: "\\"services\\".\\"bindable\\""},\n    Tags:                 whereHelpernull_String{field: "\\"services\\".\\"tags\\""},\n    DocumentationURL:     whereHelpernull_String{field: "\\"services\\".\\"documentation_url\\""},\n    ServiceBrokerID:      whereHelpernull_Int{field: "\\"services\\".\\"service_broker_id\\""},\n    LongDescription:      whereHelpernull_String{field: "\\"services\\".\\"long_description\\""},\n    Requires:             whereHelpernull_String{field: "\\"services\\".\\"requires\\""},\n    Purging:              whereHelperbool{field: "\\"services\\".\\"purging\\""},\n    PlanUpdateable:       whereHelpernull_Bool{field: "\\"services\\".\\"plan_updateable\\""},\n    BindingsRetrievable:  whereHelperbool{field: "\\"services\\".\\"bindings_retrievable\\""},\n    InstancesRetrievable: whereHelperbool{field: "\\"services\\".\\"instances_retrievable\\""},\n    AllowContextUpdates:  whereHelperbool{field: "\\"services\\".\\"allow_context_updates\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SidecarColumns = struct {\n    ID        string\n    GUID      string\n    CreatedAt string\n    UpdatedAt string\n    Name      string\n    Command   string\n    AppGUID   string\n    Memory    string\n    Origin    string\n}{\n    ID:        "id",\n    GUID:      "guid",\n    CreatedAt: "created_at",\n    UpdatedAt: "updated_at",\n    Name:      "name",\n    Command:   "command",\n    AppGUID:   "app_guid",\n    Memory:    "memory",\n    Origin:    "origin",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SidecarProcessTypeColumns = struct {\n    ID          string\n    GUID        string\n    CreatedAt   string\n    UpdatedAt   string\n    Type        string\n    SidecarGUID string\n    AppGUID     string\n}{\n    ID:          "id",\n    GUID:        "guid",\n    CreatedAt:   "created_at",\n    UpdatedAt:   "updated_at",\n    Type:        "type",\n    SidecarGUID: "sidecar_guid",\n    AppGUID:     "app_guid",\n}\n')),(0,o.kt)("p",null,"SidecarProcessTypeRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SidecarProcessTypeRels = struct {\n    Sidecar string\n}{\n    Sidecar: "Sidecar",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SidecarProcessTypeTableColumns = struct {\n    ID          string\n    GUID        string\n    CreatedAt   string\n    UpdatedAt   string\n    Type        string\n    SidecarGUID string\n    AppGUID     string\n}{\n    ID:          "sidecar_process_types.id",\n    GUID:        "sidecar_process_types.guid",\n    CreatedAt:   "sidecar_process_types.created_at",\n    UpdatedAt:   "sidecar_process_types.updated_at",\n    Type:        "sidecar_process_types.type",\n    SidecarGUID: "sidecar_process_types.sidecar_guid",\n    AppGUID:     "sidecar_process_types.app_guid",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SidecarProcessTypeWhere = struct {\n    ID          whereHelperint\n    GUID        whereHelperstring\n    CreatedAt   whereHelpertime_Time\n    UpdatedAt   whereHelpernull_Time\n    Type        whereHelperstring\n    SidecarGUID whereHelperstring\n    AppGUID     whereHelperstring\n}{\n    ID:          whereHelperint{field: "\\"sidecar_process_types\\".\\"id\\""},\n    GUID:        whereHelperstring{field: "\\"sidecar_process_types\\".\\"guid\\""},\n    CreatedAt:   whereHelpertime_Time{field: "\\"sidecar_process_types\\".\\"created_at\\""},\n    UpdatedAt:   whereHelpernull_Time{field: "\\"sidecar_process_types\\".\\"updated_at\\""},\n    Type:        whereHelperstring{field: "\\"sidecar_process_types\\".\\"type\\""},\n    SidecarGUID: whereHelperstring{field: "\\"sidecar_process_types\\".\\"sidecar_guid\\""},\n    AppGUID:     whereHelperstring{field: "\\"sidecar_process_types\\".\\"app_guid\\""},\n}\n')),(0,o.kt)("p",null,"SidecarRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SidecarRels = struct {\n    App                 string\n    SidecarProcessTypes string\n}{\n    App:                 "App",\n    SidecarProcessTypes: "SidecarProcessTypes",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SidecarTableColumns = struct {\n    ID        string\n    GUID      string\n    CreatedAt string\n    UpdatedAt string\n    Name      string\n    Command   string\n    AppGUID   string\n    Memory    string\n    Origin    string\n}{\n    ID:        "sidecars.id",\n    GUID:      "sidecars.guid",\n    CreatedAt: "sidecars.created_at",\n    UpdatedAt: "sidecars.updated_at",\n    Name:      "sidecars.name",\n    Command:   "sidecars.command",\n    AppGUID:   "sidecars.app_guid",\n    Memory:    "sidecars.memory",\n    Origin:    "sidecars.origin",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SidecarWhere = struct {\n    ID        whereHelperint\n    GUID      whereHelperstring\n    CreatedAt whereHelpertime_Time\n    UpdatedAt whereHelpernull_Time\n    Name      whereHelperstring\n    Command   whereHelperstring\n    AppGUID   whereHelperstring\n    Memory    whereHelpernull_Int\n    Origin    whereHelperstring\n}{\n    ID:        whereHelperint{field: "\\"sidecars\\".\\"id\\""},\n    GUID:      whereHelperstring{field: "\\"sidecars\\".\\"guid\\""},\n    CreatedAt: whereHelpertime_Time{field: "\\"sidecars\\".\\"created_at\\""},\n    UpdatedAt: whereHelpernull_Time{field: "\\"sidecars\\".\\"updated_at\\""},\n    Name:      whereHelperstring{field: "\\"sidecars\\".\\"name\\""},\n    Command:   whereHelperstring{field: "\\"sidecars\\".\\"command\\""},\n    AppGUID:   whereHelperstring{field: "\\"sidecars\\".\\"app_guid\\""},\n    Memory:    whereHelpernull_Int{field: "\\"sidecars\\".\\"memory\\""},\n    Origin:    whereHelperstring{field: "\\"sidecars\\".\\"origin\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpaceAnnotationColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    Key:          "key",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"SpaceAnnotationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpaceAnnotationRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpaceAnnotationTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "space_annotations.id",\n    GUID:         "space_annotations.guid",\n    CreatedAt:    "space_annotations.created_at",\n    UpdatedAt:    "space_annotations.updated_at",\n    ResourceGUID: "space_annotations.resource_guid",\n    KeyPrefix:    "space_annotations.key_prefix",\n    Key:          "space_annotations.key",\n    Value:        "space_annotations.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpaceAnnotationWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    Key          whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"space_annotations\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"space_annotations\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"space_annotations\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"space_annotations\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"space_annotations\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"space_annotations\\".\\"key_prefix\\""},\n    Key:          whereHelpernull_String{field: "\\"space_annotations\\".\\"key\\""},\n    Value:        whereHelpernull_String{field: "\\"space_annotations\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpaceColumns = struct {\n    ID                     string\n    GUID                   string\n    CreatedAt              string\n    UpdatedAt              string\n    Name                   string\n    OrganizationID         string\n    SpaceQuotaDefinitionID string\n    AllowSSH               string\n    IsolationSegmentGUID   string\n}{\n    ID:                     "id",\n    GUID:                   "guid",\n    CreatedAt:              "created_at",\n    UpdatedAt:              "updated_at",\n    Name:                   "name",\n    OrganizationID:         "organization_id",\n    SpaceQuotaDefinitionID: "space_quota_definition_id",\n    AllowSSH:               "allow_ssh",\n    IsolationSegmentGUID:   "isolation_segment_guid",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpaceLabelColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    KeyName:      "key_name",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"SpaceLabelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpaceLabelRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpaceLabelTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "space_labels.id",\n    GUID:         "space_labels.guid",\n    CreatedAt:    "space_labels.created_at",\n    UpdatedAt:    "space_labels.updated_at",\n    ResourceGUID: "space_labels.resource_guid",\n    KeyPrefix:    "space_labels.key_prefix",\n    KeyName:      "space_labels.key_name",\n    Value:        "space_labels.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpaceLabelWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    KeyName      whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"space_labels\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"space_labels\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"space_labels\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"space_labels\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"space_labels\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"space_labels\\".\\"key_prefix\\""},\n    KeyName:      whereHelpernull_String{field: "\\"space_labels\\".\\"key_name\\""},\n    Value:        whereHelpernull_String{field: "\\"space_labels\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpaceQuotaDefinitionColumns = struct {\n    ID                      string\n    GUID                    string\n    CreatedAt               string\n    UpdatedAt               string\n    Name                    string\n    NonBasicServicesAllowed string\n    TotalServices           string\n    MemoryLimit             string\n    TotalRoutes             string\n    InstanceMemoryLimit     string\n    OrganizationID          string\n    AppInstanceLimit        string\n    AppTaskLimit            string\n    TotalServiceKeys        string\n    TotalReservedRoutePorts string\n}{\n    ID:                      "id",\n    GUID:                    "guid",\n    CreatedAt:               "created_at",\n    UpdatedAt:               "updated_at",\n    Name:                    "name",\n    NonBasicServicesAllowed: "non_basic_services_allowed",\n    TotalServices:           "total_services",\n    MemoryLimit:             "memory_limit",\n    TotalRoutes:             "total_routes",\n    InstanceMemoryLimit:     "instance_memory_limit",\n    OrganizationID:          "organization_id",\n    AppInstanceLimit:        "app_instance_limit",\n    AppTaskLimit:            "app_task_limit",\n    TotalServiceKeys:        "total_service_keys",\n    TotalReservedRoutePorts: "total_reserved_route_ports",\n}\n')),(0,o.kt)("p",null,"SpaceQuotaDefinitionRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpaceQuotaDefinitionRels = struct {\n    Organization string\n    Spaces       string\n}{\n    Organization: "Organization",\n    Spaces:       "Spaces",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpaceQuotaDefinitionTableColumns = struct {\n    ID                      string\n    GUID                    string\n    CreatedAt               string\n    UpdatedAt               string\n    Name                    string\n    NonBasicServicesAllowed string\n    TotalServices           string\n    MemoryLimit             string\n    TotalRoutes             string\n    InstanceMemoryLimit     string\n    OrganizationID          string\n    AppInstanceLimit        string\n    AppTaskLimit            string\n    TotalServiceKeys        string\n    TotalReservedRoutePorts string\n}{\n    ID:                      "space_quota_definitions.id",\n    GUID:                    "space_quota_definitions.guid",\n    CreatedAt:               "space_quota_definitions.created_at",\n    UpdatedAt:               "space_quota_definitions.updated_at",\n    Name:                    "space_quota_definitions.name",\n    NonBasicServicesAllowed: "space_quota_definitions.non_basic_services_allowed",\n    TotalServices:           "space_quota_definitions.total_services",\n    MemoryLimit:             "space_quota_definitions.memory_limit",\n    TotalRoutes:             "space_quota_definitions.total_routes",\n    InstanceMemoryLimit:     "space_quota_definitions.instance_memory_limit",\n    OrganizationID:          "space_quota_definitions.organization_id",\n    AppInstanceLimit:        "space_quota_definitions.app_instance_limit",\n    AppTaskLimit:            "space_quota_definitions.app_task_limit",\n    TotalServiceKeys:        "space_quota_definitions.total_service_keys",\n    TotalReservedRoutePorts: "space_quota_definitions.total_reserved_route_ports",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpaceQuotaDefinitionWhere = struct {\n    ID                      whereHelperint\n    GUID                    whereHelperstring\n    CreatedAt               whereHelpertime_Time\n    UpdatedAt               whereHelpernull_Time\n    Name                    whereHelperstring\n    NonBasicServicesAllowed whereHelperbool\n    TotalServices           whereHelperint\n    MemoryLimit             whereHelperint\n    TotalRoutes             whereHelperint\n    InstanceMemoryLimit     whereHelperint\n    OrganizationID          whereHelperint\n    AppInstanceLimit        whereHelpernull_Int\n    AppTaskLimit            whereHelpernull_Int\n    TotalServiceKeys        whereHelperint\n    TotalReservedRoutePorts whereHelpernull_Int\n}{\n    ID:                      whereHelperint{field: "\\"space_quota_definitions\\".\\"id\\""},\n    GUID:                    whereHelperstring{field: "\\"space_quota_definitions\\".\\"guid\\""},\n    CreatedAt:               whereHelpertime_Time{field: "\\"space_quota_definitions\\".\\"created_at\\""},\n    UpdatedAt:               whereHelpernull_Time{field: "\\"space_quota_definitions\\".\\"updated_at\\""},\n    Name:                    whereHelperstring{field: "\\"space_quota_definitions\\".\\"name\\""},\n    NonBasicServicesAllowed: whereHelperbool{field: "\\"space_quota_definitions\\".\\"non_basic_services_allowed\\""},\n    TotalServices:           whereHelperint{field: "\\"space_quota_definitions\\".\\"total_services\\""},\n    MemoryLimit:             whereHelperint{field: "\\"space_quota_definitions\\".\\"memory_limit\\""},\n    TotalRoutes:             whereHelperint{field: "\\"space_quota_definitions\\".\\"total_routes\\""},\n    InstanceMemoryLimit:     whereHelperint{field: "\\"space_quota_definitions\\".\\"instance_memory_limit\\""},\n    OrganizationID:          whereHelperint{field: "\\"space_quota_definitions\\".\\"organization_id\\""},\n    AppInstanceLimit:        whereHelpernull_Int{field: "\\"space_quota_definitions\\".\\"app_instance_limit\\""},\n    AppTaskLimit:            whereHelpernull_Int{field: "\\"space_quota_definitions\\".\\"app_task_limit\\""},\n    TotalServiceKeys:        whereHelperint{field: "\\"space_quota_definitions\\".\\"total_service_keys\\""},\n    TotalReservedRoutePorts: whereHelpernull_Int{field: "\\"space_quota_definitions\\".\\"total_reserved_route_ports\\""},\n}\n')),(0,o.kt)("p",null,"SpaceRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpaceRels = struct {\n    SpaceQuotaDefinition                    string\n    IsolationSegment                        string\n    Organization                            string\n    Apps                                    string\n    Routes                                  string\n    SecurityGroupsSpaces                    string\n    ServiceBrokers                          string\n    SharedServiceInstances                  string\n    ServiceInstances                        string\n    ResourceSpaceAnnotations                string\n    ResourceSpaceLabels                     string\n    SpacesApplicationSupporters             string\n    SpacesAuditors                          string\n    SpacesDevelopers                        string\n    SpacesManagers                          string\n    StagingSpaceStagingSecurityGroupsSpaces string\n    DefaultSpaceUsers                       string\n}{\n    SpaceQuotaDefinition:                    "SpaceQuotaDefinition",\n    IsolationSegment:                        "IsolationSegment",\n    Organization:                            "Organization",\n    Apps:                                    "Apps",\n    Routes:                                  "Routes",\n    SecurityGroupsSpaces:                    "SecurityGroupsSpaces",\n    ServiceBrokers:                          "ServiceBrokers",\n    SharedServiceInstances:                  "SharedServiceInstances",\n    ServiceInstances:                        "ServiceInstances",\n    ResourceSpaceAnnotations:                "ResourceSpaceAnnotations",\n    ResourceSpaceLabels:                     "ResourceSpaceLabels",\n    SpacesApplicationSupporters:             "SpacesApplicationSupporters",\n    SpacesAuditors:                          "SpacesAuditors",\n    SpacesDevelopers:                        "SpacesDevelopers",\n    SpacesManagers:                          "SpacesManagers",\n    StagingSpaceStagingSecurityGroupsSpaces: "StagingSpaceStagingSecurityGroupsSpaces",\n    DefaultSpaceUsers:                       "DefaultSpaceUsers",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpaceTableColumns = struct {\n    ID                     string\n    GUID                   string\n    CreatedAt              string\n    UpdatedAt              string\n    Name                   string\n    OrganizationID         string\n    SpaceQuotaDefinitionID string\n    AllowSSH               string\n    IsolationSegmentGUID   string\n}{\n    ID:                     "spaces.id",\n    GUID:                   "spaces.guid",\n    CreatedAt:              "spaces.created_at",\n    UpdatedAt:              "spaces.updated_at",\n    Name:                   "spaces.name",\n    OrganizationID:         "spaces.organization_id",\n    SpaceQuotaDefinitionID: "spaces.space_quota_definition_id",\n    AllowSSH:               "spaces.allow_ssh",\n    IsolationSegmentGUID:   "spaces.isolation_segment_guid",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpaceWhere = struct {\n    ID                     whereHelperint\n    GUID                   whereHelperstring\n    CreatedAt              whereHelpertime_Time\n    UpdatedAt              whereHelpernull_Time\n    Name                   whereHelperstring\n    OrganizationID         whereHelperint\n    SpaceQuotaDefinitionID whereHelpernull_Int\n    AllowSSH               whereHelpernull_Bool\n    IsolationSegmentGUID   whereHelpernull_String\n}{\n    ID:                     whereHelperint{field: "\\"spaces\\".\\"id\\""},\n    GUID:                   whereHelperstring{field: "\\"spaces\\".\\"guid\\""},\n    CreatedAt:              whereHelpertime_Time{field: "\\"spaces\\".\\"created_at\\""},\n    UpdatedAt:              whereHelpernull_Time{field: "\\"spaces\\".\\"updated_at\\""},\n    Name:                   whereHelperstring{field: "\\"spaces\\".\\"name\\""},\n    OrganizationID:         whereHelperint{field: "\\"spaces\\".\\"organization_id\\""},\n    SpaceQuotaDefinitionID: whereHelpernull_Int{field: "\\"spaces\\".\\"space_quota_definition_id\\""},\n    AllowSSH:               whereHelpernull_Bool{field: "\\"spaces\\".\\"allow_ssh\\""},\n    IsolationSegmentGUID:   whereHelpernull_String{field: "\\"spaces\\".\\"isolation_segment_guid\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpacesApplicationSupporterColumns = struct {\n    SpacesApplicationSupportersPK string\n    RoleGUID                      string\n    SpaceID                       string\n    UserID                        string\n    CreatedAt                     string\n    UpdatedAt                     string\n}{\n    SpacesApplicationSupportersPK: "spaces_application_supporters_pk",\n    RoleGUID:                      "role_guid",\n    SpaceID:                       "space_id",\n    UserID:                        "user_id",\n    CreatedAt:                     "created_at",\n    UpdatedAt:                     "updated_at",\n}\n')),(0,o.kt)("p",null,"SpacesApplicationSupporterRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpacesApplicationSupporterRels = struct {\n    Space string\n    User  string\n}{\n    Space: "Space",\n    User:  "User",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpacesApplicationSupporterTableColumns = struct {\n    SpacesApplicationSupportersPK string\n    RoleGUID                      string\n    SpaceID                       string\n    UserID                        string\n    CreatedAt                     string\n    UpdatedAt                     string\n}{\n    SpacesApplicationSupportersPK: "spaces_application_supporters.spaces_application_supporters_pk",\n    RoleGUID:                      "spaces_application_supporters.role_guid",\n    SpaceID:                       "spaces_application_supporters.space_id",\n    UserID:                        "spaces_application_supporters.user_id",\n    CreatedAt:                     "spaces_application_supporters.created_at",\n    UpdatedAt:                     "spaces_application_supporters.updated_at",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpacesApplicationSupporterWhere = struct {\n    SpacesApplicationSupportersPK whereHelperint\n    RoleGUID                      whereHelpernull_String\n    SpaceID                       whereHelperint\n    UserID                        whereHelperint\n    CreatedAt                     whereHelpertime_Time\n    UpdatedAt                     whereHelpertime_Time\n}{\n    SpacesApplicationSupportersPK: whereHelperint{field: "\\"spaces_application_supporters\\".\\"spaces_application_supporters_pk\\""},\n    RoleGUID:                      whereHelpernull_String{field: "\\"spaces_application_supporters\\".\\"role_guid\\""},\n    SpaceID:                       whereHelperint{field: "\\"spaces_application_supporters\\".\\"space_id\\""},\n    UserID:                        whereHelperint{field: "\\"spaces_application_supporters\\".\\"user_id\\""},\n    CreatedAt:                     whereHelpertime_Time{field: "\\"spaces_application_supporters\\".\\"created_at\\""},\n    UpdatedAt:                     whereHelpertime_Time{field: "\\"spaces_application_supporters\\".\\"updated_at\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpacesAuditorColumns = struct {\n    SpaceID          string\n    UserID           string\n    SpacesAuditorsPK string\n    RoleGUID         string\n    CreatedAt        string\n    UpdatedAt        string\n}{\n    SpaceID:          "space_id",\n    UserID:           "user_id",\n    SpacesAuditorsPK: "spaces_auditors_pk",\n    RoleGUID:         "role_guid",\n    CreatedAt:        "created_at",\n    UpdatedAt:        "updated_at",\n}\n')),(0,o.kt)("p",null,"SpacesAuditorRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpacesAuditorRels = struct {\n    Space string\n    User  string\n}{\n    Space: "Space",\n    User:  "User",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpacesAuditorTableColumns = struct {\n    SpaceID          string\n    UserID           string\n    SpacesAuditorsPK string\n    RoleGUID         string\n    CreatedAt        string\n    UpdatedAt        string\n}{\n    SpaceID:          "spaces_auditors.space_id",\n    UserID:           "spaces_auditors.user_id",\n    SpacesAuditorsPK: "spaces_auditors.spaces_auditors_pk",\n    RoleGUID:         "spaces_auditors.role_guid",\n    CreatedAt:        "spaces_auditors.created_at",\n    UpdatedAt:        "spaces_auditors.updated_at",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpacesAuditorWhere = struct {\n    SpaceID          whereHelperint\n    UserID           whereHelperint\n    SpacesAuditorsPK whereHelperint\n    RoleGUID         whereHelpernull_String\n    CreatedAt        whereHelpertime_Time\n    UpdatedAt        whereHelpertime_Time\n}{\n    SpaceID:          whereHelperint{field: "\\"spaces_auditors\\".\\"space_id\\""},\n    UserID:           whereHelperint{field: "\\"spaces_auditors\\".\\"user_id\\""},\n    SpacesAuditorsPK: whereHelperint{field: "\\"spaces_auditors\\".\\"spaces_auditors_pk\\""},\n    RoleGUID:         whereHelpernull_String{field: "\\"spaces_auditors\\".\\"role_guid\\""},\n    CreatedAt:        whereHelpertime_Time{field: "\\"spaces_auditors\\".\\"created_at\\""},\n    UpdatedAt:        whereHelpertime_Time{field: "\\"spaces_auditors\\".\\"updated_at\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpacesDeveloperColumns = struct {\n    SpaceID            string\n    UserID             string\n    SpacesDevelopersPK string\n    RoleGUID           string\n    CreatedAt          string\n    UpdatedAt          string\n}{\n    SpaceID:            "space_id",\n    UserID:             "user_id",\n    SpacesDevelopersPK: "spaces_developers_pk",\n    RoleGUID:           "role_guid",\n    CreatedAt:          "created_at",\n    UpdatedAt:          "updated_at",\n}\n')),(0,o.kt)("p",null,"SpacesDeveloperRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpacesDeveloperRels = struct {\n    Space string\n    User  string\n}{\n    Space: "Space",\n    User:  "User",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpacesDeveloperTableColumns = struct {\n    SpaceID            string\n    UserID             string\n    SpacesDevelopersPK string\n    RoleGUID           string\n    CreatedAt          string\n    UpdatedAt          string\n}{\n    SpaceID:            "spaces_developers.space_id",\n    UserID:             "spaces_developers.user_id",\n    SpacesDevelopersPK: "spaces_developers.spaces_developers_pk",\n    RoleGUID:           "spaces_developers.role_guid",\n    CreatedAt:          "spaces_developers.created_at",\n    UpdatedAt:          "spaces_developers.updated_at",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpacesDeveloperWhere = struct {\n    SpaceID            whereHelperint\n    UserID             whereHelperint\n    SpacesDevelopersPK whereHelperint\n    RoleGUID           whereHelpernull_String\n    CreatedAt          whereHelpertime_Time\n    UpdatedAt          whereHelpertime_Time\n}{\n    SpaceID:            whereHelperint{field: "\\"spaces_developers\\".\\"space_id\\""},\n    UserID:             whereHelperint{field: "\\"spaces_developers\\".\\"user_id\\""},\n    SpacesDevelopersPK: whereHelperint{field: "\\"spaces_developers\\".\\"spaces_developers_pk\\""},\n    RoleGUID:           whereHelpernull_String{field: "\\"spaces_developers\\".\\"role_guid\\""},\n    CreatedAt:          whereHelpertime_Time{field: "\\"spaces_developers\\".\\"created_at\\""},\n    UpdatedAt:          whereHelpertime_Time{field: "\\"spaces_developers\\".\\"updated_at\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpacesManagerColumns = struct {\n    SpaceID          string\n    UserID           string\n    SpacesManagersPK string\n    RoleGUID         string\n    CreatedAt        string\n    UpdatedAt        string\n}{\n    SpaceID:          "space_id",\n    UserID:           "user_id",\n    SpacesManagersPK: "spaces_managers_pk",\n    RoleGUID:         "role_guid",\n    CreatedAt:        "created_at",\n    UpdatedAt:        "updated_at",\n}\n')),(0,o.kt)("p",null,"SpacesManagerRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpacesManagerRels = struct {\n    Space string\n    User  string\n}{\n    Space: "Space",\n    User:  "User",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpacesManagerTableColumns = struct {\n    SpaceID          string\n    UserID           string\n    SpacesManagersPK string\n    RoleGUID         string\n    CreatedAt        string\n    UpdatedAt        string\n}{\n    SpaceID:          "spaces_managers.space_id",\n    UserID:           "spaces_managers.user_id",\n    SpacesManagersPK: "spaces_managers.spaces_managers_pk",\n    RoleGUID:         "spaces_managers.role_guid",\n    CreatedAt:        "spaces_managers.created_at",\n    UpdatedAt:        "spaces_managers.updated_at",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var SpacesManagerWhere = struct {\n    SpaceID          whereHelperint\n    UserID           whereHelperint\n    SpacesManagersPK whereHelperint\n    RoleGUID         whereHelpernull_String\n    CreatedAt        whereHelpertime_Time\n    UpdatedAt        whereHelpertime_Time\n}{\n    SpaceID:          whereHelperint{field: "\\"spaces_managers\\".\\"space_id\\""},\n    UserID:           whereHelperint{field: "\\"spaces_managers\\".\\"user_id\\""},\n    SpacesManagersPK: whereHelperint{field: "\\"spaces_managers\\".\\"spaces_managers_pk\\""},\n    RoleGUID:         whereHelpernull_String{field: "\\"spaces_managers\\".\\"role_guid\\""},\n    CreatedAt:        whereHelpertime_Time{field: "\\"spaces_managers\\".\\"created_at\\""},\n    UpdatedAt:        whereHelpertime_Time{field: "\\"spaces_managers\\".\\"updated_at\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var StackAnnotationColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    Key:          "key",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"StackAnnotationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var StackAnnotationRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var StackAnnotationTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "stack_annotations.id",\n    GUID:         "stack_annotations.guid",\n    CreatedAt:    "stack_annotations.created_at",\n    UpdatedAt:    "stack_annotations.updated_at",\n    ResourceGUID: "stack_annotations.resource_guid",\n    KeyPrefix:    "stack_annotations.key_prefix",\n    Key:          "stack_annotations.key",\n    Value:        "stack_annotations.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var StackAnnotationWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    Key          whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"stack_annotations\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"stack_annotations\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"stack_annotations\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"stack_annotations\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"stack_annotations\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"stack_annotations\\".\\"key_prefix\\""},\n    Key:          whereHelpernull_String{field: "\\"stack_annotations\\".\\"key\\""},\n    Value:        whereHelpernull_String{field: "\\"stack_annotations\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var StackColumns = struct {\n    ID          string\n    GUID        string\n    CreatedAt   string\n    UpdatedAt   string\n    Name        string\n    Description string\n}{\n    ID:          "id",\n    GUID:        "guid",\n    CreatedAt:   "created_at",\n    UpdatedAt:   "updated_at",\n    Name:        "name",\n    Description: "description",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var StackLabelColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    KeyName:      "key_name",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"StackLabelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var StackLabelRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var StackLabelTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "stack_labels.id",\n    GUID:         "stack_labels.guid",\n    CreatedAt:    "stack_labels.created_at",\n    UpdatedAt:    "stack_labels.updated_at",\n    ResourceGUID: "stack_labels.resource_guid",\n    KeyPrefix:    "stack_labels.key_prefix",\n    KeyName:      "stack_labels.key_name",\n    Value:        "stack_labels.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var StackLabelWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    KeyName      whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"stack_labels\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"stack_labels\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"stack_labels\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"stack_labels\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"stack_labels\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"stack_labels\\".\\"key_prefix\\""},\n    KeyName:      whereHelpernull_String{field: "\\"stack_labels\\".\\"key_name\\""},\n    Value:        whereHelpernull_String{field: "\\"stack_labels\\".\\"value\\""},\n}\n')),(0,o.kt)("p",null,"StackRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var StackRels = struct {\n    ResourceStackAnnotations string\n    ResourceStackLabels      string\n}{\n    ResourceStackAnnotations: "ResourceStackAnnotations",\n    ResourceStackLabels:      "ResourceStackLabels",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var StackTableColumns = struct {\n    ID          string\n    GUID        string\n    CreatedAt   string\n    UpdatedAt   string\n    Name        string\n    Description string\n}{\n    ID:          "stacks.id",\n    GUID:        "stacks.guid",\n    CreatedAt:   "stacks.created_at",\n    UpdatedAt:   "stacks.updated_at",\n    Name:        "stacks.name",\n    Description: "stacks.description",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var StackWhere = struct {\n    ID          whereHelperint\n    GUID        whereHelperstring\n    CreatedAt   whereHelpertime_Time\n    UpdatedAt   whereHelpernull_Time\n    Name        whereHelperstring\n    Description whereHelpernull_String\n}{\n    ID:          whereHelperint{field: "\\"stacks\\".\\"id\\""},\n    GUID:        whereHelperstring{field: "\\"stacks\\".\\"guid\\""},\n    CreatedAt:   whereHelpertime_Time{field: "\\"stacks\\".\\"created_at\\""},\n    UpdatedAt:   whereHelpernull_Time{field: "\\"stacks\\".\\"updated_at\\""},\n    Name:        whereHelperstring{field: "\\"stacks\\".\\"name\\""},\n    Description: whereHelpernull_String{field: "\\"stacks\\".\\"description\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var StagingSecurityGroupsSpaceColumns = struct {\n    StagingSecurityGroupID        string\n    StagingSpaceID                string\n    StagingSecurityGroupsSpacesPK string\n}{\n    StagingSecurityGroupID:        "staging_security_group_id",\n    StagingSpaceID:                "staging_space_id",\n    StagingSecurityGroupsSpacesPK: "staging_security_groups_spaces_pk",\n}\n')),(0,o.kt)("p",null,"StagingSecurityGroupsSpaceRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var StagingSecurityGroupsSpaceRels = struct {\n    StagingSecurityGroup string\n    StagingSpace         string\n}{\n    StagingSecurityGroup: "StagingSecurityGroup",\n    StagingSpace:         "StagingSpace",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var StagingSecurityGroupsSpaceTableColumns = struct {\n    StagingSecurityGroupID        string\n    StagingSpaceID                string\n    StagingSecurityGroupsSpacesPK string\n}{\n    StagingSecurityGroupID:        "staging_security_groups_spaces.staging_security_group_id",\n    StagingSpaceID:                "staging_security_groups_spaces.staging_space_id",\n    StagingSecurityGroupsSpacesPK: "staging_security_groups_spaces.staging_security_groups_spaces_pk",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var StagingSecurityGroupsSpaceWhere = struct {\n    StagingSecurityGroupID        whereHelperint\n    StagingSpaceID                whereHelperint\n    StagingSecurityGroupsSpacesPK whereHelperint\n}{\n    StagingSecurityGroupID:        whereHelperint{field: "\\"staging_security_groups_spaces\\".\\"staging_security_group_id\\""},\n    StagingSpaceID:                whereHelperint{field: "\\"staging_security_groups_spaces\\".\\"staging_space_id\\""},\n    StagingSecurityGroupsSpacesPK: whereHelperint{field: "\\"staging_security_groups_spaces\\".\\"staging_security_groups_spaces_pk\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var TableNames = struct {\n    AppAnnotations                        string\n    AppEvents                             string\n    AppLabels                             string\n    AppUsageEvents                        string\n    Apps                                  string\n    BuildAnnotations                      string\n    BuildLabels                           string\n    BuildpackAnnotations                  string\n    BuildpackLabels                       string\n    BuildpackLifecycleBuildpacks          string\n    BuildpackLifecycleData                string\n    Buildpacks                            string\n    Builds                                string\n    ClockJobs                             string\n    DelayedJobs                           string\n    DeploymentAnnotations                 string\n    DeploymentLabels                      string\n    DeploymentProcesses                   string\n    Deployments                           string\n    DomainAnnotations                     string\n    DomainLabels                          string\n    Domains                               string\n    DropletAnnotations                    string\n    DropletLabels                         string\n    Droplets                              string\n    EncryptionKeySentinels                string\n    EnvGroups                             string\n    Events                                string\n    FeatureFlags                          string\n    IsolationSegmentAnnotations           string\n    IsolationSegmentLabels                string\n    IsolationSegments                     string\n    JobWarnings                           string\n    Jobs                                  string\n    KpackLifecycleData                    string\n    Lockings                              string\n    OrganizationAnnotations               string\n    OrganizationLabels                    string\n    Organizations                         string\n    OrganizationsAuditors                 string\n    OrganizationsBillingManagers          string\n    OrganizationsIsolationSegments        string\n    OrganizationsManagers                 string\n    OrganizationsPrivateDomains           string\n    OrganizationsUsers                    string\n    OrphanedBlobs                         string\n    PackageAnnotations                    string\n    PackageLabels                         string\n    Packages                              string\n    ProcessAnnotations                    string\n    ProcessLabels                         string\n    Processes                             string\n    QuotaDefinitions                      string\n    RequestCounts                         string\n    RevisionAnnotations                   string\n    RevisionLabels                        string\n    RevisionProcessCommands               string\n    RevisionSidecarProcessTypes           string\n    RevisionSidecars                      string\n    Revisions                             string\n    RouteAnnotations                      string\n    RouteBindingAnnotations               string\n    RouteBindingLabels                    string\n    RouteBindingOperations                string\n    RouteBindings                         string\n    RouteLabels                           string\n    RouteMappings                         string\n    Routes                                string\n    SchemaMigrations                      string\n    SecurityGroups                        string\n    SecurityGroupsSpaces                  string\n    ServiceBindingAnnotations             string\n    ServiceBindingLabels                  string\n    ServiceBindingOperations              string\n    ServiceBindings                       string\n    ServiceBrokerAnnotations              string\n    ServiceBrokerLabels                   string\n    ServiceBrokerUpdateRequestAnnotations string\n    ServiceBrokerUpdateRequestLabels      string\n    ServiceBrokerUpdateRequests           string\n    ServiceBrokers                        string\n    ServiceDashboardClients               string\n    ServiceInstanceAnnotations            string\n    ServiceInstanceLabels                 string\n    ServiceInstanceOperations             string\n    ServiceInstanceShares                 string\n    ServiceInstances                      string\n    ServiceKeyAnnotations                 string\n    ServiceKeyLabels                      string\n    ServiceKeyOperations                  string\n    ServiceKeys                           string\n    ServiceOfferingAnnotations            string\n    ServiceOfferingLabels                 string\n    ServicePlanAnnotations                string\n    ServicePlanLabels                     string\n    ServicePlanVisibilities               string\n    ServicePlans                          string\n    ServiceUsageEvents                    string\n    Services                              string\n    SidecarProcessTypes                   string\n    Sidecars                              string\n    SpaceAnnotations                      string\n    SpaceLabels                           string\n    SpaceQuotaDefinitions                 string\n    Spaces                                string\n    SpacesApplicationSupporters           string\n    SpacesAuditors                        string\n    SpacesDevelopers                      string\n    SpacesManagers                        string\n    StackAnnotations                      string\n    StackLabels                           string\n    Stacks                                string\n    StagingSecurityGroupsSpaces           string\n    TaskAnnotations                       string\n    TaskLabels                            string\n    Tasks                                 string\n    UserAnnotations                       string\n    UserLabels                            string\n    Users                                 string\n}{\n    AppAnnotations:                        "app_annotations",\n    AppEvents:                             "app_events",\n    AppLabels:                             "app_labels",\n    AppUsageEvents:                        "app_usage_events",\n    Apps:                                  "apps",\n    BuildAnnotations:                      "build_annotations",\n    BuildLabels:                           "build_labels",\n    BuildpackAnnotations:                  "buildpack_annotations",\n    BuildpackLabels:                       "buildpack_labels",\n    BuildpackLifecycleBuildpacks:          "buildpack_lifecycle_buildpacks",\n    BuildpackLifecycleData:                "buildpack_lifecycle_data",\n    Buildpacks:                            "buildpacks",\n    Builds:                                "builds",\n    ClockJobs:                             "clock_jobs",\n    DelayedJobs:                           "delayed_jobs",\n    DeploymentAnnotations:                 "deployment_annotations",\n    DeploymentLabels:                      "deployment_labels",\n    DeploymentProcesses:                   "deployment_processes",\n    Deployments:                           "deployments",\n    DomainAnnotations:                     "domain_annotations",\n    DomainLabels:                          "domain_labels",\n    Domains:                               "domains",\n    DropletAnnotations:                    "droplet_annotations",\n    DropletLabels:                         "droplet_labels",\n    Droplets:                              "droplets",\n    EncryptionKeySentinels:                "encryption_key_sentinels",\n    EnvGroups:                             "env_groups",\n    Events:                                "events",\n    FeatureFlags:                          "feature_flags",\n    IsolationSegmentAnnotations:           "isolation_segment_annotations",\n    IsolationSegmentLabels:                "isolation_segment_labels",\n    IsolationSegments:                     "isolation_segments",\n    JobWarnings:                           "job_warnings",\n    Jobs:                                  "jobs",\n    KpackLifecycleData:                    "kpack_lifecycle_data",\n    Lockings:                              "lockings",\n    OrganizationAnnotations:               "organization_annotations",\n    OrganizationLabels:                    "organization_labels",\n    Organizations:                         "organizations",\n    OrganizationsAuditors:                 "organizations_auditors",\n    OrganizationsBillingManagers:          "organizations_billing_managers",\n    OrganizationsIsolationSegments:        "organizations_isolation_segments",\n    OrganizationsManagers:                 "organizations_managers",\n    OrganizationsPrivateDomains:           "organizations_private_domains",\n    OrganizationsUsers:                    "organizations_users",\n    OrphanedBlobs:                         "orphaned_blobs",\n    PackageAnnotations:                    "package_annotations",\n    PackageLabels:                         "package_labels",\n    Packages:                              "packages",\n    ProcessAnnotations:                    "process_annotations",\n    ProcessLabels:                         "process_labels",\n    Processes:                             "processes",\n    QuotaDefinitions:                      "quota_definitions",\n    RequestCounts:                         "request_counts",\n    RevisionAnnotations:                   "revision_annotations",\n    RevisionLabels:                        "revision_labels",\n    RevisionProcessCommands:               "revision_process_commands",\n    RevisionSidecarProcessTypes:           "revision_sidecar_process_types",\n    RevisionSidecars:                      "revision_sidecars",\n    Revisions:                             "revisions",\n    RouteAnnotations:                      "route_annotations",\n    RouteBindingAnnotations:               "route_binding_annotations",\n    RouteBindingLabels:                    "route_binding_labels",\n    RouteBindingOperations:                "route_binding_operations",\n    RouteBindings:                         "route_bindings",\n    RouteLabels:                           "route_labels",\n    RouteMappings:                         "route_mappings",\n    Routes:                                "routes",\n    SchemaMigrations:                      "schema_migrations",\n    SecurityGroups:                        "security_groups",\n    SecurityGroupsSpaces:                  "security_groups_spaces",\n    ServiceBindingAnnotations:             "service_binding_annotations",\n    ServiceBindingLabels:                  "service_binding_labels",\n    ServiceBindingOperations:              "service_binding_operations",\n    ServiceBindings:                       "service_bindings",\n    ServiceBrokerAnnotations:              "service_broker_annotations",\n    ServiceBrokerLabels:                   "service_broker_labels",\n    ServiceBrokerUpdateRequestAnnotations: "service_broker_update_request_annotations",\n    ServiceBrokerUpdateRequestLabels:      "service_broker_update_request_labels",\n    ServiceBrokerUpdateRequests:           "service_broker_update_requests",\n    ServiceBrokers:                        "service_brokers",\n    ServiceDashboardClients:               "service_dashboard_clients",\n    ServiceInstanceAnnotations:            "service_instance_annotations",\n    ServiceInstanceLabels:                 "service_instance_labels",\n    ServiceInstanceOperations:             "service_instance_operations",\n    ServiceInstanceShares:                 "service_instance_shares",\n    ServiceInstances:                      "service_instances",\n    ServiceKeyAnnotations:                 "service_key_annotations",\n    ServiceKeyLabels:                      "service_key_labels",\n    ServiceKeyOperations:                  "service_key_operations",\n    ServiceKeys:                           "service_keys",\n    ServiceOfferingAnnotations:            "service_offering_annotations",\n    ServiceOfferingLabels:                 "service_offering_labels",\n    ServicePlanAnnotations:                "service_plan_annotations",\n    ServicePlanLabels:                     "service_plan_labels",\n    ServicePlanVisibilities:               "service_plan_visibilities",\n    ServicePlans:                          "service_plans",\n    ServiceUsageEvents:                    "service_usage_events",\n    Services:                              "services",\n    SidecarProcessTypes:                   "sidecar_process_types",\n    Sidecars:                              "sidecars",\n    SpaceAnnotations:                      "space_annotations",\n    SpaceLabels:                           "space_labels",\n    SpaceQuotaDefinitions:                 "space_quota_definitions",\n    Spaces:                                "spaces",\n    SpacesApplicationSupporters:           "spaces_application_supporters",\n    SpacesAuditors:                        "spaces_auditors",\n    SpacesDevelopers:                      "spaces_developers",\n    SpacesManagers:                        "spaces_managers",\n    StackAnnotations:                      "stack_annotations",\n    StackLabels:                           "stack_labels",\n    Stacks:                                "stacks",\n    StagingSecurityGroupsSpaces:           "staging_security_groups_spaces",\n    TaskAnnotations:                       "task_annotations",\n    TaskLabels:                            "task_labels",\n    Tasks:                                 "tasks",\n    UserAnnotations:                       "user_annotations",\n    UserLabels:                            "user_labels",\n    Users:                                 "users",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var TaskAnnotationColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    Key:          "key",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"TaskAnnotationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var TaskAnnotationRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var TaskAnnotationTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "task_annotations.id",\n    GUID:         "task_annotations.guid",\n    CreatedAt:    "task_annotations.created_at",\n    UpdatedAt:    "task_annotations.updated_at",\n    ResourceGUID: "task_annotations.resource_guid",\n    KeyPrefix:    "task_annotations.key_prefix",\n    Key:          "task_annotations.key",\n    Value:        "task_annotations.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var TaskAnnotationWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    Key          whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"task_annotations\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"task_annotations\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"task_annotations\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"task_annotations\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"task_annotations\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"task_annotations\\".\\"key_prefix\\""},\n    Key:          whereHelpernull_String{field: "\\"task_annotations\\".\\"key\\""},\n    Value:        whereHelpernull_String{field: "\\"task_annotations\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var TaskColumns = struct {\n    ID                            string\n    GUID                          string\n    CreatedAt                     string\n    UpdatedAt                     string\n    Name                          string\n    Command                       string\n    State                         string\n    MemoryInMB                    string\n    EncryptedEnvironmentVariables string\n    Salt                          string\n    FailureReason                 string\n    AppGUID                       string\n    DropletGUID                   string\n    SequenceID                    string\n    DiskInMB                      string\n    EncryptionKeyLabel            string\n    EncryptionIterations          string\n}{\n    ID:                            "id",\n    GUID:                          "guid",\n    CreatedAt:                     "created_at",\n    UpdatedAt:                     "updated_at",\n    Name:                          "name",\n    Command:                       "command",\n    State:                         "state",\n    MemoryInMB:                    "memory_in_mb",\n    EncryptedEnvironmentVariables: "encrypted_environment_variables",\n    Salt:                          "salt",\n    FailureReason:                 "failure_reason",\n    AppGUID:                       "app_guid",\n    DropletGUID:                   "droplet_guid",\n    SequenceID:                    "sequence_id",\n    DiskInMB:                      "disk_in_mb",\n    EncryptionKeyLabel:            "encryption_key_label",\n    EncryptionIterations:          "encryption_iterations",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var TaskLabelColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    KeyName:      "key_name",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"TaskLabelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var TaskLabelRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var TaskLabelTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "task_labels.id",\n    GUID:         "task_labels.guid",\n    CreatedAt:    "task_labels.created_at",\n    UpdatedAt:    "task_labels.updated_at",\n    ResourceGUID: "task_labels.resource_guid",\n    KeyPrefix:    "task_labels.key_prefix",\n    KeyName:      "task_labels.key_name",\n    Value:        "task_labels.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var TaskLabelWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    KeyName      whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"task_labels\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"task_labels\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"task_labels\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"task_labels\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"task_labels\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"task_labels\\".\\"key_prefix\\""},\n    KeyName:      whereHelpernull_String{field: "\\"task_labels\\".\\"key_name\\""},\n    Value:        whereHelpernull_String{field: "\\"task_labels\\".\\"value\\""},\n}\n')),(0,o.kt)("p",null,"TaskRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var TaskRels = struct {\n    App                     string\n    ResourceTaskAnnotations string\n    ResourceTaskLabels      string\n}{\n    App:                     "App",\n    ResourceTaskAnnotations: "ResourceTaskAnnotations",\n    ResourceTaskLabels:      "ResourceTaskLabels",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var TaskTableColumns = struct {\n    ID                            string\n    GUID                          string\n    CreatedAt                     string\n    UpdatedAt                     string\n    Name                          string\n    Command                       string\n    State                         string\n    MemoryInMB                    string\n    EncryptedEnvironmentVariables string\n    Salt                          string\n    FailureReason                 string\n    AppGUID                       string\n    DropletGUID                   string\n    SequenceID                    string\n    DiskInMB                      string\n    EncryptionKeyLabel            string\n    EncryptionIterations          string\n}{\n    ID:                            "tasks.id",\n    GUID:                          "tasks.guid",\n    CreatedAt:                     "tasks.created_at",\n    UpdatedAt:                     "tasks.updated_at",\n    Name:                          "tasks.name",\n    Command:                       "tasks.command",\n    State:                         "tasks.state",\n    MemoryInMB:                    "tasks.memory_in_mb",\n    EncryptedEnvironmentVariables: "tasks.encrypted_environment_variables",\n    Salt:                          "tasks.salt",\n    FailureReason:                 "tasks.failure_reason",\n    AppGUID:                       "tasks.app_guid",\n    DropletGUID:                   "tasks.droplet_guid",\n    SequenceID:                    "tasks.sequence_id",\n    DiskInMB:                      "tasks.disk_in_mb",\n    EncryptionKeyLabel:            "tasks.encryption_key_label",\n    EncryptionIterations:          "tasks.encryption_iterations",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var TaskWhere = struct {\n    ID                            whereHelperint\n    GUID                          whereHelperstring\n    CreatedAt                     whereHelpertime_Time\n    UpdatedAt                     whereHelpernull_Time\n    Name                          whereHelperstring\n    Command                       whereHelperstring\n    State                         whereHelperstring\n    MemoryInMB                    whereHelpernull_Int\n    EncryptedEnvironmentVariables whereHelpernull_String\n    Salt                          whereHelpernull_String\n    FailureReason                 whereHelpernull_String\n    AppGUID                       whereHelperstring\n    DropletGUID                   whereHelperstring\n    SequenceID                    whereHelpernull_Int\n    DiskInMB                      whereHelpernull_Int\n    EncryptionKeyLabel            whereHelpernull_String\n    EncryptionIterations          whereHelperint\n}{\n    ID:                            whereHelperint{field: "\\"tasks\\".\\"id\\""},\n    GUID:                          whereHelperstring{field: "\\"tasks\\".\\"guid\\""},\n    CreatedAt:                     whereHelpertime_Time{field: "\\"tasks\\".\\"created_at\\""},\n    UpdatedAt:                     whereHelpernull_Time{field: "\\"tasks\\".\\"updated_at\\""},\n    Name:                          whereHelperstring{field: "\\"tasks\\".\\"name\\""},\n    Command:                       whereHelperstring{field: "\\"tasks\\".\\"command\\""},\n    State:                         whereHelperstring{field: "\\"tasks\\".\\"state\\""},\n    MemoryInMB:                    whereHelpernull_Int{field: "\\"tasks\\".\\"memory_in_mb\\""},\n    EncryptedEnvironmentVariables: whereHelpernull_String{field: "\\"tasks\\".\\"encrypted_environment_variables\\""},\n    Salt:                          whereHelpernull_String{field: "\\"tasks\\".\\"salt\\""},\n    FailureReason:                 whereHelpernull_String{field: "\\"tasks\\".\\"failure_reason\\""},\n    AppGUID:                       whereHelperstring{field: "\\"tasks\\".\\"app_guid\\""},\n    DropletGUID:                   whereHelperstring{field: "\\"tasks\\".\\"droplet_guid\\""},\n    SequenceID:                    whereHelpernull_Int{field: "\\"tasks\\".\\"sequence_id\\""},\n    DiskInMB:                      whereHelpernull_Int{field: "\\"tasks\\".\\"disk_in_mb\\""},\n    EncryptionKeyLabel:            whereHelpernull_String{field: "\\"tasks\\".\\"encryption_key_label\\""},\n    EncryptionIterations:          whereHelperint{field: "\\"tasks\\".\\"encryption_iterations\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var UserAnnotationColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    Key:          "key",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"UserAnnotationRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var UserAnnotationRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var UserAnnotationTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    Key          string\n    Value        string\n}{\n    ID:           "user_annotations.id",\n    GUID:         "user_annotations.guid",\n    CreatedAt:    "user_annotations.created_at",\n    UpdatedAt:    "user_annotations.updated_at",\n    ResourceGUID: "user_annotations.resource_guid",\n    KeyPrefix:    "user_annotations.key_prefix",\n    Key:          "user_annotations.key",\n    Value:        "user_annotations.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var UserAnnotationWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    Key          whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"user_annotations\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"user_annotations\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"user_annotations\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"user_annotations\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"user_annotations\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"user_annotations\\".\\"key_prefix\\""},\n    Key:          whereHelpernull_String{field: "\\"user_annotations\\".\\"key\\""},\n    Value:        whereHelpernull_String{field: "\\"user_annotations\\".\\"value\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var UserColumns = struct {\n    ID             string\n    GUID           string\n    CreatedAt      string\n    UpdatedAt      string\n    DefaultSpaceID string\n    Admin          string\n    Active         string\n    IsOauthClient  string\n}{\n    ID:             "id",\n    GUID:           "guid",\n    CreatedAt:      "created_at",\n    UpdatedAt:      "updated_at",\n    DefaultSpaceID: "default_space_id",\n    Admin:          "admin",\n    Active:         "active",\n    IsOauthClient:  "is_oauth_client",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var UserLabelColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "id",\n    GUID:         "guid",\n    CreatedAt:    "created_at",\n    UpdatedAt:    "updated_at",\n    ResourceGUID: "resource_guid",\n    KeyPrefix:    "key_prefix",\n    KeyName:      "key_name",\n    Value:        "value",\n}\n')),(0,o.kt)("p",null,"UserLabelRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var UserLabelRels = struct {\n    Resource string\n}{\n    Resource: "Resource",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var UserLabelTableColumns = struct {\n    ID           string\n    GUID         string\n    CreatedAt    string\n    UpdatedAt    string\n    ResourceGUID string\n    KeyPrefix    string\n    KeyName      string\n    Value        string\n}{\n    ID:           "user_labels.id",\n    GUID:         "user_labels.guid",\n    CreatedAt:    "user_labels.created_at",\n    UpdatedAt:    "user_labels.updated_at",\n    ResourceGUID: "user_labels.resource_guid",\n    KeyPrefix:    "user_labels.key_prefix",\n    KeyName:      "user_labels.key_name",\n    Value:        "user_labels.value",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var UserLabelWhere = struct {\n    ID           whereHelperint\n    GUID         whereHelperstring\n    CreatedAt    whereHelpertime_Time\n    UpdatedAt    whereHelpernull_Time\n    ResourceGUID whereHelpernull_String\n    KeyPrefix    whereHelpernull_String\n    KeyName      whereHelpernull_String\n    Value        whereHelpernull_String\n}{\n    ID:           whereHelperint{field: "\\"user_labels\\".\\"id\\""},\n    GUID:         whereHelperstring{field: "\\"user_labels\\".\\"guid\\""},\n    CreatedAt:    whereHelpertime_Time{field: "\\"user_labels\\".\\"created_at\\""},\n    UpdatedAt:    whereHelpernull_Time{field: "\\"user_labels\\".\\"updated_at\\""},\n    ResourceGUID: whereHelpernull_String{field: "\\"user_labels\\".\\"resource_guid\\""},\n    KeyPrefix:    whereHelpernull_String{field: "\\"user_labels\\".\\"key_prefix\\""},\n    KeyName:      whereHelpernull_String{field: "\\"user_labels\\".\\"key_name\\""},\n    Value:        whereHelpernull_String{field: "\\"user_labels\\".\\"value\\""},\n}\n')),(0,o.kt)("p",null,"UserRels is where relationship names are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var UserRels = struct {\n    DefaultSpace                 string\n    OrganizationsAuditors        string\n    OrganizationsBillingManagers string\n    OrganizationsManagers        string\n    OrganizationsUsers           string\n    SpacesApplicationSupporters  string\n    SpacesAuditors               string\n    SpacesDevelopers             string\n    SpacesManagers               string\n    ResourceUserAnnotations      string\n    ResourceUserLabels           string\n}{\n    DefaultSpace:                 "DefaultSpace",\n    OrganizationsAuditors:        "OrganizationsAuditors",\n    OrganizationsBillingManagers: "OrganizationsBillingManagers",\n    OrganizationsManagers:        "OrganizationsManagers",\n    OrganizationsUsers:           "OrganizationsUsers",\n    SpacesApplicationSupporters:  "SpacesApplicationSupporters",\n    SpacesAuditors:               "SpacesAuditors",\n    SpacesDevelopers:             "SpacesDevelopers",\n    SpacesManagers:               "SpacesManagers",\n    ResourceUserAnnotations:      "ResourceUserAnnotations",\n    ResourceUserLabels:           "ResourceUserLabels",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var UserTableColumns = struct {\n    ID             string\n    GUID           string\n    CreatedAt      string\n    UpdatedAt      string\n    DefaultSpaceID string\n    Admin          string\n    Active         string\n    IsOauthClient  string\n}{\n    ID:             "users.id",\n    GUID:           "users.guid",\n    CreatedAt:      "users.created_at",\n    UpdatedAt:      "users.updated_at",\n    DefaultSpaceID: "users.default_space_id",\n    Admin:          "users.admin",\n    Active:         "users.active",\n    IsOauthClient:  "users.is_oauth_client",\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var UserWhere = struct {\n    ID             whereHelperint\n    GUID           whereHelperstring\n    CreatedAt      whereHelpertime_Time\n    UpdatedAt      whereHelpernull_Time\n    DefaultSpaceID whereHelpernull_Int\n    Admin          whereHelpernull_Bool\n    Active         whereHelpernull_Bool\n    IsOauthClient  whereHelpernull_Bool\n}{\n    ID:             whereHelperint{field: "\\"users\\".\\"id\\""},\n    GUID:           whereHelperstring{field: "\\"users\\".\\"guid\\""},\n    CreatedAt:      whereHelpertime_Time{field: "\\"users\\".\\"created_at\\""},\n    UpdatedAt:      whereHelpernull_Time{field: "\\"users\\".\\"updated_at\\""},\n    DefaultSpaceID: whereHelpernull_Int{field: "\\"users\\".\\"default_space_id\\""},\n    Admin:          whereHelpernull_Bool{field: "\\"users\\".\\"admin\\""},\n    Active:         whereHelpernull_Bool{field: "\\"users\\".\\"active\\""},\n    IsOauthClient:  whereHelpernull_Bool{field: "\\"users\\".\\"is_oauth_client\\""},\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var dialect = drivers.Dialect{\n    LQ: 0x22,\n    RQ: 0x22,\n\n    UseIndexPlaceholders:    true,\n    UseLastInsertID:         false,\n    UseSchema:               false,\n    UseDefaultKeyword:       true,\n    UseAutoColumns:          false,\n    UseTopClause:            false,\n    UseOutputClause:         false,\n    UseCaseWhenExistsClause: false,\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var subqueryDialect = drivers.Dialect{\n    LQ: 0x22,\n    RQ: 0x22,\n\n    UseIndexPlaceholders:    false,\n    UseLastInsertID:         false,\n    UseSchema:               false,\n    UseDefaultKeyword:       true,\n    UseAutoColumns:          false,\n    UseTopClause:            false,\n    UseOutputClause:         false,\n    UseCaseWhenExistsClause: false,\n}\n")),(0,o.kt)("h2",{id:"func-appannotationexists"},"func AppAnnotationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func AppAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"AppAnnotationExists checks if the AppAnnotation row exists","."),(0,o.kt)("h2",{id:"func-appeventexists"},"func AppEventExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func AppEventExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"AppEventExists checks if the AppEvent row exists","."),(0,o.kt)("h2",{id:"func-appexists"},"func AppExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func AppExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"AppExists checks if the App row exists","."),(0,o.kt)("h2",{id:"func-applabelexists"},"func AppLabelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func AppLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"AppLabelExists checks if the AppLabel row exists","."),(0,o.kt)("h2",{id:"func-appusageeventexists"},"func AppUsageEventExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func AppUsageEventExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"AppUsageEventExists checks if the AppUsageEvent row exists","."),(0,o.kt)("h2",{id:"func-buildannotationexists"},"func BuildAnnotationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func BuildAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"BuildAnnotationExists checks if the BuildAnnotation row exists","."),(0,o.kt)("h2",{id:"func-buildexists"},"func BuildExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func BuildExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"BuildExists checks if the Build row exists","."),(0,o.kt)("h2",{id:"func-buildlabelexists"},"func BuildLabelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func BuildLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"BuildLabelExists checks if the BuildLabel row exists","."),(0,o.kt)("h2",{id:"func-buildpackannotationexists"},"func BuildpackAnnotationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func BuildpackAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"BuildpackAnnotationExists checks if the BuildpackAnnotation row exists","."),(0,o.kt)("h2",{id:"func-buildpackexists"},"func BuildpackExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func BuildpackExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"BuildpackExists checks if the Buildpack row exists","."),(0,o.kt)("h2",{id:"func-buildpacklabelexists"},"func BuildpackLabelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func BuildpackLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"BuildpackLabelExists checks if the BuildpackLabel row exists","."),(0,o.kt)("h2",{id:"func-buildpacklifecyclebuildpackexists"},"func BuildpackLifecycleBuildpackExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func BuildpackLifecycleBuildpackExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"BuildpackLifecycleBuildpackExists checks if the BuildpackLifecycleBuildpack row exists","."),(0,o.kt)("h2",{id:"func-buildpacklifecycledatumexists"},"func BuildpackLifecycleDatumExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func BuildpackLifecycleDatumExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"BuildpackLifecycleDatumExists checks if the BuildpackLifecycleDatum row exists","."),(0,o.kt)("h2",{id:"func-clockjobexists"},"func ClockJobExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ClockJobExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ClockJobExists checks if the ClockJob row exists","."),(0,o.kt)("h2",{id:"func-delayedjobexists"},"func DelayedJobExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func DelayedJobExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"DelayedJobExists checks if the DelayedJob row exists","."),(0,o.kt)("h2",{id:"func-deploymentannotationexists"},"func DeploymentAnnotationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func DeploymentAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"DeploymentAnnotationExists checks if the DeploymentAnnotation row exists","."),(0,o.kt)("h2",{id:"func-deploymentexists"},"func DeploymentExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func DeploymentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"DeploymentExists checks if the Deployment row exists","."),(0,o.kt)("h2",{id:"func-deploymentlabelexists"},"func DeploymentLabelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func DeploymentLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"DeploymentLabelExists checks if the DeploymentLabel row exists","."),(0,o.kt)("h2",{id:"func-deploymentprocessexists"},"func DeploymentProcessExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func DeploymentProcessExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"DeploymentProcessExists checks if the DeploymentProcess row exists","."),(0,o.kt)("h2",{id:"func-domainannotationexists"},"func DomainAnnotationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func DomainAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"DomainAnnotationExists checks if the DomainAnnotation row exists","."),(0,o.kt)("h2",{id:"func-domainexists"},"func DomainExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func DomainExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"DomainExists checks if the Domain row exists","."),(0,o.kt)("h2",{id:"func-domainlabelexists"},"func DomainLabelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func DomainLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"DomainLabelExists checks if the DomainLabel row exists","."),(0,o.kt)("h2",{id:"func-dropletannotationexists"},"func DropletAnnotationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func DropletAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"DropletAnnotationExists checks if the DropletAnnotation row exists","."),(0,o.kt)("h2",{id:"func-dropletexists"},"func DropletExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func DropletExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"DropletExists checks if the Droplet row exists","."),(0,o.kt)("h2",{id:"func-dropletlabelexists"},"func DropletLabelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func DropletLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"DropletLabelExists checks if the DropletLabel row exists","."),(0,o.kt)("h2",{id:"func-encryptionkeysentinelexists"},"func EncryptionKeySentinelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func EncryptionKeySentinelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"EncryptionKeySentinelExists checks if the EncryptionKeySentinel row exists","."),(0,o.kt)("h2",{id:"func-envgroupexists"},"func EnvGroupExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func EnvGroupExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"EnvGroupExists checks if the EnvGroup row exists","."),(0,o.kt)("h2",{id:"func-eventexists"},"func EventExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func EventExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"EventExists checks if the Event row exists","."),(0,o.kt)("h2",{id:"func-featureflagexists"},"func FeatureFlagExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FeatureFlagExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"FeatureFlagExists checks if the FeatureFlag row exists","."),(0,o.kt)("h2",{id:"func-isolationsegmentannotationexists"},"func IsolationSegmentAnnotationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func IsolationSegmentAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"IsolationSegmentAnnotationExists checks if the IsolationSegmentAnnotation row exists","."),(0,o.kt)("h2",{id:"func-isolationsegmentexists"},"func IsolationSegmentExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func IsolationSegmentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"IsolationSegmentExists checks if the IsolationSegment row exists","."),(0,o.kt)("h2",{id:"func-isolationsegmentlabelexists"},"func IsolationSegmentLabelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func IsolationSegmentLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"IsolationSegmentLabelExists checks if the IsolationSegmentLabel row exists","."),(0,o.kt)("h2",{id:"func-jobexists"},"func JobExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func JobExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"JobExists checks if the Job row exists","."),(0,o.kt)("h2",{id:"func-jobwarningexists"},"func JobWarningExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func JobWarningExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"JobWarningExists checks if the JobWarning row exists","."),(0,o.kt)("h2",{id:"func-kpacklifecycledatumexists"},"func KpackLifecycleDatumExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func KpackLifecycleDatumExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"KpackLifecycleDatumExists checks if the KpackLifecycleDatum row exists","."),(0,o.kt)("h2",{id:"func-lockingexists"},"func LockingExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func LockingExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"LockingExists checks if the Locking row exists","."),(0,o.kt)("h2",{id:"func-newquery"},"func NewQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func NewQuery(mods ...qm.QueryMod) *queries.Query\n")),(0,o.kt)("p",null,"NewQuery initializes a new Query using the passed in QueryMods"),(0,o.kt)("h2",{id:"func-organizationannotationexists"},"func OrganizationAnnotationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func OrganizationAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"OrganizationAnnotationExists checks if the OrganizationAnnotation row exists","."),(0,o.kt)("h2",{id:"func-organizationexists"},"func OrganizationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func OrganizationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"OrganizationExists checks if the Organization row exists","."),(0,o.kt)("h2",{id:"func-organizationlabelexists"},"func OrganizationLabelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func OrganizationLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"OrganizationLabelExists checks if the OrganizationLabel row exists","."),(0,o.kt)("h2",{id:"func-organizationsauditorexists"},"func OrganizationsAuditorExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func OrganizationsAuditorExists(ctx context.Context, exec boil.ContextExecutor, organizationsAuditorsPK int) (bool, error)\n")),(0,o.kt)("p",null,"OrganizationsAuditorExists checks if the OrganizationsAuditor row exists","."),(0,o.kt)("h2",{id:"func-organizationsbillingmanagerexists"},"func OrganizationsBillingManagerExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func OrganizationsBillingManagerExists(ctx context.Context, exec boil.ContextExecutor, organizationsBillingManagersPK int) (bool, error)\n")),(0,o.kt)("p",null,"OrganizationsBillingManagerExists checks if the OrganizationsBillingManager row exists","."),(0,o.kt)("h2",{id:"func-organizationsmanagerexists"},"func OrganizationsManagerExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func OrganizationsManagerExists(ctx context.Context, exec boil.ContextExecutor, organizationsManagersPK int) (bool, error)\n")),(0,o.kt)("p",null,"OrganizationsManagerExists checks if the OrganizationsManager row exists","."),(0,o.kt)("h2",{id:"func-organizationsprivatedomainexists"},"func OrganizationsPrivateDomainExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func OrganizationsPrivateDomainExists(ctx context.Context, exec boil.ContextExecutor, organizationsPrivateDomainsPK int) (bool, error)\n")),(0,o.kt)("p",null,"OrganizationsPrivateDomainExists checks if the OrganizationsPrivateDomain row exists","."),(0,o.kt)("h2",{id:"func-organizationsuserexists"},"func OrganizationsUserExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func OrganizationsUserExists(ctx context.Context, exec boil.ContextExecutor, organizationsUsersPK int) (bool, error)\n")),(0,o.kt)("p",null,"OrganizationsUserExists checks if the OrganizationsUser row exists","."),(0,o.kt)("h2",{id:"func-orphanedblobexists"},"func OrphanedBlobExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func OrphanedBlobExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"OrphanedBlobExists checks if the OrphanedBlob row exists","."),(0,o.kt)("h2",{id:"func-packageannotationexists"},"func PackageAnnotationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func PackageAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"PackageAnnotationExists checks if the PackageAnnotation row exists","."),(0,o.kt)("h2",{id:"func-packageexists"},"func PackageExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func PackageExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"PackageExists checks if the Package row exists","."),(0,o.kt)("h2",{id:"func-packagelabelexists"},"func PackageLabelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func PackageLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"PackageLabelExists checks if the PackageLabel row exists","."),(0,o.kt)("h2",{id:"func-processannotationexists"},"func ProcessAnnotationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ProcessAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ProcessAnnotationExists checks if the ProcessAnnotation row exists","."),(0,o.kt)("h2",{id:"func-processexists"},"func ProcessExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ProcessExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ProcessExists checks if the Process row exists","."),(0,o.kt)("h2",{id:"func-processlabelexists"},"func ProcessLabelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ProcessLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ProcessLabelExists checks if the ProcessLabel row exists","."),(0,o.kt)("h2",{id:"func-quotadefinitionexists"},"func QuotaDefinitionExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func QuotaDefinitionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"QuotaDefinitionExists checks if the QuotaDefinition row exists","."),(0,o.kt)("h2",{id:"func-quote"},"func Quote"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func Quote(in string) string\n")),(0,o.kt)("p",null,"Quote places dialect specific quotes around a string ","-"," useful for building custom SQL"),(0,o.kt)("h2",{id:"func-requestcountexists"},"func RequestCountExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RequestCountExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"RequestCountExists checks if the RequestCount row exists","."),(0,o.kt)("h2",{id:"func-revisionannotationexists"},"func RevisionAnnotationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RevisionAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"RevisionAnnotationExists checks if the RevisionAnnotation row exists","."),(0,o.kt)("h2",{id:"func-revisionexists"},"func RevisionExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RevisionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"RevisionExists checks if the Revision row exists","."),(0,o.kt)("h2",{id:"func-revisionlabelexists"},"func RevisionLabelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RevisionLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"RevisionLabelExists checks if the RevisionLabel row exists","."),(0,o.kt)("h2",{id:"func-revisionprocesscommandexists"},"func RevisionProcessCommandExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RevisionProcessCommandExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"RevisionProcessCommandExists checks if the RevisionProcessCommand row exists","."),(0,o.kt)("h2",{id:"func-revisionsidecarexists"},"func RevisionSidecarExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RevisionSidecarExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"RevisionSidecarExists checks if the RevisionSidecar row exists","."),(0,o.kt)("h2",{id:"func-revisionsidecarprocesstypeexists"},"func RevisionSidecarProcessTypeExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RevisionSidecarProcessTypeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"RevisionSidecarProcessTypeExists checks if the RevisionSidecarProcessType row exists","."),(0,o.kt)("h2",{id:"func-routeannotationexists"},"func RouteAnnotationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RouteAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"RouteAnnotationExists checks if the RouteAnnotation row exists","."),(0,o.kt)("h2",{id:"func-routebindingannotationexists"},"func RouteBindingAnnotationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RouteBindingAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"RouteBindingAnnotationExists checks if the RouteBindingAnnotation row exists","."),(0,o.kt)("h2",{id:"func-routebindingexists"},"func RouteBindingExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RouteBindingExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"RouteBindingExists checks if the RouteBinding row exists","."),(0,o.kt)("h2",{id:"func-routebindinglabelexists"},"func RouteBindingLabelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RouteBindingLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"RouteBindingLabelExists checks if the RouteBindingLabel row exists","."),(0,o.kt)("h2",{id:"func-routebindingoperationexists"},"func RouteBindingOperationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RouteBindingOperationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"RouteBindingOperationExists checks if the RouteBindingOperation row exists","."),(0,o.kt)("h2",{id:"func-routeexists"},"func RouteExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RouteExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"RouteExists checks if the Route row exists","."),(0,o.kt)("h2",{id:"func-routelabelexists"},"func RouteLabelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RouteLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"RouteLabelExists checks if the RouteLabel row exists","."),(0,o.kt)("h2",{id:"func-routemappingexists"},"func RouteMappingExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RouteMappingExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"RouteMappingExists checks if the RouteMapping row exists","."),(0,o.kt)("h2",{id:"func-schemamigrationexists"},"func SchemaMigrationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func SchemaMigrationExists(ctx context.Context, exec boil.ContextExecutor, filename string) (bool, error)\n")),(0,o.kt)("p",null,"SchemaMigrationExists checks if the SchemaMigration row exists","."),(0,o.kt)("h2",{id:"func-securitygroupexists"},"func SecurityGroupExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func SecurityGroupExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"SecurityGroupExists checks if the SecurityGroup row exists","."),(0,o.kt)("h2",{id:"func-securitygroupsspaceexists"},"func SecurityGroupsSpaceExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func SecurityGroupsSpaceExists(ctx context.Context, exec boil.ContextExecutor, securityGroupsSpacesPK int) (bool, error)\n")),(0,o.kt)("p",null,"SecurityGroupsSpaceExists checks if the SecurityGroupsSpace row exists","."),(0,o.kt)("h2",{id:"func-servicebindingannotationexists"},"func ServiceBindingAnnotationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceBindingAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServiceBindingAnnotationExists checks if the ServiceBindingAnnotation row exists","."),(0,o.kt)("h2",{id:"func-servicebindingexists"},"func ServiceBindingExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceBindingExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServiceBindingExists checks if the ServiceBinding row exists","."),(0,o.kt)("h2",{id:"func-servicebindinglabelexists"},"func ServiceBindingLabelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceBindingLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServiceBindingLabelExists checks if the ServiceBindingLabel row exists","."),(0,o.kt)("h2",{id:"func-servicebindingoperationexists"},"func ServiceBindingOperationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceBindingOperationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServiceBindingOperationExists checks if the ServiceBindingOperation row exists","."),(0,o.kt)("h2",{id:"func-servicebrokerannotationexists"},"func ServiceBrokerAnnotationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceBrokerAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServiceBrokerAnnotationExists checks if the ServiceBrokerAnnotation row exists","."),(0,o.kt)("h2",{id:"func-servicebrokerexists"},"func ServiceBrokerExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceBrokerExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServiceBrokerExists checks if the ServiceBroker row exists","."),(0,o.kt)("h2",{id:"func-servicebrokerlabelexists"},"func ServiceBrokerLabelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceBrokerLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServiceBrokerLabelExists checks if the ServiceBrokerLabel row exists","."),(0,o.kt)("h2",{id:"func-servicebrokerupdaterequestannotationexists"},"func ServiceBrokerUpdateRequestAnnotationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceBrokerUpdateRequestAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServiceBrokerUpdateRequestAnnotationExists checks if the ServiceBrokerUpdateRequestAnnotation row exists","."),(0,o.kt)("h2",{id:"func-servicebrokerupdaterequestexists"},"func ServiceBrokerUpdateRequestExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceBrokerUpdateRequestExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServiceBrokerUpdateRequestExists checks if the ServiceBrokerUpdateRequest row exists","."),(0,o.kt)("h2",{id:"func-servicebrokerupdaterequestlabelexists"},"func ServiceBrokerUpdateRequestLabelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceBrokerUpdateRequestLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServiceBrokerUpdateRequestLabelExists checks if the ServiceBrokerUpdateRequestLabel row exists","."),(0,o.kt)("h2",{id:"func-servicedashboardclientexists"},"func ServiceDashboardClientExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceDashboardClientExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServiceDashboardClientExists checks if the ServiceDashboardClient row exists","."),(0,o.kt)("h2",{id:"func-serviceexists"},"func ServiceExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServiceExists checks if the Service row exists","."),(0,o.kt)("h2",{id:"func-serviceinstanceannotationexists"},"func ServiceInstanceAnnotationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceInstanceAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServiceInstanceAnnotationExists checks if the ServiceInstanceAnnotation row exists","."),(0,o.kt)("h2",{id:"func-serviceinstanceexists"},"func ServiceInstanceExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceInstanceExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServiceInstanceExists checks if the ServiceInstance row exists","."),(0,o.kt)("h2",{id:"func-serviceinstancelabelexists"},"func ServiceInstanceLabelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceInstanceLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServiceInstanceLabelExists checks if the ServiceInstanceLabel row exists","."),(0,o.kt)("h2",{id:"func-serviceinstanceoperationexists"},"func ServiceInstanceOperationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceInstanceOperationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServiceInstanceOperationExists checks if the ServiceInstanceOperation row exists","."),(0,o.kt)("h2",{id:"func-servicekeyannotationexists"},"func ServiceKeyAnnotationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceKeyAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServiceKeyAnnotationExists checks if the ServiceKeyAnnotation row exists","."),(0,o.kt)("h2",{id:"func-servicekeyexists"},"func ServiceKeyExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceKeyExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServiceKeyExists checks if the ServiceKey row exists","."),(0,o.kt)("h2",{id:"func-servicekeylabelexists"},"func ServiceKeyLabelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceKeyLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServiceKeyLabelExists checks if the ServiceKeyLabel row exists","."),(0,o.kt)("h2",{id:"func-servicekeyoperationexists"},"func ServiceKeyOperationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceKeyOperationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServiceKeyOperationExists checks if the ServiceKeyOperation row exists","."),(0,o.kt)("h2",{id:"func-serviceofferingannotationexists"},"func ServiceOfferingAnnotationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceOfferingAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServiceOfferingAnnotationExists checks if the ServiceOfferingAnnotation row exists","."),(0,o.kt)("h2",{id:"func-serviceofferinglabelexists"},"func ServiceOfferingLabelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceOfferingLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServiceOfferingLabelExists checks if the ServiceOfferingLabel row exists","."),(0,o.kt)("h2",{id:"func-serviceplanannotationexists"},"func ServicePlanAnnotationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServicePlanAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServicePlanAnnotationExists checks if the ServicePlanAnnotation row exists","."),(0,o.kt)("h2",{id:"func-serviceplanexists"},"func ServicePlanExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServicePlanExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServicePlanExists checks if the ServicePlan row exists","."),(0,o.kt)("h2",{id:"func-serviceplanlabelexists"},"func ServicePlanLabelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServicePlanLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServicePlanLabelExists checks if the ServicePlanLabel row exists","."),(0,o.kt)("h2",{id:"func-serviceplanvisibilityexists"},"func ServicePlanVisibilityExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServicePlanVisibilityExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServicePlanVisibilityExists checks if the ServicePlanVisibility row exists","."),(0,o.kt)("h2",{id:"func-serviceusageeventexists"},"func ServiceUsageEventExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceUsageEventExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"ServiceUsageEventExists checks if the ServiceUsageEvent row exists","."),(0,o.kt)("h2",{id:"func-sidecarexists"},"func SidecarExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func SidecarExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"SidecarExists checks if the Sidecar row exists","."),(0,o.kt)("h2",{id:"func-sidecarprocesstypeexists"},"func SidecarProcessTypeExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func SidecarProcessTypeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"SidecarProcessTypeExists checks if the SidecarProcessType row exists","."),(0,o.kt)("h2",{id:"func-spaceannotationexists"},"func SpaceAnnotationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func SpaceAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"SpaceAnnotationExists checks if the SpaceAnnotation row exists","."),(0,o.kt)("h2",{id:"func-spaceexists"},"func SpaceExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func SpaceExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"SpaceExists checks if the Space row exists","."),(0,o.kt)("h2",{id:"func-spacelabelexists"},"func SpaceLabelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func SpaceLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"SpaceLabelExists checks if the SpaceLabel row exists","."),(0,o.kt)("h2",{id:"func-spacequotadefinitionexists"},"func SpaceQuotaDefinitionExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func SpaceQuotaDefinitionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"SpaceQuotaDefinitionExists checks if the SpaceQuotaDefinition row exists","."),(0,o.kt)("h2",{id:"func-spacesapplicationsupporterexists"},"func SpacesApplicationSupporterExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func SpacesApplicationSupporterExists(ctx context.Context, exec boil.ContextExecutor, spacesApplicationSupportersPK int) (bool, error)\n")),(0,o.kt)("p",null,"SpacesApplicationSupporterExists checks if the SpacesApplicationSupporter row exists","."),(0,o.kt)("h2",{id:"func-spacesauditorexists"},"func SpacesAuditorExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func SpacesAuditorExists(ctx context.Context, exec boil.ContextExecutor, spacesAuditorsPK int) (bool, error)\n")),(0,o.kt)("p",null,"SpacesAuditorExists checks if the SpacesAuditor row exists","."),(0,o.kt)("h2",{id:"func-spacesdeveloperexists"},"func SpacesDeveloperExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func SpacesDeveloperExists(ctx context.Context, exec boil.ContextExecutor, spacesDevelopersPK int) (bool, error)\n")),(0,o.kt)("p",null,"SpacesDeveloperExists checks if the SpacesDeveloper row exists","."),(0,o.kt)("h2",{id:"func-spacesmanagerexists"},"func SpacesManagerExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func SpacesManagerExists(ctx context.Context, exec boil.ContextExecutor, spacesManagersPK int) (bool, error)\n")),(0,o.kt)("p",null,"SpacesManagerExists checks if the SpacesManager row exists","."),(0,o.kt)("h2",{id:"func-stackannotationexists"},"func StackAnnotationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func StackAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"StackAnnotationExists checks if the StackAnnotation row exists","."),(0,o.kt)("h2",{id:"func-stackexists"},"func StackExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func StackExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"StackExists checks if the Stack row exists","."),(0,o.kt)("h2",{id:"func-stacklabelexists"},"func StackLabelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func StackLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"StackLabelExists checks if the StackLabel row exists","."),(0,o.kt)("h2",{id:"func-stagingsecuritygroupsspaceexists"},"func StagingSecurityGroupsSpaceExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func StagingSecurityGroupsSpaceExists(ctx context.Context, exec boil.ContextExecutor, stagingSecurityGroupsSpacesPK int) (bool, error)\n")),(0,o.kt)("p",null,"StagingSecurityGroupsSpaceExists checks if the StagingSecurityGroupsSpace row exists","."),(0,o.kt)("h2",{id:"func-taskannotationexists"},"func TaskAnnotationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func TaskAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"TaskAnnotationExists checks if the TaskAnnotation row exists","."),(0,o.kt)("h2",{id:"func-taskexists"},"func TaskExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func TaskExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"TaskExists checks if the Task row exists","."),(0,o.kt)("h2",{id:"func-tasklabelexists"},"func TaskLabelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func TaskLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"TaskLabelExists checks if the TaskLabel row exists","."),(0,o.kt)("h2",{id:"func-userannotationexists"},"func UserAnnotationExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func UserAnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"UserAnnotationExists checks if the UserAnnotation row exists","."),(0,o.kt)("h2",{id:"func-userexists"},"func UserExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func UserExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"UserExists checks if the User row exists","."),(0,o.kt)("h2",{id:"func-userlabelexists"},"func UserLabelExists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func UserLabelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error)\n")),(0,o.kt)("p",null,"UserLabelExists checks if the UserLabel row exists","."),(0,o.kt)("h2",{id:"func-buildupsertquerypostgres"},"func buildUpsertQueryPostgres"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func buildUpsertQueryPostgres(dia drivers.Dialect, tableName string, updateOnConflict bool, ret, update, conflict, whitelist []string) string\n")),(0,o.kt)("p",null,"buildUpsertQueryPostgres builds a SQL statement string using the upsertData provided","."),(0,o.kt)("h2",{id:"func-makecachekey"},"func makeCacheKey"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func makeCacheKey(cols boil.Columns, nzDefaults []string) string\n")),(0,o.kt)("h2",{id:"func-removeisolationsegmentsfromorganizationsslice"},"func removeIsolationSegmentsFromOrganizationsSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func removeIsolationSegmentsFromOrganizationsSlice(o *Organization, related []*IsolationSegment)\n")),(0,o.kt)("h2",{id:"func-removeorganizationsfromisolationsegmentsslice"},"func removeOrganizationsFromIsolationSegmentsSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func removeOrganizationsFromIsolationSegmentsSlice(o *IsolationSegment, related []*Organization)\n")),(0,o.kt)("h2",{id:"func-removesharedserviceinstancesfromspacesslice"},"func removeSharedServiceInstancesFromSpacesSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func removeSharedServiceInstancesFromSpacesSlice(o *Space, related []*ServiceInstance)\n")),(0,o.kt)("h2",{id:"func-removespacesfromsharedserviceinstancesslice"},"func removeSpacesFromSharedServiceInstancesSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func removeSpacesFromSharedServiceInstancesSlice(o *ServiceInstance, related []*Space)\n")),(0,o.kt)("h2",{id:"type-app"},"type App"),(0,o.kt)("p",null,"App is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type App struct {\n    ID                            int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                          string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt                     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt                     null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    SpaceGUID                     null.String `boil:"space_guid" json:"space_guid,omitempty" toml:"space_guid" yaml:"space_guid,omitempty"`\n    Name                          null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`\n    DropletGUID                   null.String `boil:"droplet_guid" json:"droplet_guid,omitempty" toml:"droplet_guid" yaml:"droplet_guid,omitempty"`\n    DesiredState                  null.String `boil:"desired_state" json:"desired_state,omitempty" toml:"desired_state" yaml:"desired_state,omitempty"`\n    EncryptedEnvironmentVariables null.String `boil:"encrypted_environment_variables" json:"encrypted_environment_variables,omitempty" toml:"encrypted_environment_variables" yaml:"encrypted_environment_variables,omitempty"`\n    Salt                          null.String `boil:"salt" json:"salt,omitempty" toml:"salt" yaml:"salt,omitempty"`\n    MaxTaskSequenceID             null.Int    `boil:"max_task_sequence_id" json:"max_task_sequence_id,omitempty" toml:"max_task_sequence_id" yaml:"max_task_sequence_id,omitempty"`\n    BuildpackCacheSha256Checksum  null.String `boil:"buildpack_cache_sha256_checksum" json:"buildpack_cache_sha256_checksum,omitempty" toml:"buildpack_cache_sha256_checksum" yaml:"buildpack_cache_sha256_checksum,omitempty"`\n    EnableSSH                     null.Bool   `boil:"enable_ssh" json:"enable_ssh,omitempty" toml:"enable_ssh" yaml:"enable_ssh,omitempty"`\n    EncryptionKeyLabel            null.String `boil:"encryption_key_label" json:"encryption_key_label,omitempty" toml:"encryption_key_label" yaml:"encryption_key_label,omitempty"`\n    EncryptionIterations          int         `boil:"encryption_iterations" json:"encryption_iterations" toml:"encryption_iterations" yaml:"encryption_iterations"`\n    RevisionsEnabled              null.Bool   `boil:"revisions_enabled" json:"revisions_enabled,omitempty" toml:"revisions_enabled" yaml:"revisions_enabled,omitempty"`\n\n    R   *appR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   appL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findapp"},"func FindApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindApp(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*App, error)\n")),(0,o.kt)("p",null,"FindApp retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-appannotation"},"type AppAnnotation"),(0,o.kt)("p",null,"AppAnnotation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type AppAnnotation struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    Key          null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *appAnnotationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   appAnnotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findappannotation"},"func FindAppAnnotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindAppAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AppAnnotation, error)\n")),(0,o.kt)("p",null,"FindAppAnnotation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-appannotationdeleter"},"type AppAnnotationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppAnnotationDeleter interface {\n    Delete(o *AppAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o AppAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-appannotationfinder"},"type AppAnnotationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppAnnotationFinder interface {\n    FindAppAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AppAnnotation, error)\n}\n")),(0,o.kt)("h2",{id:"type-appannotationfinisher"},"type AppAnnotationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppAnnotationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*AppAnnotation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (AppAnnotationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-appannotationinserter"},"type AppAnnotationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppAnnotationInserter interface {\n    Insert(o *AppAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-appannotationreloader"},"type AppAnnotationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppAnnotationReloader interface {\n    Reload(o *AppAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *AppAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-appannotationslice"},"type AppAnnotationSlice"),(0,o.kt)("p",null,"AppAnnotationSlice is an alias for a slice of pointers to AppAnnotation","."," This should almost always be used instead of ","[","]","AppAnnotation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppAnnotationSlice []*AppAnnotation\n")),(0,o.kt)("h2",{id:"type-appannotationupdater"},"type AppAnnotationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppAnnotationUpdater interface {\n    Update(o *AppAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o AppAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-appannotationupserter"},"type AppAnnotationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppAnnotationUpserter interface {\n    Upsert(o *AppAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-appdeleter"},"type AppDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppDeleter interface {\n    Delete(o *App, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o AppSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-appevent"},"type AppEvent"),(0,o.kt)("p",null,"AppEvent is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type AppEvent struct {\n    ID              int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID            string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt       time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt       null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    AppID           int         `boil:"app_id" json:"app_id" toml:"app_id" yaml:"app_id"`\n    InstanceGUID    string      `boil:"instance_guid" json:"instance_guid" toml:"instance_guid" yaml:"instance_guid"`\n    InstanceIndex   int         `boil:"instance_index" json:"instance_index" toml:"instance_index" yaml:"instance_index"`\n    ExitStatus      int         `boil:"exit_status" json:"exit_status" toml:"exit_status" yaml:"exit_status"`\n    Timestamp       time.Time   `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`\n    ExitDescription null.String `boil:"exit_description" json:"exit_description,omitempty" toml:"exit_description" yaml:"exit_description,omitempty"`\n\n    R   *appEventR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   appEventL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findappevent"},"func FindAppEvent"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindAppEvent(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AppEvent, error)\n")),(0,o.kt)("p",null,"FindAppEvent retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-appeventdeleter"},"type AppEventDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppEventDeleter interface {\n    Delete(o *AppEvent, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o AppEventSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-appeventfinder"},"type AppEventFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppEventFinder interface {\n    FindAppEvent(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AppEvent, error)\n}\n")),(0,o.kt)("h2",{id:"type-appeventfinisher"},"type AppEventFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppEventFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*AppEvent, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (AppEventSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-appeventinserter"},"type AppEventInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppEventInserter interface {\n    Insert(o *AppEvent, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-appeventreloader"},"type AppEventReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppEventReloader interface {\n    Reload(o *AppEvent, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *AppEventSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-appeventslice"},"type AppEventSlice"),(0,o.kt)("p",null,"AppEventSlice is an alias for a slice of pointers to AppEvent","."," This should almost always be used instead of ","[","]","AppEvent","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppEventSlice []*AppEvent\n")),(0,o.kt)("h2",{id:"type-appeventupdater"},"type AppEventUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppEventUpdater interface {\n    Update(o *AppEvent, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o AppEventSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-appeventupserter"},"type AppEventUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppEventUpserter interface {\n    Upsert(o *AppEvent, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-appfinder"},"type AppFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppFinder interface {\n    FindApp(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*App, error)\n}\n")),(0,o.kt)("h2",{id:"type-appfinisher"},"type AppFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*App, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (AppSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-appinserter"},"type AppInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppInserter interface {\n    Insert(o *App, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-applabel"},"type AppLabel"),(0,o.kt)("p",null,"AppLabel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type AppLabel struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    KeyName      null.String `boil:"key_name" json:"key_name,omitempty" toml:"key_name" yaml:"key_name,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *appLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   appLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findapplabel"},"func FindAppLabel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindAppLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AppLabel, error)\n")),(0,o.kt)("p",null,"FindAppLabel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-applabeldeleter"},"type AppLabelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppLabelDeleter interface {\n    Delete(o *AppLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o AppLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-applabelfinder"},"type AppLabelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppLabelFinder interface {\n    FindAppLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AppLabel, error)\n}\n")),(0,o.kt)("h2",{id:"type-applabelfinisher"},"type AppLabelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppLabelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*AppLabel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (AppLabelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-applabelinserter"},"type AppLabelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppLabelInserter interface {\n    Insert(o *AppLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-applabelreloader"},"type AppLabelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppLabelReloader interface {\n    Reload(o *AppLabel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *AppLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-applabelslice"},"type AppLabelSlice"),(0,o.kt)("p",null,"AppLabelSlice is an alias for a slice of pointers to AppLabel","."," This should almost always be used instead of ","[","]","AppLabel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppLabelSlice []*AppLabel\n")),(0,o.kt)("h2",{id:"type-applabelupdater"},"type AppLabelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppLabelUpdater interface {\n    Update(o *AppLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o AppLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-applabelupserter"},"type AppLabelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppLabelUpserter interface {\n    Upsert(o *AppLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-appreloader"},"type AppReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppReloader interface {\n    Reload(o *App, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *AppSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-appslice"},"type AppSlice"),(0,o.kt)("p",null,"AppSlice is an alias for a slice of pointers to App","."," This should almost always be used instead of ","[","]","App","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppSlice []*App\n")),(0,o.kt)("h2",{id:"type-appupdater"},"type AppUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppUpdater interface {\n    Update(o *App, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o AppSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-appupserter"},"type AppUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppUpserter interface {\n    Upsert(o *App, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-appusageevent"},"type AppUsageEvent"),(0,o.kt)("p",null,"AppUsageEvent is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type AppUsageEvent struct {\n    ID                            int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                          string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt                     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    InstanceCount                 int         `boil:"instance_count" json:"instance_count" toml:"instance_count" yaml:"instance_count"`\n    MemoryInMBPerInstance         int         `boil:"memory_in_mb_per_instance" json:"memory_in_mb_per_instance" toml:"memory_in_mb_per_instance" yaml:"memory_in_mb_per_instance"`\n    State                         string      `boil:"state" json:"state" toml:"state" yaml:"state"`\n    AppGUID                       string      `boil:"app_guid" json:"app_guid" toml:"app_guid" yaml:"app_guid"`\n    AppName                       string      `boil:"app_name" json:"app_name" toml:"app_name" yaml:"app_name"`\n    SpaceGUID                     string      `boil:"space_guid" json:"space_guid" toml:"space_guid" yaml:"space_guid"`\n    SpaceName                     string      `boil:"space_name" json:"space_name" toml:"space_name" yaml:"space_name"`\n    OrgGUID                       string      `boil:"org_guid" json:"org_guid" toml:"org_guid" yaml:"org_guid"`\n    BuildpackGUID                 null.String `boil:"buildpack_guid" json:"buildpack_guid,omitempty" toml:"buildpack_guid" yaml:"buildpack_guid,omitempty"`\n    BuildpackName                 null.String `boil:"buildpack_name" json:"buildpack_name,omitempty" toml:"buildpack_name" yaml:"buildpack_name,omitempty"`\n    PackageState                  null.String `boil:"package_state" json:"package_state,omitempty" toml:"package_state" yaml:"package_state,omitempty"`\n    ParentAppName                 null.String `boil:"parent_app_name" json:"parent_app_name,omitempty" toml:"parent_app_name" yaml:"parent_app_name,omitempty"`\n    ParentAppGUID                 null.String `boil:"parent_app_guid" json:"parent_app_guid,omitempty" toml:"parent_app_guid" yaml:"parent_app_guid,omitempty"`\n    ProcessType                   null.String `boil:"process_type" json:"process_type,omitempty" toml:"process_type" yaml:"process_type,omitempty"`\n    TaskGUID                      null.String `boil:"task_guid" json:"task_guid,omitempty" toml:"task_guid" yaml:"task_guid,omitempty"`\n    TaskName                      null.String `boil:"task_name" json:"task_name,omitempty" toml:"task_name" yaml:"task_name,omitempty"`\n    PackageGUID                   null.String `boil:"package_guid" json:"package_guid,omitempty" toml:"package_guid" yaml:"package_guid,omitempty"`\n    PreviousState                 null.String `boil:"previous_state" json:"previous_state,omitempty" toml:"previous_state" yaml:"previous_state,omitempty"`\n    PreviousPackageState          null.String `boil:"previous_package_state" json:"previous_package_state,omitempty" toml:"previous_package_state" yaml:"previous_package_state,omitempty"`\n    PreviousMemoryInMBPerInstance null.Int    `boil:"previous_memory_in_mb_per_instance" json:"previous_memory_in_mb_per_instance,omitempty" toml:"previous_memory_in_mb_per_instance" yaml:"previous_memory_in_mb_per_instance,omitempty"`\n    PreviousInstanceCount         null.Int    `boil:"previous_instance_count" json:"previous_instance_count,omitempty" toml:"previous_instance_count" yaml:"previous_instance_count,omitempty"`\n\n    R   *appUsageEventR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   appUsageEventL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findappusageevent"},"func FindAppUsageEvent"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindAppUsageEvent(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AppUsageEvent, error)\n")),(0,o.kt)("p",null,"FindAppUsageEvent retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-appusageeventdeleter"},"type AppUsageEventDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppUsageEventDeleter interface {\n    Delete(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o AppUsageEventSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-appusageeventfinder"},"type AppUsageEventFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppUsageEventFinder interface {\n    FindAppUsageEvent(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AppUsageEvent, error)\n}\n")),(0,o.kt)("h2",{id:"type-appusageeventfinisher"},"type AppUsageEventFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppUsageEventFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*AppUsageEvent, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (AppUsageEventSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-appusageeventinserter"},"type AppUsageEventInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppUsageEventInserter interface {\n    Insert(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-appusageeventreloader"},"type AppUsageEventReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppUsageEventReloader interface {\n    Reload(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *AppUsageEventSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-appusageeventslice"},"type AppUsageEventSlice"),(0,o.kt)("p",null,"AppUsageEventSlice is an alias for a slice of pointers to AppUsageEvent","."," This should almost always be used instead of ","[","]","AppUsageEvent","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppUsageEventSlice []*AppUsageEvent\n")),(0,o.kt)("h2",{id:"type-appusageeventupdater"},"type AppUsageEventUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppUsageEventUpdater interface {\n    Update(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o AppUsageEventSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-appusageeventupserter"},"type AppUsageEventUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AppUsageEventUpserter interface {\n    Upsert(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-build"},"type Build"),(0,o.kt)("p",null,"Build is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type Build struct {\n    ID                 int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID               string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt          time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt          null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    State              null.String `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`\n    PackageGUID        null.String `boil:"package_guid" json:"package_guid,omitempty" toml:"package_guid" yaml:"package_guid,omitempty"`\n    ErrorDescription   null.String `boil:"error_description" json:"error_description,omitempty" toml:"error_description" yaml:"error_description,omitempty"`\n    AppGUID            null.String `boil:"app_guid" json:"app_guid,omitempty" toml:"app_guid" yaml:"app_guid,omitempty"`\n    ErrorID            null.String `boil:"error_id" json:"error_id,omitempty" toml:"error_id" yaml:"error_id,omitempty"`\n    CreatedByUserGUID  null.String `boil:"created_by_user_guid" json:"created_by_user_guid,omitempty" toml:"created_by_user_guid" yaml:"created_by_user_guid,omitempty"`\n    CreatedByUserName  null.String `boil:"created_by_user_name" json:"created_by_user_name,omitempty" toml:"created_by_user_name" yaml:"created_by_user_name,omitempty"`\n    CreatedByUserEmail null.String `boil:"created_by_user_email" json:"created_by_user_email,omitempty" toml:"created_by_user_email" yaml:"created_by_user_email,omitempty"`\n    StagingMemoryInMB  null.Int    `boil:"staging_memory_in_mb" json:"staging_memory_in_mb,omitempty" toml:"staging_memory_in_mb" yaml:"staging_memory_in_mb,omitempty"`\n    StagingDiskInMB    null.Int    `boil:"staging_disk_in_mb" json:"staging_disk_in_mb,omitempty" toml:"staging_disk_in_mb" yaml:"staging_disk_in_mb,omitempty"`\n\n    R   *buildR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   buildL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findbuild"},"func FindBuild"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindBuild(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Build, error)\n")),(0,o.kt)("p",null,"FindBuild retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-buildannotation"},"type BuildAnnotation"),(0,o.kt)("p",null,"BuildAnnotation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type BuildAnnotation struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    Key          null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *buildAnnotationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   buildAnnotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findbuildannotation"},"func FindBuildAnnotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindBuildAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BuildAnnotation, error)\n")),(0,o.kt)("p",null,"FindBuildAnnotation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-buildannotationdeleter"},"type BuildAnnotationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildAnnotationDeleter interface {\n    Delete(o *BuildAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o BuildAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildannotationfinder"},"type BuildAnnotationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildAnnotationFinder interface {\n    FindBuildAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BuildAnnotation, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildannotationfinisher"},"type BuildAnnotationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildAnnotationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*BuildAnnotation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (BuildAnnotationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildannotationinserter"},"type BuildAnnotationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildAnnotationInserter interface {\n    Insert(o *BuildAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-buildannotationreloader"},"type BuildAnnotationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildAnnotationReloader interface {\n    Reload(o *BuildAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *BuildAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-buildannotationslice"},"type BuildAnnotationSlice"),(0,o.kt)("p",null,"BuildAnnotationSlice is an alias for a slice of pointers to BuildAnnotation","."," This should almost always be used instead of ","[","]","BuildAnnotation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildAnnotationSlice []*BuildAnnotation\n")),(0,o.kt)("h2",{id:"type-buildannotationupdater"},"type BuildAnnotationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildAnnotationUpdater interface {\n    Update(o *BuildAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o BuildAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildannotationupserter"},"type BuildAnnotationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildAnnotationUpserter interface {\n    Upsert(o *BuildAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-builddeleter"},"type BuildDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildDeleter interface {\n    Delete(o *Build, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o BuildSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildfinder"},"type BuildFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildFinder interface {\n    FindBuild(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Build, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildfinisher"},"type BuildFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*Build, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (BuildSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildinserter"},"type BuildInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildInserter interface {\n    Insert(o *Build, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-buildlabel"},"type BuildLabel"),(0,o.kt)("p",null,"BuildLabel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type BuildLabel struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    KeyName      null.String `boil:"key_name" json:"key_name,omitempty" toml:"key_name" yaml:"key_name,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *buildLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   buildLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findbuildlabel"},"func FindBuildLabel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindBuildLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BuildLabel, error)\n")),(0,o.kt)("p",null,"FindBuildLabel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-buildlabeldeleter"},"type BuildLabelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildLabelDeleter interface {\n    Delete(o *BuildLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o BuildLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildlabelfinder"},"type BuildLabelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildLabelFinder interface {\n    FindBuildLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BuildLabel, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildlabelfinisher"},"type BuildLabelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildLabelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*BuildLabel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (BuildLabelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildlabelinserter"},"type BuildLabelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildLabelInserter interface {\n    Insert(o *BuildLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-buildlabelreloader"},"type BuildLabelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildLabelReloader interface {\n    Reload(o *BuildLabel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *BuildLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-buildlabelslice"},"type BuildLabelSlice"),(0,o.kt)("p",null,"BuildLabelSlice is an alias for a slice of pointers to BuildLabel","."," This should almost always be used instead of ","[","]","BuildLabel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildLabelSlice []*BuildLabel\n")),(0,o.kt)("h2",{id:"type-buildlabelupdater"},"type BuildLabelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildLabelUpdater interface {\n    Update(o *BuildLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o BuildLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildlabelupserter"},"type BuildLabelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildLabelUpserter interface {\n    Upsert(o *BuildLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-buildreloader"},"type BuildReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildReloader interface {\n    Reload(o *Build, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *BuildSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-buildslice"},"type BuildSlice"),(0,o.kt)("p",null,"BuildSlice is an alias for a slice of pointers to Build","."," This should almost always be used instead of ","[","]","Build","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildSlice []*Build\n")),(0,o.kt)("h2",{id:"type-buildupdater"},"type BuildUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildUpdater interface {\n    Update(o *Build, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o BuildSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildupserter"},"type BuildUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildUpserter interface {\n    Upsert(o *Build, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-buildpack"},"type Buildpack"),(0,o.kt)("p",null,"Buildpack is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type Buildpack struct {\n    ID             int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID           string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt      null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Name           string      `boil:"name" json:"name" toml:"name" yaml:"name"`\n    Key            null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Position       int         `boil:"position" json:"position" toml:"position" yaml:"position"`\n    Enabled        null.Bool   `boil:"enabled" json:"enabled,omitempty" toml:"enabled" yaml:"enabled,omitempty"`\n    Locked         null.Bool   `boil:"locked" json:"locked,omitempty" toml:"locked" yaml:"locked,omitempty"`\n    Filename       null.String `boil:"filename" json:"filename,omitempty" toml:"filename" yaml:"filename,omitempty"`\n    Sha256Checksum null.String `boil:"sha256_checksum" json:"sha256_checksum,omitempty" toml:"sha256_checksum" yaml:"sha256_checksum,omitempty"`\n    Stack          null.String `boil:"stack" json:"stack,omitempty" toml:"stack" yaml:"stack,omitempty"`\n\n    R   *buildpackR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   buildpackL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findbuildpack"},"func FindBuildpack"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindBuildpack(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Buildpack, error)\n")),(0,o.kt)("p",null,"FindBuildpack retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-buildpackannotation"},"type BuildpackAnnotation"),(0,o.kt)("p",null,"BuildpackAnnotation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type BuildpackAnnotation struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    Key          null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *buildpackAnnotationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   buildpackAnnotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findbuildpackannotation"},"func FindBuildpackAnnotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindBuildpackAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BuildpackAnnotation, error)\n")),(0,o.kt)("p",null,"FindBuildpackAnnotation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-buildpackannotationdeleter"},"type BuildpackAnnotationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackAnnotationDeleter interface {\n    Delete(o *BuildpackAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o BuildpackAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildpackannotationfinder"},"type BuildpackAnnotationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackAnnotationFinder interface {\n    FindBuildpackAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BuildpackAnnotation, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildpackannotationfinisher"},"type BuildpackAnnotationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackAnnotationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*BuildpackAnnotation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (BuildpackAnnotationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildpackannotationinserter"},"type BuildpackAnnotationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackAnnotationInserter interface {\n    Insert(o *BuildpackAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-buildpackannotationreloader"},"type BuildpackAnnotationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackAnnotationReloader interface {\n    Reload(o *BuildpackAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *BuildpackAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-buildpackannotationslice"},"type BuildpackAnnotationSlice"),(0,o.kt)("p",null,"BuildpackAnnotationSlice is an alias for a slice of pointers to BuildpackAnnotation","."," This should almost always be used instead of ","[","]","BuildpackAnnotation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackAnnotationSlice []*BuildpackAnnotation\n")),(0,o.kt)("h2",{id:"type-buildpackannotationupdater"},"type BuildpackAnnotationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackAnnotationUpdater interface {\n    Update(o *BuildpackAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o BuildpackAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildpackannotationupserter"},"type BuildpackAnnotationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackAnnotationUpserter interface {\n    Upsert(o *BuildpackAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-buildpackdeleter"},"type BuildpackDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackDeleter interface {\n    Delete(o *Buildpack, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o BuildpackSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildpackfinder"},"type BuildpackFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackFinder interface {\n    FindBuildpack(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Buildpack, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildpackfinisher"},"type BuildpackFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*Buildpack, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (BuildpackSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildpackinserter"},"type BuildpackInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackInserter interface {\n    Insert(o *Buildpack, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-buildpacklabel"},"type BuildpackLabel"),(0,o.kt)("p",null,"BuildpackLabel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type BuildpackLabel struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    KeyName      null.String `boil:"key_name" json:"key_name,omitempty" toml:"key_name" yaml:"key_name,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *buildpackLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   buildpackLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findbuildpacklabel"},"func FindBuildpackLabel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindBuildpackLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BuildpackLabel, error)\n")),(0,o.kt)("p",null,"FindBuildpackLabel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-buildpacklabeldeleter"},"type BuildpackLabelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackLabelDeleter interface {\n    Delete(o *BuildpackLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o BuildpackLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildpacklabelfinder"},"type BuildpackLabelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackLabelFinder interface {\n    FindBuildpackLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BuildpackLabel, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildpacklabelfinisher"},"type BuildpackLabelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackLabelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*BuildpackLabel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (BuildpackLabelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildpacklabelinserter"},"type BuildpackLabelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackLabelInserter interface {\n    Insert(o *BuildpackLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-buildpacklabelreloader"},"type BuildpackLabelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackLabelReloader interface {\n    Reload(o *BuildpackLabel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *BuildpackLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-buildpacklabelslice"},"type BuildpackLabelSlice"),(0,o.kt)("p",null,"BuildpackLabelSlice is an alias for a slice of pointers to BuildpackLabel","."," This should almost always be used instead of ","[","]","BuildpackLabel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackLabelSlice []*BuildpackLabel\n")),(0,o.kt)("h2",{id:"type-buildpacklabelupdater"},"type BuildpackLabelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackLabelUpdater interface {\n    Update(o *BuildpackLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o BuildpackLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildpacklabelupserter"},"type BuildpackLabelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackLabelUpserter interface {\n    Upsert(o *BuildpackLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-buildpacklifecyclebuildpack"},"type BuildpackLifecycleBuildpack"),(0,o.kt)("p",null,"BuildpackLifecycleBuildpack is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type BuildpackLifecycleBuildpack struct {\n    ID                         int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                       string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt                  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt                  null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    AdminBuildpackName         null.String `boil:"admin_buildpack_name" json:"admin_buildpack_name,omitempty" toml:"admin_buildpack_name" yaml:"admin_buildpack_name,omitempty"`\n    EncryptedBuildpackURL      null.String `boil:"encrypted_buildpack_url" json:"encrypted_buildpack_url,omitempty" toml:"encrypted_buildpack_url" yaml:"encrypted_buildpack_url,omitempty"`\n    EncryptedBuildpackURLSalt  null.String `boil:"encrypted_buildpack_url_salt" json:"encrypted_buildpack_url_salt,omitempty" toml:"encrypted_buildpack_url_salt" yaml:"encrypted_buildpack_url_salt,omitempty"`\n    BuildpackLifecycleDataGUID null.String `boil:"buildpack_lifecycle_data_guid" json:"buildpack_lifecycle_data_guid,omitempty" toml:"buildpack_lifecycle_data_guid" yaml:"buildpack_lifecycle_data_guid,omitempty"`\n    EncryptionKeyLabel         null.String `boil:"encryption_key_label" json:"encryption_key_label,omitempty" toml:"encryption_key_label" yaml:"encryption_key_label,omitempty"`\n    Version                    null.String `boil:"version" json:"version,omitempty" toml:"version" yaml:"version,omitempty"`\n    BuildpackName              null.String `boil:"buildpack_name" json:"buildpack_name,omitempty" toml:"buildpack_name" yaml:"buildpack_name,omitempty"`\n    EncryptionIterations       int         `boil:"encryption_iterations" json:"encryption_iterations" toml:"encryption_iterations" yaml:"encryption_iterations"`\n\n    R   *buildpackLifecycleBuildpackR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   buildpackLifecycleBuildpackL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findbuildpacklifecyclebuildpack"},"func FindBuildpackLifecycleBuildpack"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindBuildpackLifecycleBuildpack(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BuildpackLifecycleBuildpack, error)\n")),(0,o.kt)("p",null,"FindBuildpackLifecycleBuildpack retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-buildpacklifecyclebuildpackdeleter"},"type BuildpackLifecycleBuildpackDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackLifecycleBuildpackDeleter interface {\n    Delete(o *BuildpackLifecycleBuildpack, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o BuildpackLifecycleBuildpackSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildpacklifecyclebuildpackfinder"},"type BuildpackLifecycleBuildpackFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackLifecycleBuildpackFinder interface {\n    FindBuildpackLifecycleBuildpack(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BuildpackLifecycleBuildpack, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildpacklifecyclebuildpackfinisher"},"type BuildpackLifecycleBuildpackFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackLifecycleBuildpackFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*BuildpackLifecycleBuildpack, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (BuildpackLifecycleBuildpackSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildpacklifecyclebuildpackinserter"},"type BuildpackLifecycleBuildpackInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackLifecycleBuildpackInserter interface {\n    Insert(o *BuildpackLifecycleBuildpack, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-buildpacklifecyclebuildpackreloader"},"type BuildpackLifecycleBuildpackReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackLifecycleBuildpackReloader interface {\n    Reload(o *BuildpackLifecycleBuildpack, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *BuildpackLifecycleBuildpackSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-buildpacklifecyclebuildpackslice"},"type BuildpackLifecycleBuildpackSlice"),(0,o.kt)("p",null,"BuildpackLifecycleBuildpackSlice is an alias for a slice of pointers to BuildpackLifecycleBuildpack","."," This should almost always be used instead of ","[","]","BuildpackLifecycleBuildpack","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackLifecycleBuildpackSlice []*BuildpackLifecycleBuildpack\n")),(0,o.kt)("h2",{id:"type-buildpacklifecyclebuildpackupdater"},"type BuildpackLifecycleBuildpackUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackLifecycleBuildpackUpdater interface {\n    Update(o *BuildpackLifecycleBuildpack, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o BuildpackLifecycleBuildpackSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildpacklifecyclebuildpackupserter"},"type BuildpackLifecycleBuildpackUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackLifecycleBuildpackUpserter interface {\n    Upsert(o *BuildpackLifecycleBuildpack, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-buildpacklifecycledatum"},"type BuildpackLifecycleDatum"),(0,o.kt)("p",null,"BuildpackLifecycleDatum is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type BuildpackLifecycleDatum struct {\n    ID                        int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                      string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt                 time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt                 null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    AppGUID                   null.String `boil:"app_guid" json:"app_guid,omitempty" toml:"app_guid" yaml:"app_guid,omitempty"`\n    DropletGUID               null.String `boil:"droplet_guid" json:"droplet_guid,omitempty" toml:"droplet_guid" yaml:"droplet_guid,omitempty"`\n    Stack                     null.String `boil:"stack" json:"stack,omitempty" toml:"stack" yaml:"stack,omitempty"`\n    EncryptedBuildpackURL     null.String `boil:"encrypted_buildpack_url" json:"encrypted_buildpack_url,omitempty" toml:"encrypted_buildpack_url" yaml:"encrypted_buildpack_url,omitempty"`\n    EncryptedBuildpackURLSalt null.String `boil:"encrypted_buildpack_url_salt" json:"encrypted_buildpack_url_salt,omitempty" toml:"encrypted_buildpack_url_salt" yaml:"encrypted_buildpack_url_salt,omitempty"`\n    AdminBuildpackName        null.String `boil:"admin_buildpack_name" json:"admin_buildpack_name,omitempty" toml:"admin_buildpack_name" yaml:"admin_buildpack_name,omitempty"`\n    BuildGUID                 null.String `boil:"build_guid" json:"build_guid,omitempty" toml:"build_guid" yaml:"build_guid,omitempty"`\n    EncryptionKeyLabel        null.String `boil:"encryption_key_label" json:"encryption_key_label,omitempty" toml:"encryption_key_label" yaml:"encryption_key_label,omitempty"`\n    EncryptionIterations      int         `boil:"encryption_iterations" json:"encryption_iterations" toml:"encryption_iterations" yaml:"encryption_iterations"`\n\n    R   *buildpackLifecycleDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   buildpackLifecycleDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findbuildpacklifecycledatum"},"func FindBuildpackLifecycleDatum"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindBuildpackLifecycleDatum(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BuildpackLifecycleDatum, error)\n")),(0,o.kt)("p",null,"FindBuildpackLifecycleDatum retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-buildpacklifecycledatumdeleter"},"type BuildpackLifecycleDatumDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackLifecycleDatumDeleter interface {\n    Delete(o *BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o BuildpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildpacklifecycledatumfinder"},"type BuildpackLifecycleDatumFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackLifecycleDatumFinder interface {\n    FindBuildpackLifecycleDatum(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BuildpackLifecycleDatum, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildpacklifecycledatumfinisher"},"type BuildpackLifecycleDatumFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackLifecycleDatumFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*BuildpackLifecycleDatum, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (BuildpackLifecycleDatumSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildpacklifecycledatuminserter"},"type BuildpackLifecycleDatumInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackLifecycleDatumInserter interface {\n    Insert(o *BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-buildpacklifecycledatumreloader"},"type BuildpackLifecycleDatumReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackLifecycleDatumReloader interface {\n    Reload(o *BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *BuildpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-buildpacklifecycledatumslice"},"type BuildpackLifecycleDatumSlice"),(0,o.kt)("p",null,"BuildpackLifecycleDatumSlice is an alias for a slice of pointers to BuildpackLifecycleDatum","."," This should almost always be used instead of ","[","]","BuildpackLifecycleDatum","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackLifecycleDatumSlice []*BuildpackLifecycleDatum\n")),(0,o.kt)("h2",{id:"type-buildpacklifecycledatumupdater"},"type BuildpackLifecycleDatumUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackLifecycleDatumUpdater interface {\n    Update(o *BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o BuildpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildpacklifecycledatumupserter"},"type BuildpackLifecycleDatumUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackLifecycleDatumUpserter interface {\n    Upsert(o *BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-buildpackreloader"},"type BuildpackReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackReloader interface {\n    Reload(o *Buildpack, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *BuildpackSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-buildpackslice"},"type BuildpackSlice"),(0,o.kt)("p",null,"BuildpackSlice is an alias for a slice of pointers to Buildpack","."," This should almost always be used instead of ","[","]","Buildpack","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackSlice []*Buildpack\n")),(0,o.kt)("h2",{id:"type-buildpackupdater"},"type BuildpackUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackUpdater interface {\n    Update(o *Buildpack, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o BuildpackSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-buildpackupserter"},"type BuildpackUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BuildpackUpserter interface {\n    Upsert(o *Buildpack, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-clockjob"},"type ClockJob"),(0,o.kt)("p",null,"ClockJob is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ClockJob struct {\n    ID              int       `boil:"id" json:"id" toml:"id" yaml:"id"`\n    Name            string    `boil:"name" json:"name" toml:"name" yaml:"name"`\n    LastStartedAt   null.Time `boil:"last_started_at" json:"last_started_at,omitempty" toml:"last_started_at" yaml:"last_started_at,omitempty"`\n    LastCompletedAt null.Time `boil:"last_completed_at" json:"last_completed_at,omitempty" toml:"last_completed_at" yaml:"last_completed_at,omitempty"`\n\n    R   *clockJobR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   clockJobL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findclockjob"},"func FindClockJob"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindClockJob(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ClockJob, error)\n")),(0,o.kt)("p",null,"FindClockJob retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-clockjobdeleter"},"type ClockJobDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ClockJobDeleter interface {\n    Delete(o *ClockJob, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ClockJobSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-clockjobfinder"},"type ClockJobFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ClockJobFinder interface {\n    FindClockJob(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ClockJob, error)\n}\n")),(0,o.kt)("h2",{id:"type-clockjobfinisher"},"type ClockJobFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ClockJobFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ClockJob, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ClockJobSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-clockjobinserter"},"type ClockJobInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ClockJobInserter interface {\n    Insert(o *ClockJob, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-clockjobreloader"},"type ClockJobReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ClockJobReloader interface {\n    Reload(o *ClockJob, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ClockJobSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-clockjobslice"},"type ClockJobSlice"),(0,o.kt)("p",null,"ClockJobSlice is an alias for a slice of pointers to ClockJob","."," This should almost always be used instead of ","[","]","ClockJob","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ClockJobSlice []*ClockJob\n")),(0,o.kt)("h2",{id:"type-clockjobupdater"},"type ClockJobUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ClockJobUpdater interface {\n    Update(o *ClockJob, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ClockJobSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-clockjobupserter"},"type ClockJobUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ClockJobUpserter interface {\n    Upsert(o *ClockJob, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-delayedjob"},"type DelayedJob"),(0,o.kt)("p",null,"DelayedJob is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type DelayedJob struct {\n    ID         int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID       string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt  null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Priority   null.Int    `boil:"priority" json:"priority,omitempty" toml:"priority" yaml:"priority,omitempty"`\n    Attempts   null.Int    `boil:"attempts" json:"attempts,omitempty" toml:"attempts" yaml:"attempts,omitempty"`\n    Handler    null.String `boil:"handler" json:"handler,omitempty" toml:"handler" yaml:"handler,omitempty"`\n    LastError  null.String `boil:"last_error" json:"last_error,omitempty" toml:"last_error" yaml:"last_error,omitempty"`\n    RunAt      null.Time   `boil:"run_at" json:"run_at,omitempty" toml:"run_at" yaml:"run_at,omitempty"`\n    LockedAt   null.Time   `boil:"locked_at" json:"locked_at,omitempty" toml:"locked_at" yaml:"locked_at,omitempty"`\n    FailedAt   null.Time   `boil:"failed_at" json:"failed_at,omitempty" toml:"failed_at" yaml:"failed_at,omitempty"`\n    LockedBy   null.String `boil:"locked_by" json:"locked_by,omitempty" toml:"locked_by" yaml:"locked_by,omitempty"`\n    Queue      null.String `boil:"queue" json:"queue,omitempty" toml:"queue" yaml:"queue,omitempty"`\n    CFAPIError null.String `boil:"cf_api_error" json:"cf_api_error,omitempty" toml:"cf_api_error" yaml:"cf_api_error,omitempty"`\n\n    R   *delayedJobR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   delayedJobL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-finddelayedjob"},"func FindDelayedJob"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindDelayedJob(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DelayedJob, error)\n")),(0,o.kt)("p",null,"FindDelayedJob retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-delayedjobdeleter"},"type DelayedJobDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DelayedJobDeleter interface {\n    Delete(o *DelayedJob, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o DelayedJobSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-delayedjobfinder"},"type DelayedJobFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DelayedJobFinder interface {\n    FindDelayedJob(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DelayedJob, error)\n}\n")),(0,o.kt)("h2",{id:"type-delayedjobfinisher"},"type DelayedJobFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DelayedJobFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*DelayedJob, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (DelayedJobSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-delayedjobinserter"},"type DelayedJobInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DelayedJobInserter interface {\n    Insert(o *DelayedJob, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-delayedjobreloader"},"type DelayedJobReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DelayedJobReloader interface {\n    Reload(o *DelayedJob, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *DelayedJobSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-delayedjobslice"},"type DelayedJobSlice"),(0,o.kt)("p",null,"DelayedJobSlice is an alias for a slice of pointers to DelayedJob","."," This should almost always be used instead of ","[","]","DelayedJob","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DelayedJobSlice []*DelayedJob\n")),(0,o.kt)("h2",{id:"type-delayedjobupdater"},"type DelayedJobUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DelayedJobUpdater interface {\n    Update(o *DelayedJob, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o DelayedJobSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-delayedjobupserter"},"type DelayedJobUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DelayedJobUpserter interface {\n    Upsert(o *DelayedJob, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-deployment"},"type Deployment"),(0,o.kt)("p",null,"Deployment is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type Deployment struct {\n    ID                              int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                            string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt                       time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt                       null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    State                           null.String `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`\n    AppGUID                         null.String `boil:"app_guid" json:"app_guid,omitempty" toml:"app_guid" yaml:"app_guid,omitempty"`\n    DropletGUID                     null.String `boil:"droplet_guid" json:"droplet_guid,omitempty" toml:"droplet_guid" yaml:"droplet_guid,omitempty"`\n    DeployingWebProcessGUID         null.String `boil:"deploying_web_process_guid" json:"deploying_web_process_guid,omitempty" toml:"deploying_web_process_guid" yaml:"deploying_web_process_guid,omitempty"`\n    PreviousDropletGUID             null.String `boil:"previous_droplet_guid" json:"previous_droplet_guid,omitempty" toml:"previous_droplet_guid" yaml:"previous_droplet_guid,omitempty"`\n    OriginalWebProcessInstanceCount int         `boil:"original_web_process_instance_count" json:"original_web_process_instance_count" toml:"original_web_process_instance_count" yaml:"original_web_process_instance_count"`\n    RevisionGUID                    null.String `boil:"revision_guid" json:"revision_guid,omitempty" toml:"revision_guid" yaml:"revision_guid,omitempty"`\n    RevisionVersion                 null.Int    `boil:"revision_version" json:"revision_version,omitempty" toml:"revision_version" yaml:"revision_version,omitempty"`\n    LastHealthyAt                   time.Time   `boil:"last_healthy_at" json:"last_healthy_at" toml:"last_healthy_at" yaml:"last_healthy_at"`\n    StatusValue                     null.String `boil:"status_value" json:"status_value,omitempty" toml:"status_value" yaml:"status_value,omitempty"`\n    StatusReason                    null.String `boil:"status_reason" json:"status_reason,omitempty" toml:"status_reason" yaml:"status_reason,omitempty"`\n    Strategy                        string      `boil:"strategy" json:"strategy" toml:"strategy" yaml:"strategy"`\n\n    R   *deploymentR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   deploymentL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-finddeployment"},"func FindDeployment"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindDeployment(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Deployment, error)\n")),(0,o.kt)("p",null,"FindDeployment retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-deploymentannotation"},"type DeploymentAnnotation"),(0,o.kt)("p",null,"DeploymentAnnotation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type DeploymentAnnotation struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    Key          null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *deploymentAnnotationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   deploymentAnnotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-finddeploymentannotation"},"func FindDeploymentAnnotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindDeploymentAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DeploymentAnnotation, error)\n")),(0,o.kt)("p",null,"FindDeploymentAnnotation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-deploymentannotationdeleter"},"type DeploymentAnnotationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentAnnotationDeleter interface {\n    Delete(o *DeploymentAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o DeploymentAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-deploymentannotationfinder"},"type DeploymentAnnotationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentAnnotationFinder interface {\n    FindDeploymentAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DeploymentAnnotation, error)\n}\n")),(0,o.kt)("h2",{id:"type-deploymentannotationfinisher"},"type DeploymentAnnotationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentAnnotationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*DeploymentAnnotation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (DeploymentAnnotationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-deploymentannotationinserter"},"type DeploymentAnnotationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentAnnotationInserter interface {\n    Insert(o *DeploymentAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-deploymentannotationreloader"},"type DeploymentAnnotationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentAnnotationReloader interface {\n    Reload(o *DeploymentAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *DeploymentAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-deploymentannotationslice"},"type DeploymentAnnotationSlice"),(0,o.kt)("p",null,"DeploymentAnnotationSlice is an alias for a slice of pointers to DeploymentAnnotation","."," This should almost always be used instead of ","[","]","DeploymentAnnotation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentAnnotationSlice []*DeploymentAnnotation\n")),(0,o.kt)("h2",{id:"type-deploymentannotationupdater"},"type DeploymentAnnotationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentAnnotationUpdater interface {\n    Update(o *DeploymentAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o DeploymentAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-deploymentannotationupserter"},"type DeploymentAnnotationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentAnnotationUpserter interface {\n    Upsert(o *DeploymentAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-deploymentdeleter"},"type DeploymentDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentDeleter interface {\n    Delete(o *Deployment, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o DeploymentSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-deploymentfinder"},"type DeploymentFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentFinder interface {\n    FindDeployment(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Deployment, error)\n}\n")),(0,o.kt)("h2",{id:"type-deploymentfinisher"},"type DeploymentFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*Deployment, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (DeploymentSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-deploymentinserter"},"type DeploymentInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentInserter interface {\n    Insert(o *Deployment, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-deploymentlabel"},"type DeploymentLabel"),(0,o.kt)("p",null,"DeploymentLabel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type DeploymentLabel struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    KeyName      null.String `boil:"key_name" json:"key_name,omitempty" toml:"key_name" yaml:"key_name,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *deploymentLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   deploymentLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-finddeploymentlabel"},"func FindDeploymentLabel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindDeploymentLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DeploymentLabel, error)\n")),(0,o.kt)("p",null,"FindDeploymentLabel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-deploymentlabeldeleter"},"type DeploymentLabelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentLabelDeleter interface {\n    Delete(o *DeploymentLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o DeploymentLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-deploymentlabelfinder"},"type DeploymentLabelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentLabelFinder interface {\n    FindDeploymentLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DeploymentLabel, error)\n}\n")),(0,o.kt)("h2",{id:"type-deploymentlabelfinisher"},"type DeploymentLabelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentLabelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*DeploymentLabel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (DeploymentLabelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-deploymentlabelinserter"},"type DeploymentLabelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentLabelInserter interface {\n    Insert(o *DeploymentLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-deploymentlabelreloader"},"type DeploymentLabelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentLabelReloader interface {\n    Reload(o *DeploymentLabel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *DeploymentLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-deploymentlabelslice"},"type DeploymentLabelSlice"),(0,o.kt)("p",null,"DeploymentLabelSlice is an alias for a slice of pointers to DeploymentLabel","."," This should almost always be used instead of ","[","]","DeploymentLabel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentLabelSlice []*DeploymentLabel\n")),(0,o.kt)("h2",{id:"type-deploymentlabelupdater"},"type DeploymentLabelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentLabelUpdater interface {\n    Update(o *DeploymentLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o DeploymentLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-deploymentlabelupserter"},"type DeploymentLabelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentLabelUpserter interface {\n    Upsert(o *DeploymentLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-deploymentprocess"},"type DeploymentProcess"),(0,o.kt)("p",null,"DeploymentProcess is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type DeploymentProcess struct {\n    ID             int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID           string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt      null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ProcessGUID    null.String `boil:"process_guid" json:"process_guid,omitempty" toml:"process_guid" yaml:"process_guid,omitempty"`\n    ProcessType    null.String `boil:"process_type" json:"process_type,omitempty" toml:"process_type" yaml:"process_type,omitempty"`\n    DeploymentGUID null.String `boil:"deployment_guid" json:"deployment_guid,omitempty" toml:"deployment_guid" yaml:"deployment_guid,omitempty"`\n\n    R   *deploymentProcessR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   deploymentProcessL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-finddeploymentprocess"},"func FindDeploymentProcess"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindDeploymentProcess(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DeploymentProcess, error)\n")),(0,o.kt)("p",null,"FindDeploymentProcess retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-deploymentprocessdeleter"},"type DeploymentProcessDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentProcessDeleter interface {\n    Delete(o *DeploymentProcess, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o DeploymentProcessSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-deploymentprocessfinder"},"type DeploymentProcessFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentProcessFinder interface {\n    FindDeploymentProcess(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DeploymentProcess, error)\n}\n")),(0,o.kt)("h2",{id:"type-deploymentprocessfinisher"},"type DeploymentProcessFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentProcessFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*DeploymentProcess, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (DeploymentProcessSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-deploymentprocessinserter"},"type DeploymentProcessInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentProcessInserter interface {\n    Insert(o *DeploymentProcess, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-deploymentprocessreloader"},"type DeploymentProcessReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentProcessReloader interface {\n    Reload(o *DeploymentProcess, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *DeploymentProcessSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-deploymentprocessslice"},"type DeploymentProcessSlice"),(0,o.kt)("p",null,"DeploymentProcessSlice is an alias for a slice of pointers to DeploymentProcess","."," This should almost always be used instead of ","[","]","DeploymentProcess","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentProcessSlice []*DeploymentProcess\n")),(0,o.kt)("h2",{id:"type-deploymentprocessupdater"},"type DeploymentProcessUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentProcessUpdater interface {\n    Update(o *DeploymentProcess, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o DeploymentProcessSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-deploymentprocessupserter"},"type DeploymentProcessUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentProcessUpserter interface {\n    Upsert(o *DeploymentProcess, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-deploymentreloader"},"type DeploymentReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentReloader interface {\n    Reload(o *Deployment, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *DeploymentSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-deploymentslice"},"type DeploymentSlice"),(0,o.kt)("p",null,"DeploymentSlice is an alias for a slice of pointers to Deployment","."," This should almost always be used instead of ","[","]","Deployment","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentSlice []*Deployment\n")),(0,o.kt)("h2",{id:"type-deploymentupdater"},"type DeploymentUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentUpdater interface {\n    Update(o *Deployment, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o DeploymentSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-deploymentupserter"},"type DeploymentUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DeploymentUpserter interface {\n    Upsert(o *Deployment, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-domain"},"type Domain"),(0,o.kt)("p",null,"Domain is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type Domain struct {\n    ID                   int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                 string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt            time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt            null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Name                 string      `boil:"name" json:"name" toml:"name" yaml:"name"`\n    Wildcard             bool        `boil:"wildcard" json:"wildcard" toml:"wildcard" yaml:"wildcard"`\n    OwningOrganizationID null.Int    `boil:"owning_organization_id" json:"owning_organization_id,omitempty" toml:"owning_organization_id" yaml:"owning_organization_id,omitempty"`\n    RouterGroupGUID      null.String `boil:"router_group_guid" json:"router_group_guid,omitempty" toml:"router_group_guid" yaml:"router_group_guid,omitempty"`\n    Internal             null.Bool   `boil:"internal" json:"internal,omitempty" toml:"internal" yaml:"internal,omitempty"`\n\n    R   *domainR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   domainL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-finddomain"},"func FindDomain"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindDomain(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Domain, error)\n")),(0,o.kt)("p",null,"FindDomain retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-domainannotation"},"type DomainAnnotation"),(0,o.kt)("p",null,"DomainAnnotation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type DomainAnnotation struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    Key          null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *domainAnnotationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   domainAnnotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-finddomainannotation"},"func FindDomainAnnotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindDomainAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DomainAnnotation, error)\n")),(0,o.kt)("p",null,"FindDomainAnnotation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-domainannotationdeleter"},"type DomainAnnotationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DomainAnnotationDeleter interface {\n    Delete(o *DomainAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o DomainAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-domainannotationfinder"},"type DomainAnnotationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DomainAnnotationFinder interface {\n    FindDomainAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DomainAnnotation, error)\n}\n")),(0,o.kt)("h2",{id:"type-domainannotationfinisher"},"type DomainAnnotationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DomainAnnotationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*DomainAnnotation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (DomainAnnotationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-domainannotationinserter"},"type DomainAnnotationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DomainAnnotationInserter interface {\n    Insert(o *DomainAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-domainannotationreloader"},"type DomainAnnotationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DomainAnnotationReloader interface {\n    Reload(o *DomainAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *DomainAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-domainannotationslice"},"type DomainAnnotationSlice"),(0,o.kt)("p",null,"DomainAnnotationSlice is an alias for a slice of pointers to DomainAnnotation","."," This should almost always be used instead of ","[","]","DomainAnnotation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DomainAnnotationSlice []*DomainAnnotation\n")),(0,o.kt)("h2",{id:"type-domainannotationupdater"},"type DomainAnnotationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DomainAnnotationUpdater interface {\n    Update(o *DomainAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o DomainAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-domainannotationupserter"},"type DomainAnnotationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DomainAnnotationUpserter interface {\n    Upsert(o *DomainAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-domaindeleter"},"type DomainDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DomainDeleter interface {\n    Delete(o *Domain, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o DomainSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-domainfinder"},"type DomainFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DomainFinder interface {\n    FindDomain(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Domain, error)\n}\n")),(0,o.kt)("h2",{id:"type-domainfinisher"},"type DomainFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DomainFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*Domain, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (DomainSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-domaininserter"},"type DomainInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DomainInserter interface {\n    Insert(o *Domain, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-domainlabel"},"type DomainLabel"),(0,o.kt)("p",null,"DomainLabel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type DomainLabel struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    KeyName      null.String `boil:"key_name" json:"key_name,omitempty" toml:"key_name" yaml:"key_name,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *domainLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   domainLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-finddomainlabel"},"func FindDomainLabel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindDomainLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DomainLabel, error)\n")),(0,o.kt)("p",null,"FindDomainLabel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-domainlabeldeleter"},"type DomainLabelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DomainLabelDeleter interface {\n    Delete(o *DomainLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o DomainLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-domainlabelfinder"},"type DomainLabelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DomainLabelFinder interface {\n    FindDomainLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DomainLabel, error)\n}\n")),(0,o.kt)("h2",{id:"type-domainlabelfinisher"},"type DomainLabelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DomainLabelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*DomainLabel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (DomainLabelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-domainlabelinserter"},"type DomainLabelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DomainLabelInserter interface {\n    Insert(o *DomainLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-domainlabelreloader"},"type DomainLabelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DomainLabelReloader interface {\n    Reload(o *DomainLabel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *DomainLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-domainlabelslice"},"type DomainLabelSlice"),(0,o.kt)("p",null,"DomainLabelSlice is an alias for a slice of pointers to DomainLabel","."," This should almost always be used instead of ","[","]","DomainLabel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DomainLabelSlice []*DomainLabel\n")),(0,o.kt)("h2",{id:"type-domainlabelupdater"},"type DomainLabelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DomainLabelUpdater interface {\n    Update(o *DomainLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o DomainLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-domainlabelupserter"},"type DomainLabelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DomainLabelUpserter interface {\n    Upsert(o *DomainLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-domainreloader"},"type DomainReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DomainReloader interface {\n    Reload(o *Domain, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *DomainSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-domainslice"},"type DomainSlice"),(0,o.kt)("p",null,"DomainSlice is an alias for a slice of pointers to Domain","."," This should almost always be used instead of ","[","]","Domain","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DomainSlice []*Domain\n")),(0,o.kt)("h2",{id:"type-domainupdater"},"type DomainUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DomainUpdater interface {\n    Update(o *Domain, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o DomainSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-domainupserter"},"type DomainUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DomainUpserter interface {\n    Upsert(o *Domain, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-droplet"},"type Droplet"),(0,o.kt)("p",null,"Droplet is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type Droplet struct {\n    ID                             int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                           string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt                      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt                      null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    DropletHash                    null.String `boil:"droplet_hash" json:"droplet_hash,omitempty" toml:"droplet_hash" yaml:"droplet_hash,omitempty"`\n    ExecutionMetadata              null.String `boil:"execution_metadata" json:"execution_metadata,omitempty" toml:"execution_metadata" yaml:"execution_metadata,omitempty"`\n    State                          string      `boil:"state" json:"state" toml:"state" yaml:"state"`\n    ProcessTypes                   null.String `boil:"process_types" json:"process_types,omitempty" toml:"process_types" yaml:"process_types,omitempty"`\n    ErrorID                        null.String `boil:"error_id" json:"error_id,omitempty" toml:"error_id" yaml:"error_id,omitempty"`\n    ErrorDescription               null.String `boil:"error_description" json:"error_description,omitempty" toml:"error_description" yaml:"error_description,omitempty"`\n    EncryptedEnvironmentVariables  null.String `boil:"encrypted_environment_variables" json:"encrypted_environment_variables,omitempty" toml:"encrypted_environment_variables" yaml:"encrypted_environment_variables,omitempty"`\n    Salt                           null.String `boil:"salt" json:"salt,omitempty" toml:"salt" yaml:"salt,omitempty"`\n    StagingMemoryInMB              null.Int    `boil:"staging_memory_in_mb" json:"staging_memory_in_mb,omitempty" toml:"staging_memory_in_mb" yaml:"staging_memory_in_mb,omitempty"`\n    StagingDiskInMB                null.Int    `boil:"staging_disk_in_mb" json:"staging_disk_in_mb,omitempty" toml:"staging_disk_in_mb" yaml:"staging_disk_in_mb,omitempty"`\n    BuildpackReceiptBuildpack      null.String `boil:"buildpack_receipt_buildpack" json:"buildpack_receipt_buildpack,omitempty" toml:"buildpack_receipt_buildpack" yaml:"buildpack_receipt_buildpack,omitempty"`\n    BuildpackReceiptBuildpackGUID  null.String `boil:"buildpack_receipt_buildpack_guid" json:"buildpack_receipt_buildpack_guid,omitempty" toml:"buildpack_receipt_buildpack_guid" yaml:"buildpack_receipt_buildpack_guid,omitempty"`\n    BuildpackReceiptDetectOutput   null.String `boil:"buildpack_receipt_detect_output" json:"buildpack_receipt_detect_output,omitempty" toml:"buildpack_receipt_detect_output" yaml:"buildpack_receipt_detect_output,omitempty"`\n    DockerReceiptImage             null.String `boil:"docker_receipt_image" json:"docker_receipt_image,omitempty" toml:"docker_receipt_image" yaml:"docker_receipt_image,omitempty"`\n    PackageGUID                    null.String `boil:"package_guid" json:"package_guid,omitempty" toml:"package_guid" yaml:"package_guid,omitempty"`\n    AppGUID                        null.String `boil:"app_guid" json:"app_guid,omitempty" toml:"app_guid" yaml:"app_guid,omitempty"`\n    Sha256Checksum                 null.String `boil:"sha256_checksum" json:"sha256_checksum,omitempty" toml:"sha256_checksum" yaml:"sha256_checksum,omitempty"`\n    BuildGUID                      null.String `boil:"build_guid" json:"build_guid,omitempty" toml:"build_guid" yaml:"build_guid,omitempty"`\n    DockerReceiptUsername          null.String `boil:"docker_receipt_username" json:"docker_receipt_username,omitempty" toml:"docker_receipt_username" yaml:"docker_receipt_username,omitempty"`\n    DockerReceiptPasswordSalt      null.String `boil:"docker_receipt_password_salt" json:"docker_receipt_password_salt,omitempty" toml:"docker_receipt_password_salt" yaml:"docker_receipt_password_salt,omitempty"`\n    EncryptedDockerReceiptPassword null.String `boil:"encrypted_docker_receipt_password" json:"encrypted_docker_receipt_password,omitempty" toml:"encrypted_docker_receipt_password" yaml:"encrypted_docker_receipt_password,omitempty"`\n    EncryptionKeyLabel             null.String `boil:"encryption_key_label" json:"encryption_key_label,omitempty" toml:"encryption_key_label" yaml:"encryption_key_label,omitempty"`\n    EncryptionIterations           int         `boil:"encryption_iterations" json:"encryption_iterations" toml:"encryption_iterations" yaml:"encryption_iterations"`\n    Sidecars                       null.String `boil:"sidecars" json:"sidecars,omitempty" toml:"sidecars" yaml:"sidecars,omitempty"`\n\n    R   *dropletR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   dropletL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-finddroplet"},"func FindDroplet"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindDroplet(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Droplet, error)\n")),(0,o.kt)("p",null,"FindDroplet retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-dropletannotation"},"type DropletAnnotation"),(0,o.kt)("p",null,"DropletAnnotation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type DropletAnnotation struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    Key          null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *dropletAnnotationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   dropletAnnotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-finddropletannotation"},"func FindDropletAnnotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindDropletAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DropletAnnotation, error)\n")),(0,o.kt)("p",null,"FindDropletAnnotation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-dropletannotationdeleter"},"type DropletAnnotationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DropletAnnotationDeleter interface {\n    Delete(o *DropletAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o DropletAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-dropletannotationfinder"},"type DropletAnnotationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DropletAnnotationFinder interface {\n    FindDropletAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DropletAnnotation, error)\n}\n")),(0,o.kt)("h2",{id:"type-dropletannotationfinisher"},"type DropletAnnotationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DropletAnnotationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*DropletAnnotation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (DropletAnnotationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-dropletannotationinserter"},"type DropletAnnotationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DropletAnnotationInserter interface {\n    Insert(o *DropletAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-dropletannotationreloader"},"type DropletAnnotationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DropletAnnotationReloader interface {\n    Reload(o *DropletAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *DropletAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-dropletannotationslice"},"type DropletAnnotationSlice"),(0,o.kt)("p",null,"DropletAnnotationSlice is an alias for a slice of pointers to DropletAnnotation","."," This should almost always be used instead of ","[","]","DropletAnnotation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DropletAnnotationSlice []*DropletAnnotation\n")),(0,o.kt)("h2",{id:"type-dropletannotationupdater"},"type DropletAnnotationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DropletAnnotationUpdater interface {\n    Update(o *DropletAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o DropletAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-dropletannotationupserter"},"type DropletAnnotationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DropletAnnotationUpserter interface {\n    Upsert(o *DropletAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-dropletdeleter"},"type DropletDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DropletDeleter interface {\n    Delete(o *Droplet, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o DropletSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-dropletfinder"},"type DropletFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DropletFinder interface {\n    FindDroplet(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Droplet, error)\n}\n")),(0,o.kt)("h2",{id:"type-dropletfinisher"},"type DropletFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DropletFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*Droplet, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (DropletSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-dropletinserter"},"type DropletInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DropletInserter interface {\n    Insert(o *Droplet, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-dropletlabel"},"type DropletLabel"),(0,o.kt)("p",null,"DropletLabel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type DropletLabel struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    KeyName      null.String `boil:"key_name" json:"key_name,omitempty" toml:"key_name" yaml:"key_name,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *dropletLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   dropletLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-finddropletlabel"},"func FindDropletLabel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindDropletLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DropletLabel, error)\n")),(0,o.kt)("p",null,"FindDropletLabel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-dropletlabeldeleter"},"type DropletLabelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DropletLabelDeleter interface {\n    Delete(o *DropletLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o DropletLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-dropletlabelfinder"},"type DropletLabelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DropletLabelFinder interface {\n    FindDropletLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DropletLabel, error)\n}\n")),(0,o.kt)("h2",{id:"type-dropletlabelfinisher"},"type DropletLabelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DropletLabelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*DropletLabel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (DropletLabelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-dropletlabelinserter"},"type DropletLabelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DropletLabelInserter interface {\n    Insert(o *DropletLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-dropletlabelreloader"},"type DropletLabelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DropletLabelReloader interface {\n    Reload(o *DropletLabel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *DropletLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-dropletlabelslice"},"type DropletLabelSlice"),(0,o.kt)("p",null,"DropletLabelSlice is an alias for a slice of pointers to DropletLabel","."," This should almost always be used instead of ","[","]","DropletLabel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DropletLabelSlice []*DropletLabel\n")),(0,o.kt)("h2",{id:"type-dropletlabelupdater"},"type DropletLabelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DropletLabelUpdater interface {\n    Update(o *DropletLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o DropletLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-dropletlabelupserter"},"type DropletLabelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DropletLabelUpserter interface {\n    Upsert(o *DropletLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-dropletreloader"},"type DropletReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DropletReloader interface {\n    Reload(o *Droplet, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *DropletSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-dropletslice"},"type DropletSlice"),(0,o.kt)("p",null,"DropletSlice is an alias for a slice of pointers to Droplet","."," This should almost always be used instead of ","[","]","Droplet","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DropletSlice []*Droplet\n")),(0,o.kt)("h2",{id:"type-dropletupdater"},"type DropletUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DropletUpdater interface {\n    Update(o *Droplet, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o DropletSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-dropletupserter"},"type DropletUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DropletUpserter interface {\n    Upsert(o *Droplet, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-encryptionkeysentinel"},"type EncryptionKeySentinel"),(0,o.kt)("p",null,"EncryptionKeySentinel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type EncryptionKeySentinel struct {\n    ID                   int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                 string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt            time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt            null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ExpectedValue        null.String `boil:"expected_value" json:"expected_value,omitempty" toml:"expected_value" yaml:"expected_value,omitempty"`\n    EncryptedValue       null.String `boil:"encrypted_value" json:"encrypted_value,omitempty" toml:"encrypted_value" yaml:"encrypted_value,omitempty"`\n    EncryptionKeyLabel   null.String `boil:"encryption_key_label" json:"encryption_key_label,omitempty" toml:"encryption_key_label" yaml:"encryption_key_label,omitempty"`\n    Salt                 null.String `boil:"salt" json:"salt,omitempty" toml:"salt" yaml:"salt,omitempty"`\n    EncryptionIterations int         `boil:"encryption_iterations" json:"encryption_iterations" toml:"encryption_iterations" yaml:"encryption_iterations"`\n\n    R   *encryptionKeySentinelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   encryptionKeySentinelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findencryptionkeysentinel"},"func FindEncryptionKeySentinel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindEncryptionKeySentinel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*EncryptionKeySentinel, error)\n")),(0,o.kt)("p",null,"FindEncryptionKeySentinel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-encryptionkeysentineldeleter"},"type EncryptionKeySentinelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type EncryptionKeySentinelDeleter interface {\n    Delete(o *EncryptionKeySentinel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o EncryptionKeySentinelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-encryptionkeysentinelfinder"},"type EncryptionKeySentinelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type EncryptionKeySentinelFinder interface {\n    FindEncryptionKeySentinel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*EncryptionKeySentinel, error)\n}\n")),(0,o.kt)("h2",{id:"type-encryptionkeysentinelfinisher"},"type EncryptionKeySentinelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type EncryptionKeySentinelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*EncryptionKeySentinel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (EncryptionKeySentinelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-encryptionkeysentinelinserter"},"type EncryptionKeySentinelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type EncryptionKeySentinelInserter interface {\n    Insert(o *EncryptionKeySentinel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-encryptionkeysentinelreloader"},"type EncryptionKeySentinelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type EncryptionKeySentinelReloader interface {\n    Reload(o *EncryptionKeySentinel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *EncryptionKeySentinelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-encryptionkeysentinelslice"},"type EncryptionKeySentinelSlice"),(0,o.kt)("p",null,"EncryptionKeySentinelSlice is an alias for a slice of pointers to EncryptionKeySentinel","."," This should almost always be used instead of ","[","]","EncryptionKeySentinel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type EncryptionKeySentinelSlice []*EncryptionKeySentinel\n")),(0,o.kt)("h2",{id:"type-encryptionkeysentinelupdater"},"type EncryptionKeySentinelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type EncryptionKeySentinelUpdater interface {\n    Update(o *EncryptionKeySentinel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o EncryptionKeySentinelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-encryptionkeysentinelupserter"},"type EncryptionKeySentinelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type EncryptionKeySentinelUpserter interface {\n    Upsert(o *EncryptionKeySentinel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-envgroup"},"type EnvGroup"),(0,o.kt)("p",null,"EnvGroup is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type EnvGroup struct {\n    ID                   int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                 string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt            time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt            null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Name                 string      `boil:"name" json:"name" toml:"name" yaml:"name"`\n    EnvironmentJSON      null.String `boil:"environment_json" json:"environment_json,omitempty" toml:"environment_json" yaml:"environment_json,omitempty"`\n    Salt                 null.String `boil:"salt" json:"salt,omitempty" toml:"salt" yaml:"salt,omitempty"`\n    EncryptionKeyLabel   null.String `boil:"encryption_key_label" json:"encryption_key_label,omitempty" toml:"encryption_key_label" yaml:"encryption_key_label,omitempty"`\n    EncryptionIterations int         `boil:"encryption_iterations" json:"encryption_iterations" toml:"encryption_iterations" yaml:"encryption_iterations"`\n\n    R   *envGroupR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   envGroupL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findenvgroup"},"func FindEnvGroup"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindEnvGroup(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*EnvGroup, error)\n")),(0,o.kt)("p",null,"FindEnvGroup retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-envgroupdeleter"},"type EnvGroupDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type EnvGroupDeleter interface {\n    Delete(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o EnvGroupSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-envgroupfinder"},"type EnvGroupFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type EnvGroupFinder interface {\n    FindEnvGroup(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*EnvGroup, error)\n}\n")),(0,o.kt)("h2",{id:"type-envgroupfinisher"},"type EnvGroupFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type EnvGroupFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*EnvGroup, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (EnvGroupSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-envgroupinserter"},"type EnvGroupInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type EnvGroupInserter interface {\n    Insert(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-envgroupreloader"},"type EnvGroupReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type EnvGroupReloader interface {\n    Reload(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *EnvGroupSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-envgroupslice"},"type EnvGroupSlice"),(0,o.kt)("p",null,"EnvGroupSlice is an alias for a slice of pointers to EnvGroup","."," This should almost always be used instead of ","[","]","EnvGroup","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type EnvGroupSlice []*EnvGroup\n")),(0,o.kt)("h2",{id:"type-envgroupupdater"},"type EnvGroupUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type EnvGroupUpdater interface {\n    Update(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o EnvGroupSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-envgroupupserter"},"type EnvGroupUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type EnvGroupUpserter interface {\n    Upsert(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-event"},"type Event"),(0,o.kt)("p",null,"Event is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type Event struct {\n    ID               int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID             string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt        time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt        null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Timestamp        time.Time   `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`\n    Type             string      `boil:"type" json:"type" toml:"type" yaml:"type"`\n    Actor            string      `boil:"actor" json:"actor" toml:"actor" yaml:"actor"`\n    ActorType        string      `boil:"actor_type" json:"actor_type" toml:"actor_type" yaml:"actor_type"`\n    Actee            string      `boil:"actee" json:"actee" toml:"actee" yaml:"actee"`\n    ActeeType        string      `boil:"actee_type" json:"actee_type" toml:"actee_type" yaml:"actee_type"`\n    Metadata         null.String `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`\n    OrganizationGUID string      `boil:"organization_guid" json:"organization_guid" toml:"organization_guid" yaml:"organization_guid"`\n    SpaceGUID        string      `boil:"space_guid" json:"space_guid" toml:"space_guid" yaml:"space_guid"`\n    ActorName        null.String `boil:"actor_name" json:"actor_name,omitempty" toml:"actor_name" yaml:"actor_name,omitempty"`\n    ActeeName        null.String `boil:"actee_name" json:"actee_name,omitempty" toml:"actee_name" yaml:"actee_name,omitempty"`\n    ActorUsername    null.String `boil:"actor_username" json:"actor_username,omitempty" toml:"actor_username" yaml:"actor_username,omitempty"`\n\n    R   *eventR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   eventL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findevent"},"func FindEvent"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindEvent(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Event, error)\n")),(0,o.kt)("p",null,"FindEvent retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-eventdeleter"},"type EventDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type EventDeleter interface {\n    Delete(o *Event, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o EventSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-eventfinder"},"type EventFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type EventFinder interface {\n    FindEvent(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Event, error)\n}\n")),(0,o.kt)("h2",{id:"type-eventfinisher"},"type EventFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type EventFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*Event, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (EventSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-eventinserter"},"type EventInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type EventInserter interface {\n    Insert(o *Event, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-eventreloader"},"type EventReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type EventReloader interface {\n    Reload(o *Event, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *EventSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-eventslice"},"type EventSlice"),(0,o.kt)("p",null,"EventSlice is an alias for a slice of pointers to Event","."," This should almost always be used instead of ","[","]","Event","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type EventSlice []*Event\n")),(0,o.kt)("h2",{id:"type-eventupdater"},"type EventUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type EventUpdater interface {\n    Update(o *Event, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o EventSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-eventupserter"},"type EventUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type EventUpserter interface {\n    Upsert(o *Event, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-featureflag"},"type FeatureFlag"),(0,o.kt)("p",null,"FeatureFlag is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type FeatureFlag struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Name         string      `boil:"name" json:"name" toml:"name" yaml:"name"`\n    Enabled      bool        `boil:"enabled" json:"enabled" toml:"enabled" yaml:"enabled"`\n    ErrorMessage null.String `boil:"error_message" json:"error_message,omitempty" toml:"error_message" yaml:"error_message,omitempty"`\n\n    R   *featureFlagR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   featureFlagL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findfeatureflag"},"func FindFeatureFlag"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindFeatureFlag(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*FeatureFlag, error)\n")),(0,o.kt)("p",null,"FindFeatureFlag retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-featureflagdeleter"},"type FeatureFlagDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type FeatureFlagDeleter interface {\n    Delete(o *FeatureFlag, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o FeatureFlagSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-featureflagfinder"},"type FeatureFlagFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type FeatureFlagFinder interface {\n    FindFeatureFlag(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*FeatureFlag, error)\n}\n")),(0,o.kt)("h2",{id:"type-featureflagfinisher"},"type FeatureFlagFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type FeatureFlagFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*FeatureFlag, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (FeatureFlagSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-featureflaginserter"},"type FeatureFlagInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type FeatureFlagInserter interface {\n    Insert(o *FeatureFlag, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-featureflagreloader"},"type FeatureFlagReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type FeatureFlagReloader interface {\n    Reload(o *FeatureFlag, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *FeatureFlagSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-featureflagslice"},"type FeatureFlagSlice"),(0,o.kt)("p",null,"FeatureFlagSlice is an alias for a slice of pointers to FeatureFlag","."," This should almost always be used instead of ","[","]","FeatureFlag","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type FeatureFlagSlice []*FeatureFlag\n")),(0,o.kt)("h2",{id:"type-featureflagupdater"},"type FeatureFlagUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type FeatureFlagUpdater interface {\n    Update(o *FeatureFlag, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o FeatureFlagSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-featureflagupserter"},"type FeatureFlagUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type FeatureFlagUpserter interface {\n    Upsert(o *FeatureFlag, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-isolationsegment"},"type IsolationSegment"),(0,o.kt)("p",null,"IsolationSegment is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type IsolationSegment struct {\n    ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID      string    `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`\n\n    R   *isolationSegmentR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   isolationSegmentL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findisolationsegment"},"func FindIsolationSegment"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindIsolationSegment(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*IsolationSegment, error)\n")),(0,o.kt)("p",null,"FindIsolationSegment retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-isolationsegmentannotation"},"type IsolationSegmentAnnotation"),(0,o.kt)("p",null,"IsolationSegmentAnnotation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type IsolationSegmentAnnotation struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    Key          null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *isolationSegmentAnnotationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   isolationSegmentAnnotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findisolationsegmentannotation"},"func FindIsolationSegmentAnnotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindIsolationSegmentAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*IsolationSegmentAnnotation, error)\n")),(0,o.kt)("p",null,"FindIsolationSegmentAnnotation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-isolationsegmentannotationdeleter"},"type IsolationSegmentAnnotationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type IsolationSegmentAnnotationDeleter interface {\n    Delete(o *IsolationSegmentAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o IsolationSegmentAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-isolationsegmentannotationfinder"},"type IsolationSegmentAnnotationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type IsolationSegmentAnnotationFinder interface {\n    FindIsolationSegmentAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*IsolationSegmentAnnotation, error)\n}\n")),(0,o.kt)("h2",{id:"type-isolationsegmentannotationfinisher"},"type IsolationSegmentAnnotationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type IsolationSegmentAnnotationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*IsolationSegmentAnnotation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (IsolationSegmentAnnotationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-isolationsegmentannotationinserter"},"type IsolationSegmentAnnotationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type IsolationSegmentAnnotationInserter interface {\n    Insert(o *IsolationSegmentAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-isolationsegmentannotationreloader"},"type IsolationSegmentAnnotationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type IsolationSegmentAnnotationReloader interface {\n    Reload(o *IsolationSegmentAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *IsolationSegmentAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-isolationsegmentannotationslice"},"type IsolationSegmentAnnotationSlice"),(0,o.kt)("p",null,"IsolationSegmentAnnotationSlice is an alias for a slice of pointers to IsolationSegmentAnnotation","."," This should almost always be used instead of ","[","]","IsolationSegmentAnnotation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type IsolationSegmentAnnotationSlice []*IsolationSegmentAnnotation\n")),(0,o.kt)("h2",{id:"type-isolationsegmentannotationupdater"},"type IsolationSegmentAnnotationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type IsolationSegmentAnnotationUpdater interface {\n    Update(o *IsolationSegmentAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o IsolationSegmentAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-isolationsegmentannotationupserter"},"type IsolationSegmentAnnotationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type IsolationSegmentAnnotationUpserter interface {\n    Upsert(o *IsolationSegmentAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-isolationsegmentdeleter"},"type IsolationSegmentDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type IsolationSegmentDeleter interface {\n    Delete(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o IsolationSegmentSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-isolationsegmentfinder"},"type IsolationSegmentFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type IsolationSegmentFinder interface {\n    FindIsolationSegment(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*IsolationSegment, error)\n}\n")),(0,o.kt)("h2",{id:"type-isolationsegmentfinisher"},"type IsolationSegmentFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type IsolationSegmentFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*IsolationSegment, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (IsolationSegmentSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-isolationsegmentinserter"},"type IsolationSegmentInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type IsolationSegmentInserter interface {\n    Insert(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-isolationsegmentlabel"},"type IsolationSegmentLabel"),(0,o.kt)("p",null,"IsolationSegmentLabel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type IsolationSegmentLabel struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    KeyName      null.String `boil:"key_name" json:"key_name,omitempty" toml:"key_name" yaml:"key_name,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *isolationSegmentLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   isolationSegmentLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findisolationsegmentlabel"},"func FindIsolationSegmentLabel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindIsolationSegmentLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*IsolationSegmentLabel, error)\n")),(0,o.kt)("p",null,"FindIsolationSegmentLabel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-isolationsegmentlabeldeleter"},"type IsolationSegmentLabelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type IsolationSegmentLabelDeleter interface {\n    Delete(o *IsolationSegmentLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o IsolationSegmentLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-isolationsegmentlabelfinder"},"type IsolationSegmentLabelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type IsolationSegmentLabelFinder interface {\n    FindIsolationSegmentLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*IsolationSegmentLabel, error)\n}\n")),(0,o.kt)("h2",{id:"type-isolationsegmentlabelfinisher"},"type IsolationSegmentLabelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type IsolationSegmentLabelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*IsolationSegmentLabel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (IsolationSegmentLabelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-isolationsegmentlabelinserter"},"type IsolationSegmentLabelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type IsolationSegmentLabelInserter interface {\n    Insert(o *IsolationSegmentLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-isolationsegmentlabelreloader"},"type IsolationSegmentLabelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type IsolationSegmentLabelReloader interface {\n    Reload(o *IsolationSegmentLabel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *IsolationSegmentLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-isolationsegmentlabelslice"},"type IsolationSegmentLabelSlice"),(0,o.kt)("p",null,"IsolationSegmentLabelSlice is an alias for a slice of pointers to IsolationSegmentLabel","."," This should almost always be used instead of ","[","]","IsolationSegmentLabel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type IsolationSegmentLabelSlice []*IsolationSegmentLabel\n")),(0,o.kt)("h2",{id:"type-isolationsegmentlabelupdater"},"type IsolationSegmentLabelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type IsolationSegmentLabelUpdater interface {\n    Update(o *IsolationSegmentLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o IsolationSegmentLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-isolationsegmentlabelupserter"},"type IsolationSegmentLabelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type IsolationSegmentLabelUpserter interface {\n    Upsert(o *IsolationSegmentLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-isolationsegmentreloader"},"type IsolationSegmentReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type IsolationSegmentReloader interface {\n    Reload(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *IsolationSegmentSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-isolationsegmentslice"},"type IsolationSegmentSlice"),(0,o.kt)("p",null,"IsolationSegmentSlice is an alias for a slice of pointers to IsolationSegment","."," This should almost always be used instead of ","[","]","IsolationSegment","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type IsolationSegmentSlice []*IsolationSegment\n")),(0,o.kt)("h2",{id:"type-isolationsegmentupdater"},"type IsolationSegmentUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type IsolationSegmentUpdater interface {\n    Update(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o IsolationSegmentSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-isolationsegmentupserter"},"type IsolationSegmentUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type IsolationSegmentUpserter interface {\n    Upsert(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-job"},"type Job"),(0,o.kt)("p",null,"Job is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type Job struct {\n    ID             int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID           string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt      null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    State          null.String `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`\n    Operation      null.String `boil:"operation" json:"operation,omitempty" toml:"operation" yaml:"operation,omitempty"`\n    ResourceGUID   null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    ResourceType   null.String `boil:"resource_type" json:"resource_type,omitempty" toml:"resource_type" yaml:"resource_type,omitempty"`\n    DelayedJobGUID null.String `boil:"delayed_job_guid" json:"delayed_job_guid,omitempty" toml:"delayed_job_guid" yaml:"delayed_job_guid,omitempty"`\n    CFAPIError     null.String `boil:"cf_api_error" json:"cf_api_error,omitempty" toml:"cf_api_error" yaml:"cf_api_error,omitempty"`\n\n    R   *jobR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   jobL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findjob"},"func FindJob"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindJob(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Job, error)\n")),(0,o.kt)("p",null,"FindJob retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-jobdeleter"},"type JobDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type JobDeleter interface {\n    Delete(o *Job, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o JobSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-jobfinder"},"type JobFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type JobFinder interface {\n    FindJob(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Job, error)\n}\n")),(0,o.kt)("h2",{id:"type-jobfinisher"},"type JobFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type JobFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*Job, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (JobSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-jobinserter"},"type JobInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type JobInserter interface {\n    Insert(o *Job, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-jobreloader"},"type JobReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type JobReloader interface {\n    Reload(o *Job, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *JobSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-jobslice"},"type JobSlice"),(0,o.kt)("p",null,"JobSlice is an alias for a slice of pointers to Job","."," This should almost always be used instead of ","[","]","Job","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type JobSlice []*Job\n")),(0,o.kt)("h2",{id:"type-jobupdater"},"type JobUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type JobUpdater interface {\n    Update(o *Job, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o JobSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-jobupserter"},"type JobUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type JobUpserter interface {\n    Upsert(o *Job, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-jobwarning"},"type JobWarning"),(0,o.kt)("p",null,"JobWarning is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type JobWarning struct {\n    ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID      string    `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Detail    string    `boil:"detail" json:"detail" toml:"detail" yaml:"detail"`\n    JobID     int       `boil:"job_id" json:"job_id" toml:"job_id" yaml:"job_id"`\n    FKJobsID  null.Int  `boil:"fk_jobs_id" json:"fk_jobs_id,omitempty" toml:"fk_jobs_id" yaml:"fk_jobs_id,omitempty"`\n\n    R   *jobWarningR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   jobWarningL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findjobwarning"},"func FindJobWarning"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindJobWarning(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*JobWarning, error)\n")),(0,o.kt)("p",null,"FindJobWarning retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-jobwarningdeleter"},"type JobWarningDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type JobWarningDeleter interface {\n    Delete(o *JobWarning, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o JobWarningSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-jobwarningfinder"},"type JobWarningFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type JobWarningFinder interface {\n    FindJobWarning(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*JobWarning, error)\n}\n")),(0,o.kt)("h2",{id:"type-jobwarningfinisher"},"type JobWarningFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type JobWarningFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*JobWarning, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (JobWarningSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-jobwarninginserter"},"type JobWarningInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type JobWarningInserter interface {\n    Insert(o *JobWarning, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-jobwarningreloader"},"type JobWarningReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type JobWarningReloader interface {\n    Reload(o *JobWarning, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *JobWarningSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-jobwarningslice"},"type JobWarningSlice"),(0,o.kt)("p",null,"JobWarningSlice is an alias for a slice of pointers to JobWarning","."," This should almost always be used instead of ","[","]","JobWarning","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type JobWarningSlice []*JobWarning\n")),(0,o.kt)("h2",{id:"type-jobwarningupdater"},"type JobWarningUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type JobWarningUpdater interface {\n    Update(o *JobWarning, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o JobWarningSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-jobwarningupserter"},"type JobWarningUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type JobWarningUpserter interface {\n    Upsert(o *JobWarning, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-kpacklifecycledatum"},"type KpackLifecycleDatum"),(0,o.kt)("p",null,"KpackLifecycleDatum is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type KpackLifecycleDatum struct {\n    ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID        string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    BuildGUID   null.String `boil:"build_guid" json:"build_guid,omitempty" toml:"build_guid" yaml:"build_guid,omitempty"`\n    DropletGUID null.String `boil:"droplet_guid" json:"droplet_guid,omitempty" toml:"droplet_guid" yaml:"droplet_guid,omitempty"`\n    AppGUID     null.String `boil:"app_guid" json:"app_guid,omitempty" toml:"app_guid" yaml:"app_guid,omitempty"`\n    Buildpacks  null.String `boil:"buildpacks" json:"buildpacks,omitempty" toml:"buildpacks" yaml:"buildpacks,omitempty"`\n\n    R   *kpackLifecycleDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   kpackLifecycleDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findkpacklifecycledatum"},"func FindKpackLifecycleDatum"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindKpackLifecycleDatum(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*KpackLifecycleDatum, error)\n")),(0,o.kt)("p",null,"FindKpackLifecycleDatum retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-kpacklifecycledatumdeleter"},"type KpackLifecycleDatumDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type KpackLifecycleDatumDeleter interface {\n    Delete(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o KpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-kpacklifecycledatumfinder"},"type KpackLifecycleDatumFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type KpackLifecycleDatumFinder interface {\n    FindKpackLifecycleDatum(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*KpackLifecycleDatum, error)\n}\n")),(0,o.kt)("h2",{id:"type-kpacklifecycledatumfinisher"},"type KpackLifecycleDatumFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type KpackLifecycleDatumFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*KpackLifecycleDatum, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (KpackLifecycleDatumSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-kpacklifecycledatuminserter"},"type KpackLifecycleDatumInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type KpackLifecycleDatumInserter interface {\n    Insert(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-kpacklifecycledatumreloader"},"type KpackLifecycleDatumReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type KpackLifecycleDatumReloader interface {\n    Reload(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *KpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-kpacklifecycledatumslice"},"type KpackLifecycleDatumSlice"),(0,o.kt)("p",null,"KpackLifecycleDatumSlice is an alias for a slice of pointers to KpackLifecycleDatum","."," This should almost always be used instead of ","[","]","KpackLifecycleDatum","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type KpackLifecycleDatumSlice []*KpackLifecycleDatum\n")),(0,o.kt)("h2",{id:"type-kpacklifecycledatumupdater"},"type KpackLifecycleDatumUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type KpackLifecycleDatumUpdater interface {\n    Update(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o KpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-kpacklifecycledatumupserter"},"type KpackLifecycleDatumUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type KpackLifecycleDatumUpserter interface {\n    Upsert(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-locking"},"type Locking"),(0,o.kt)("p",null,"Locking is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type Locking struct {\n    ID   int    `boil:"id" json:"id" toml:"id" yaml:"id"`\n    Name string `boil:"name" json:"name" toml:"name" yaml:"name"`\n\n    R   *lockingR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   lockingL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findlocking"},"func FindLocking"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindLocking(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Locking, error)\n")),(0,o.kt)("p",null,"FindLocking retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-lockingdeleter"},"type LockingDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type LockingDeleter interface {\n    Delete(o *Locking, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o LockingSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-lockingfinder"},"type LockingFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type LockingFinder interface {\n    FindLocking(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Locking, error)\n}\n")),(0,o.kt)("h2",{id:"type-lockingfinisher"},"type LockingFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type LockingFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*Locking, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (LockingSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-lockinginserter"},"type LockingInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type LockingInserter interface {\n    Insert(o *Locking, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-lockingreloader"},"type LockingReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type LockingReloader interface {\n    Reload(o *Locking, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *LockingSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-lockingslice"},"type LockingSlice"),(0,o.kt)("p",null,"LockingSlice is an alias for a slice of pointers to Locking","."," This should almost always be used instead of ","[","]","Locking","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type LockingSlice []*Locking\n")),(0,o.kt)("h2",{id:"type-lockingupdater"},"type LockingUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type LockingUpdater interface {\n    Update(o *Locking, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o LockingSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-lockingupserter"},"type LockingUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type LockingUpserter interface {\n    Upsert(o *Locking, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-m"},"type M"),(0,o.kt)("p",null,"M type is for providing columns and column values to UpdateAll","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type M map[string]interface{}\n")),(0,o.kt)("h2",{id:"type-organization"},"type Organization"),(0,o.kt)("p",null,"Organization is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type Organization struct {\n    ID                          int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                        string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt                   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt                   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Name                        string      `boil:"name" json:"name" toml:"name" yaml:"name"`\n    BillingEnabled              bool        `boil:"billing_enabled" json:"billing_enabled" toml:"billing_enabled" yaml:"billing_enabled"`\n    QuotaDefinitionID           int         `boil:"quota_definition_id" json:"quota_definition_id" toml:"quota_definition_id" yaml:"quota_definition_id"`\n    Status                      null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`\n    DefaultIsolationSegmentGUID null.String `boil:"default_isolation_segment_guid" json:"default_isolation_segment_guid,omitempty" toml:"default_isolation_segment_guid" yaml:"default_isolation_segment_guid,omitempty"`\n\n    R   *organizationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   organizationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findorganization"},"func FindOrganization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindOrganization(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Organization, error)\n")),(0,o.kt)("p",null,"FindOrganization retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-organizationannotation"},"type OrganizationAnnotation"),(0,o.kt)("p",null,"OrganizationAnnotation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type OrganizationAnnotation struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    Key          null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *organizationAnnotationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   organizationAnnotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findorganizationannotation"},"func FindOrganizationAnnotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindOrganizationAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*OrganizationAnnotation, error)\n")),(0,o.kt)("p",null,"FindOrganizationAnnotation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-organizationannotationdeleter"},"type OrganizationAnnotationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationAnnotationDeleter interface {\n    Delete(o *OrganizationAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o OrganizationAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationannotationfinder"},"type OrganizationAnnotationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationAnnotationFinder interface {\n    FindOrganizationAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*OrganizationAnnotation, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationannotationfinisher"},"type OrganizationAnnotationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationAnnotationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationAnnotation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (OrganizationAnnotationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationannotationinserter"},"type OrganizationAnnotationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationAnnotationInserter interface {\n    Insert(o *OrganizationAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-organizationannotationreloader"},"type OrganizationAnnotationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationAnnotationReloader interface {\n    Reload(o *OrganizationAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *OrganizationAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-organizationannotationslice"},"type OrganizationAnnotationSlice"),(0,o.kt)("p",null,"OrganizationAnnotationSlice is an alias for a slice of pointers to OrganizationAnnotation","."," This should almost always be used instead of ","[","]","OrganizationAnnotation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationAnnotationSlice []*OrganizationAnnotation\n")),(0,o.kt)("h2",{id:"type-organizationannotationupdater"},"type OrganizationAnnotationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationAnnotationUpdater interface {\n    Update(o *OrganizationAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o OrganizationAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationannotationupserter"},"type OrganizationAnnotationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationAnnotationUpserter interface {\n    Upsert(o *OrganizationAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-organizationdeleter"},"type OrganizationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationDeleter interface {\n    Delete(o *Organization, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o OrganizationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationfinder"},"type OrganizationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationFinder interface {\n    FindOrganization(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Organization, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationfinisher"},"type OrganizationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*Organization, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (OrganizationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationinserter"},"type OrganizationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationInserter interface {\n    Insert(o *Organization, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-organizationlabel"},"type OrganizationLabel"),(0,o.kt)("p",null,"OrganizationLabel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type OrganizationLabel struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    KeyName      null.String `boil:"key_name" json:"key_name,omitempty" toml:"key_name" yaml:"key_name,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *organizationLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   organizationLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findorganizationlabel"},"func FindOrganizationLabel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindOrganizationLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*OrganizationLabel, error)\n")),(0,o.kt)("p",null,"FindOrganizationLabel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-organizationlabeldeleter"},"type OrganizationLabelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationLabelDeleter interface {\n    Delete(o *OrganizationLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o OrganizationLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationlabelfinder"},"type OrganizationLabelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationLabelFinder interface {\n    FindOrganizationLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*OrganizationLabel, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationlabelfinisher"},"type OrganizationLabelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationLabelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationLabel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (OrganizationLabelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationlabelinserter"},"type OrganizationLabelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationLabelInserter interface {\n    Insert(o *OrganizationLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-organizationlabelreloader"},"type OrganizationLabelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationLabelReloader interface {\n    Reload(o *OrganizationLabel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *OrganizationLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-organizationlabelslice"},"type OrganizationLabelSlice"),(0,o.kt)("p",null,"OrganizationLabelSlice is an alias for a slice of pointers to OrganizationLabel","."," This should almost always be used instead of ","[","]","OrganizationLabel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationLabelSlice []*OrganizationLabel\n")),(0,o.kt)("h2",{id:"type-organizationlabelupdater"},"type OrganizationLabelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationLabelUpdater interface {\n    Update(o *OrganizationLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o OrganizationLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationlabelupserter"},"type OrganizationLabelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationLabelUpserter interface {\n    Upsert(o *OrganizationLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-organizationreloader"},"type OrganizationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationReloader interface {\n    Reload(o *Organization, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *OrganizationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-organizationslice"},"type OrganizationSlice"),(0,o.kt)("p",null,"OrganizationSlice is an alias for a slice of pointers to Organization","."," This should almost always be used instead of ","[","]","Organization","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationSlice []*Organization\n")),(0,o.kt)("h2",{id:"type-organizationupdater"},"type OrganizationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationUpdater interface {\n    Update(o *Organization, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o OrganizationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationupserter"},"type OrganizationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationUpserter interface {\n    Upsert(o *Organization, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-organizationsauditor"},"type OrganizationsAuditor"),(0,o.kt)("p",null,"OrganizationsAuditor is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type OrganizationsAuditor struct {\n    OrganizationID          int         `boil:"organization_id" json:"organization_id" toml:"organization_id" yaml:"organization_id"`\n    UserID                  int         `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`\n    OrganizationsAuditorsPK int         `boil:"organizations_auditors_pk" json:"organizations_auditors_pk" toml:"organizations_auditors_pk" yaml:"organizations_auditors_pk"`\n    RoleGUID                null.String `boil:"role_guid" json:"role_guid,omitempty" toml:"role_guid" yaml:"role_guid,omitempty"`\n    CreatedAt               time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt               time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`\n\n    R   *organizationsAuditorR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   organizationsAuditorL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findorganizationsauditor"},"func FindOrganizationsAuditor"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindOrganizationsAuditor(ctx context.Context, exec boil.ContextExecutor, organizationsAuditorsPK int, selectCols ...string) (*OrganizationsAuditor, error)\n")),(0,o.kt)("p",null,"FindOrganizationsAuditor retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-organizationsauditordeleter"},"type OrganizationsAuditorDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsAuditorDeleter interface {\n    Delete(o *OrganizationsAuditor, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o OrganizationsAuditorSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationsauditorfinder"},"type OrganizationsAuditorFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsAuditorFinder interface {\n    FindOrganizationsAuditor(ctx context.Context, exec boil.ContextExecutor, organizationsAuditorsPK int, selectCols ...string) (*OrganizationsAuditor, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationsauditorfinisher"},"type OrganizationsAuditorFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsAuditorFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationsAuditor, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (OrganizationsAuditorSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationsauditorinserter"},"type OrganizationsAuditorInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsAuditorInserter interface {\n    Insert(o *OrganizationsAuditor, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-organizationsauditorreloader"},"type OrganizationsAuditorReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsAuditorReloader interface {\n    Reload(o *OrganizationsAuditor, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *OrganizationsAuditorSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-organizationsauditorslice"},"type OrganizationsAuditorSlice"),(0,o.kt)("p",null,"OrganizationsAuditorSlice is an alias for a slice of pointers to OrganizationsAuditor","."," This should almost always be used instead of ","[","]","OrganizationsAuditor","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsAuditorSlice []*OrganizationsAuditor\n")),(0,o.kt)("h2",{id:"type-organizationsauditorupdater"},"type OrganizationsAuditorUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsAuditorUpdater interface {\n    Update(o *OrganizationsAuditor, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o OrganizationsAuditorSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationsauditorupserter"},"type OrganizationsAuditorUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsAuditorUpserter interface {\n    Upsert(o *OrganizationsAuditor, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-organizationsbillingmanager"},"type OrganizationsBillingManager"),(0,o.kt)("p",null,"OrganizationsBillingManager is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type OrganizationsBillingManager struct {\n    OrganizationID                 int         `boil:"organization_id" json:"organization_id" toml:"organization_id" yaml:"organization_id"`\n    UserID                         int         `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`\n    OrganizationsBillingManagersPK int         `boil:"organizations_billing_managers_pk" json:"organizations_billing_managers_pk" toml:"organizations_billing_managers_pk" yaml:"organizations_billing_managers_pk"`\n    RoleGUID                       null.String `boil:"role_guid" json:"role_guid,omitempty" toml:"role_guid" yaml:"role_guid,omitempty"`\n    CreatedAt                      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt                      time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`\n\n    R   *organizationsBillingManagerR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   organizationsBillingManagerL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findorganizationsbillingmanager"},"func FindOrganizationsBillingManager"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindOrganizationsBillingManager(ctx context.Context, exec boil.ContextExecutor, organizationsBillingManagersPK int, selectCols ...string) (*OrganizationsBillingManager, error)\n")),(0,o.kt)("p",null,"FindOrganizationsBillingManager retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-organizationsbillingmanagerdeleter"},"type OrganizationsBillingManagerDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsBillingManagerDeleter interface {\n    Delete(o *OrganizationsBillingManager, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o OrganizationsBillingManagerSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationsbillingmanagerfinder"},"type OrganizationsBillingManagerFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsBillingManagerFinder interface {\n    FindOrganizationsBillingManager(ctx context.Context, exec boil.ContextExecutor, organizationsBillingManagersPK int, selectCols ...string) (*OrganizationsBillingManager, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationsbillingmanagerfinisher"},"type OrganizationsBillingManagerFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsBillingManagerFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationsBillingManager, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (OrganizationsBillingManagerSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationsbillingmanagerinserter"},"type OrganizationsBillingManagerInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsBillingManagerInserter interface {\n    Insert(o *OrganizationsBillingManager, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-organizationsbillingmanagerreloader"},"type OrganizationsBillingManagerReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsBillingManagerReloader interface {\n    Reload(o *OrganizationsBillingManager, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *OrganizationsBillingManagerSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-organizationsbillingmanagerslice"},"type OrganizationsBillingManagerSlice"),(0,o.kt)("p",null,"OrganizationsBillingManagerSlice is an alias for a slice of pointers to OrganizationsBillingManager","."," This should almost always be used instead of ","[","]","OrganizationsBillingManager","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsBillingManagerSlice []*OrganizationsBillingManager\n")),(0,o.kt)("h2",{id:"type-organizationsbillingmanagerupdater"},"type OrganizationsBillingManagerUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsBillingManagerUpdater interface {\n    Update(o *OrganizationsBillingManager, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o OrganizationsBillingManagerSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationsbillingmanagerupserter"},"type OrganizationsBillingManagerUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsBillingManagerUpserter interface {\n    Upsert(o *OrganizationsBillingManager, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-organizationsmanager"},"type OrganizationsManager"),(0,o.kt)("p",null,"OrganizationsManager is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type OrganizationsManager struct {\n    OrganizationID          int         `boil:"organization_id" json:"organization_id" toml:"organization_id" yaml:"organization_id"`\n    UserID                  int         `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`\n    OrganizationsManagersPK int         `boil:"organizations_managers_pk" json:"organizations_managers_pk" toml:"organizations_managers_pk" yaml:"organizations_managers_pk"`\n    RoleGUID                null.String `boil:"role_guid" json:"role_guid,omitempty" toml:"role_guid" yaml:"role_guid,omitempty"`\n    CreatedAt               time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt               time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`\n\n    R   *organizationsManagerR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   organizationsManagerL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findorganizationsmanager"},"func FindOrganizationsManager"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindOrganizationsManager(ctx context.Context, exec boil.ContextExecutor, organizationsManagersPK int, selectCols ...string) (*OrganizationsManager, error)\n")),(0,o.kt)("p",null,"FindOrganizationsManager retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-organizationsmanagerdeleter"},"type OrganizationsManagerDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsManagerDeleter interface {\n    Delete(o *OrganizationsManager, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o OrganizationsManagerSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationsmanagerfinder"},"type OrganizationsManagerFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsManagerFinder interface {\n    FindOrganizationsManager(ctx context.Context, exec boil.ContextExecutor, organizationsManagersPK int, selectCols ...string) (*OrganizationsManager, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationsmanagerfinisher"},"type OrganizationsManagerFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsManagerFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationsManager, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (OrganizationsManagerSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationsmanagerinserter"},"type OrganizationsManagerInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsManagerInserter interface {\n    Insert(o *OrganizationsManager, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-organizationsmanagerreloader"},"type OrganizationsManagerReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsManagerReloader interface {\n    Reload(o *OrganizationsManager, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *OrganizationsManagerSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-organizationsmanagerslice"},"type OrganizationsManagerSlice"),(0,o.kt)("p",null,"OrganizationsManagerSlice is an alias for a slice of pointers to OrganizationsManager","."," This should almost always be used instead of ","[","]","OrganizationsManager","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsManagerSlice []*OrganizationsManager\n")),(0,o.kt)("h2",{id:"type-organizationsmanagerupdater"},"type OrganizationsManagerUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsManagerUpdater interface {\n    Update(o *OrganizationsManager, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o OrganizationsManagerSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationsmanagerupserter"},"type OrganizationsManagerUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsManagerUpserter interface {\n    Upsert(o *OrganizationsManager, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-organizationsprivatedomain"},"type OrganizationsPrivateDomain"),(0,o.kt)("p",null,"OrganizationsPrivateDomain is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type OrganizationsPrivateDomain struct {\n    OrganizationID                int `boil:"organization_id" json:"organization_id" toml:"organization_id" yaml:"organization_id"`\n    PrivateDomainID               int `boil:"private_domain_id" json:"private_domain_id" toml:"private_domain_id" yaml:"private_domain_id"`\n    OrganizationsPrivateDomainsPK int `boil:"organizations_private_domains_pk" json:"organizations_private_domains_pk" toml:"organizations_private_domains_pk" yaml:"organizations_private_domains_pk"`\n\n    R   *organizationsPrivateDomainR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   organizationsPrivateDomainL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findorganizationsprivatedomain"},"func FindOrganizationsPrivateDomain"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindOrganizationsPrivateDomain(ctx context.Context, exec boil.ContextExecutor, organizationsPrivateDomainsPK int, selectCols ...string) (*OrganizationsPrivateDomain, error)\n")),(0,o.kt)("p",null,"FindOrganizationsPrivateDomain retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-organizationsprivatedomaindeleter"},"type OrganizationsPrivateDomainDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsPrivateDomainDeleter interface {\n    Delete(o *OrganizationsPrivateDomain, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o OrganizationsPrivateDomainSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationsprivatedomainfinder"},"type OrganizationsPrivateDomainFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsPrivateDomainFinder interface {\n    FindOrganizationsPrivateDomain(ctx context.Context, exec boil.ContextExecutor, organizationsPrivateDomainsPK int, selectCols ...string) (*OrganizationsPrivateDomain, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationsprivatedomainfinisher"},"type OrganizationsPrivateDomainFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsPrivateDomainFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationsPrivateDomain, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (OrganizationsPrivateDomainSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationsprivatedomaininserter"},"type OrganizationsPrivateDomainInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsPrivateDomainInserter interface {\n    Insert(o *OrganizationsPrivateDomain, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-organizationsprivatedomainreloader"},"type OrganizationsPrivateDomainReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsPrivateDomainReloader interface {\n    Reload(o *OrganizationsPrivateDomain, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *OrganizationsPrivateDomainSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-organizationsprivatedomainslice"},"type OrganizationsPrivateDomainSlice"),(0,o.kt)("p",null,"OrganizationsPrivateDomainSlice is an alias for a slice of pointers to OrganizationsPrivateDomain","."," This should almost always be used instead of ","[","]","OrganizationsPrivateDomain","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsPrivateDomainSlice []*OrganizationsPrivateDomain\n")),(0,o.kt)("h2",{id:"type-organizationsprivatedomainupdater"},"type OrganizationsPrivateDomainUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsPrivateDomainUpdater interface {\n    Update(o *OrganizationsPrivateDomain, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o OrganizationsPrivateDomainSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationsprivatedomainupserter"},"type OrganizationsPrivateDomainUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsPrivateDomainUpserter interface {\n    Upsert(o *OrganizationsPrivateDomain, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-organizationsuser"},"type OrganizationsUser"),(0,o.kt)("p",null,"OrganizationsUser is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type OrganizationsUser struct {\n    OrganizationID       int         `boil:"organization_id" json:"organization_id" toml:"organization_id" yaml:"organization_id"`\n    UserID               int         `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`\n    OrganizationsUsersPK int         `boil:"organizations_users_pk" json:"organizations_users_pk" toml:"organizations_users_pk" yaml:"organizations_users_pk"`\n    RoleGUID             null.String `boil:"role_guid" json:"role_guid,omitempty" toml:"role_guid" yaml:"role_guid,omitempty"`\n    CreatedAt            time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt            time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`\n\n    R   *organizationsUserR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   organizationsUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findorganizationsuser"},"func FindOrganizationsUser"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindOrganizationsUser(ctx context.Context, exec boil.ContextExecutor, organizationsUsersPK int, selectCols ...string) (*OrganizationsUser, error)\n")),(0,o.kt)("p",null,"FindOrganizationsUser retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-organizationsuserdeleter"},"type OrganizationsUserDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsUserDeleter interface {\n    Delete(o *OrganizationsUser, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o OrganizationsUserSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationsuserfinder"},"type OrganizationsUserFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsUserFinder interface {\n    FindOrganizationsUser(ctx context.Context, exec boil.ContextExecutor, organizationsUsersPK int, selectCols ...string) (*OrganizationsUser, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationsuserfinisher"},"type OrganizationsUserFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsUserFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationsUser, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (OrganizationsUserSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationsuserinserter"},"type OrganizationsUserInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsUserInserter interface {\n    Insert(o *OrganizationsUser, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-organizationsuserreloader"},"type OrganizationsUserReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsUserReloader interface {\n    Reload(o *OrganizationsUser, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *OrganizationsUserSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-organizationsuserslice"},"type OrganizationsUserSlice"),(0,o.kt)("p",null,"OrganizationsUserSlice is an alias for a slice of pointers to OrganizationsUser","."," This should almost always be used instead of ","[","]","OrganizationsUser","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsUserSlice []*OrganizationsUser\n")),(0,o.kt)("h2",{id:"type-organizationsuserupdater"},"type OrganizationsUserUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsUserUpdater interface {\n    Update(o *OrganizationsUser, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o OrganizationsUserSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-organizationsuserupserter"},"type OrganizationsUserUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrganizationsUserUpserter interface {\n    Upsert(o *OrganizationsUser, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-orphanedblob"},"type OrphanedBlob"),(0,o.kt)("p",null,"OrphanedBlob is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type OrphanedBlob struct {\n    ID            int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID          string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt     null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    BlobKey       null.String `boil:"blob_key" json:"blob_key,omitempty" toml:"blob_key" yaml:"blob_key,omitempty"`\n    DirtyCount    null.Int    `boil:"dirty_count" json:"dirty_count,omitempty" toml:"dirty_count" yaml:"dirty_count,omitempty"`\n    BlobstoreType null.String `boil:"blobstore_type" json:"blobstore_type,omitempty" toml:"blobstore_type" yaml:"blobstore_type,omitempty"`\n\n    R   *orphanedBlobR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   orphanedBlobL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findorphanedblob"},"func FindOrphanedBlob"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindOrphanedBlob(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*OrphanedBlob, error)\n")),(0,o.kt)("p",null,"FindOrphanedBlob retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-orphanedblobdeleter"},"type OrphanedBlobDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrphanedBlobDeleter interface {\n    Delete(o *OrphanedBlob, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o OrphanedBlobSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-orphanedblobfinder"},"type OrphanedBlobFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrphanedBlobFinder interface {\n    FindOrphanedBlob(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*OrphanedBlob, error)\n}\n")),(0,o.kt)("h2",{id:"type-orphanedblobfinisher"},"type OrphanedBlobFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrphanedBlobFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*OrphanedBlob, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (OrphanedBlobSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-orphanedblobinserter"},"type OrphanedBlobInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrphanedBlobInserter interface {\n    Insert(o *OrphanedBlob, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-orphanedblobreloader"},"type OrphanedBlobReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrphanedBlobReloader interface {\n    Reload(o *OrphanedBlob, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *OrphanedBlobSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-orphanedblobslice"},"type OrphanedBlobSlice"),(0,o.kt)("p",null,"OrphanedBlobSlice is an alias for a slice of pointers to OrphanedBlob","."," This should almost always be used instead of ","[","]","OrphanedBlob","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrphanedBlobSlice []*OrphanedBlob\n")),(0,o.kt)("h2",{id:"type-orphanedblobupdater"},"type OrphanedBlobUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrphanedBlobUpdater interface {\n    Update(o *OrphanedBlob, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o OrphanedBlobSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-orphanedblobupserter"},"type OrphanedBlobUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type OrphanedBlobUpserter interface {\n    Upsert(o *OrphanedBlob, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-package"},"type Package"),(0,o.kt)("p",null,"Package is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type Package struct {\n    ID                      int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                    string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt               time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt               null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Type                    null.String `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`\n    PackageHash             null.String `boil:"package_hash" json:"package_hash,omitempty" toml:"package_hash" yaml:"package_hash,omitempty"`\n    State                   string      `boil:"state" json:"state" toml:"state" yaml:"state"`\n    Error                   null.String `boil:"error" json:"error,omitempty" toml:"error" yaml:"error,omitempty"`\n    AppGUID                 null.String `boil:"app_guid" json:"app_guid,omitempty" toml:"app_guid" yaml:"app_guid,omitempty"`\n    DockerImage             null.String `boil:"docker_image" json:"docker_image,omitempty" toml:"docker_image" yaml:"docker_image,omitempty"`\n    Sha256Checksum          null.String `boil:"sha256_checksum" json:"sha256_checksum,omitempty" toml:"sha256_checksum" yaml:"sha256_checksum,omitempty"`\n    DockerUsername          null.String `boil:"docker_username" json:"docker_username,omitempty" toml:"docker_username" yaml:"docker_username,omitempty"`\n    DockerPasswordSalt      null.String `boil:"docker_password_salt" json:"docker_password_salt,omitempty" toml:"docker_password_salt" yaml:"docker_password_salt,omitempty"`\n    EncryptedDockerPassword null.String `boil:"encrypted_docker_password" json:"encrypted_docker_password,omitempty" toml:"encrypted_docker_password" yaml:"encrypted_docker_password,omitempty"`\n    EncryptionKeyLabel      null.String `boil:"encryption_key_label" json:"encryption_key_label,omitempty" toml:"encryption_key_label" yaml:"encryption_key_label,omitempty"`\n    EncryptionIterations    int         `boil:"encryption_iterations" json:"encryption_iterations" toml:"encryption_iterations" yaml:"encryption_iterations"`\n\n    R   *packageR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   packageL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findpackage"},"func FindPackage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindPackage(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Package, error)\n")),(0,o.kt)("p",null,"FindPackage retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-packageannotation"},"type PackageAnnotation"),(0,o.kt)("p",null,"PackageAnnotation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type PackageAnnotation struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    Key          null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *packageAnnotationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   packageAnnotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findpackageannotation"},"func FindPackageAnnotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindPackageAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PackageAnnotation, error)\n")),(0,o.kt)("p",null,"FindPackageAnnotation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-packageannotationdeleter"},"type PackageAnnotationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type PackageAnnotationDeleter interface {\n    Delete(o *PackageAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o PackageAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-packageannotationfinder"},"type PackageAnnotationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type PackageAnnotationFinder interface {\n    FindPackageAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PackageAnnotation, error)\n}\n")),(0,o.kt)("h2",{id:"type-packageannotationfinisher"},"type PackageAnnotationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type PackageAnnotationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*PackageAnnotation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (PackageAnnotationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-packageannotationinserter"},"type PackageAnnotationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type PackageAnnotationInserter interface {\n    Insert(o *PackageAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-packageannotationreloader"},"type PackageAnnotationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type PackageAnnotationReloader interface {\n    Reload(o *PackageAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *PackageAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-packageannotationslice"},"type PackageAnnotationSlice"),(0,o.kt)("p",null,"PackageAnnotationSlice is an alias for a slice of pointers to PackageAnnotation","."," This should almost always be used instead of ","[","]","PackageAnnotation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type PackageAnnotationSlice []*PackageAnnotation\n")),(0,o.kt)("h2",{id:"type-packageannotationupdater"},"type PackageAnnotationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type PackageAnnotationUpdater interface {\n    Update(o *PackageAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o PackageAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-packageannotationupserter"},"type PackageAnnotationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type PackageAnnotationUpserter interface {\n    Upsert(o *PackageAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-packagedeleter"},"type PackageDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type PackageDeleter interface {\n    Delete(o *Package, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o PackageSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-packagefinder"},"type PackageFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type PackageFinder interface {\n    FindPackage(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Package, error)\n}\n")),(0,o.kt)("h2",{id:"type-packagefinisher"},"type PackageFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type PackageFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*Package, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (PackageSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-packageinserter"},"type PackageInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type PackageInserter interface {\n    Insert(o *Package, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-packagelabel"},"type PackageLabel"),(0,o.kt)("p",null,"PackageLabel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type PackageLabel struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    KeyName      null.String `boil:"key_name" json:"key_name,omitempty" toml:"key_name" yaml:"key_name,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *packageLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   packageLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findpackagelabel"},"func FindPackageLabel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindPackageLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PackageLabel, error)\n")),(0,o.kt)("p",null,"FindPackageLabel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-packagelabeldeleter"},"type PackageLabelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type PackageLabelDeleter interface {\n    Delete(o *PackageLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o PackageLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-packagelabelfinder"},"type PackageLabelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type PackageLabelFinder interface {\n    FindPackageLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PackageLabel, error)\n}\n")),(0,o.kt)("h2",{id:"type-packagelabelfinisher"},"type PackageLabelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type PackageLabelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*PackageLabel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (PackageLabelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-packagelabelinserter"},"type PackageLabelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type PackageLabelInserter interface {\n    Insert(o *PackageLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-packagelabelreloader"},"type PackageLabelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type PackageLabelReloader interface {\n    Reload(o *PackageLabel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *PackageLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-packagelabelslice"},"type PackageLabelSlice"),(0,o.kt)("p",null,"PackageLabelSlice is an alias for a slice of pointers to PackageLabel","."," This should almost always be used instead of ","[","]","PackageLabel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type PackageLabelSlice []*PackageLabel\n")),(0,o.kt)("h2",{id:"type-packagelabelupdater"},"type PackageLabelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type PackageLabelUpdater interface {\n    Update(o *PackageLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o PackageLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-packagelabelupserter"},"type PackageLabelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type PackageLabelUpserter interface {\n    Upsert(o *PackageLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-packagereloader"},"type PackageReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type PackageReloader interface {\n    Reload(o *Package, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *PackageSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-packageslice"},"type PackageSlice"),(0,o.kt)("p",null,"PackageSlice is an alias for a slice of pointers to Package","."," This should almost always be used instead of ","[","]","Package","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type PackageSlice []*Package\n")),(0,o.kt)("h2",{id:"type-packageupdater"},"type PackageUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type PackageUpdater interface {\n    Update(o *Package, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o PackageSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-packageupserter"},"type PackageUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type PackageUpserter interface {\n    Upsert(o *Package, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-process"},"type Process"),(0,o.kt)("p",null,"Process is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type Process struct {\n    ID                             int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                           string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt                      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt                      null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Production                     null.Bool   `boil:"production" json:"production,omitempty" toml:"production" yaml:"production,omitempty"`\n    Memory                         null.Int    `boil:"memory" json:"memory,omitempty" toml:"memory" yaml:"memory,omitempty"`\n    Instances                      null.Int    `boil:"instances" json:"instances,omitempty" toml:"instances" yaml:"instances,omitempty"`\n    FileDescriptors                null.Int    `boil:"file_descriptors" json:"file_descriptors,omitempty" toml:"file_descriptors" yaml:"file_descriptors,omitempty"`\n    DiskQuota                      null.Int    `boil:"disk_quota" json:"disk_quota,omitempty" toml:"disk_quota" yaml:"disk_quota,omitempty"`\n    State                          string      `boil:"state" json:"state" toml:"state" yaml:"state"`\n    Version                        null.String `boil:"version" json:"version,omitempty" toml:"version" yaml:"version,omitempty"`\n    Metadata                       string      `boil:"metadata" json:"metadata" toml:"metadata" yaml:"metadata"`\n    DetectedBuildpack              null.String `boil:"detected_buildpack" json:"detected_buildpack,omitempty" toml:"detected_buildpack" yaml:"detected_buildpack,omitempty"`\n    NotDeleted                     null.Bool   `boil:"not_deleted" json:"not_deleted,omitempty" toml:"not_deleted" yaml:"not_deleted,omitempty"`\n    HealthCheckTimeout             null.Int    `boil:"health_check_timeout" json:"health_check_timeout,omitempty" toml:"health_check_timeout" yaml:"health_check_timeout,omitempty"`\n    Diego                          null.Bool   `boil:"diego" json:"diego,omitempty" toml:"diego" yaml:"diego,omitempty"`\n    PackageUpdatedAt               null.Time   `boil:"package_updated_at" json:"package_updated_at,omitempty" toml:"package_updated_at" yaml:"package_updated_at,omitempty"`\n    AppGUID                        null.String `boil:"app_guid" json:"app_guid,omitempty" toml:"app_guid" yaml:"app_guid,omitempty"`\n    Type                           null.String `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`\n    HealthCheckType                null.String `boil:"health_check_type" json:"health_check_type,omitempty" toml:"health_check_type" yaml:"health_check_type,omitempty"`\n    Command                        null.String `boil:"command" json:"command,omitempty" toml:"command" yaml:"command,omitempty"`\n    EnableSSH                      null.Bool   `boil:"enable_ssh" json:"enable_ssh,omitempty" toml:"enable_ssh" yaml:"enable_ssh,omitempty"`\n    EncryptedDockerCredentialsJSON null.String `boil:"encrypted_docker_credentials_json" json:"encrypted_docker_credentials_json,omitempty" toml:"encrypted_docker_credentials_json" yaml:"encrypted_docker_credentials_json,omitempty"`\n    DockerSalt                     null.String `boil:"docker_salt" json:"docker_salt,omitempty" toml:"docker_salt" yaml:"docker_salt,omitempty"`\n    Ports                          null.String `boil:"ports" json:"ports,omitempty" toml:"ports" yaml:"ports,omitempty"`\n    HealthCheckHTTPEndpoint        null.String `boil:"health_check_http_endpoint" json:"health_check_http_endpoint,omitempty" toml:"health_check_http_endpoint" yaml:"health_check_http_endpoint,omitempty"`\n    HealthCheckInvocationTimeout   null.Int    `boil:"health_check_invocation_timeout" json:"health_check_invocation_timeout,omitempty" toml:"health_check_invocation_timeout" yaml:"health_check_invocation_timeout,omitempty"`\n    RevisionGUID                   null.String `boil:"revision_guid" json:"revision_guid,omitempty" toml:"revision_guid" yaml:"revision_guid,omitempty"`\n\n    R   *processR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   processL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findprocess"},"func FindProcess"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindProcess(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Process, error)\n")),(0,o.kt)("p",null,"FindProcess retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-processannotation"},"type ProcessAnnotation"),(0,o.kt)("p",null,"ProcessAnnotation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ProcessAnnotation struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    Key          null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *processAnnotationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   processAnnotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findprocessannotation"},"func FindProcessAnnotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindProcessAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ProcessAnnotation, error)\n")),(0,o.kt)("p",null,"FindProcessAnnotation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-processannotationdeleter"},"type ProcessAnnotationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ProcessAnnotationDeleter interface {\n    Delete(o *ProcessAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ProcessAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-processannotationfinder"},"type ProcessAnnotationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ProcessAnnotationFinder interface {\n    FindProcessAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ProcessAnnotation, error)\n}\n")),(0,o.kt)("h2",{id:"type-processannotationfinisher"},"type ProcessAnnotationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ProcessAnnotationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ProcessAnnotation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ProcessAnnotationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-processannotationinserter"},"type ProcessAnnotationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ProcessAnnotationInserter interface {\n    Insert(o *ProcessAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-processannotationreloader"},"type ProcessAnnotationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ProcessAnnotationReloader interface {\n    Reload(o *ProcessAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ProcessAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-processannotationslice"},"type ProcessAnnotationSlice"),(0,o.kt)("p",null,"ProcessAnnotationSlice is an alias for a slice of pointers to ProcessAnnotation","."," This should almost always be used instead of ","[","]","ProcessAnnotation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ProcessAnnotationSlice []*ProcessAnnotation\n")),(0,o.kt)("h2",{id:"type-processannotationupdater"},"type ProcessAnnotationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ProcessAnnotationUpdater interface {\n    Update(o *ProcessAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ProcessAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-processannotationupserter"},"type ProcessAnnotationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ProcessAnnotationUpserter interface {\n    Upsert(o *ProcessAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-processdeleter"},"type ProcessDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ProcessDeleter interface {\n    Delete(o *Process, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ProcessSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-processfinder"},"type ProcessFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ProcessFinder interface {\n    FindProcess(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Process, error)\n}\n")),(0,o.kt)("h2",{id:"type-processfinisher"},"type ProcessFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ProcessFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*Process, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ProcessSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-processinserter"},"type ProcessInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ProcessInserter interface {\n    Insert(o *Process, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-processlabel"},"type ProcessLabel"),(0,o.kt)("p",null,"ProcessLabel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ProcessLabel struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    KeyName      null.String `boil:"key_name" json:"key_name,omitempty" toml:"key_name" yaml:"key_name,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *processLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   processLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findprocesslabel"},"func FindProcessLabel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindProcessLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ProcessLabel, error)\n")),(0,o.kt)("p",null,"FindProcessLabel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-processlabeldeleter"},"type ProcessLabelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ProcessLabelDeleter interface {\n    Delete(o *ProcessLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ProcessLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-processlabelfinder"},"type ProcessLabelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ProcessLabelFinder interface {\n    FindProcessLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ProcessLabel, error)\n}\n")),(0,o.kt)("h2",{id:"type-processlabelfinisher"},"type ProcessLabelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ProcessLabelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ProcessLabel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ProcessLabelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-processlabelinserter"},"type ProcessLabelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ProcessLabelInserter interface {\n    Insert(o *ProcessLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-processlabelreloader"},"type ProcessLabelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ProcessLabelReloader interface {\n    Reload(o *ProcessLabel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ProcessLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-processlabelslice"},"type ProcessLabelSlice"),(0,o.kt)("p",null,"ProcessLabelSlice is an alias for a slice of pointers to ProcessLabel","."," This should almost always be used instead of ","[","]","ProcessLabel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ProcessLabelSlice []*ProcessLabel\n")),(0,o.kt)("h2",{id:"type-processlabelupdater"},"type ProcessLabelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ProcessLabelUpdater interface {\n    Update(o *ProcessLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ProcessLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-processlabelupserter"},"type ProcessLabelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ProcessLabelUpserter interface {\n    Upsert(o *ProcessLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-processreloader"},"type ProcessReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ProcessReloader interface {\n    Reload(o *Process, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ProcessSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-processslice"},"type ProcessSlice"),(0,o.kt)("p",null,"ProcessSlice is an alias for a slice of pointers to Process","."," This should almost always be used instead of ","[","]","Process","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ProcessSlice []*Process\n")),(0,o.kt)("h2",{id:"type-processupdater"},"type ProcessUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ProcessUpdater interface {\n    Update(o *Process, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ProcessSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-processupserter"},"type ProcessUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ProcessUpserter interface {\n    Upsert(o *Process, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-quotadefinition"},"type QuotaDefinition"),(0,o.kt)("p",null,"QuotaDefinition is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type QuotaDefinition struct {\n    ID                      int       `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                    string    `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt               time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt               null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Name                    string    `boil:"name" json:"name" toml:"name" yaml:"name"`\n    NonBasicServicesAllowed bool      `boil:"non_basic_services_allowed" json:"non_basic_services_allowed" toml:"non_basic_services_allowed" yaml:"non_basic_services_allowed"`\n    TotalServices           int       `boil:"total_services" json:"total_services" toml:"total_services" yaml:"total_services"`\n    MemoryLimit             int       `boil:"memory_limit" json:"memory_limit" toml:"memory_limit" yaml:"memory_limit"`\n    TotalRoutes             int       `boil:"total_routes" json:"total_routes" toml:"total_routes" yaml:"total_routes"`\n    InstanceMemoryLimit     int       `boil:"instance_memory_limit" json:"instance_memory_limit" toml:"instance_memory_limit" yaml:"instance_memory_limit"`\n    TotalPrivateDomains     int       `boil:"total_private_domains" json:"total_private_domains" toml:"total_private_domains" yaml:"total_private_domains"`\n    AppInstanceLimit        null.Int  `boil:"app_instance_limit" json:"app_instance_limit,omitempty" toml:"app_instance_limit" yaml:"app_instance_limit,omitempty"`\n    AppTaskLimit            null.Int  `boil:"app_task_limit" json:"app_task_limit,omitempty" toml:"app_task_limit" yaml:"app_task_limit,omitempty"`\n    TotalServiceKeys        null.Int  `boil:"total_service_keys" json:"total_service_keys,omitempty" toml:"total_service_keys" yaml:"total_service_keys,omitempty"`\n    TotalReservedRoutePorts null.Int  `boil:"total_reserved_route_ports" json:"total_reserved_route_ports,omitempty" toml:"total_reserved_route_ports" yaml:"total_reserved_route_ports,omitempty"`\n\n    R   *quotaDefinitionR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   quotaDefinitionL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findquotadefinition"},"func FindQuotaDefinition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindQuotaDefinition(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*QuotaDefinition, error)\n")),(0,o.kt)("p",null,"FindQuotaDefinition retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-quotadefinitiondeleter"},"type QuotaDefinitionDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type QuotaDefinitionDeleter interface {\n    Delete(o *QuotaDefinition, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o QuotaDefinitionSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-quotadefinitionfinder"},"type QuotaDefinitionFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type QuotaDefinitionFinder interface {\n    FindQuotaDefinition(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*QuotaDefinition, error)\n}\n")),(0,o.kt)("h2",{id:"type-quotadefinitionfinisher"},"type QuotaDefinitionFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type QuotaDefinitionFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*QuotaDefinition, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (QuotaDefinitionSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-quotadefinitioninserter"},"type QuotaDefinitionInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type QuotaDefinitionInserter interface {\n    Insert(o *QuotaDefinition, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-quotadefinitionreloader"},"type QuotaDefinitionReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type QuotaDefinitionReloader interface {\n    Reload(o *QuotaDefinition, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *QuotaDefinitionSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-quotadefinitionslice"},"type QuotaDefinitionSlice"),(0,o.kt)("p",null,"QuotaDefinitionSlice is an alias for a slice of pointers to QuotaDefinition","."," This should almost always be used instead of ","[","]","QuotaDefinition","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type QuotaDefinitionSlice []*QuotaDefinition\n")),(0,o.kt)("h2",{id:"type-quotadefinitionupdater"},"type QuotaDefinitionUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type QuotaDefinitionUpdater interface {\n    Update(o *QuotaDefinition, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o QuotaDefinitionSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-quotadefinitionupserter"},"type QuotaDefinitionUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type QuotaDefinitionUpserter interface {\n    Upsert(o *QuotaDefinition, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-requestcount"},"type RequestCount"),(0,o.kt)("p",null,"RequestCount is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type RequestCount struct {\n    ID         int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    UserGUID   null.String `boil:"user_guid" json:"user_guid,omitempty" toml:"user_guid" yaml:"user_guid,omitempty"`\n    Count      null.Int    `boil:"count" json:"count,omitempty" toml:"count" yaml:"count,omitempty"`\n    ValidUntil null.Time   `boil:"valid_until" json:"valid_until,omitempty" toml:"valid_until" yaml:"valid_until,omitempty"`\n\n    R   *requestCountR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   requestCountL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findrequestcount"},"func FindRequestCount"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindRequestCount(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RequestCount, error)\n")),(0,o.kt)("p",null,"FindRequestCount retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-requestcountdeleter"},"type RequestCountDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RequestCountDeleter interface {\n    Delete(o *RequestCount, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o RequestCountSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-requestcountfinder"},"type RequestCountFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RequestCountFinder interface {\n    FindRequestCount(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RequestCount, error)\n}\n")),(0,o.kt)("h2",{id:"type-requestcountfinisher"},"type RequestCountFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RequestCountFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*RequestCount, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (RequestCountSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-requestcountinserter"},"type RequestCountInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RequestCountInserter interface {\n    Insert(o *RequestCount, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-requestcountreloader"},"type RequestCountReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RequestCountReloader interface {\n    Reload(o *RequestCount, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *RequestCountSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-requestcountslice"},"type RequestCountSlice"),(0,o.kt)("p",null,"RequestCountSlice is an alias for a slice of pointers to RequestCount","."," This should almost always be used instead of ","[","]","RequestCount","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RequestCountSlice []*RequestCount\n")),(0,o.kt)("h2",{id:"type-requestcountupdater"},"type RequestCountUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RequestCountUpdater interface {\n    Update(o *RequestCount, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o RequestCountSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-requestcountupserter"},"type RequestCountUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RequestCountUpserter interface {\n    Upsert(o *RequestCount, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-revision"},"type Revision"),(0,o.kt)("p",null,"Revision is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type Revision struct {\n    ID                            int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                          string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt                     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt                     null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    AppGUID                       null.String `boil:"app_guid" json:"app_guid,omitempty" toml:"app_guid" yaml:"app_guid,omitempty"`\n    Version                       null.Int    `boil:"version" json:"version,omitempty" toml:"version" yaml:"version,omitempty"`\n    DropletGUID                   null.String `boil:"droplet_guid" json:"droplet_guid,omitempty" toml:"droplet_guid" yaml:"droplet_guid,omitempty"`\n    EncryptedEnvironmentVariables null.String `boil:"encrypted_environment_variables" json:"encrypted_environment_variables,omitempty" toml:"encrypted_environment_variables" yaml:"encrypted_environment_variables,omitempty"`\n    Salt                          null.String `boil:"salt" json:"salt,omitempty" toml:"salt" yaml:"salt,omitempty"`\n    EncryptionKeyLabel            null.String `boil:"encryption_key_label" json:"encryption_key_label,omitempty" toml:"encryption_key_label" yaml:"encryption_key_label,omitempty"`\n    EncryptionIterations          int         `boil:"encryption_iterations" json:"encryption_iterations" toml:"encryption_iterations" yaml:"encryption_iterations"`\n    Description                   string      `boil:"description" json:"description" toml:"description" yaml:"description"`\n\n    R   *revisionR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   revisionL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findrevision"},"func FindRevision"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindRevision(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Revision, error)\n")),(0,o.kt)("p",null,"FindRevision retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-revisionannotation"},"type RevisionAnnotation"),(0,o.kt)("p",null,"RevisionAnnotation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type RevisionAnnotation struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    Key          null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *revisionAnnotationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   revisionAnnotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findrevisionannotation"},"func FindRevisionAnnotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindRevisionAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RevisionAnnotation, error)\n")),(0,o.kt)("p",null,"FindRevisionAnnotation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-revisionannotationdeleter"},"type RevisionAnnotationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionAnnotationDeleter interface {\n    Delete(o *RevisionAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o RevisionAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-revisionannotationfinder"},"type RevisionAnnotationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionAnnotationFinder interface {\n    FindRevisionAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RevisionAnnotation, error)\n}\n")),(0,o.kt)("h2",{id:"type-revisionannotationfinisher"},"type RevisionAnnotationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionAnnotationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*RevisionAnnotation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (RevisionAnnotationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-revisionannotationinserter"},"type RevisionAnnotationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionAnnotationInserter interface {\n    Insert(o *RevisionAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-revisionannotationreloader"},"type RevisionAnnotationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionAnnotationReloader interface {\n    Reload(o *RevisionAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *RevisionAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-revisionannotationslice"},"type RevisionAnnotationSlice"),(0,o.kt)("p",null,"RevisionAnnotationSlice is an alias for a slice of pointers to RevisionAnnotation","."," This should almost always be used instead of ","[","]","RevisionAnnotation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionAnnotationSlice []*RevisionAnnotation\n")),(0,o.kt)("h2",{id:"type-revisionannotationupdater"},"type RevisionAnnotationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionAnnotationUpdater interface {\n    Update(o *RevisionAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o RevisionAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-revisionannotationupserter"},"type RevisionAnnotationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionAnnotationUpserter interface {\n    Upsert(o *RevisionAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-revisiondeleter"},"type RevisionDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionDeleter interface {\n    Delete(o *Revision, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o RevisionSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-revisionfinder"},"type RevisionFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionFinder interface {\n    FindRevision(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Revision, error)\n}\n")),(0,o.kt)("h2",{id:"type-revisionfinisher"},"type RevisionFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*Revision, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (RevisionSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-revisioninserter"},"type RevisionInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionInserter interface {\n    Insert(o *Revision, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-revisionlabel"},"type RevisionLabel"),(0,o.kt)("p",null,"RevisionLabel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type RevisionLabel struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    KeyName      null.String `boil:"key_name" json:"key_name,omitempty" toml:"key_name" yaml:"key_name,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *revisionLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   revisionLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findrevisionlabel"},"func FindRevisionLabel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindRevisionLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RevisionLabel, error)\n")),(0,o.kt)("p",null,"FindRevisionLabel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-revisionlabeldeleter"},"type RevisionLabelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionLabelDeleter interface {\n    Delete(o *RevisionLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o RevisionLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-revisionlabelfinder"},"type RevisionLabelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionLabelFinder interface {\n    FindRevisionLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RevisionLabel, error)\n}\n")),(0,o.kt)("h2",{id:"type-revisionlabelfinisher"},"type RevisionLabelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionLabelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*RevisionLabel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (RevisionLabelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-revisionlabelinserter"},"type RevisionLabelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionLabelInserter interface {\n    Insert(o *RevisionLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-revisionlabelreloader"},"type RevisionLabelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionLabelReloader interface {\n    Reload(o *RevisionLabel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *RevisionLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-revisionlabelslice"},"type RevisionLabelSlice"),(0,o.kt)("p",null,"RevisionLabelSlice is an alias for a slice of pointers to RevisionLabel","."," This should almost always be used instead of ","[","]","RevisionLabel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionLabelSlice []*RevisionLabel\n")),(0,o.kt)("h2",{id:"type-revisionlabelupdater"},"type RevisionLabelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionLabelUpdater interface {\n    Update(o *RevisionLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o RevisionLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-revisionlabelupserter"},"type RevisionLabelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionLabelUpserter interface {\n    Upsert(o *RevisionLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-revisionprocesscommand"},"type RevisionProcessCommand"),(0,o.kt)("p",null,"RevisionProcessCommand is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type RevisionProcessCommand struct {\n    ID             int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID           string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt      null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    RevisionGUID   string      `boil:"revision_guid" json:"revision_guid" toml:"revision_guid" yaml:"revision_guid"`\n    ProcessType    string      `boil:"process_type" json:"process_type" toml:"process_type" yaml:"process_type"`\n    ProcessCommand null.String `boil:"process_command" json:"process_command,omitempty" toml:"process_command" yaml:"process_command,omitempty"`\n\n    R   *revisionProcessCommandR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   revisionProcessCommandL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findrevisionprocesscommand"},"func FindRevisionProcessCommand"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindRevisionProcessCommand(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RevisionProcessCommand, error)\n")),(0,o.kt)("p",null,"FindRevisionProcessCommand retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-revisionprocesscommanddeleter"},"type RevisionProcessCommandDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionProcessCommandDeleter interface {\n    Delete(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o RevisionProcessCommandSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-revisionprocesscommandfinder"},"type RevisionProcessCommandFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionProcessCommandFinder interface {\n    FindRevisionProcessCommand(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RevisionProcessCommand, error)\n}\n")),(0,o.kt)("h2",{id:"type-revisionprocesscommandfinisher"},"type RevisionProcessCommandFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionProcessCommandFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*RevisionProcessCommand, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (RevisionProcessCommandSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-revisionprocesscommandinserter"},"type RevisionProcessCommandInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionProcessCommandInserter interface {\n    Insert(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-revisionprocesscommandreloader"},"type RevisionProcessCommandReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionProcessCommandReloader interface {\n    Reload(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *RevisionProcessCommandSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-revisionprocesscommandslice"},"type RevisionProcessCommandSlice"),(0,o.kt)("p",null,"RevisionProcessCommandSlice is an alias for a slice of pointers to RevisionProcessCommand","."," This should almost always be used instead of ","[","]","RevisionProcessCommand","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionProcessCommandSlice []*RevisionProcessCommand\n")),(0,o.kt)("h2",{id:"type-revisionprocesscommandupdater"},"type RevisionProcessCommandUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionProcessCommandUpdater interface {\n    Update(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o RevisionProcessCommandSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-revisionprocesscommandupserter"},"type RevisionProcessCommandUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionProcessCommandUpserter interface {\n    Upsert(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-revisionreloader"},"type RevisionReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionReloader interface {\n    Reload(o *Revision, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *RevisionSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-revisionsidecar"},"type RevisionSidecar"),(0,o.kt)("p",null,"RevisionSidecar is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type RevisionSidecar struct {\n    ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string    `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Name         string    `boil:"name" json:"name" toml:"name" yaml:"name"`\n    Command      string    `boil:"command" json:"command" toml:"command" yaml:"command"`\n    RevisionGUID string    `boil:"revision_guid" json:"revision_guid" toml:"revision_guid" yaml:"revision_guid"`\n    Memory       null.Int  `boil:"memory" json:"memory,omitempty" toml:"memory" yaml:"memory,omitempty"`\n\n    R   *revisionSidecarR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   revisionSidecarL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findrevisionsidecar"},"func FindRevisionSidecar"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindRevisionSidecar(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RevisionSidecar, error)\n")),(0,o.kt)("p",null,"FindRevisionSidecar retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-revisionsidecardeleter"},"type RevisionSidecarDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionSidecarDeleter interface {\n    Delete(o *RevisionSidecar, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o RevisionSidecarSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-revisionsidecarfinder"},"type RevisionSidecarFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionSidecarFinder interface {\n    FindRevisionSidecar(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RevisionSidecar, error)\n}\n")),(0,o.kt)("h2",{id:"type-revisionsidecarfinisher"},"type RevisionSidecarFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionSidecarFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*RevisionSidecar, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (RevisionSidecarSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-revisionsidecarinserter"},"type RevisionSidecarInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionSidecarInserter interface {\n    Insert(o *RevisionSidecar, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-revisionsidecarprocesstype"},"type RevisionSidecarProcessType"),(0,o.kt)("p",null,"RevisionSidecarProcessType is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type RevisionSidecarProcessType struct {\n    ID                  int       `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                string    `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt           time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt           null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Type                string    `boil:"type" json:"type" toml:"type" yaml:"type"`\n    RevisionSidecarGUID string    `boil:"revision_sidecar_guid" json:"revision_sidecar_guid" toml:"revision_sidecar_guid" yaml:"revision_sidecar_guid"`\n\n    R   *revisionSidecarProcessTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   revisionSidecarProcessTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findrevisionsidecarprocesstype"},"func FindRevisionSidecarProcessType"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindRevisionSidecarProcessType(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RevisionSidecarProcessType, error)\n")),(0,o.kt)("p",null,"FindRevisionSidecarProcessType retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-revisionsidecarprocesstypedeleter"},"type RevisionSidecarProcessTypeDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionSidecarProcessTypeDeleter interface {\n    Delete(o *RevisionSidecarProcessType, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o RevisionSidecarProcessTypeSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-revisionsidecarprocesstypefinder"},"type RevisionSidecarProcessTypeFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionSidecarProcessTypeFinder interface {\n    FindRevisionSidecarProcessType(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RevisionSidecarProcessType, error)\n}\n")),(0,o.kt)("h2",{id:"type-revisionsidecarprocesstypefinisher"},"type RevisionSidecarProcessTypeFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionSidecarProcessTypeFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*RevisionSidecarProcessType, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (RevisionSidecarProcessTypeSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-revisionsidecarprocesstypeinserter"},"type RevisionSidecarProcessTypeInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionSidecarProcessTypeInserter interface {\n    Insert(o *RevisionSidecarProcessType, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-revisionsidecarprocesstypereloader"},"type RevisionSidecarProcessTypeReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionSidecarProcessTypeReloader interface {\n    Reload(o *RevisionSidecarProcessType, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *RevisionSidecarProcessTypeSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-revisionsidecarprocesstypeslice"},"type RevisionSidecarProcessTypeSlice"),(0,o.kt)("p",null,"RevisionSidecarProcessTypeSlice is an alias for a slice of pointers to RevisionSidecarProcessType","."," This should almost always be used instead of ","[","]","RevisionSidecarProcessType","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionSidecarProcessTypeSlice []*RevisionSidecarProcessType\n")),(0,o.kt)("h2",{id:"type-revisionsidecarprocesstypeupdater"},"type RevisionSidecarProcessTypeUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionSidecarProcessTypeUpdater interface {\n    Update(o *RevisionSidecarProcessType, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o RevisionSidecarProcessTypeSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-revisionsidecarprocesstypeupserter"},"type RevisionSidecarProcessTypeUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionSidecarProcessTypeUpserter interface {\n    Upsert(o *RevisionSidecarProcessType, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-revisionsidecarreloader"},"type RevisionSidecarReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionSidecarReloader interface {\n    Reload(o *RevisionSidecar, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *RevisionSidecarSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-revisionsidecarslice"},"type RevisionSidecarSlice"),(0,o.kt)("p",null,"RevisionSidecarSlice is an alias for a slice of pointers to RevisionSidecar","."," This should almost always be used instead of ","[","]","RevisionSidecar","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionSidecarSlice []*RevisionSidecar\n")),(0,o.kt)("h2",{id:"type-revisionsidecarupdater"},"type RevisionSidecarUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionSidecarUpdater interface {\n    Update(o *RevisionSidecar, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o RevisionSidecarSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-revisionsidecarupserter"},"type RevisionSidecarUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionSidecarUpserter interface {\n    Upsert(o *RevisionSidecar, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-revisionslice"},"type RevisionSlice"),(0,o.kt)("p",null,"RevisionSlice is an alias for a slice of pointers to Revision","."," This should almost always be used instead of ","[","]","Revision","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionSlice []*Revision\n")),(0,o.kt)("h2",{id:"type-revisionupdater"},"type RevisionUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionUpdater interface {\n    Update(o *Revision, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o RevisionSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-revisionupserter"},"type RevisionUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RevisionUpserter interface {\n    Upsert(o *Revision, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-route"},"type Route"),(0,o.kt)("p",null,"Route is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type Route struct {\n    ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID      string    `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Host      string    `boil:"host" json:"host" toml:"host" yaml:"host"`\n    DomainID  int       `boil:"domain_id" json:"domain_id" toml:"domain_id" yaml:"domain_id"`\n    SpaceID   int       `boil:"space_id" json:"space_id" toml:"space_id" yaml:"space_id"`\n    Path      string    `boil:"path" json:"path" toml:"path" yaml:"path"`\n    Port      int       `boil:"port" json:"port" toml:"port" yaml:"port"`\n    VipOffset null.Int  `boil:"vip_offset" json:"vip_offset,omitempty" toml:"vip_offset" yaml:"vip_offset,omitempty"`\n\n    R   *routeR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   routeL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findroute"},"func FindRoute"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindRoute(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Route, error)\n")),(0,o.kt)("p",null,"FindRoute retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-routeannotation"},"type RouteAnnotation"),(0,o.kt)("p",null,"RouteAnnotation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type RouteAnnotation struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    Key          null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *routeAnnotationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   routeAnnotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findrouteannotation"},"func FindRouteAnnotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindRouteAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RouteAnnotation, error)\n")),(0,o.kt)("p",null,"FindRouteAnnotation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-routeannotationdeleter"},"type RouteAnnotationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteAnnotationDeleter interface {\n    Delete(o *RouteAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o RouteAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-routeannotationfinder"},"type RouteAnnotationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteAnnotationFinder interface {\n    FindRouteAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RouteAnnotation, error)\n}\n")),(0,o.kt)("h2",{id:"type-routeannotationfinisher"},"type RouteAnnotationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteAnnotationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*RouteAnnotation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (RouteAnnotationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-routeannotationinserter"},"type RouteAnnotationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteAnnotationInserter interface {\n    Insert(o *RouteAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-routeannotationreloader"},"type RouteAnnotationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteAnnotationReloader interface {\n    Reload(o *RouteAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *RouteAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-routeannotationslice"},"type RouteAnnotationSlice"),(0,o.kt)("p",null,"RouteAnnotationSlice is an alias for a slice of pointers to RouteAnnotation","."," This should almost always be used instead of ","[","]","RouteAnnotation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteAnnotationSlice []*RouteAnnotation\n")),(0,o.kt)("h2",{id:"type-routeannotationupdater"},"type RouteAnnotationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteAnnotationUpdater interface {\n    Update(o *RouteAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o RouteAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-routeannotationupserter"},"type RouteAnnotationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteAnnotationUpserter interface {\n    Upsert(o *RouteAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-routebinding"},"type RouteBinding"),(0,o.kt)("p",null,"RouteBinding is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type RouteBinding struct {\n    ID                int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID              string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt         time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt         null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    RouteID           null.Int    `boil:"route_id" json:"route_id,omitempty" toml:"route_id" yaml:"route_id,omitempty"`\n    ServiceInstanceID null.Int    `boil:"service_instance_id" json:"service_instance_id,omitempty" toml:"service_instance_id" yaml:"service_instance_id,omitempty"`\n    RouteServiceURL   null.String `boil:"route_service_url" json:"route_service_url,omitempty" toml:"route_service_url" yaml:"route_service_url,omitempty"`\n\n    R   *routeBindingR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   routeBindingL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findroutebinding"},"func FindRouteBinding"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindRouteBinding(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RouteBinding, error)\n")),(0,o.kt)("p",null,"FindRouteBinding retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-routebindingannotation"},"type RouteBindingAnnotation"),(0,o.kt)("p",null,"RouteBindingAnnotation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type RouteBindingAnnotation struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    Key          null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *routeBindingAnnotationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   routeBindingAnnotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findroutebindingannotation"},"func FindRouteBindingAnnotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindRouteBindingAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RouteBindingAnnotation, error)\n")),(0,o.kt)("p",null,"FindRouteBindingAnnotation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-routebindingannotationdeleter"},"type RouteBindingAnnotationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingAnnotationDeleter interface {\n    Delete(o *RouteBindingAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o RouteBindingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-routebindingannotationfinder"},"type RouteBindingAnnotationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingAnnotationFinder interface {\n    FindRouteBindingAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RouteBindingAnnotation, error)\n}\n")),(0,o.kt)("h2",{id:"type-routebindingannotationfinisher"},"type RouteBindingAnnotationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingAnnotationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*RouteBindingAnnotation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (RouteBindingAnnotationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-routebindingannotationinserter"},"type RouteBindingAnnotationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingAnnotationInserter interface {\n    Insert(o *RouteBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-routebindingannotationreloader"},"type RouteBindingAnnotationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingAnnotationReloader interface {\n    Reload(o *RouteBindingAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *RouteBindingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-routebindingannotationslice"},"type RouteBindingAnnotationSlice"),(0,o.kt)("p",null,"RouteBindingAnnotationSlice is an alias for a slice of pointers to RouteBindingAnnotation","."," This should almost always be used instead of ","[","]","RouteBindingAnnotation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingAnnotationSlice []*RouteBindingAnnotation\n")),(0,o.kt)("h2",{id:"type-routebindingannotationupdater"},"type RouteBindingAnnotationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingAnnotationUpdater interface {\n    Update(o *RouteBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o RouteBindingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-routebindingannotationupserter"},"type RouteBindingAnnotationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingAnnotationUpserter interface {\n    Upsert(o *RouteBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-routebindingdeleter"},"type RouteBindingDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingDeleter interface {\n    Delete(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o RouteBindingSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-routebindingfinder"},"type RouteBindingFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingFinder interface {\n    FindRouteBinding(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RouteBinding, error)\n}\n")),(0,o.kt)("h2",{id:"type-routebindingfinisher"},"type RouteBindingFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*RouteBinding, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (RouteBindingSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-routebindinginserter"},"type RouteBindingInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingInserter interface {\n    Insert(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-routebindinglabel"},"type RouteBindingLabel"),(0,o.kt)("p",null,"RouteBindingLabel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type RouteBindingLabel struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    KeyName      null.String `boil:"key_name" json:"key_name,omitempty" toml:"key_name" yaml:"key_name,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *routeBindingLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   routeBindingLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findroutebindinglabel"},"func FindRouteBindingLabel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindRouteBindingLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RouteBindingLabel, error)\n")),(0,o.kt)("p",null,"FindRouteBindingLabel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-routebindinglabeldeleter"},"type RouteBindingLabelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingLabelDeleter interface {\n    Delete(o *RouteBindingLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o RouteBindingLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-routebindinglabelfinder"},"type RouteBindingLabelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingLabelFinder interface {\n    FindRouteBindingLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RouteBindingLabel, error)\n}\n")),(0,o.kt)("h2",{id:"type-routebindinglabelfinisher"},"type RouteBindingLabelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingLabelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*RouteBindingLabel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (RouteBindingLabelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-routebindinglabelinserter"},"type RouteBindingLabelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingLabelInserter interface {\n    Insert(o *RouteBindingLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-routebindinglabelreloader"},"type RouteBindingLabelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingLabelReloader interface {\n    Reload(o *RouteBindingLabel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *RouteBindingLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-routebindinglabelslice"},"type RouteBindingLabelSlice"),(0,o.kt)("p",null,"RouteBindingLabelSlice is an alias for a slice of pointers to RouteBindingLabel","."," This should almost always be used instead of ","[","]","RouteBindingLabel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingLabelSlice []*RouteBindingLabel\n")),(0,o.kt)("h2",{id:"type-routebindinglabelupdater"},"type RouteBindingLabelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingLabelUpdater interface {\n    Update(o *RouteBindingLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o RouteBindingLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-routebindinglabelupserter"},"type RouteBindingLabelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingLabelUpserter interface {\n    Upsert(o *RouteBindingLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-routebindingoperation"},"type RouteBindingOperation"),(0,o.kt)("p",null,"RouteBindingOperation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type RouteBindingOperation struct {\n    ID                      int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    CreatedAt               time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt               null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    RouteBindingID          null.Int    `boil:"route_binding_id" json:"route_binding_id,omitempty" toml:"route_binding_id" yaml:"route_binding_id,omitempty"`\n    State                   string      `boil:"state" json:"state" toml:"state" yaml:"state"`\n    Type                    string      `boil:"type" json:"type" toml:"type" yaml:"type"`\n    Description             null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`\n    BrokerProvidedOperation null.String `boil:"broker_provided_operation" json:"broker_provided_operation,omitempty" toml:"broker_provided_operation" yaml:"broker_provided_operation,omitempty"`\n\n    R   *routeBindingOperationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   routeBindingOperationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findroutebindingoperation"},"func FindRouteBindingOperation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindRouteBindingOperation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RouteBindingOperation, error)\n")),(0,o.kt)("p",null,"FindRouteBindingOperation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-routebindingoperationdeleter"},"type RouteBindingOperationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingOperationDeleter interface {\n    Delete(o *RouteBindingOperation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o RouteBindingOperationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-routebindingoperationfinder"},"type RouteBindingOperationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingOperationFinder interface {\n    FindRouteBindingOperation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RouteBindingOperation, error)\n}\n")),(0,o.kt)("h2",{id:"type-routebindingoperationfinisher"},"type RouteBindingOperationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingOperationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*RouteBindingOperation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (RouteBindingOperationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-routebindingoperationinserter"},"type RouteBindingOperationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingOperationInserter interface {\n    Insert(o *RouteBindingOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-routebindingoperationreloader"},"type RouteBindingOperationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingOperationReloader interface {\n    Reload(o *RouteBindingOperation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *RouteBindingOperationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-routebindingoperationslice"},"type RouteBindingOperationSlice"),(0,o.kt)("p",null,"RouteBindingOperationSlice is an alias for a slice of pointers to RouteBindingOperation","."," This should almost always be used instead of ","[","]","RouteBindingOperation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingOperationSlice []*RouteBindingOperation\n")),(0,o.kt)("h2",{id:"type-routebindingoperationupdater"},"type RouteBindingOperationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingOperationUpdater interface {\n    Update(o *RouteBindingOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o RouteBindingOperationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-routebindingoperationupserter"},"type RouteBindingOperationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingOperationUpserter interface {\n    Upsert(o *RouteBindingOperation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-routebindingreloader"},"type RouteBindingReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingReloader interface {\n    Reload(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *RouteBindingSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-routebindingslice"},"type RouteBindingSlice"),(0,o.kt)("p",null,"RouteBindingSlice is an alias for a slice of pointers to RouteBinding","."," This should almost always be used instead of ","[","]","RouteBinding","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingSlice []*RouteBinding\n")),(0,o.kt)("h2",{id:"type-routebindingupdater"},"type RouteBindingUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingUpdater interface {\n    Update(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o RouteBindingSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-routebindingupserter"},"type RouteBindingUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteBindingUpserter interface {\n    Upsert(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-routedeleter"},"type RouteDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteDeleter interface {\n    Delete(o *Route, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o RouteSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-routefinder"},"type RouteFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteFinder interface {\n    FindRoute(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Route, error)\n}\n")),(0,o.kt)("h2",{id:"type-routefinisher"},"type RouteFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*Route, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (RouteSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-routeinserter"},"type RouteInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteInserter interface {\n    Insert(o *Route, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-routelabel"},"type RouteLabel"),(0,o.kt)("p",null,"RouteLabel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type RouteLabel struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    KeyName      null.String `boil:"key_name" json:"key_name,omitempty" toml:"key_name" yaml:"key_name,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *routeLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   routeLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findroutelabel"},"func FindRouteLabel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindRouteLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RouteLabel, error)\n")),(0,o.kt)("p",null,"FindRouteLabel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-routelabeldeleter"},"type RouteLabelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteLabelDeleter interface {\n    Delete(o *RouteLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o RouteLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-routelabelfinder"},"type RouteLabelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteLabelFinder interface {\n    FindRouteLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RouteLabel, error)\n}\n")),(0,o.kt)("h2",{id:"type-routelabelfinisher"},"type RouteLabelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteLabelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*RouteLabel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (RouteLabelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-routelabelinserter"},"type RouteLabelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteLabelInserter interface {\n    Insert(o *RouteLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-routelabelreloader"},"type RouteLabelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteLabelReloader interface {\n    Reload(o *RouteLabel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *RouteLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-routelabelslice"},"type RouteLabelSlice"),(0,o.kt)("p",null,"RouteLabelSlice is an alias for a slice of pointers to RouteLabel","."," This should almost always be used instead of ","[","]","RouteLabel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteLabelSlice []*RouteLabel\n")),(0,o.kt)("h2",{id:"type-routelabelupdater"},"type RouteLabelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteLabelUpdater interface {\n    Update(o *RouteLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o RouteLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-routelabelupserter"},"type RouteLabelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteLabelUpserter interface {\n    Upsert(o *RouteLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-routemapping"},"type RouteMapping"),(0,o.kt)("p",null,"RouteMapping is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type RouteMapping struct {\n    ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    AppPort     null.Int    `boil:"app_port" json:"app_port,omitempty" toml:"app_port" yaml:"app_port,omitempty"`\n    GUID        string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    AppGUID     string      `boil:"app_guid" json:"app_guid" toml:"app_guid" yaml:"app_guid"`\n    RouteGUID   string      `boil:"route_guid" json:"route_guid" toml:"route_guid" yaml:"route_guid"`\n    ProcessType null.String `boil:"process_type" json:"process_type,omitempty" toml:"process_type" yaml:"process_type,omitempty"`\n    Weight      null.Int    `boil:"weight" json:"weight,omitempty" toml:"weight" yaml:"weight,omitempty"`\n\n    R   *routeMappingR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   routeMappingL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findroutemapping"},"func FindRouteMapping"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindRouteMapping(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RouteMapping, error)\n")),(0,o.kt)("p",null,"FindRouteMapping retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-routemappingdeleter"},"type RouteMappingDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteMappingDeleter interface {\n    Delete(o *RouteMapping, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o RouteMappingSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-routemappingfinder"},"type RouteMappingFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteMappingFinder interface {\n    FindRouteMapping(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RouteMapping, error)\n}\n")),(0,o.kt)("h2",{id:"type-routemappingfinisher"},"type RouteMappingFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteMappingFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*RouteMapping, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (RouteMappingSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-routemappinginserter"},"type RouteMappingInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteMappingInserter interface {\n    Insert(o *RouteMapping, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-routemappingreloader"},"type RouteMappingReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteMappingReloader interface {\n    Reload(o *RouteMapping, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *RouteMappingSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-routemappingslice"},"type RouteMappingSlice"),(0,o.kt)("p",null,"RouteMappingSlice is an alias for a slice of pointers to RouteMapping","."," This should almost always be used instead of ","[","]","RouteMapping","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteMappingSlice []*RouteMapping\n")),(0,o.kt)("h2",{id:"type-routemappingupdater"},"type RouteMappingUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteMappingUpdater interface {\n    Update(o *RouteMapping, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o RouteMappingSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-routemappingupserter"},"type RouteMappingUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteMappingUpserter interface {\n    Upsert(o *RouteMapping, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-routereloader"},"type RouteReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteReloader interface {\n    Reload(o *Route, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *RouteSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-routeslice"},"type RouteSlice"),(0,o.kt)("p",null,"RouteSlice is an alias for a slice of pointers to Route","."," This should almost always be used instead of ","[","]","Route","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteSlice []*Route\n")),(0,o.kt)("h2",{id:"type-routeupdater"},"type RouteUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteUpdater interface {\n    Update(o *Route, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o RouteSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-routeupserter"},"type RouteUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type RouteUpserter interface {\n    Upsert(o *Route, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-schemamigration"},"type SchemaMigration"),(0,o.kt)("p",null,"SchemaMigration is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type SchemaMigration struct {\n    Filename string `boil:"filename" json:"filename" toml:"filename" yaml:"filename"`\n\n    R   *schemaMigrationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   schemaMigrationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findschemamigration"},"func FindSchemaMigration"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindSchemaMigration(ctx context.Context, exec boil.ContextExecutor, filename string, selectCols ...string) (*SchemaMigration, error)\n")),(0,o.kt)("p",null,"FindSchemaMigration retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-schemamigrationdeleter"},"type SchemaMigrationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SchemaMigrationDeleter interface {\n    Delete(o *SchemaMigration, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o SchemaMigrationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-schemamigrationfinder"},"type SchemaMigrationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SchemaMigrationFinder interface {\n    FindSchemaMigration(ctx context.Context, exec boil.ContextExecutor, filename string, selectCols ...string) (*SchemaMigration, error)\n}\n")),(0,o.kt)("h2",{id:"type-schemamigrationfinisher"},"type SchemaMigrationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SchemaMigrationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*SchemaMigration, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (SchemaMigrationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-schemamigrationinserter"},"type SchemaMigrationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SchemaMigrationInserter interface {\n    Insert(o *SchemaMigration, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-schemamigrationreloader"},"type SchemaMigrationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SchemaMigrationReloader interface {\n    Reload(o *SchemaMigration, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *SchemaMigrationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-schemamigrationslice"},"type SchemaMigrationSlice"),(0,o.kt)("p",null,"SchemaMigrationSlice is an alias for a slice of pointers to SchemaMigration","."," This should almost always be used instead of ","[","]","SchemaMigration","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SchemaMigrationSlice []*SchemaMigration\n")),(0,o.kt)("h2",{id:"type-schemamigrationupdater"},"type SchemaMigrationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SchemaMigrationUpdater interface {\n    Update(o *SchemaMigration, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o SchemaMigrationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-schemamigrationupserter"},"type SchemaMigrationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SchemaMigrationUpserter interface {\n    Upsert(o *SchemaMigration, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-securitygroup"},"type SecurityGroup"),(0,o.kt)("p",null,"SecurityGroup is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type SecurityGroup struct {\n    ID             int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID           string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt      null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Name           string      `boil:"name" json:"name" toml:"name" yaml:"name"`\n    Rules          null.String `boil:"rules" json:"rules,omitempty" toml:"rules" yaml:"rules,omitempty"`\n    StagingDefault null.Bool   `boil:"staging_default" json:"staging_default,omitempty" toml:"staging_default" yaml:"staging_default,omitempty"`\n    RunningDefault null.Bool   `boil:"running_default" json:"running_default,omitempty" toml:"running_default" yaml:"running_default,omitempty"`\n\n    R   *securityGroupR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   securityGroupL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findsecuritygroup"},"func FindSecurityGroup"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindSecurityGroup(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SecurityGroup, error)\n")),(0,o.kt)("p",null,"FindSecurityGroup retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-securitygroupdeleter"},"type SecurityGroupDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SecurityGroupDeleter interface {\n    Delete(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o SecurityGroupSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-securitygroupfinder"},"type SecurityGroupFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SecurityGroupFinder interface {\n    FindSecurityGroup(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SecurityGroup, error)\n}\n")),(0,o.kt)("h2",{id:"type-securitygroupfinisher"},"type SecurityGroupFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SecurityGroupFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*SecurityGroup, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (SecurityGroupSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-securitygroupinserter"},"type SecurityGroupInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SecurityGroupInserter interface {\n    Insert(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-securitygroupreloader"},"type SecurityGroupReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SecurityGroupReloader interface {\n    Reload(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *SecurityGroupSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-securitygroupslice"},"type SecurityGroupSlice"),(0,o.kt)("p",null,"SecurityGroupSlice is an alias for a slice of pointers to SecurityGroup","."," This should almost always be used instead of ","[","]","SecurityGroup","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SecurityGroupSlice []*SecurityGroup\n")),(0,o.kt)("h2",{id:"type-securitygroupupdater"},"type SecurityGroupUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SecurityGroupUpdater interface {\n    Update(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o SecurityGroupSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-securitygroupupserter"},"type SecurityGroupUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SecurityGroupUpserter interface {\n    Upsert(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-securitygroupsspace"},"type SecurityGroupsSpace"),(0,o.kt)("p",null,"SecurityGroupsSpace is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type SecurityGroupsSpace struct {\n    SecurityGroupID        int `boil:"security_group_id" json:"security_group_id" toml:"security_group_id" yaml:"security_group_id"`\n    SpaceID                int `boil:"space_id" json:"space_id" toml:"space_id" yaml:"space_id"`\n    SecurityGroupsSpacesPK int `boil:"security_groups_spaces_pk" json:"security_groups_spaces_pk" toml:"security_groups_spaces_pk" yaml:"security_groups_spaces_pk"`\n\n    R   *securityGroupsSpaceR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   securityGroupsSpaceL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findsecuritygroupsspace"},"func FindSecurityGroupsSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindSecurityGroupsSpace(ctx context.Context, exec boil.ContextExecutor, securityGroupsSpacesPK int, selectCols ...string) (*SecurityGroupsSpace, error)\n")),(0,o.kt)("p",null,"FindSecurityGroupsSpace retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-securitygroupsspacedeleter"},"type SecurityGroupsSpaceDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SecurityGroupsSpaceDeleter interface {\n    Delete(o *SecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o SecurityGroupsSpaceSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-securitygroupsspacefinder"},"type SecurityGroupsSpaceFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SecurityGroupsSpaceFinder interface {\n    FindSecurityGroupsSpace(ctx context.Context, exec boil.ContextExecutor, securityGroupsSpacesPK int, selectCols ...string) (*SecurityGroupsSpace, error)\n}\n")),(0,o.kt)("h2",{id:"type-securitygroupsspacefinisher"},"type SecurityGroupsSpaceFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SecurityGroupsSpaceFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*SecurityGroupsSpace, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (SecurityGroupsSpaceSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-securitygroupsspaceinserter"},"type SecurityGroupsSpaceInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SecurityGroupsSpaceInserter interface {\n    Insert(o *SecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-securitygroupsspacereloader"},"type SecurityGroupsSpaceReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SecurityGroupsSpaceReloader interface {\n    Reload(o *SecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *SecurityGroupsSpaceSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-securitygroupsspaceslice"},"type SecurityGroupsSpaceSlice"),(0,o.kt)("p",null,"SecurityGroupsSpaceSlice is an alias for a slice of pointers to SecurityGroupsSpace","."," This should almost always be used instead of ","[","]","SecurityGroupsSpace","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SecurityGroupsSpaceSlice []*SecurityGroupsSpace\n")),(0,o.kt)("h2",{id:"type-securitygroupsspaceupdater"},"type SecurityGroupsSpaceUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SecurityGroupsSpaceUpdater interface {\n    Update(o *SecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o SecurityGroupsSpaceSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-securitygroupsspaceupserter"},"type SecurityGroupsSpaceUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SecurityGroupsSpaceUpserter interface {\n    Upsert(o *SecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-service"},"type Service"),(0,o.kt)("p",null,"Service is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type Service struct {\n    ID                   int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                 string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt            time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt            null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Label                string      `boil:"label" json:"label" toml:"label" yaml:"label"`\n    Description          string      `boil:"description" json:"description" toml:"description" yaml:"description"`\n    InfoURL              null.String `boil:"info_url" json:"info_url,omitempty" toml:"info_url" yaml:"info_url,omitempty"`\n    Acls                 null.String `boil:"acls" json:"acls,omitempty" toml:"acls" yaml:"acls,omitempty"`\n    Timeout              null.Int    `boil:"timeout" json:"timeout,omitempty" toml:"timeout" yaml:"timeout,omitempty"`\n    Active               null.Bool   `boil:"active" json:"active,omitempty" toml:"active" yaml:"active,omitempty"`\n    Extra                null.String `boil:"extra" json:"extra,omitempty" toml:"extra" yaml:"extra,omitempty"`\n    UniqueID             null.String `boil:"unique_id" json:"unique_id,omitempty" toml:"unique_id" yaml:"unique_id,omitempty"`\n    Bindable             bool        `boil:"bindable" json:"bindable" toml:"bindable" yaml:"bindable"`\n    Tags                 null.String `boil:"tags" json:"tags,omitempty" toml:"tags" yaml:"tags,omitempty"`\n    DocumentationURL     null.String `boil:"documentation_url" json:"documentation_url,omitempty" toml:"documentation_url" yaml:"documentation_url,omitempty"`\n    ServiceBrokerID      null.Int    `boil:"service_broker_id" json:"service_broker_id,omitempty" toml:"service_broker_id" yaml:"service_broker_id,omitempty"`\n    LongDescription      null.String `boil:"long_description" json:"long_description,omitempty" toml:"long_description" yaml:"long_description,omitempty"`\n    Requires             null.String `boil:"requires" json:"requires,omitempty" toml:"requires" yaml:"requires,omitempty"`\n    Purging              bool        `boil:"purging" json:"purging" toml:"purging" yaml:"purging"`\n    PlanUpdateable       null.Bool   `boil:"plan_updateable" json:"plan_updateable,omitempty" toml:"plan_updateable" yaml:"plan_updateable,omitempty"`\n    BindingsRetrievable  bool        `boil:"bindings_retrievable" json:"bindings_retrievable" toml:"bindings_retrievable" yaml:"bindings_retrievable"`\n    InstancesRetrievable bool        `boil:"instances_retrievable" json:"instances_retrievable" toml:"instances_retrievable" yaml:"instances_retrievable"`\n    AllowContextUpdates  bool        `boil:"allow_context_updates" json:"allow_context_updates" toml:"allow_context_updates" yaml:"allow_context_updates"`\n\n    R   *serviceR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   serviceL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findservice"},"func FindService"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindService(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Service, error)\n")),(0,o.kt)("p",null,"FindService retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-servicebinding"},"type ServiceBinding"),(0,o.kt)("p",null,"ServiceBinding is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServiceBinding struct {\n    ID                   int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                 string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt            time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt            null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Credentials          string      `boil:"credentials" json:"credentials" toml:"credentials" yaml:"credentials"`\n    Salt                 null.String `boil:"salt" json:"salt,omitempty" toml:"salt" yaml:"salt,omitempty"`\n    SyslogDrainURL       null.String `boil:"syslog_drain_url" json:"syslog_drain_url,omitempty" toml:"syslog_drain_url" yaml:"syslog_drain_url,omitempty"`\n    VolumeMounts         null.String `boil:"volume_mounts" json:"volume_mounts,omitempty" toml:"volume_mounts" yaml:"volume_mounts,omitempty"`\n    VolumeMountsSalt     null.String `boil:"volume_mounts_salt" json:"volume_mounts_salt,omitempty" toml:"volume_mounts_salt" yaml:"volume_mounts_salt,omitempty"`\n    AppGUID              string      `boil:"app_guid" json:"app_guid" toml:"app_guid" yaml:"app_guid"`\n    ServiceInstanceGUID  string      `boil:"service_instance_guid" json:"service_instance_guid" toml:"service_instance_guid" yaml:"service_instance_guid"`\n    Type                 null.String `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`\n    Name                 null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`\n    EncryptionKeyLabel   null.String `boil:"encryption_key_label" json:"encryption_key_label,omitempty" toml:"encryption_key_label" yaml:"encryption_key_label,omitempty"`\n    EncryptionIterations int         `boil:"encryption_iterations" json:"encryption_iterations" toml:"encryption_iterations" yaml:"encryption_iterations"`\n\n    R   *serviceBindingR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   serviceBindingL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findservicebinding"},"func FindServiceBinding"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServiceBinding(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBinding, error)\n")),(0,o.kt)("p",null,"FindServiceBinding retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-servicebindingannotation"},"type ServiceBindingAnnotation"),(0,o.kt)("p",null,"ServiceBindingAnnotation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServiceBindingAnnotation struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    Key          null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *serviceBindingAnnotationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   serviceBindingAnnotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findservicebindingannotation"},"func FindServiceBindingAnnotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServiceBindingAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBindingAnnotation, error)\n")),(0,o.kt)("p",null,"FindServiceBindingAnnotation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-servicebindingannotationdeleter"},"type ServiceBindingAnnotationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingAnnotationDeleter interface {\n    Delete(o *ServiceBindingAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServiceBindingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebindingannotationfinder"},"type ServiceBindingAnnotationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingAnnotationFinder interface {\n    FindServiceBindingAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBindingAnnotation, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebindingannotationfinisher"},"type ServiceBindingAnnotationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingAnnotationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBindingAnnotation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServiceBindingAnnotationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebindingannotationinserter"},"type ServiceBindingAnnotationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingAnnotationInserter interface {\n    Insert(o *ServiceBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebindingannotationreloader"},"type ServiceBindingAnnotationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingAnnotationReloader interface {\n    Reload(o *ServiceBindingAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServiceBindingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebindingannotationslice"},"type ServiceBindingAnnotationSlice"),(0,o.kt)("p",null,"ServiceBindingAnnotationSlice is an alias for a slice of pointers to ServiceBindingAnnotation","."," This should almost always be used instead of ","[","]","ServiceBindingAnnotation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingAnnotationSlice []*ServiceBindingAnnotation\n")),(0,o.kt)("h2",{id:"type-servicebindingannotationupdater"},"type ServiceBindingAnnotationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingAnnotationUpdater interface {\n    Update(o *ServiceBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServiceBindingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebindingannotationupserter"},"type ServiceBindingAnnotationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingAnnotationUpserter interface {\n    Upsert(o *ServiceBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebindingdeleter"},"type ServiceBindingDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingDeleter interface {\n    Delete(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServiceBindingSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebindingfinder"},"type ServiceBindingFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingFinder interface {\n    FindServiceBinding(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBinding, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebindingfinisher"},"type ServiceBindingFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBinding, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServiceBindingSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebindinginserter"},"type ServiceBindingInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingInserter interface {\n    Insert(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebindinglabel"},"type ServiceBindingLabel"),(0,o.kt)("p",null,"ServiceBindingLabel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServiceBindingLabel struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    KeyName      null.String `boil:"key_name" json:"key_name,omitempty" toml:"key_name" yaml:"key_name,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *serviceBindingLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   serviceBindingLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findservicebindinglabel"},"func FindServiceBindingLabel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServiceBindingLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBindingLabel, error)\n")),(0,o.kt)("p",null,"FindServiceBindingLabel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-servicebindinglabeldeleter"},"type ServiceBindingLabelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingLabelDeleter interface {\n    Delete(o *ServiceBindingLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServiceBindingLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebindinglabelfinder"},"type ServiceBindingLabelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingLabelFinder interface {\n    FindServiceBindingLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBindingLabel, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebindinglabelfinisher"},"type ServiceBindingLabelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingLabelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBindingLabel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServiceBindingLabelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebindinglabelinserter"},"type ServiceBindingLabelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingLabelInserter interface {\n    Insert(o *ServiceBindingLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebindinglabelreloader"},"type ServiceBindingLabelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingLabelReloader interface {\n    Reload(o *ServiceBindingLabel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServiceBindingLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebindinglabelslice"},"type ServiceBindingLabelSlice"),(0,o.kt)("p",null,"ServiceBindingLabelSlice is an alias for a slice of pointers to ServiceBindingLabel","."," This should almost always be used instead of ","[","]","ServiceBindingLabel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingLabelSlice []*ServiceBindingLabel\n")),(0,o.kt)("h2",{id:"type-servicebindinglabelupdater"},"type ServiceBindingLabelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingLabelUpdater interface {\n    Update(o *ServiceBindingLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServiceBindingLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebindinglabelupserter"},"type ServiceBindingLabelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingLabelUpserter interface {\n    Upsert(o *ServiceBindingLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebindingoperation"},"type ServiceBindingOperation"),(0,o.kt)("p",null,"ServiceBindingOperation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServiceBindingOperation struct {\n    ID                      int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    CreatedAt               time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt               null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ServiceBindingID        null.Int    `boil:"service_binding_id" json:"service_binding_id,omitempty" toml:"service_binding_id" yaml:"service_binding_id,omitempty"`\n    State                   string      `boil:"state" json:"state" toml:"state" yaml:"state"`\n    Type                    string      `boil:"type" json:"type" toml:"type" yaml:"type"`\n    Description             null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`\n    BrokerProvidedOperation null.String `boil:"broker_provided_operation" json:"broker_provided_operation,omitempty" toml:"broker_provided_operation" yaml:"broker_provided_operation,omitempty"`\n\n    R   *serviceBindingOperationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   serviceBindingOperationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findservicebindingoperation"},"func FindServiceBindingOperation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServiceBindingOperation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBindingOperation, error)\n")),(0,o.kt)("p",null,"FindServiceBindingOperation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-servicebindingoperationdeleter"},"type ServiceBindingOperationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingOperationDeleter interface {\n    Delete(o *ServiceBindingOperation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServiceBindingOperationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebindingoperationfinder"},"type ServiceBindingOperationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingOperationFinder interface {\n    FindServiceBindingOperation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBindingOperation, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebindingoperationfinisher"},"type ServiceBindingOperationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingOperationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBindingOperation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServiceBindingOperationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebindingoperationinserter"},"type ServiceBindingOperationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingOperationInserter interface {\n    Insert(o *ServiceBindingOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebindingoperationreloader"},"type ServiceBindingOperationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingOperationReloader interface {\n    Reload(o *ServiceBindingOperation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServiceBindingOperationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebindingoperationslice"},"type ServiceBindingOperationSlice"),(0,o.kt)("p",null,"ServiceBindingOperationSlice is an alias for a slice of pointers to ServiceBindingOperation","."," This should almost always be used instead of ","[","]","ServiceBindingOperation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingOperationSlice []*ServiceBindingOperation\n")),(0,o.kt)("h2",{id:"type-servicebindingoperationupdater"},"type ServiceBindingOperationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingOperationUpdater interface {\n    Update(o *ServiceBindingOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServiceBindingOperationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebindingoperationupserter"},"type ServiceBindingOperationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingOperationUpserter interface {\n    Upsert(o *ServiceBindingOperation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebindingreloader"},"type ServiceBindingReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingReloader interface {\n    Reload(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServiceBindingSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebindingslice"},"type ServiceBindingSlice"),(0,o.kt)("p",null,"ServiceBindingSlice is an alias for a slice of pointers to ServiceBinding","."," This should almost always be used instead of ","[","]","ServiceBinding","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingSlice []*ServiceBinding\n")),(0,o.kt)("h2",{id:"type-servicebindingupdater"},"type ServiceBindingUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingUpdater interface {\n    Update(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServiceBindingSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebindingupserter"},"type ServiceBindingUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBindingUpserter interface {\n    Upsert(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebroker"},"type ServiceBroker"),(0,o.kt)("p",null,"ServiceBroker is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServiceBroker struct {\n    ID                   int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                 string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt            time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt            null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Name                 string      `boil:"name" json:"name" toml:"name" yaml:"name"`\n    BrokerURL            string      `boil:"broker_url" json:"broker_url" toml:"broker_url" yaml:"broker_url"`\n    AuthPassword         string      `boil:"auth_password" json:"auth_password" toml:"auth_password" yaml:"auth_password"`\n    Salt                 null.String `boil:"salt" json:"salt,omitempty" toml:"salt" yaml:"salt,omitempty"`\n    AuthUsername         null.String `boil:"auth_username" json:"auth_username,omitempty" toml:"auth_username" yaml:"auth_username,omitempty"`\n    SpaceID              null.Int    `boil:"space_id" json:"space_id,omitempty" toml:"space_id" yaml:"space_id,omitempty"`\n    EncryptionKeyLabel   null.String `boil:"encryption_key_label" json:"encryption_key_label,omitempty" toml:"encryption_key_label" yaml:"encryption_key_label,omitempty"`\n    EncryptionIterations int         `boil:"encryption_iterations" json:"encryption_iterations" toml:"encryption_iterations" yaml:"encryption_iterations"`\n    State                string      `boil:"state" json:"state" toml:"state" yaml:"state"`\n\n    R   *serviceBrokerR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   serviceBrokerL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findservicebroker"},"func FindServiceBroker"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServiceBroker(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBroker, error)\n")),(0,o.kt)("p",null,"FindServiceBroker retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-servicebrokerannotation"},"type ServiceBrokerAnnotation"),(0,o.kt)("p",null,"ServiceBrokerAnnotation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServiceBrokerAnnotation struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    Key          null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *serviceBrokerAnnotationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   serviceBrokerAnnotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findservicebrokerannotation"},"func FindServiceBrokerAnnotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServiceBrokerAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBrokerAnnotation, error)\n")),(0,o.kt)("p",null,"FindServiceBrokerAnnotation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-servicebrokerannotationdeleter"},"type ServiceBrokerAnnotationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerAnnotationDeleter interface {\n    Delete(o *ServiceBrokerAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServiceBrokerAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerannotationfinder"},"type ServiceBrokerAnnotationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerAnnotationFinder interface {\n    FindServiceBrokerAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBrokerAnnotation, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerannotationfinisher"},"type ServiceBrokerAnnotationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerAnnotationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBrokerAnnotation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServiceBrokerAnnotationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerannotationinserter"},"type ServiceBrokerAnnotationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerAnnotationInserter interface {\n    Insert(o *ServiceBrokerAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerannotationreloader"},"type ServiceBrokerAnnotationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerAnnotationReloader interface {\n    Reload(o *ServiceBrokerAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServiceBrokerAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerannotationslice"},"type ServiceBrokerAnnotationSlice"),(0,o.kt)("p",null,"ServiceBrokerAnnotationSlice is an alias for a slice of pointers to ServiceBrokerAnnotation","."," This should almost always be used instead of ","[","]","ServiceBrokerAnnotation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerAnnotationSlice []*ServiceBrokerAnnotation\n")),(0,o.kt)("h2",{id:"type-servicebrokerannotationupdater"},"type ServiceBrokerAnnotationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerAnnotationUpdater interface {\n    Update(o *ServiceBrokerAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServiceBrokerAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerannotationupserter"},"type ServiceBrokerAnnotationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerAnnotationUpserter interface {\n    Upsert(o *ServiceBrokerAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerdeleter"},"type ServiceBrokerDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerDeleter interface {\n    Delete(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServiceBrokerSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerfinder"},"type ServiceBrokerFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerFinder interface {\n    FindServiceBroker(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBroker, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerfinisher"},"type ServiceBrokerFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBroker, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServiceBrokerSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerinserter"},"type ServiceBrokerInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerInserter interface {\n    Insert(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerlabel"},"type ServiceBrokerLabel"),(0,o.kt)("p",null,"ServiceBrokerLabel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServiceBrokerLabel struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    KeyName      null.String `boil:"key_name" json:"key_name,omitempty" toml:"key_name" yaml:"key_name,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *serviceBrokerLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   serviceBrokerLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findservicebrokerlabel"},"func FindServiceBrokerLabel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServiceBrokerLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBrokerLabel, error)\n")),(0,o.kt)("p",null,"FindServiceBrokerLabel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-servicebrokerlabeldeleter"},"type ServiceBrokerLabelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerLabelDeleter interface {\n    Delete(o *ServiceBrokerLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServiceBrokerLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerlabelfinder"},"type ServiceBrokerLabelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerLabelFinder interface {\n    FindServiceBrokerLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBrokerLabel, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerlabelfinisher"},"type ServiceBrokerLabelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerLabelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBrokerLabel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServiceBrokerLabelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerlabelinserter"},"type ServiceBrokerLabelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerLabelInserter interface {\n    Insert(o *ServiceBrokerLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerlabelreloader"},"type ServiceBrokerLabelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerLabelReloader interface {\n    Reload(o *ServiceBrokerLabel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServiceBrokerLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerlabelslice"},"type ServiceBrokerLabelSlice"),(0,o.kt)("p",null,"ServiceBrokerLabelSlice is an alias for a slice of pointers to ServiceBrokerLabel","."," This should almost always be used instead of ","[","]","ServiceBrokerLabel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerLabelSlice []*ServiceBrokerLabel\n")),(0,o.kt)("h2",{id:"type-servicebrokerlabelupdater"},"type ServiceBrokerLabelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerLabelUpdater interface {\n    Update(o *ServiceBrokerLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServiceBrokerLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerlabelupserter"},"type ServiceBrokerLabelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerLabelUpserter interface {\n    Upsert(o *ServiceBrokerLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerreloader"},"type ServiceBrokerReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerReloader interface {\n    Reload(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServiceBrokerSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerslice"},"type ServiceBrokerSlice"),(0,o.kt)("p",null,"ServiceBrokerSlice is an alias for a slice of pointers to ServiceBroker","."," This should almost always be used instead of ","[","]","ServiceBroker","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerSlice []*ServiceBroker\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequest"},"type ServiceBrokerUpdateRequest"),(0,o.kt)("p",null,"ServiceBrokerUpdateRequest is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServiceBrokerUpdateRequest struct {\n    ID                   int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                 string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt            time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt            null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Name                 null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`\n    BrokerURL            null.String `boil:"broker_url" json:"broker_url,omitempty" toml:"broker_url" yaml:"broker_url,omitempty"`\n    Authentication       null.String `boil:"authentication" json:"authentication,omitempty" toml:"authentication" yaml:"authentication,omitempty"`\n    Salt                 null.String `boil:"salt" json:"salt,omitempty" toml:"salt" yaml:"salt,omitempty"`\n    EncryptionKeyLabel   null.String `boil:"encryption_key_label" json:"encryption_key_label,omitempty" toml:"encryption_key_label" yaml:"encryption_key_label,omitempty"`\n    EncryptionIterations int         `boil:"encryption_iterations" json:"encryption_iterations" toml:"encryption_iterations" yaml:"encryption_iterations"`\n    ServiceBrokerID      int         `boil:"service_broker_id" json:"service_broker_id" toml:"service_broker_id" yaml:"service_broker_id"`\n    FKServiceBrokersID   null.Int    `boil:"fk_service_brokers_id" json:"fk_service_brokers_id,omitempty" toml:"fk_service_brokers_id" yaml:"fk_service_brokers_id,omitempty"`\n\n    R   *serviceBrokerUpdateRequestR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   serviceBrokerUpdateRequestL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findservicebrokerupdaterequest"},"func FindServiceBrokerUpdateRequest"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServiceBrokerUpdateRequest(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBrokerUpdateRequest, error)\n")),(0,o.kt)("p",null,"FindServiceBrokerUpdateRequest retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestannotation"},"type ServiceBrokerUpdateRequestAnnotation"),(0,o.kt)("p",null,"ServiceBrokerUpdateRequestAnnotation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServiceBrokerUpdateRequestAnnotation struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    Key          null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *serviceBrokerUpdateRequestAnnotationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   serviceBrokerUpdateRequestAnnotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findservicebrokerupdaterequestannotation"},"func FindServiceBrokerUpdateRequestAnnotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServiceBrokerUpdateRequestAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBrokerUpdateRequestAnnotation, error)\n")),(0,o.kt)("p",null,"FindServiceBrokerUpdateRequestAnnotation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestannotationdeleter"},"type ServiceBrokerUpdateRequestAnnotationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdateRequestAnnotationDeleter interface {\n    Delete(o *ServiceBrokerUpdateRequestAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServiceBrokerUpdateRequestAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestannotationfinder"},"type ServiceBrokerUpdateRequestAnnotationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdateRequestAnnotationFinder interface {\n    FindServiceBrokerUpdateRequestAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBrokerUpdateRequestAnnotation, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestannotationfinisher"},"type ServiceBrokerUpdateRequestAnnotationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdateRequestAnnotationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBrokerUpdateRequestAnnotation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServiceBrokerUpdateRequestAnnotationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestannotationinserter"},"type ServiceBrokerUpdateRequestAnnotationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdateRequestAnnotationInserter interface {\n    Insert(o *ServiceBrokerUpdateRequestAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestannotationreloader"},"type ServiceBrokerUpdateRequestAnnotationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdateRequestAnnotationReloader interface {\n    Reload(o *ServiceBrokerUpdateRequestAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServiceBrokerUpdateRequestAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestannotationslice"},"type ServiceBrokerUpdateRequestAnnotationSlice"),(0,o.kt)("p",null,"ServiceBrokerUpdateRequestAnnotationSlice is an alias for a slice of pointers to ServiceBrokerUpdateRequestAnnotation","."," This should almost always be used instead of ","[","]","ServiceBrokerUpdateRequestAnnotation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdateRequestAnnotationSlice []*ServiceBrokerUpdateRequestAnnotation\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestannotationupdater"},"type ServiceBrokerUpdateRequestAnnotationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdateRequestAnnotationUpdater interface {\n    Update(o *ServiceBrokerUpdateRequestAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServiceBrokerUpdateRequestAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestannotationupserter"},"type ServiceBrokerUpdateRequestAnnotationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdateRequestAnnotationUpserter interface {\n    Upsert(o *ServiceBrokerUpdateRequestAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestdeleter"},"type ServiceBrokerUpdateRequestDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdateRequestDeleter interface {\n    Delete(o *ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServiceBrokerUpdateRequestSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestfinder"},"type ServiceBrokerUpdateRequestFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdateRequestFinder interface {\n    FindServiceBrokerUpdateRequest(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBrokerUpdateRequest, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestfinisher"},"type ServiceBrokerUpdateRequestFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdateRequestFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBrokerUpdateRequest, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServiceBrokerUpdateRequestSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestinserter"},"type ServiceBrokerUpdateRequestInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdateRequestInserter interface {\n    Insert(o *ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestlabel"},"type ServiceBrokerUpdateRequestLabel"),(0,o.kt)("p",null,"ServiceBrokerUpdateRequestLabel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServiceBrokerUpdateRequestLabel struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    KeyName      null.String `boil:"key_name" json:"key_name,omitempty" toml:"key_name" yaml:"key_name,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *serviceBrokerUpdateRequestLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   serviceBrokerUpdateRequestLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findservicebrokerupdaterequestlabel"},"func FindServiceBrokerUpdateRequestLabel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServiceBrokerUpdateRequestLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBrokerUpdateRequestLabel, error)\n")),(0,o.kt)("p",null,"FindServiceBrokerUpdateRequestLabel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestlabeldeleter"},"type ServiceBrokerUpdateRequestLabelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdateRequestLabelDeleter interface {\n    Delete(o *ServiceBrokerUpdateRequestLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServiceBrokerUpdateRequestLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestlabelfinder"},"type ServiceBrokerUpdateRequestLabelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdateRequestLabelFinder interface {\n    FindServiceBrokerUpdateRequestLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBrokerUpdateRequestLabel, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestlabelfinisher"},"type ServiceBrokerUpdateRequestLabelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdateRequestLabelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBrokerUpdateRequestLabel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServiceBrokerUpdateRequestLabelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestlabelinserter"},"type ServiceBrokerUpdateRequestLabelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdateRequestLabelInserter interface {\n    Insert(o *ServiceBrokerUpdateRequestLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestlabelreloader"},"type ServiceBrokerUpdateRequestLabelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdateRequestLabelReloader interface {\n    Reload(o *ServiceBrokerUpdateRequestLabel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServiceBrokerUpdateRequestLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestlabelslice"},"type ServiceBrokerUpdateRequestLabelSlice"),(0,o.kt)("p",null,"ServiceBrokerUpdateRequestLabelSlice is an alias for a slice of pointers to ServiceBrokerUpdateRequestLabel","."," This should almost always be used instead of ","[","]","ServiceBrokerUpdateRequestLabel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdateRequestLabelSlice []*ServiceBrokerUpdateRequestLabel\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestlabelupdater"},"type ServiceBrokerUpdateRequestLabelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdateRequestLabelUpdater interface {\n    Update(o *ServiceBrokerUpdateRequestLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServiceBrokerUpdateRequestLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestlabelupserter"},"type ServiceBrokerUpdateRequestLabelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdateRequestLabelUpserter interface {\n    Upsert(o *ServiceBrokerUpdateRequestLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestreloader"},"type ServiceBrokerUpdateRequestReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdateRequestReloader interface {\n    Reload(o *ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServiceBrokerUpdateRequestSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestslice"},"type ServiceBrokerUpdateRequestSlice"),(0,o.kt)("p",null,"ServiceBrokerUpdateRequestSlice is an alias for a slice of pointers to ServiceBrokerUpdateRequest","."," This should almost always be used instead of ","[","]","ServiceBrokerUpdateRequest","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdateRequestSlice []*ServiceBrokerUpdateRequest\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestupdater"},"type ServiceBrokerUpdateRequestUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdateRequestUpdater interface {\n    Update(o *ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServiceBrokerUpdateRequestSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestupserter"},"type ServiceBrokerUpdateRequestUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdateRequestUpserter interface {\n    Upsert(o *ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerupdater"},"type ServiceBrokerUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpdater interface {\n    Update(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServiceBrokerSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicebrokerupserter"},"type ServiceBrokerUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceBrokerUpserter interface {\n    Upsert(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicedashboardclient"},"type ServiceDashboardClient"),(0,o.kt)("p",null,"ServiceDashboardClient is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServiceDashboardClient struct {\n    ID              int       `boil:"id" json:"id" toml:"id" yaml:"id"`\n    CreatedAt       time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt       null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    UaaID           string    `boil:"uaa_id" json:"uaa_id" toml:"uaa_id" yaml:"uaa_id"`\n    ServiceBrokerID null.Int  `boil:"service_broker_id" json:"service_broker_id,omitempty" toml:"service_broker_id" yaml:"service_broker_id,omitempty"`\n\n    R   *serviceDashboardClientR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   serviceDashboardClientL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findservicedashboardclient"},"func FindServiceDashboardClient"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServiceDashboardClient(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceDashboardClient, error)\n")),(0,o.kt)("p",null,"FindServiceDashboardClient retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-servicedashboardclientdeleter"},"type ServiceDashboardClientDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceDashboardClientDeleter interface {\n    Delete(o *ServiceDashboardClient, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServiceDashboardClientSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicedashboardclientfinder"},"type ServiceDashboardClientFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceDashboardClientFinder interface {\n    FindServiceDashboardClient(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceDashboardClient, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicedashboardclientfinisher"},"type ServiceDashboardClientFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceDashboardClientFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServiceDashboardClient, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServiceDashboardClientSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicedashboardclientinserter"},"type ServiceDashboardClientInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceDashboardClientInserter interface {\n    Insert(o *ServiceDashboardClient, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicedashboardclientreloader"},"type ServiceDashboardClientReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceDashboardClientReloader interface {\n    Reload(o *ServiceDashboardClient, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServiceDashboardClientSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-servicedashboardclientslice"},"type ServiceDashboardClientSlice"),(0,o.kt)("p",null,"ServiceDashboardClientSlice is an alias for a slice of pointers to ServiceDashboardClient","."," This should almost always be used instead of ","[","]","ServiceDashboardClient","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceDashboardClientSlice []*ServiceDashboardClient\n")),(0,o.kt)("h2",{id:"type-servicedashboardclientupdater"},"type ServiceDashboardClientUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceDashboardClientUpdater interface {\n    Update(o *ServiceDashboardClient, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServiceDashboardClientSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicedashboardclientupserter"},"type ServiceDashboardClientUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceDashboardClientUpserter interface {\n    Upsert(o *ServiceDashboardClient, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicedeleter"},"type ServiceDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceDeleter interface {\n    Delete(o *Service, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServiceSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicefinder"},"type ServiceFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceFinder interface {\n    FindService(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Service, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicefinisher"},"type ServiceFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*Service, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServiceSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceinserter"},"type ServiceInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInserter interface {\n    Insert(o *Service, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstance"},"type ServiceInstance"),(0,o.kt)("p",null,"ServiceInstance is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServiceInstance struct {\n    ID                   int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                 string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt            time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt            null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Name                 string      `boil:"name" json:"name" toml:"name" yaml:"name"`\n    Credentials          null.String `boil:"credentials" json:"credentials,omitempty" toml:"credentials" yaml:"credentials,omitempty"`\n    GatewayName          null.String `boil:"gateway_name" json:"gateway_name,omitempty" toml:"gateway_name" yaml:"gateway_name,omitempty"`\n    GatewayData          null.String `boil:"gateway_data" json:"gateway_data,omitempty" toml:"gateway_data" yaml:"gateway_data,omitempty"`\n    SpaceID              int         `boil:"space_id" json:"space_id" toml:"space_id" yaml:"space_id"`\n    ServicePlanID        null.Int    `boil:"service_plan_id" json:"service_plan_id,omitempty" toml:"service_plan_id" yaml:"service_plan_id,omitempty"`\n    Salt                 null.String `boil:"salt" json:"salt,omitempty" toml:"salt" yaml:"salt,omitempty"`\n    DashboardURL         null.String `boil:"dashboard_url" json:"dashboard_url,omitempty" toml:"dashboard_url" yaml:"dashboard_url,omitempty"`\n    IsGatewayService     bool        `boil:"is_gateway_service" json:"is_gateway_service" toml:"is_gateway_service" yaml:"is_gateway_service"`\n    SyslogDrainURL       null.String `boil:"syslog_drain_url" json:"syslog_drain_url,omitempty" toml:"syslog_drain_url" yaml:"syslog_drain_url,omitempty"`\n    Tags                 null.String `boil:"tags" json:"tags,omitempty" toml:"tags" yaml:"tags,omitempty"`\n    RouteServiceURL      null.String `boil:"route_service_url" json:"route_service_url,omitempty" toml:"route_service_url" yaml:"route_service_url,omitempty"`\n    EncryptionKeyLabel   null.String `boil:"encryption_key_label" json:"encryption_key_label,omitempty" toml:"encryption_key_label" yaml:"encryption_key_label,omitempty"`\n    EncryptionIterations int         `boil:"encryption_iterations" json:"encryption_iterations" toml:"encryption_iterations" yaml:"encryption_iterations"`\n    MaintenanceInfo      null.String `boil:"maintenance_info" json:"maintenance_info,omitempty" toml:"maintenance_info" yaml:"maintenance_info,omitempty"`\n\n    R   *serviceInstanceR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   serviceInstanceL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findserviceinstance"},"func FindServiceInstance"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServiceInstance(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceInstance, error)\n")),(0,o.kt)("p",null,"FindServiceInstance retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-serviceinstanceannotation"},"type ServiceInstanceAnnotation"),(0,o.kt)("p",null,"ServiceInstanceAnnotation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServiceInstanceAnnotation struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    Key          null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *serviceInstanceAnnotationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   serviceInstanceAnnotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findserviceinstanceannotation"},"func FindServiceInstanceAnnotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServiceInstanceAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceInstanceAnnotation, error)\n")),(0,o.kt)("p",null,"FindServiceInstanceAnnotation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-serviceinstanceannotationdeleter"},"type ServiceInstanceAnnotationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceAnnotationDeleter interface {\n    Delete(o *ServiceInstanceAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServiceInstanceAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstanceannotationfinder"},"type ServiceInstanceAnnotationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceAnnotationFinder interface {\n    FindServiceInstanceAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceInstanceAnnotation, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstanceannotationfinisher"},"type ServiceInstanceAnnotationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceAnnotationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServiceInstanceAnnotation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServiceInstanceAnnotationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstanceannotationinserter"},"type ServiceInstanceAnnotationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceAnnotationInserter interface {\n    Insert(o *ServiceInstanceAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstanceannotationreloader"},"type ServiceInstanceAnnotationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceAnnotationReloader interface {\n    Reload(o *ServiceInstanceAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServiceInstanceAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstanceannotationslice"},"type ServiceInstanceAnnotationSlice"),(0,o.kt)("p",null,"ServiceInstanceAnnotationSlice is an alias for a slice of pointers to ServiceInstanceAnnotation","."," This should almost always be used instead of ","[","]","ServiceInstanceAnnotation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceAnnotationSlice []*ServiceInstanceAnnotation\n")),(0,o.kt)("h2",{id:"type-serviceinstanceannotationupdater"},"type ServiceInstanceAnnotationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceAnnotationUpdater interface {\n    Update(o *ServiceInstanceAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServiceInstanceAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstanceannotationupserter"},"type ServiceInstanceAnnotationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceAnnotationUpserter interface {\n    Upsert(o *ServiceInstanceAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstancedeleter"},"type ServiceInstanceDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceDeleter interface {\n    Delete(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServiceInstanceSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstancefinder"},"type ServiceInstanceFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceFinder interface {\n    FindServiceInstance(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceInstance, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstancefinisher"},"type ServiceInstanceFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServiceInstance, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServiceInstanceSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstanceinserter"},"type ServiceInstanceInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceInserter interface {\n    Insert(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstancelabel"},"type ServiceInstanceLabel"),(0,o.kt)("p",null,"ServiceInstanceLabel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServiceInstanceLabel struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    KeyName      null.String `boil:"key_name" json:"key_name,omitempty" toml:"key_name" yaml:"key_name,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *serviceInstanceLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   serviceInstanceLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findserviceinstancelabel"},"func FindServiceInstanceLabel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServiceInstanceLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceInstanceLabel, error)\n")),(0,o.kt)("p",null,"FindServiceInstanceLabel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-serviceinstancelabeldeleter"},"type ServiceInstanceLabelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceLabelDeleter interface {\n    Delete(o *ServiceInstanceLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServiceInstanceLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstancelabelfinder"},"type ServiceInstanceLabelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceLabelFinder interface {\n    FindServiceInstanceLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceInstanceLabel, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstancelabelfinisher"},"type ServiceInstanceLabelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceLabelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServiceInstanceLabel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServiceInstanceLabelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstancelabelinserter"},"type ServiceInstanceLabelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceLabelInserter interface {\n    Insert(o *ServiceInstanceLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstancelabelreloader"},"type ServiceInstanceLabelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceLabelReloader interface {\n    Reload(o *ServiceInstanceLabel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServiceInstanceLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstancelabelslice"},"type ServiceInstanceLabelSlice"),(0,o.kt)("p",null,"ServiceInstanceLabelSlice is an alias for a slice of pointers to ServiceInstanceLabel","."," This should almost always be used instead of ","[","]","ServiceInstanceLabel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceLabelSlice []*ServiceInstanceLabel\n")),(0,o.kt)("h2",{id:"type-serviceinstancelabelupdater"},"type ServiceInstanceLabelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceLabelUpdater interface {\n    Update(o *ServiceInstanceLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServiceInstanceLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstancelabelupserter"},"type ServiceInstanceLabelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceLabelUpserter interface {\n    Upsert(o *ServiceInstanceLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstanceoperation"},"type ServiceInstanceOperation"),(0,o.kt)("p",null,"ServiceInstanceOperation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServiceInstanceOperation struct {\n    ID                      int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                    string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt               time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt               null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ServiceInstanceID       null.Int    `boil:"service_instance_id" json:"service_instance_id,omitempty" toml:"service_instance_id" yaml:"service_instance_id,omitempty"`\n    Type                    null.String `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`\n    State                   null.String `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`\n    Description             null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`\n    ProposedChanges         string      `boil:"proposed_changes" json:"proposed_changes" toml:"proposed_changes" yaml:"proposed_changes"`\n    BrokerProvidedOperation null.String `boil:"broker_provided_operation" json:"broker_provided_operation,omitempty" toml:"broker_provided_operation" yaml:"broker_provided_operation,omitempty"`\n\n    R   *serviceInstanceOperationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   serviceInstanceOperationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findserviceinstanceoperation"},"func FindServiceInstanceOperation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServiceInstanceOperation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceInstanceOperation, error)\n")),(0,o.kt)("p",null,"FindServiceInstanceOperation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-serviceinstanceoperationdeleter"},"type ServiceInstanceOperationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceOperationDeleter interface {\n    Delete(o *ServiceInstanceOperation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServiceInstanceOperationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstanceoperationfinder"},"type ServiceInstanceOperationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceOperationFinder interface {\n    FindServiceInstanceOperation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceInstanceOperation, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstanceoperationfinisher"},"type ServiceInstanceOperationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceOperationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServiceInstanceOperation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServiceInstanceOperationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstanceoperationinserter"},"type ServiceInstanceOperationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceOperationInserter interface {\n    Insert(o *ServiceInstanceOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstanceoperationreloader"},"type ServiceInstanceOperationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceOperationReloader interface {\n    Reload(o *ServiceInstanceOperation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServiceInstanceOperationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstanceoperationslice"},"type ServiceInstanceOperationSlice"),(0,o.kt)("p",null,"ServiceInstanceOperationSlice is an alias for a slice of pointers to ServiceInstanceOperation","."," This should almost always be used instead of ","[","]","ServiceInstanceOperation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceOperationSlice []*ServiceInstanceOperation\n")),(0,o.kt)("h2",{id:"type-serviceinstanceoperationupdater"},"type ServiceInstanceOperationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceOperationUpdater interface {\n    Update(o *ServiceInstanceOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServiceInstanceOperationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstanceoperationupserter"},"type ServiceInstanceOperationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceOperationUpserter interface {\n    Upsert(o *ServiceInstanceOperation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstancereloader"},"type ServiceInstanceReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceReloader interface {\n    Reload(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServiceInstanceSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstanceslice"},"type ServiceInstanceSlice"),(0,o.kt)("p",null,"ServiceInstanceSlice is an alias for a slice of pointers to ServiceInstance","."," This should almost always be used instead of ","[","]","ServiceInstance","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceSlice []*ServiceInstance\n")),(0,o.kt)("h2",{id:"type-serviceinstanceupdater"},"type ServiceInstanceUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceUpdater interface {\n    Update(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServiceInstanceSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceinstanceupserter"},"type ServiceInstanceUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceInstanceUpserter interface {\n    Upsert(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicekey"},"type ServiceKey"),(0,o.kt)("p",null,"ServiceKey is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServiceKey struct {\n    ID                   int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                 string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt            time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt            null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Name                 string      `boil:"name" json:"name" toml:"name" yaml:"name"`\n    Salt                 null.String `boil:"salt" json:"salt,omitempty" toml:"salt" yaml:"salt,omitempty"`\n    Credentials          string      `boil:"credentials" json:"credentials" toml:"credentials" yaml:"credentials"`\n    ServiceInstanceID    int         `boil:"service_instance_id" json:"service_instance_id" toml:"service_instance_id" yaml:"service_instance_id"`\n    EncryptionKeyLabel   null.String `boil:"encryption_key_label" json:"encryption_key_label,omitempty" toml:"encryption_key_label" yaml:"encryption_key_label,omitempty"`\n    EncryptionIterations int         `boil:"encryption_iterations" json:"encryption_iterations" toml:"encryption_iterations" yaml:"encryption_iterations"`\n\n    R   *serviceKeyR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   serviceKeyL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findservicekey"},"func FindServiceKey"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServiceKey(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceKey, error)\n")),(0,o.kt)("p",null,"FindServiceKey retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-servicekeyannotation"},"type ServiceKeyAnnotation"),(0,o.kt)("p",null,"ServiceKeyAnnotation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServiceKeyAnnotation struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    Key          null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *serviceKeyAnnotationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   serviceKeyAnnotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findservicekeyannotation"},"func FindServiceKeyAnnotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServiceKeyAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceKeyAnnotation, error)\n")),(0,o.kt)("p",null,"FindServiceKeyAnnotation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-servicekeyannotationdeleter"},"type ServiceKeyAnnotationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyAnnotationDeleter interface {\n    Delete(o *ServiceKeyAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServiceKeyAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicekeyannotationfinder"},"type ServiceKeyAnnotationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyAnnotationFinder interface {\n    FindServiceKeyAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceKeyAnnotation, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicekeyannotationfinisher"},"type ServiceKeyAnnotationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyAnnotationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServiceKeyAnnotation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServiceKeyAnnotationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicekeyannotationinserter"},"type ServiceKeyAnnotationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyAnnotationInserter interface {\n    Insert(o *ServiceKeyAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicekeyannotationreloader"},"type ServiceKeyAnnotationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyAnnotationReloader interface {\n    Reload(o *ServiceKeyAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServiceKeyAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-servicekeyannotationslice"},"type ServiceKeyAnnotationSlice"),(0,o.kt)("p",null,"ServiceKeyAnnotationSlice is an alias for a slice of pointers to ServiceKeyAnnotation","."," This should almost always be used instead of ","[","]","ServiceKeyAnnotation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyAnnotationSlice []*ServiceKeyAnnotation\n")),(0,o.kt)("h2",{id:"type-servicekeyannotationupdater"},"type ServiceKeyAnnotationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyAnnotationUpdater interface {\n    Update(o *ServiceKeyAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServiceKeyAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicekeyannotationupserter"},"type ServiceKeyAnnotationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyAnnotationUpserter interface {\n    Upsert(o *ServiceKeyAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicekeydeleter"},"type ServiceKeyDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyDeleter interface {\n    Delete(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServiceKeySlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicekeyfinder"},"type ServiceKeyFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyFinder interface {\n    FindServiceKey(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceKey, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicekeyfinisher"},"type ServiceKeyFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServiceKey, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServiceKeySlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicekeyinserter"},"type ServiceKeyInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyInserter interface {\n    Insert(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicekeylabel"},"type ServiceKeyLabel"),(0,o.kt)("p",null,"ServiceKeyLabel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServiceKeyLabel struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    KeyName      null.String `boil:"key_name" json:"key_name,omitempty" toml:"key_name" yaml:"key_name,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *serviceKeyLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   serviceKeyLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findservicekeylabel"},"func FindServiceKeyLabel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServiceKeyLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceKeyLabel, error)\n")),(0,o.kt)("p",null,"FindServiceKeyLabel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-servicekeylabeldeleter"},"type ServiceKeyLabelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyLabelDeleter interface {\n    Delete(o *ServiceKeyLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServiceKeyLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicekeylabelfinder"},"type ServiceKeyLabelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyLabelFinder interface {\n    FindServiceKeyLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceKeyLabel, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicekeylabelfinisher"},"type ServiceKeyLabelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyLabelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServiceKeyLabel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServiceKeyLabelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicekeylabelinserter"},"type ServiceKeyLabelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyLabelInserter interface {\n    Insert(o *ServiceKeyLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicekeylabelreloader"},"type ServiceKeyLabelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyLabelReloader interface {\n    Reload(o *ServiceKeyLabel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServiceKeyLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-servicekeylabelslice"},"type ServiceKeyLabelSlice"),(0,o.kt)("p",null,"ServiceKeyLabelSlice is an alias for a slice of pointers to ServiceKeyLabel","."," This should almost always be used instead of ","[","]","ServiceKeyLabel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyLabelSlice []*ServiceKeyLabel\n")),(0,o.kt)("h2",{id:"type-servicekeylabelupdater"},"type ServiceKeyLabelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyLabelUpdater interface {\n    Update(o *ServiceKeyLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServiceKeyLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicekeylabelupserter"},"type ServiceKeyLabelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyLabelUpserter interface {\n    Upsert(o *ServiceKeyLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicekeyoperation"},"type ServiceKeyOperation"),(0,o.kt)("p",null,"ServiceKeyOperation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServiceKeyOperation struct {\n    ID                      int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    CreatedAt               time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt               null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ServiceKeyID            null.Int    `boil:"service_key_id" json:"service_key_id,omitempty" toml:"service_key_id" yaml:"service_key_id,omitempty"`\n    State                   string      `boil:"state" json:"state" toml:"state" yaml:"state"`\n    Type                    string      `boil:"type" json:"type" toml:"type" yaml:"type"`\n    Description             null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`\n    BrokerProvidedOperation null.String `boil:"broker_provided_operation" json:"broker_provided_operation,omitempty" toml:"broker_provided_operation" yaml:"broker_provided_operation,omitempty"`\n\n    R   *serviceKeyOperationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   serviceKeyOperationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findservicekeyoperation"},"func FindServiceKeyOperation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServiceKeyOperation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceKeyOperation, error)\n")),(0,o.kt)("p",null,"FindServiceKeyOperation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-servicekeyoperationdeleter"},"type ServiceKeyOperationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyOperationDeleter interface {\n    Delete(o *ServiceKeyOperation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServiceKeyOperationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicekeyoperationfinder"},"type ServiceKeyOperationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyOperationFinder interface {\n    FindServiceKeyOperation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceKeyOperation, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicekeyoperationfinisher"},"type ServiceKeyOperationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyOperationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServiceKeyOperation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServiceKeyOperationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicekeyoperationinserter"},"type ServiceKeyOperationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyOperationInserter interface {\n    Insert(o *ServiceKeyOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicekeyoperationreloader"},"type ServiceKeyOperationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyOperationReloader interface {\n    Reload(o *ServiceKeyOperation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServiceKeyOperationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-servicekeyoperationslice"},"type ServiceKeyOperationSlice"),(0,o.kt)("p",null,"ServiceKeyOperationSlice is an alias for a slice of pointers to ServiceKeyOperation","."," This should almost always be used instead of ","[","]","ServiceKeyOperation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyOperationSlice []*ServiceKeyOperation\n")),(0,o.kt)("h2",{id:"type-servicekeyoperationupdater"},"type ServiceKeyOperationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyOperationUpdater interface {\n    Update(o *ServiceKeyOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServiceKeyOperationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicekeyoperationupserter"},"type ServiceKeyOperationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyOperationUpserter interface {\n    Upsert(o *ServiceKeyOperation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicekeyreloader"},"type ServiceKeyReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyReloader interface {\n    Reload(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServiceKeySlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-servicekeyslice"},"type ServiceKeySlice"),(0,o.kt)("p",null,"ServiceKeySlice is an alias for a slice of pointers to ServiceKey","."," This should almost always be used instead of ","[","]","ServiceKey","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeySlice []*ServiceKey\n")),(0,o.kt)("h2",{id:"type-servicekeyupdater"},"type ServiceKeyUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyUpdater interface {\n    Update(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServiceKeySlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-servicekeyupserter"},"type ServiceKeyUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceKeyUpserter interface {\n    Upsert(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceofferingannotation"},"type ServiceOfferingAnnotation"),(0,o.kt)("p",null,"ServiceOfferingAnnotation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServiceOfferingAnnotation struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    Key          null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *serviceOfferingAnnotationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   serviceOfferingAnnotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findserviceofferingannotation"},"func FindServiceOfferingAnnotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServiceOfferingAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceOfferingAnnotation, error)\n")),(0,o.kt)("p",null,"FindServiceOfferingAnnotation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-serviceofferingannotationdeleter"},"type ServiceOfferingAnnotationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceOfferingAnnotationDeleter interface {\n    Delete(o *ServiceOfferingAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServiceOfferingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceofferingannotationfinder"},"type ServiceOfferingAnnotationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceOfferingAnnotationFinder interface {\n    FindServiceOfferingAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceOfferingAnnotation, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceofferingannotationfinisher"},"type ServiceOfferingAnnotationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceOfferingAnnotationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServiceOfferingAnnotation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServiceOfferingAnnotationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceofferingannotationinserter"},"type ServiceOfferingAnnotationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceOfferingAnnotationInserter interface {\n    Insert(o *ServiceOfferingAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceofferingannotationreloader"},"type ServiceOfferingAnnotationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceOfferingAnnotationReloader interface {\n    Reload(o *ServiceOfferingAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServiceOfferingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceofferingannotationslice"},"type ServiceOfferingAnnotationSlice"),(0,o.kt)("p",null,"ServiceOfferingAnnotationSlice is an alias for a slice of pointers to ServiceOfferingAnnotation","."," This should almost always be used instead of ","[","]","ServiceOfferingAnnotation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceOfferingAnnotationSlice []*ServiceOfferingAnnotation\n")),(0,o.kt)("h2",{id:"type-serviceofferingannotationupdater"},"type ServiceOfferingAnnotationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceOfferingAnnotationUpdater interface {\n    Update(o *ServiceOfferingAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServiceOfferingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceofferingannotationupserter"},"type ServiceOfferingAnnotationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceOfferingAnnotationUpserter interface {\n    Upsert(o *ServiceOfferingAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceofferinglabel"},"type ServiceOfferingLabel"),(0,o.kt)("p",null,"ServiceOfferingLabel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServiceOfferingLabel struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    KeyName      null.String `boil:"key_name" json:"key_name,omitempty" toml:"key_name" yaml:"key_name,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *serviceOfferingLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   serviceOfferingLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findserviceofferinglabel"},"func FindServiceOfferingLabel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServiceOfferingLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceOfferingLabel, error)\n")),(0,o.kt)("p",null,"FindServiceOfferingLabel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-serviceofferinglabeldeleter"},"type ServiceOfferingLabelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceOfferingLabelDeleter interface {\n    Delete(o *ServiceOfferingLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServiceOfferingLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceofferinglabelfinder"},"type ServiceOfferingLabelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceOfferingLabelFinder interface {\n    FindServiceOfferingLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceOfferingLabel, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceofferinglabelfinisher"},"type ServiceOfferingLabelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceOfferingLabelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServiceOfferingLabel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServiceOfferingLabelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceofferinglabelinserter"},"type ServiceOfferingLabelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceOfferingLabelInserter interface {\n    Insert(o *ServiceOfferingLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceofferinglabelreloader"},"type ServiceOfferingLabelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceOfferingLabelReloader interface {\n    Reload(o *ServiceOfferingLabel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServiceOfferingLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceofferinglabelslice"},"type ServiceOfferingLabelSlice"),(0,o.kt)("p",null,"ServiceOfferingLabelSlice is an alias for a slice of pointers to ServiceOfferingLabel","."," This should almost always be used instead of ","[","]","ServiceOfferingLabel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceOfferingLabelSlice []*ServiceOfferingLabel\n")),(0,o.kt)("h2",{id:"type-serviceofferinglabelupdater"},"type ServiceOfferingLabelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceOfferingLabelUpdater interface {\n    Update(o *ServiceOfferingLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServiceOfferingLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceofferinglabelupserter"},"type ServiceOfferingLabelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceOfferingLabelUpserter interface {\n    Upsert(o *ServiceOfferingLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceplan"},"type ServicePlan"),(0,o.kt)("p",null,"ServicePlan is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServicePlan struct {\n    ID                     int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                   string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt              time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt              null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Name                   string      `boil:"name" json:"name" toml:"name" yaml:"name"`\n    Description            string      `boil:"description" json:"description" toml:"description" yaml:"description"`\n    Free                   bool        `boil:"free" json:"free" toml:"free" yaml:"free"`\n    ServiceID              int         `boil:"service_id" json:"service_id" toml:"service_id" yaml:"service_id"`\n    Extra                  null.String `boil:"extra" json:"extra,omitempty" toml:"extra" yaml:"extra,omitempty"`\n    UniqueID               string      `boil:"unique_id" json:"unique_id" toml:"unique_id" yaml:"unique_id"`\n    Public                 null.Bool   `boil:"public" json:"public,omitempty" toml:"public" yaml:"public,omitempty"`\n    Active                 null.Bool   `boil:"active" json:"active,omitempty" toml:"active" yaml:"active,omitempty"`\n    Bindable               null.Bool   `boil:"bindable" json:"bindable,omitempty" toml:"bindable" yaml:"bindable,omitempty"`\n    CreateInstanceSchema   null.String `boil:"create_instance_schema" json:"create_instance_schema,omitempty" toml:"create_instance_schema" yaml:"create_instance_schema,omitempty"`\n    UpdateInstanceSchema   null.String `boil:"update_instance_schema" json:"update_instance_schema,omitempty" toml:"update_instance_schema" yaml:"update_instance_schema,omitempty"`\n    CreateBindingSchema    null.String `boil:"create_binding_schema" json:"create_binding_schema,omitempty" toml:"create_binding_schema" yaml:"create_binding_schema,omitempty"`\n    PlanUpdateable         null.Bool   `boil:"plan_updateable" json:"plan_updateable,omitempty" toml:"plan_updateable" yaml:"plan_updateable,omitempty"`\n    MaximumPollingDuration null.Int    `boil:"maximum_polling_duration" json:"maximum_polling_duration,omitempty" toml:"maximum_polling_duration" yaml:"maximum_polling_duration,omitempty"`\n    MaintenanceInfo        null.String `boil:"maintenance_info" json:"maintenance_info,omitempty" toml:"maintenance_info" yaml:"maintenance_info,omitempty"`\n\n    R   *servicePlanR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   servicePlanL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findserviceplan"},"func FindServicePlan"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServicePlan(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServicePlan, error)\n")),(0,o.kt)("p",null,"FindServicePlan retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-serviceplanannotation"},"type ServicePlanAnnotation"),(0,o.kt)("p",null,"ServicePlanAnnotation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServicePlanAnnotation struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    Key          null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *servicePlanAnnotationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   servicePlanAnnotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findserviceplanannotation"},"func FindServicePlanAnnotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServicePlanAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServicePlanAnnotation, error)\n")),(0,o.kt)("p",null,"FindServicePlanAnnotation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-serviceplanannotationdeleter"},"type ServicePlanAnnotationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanAnnotationDeleter interface {\n    Delete(o *ServicePlanAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServicePlanAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanannotationfinder"},"type ServicePlanAnnotationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanAnnotationFinder interface {\n    FindServicePlanAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServicePlanAnnotation, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanannotationfinisher"},"type ServicePlanAnnotationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanAnnotationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServicePlanAnnotation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServicePlanAnnotationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanannotationinserter"},"type ServicePlanAnnotationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanAnnotationInserter interface {\n    Insert(o *ServicePlanAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanannotationreloader"},"type ServicePlanAnnotationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanAnnotationReloader interface {\n    Reload(o *ServicePlanAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServicePlanAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanannotationslice"},"type ServicePlanAnnotationSlice"),(0,o.kt)("p",null,"ServicePlanAnnotationSlice is an alias for a slice of pointers to ServicePlanAnnotation","."," This should almost always be used instead of ","[","]","ServicePlanAnnotation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanAnnotationSlice []*ServicePlanAnnotation\n")),(0,o.kt)("h2",{id:"type-serviceplanannotationupdater"},"type ServicePlanAnnotationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanAnnotationUpdater interface {\n    Update(o *ServicePlanAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServicePlanAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanannotationupserter"},"type ServicePlanAnnotationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanAnnotationUpserter interface {\n    Upsert(o *ServicePlanAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceplandeleter"},"type ServicePlanDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanDeleter interface {\n    Delete(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServicePlanSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanfinder"},"type ServicePlanFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanFinder interface {\n    FindServicePlan(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServicePlan, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanfinisher"},"type ServicePlanFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServicePlan, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServicePlanSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceplaninserter"},"type ServicePlanInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanInserter interface {\n    Insert(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanlabel"},"type ServicePlanLabel"),(0,o.kt)("p",null,"ServicePlanLabel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServicePlanLabel struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    KeyName      null.String `boil:"key_name" json:"key_name,omitempty" toml:"key_name" yaml:"key_name,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *servicePlanLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   servicePlanLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findserviceplanlabel"},"func FindServicePlanLabel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServicePlanLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServicePlanLabel, error)\n")),(0,o.kt)("p",null,"FindServicePlanLabel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-serviceplanlabeldeleter"},"type ServicePlanLabelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanLabelDeleter interface {\n    Delete(o *ServicePlanLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServicePlanLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanlabelfinder"},"type ServicePlanLabelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanLabelFinder interface {\n    FindServicePlanLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServicePlanLabel, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanlabelfinisher"},"type ServicePlanLabelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanLabelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServicePlanLabel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServicePlanLabelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanlabelinserter"},"type ServicePlanLabelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanLabelInserter interface {\n    Insert(o *ServicePlanLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanlabelreloader"},"type ServicePlanLabelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanLabelReloader interface {\n    Reload(o *ServicePlanLabel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServicePlanLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanlabelslice"},"type ServicePlanLabelSlice"),(0,o.kt)("p",null,"ServicePlanLabelSlice is an alias for a slice of pointers to ServicePlanLabel","."," This should almost always be used instead of ","[","]","ServicePlanLabel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanLabelSlice []*ServicePlanLabel\n")),(0,o.kt)("h2",{id:"type-serviceplanlabelupdater"},"type ServicePlanLabelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanLabelUpdater interface {\n    Update(o *ServicePlanLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServicePlanLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanlabelupserter"},"type ServicePlanLabelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanLabelUpserter interface {\n    Upsert(o *ServicePlanLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanreloader"},"type ServicePlanReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanReloader interface {\n    Reload(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServicePlanSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanslice"},"type ServicePlanSlice"),(0,o.kt)("p",null,"ServicePlanSlice is an alias for a slice of pointers to ServicePlan","."," This should almost always be used instead of ","[","]","ServicePlan","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanSlice []*ServicePlan\n")),(0,o.kt)("h2",{id:"type-serviceplanupdater"},"type ServicePlanUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanUpdater interface {\n    Update(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServicePlanSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanupserter"},"type ServicePlanUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanUpserter interface {\n    Upsert(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanvisibility"},"type ServicePlanVisibility"),(0,o.kt)("p",null,"ServicePlanVisibility is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServicePlanVisibility struct {\n    ID             int       `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID           string    `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt      null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ServicePlanID  int       `boil:"service_plan_id" json:"service_plan_id" toml:"service_plan_id" yaml:"service_plan_id"`\n    OrganizationID int       `boil:"organization_id" json:"organization_id" toml:"organization_id" yaml:"organization_id"`\n\n    R   *servicePlanVisibilityR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   servicePlanVisibilityL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findserviceplanvisibility"},"func FindServicePlanVisibility"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServicePlanVisibility(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServicePlanVisibility, error)\n")),(0,o.kt)("p",null,"FindServicePlanVisibility retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-serviceplanvisibilitydeleter"},"type ServicePlanVisibilityDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanVisibilityDeleter interface {\n    Delete(o *ServicePlanVisibility, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServicePlanVisibilitySlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanvisibilityfinder"},"type ServicePlanVisibilityFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanVisibilityFinder interface {\n    FindServicePlanVisibility(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServicePlanVisibility, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanvisibilityfinisher"},"type ServicePlanVisibilityFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanVisibilityFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServicePlanVisibility, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServicePlanVisibilitySlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanvisibilityinserter"},"type ServicePlanVisibilityInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanVisibilityInserter interface {\n    Insert(o *ServicePlanVisibility, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanvisibilityreloader"},"type ServicePlanVisibilityReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanVisibilityReloader interface {\n    Reload(o *ServicePlanVisibility, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServicePlanVisibilitySlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanvisibilityslice"},"type ServicePlanVisibilitySlice"),(0,o.kt)("p",null,"ServicePlanVisibilitySlice is an alias for a slice of pointers to ServicePlanVisibility","."," This should almost always be used instead of ","[","]","ServicePlanVisibility","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanVisibilitySlice []*ServicePlanVisibility\n")),(0,o.kt)("h2",{id:"type-serviceplanvisibilityupdater"},"type ServicePlanVisibilityUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanVisibilityUpdater interface {\n    Update(o *ServicePlanVisibility, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServicePlanVisibilitySlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceplanvisibilityupserter"},"type ServicePlanVisibilityUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServicePlanVisibilityUpserter interface {\n    Upsert(o *ServicePlanVisibility, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-servicereloader"},"type ServiceReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceReloader interface {\n    Reload(o *Service, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServiceSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceslice"},"type ServiceSlice"),(0,o.kt)("p",null,"ServiceSlice is an alias for a slice of pointers to Service","."," This should almost always be used instead of ","[","]","Service","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceSlice []*Service\n")),(0,o.kt)("h2",{id:"type-serviceupdater"},"type ServiceUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceUpdater interface {\n    Update(o *Service, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServiceSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceupserter"},"type ServiceUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceUpserter interface {\n    Upsert(o *Service, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceusageevent"},"type ServiceUsageEvent"),(0,o.kt)("p",null,"ServiceUsageEvent is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type ServiceUsageEvent struct {\n    ID                  int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt           time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    State               string      `boil:"state" json:"state" toml:"state" yaml:"state"`\n    OrgGUID             string      `boil:"org_guid" json:"org_guid" toml:"org_guid" yaml:"org_guid"`\n    SpaceGUID           string      `boil:"space_guid" json:"space_guid" toml:"space_guid" yaml:"space_guid"`\n    SpaceName           string      `boil:"space_name" json:"space_name" toml:"space_name" yaml:"space_name"`\n    ServiceInstanceGUID string      `boil:"service_instance_guid" json:"service_instance_guid" toml:"service_instance_guid" yaml:"service_instance_guid"`\n    ServiceInstanceName string      `boil:"service_instance_name" json:"service_instance_name" toml:"service_instance_name" yaml:"service_instance_name"`\n    ServiceInstanceType string      `boil:"service_instance_type" json:"service_instance_type" toml:"service_instance_type" yaml:"service_instance_type"`\n    ServicePlanGUID     null.String `boil:"service_plan_guid" json:"service_plan_guid,omitempty" toml:"service_plan_guid" yaml:"service_plan_guid,omitempty"`\n    ServicePlanName     null.String `boil:"service_plan_name" json:"service_plan_name,omitempty" toml:"service_plan_name" yaml:"service_plan_name,omitempty"`\n    ServiceGUID         null.String `boil:"service_guid" json:"service_guid,omitempty" toml:"service_guid" yaml:"service_guid,omitempty"`\n    ServiceLabel        null.String `boil:"service_label" json:"service_label,omitempty" toml:"service_label" yaml:"service_label,omitempty"`\n    ServiceBrokerName   null.String `boil:"service_broker_name" json:"service_broker_name,omitempty" toml:"service_broker_name" yaml:"service_broker_name,omitempty"`\n    ServiceBrokerGUID   null.String `boil:"service_broker_guid" json:"service_broker_guid,omitempty" toml:"service_broker_guid" yaml:"service_broker_guid,omitempty"`\n\n    R   *serviceUsageEventR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   serviceUsageEventL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findserviceusageevent"},"func FindServiceUsageEvent"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindServiceUsageEvent(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceUsageEvent, error)\n")),(0,o.kt)("p",null,"FindServiceUsageEvent retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-serviceusageeventdeleter"},"type ServiceUsageEventDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceUsageEventDeleter interface {\n    Delete(o *ServiceUsageEvent, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o ServiceUsageEventSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceusageeventfinder"},"type ServiceUsageEventFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceUsageEventFinder interface {\n    FindServiceUsageEvent(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceUsageEvent, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceusageeventfinisher"},"type ServiceUsageEventFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceUsageEventFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*ServiceUsageEvent, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (ServiceUsageEventSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceusageeventinserter"},"type ServiceUsageEventInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceUsageEventInserter interface {\n    Insert(o *ServiceUsageEvent, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceusageeventreloader"},"type ServiceUsageEventReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceUsageEventReloader interface {\n    Reload(o *ServiceUsageEvent, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *ServiceUsageEventSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-serviceusageeventslice"},"type ServiceUsageEventSlice"),(0,o.kt)("p",null,"ServiceUsageEventSlice is an alias for a slice of pointers to ServiceUsageEvent","."," This should almost always be used instead of ","[","]","ServiceUsageEvent","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceUsageEventSlice []*ServiceUsageEvent\n")),(0,o.kt)("h2",{id:"type-serviceusageeventupdater"},"type ServiceUsageEventUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceUsageEventUpdater interface {\n    Update(o *ServiceUsageEvent, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o ServiceUsageEventSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-serviceusageeventupserter"},"type ServiceUsageEventUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type ServiceUsageEventUpserter interface {\n    Upsert(o *ServiceUsageEvent, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-sidecar"},"type Sidecar"),(0,o.kt)("p",null,"Sidecar is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type Sidecar struct {\n    ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID      string    `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`\n    Command   string    `boil:"command" json:"command" toml:"command" yaml:"command"`\n    AppGUID   string    `boil:"app_guid" json:"app_guid" toml:"app_guid" yaml:"app_guid"`\n    Memory    null.Int  `boil:"memory" json:"memory,omitempty" toml:"memory" yaml:"memory,omitempty"`\n    Origin    string    `boil:"origin" json:"origin" toml:"origin" yaml:"origin"`\n\n    R   *sidecarR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   sidecarL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findsidecar"},"func FindSidecar"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindSidecar(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Sidecar, error)\n")),(0,o.kt)("p",null,"FindSidecar retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-sidecardeleter"},"type SidecarDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SidecarDeleter interface {\n    Delete(o *Sidecar, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o SidecarSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-sidecarfinder"},"type SidecarFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SidecarFinder interface {\n    FindSidecar(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Sidecar, error)\n}\n")),(0,o.kt)("h2",{id:"type-sidecarfinisher"},"type SidecarFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SidecarFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*Sidecar, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (SidecarSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-sidecarinserter"},"type SidecarInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SidecarInserter interface {\n    Insert(o *Sidecar, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-sidecarprocesstype"},"type SidecarProcessType"),(0,o.kt)("p",null,"SidecarProcessType is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type SidecarProcessType struct {\n    ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID        string    `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt   null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Type        string    `boil:"type" json:"type" toml:"type" yaml:"type"`\n    SidecarGUID string    `boil:"sidecar_guid" json:"sidecar_guid" toml:"sidecar_guid" yaml:"sidecar_guid"`\n    AppGUID     string    `boil:"app_guid" json:"app_guid" toml:"app_guid" yaml:"app_guid"`\n\n    R   *sidecarProcessTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   sidecarProcessTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findsidecarprocesstype"},"func FindSidecarProcessType"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindSidecarProcessType(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SidecarProcessType, error)\n")),(0,o.kt)("p",null,"FindSidecarProcessType retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-sidecarprocesstypedeleter"},"type SidecarProcessTypeDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SidecarProcessTypeDeleter interface {\n    Delete(o *SidecarProcessType, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o SidecarProcessTypeSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-sidecarprocesstypefinder"},"type SidecarProcessTypeFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SidecarProcessTypeFinder interface {\n    FindSidecarProcessType(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SidecarProcessType, error)\n}\n")),(0,o.kt)("h2",{id:"type-sidecarprocesstypefinisher"},"type SidecarProcessTypeFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SidecarProcessTypeFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*SidecarProcessType, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (SidecarProcessTypeSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-sidecarprocesstypeinserter"},"type SidecarProcessTypeInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SidecarProcessTypeInserter interface {\n    Insert(o *SidecarProcessType, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-sidecarprocesstypereloader"},"type SidecarProcessTypeReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SidecarProcessTypeReloader interface {\n    Reload(o *SidecarProcessType, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *SidecarProcessTypeSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-sidecarprocesstypeslice"},"type SidecarProcessTypeSlice"),(0,o.kt)("p",null,"SidecarProcessTypeSlice is an alias for a slice of pointers to SidecarProcessType","."," This should almost always be used instead of ","[","]","SidecarProcessType","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SidecarProcessTypeSlice []*SidecarProcessType\n")),(0,o.kt)("h2",{id:"type-sidecarprocesstypeupdater"},"type SidecarProcessTypeUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SidecarProcessTypeUpdater interface {\n    Update(o *SidecarProcessType, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o SidecarProcessTypeSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-sidecarprocesstypeupserter"},"type SidecarProcessTypeUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SidecarProcessTypeUpserter interface {\n    Upsert(o *SidecarProcessType, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-sidecarreloader"},"type SidecarReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SidecarReloader interface {\n    Reload(o *Sidecar, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *SidecarSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-sidecarslice"},"type SidecarSlice"),(0,o.kt)("p",null,"SidecarSlice is an alias for a slice of pointers to Sidecar","."," This should almost always be used instead of ","[","]","Sidecar","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SidecarSlice []*Sidecar\n")),(0,o.kt)("h2",{id:"type-sidecarupdater"},"type SidecarUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SidecarUpdater interface {\n    Update(o *Sidecar, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o SidecarSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-sidecarupserter"},"type SidecarUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SidecarUpserter interface {\n    Upsert(o *Sidecar, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-space"},"type Space"),(0,o.kt)("p",null,"Space is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type Space struct {\n    ID                     int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                   string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt              time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt              null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Name                   string      `boil:"name" json:"name" toml:"name" yaml:"name"`\n    OrganizationID         int         `boil:"organization_id" json:"organization_id" toml:"organization_id" yaml:"organization_id"`\n    SpaceQuotaDefinitionID null.Int    `boil:"space_quota_definition_id" json:"space_quota_definition_id,omitempty" toml:"space_quota_definition_id" yaml:"space_quota_definition_id,omitempty"`\n    AllowSSH               null.Bool   `boil:"allow_ssh" json:"allow_ssh,omitempty" toml:"allow_ssh" yaml:"allow_ssh,omitempty"`\n    IsolationSegmentGUID   null.String `boil:"isolation_segment_guid" json:"isolation_segment_guid,omitempty" toml:"isolation_segment_guid" yaml:"isolation_segment_guid,omitempty"`\n\n    R   *spaceR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   spaceL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findspace"},"func FindSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindSpace(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Space, error)\n")),(0,o.kt)("p",null,"FindSpace retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-spaceannotation"},"type SpaceAnnotation"),(0,o.kt)("p",null,"SpaceAnnotation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type SpaceAnnotation struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    Key          null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *spaceAnnotationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   spaceAnnotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findspaceannotation"},"func FindSpaceAnnotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindSpaceAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SpaceAnnotation, error)\n")),(0,o.kt)("p",null,"FindSpaceAnnotation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-spaceannotationdeleter"},"type SpaceAnnotationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceAnnotationDeleter interface {\n    Delete(o *SpaceAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o SpaceAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-spaceannotationfinder"},"type SpaceAnnotationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceAnnotationFinder interface {\n    FindSpaceAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SpaceAnnotation, error)\n}\n")),(0,o.kt)("h2",{id:"type-spaceannotationfinisher"},"type SpaceAnnotationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceAnnotationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*SpaceAnnotation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (SpaceAnnotationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-spaceannotationinserter"},"type SpaceAnnotationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceAnnotationInserter interface {\n    Insert(o *SpaceAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-spaceannotationreloader"},"type SpaceAnnotationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceAnnotationReloader interface {\n    Reload(o *SpaceAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *SpaceAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-spaceannotationslice"},"type SpaceAnnotationSlice"),(0,o.kt)("p",null,"SpaceAnnotationSlice is an alias for a slice of pointers to SpaceAnnotation","."," This should almost always be used instead of ","[","]","SpaceAnnotation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceAnnotationSlice []*SpaceAnnotation\n")),(0,o.kt)("h2",{id:"type-spaceannotationupdater"},"type SpaceAnnotationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceAnnotationUpdater interface {\n    Update(o *SpaceAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o SpaceAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-spaceannotationupserter"},"type SpaceAnnotationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceAnnotationUpserter interface {\n    Upsert(o *SpaceAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-spacedeleter"},"type SpaceDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceDeleter interface {\n    Delete(o *Space, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o SpaceSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacefinder"},"type SpaceFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceFinder interface {\n    FindSpace(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Space, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacefinisher"},"type SpaceFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*Space, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (SpaceSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-spaceinserter"},"type SpaceInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceInserter interface {\n    Insert(o *Space, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-spacelabel"},"type SpaceLabel"),(0,o.kt)("p",null,"SpaceLabel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type SpaceLabel struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    KeyName      null.String `boil:"key_name" json:"key_name,omitempty" toml:"key_name" yaml:"key_name,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *spaceLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   spaceLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findspacelabel"},"func FindSpaceLabel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindSpaceLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SpaceLabel, error)\n")),(0,o.kt)("p",null,"FindSpaceLabel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-spacelabeldeleter"},"type SpaceLabelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceLabelDeleter interface {\n    Delete(o *SpaceLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o SpaceLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacelabelfinder"},"type SpaceLabelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceLabelFinder interface {\n    FindSpaceLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SpaceLabel, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacelabelfinisher"},"type SpaceLabelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceLabelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*SpaceLabel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (SpaceLabelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacelabelinserter"},"type SpaceLabelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceLabelInserter interface {\n    Insert(o *SpaceLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-spacelabelreloader"},"type SpaceLabelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceLabelReloader interface {\n    Reload(o *SpaceLabel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *SpaceLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-spacelabelslice"},"type SpaceLabelSlice"),(0,o.kt)("p",null,"SpaceLabelSlice is an alias for a slice of pointers to SpaceLabel","."," This should almost always be used instead of ","[","]","SpaceLabel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceLabelSlice []*SpaceLabel\n")),(0,o.kt)("h2",{id:"type-spacelabelupdater"},"type SpaceLabelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceLabelUpdater interface {\n    Update(o *SpaceLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o SpaceLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacelabelupserter"},"type SpaceLabelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceLabelUpserter interface {\n    Upsert(o *SpaceLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-spacequotadefinition"},"type SpaceQuotaDefinition"),(0,o.kt)("p",null,"SpaceQuotaDefinition is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type SpaceQuotaDefinition struct {\n    ID                      int       `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                    string    `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt               time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt               null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Name                    string    `boil:"name" json:"name" toml:"name" yaml:"name"`\n    NonBasicServicesAllowed bool      `boil:"non_basic_services_allowed" json:"non_basic_services_allowed" toml:"non_basic_services_allowed" yaml:"non_basic_services_allowed"`\n    TotalServices           int       `boil:"total_services" json:"total_services" toml:"total_services" yaml:"total_services"`\n    MemoryLimit             int       `boil:"memory_limit" json:"memory_limit" toml:"memory_limit" yaml:"memory_limit"`\n    TotalRoutes             int       `boil:"total_routes" json:"total_routes" toml:"total_routes" yaml:"total_routes"`\n    InstanceMemoryLimit     int       `boil:"instance_memory_limit" json:"instance_memory_limit" toml:"instance_memory_limit" yaml:"instance_memory_limit"`\n    OrganizationID          int       `boil:"organization_id" json:"organization_id" toml:"organization_id" yaml:"organization_id"`\n    AppInstanceLimit        null.Int  `boil:"app_instance_limit" json:"app_instance_limit,omitempty" toml:"app_instance_limit" yaml:"app_instance_limit,omitempty"`\n    AppTaskLimit            null.Int  `boil:"app_task_limit" json:"app_task_limit,omitempty" toml:"app_task_limit" yaml:"app_task_limit,omitempty"`\n    TotalServiceKeys        int       `boil:"total_service_keys" json:"total_service_keys" toml:"total_service_keys" yaml:"total_service_keys"`\n    TotalReservedRoutePorts null.Int  `boil:"total_reserved_route_ports" json:"total_reserved_route_ports,omitempty" toml:"total_reserved_route_ports" yaml:"total_reserved_route_ports,omitempty"`\n\n    R   *spaceQuotaDefinitionR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   spaceQuotaDefinitionL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findspacequotadefinition"},"func FindSpaceQuotaDefinition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindSpaceQuotaDefinition(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SpaceQuotaDefinition, error)\n")),(0,o.kt)("p",null,"FindSpaceQuotaDefinition retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-spacequotadefinitiondeleter"},"type SpaceQuotaDefinitionDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceQuotaDefinitionDeleter interface {\n    Delete(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o SpaceQuotaDefinitionSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacequotadefinitionfinder"},"type SpaceQuotaDefinitionFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceQuotaDefinitionFinder interface {\n    FindSpaceQuotaDefinition(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SpaceQuotaDefinition, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacequotadefinitionfinisher"},"type SpaceQuotaDefinitionFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceQuotaDefinitionFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*SpaceQuotaDefinition, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (SpaceQuotaDefinitionSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacequotadefinitioninserter"},"type SpaceQuotaDefinitionInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceQuotaDefinitionInserter interface {\n    Insert(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-spacequotadefinitionreloader"},"type SpaceQuotaDefinitionReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceQuotaDefinitionReloader interface {\n    Reload(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *SpaceQuotaDefinitionSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-spacequotadefinitionslice"},"type SpaceQuotaDefinitionSlice"),(0,o.kt)("p",null,"SpaceQuotaDefinitionSlice is an alias for a slice of pointers to SpaceQuotaDefinition","."," This should almost always be used instead of ","[","]","SpaceQuotaDefinition","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceQuotaDefinitionSlice []*SpaceQuotaDefinition\n")),(0,o.kt)("h2",{id:"type-spacequotadefinitionupdater"},"type SpaceQuotaDefinitionUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceQuotaDefinitionUpdater interface {\n    Update(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o SpaceQuotaDefinitionSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacequotadefinitionupserter"},"type SpaceQuotaDefinitionUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceQuotaDefinitionUpserter interface {\n    Upsert(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-spacereloader"},"type SpaceReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceReloader interface {\n    Reload(o *Space, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *SpaceSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-spaceslice"},"type SpaceSlice"),(0,o.kt)("p",null,"SpaceSlice is an alias for a slice of pointers to Space","."," This should almost always be used instead of ","[","]","Space","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceSlice []*Space\n")),(0,o.kt)("h2",{id:"type-spaceupdater"},"type SpaceUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceUpdater interface {\n    Update(o *Space, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o SpaceSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-spaceupserter"},"type SpaceUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpaceUpserter interface {\n    Upsert(o *Space, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-spacesapplicationsupporter"},"type SpacesApplicationSupporter"),(0,o.kt)("p",null,"SpacesApplicationSupporter is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type SpacesApplicationSupporter struct {\n    SpacesApplicationSupportersPK int         `boil:"spaces_application_supporters_pk" json:"spaces_application_supporters_pk" toml:"spaces_application_supporters_pk" yaml:"spaces_application_supporters_pk"`\n    RoleGUID                      null.String `boil:"role_guid" json:"role_guid,omitempty" toml:"role_guid" yaml:"role_guid,omitempty"`\n    SpaceID                       int         `boil:"space_id" json:"space_id" toml:"space_id" yaml:"space_id"`\n    UserID                        int         `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`\n    CreatedAt                     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt                     time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`\n\n    R   *spacesApplicationSupporterR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   spacesApplicationSupporterL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findspacesapplicationsupporter"},"func FindSpacesApplicationSupporter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindSpacesApplicationSupporter(ctx context.Context, exec boil.ContextExecutor, spacesApplicationSupportersPK int, selectCols ...string) (*SpacesApplicationSupporter, error)\n")),(0,o.kt)("p",null,"FindSpacesApplicationSupporter retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-spacesapplicationsupporterdeleter"},"type SpacesApplicationSupporterDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesApplicationSupporterDeleter interface {\n    Delete(o *SpacesApplicationSupporter, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o SpacesApplicationSupporterSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacesapplicationsupporterfinder"},"type SpacesApplicationSupporterFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesApplicationSupporterFinder interface {\n    FindSpacesApplicationSupporter(ctx context.Context, exec boil.ContextExecutor, spacesApplicationSupportersPK int, selectCols ...string) (*SpacesApplicationSupporter, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacesapplicationsupporterfinisher"},"type SpacesApplicationSupporterFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesApplicationSupporterFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*SpacesApplicationSupporter, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (SpacesApplicationSupporterSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacesapplicationsupporterinserter"},"type SpacesApplicationSupporterInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesApplicationSupporterInserter interface {\n    Insert(o *SpacesApplicationSupporter, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-spacesapplicationsupporterreloader"},"type SpacesApplicationSupporterReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesApplicationSupporterReloader interface {\n    Reload(o *SpacesApplicationSupporter, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *SpacesApplicationSupporterSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-spacesapplicationsupporterslice"},"type SpacesApplicationSupporterSlice"),(0,o.kt)("p",null,"SpacesApplicationSupporterSlice is an alias for a slice of pointers to SpacesApplicationSupporter","."," This should almost always be used instead of ","[","]","SpacesApplicationSupporter","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesApplicationSupporterSlice []*SpacesApplicationSupporter\n")),(0,o.kt)("h2",{id:"type-spacesapplicationsupporterupdater"},"type SpacesApplicationSupporterUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesApplicationSupporterUpdater interface {\n    Update(o *SpacesApplicationSupporter, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o SpacesApplicationSupporterSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacesapplicationsupporterupserter"},"type SpacesApplicationSupporterUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesApplicationSupporterUpserter interface {\n    Upsert(o *SpacesApplicationSupporter, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-spacesauditor"},"type SpacesAuditor"),(0,o.kt)("p",null,"SpacesAuditor is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type SpacesAuditor struct {\n    SpaceID          int         `boil:"space_id" json:"space_id" toml:"space_id" yaml:"space_id"`\n    UserID           int         `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`\n    SpacesAuditorsPK int         `boil:"spaces_auditors_pk" json:"spaces_auditors_pk" toml:"spaces_auditors_pk" yaml:"spaces_auditors_pk"`\n    RoleGUID         null.String `boil:"role_guid" json:"role_guid,omitempty" toml:"role_guid" yaml:"role_guid,omitempty"`\n    CreatedAt        time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt        time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`\n\n    R   *spacesAuditorR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   spacesAuditorL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findspacesauditor"},"func FindSpacesAuditor"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindSpacesAuditor(ctx context.Context, exec boil.ContextExecutor, spacesAuditorsPK int, selectCols ...string) (*SpacesAuditor, error)\n")),(0,o.kt)("p",null,"FindSpacesAuditor retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-spacesauditordeleter"},"type SpacesAuditorDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesAuditorDeleter interface {\n    Delete(o *SpacesAuditor, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o SpacesAuditorSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacesauditorfinder"},"type SpacesAuditorFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesAuditorFinder interface {\n    FindSpacesAuditor(ctx context.Context, exec boil.ContextExecutor, spacesAuditorsPK int, selectCols ...string) (*SpacesAuditor, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacesauditorfinisher"},"type SpacesAuditorFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesAuditorFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*SpacesAuditor, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (SpacesAuditorSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacesauditorinserter"},"type SpacesAuditorInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesAuditorInserter interface {\n    Insert(o *SpacesAuditor, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-spacesauditorreloader"},"type SpacesAuditorReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesAuditorReloader interface {\n    Reload(o *SpacesAuditor, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *SpacesAuditorSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-spacesauditorslice"},"type SpacesAuditorSlice"),(0,o.kt)("p",null,"SpacesAuditorSlice is an alias for a slice of pointers to SpacesAuditor","."," This should almost always be used instead of ","[","]","SpacesAuditor","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesAuditorSlice []*SpacesAuditor\n")),(0,o.kt)("h2",{id:"type-spacesauditorupdater"},"type SpacesAuditorUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesAuditorUpdater interface {\n    Update(o *SpacesAuditor, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o SpacesAuditorSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacesauditorupserter"},"type SpacesAuditorUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesAuditorUpserter interface {\n    Upsert(o *SpacesAuditor, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-spacesdeveloper"},"type SpacesDeveloper"),(0,o.kt)("p",null,"SpacesDeveloper is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type SpacesDeveloper struct {\n    SpaceID            int         `boil:"space_id" json:"space_id" toml:"space_id" yaml:"space_id"`\n    UserID             int         `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`\n    SpacesDevelopersPK int         `boil:"spaces_developers_pk" json:"spaces_developers_pk" toml:"spaces_developers_pk" yaml:"spaces_developers_pk"`\n    RoleGUID           null.String `boil:"role_guid" json:"role_guid,omitempty" toml:"role_guid" yaml:"role_guid,omitempty"`\n    CreatedAt          time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt          time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`\n\n    R   *spacesDeveloperR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   spacesDeveloperL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findspacesdeveloper"},"func FindSpacesDeveloper"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindSpacesDeveloper(ctx context.Context, exec boil.ContextExecutor, spacesDevelopersPK int, selectCols ...string) (*SpacesDeveloper, error)\n")),(0,o.kt)("p",null,"FindSpacesDeveloper retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-spacesdeveloperdeleter"},"type SpacesDeveloperDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesDeveloperDeleter interface {\n    Delete(o *SpacesDeveloper, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o SpacesDeveloperSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacesdeveloperfinder"},"type SpacesDeveloperFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesDeveloperFinder interface {\n    FindSpacesDeveloper(ctx context.Context, exec boil.ContextExecutor, spacesDevelopersPK int, selectCols ...string) (*SpacesDeveloper, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacesdeveloperfinisher"},"type SpacesDeveloperFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesDeveloperFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*SpacesDeveloper, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (SpacesDeveloperSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacesdeveloperinserter"},"type SpacesDeveloperInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesDeveloperInserter interface {\n    Insert(o *SpacesDeveloper, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-spacesdeveloperreloader"},"type SpacesDeveloperReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesDeveloperReloader interface {\n    Reload(o *SpacesDeveloper, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *SpacesDeveloperSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-spacesdeveloperslice"},"type SpacesDeveloperSlice"),(0,o.kt)("p",null,"SpacesDeveloperSlice is an alias for a slice of pointers to SpacesDeveloper","."," This should almost always be used instead of ","[","]","SpacesDeveloper","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesDeveloperSlice []*SpacesDeveloper\n")),(0,o.kt)("h2",{id:"type-spacesdeveloperupdater"},"type SpacesDeveloperUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesDeveloperUpdater interface {\n    Update(o *SpacesDeveloper, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o SpacesDeveloperSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacesdeveloperupserter"},"type SpacesDeveloperUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesDeveloperUpserter interface {\n    Upsert(o *SpacesDeveloper, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-spacesmanager"},"type SpacesManager"),(0,o.kt)("p",null,"SpacesManager is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type SpacesManager struct {\n    SpaceID          int         `boil:"space_id" json:"space_id" toml:"space_id" yaml:"space_id"`\n    UserID           int         `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`\n    SpacesManagersPK int         `boil:"spaces_managers_pk" json:"spaces_managers_pk" toml:"spaces_managers_pk" yaml:"spaces_managers_pk"`\n    RoleGUID         null.String `boil:"role_guid" json:"role_guid,omitempty" toml:"role_guid" yaml:"role_guid,omitempty"`\n    CreatedAt        time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt        time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`\n\n    R   *spacesManagerR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   spacesManagerL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findspacesmanager"},"func FindSpacesManager"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindSpacesManager(ctx context.Context, exec boil.ContextExecutor, spacesManagersPK int, selectCols ...string) (*SpacesManager, error)\n")),(0,o.kt)("p",null,"FindSpacesManager retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-spacesmanagerdeleter"},"type SpacesManagerDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesManagerDeleter interface {\n    Delete(o *SpacesManager, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o SpacesManagerSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacesmanagerfinder"},"type SpacesManagerFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesManagerFinder interface {\n    FindSpacesManager(ctx context.Context, exec boil.ContextExecutor, spacesManagersPK int, selectCols ...string) (*SpacesManager, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacesmanagerfinisher"},"type SpacesManagerFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesManagerFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*SpacesManager, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (SpacesManagerSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacesmanagerinserter"},"type SpacesManagerInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesManagerInserter interface {\n    Insert(o *SpacesManager, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-spacesmanagerreloader"},"type SpacesManagerReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesManagerReloader interface {\n    Reload(o *SpacesManager, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *SpacesManagerSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-spacesmanagerslice"},"type SpacesManagerSlice"),(0,o.kt)("p",null,"SpacesManagerSlice is an alias for a slice of pointers to SpacesManager","."," This should almost always be used instead of ","[","]","SpacesManager","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesManagerSlice []*SpacesManager\n")),(0,o.kt)("h2",{id:"type-spacesmanagerupdater"},"type SpacesManagerUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesManagerUpdater interface {\n    Update(o *SpacesManager, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o SpacesManagerSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-spacesmanagerupserter"},"type SpacesManagerUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type SpacesManagerUpserter interface {\n    Upsert(o *SpacesManager, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-stack"},"type Stack"),(0,o.kt)("p",null,"Stack is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type Stack struct {\n    ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID        string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`\n    Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`\n\n    R   *stackR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   stackL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findstack"},"func FindStack"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindStack(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Stack, error)\n")),(0,o.kt)("p",null,"FindStack retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-stackannotation"},"type StackAnnotation"),(0,o.kt)("p",null,"StackAnnotation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type StackAnnotation struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    Key          null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *stackAnnotationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   stackAnnotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findstackannotation"},"func FindStackAnnotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindStackAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*StackAnnotation, error)\n")),(0,o.kt)("p",null,"FindStackAnnotation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-stackannotationdeleter"},"type StackAnnotationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StackAnnotationDeleter interface {\n    Delete(o *StackAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o StackAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-stackannotationfinder"},"type StackAnnotationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StackAnnotationFinder interface {\n    FindStackAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*StackAnnotation, error)\n}\n")),(0,o.kt)("h2",{id:"type-stackannotationfinisher"},"type StackAnnotationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StackAnnotationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*StackAnnotation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (StackAnnotationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-stackannotationinserter"},"type StackAnnotationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StackAnnotationInserter interface {\n    Insert(o *StackAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-stackannotationreloader"},"type StackAnnotationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StackAnnotationReloader interface {\n    Reload(o *StackAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *StackAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-stackannotationslice"},"type StackAnnotationSlice"),(0,o.kt)("p",null,"StackAnnotationSlice is an alias for a slice of pointers to StackAnnotation","."," This should almost always be used instead of ","[","]","StackAnnotation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StackAnnotationSlice []*StackAnnotation\n")),(0,o.kt)("h2",{id:"type-stackannotationupdater"},"type StackAnnotationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StackAnnotationUpdater interface {\n    Update(o *StackAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o StackAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-stackannotationupserter"},"type StackAnnotationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StackAnnotationUpserter interface {\n    Upsert(o *StackAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-stackdeleter"},"type StackDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StackDeleter interface {\n    Delete(o *Stack, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o StackSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-stackfinder"},"type StackFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StackFinder interface {\n    FindStack(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Stack, error)\n}\n")),(0,o.kt)("h2",{id:"type-stackfinisher"},"type StackFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StackFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*Stack, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (StackSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-stackinserter"},"type StackInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StackInserter interface {\n    Insert(o *Stack, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-stacklabel"},"type StackLabel"),(0,o.kt)("p",null,"StackLabel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type StackLabel struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    KeyName      null.String `boil:"key_name" json:"key_name,omitempty" toml:"key_name" yaml:"key_name,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *stackLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   stackLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findstacklabel"},"func FindStackLabel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindStackLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*StackLabel, error)\n")),(0,o.kt)("p",null,"FindStackLabel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-stacklabeldeleter"},"type StackLabelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StackLabelDeleter interface {\n    Delete(o *StackLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o StackLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-stacklabelfinder"},"type StackLabelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StackLabelFinder interface {\n    FindStackLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*StackLabel, error)\n}\n")),(0,o.kt)("h2",{id:"type-stacklabelfinisher"},"type StackLabelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StackLabelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*StackLabel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (StackLabelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-stacklabelinserter"},"type StackLabelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StackLabelInserter interface {\n    Insert(o *StackLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-stacklabelreloader"},"type StackLabelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StackLabelReloader interface {\n    Reload(o *StackLabel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *StackLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-stacklabelslice"},"type StackLabelSlice"),(0,o.kt)("p",null,"StackLabelSlice is an alias for a slice of pointers to StackLabel","."," This should almost always be used instead of ","[","]","StackLabel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StackLabelSlice []*StackLabel\n")),(0,o.kt)("h2",{id:"type-stacklabelupdater"},"type StackLabelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StackLabelUpdater interface {\n    Update(o *StackLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o StackLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-stacklabelupserter"},"type StackLabelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StackLabelUpserter interface {\n    Upsert(o *StackLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-stackreloader"},"type StackReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StackReloader interface {\n    Reload(o *Stack, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *StackSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-stackslice"},"type StackSlice"),(0,o.kt)("p",null,"StackSlice is an alias for a slice of pointers to Stack","."," This should almost always be used instead of ","[","]","Stack","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StackSlice []*Stack\n")),(0,o.kt)("h2",{id:"type-stackupdater"},"type StackUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StackUpdater interface {\n    Update(o *Stack, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o StackSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-stackupserter"},"type StackUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StackUpserter interface {\n    Upsert(o *Stack, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-stagingsecuritygroupsspace"},"type StagingSecurityGroupsSpace"),(0,o.kt)("p",null,"StagingSecurityGroupsSpace is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type StagingSecurityGroupsSpace struct {\n    StagingSecurityGroupID        int `boil:"staging_security_group_id" json:"staging_security_group_id" toml:"staging_security_group_id" yaml:"staging_security_group_id"`\n    StagingSpaceID                int `boil:"staging_space_id" json:"staging_space_id" toml:"staging_space_id" yaml:"staging_space_id"`\n    StagingSecurityGroupsSpacesPK int `boil:"staging_security_groups_spaces_pk" json:"staging_security_groups_spaces_pk" toml:"staging_security_groups_spaces_pk" yaml:"staging_security_groups_spaces_pk"`\n\n    R   *stagingSecurityGroupsSpaceR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   stagingSecurityGroupsSpaceL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findstagingsecuritygroupsspace"},"func FindStagingSecurityGroupsSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindStagingSecurityGroupsSpace(ctx context.Context, exec boil.ContextExecutor, stagingSecurityGroupsSpacesPK int, selectCols ...string) (*StagingSecurityGroupsSpace, error)\n")),(0,o.kt)("p",null,"FindStagingSecurityGroupsSpace retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-stagingsecuritygroupsspacedeleter"},"type StagingSecurityGroupsSpaceDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StagingSecurityGroupsSpaceDeleter interface {\n    Delete(o *StagingSecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o StagingSecurityGroupsSpaceSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-stagingsecuritygroupsspacefinder"},"type StagingSecurityGroupsSpaceFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StagingSecurityGroupsSpaceFinder interface {\n    FindStagingSecurityGroupsSpace(ctx context.Context, exec boil.ContextExecutor, stagingSecurityGroupsSpacesPK int, selectCols ...string) (*StagingSecurityGroupsSpace, error)\n}\n")),(0,o.kt)("h2",{id:"type-stagingsecuritygroupsspacefinisher"},"type StagingSecurityGroupsSpaceFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StagingSecurityGroupsSpaceFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*StagingSecurityGroupsSpace, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (StagingSecurityGroupsSpaceSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-stagingsecuritygroupsspaceinserter"},"type StagingSecurityGroupsSpaceInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StagingSecurityGroupsSpaceInserter interface {\n    Insert(o *StagingSecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-stagingsecuritygroupsspacereloader"},"type StagingSecurityGroupsSpaceReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StagingSecurityGroupsSpaceReloader interface {\n    Reload(o *StagingSecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *StagingSecurityGroupsSpaceSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-stagingsecuritygroupsspaceslice"},"type StagingSecurityGroupsSpaceSlice"),(0,o.kt)("p",null,"StagingSecurityGroupsSpaceSlice is an alias for a slice of pointers to StagingSecurityGroupsSpace","."," This should almost always be used instead of ","[","]","StagingSecurityGroupsSpace","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StagingSecurityGroupsSpaceSlice []*StagingSecurityGroupsSpace\n")),(0,o.kt)("h2",{id:"type-stagingsecuritygroupsspaceupdater"},"type StagingSecurityGroupsSpaceUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StagingSecurityGroupsSpaceUpdater interface {\n    Update(o *StagingSecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o StagingSecurityGroupsSpaceSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-stagingsecuritygroupsspaceupserter"},"type StagingSecurityGroupsSpaceUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StagingSecurityGroupsSpaceUpserter interface {\n    Upsert(o *StagingSecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-subquery"},"type Subquery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type Subquery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-newsubquery"},"func NewSubquery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func NewSubquery(mods ...qm.QueryMod) *Subquery\n")),(0,o.kt)("p",null,"NewSubquery initializes a new Subquery using the passed in QueryMods to be used as part of a larger Query"),(0,o.kt)("h3",{id:"func-subquery-sql"},"func ","(","*","Subquery",")"," SQL"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (s *Subquery) SQL() (string, []interface{})\n")),(0,o.kt)("h2",{id:"type-task"},"type Task"),(0,o.kt)("p",null,"Task is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type Task struct {\n    ID                            int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID                          string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt                     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt                     null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    Name                          string      `boil:"name" json:"name" toml:"name" yaml:"name"`\n    Command                       string      `boil:"command" json:"command" toml:"command" yaml:"command"`\n    State                         string      `boil:"state" json:"state" toml:"state" yaml:"state"`\n    MemoryInMB                    null.Int    `boil:"memory_in_mb" json:"memory_in_mb,omitempty" toml:"memory_in_mb" yaml:"memory_in_mb,omitempty"`\n    EncryptedEnvironmentVariables null.String `boil:"encrypted_environment_variables" json:"encrypted_environment_variables,omitempty" toml:"encrypted_environment_variables" yaml:"encrypted_environment_variables,omitempty"`\n    Salt                          null.String `boil:"salt" json:"salt,omitempty" toml:"salt" yaml:"salt,omitempty"`\n    FailureReason                 null.String `boil:"failure_reason" json:"failure_reason,omitempty" toml:"failure_reason" yaml:"failure_reason,omitempty"`\n    AppGUID                       string      `boil:"app_guid" json:"app_guid" toml:"app_guid" yaml:"app_guid"`\n    DropletGUID                   string      `boil:"droplet_guid" json:"droplet_guid" toml:"droplet_guid" yaml:"droplet_guid"`\n    SequenceID                    null.Int    `boil:"sequence_id" json:"sequence_id,omitempty" toml:"sequence_id" yaml:"sequence_id,omitempty"`\n    DiskInMB                      null.Int    `boil:"disk_in_mb" json:"disk_in_mb,omitempty" toml:"disk_in_mb" yaml:"disk_in_mb,omitempty"`\n    EncryptionKeyLabel            null.String `boil:"encryption_key_label" json:"encryption_key_label,omitempty" toml:"encryption_key_label" yaml:"encryption_key_label,omitempty"`\n    EncryptionIterations          int         `boil:"encryption_iterations" json:"encryption_iterations" toml:"encryption_iterations" yaml:"encryption_iterations"`\n\n    R   *taskR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   taskL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findtask"},"func FindTask"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindTask(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Task, error)\n")),(0,o.kt)("p",null,"FindTask retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-taskannotation"},"type TaskAnnotation"),(0,o.kt)("p",null,"TaskAnnotation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type TaskAnnotation struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    Key          null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *taskAnnotationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   taskAnnotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findtaskannotation"},"func FindTaskAnnotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindTaskAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TaskAnnotation, error)\n")),(0,o.kt)("p",null,"FindTaskAnnotation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-taskannotationdeleter"},"type TaskAnnotationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TaskAnnotationDeleter interface {\n    Delete(o *TaskAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o TaskAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-taskannotationfinder"},"type TaskAnnotationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TaskAnnotationFinder interface {\n    FindTaskAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TaskAnnotation, error)\n}\n")),(0,o.kt)("h2",{id:"type-taskannotationfinisher"},"type TaskAnnotationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TaskAnnotationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*TaskAnnotation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (TaskAnnotationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-taskannotationinserter"},"type TaskAnnotationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TaskAnnotationInserter interface {\n    Insert(o *TaskAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-taskannotationreloader"},"type TaskAnnotationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TaskAnnotationReloader interface {\n    Reload(o *TaskAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *TaskAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-taskannotationslice"},"type TaskAnnotationSlice"),(0,o.kt)("p",null,"TaskAnnotationSlice is an alias for a slice of pointers to TaskAnnotation","."," This should almost always be used instead of ","[","]","TaskAnnotation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TaskAnnotationSlice []*TaskAnnotation\n")),(0,o.kt)("h2",{id:"type-taskannotationupdater"},"type TaskAnnotationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TaskAnnotationUpdater interface {\n    Update(o *TaskAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o TaskAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-taskannotationupserter"},"type TaskAnnotationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TaskAnnotationUpserter interface {\n    Upsert(o *TaskAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-taskdeleter"},"type TaskDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TaskDeleter interface {\n    Delete(o *Task, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o TaskSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-taskfinder"},"type TaskFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TaskFinder interface {\n    FindTask(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Task, error)\n}\n")),(0,o.kt)("h2",{id:"type-taskfinisher"},"type TaskFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TaskFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*Task, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (TaskSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-taskinserter"},"type TaskInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TaskInserter interface {\n    Insert(o *Task, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-tasklabel"},"type TaskLabel"),(0,o.kt)("p",null,"TaskLabel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type TaskLabel struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    KeyName      null.String `boil:"key_name" json:"key_name,omitempty" toml:"key_name" yaml:"key_name,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *taskLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   taskLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-findtasklabel"},"func FindTaskLabel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindTaskLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TaskLabel, error)\n")),(0,o.kt)("p",null,"FindTaskLabel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-tasklabeldeleter"},"type TaskLabelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TaskLabelDeleter interface {\n    Delete(o *TaskLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o TaskLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-tasklabelfinder"},"type TaskLabelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TaskLabelFinder interface {\n    FindTaskLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TaskLabel, error)\n}\n")),(0,o.kt)("h2",{id:"type-tasklabelfinisher"},"type TaskLabelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TaskLabelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*TaskLabel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (TaskLabelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-tasklabelinserter"},"type TaskLabelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TaskLabelInserter interface {\n    Insert(o *TaskLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-tasklabelreloader"},"type TaskLabelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TaskLabelReloader interface {\n    Reload(o *TaskLabel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *TaskLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-tasklabelslice"},"type TaskLabelSlice"),(0,o.kt)("p",null,"TaskLabelSlice is an alias for a slice of pointers to TaskLabel","."," This should almost always be used instead of ","[","]","TaskLabel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TaskLabelSlice []*TaskLabel\n")),(0,o.kt)("h2",{id:"type-tasklabelupdater"},"type TaskLabelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TaskLabelUpdater interface {\n    Update(o *TaskLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o TaskLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-tasklabelupserter"},"type TaskLabelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TaskLabelUpserter interface {\n    Upsert(o *TaskLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-taskreloader"},"type TaskReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TaskReloader interface {\n    Reload(o *Task, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *TaskSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-taskslice"},"type TaskSlice"),(0,o.kt)("p",null,"TaskSlice is an alias for a slice of pointers to Task","."," This should almost always be used instead of ","[","]","Task","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TaskSlice []*Task\n")),(0,o.kt)("h2",{id:"type-taskupdater"},"type TaskUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TaskUpdater interface {\n    Update(o *Task, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o TaskSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-taskupserter"},"type TaskUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TaskUpserter interface {\n    Upsert(o *Task, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-user"},"type User"),(0,o.kt)("p",null,"User is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type User struct {\n    ID             int       `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID           string    `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt      null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    DefaultSpaceID null.Int  `boil:"default_space_id" json:"default_space_id,omitempty" toml:"default_space_id" yaml:"default_space_id,omitempty"`\n    Admin          null.Bool `boil:"admin" json:"admin,omitempty" toml:"admin" yaml:"admin,omitempty"`\n    Active         null.Bool `boil:"active" json:"active,omitempty" toml:"active" yaml:"active,omitempty"`\n    IsOauthClient  null.Bool `boil:"is_oauth_client" json:"is_oauth_client,omitempty" toml:"is_oauth_client" yaml:"is_oauth_client,omitempty"`\n\n    R   *userR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   userL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-finduser"},"func FindUser"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindUser(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*User, error)\n")),(0,o.kt)("p",null,"FindUser retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-userannotation"},"type UserAnnotation"),(0,o.kt)("p",null,"UserAnnotation is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type UserAnnotation struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    Key          null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *userAnnotationR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   userAnnotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-finduserannotation"},"func FindUserAnnotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindUserAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UserAnnotation, error)\n")),(0,o.kt)("p",null,"FindUserAnnotation retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-userannotationdeleter"},"type UserAnnotationDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type UserAnnotationDeleter interface {\n    Delete(o *UserAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o UserAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-userannotationfinder"},"type UserAnnotationFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type UserAnnotationFinder interface {\n    FindUserAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UserAnnotation, error)\n}\n")),(0,o.kt)("h2",{id:"type-userannotationfinisher"},"type UserAnnotationFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type UserAnnotationFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*UserAnnotation, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (UserAnnotationSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-userannotationinserter"},"type UserAnnotationInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type UserAnnotationInserter interface {\n    Insert(o *UserAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-userannotationreloader"},"type UserAnnotationReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type UserAnnotationReloader interface {\n    Reload(o *UserAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *UserAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-userannotationslice"},"type UserAnnotationSlice"),(0,o.kt)("p",null,"UserAnnotationSlice is an alias for a slice of pointers to UserAnnotation","."," This should almost always be used instead of ","[","]","UserAnnotation","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type UserAnnotationSlice []*UserAnnotation\n")),(0,o.kt)("h2",{id:"type-userannotationupdater"},"type UserAnnotationUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type UserAnnotationUpdater interface {\n    Update(o *UserAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o UserAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-userannotationupserter"},"type UserAnnotationUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type UserAnnotationUpserter interface {\n    Upsert(o *UserAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-userdeleter"},"type UserDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type UserDeleter interface {\n    Delete(o *User, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o UserSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-userfinder"},"type UserFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type UserFinder interface {\n    FindUser(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*User, error)\n}\n")),(0,o.kt)("h2",{id:"type-userfinisher"},"type UserFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type UserFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*User, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (UserSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-userinserter"},"type UserInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type UserInserter interface {\n    Insert(o *User, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-userlabel"},"type UserLabel"),(0,o.kt)("p",null,"UserLabel is an object representing the database table","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type UserLabel struct {\n    ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`\n    GUID         string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`\n    CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`\n    UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`\n    ResourceGUID null.String `boil:"resource_guid" json:"resource_guid,omitempty" toml:"resource_guid" yaml:"resource_guid,omitempty"`\n    KeyPrefix    null.String `boil:"key_prefix" json:"key_prefix,omitempty" toml:"key_prefix" yaml:"key_prefix,omitempty"`\n    KeyName      null.String `boil:"key_name" json:"key_name,omitempty" toml:"key_name" yaml:"key_name,omitempty"`\n    Value        null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`\n\n    R   *userLabelR `boil:"-" json:"-" toml:"-" yaml:"-"`\n    L   userLabelL  `boil:"-" json:"-" toml:"-" yaml:"-"`\n}\n')),(0,o.kt)("h3",{id:"func-finduserlabel"},"func FindUserLabel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FindUserLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UserLabel, error)\n")),(0,o.kt)("p",null,"FindUserLabel retrieves a single record by ID with an executor","."," If selectCols is empty Find will return all columns","."),(0,o.kt)("h2",{id:"type-userlabeldeleter"},"type UserLabelDeleter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type UserLabelDeleter interface {\n    Delete(o *UserLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    DeleteAllSlice(o UserLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-userlabelfinder"},"type UserLabelFinder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type UserLabelFinder interface {\n    FindUserLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UserLabel, error)\n}\n")),(0,o.kt)("h2",{id:"type-userlabelfinisher"},"type UserLabelFinisher"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type UserLabelFinisher interface {\n    One(ctx context.Context, exec boil.ContextExecutor) (*UserLabel, error)\n    Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n    All(ctx context.Context, exec boil.ContextExecutor) (UserLabelSlice, error)\n    Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n}\n")),(0,o.kt)("h2",{id:"type-userlabelinserter"},"type UserLabelInserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type UserLabelInserter interface {\n    Insert(o *UserLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-userlabelreloader"},"type UserLabelReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type UserLabelReloader interface {\n    Reload(o *UserLabel, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *UserLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-userlabelslice"},"type UserLabelSlice"),(0,o.kt)("p",null,"UserLabelSlice is an alias for a slice of pointers to UserLabel","."," This should almost always be used instead of ","[","]","UserLabel","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type UserLabelSlice []*UserLabel\n")),(0,o.kt)("h2",{id:"type-userlabelupdater"},"type UserLabelUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type UserLabelUpdater interface {\n    Update(o *UserLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o UserLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-userlabelupserter"},"type UserLabelUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type UserLabelUpserter interface {\n    Upsert(o *UserLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-userreloader"},"type UserReloader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type UserReloader interface {\n    Reload(o *User, ctx context.Context, exec boil.ContextExecutor) error\n    ReloadAll(o *UserSlice, ctx context.Context, exec boil.ContextExecutor) error\n}\n")),(0,o.kt)("h2",{id:"type-userslice"},"type UserSlice"),(0,o.kt)("p",null,"UserSlice is an alias for a slice of pointers to User","."," This should almost always be used instead of ","[","]","User","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type UserSlice []*User\n")),(0,o.kt)("h2",{id:"type-userupdater"},"type UserUpdater"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type UserUpdater interface {\n    Update(o *User, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n    UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n    UpdateAllSlice(o UserSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n}\n")),(0,o.kt)("h2",{id:"type-userupserter"},"type UserUpserter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type UserUpserter interface {\n    Upsert(o *User, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n}\n")),(0,o.kt)("h2",{id:"type-appannotationl"},"type appAnnotationL"),(0,o.kt)("p",null,"appAnnotationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type appAnnotationL struct{}\n")),(0,o.kt)("h3",{id:"func-appannotationl-loadresource"},"func ","(","appAnnotationL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (appAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAppAnnotation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-appannotationquery"},"type appAnnotationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type appAnnotationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-appannotations"},"func AppAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func AppAnnotations(mods ...qm.QueryMod) appAnnotationQuery\n")),(0,o.kt)("p",null,"AppAnnotations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-appannotationquery-all"},"func ","(","appAnnotationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (AppAnnotationSlice, error)\n")),(0,o.kt)("p",null,"All returns all AppAnnotation records from the query","."),(0,o.kt)("h3",{id:"func-appannotationquery-count"},"func ","(","appAnnotationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all AppAnnotation records in the query","."),(0,o.kt)("h3",{id:"func-appannotationquery-delete"},"func ","(","appAnnotationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appAnnotationQuery) Delete(o *AppAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single AppAnnotation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-appannotationquery-deleteall"},"func ","(","appAnnotationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-appannotationquery-deleteallslice"},"func ","(","appAnnotationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appAnnotationQuery) DeleteAllSlice(o AppAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-appannotationquery-exists"},"func ","(","appAnnotationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-appannotationquery-insert"},"func ","(","appAnnotationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appAnnotationQuery) Insert(o *AppAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-appannotationquery-one"},"func ","(","appAnnotationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AppAnnotation, error)\n")),(0,o.kt)("p",null,"One returns a single appAnnotation record from the query","."),(0,o.kt)("h3",{id:"func-appannotationquery-reload"},"func ","(","appAnnotationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appAnnotationQuery) Reload(o *AppAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-appannotationquery-reloadall"},"func ","(","appAnnotationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appAnnotationQuery) ReloadAll(o *AppAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-appannotationquery-removeresource"},"func ","(","appAnnotationQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appAnnotationQuery) RemoveResource(o *AppAnnotation, ctx context.Context, exec boil.ContextExecutor, related *App) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-appannotationquery-resource"},"func ","(","appAnnotationQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appAnnotationQuery) Resource(o *AppAnnotation, mods ...qm.QueryMod) appQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-appannotationquery-setresource"},"func ","(","appAnnotationQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appAnnotationQuery) SetResource(o *AppAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *App) error\n")),(0,o.kt)("p",null,"SetResource of the appAnnotation to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceAppAnnotations","."),(0,o.kt)("h3",{id:"func-appannotationquery-update"},"func ","(","appAnnotationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appAnnotationQuery) Update(o *AppAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the AppAnnotation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-appannotationquery-updateall"},"func ","(","appAnnotationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-appannotationquery-updateallslice"},"func ","(","appAnnotationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appAnnotationQuery) UpdateAllSlice(o AppAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-appannotationquery-upsert"},"func ","(","appAnnotationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appAnnotationQuery) Upsert(o *AppAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-appannotationr"},"type appAnnotationR"),(0,o.kt)("p",null,"appAnnotationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type appAnnotationR struct {\n    Resource *App `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-appannotationr-newstruct"},"func ","(","*","appAnnotationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*appAnnotationR) NewStruct() *appAnnotationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-appeventl"},"type appEventL"),(0,o.kt)("p",null,"appEventL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type appEventL struct{}\n")),(0,o.kt)("h3",{id:"func-appeventl-loadapp"},"func ","(","appEventL",")"," LoadApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (appEventL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAppEvent interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadApp allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-appeventquery"},"type appEventQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type appEventQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-appevents"},"func AppEvents"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func AppEvents(mods ...qm.QueryMod) appEventQuery\n")),(0,o.kt)("p",null,"AppEvents retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-appeventquery-all"},"func ","(","appEventQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appEventQuery) All(ctx context.Context, exec boil.ContextExecutor) (AppEventSlice, error)\n")),(0,o.kt)("p",null,"All returns all AppEvent records from the query","."),(0,o.kt)("h3",{id:"func-appeventquery-app"},"func ","(","appEventQuery",")"," App"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appEventQuery) App(o *AppEvent, mods ...qm.QueryMod) processQuery\n")),(0,o.kt)("p",null,"App pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-appeventquery-count"},"func ","(","appEventQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appEventQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all AppEvent records in the query","."),(0,o.kt)("h3",{id:"func-appeventquery-delete"},"func ","(","appEventQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appEventQuery) Delete(o *AppEvent, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single AppEvent record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-appeventquery-deleteall"},"func ","(","appEventQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appEventQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-appeventquery-deleteallslice"},"func ","(","appEventQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appEventQuery) DeleteAllSlice(o AppEventSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-appeventquery-exists"},"func ","(","appEventQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appEventQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-appeventquery-insert"},"func ","(","appEventQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appEventQuery) Insert(o *AppEvent, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-appeventquery-one"},"func ","(","appEventQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appEventQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AppEvent, error)\n")),(0,o.kt)("p",null,"One returns a single appEvent record from the query","."),(0,o.kt)("h3",{id:"func-appeventquery-reload"},"func ","(","appEventQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appEventQuery) Reload(o *AppEvent, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-appeventquery-reloadall"},"func ","(","appEventQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appEventQuery) ReloadAll(o *AppEventSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-appeventquery-setapp"},"func ","(","appEventQuery",")"," SetApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appEventQuery) SetApp(o *AppEvent, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Process) error\n")),(0,o.kt)("p",null,"SetApp of the appEvent to the related item","."," Sets o",".","R",".","App to related","."," Adds o to related",".","R",".","AppAppEvents","."),(0,o.kt)("h3",{id:"func-appeventquery-update"},"func ","(","appEventQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appEventQuery) Update(o *AppEvent, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the AppEvent","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-appeventquery-updateall"},"func ","(","appEventQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appEventQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-appeventquery-updateallslice"},"func ","(","appEventQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appEventQuery) UpdateAllSlice(o AppEventSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-appeventquery-upsert"},"func ","(","appEventQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appEventQuery) Upsert(o *AppEvent, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-appeventr"},"type appEventR"),(0,o.kt)("p",null,"appEventR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type appEventR struct {\n    App *Process `boil:"App" json:"App" toml:"App" yaml:"App"`\n}\n')),(0,o.kt)("h3",{id:"func-appeventr-newstruct"},"func ","(","*","appEventR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*appEventR) NewStruct() *appEventR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-appl"},"type appL"),(0,o.kt)("p",null,"appL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type appL struct{}\n")),(0,o.kt)("h3",{id:"func-appl-loadbuilds"},"func ","(","appL",")"," LoadBuilds"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (appL) LoadBuilds(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadBuilds allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-appl-loaddeployments"},"func ","(","appL",")"," LoadDeployments"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (appL) LoadDeployments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadDeployments allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-appl-loaddroplets"},"func ","(","appL",")"," LoadDroplets"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (appL) LoadDroplets(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadDroplets allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-appl-loadkpacklifecycledata"},"func ","(","appL",")"," LoadKpackLifecycleData"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (appL) LoadKpackLifecycleData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadKpackLifecycleData allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-appl-loadpackages"},"func ","(","appL",")"," LoadPackages"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (appL) LoadPackages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadPackages allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-appl-loadprocesses"},"func ","(","appL",")"," LoadProcesses"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (appL) LoadProcesses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadProcesses allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-appl-loadresourceappannotations"},"func ","(","appL",")"," LoadResourceAppAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (appL) LoadResourceAppAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceAppAnnotations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-appl-loadresourceapplabels"},"func ","(","appL",")"," LoadResourceAppLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (appL) LoadResourceAppLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceAppLabels allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-appl-loadrevisions"},"func ","(","appL",")"," LoadRevisions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (appL) LoadRevisions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadRevisions allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-appl-loadroutemappings"},"func ","(","appL",")"," LoadRouteMappings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (appL) LoadRouteMappings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadRouteMappings allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-appl-loadservicebindings"},"func ","(","appL",")"," LoadServiceBindings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (appL) LoadServiceBindings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadServiceBindings allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-appl-loadsidecars"},"func ","(","appL",")"," LoadSidecars"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (appL) LoadSidecars(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSidecars allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-appl-loadspace"},"func ","(","appL",")"," LoadSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (appL) LoadSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSpace allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-appl-loadtasks"},"func ","(","appL",")"," LoadTasks"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (appL) LoadTasks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApp interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadTasks allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-applabell"},"type appLabelL"),(0,o.kt)("p",null,"appLabelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type appLabelL struct{}\n")),(0,o.kt)("h3",{id:"func-applabell-loadresource"},"func ","(","appLabelL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (appLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAppLabel interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-applabelquery"},"type appLabelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type appLabelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-applabels"},"func AppLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func AppLabels(mods ...qm.QueryMod) appLabelQuery\n")),(0,o.kt)("p",null,"AppLabels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-applabelquery-all"},"func ","(","appLabelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (AppLabelSlice, error)\n")),(0,o.kt)("p",null,"All returns all AppLabel records from the query","."),(0,o.kt)("h3",{id:"func-applabelquery-count"},"func ","(","appLabelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all AppLabel records in the query","."),(0,o.kt)("h3",{id:"func-applabelquery-delete"},"func ","(","appLabelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appLabelQuery) Delete(o *AppLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single AppLabel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-applabelquery-deleteall"},"func ","(","appLabelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-applabelquery-deleteallslice"},"func ","(","appLabelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appLabelQuery) DeleteAllSlice(o AppLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-applabelquery-exists"},"func ","(","appLabelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-applabelquery-insert"},"func ","(","appLabelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appLabelQuery) Insert(o *AppLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-applabelquery-one"},"func ","(","appLabelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AppLabel, error)\n")),(0,o.kt)("p",null,"One returns a single appLabel record from the query","."),(0,o.kt)("h3",{id:"func-applabelquery-reload"},"func ","(","appLabelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appLabelQuery) Reload(o *AppLabel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-applabelquery-reloadall"},"func ","(","appLabelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appLabelQuery) ReloadAll(o *AppLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-applabelquery-removeresource"},"func ","(","appLabelQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appLabelQuery) RemoveResource(o *AppLabel, ctx context.Context, exec boil.ContextExecutor, related *App) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-applabelquery-resource"},"func ","(","appLabelQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appLabelQuery) Resource(o *AppLabel, mods ...qm.QueryMod) appQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-applabelquery-setresource"},"func ","(","appLabelQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appLabelQuery) SetResource(o *AppLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related *App) error\n")),(0,o.kt)("p",null,"SetResource of the appLabel to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceAppLabels","."),(0,o.kt)("h3",{id:"func-applabelquery-update"},"func ","(","appLabelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appLabelQuery) Update(o *AppLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the AppLabel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-applabelquery-updateall"},"func ","(","appLabelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-applabelquery-updateallslice"},"func ","(","appLabelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appLabelQuery) UpdateAllSlice(o AppLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-applabelquery-upsert"},"func ","(","appLabelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appLabelQuery) Upsert(o *AppLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-applabelr"},"type appLabelR"),(0,o.kt)("p",null,"appLabelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type appLabelR struct {\n    Resource *App `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-applabelr-newstruct"},"func ","(","*","appLabelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*appLabelR) NewStruct() *appLabelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-appquery"},"type appQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type appQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-apps"},"func Apps"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func Apps(mods ...qm.QueryMod) appQuery\n")),(0,o.kt)("p",null,"Apps retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-appquery-addbuilds"},"func ","(","appQuery",")"," AddBuilds"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) AddBuilds(o *App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Build) error\n")),(0,o.kt)("p",null,"AddBuilds adds the given related objects to the existing relationships of the app\\, optionally inserting them as new records","."," Appends related to o",".","R",".","Builds","."," Sets related",".","R",".","App appropriately","."),(0,o.kt)("h3",{id:"func-appquery-adddeployments"},"func ","(","appQuery",")"," AddDeployments"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) AddDeployments(o *App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Deployment) error\n")),(0,o.kt)("p",null,"AddDeployments adds the given related objects to the existing relationships of the app\\, optionally inserting them as new records","."," Appends related to o",".","R",".","Deployments","."," Sets related",".","R",".","App appropriately","."),(0,o.kt)("h3",{id:"func-appquery-adddroplets"},"func ","(","appQuery",")"," AddDroplets"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) AddDroplets(o *App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Droplet) error\n")),(0,o.kt)("p",null,"AddDroplets adds the given related objects to the existing relationships of the app\\, optionally inserting them as new records","."," Appends related to o",".","R",".","Droplets","."," Sets related",".","R",".","App appropriately","."),(0,o.kt)("h3",{id:"func-appquery-addkpacklifecycledata"},"func ","(","appQuery",")"," AddKpackLifecycleData"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) AddKpackLifecycleData(o *App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*KpackLifecycleDatum) error\n")),(0,o.kt)("p",null,"AddKpackLifecycleData adds the given related objects to the existing relationships of the app\\, optionally inserting them as new records","."," Appends related to o",".","R",".","KpackLifecycleData","."," Sets related",".","R",".","App appropriately","."),(0,o.kt)("h3",{id:"func-appquery-addpackages"},"func ","(","appQuery",")"," AddPackages"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) AddPackages(o *App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Package) error\n")),(0,o.kt)("p",null,"AddPackages adds the given related objects to the existing relationships of the app\\, optionally inserting them as new records","."," Appends related to o",".","R",".","Packages","."," Sets related",".","R",".","App appropriately","."),(0,o.kt)("h3",{id:"func-appquery-addprocesses"},"func ","(","appQuery",")"," AddProcesses"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) AddProcesses(o *App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Process) error\n")),(0,o.kt)("p",null,"AddProcesses adds the given related objects to the existing relationships of the app\\, optionally inserting them as new records","."," Appends related to o",".","R",".","Processes","."," Sets related",".","R",".","App appropriately","."),(0,o.kt)("h3",{id:"func-appquery-addresourceappannotations"},"func ","(","appQuery",")"," AddResourceAppAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) AddResourceAppAnnotations(o *App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AppAnnotation) error\n")),(0,o.kt)("p",null,"AddResourceAppAnnotations adds the given related objects to the existing relationships of the app\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceAppAnnotations","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-appquery-addresourceapplabels"},"func ","(","appQuery",")"," AddResourceAppLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) AddResourceAppLabels(o *App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AppLabel) error\n")),(0,o.kt)("p",null,"AddResourceAppLabels adds the given related objects to the existing relationships of the app\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceAppLabels","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-appquery-addrevisions"},"func ","(","appQuery",")"," AddRevisions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) AddRevisions(o *App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Revision) error\n")),(0,o.kt)("p",null,"AddRevisions adds the given related objects to the existing relationships of the app\\, optionally inserting them as new records","."," Appends related to o",".","R",".","Revisions","."," Sets related",".","R",".","App appropriately","."),(0,o.kt)("h3",{id:"func-appquery-addroutemappings"},"func ","(","appQuery",")"," AddRouteMappings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) AddRouteMappings(o *App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteMapping) error\n")),(0,o.kt)("p",null,"AddRouteMappings adds the given related objects to the existing relationships of the app\\, optionally inserting them as new records","."," Appends related to o",".","R",".","RouteMappings","."," Sets related",".","R",".","App appropriately","."),(0,o.kt)("h3",{id:"func-appquery-addservicebindings"},"func ","(","appQuery",")"," AddServiceBindings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) AddServiceBindings(o *App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBinding) error\n")),(0,o.kt)("p",null,"AddServiceBindings adds the given related objects to the existing relationships of the app\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ServiceBindings","."," Sets related",".","R",".","App appropriately","."),(0,o.kt)("h3",{id:"func-appquery-addsidecars"},"func ","(","appQuery",")"," AddSidecars"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) AddSidecars(o *App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Sidecar) error\n")),(0,o.kt)("p",null,"AddSidecars adds the given related objects to the existing relationships of the app\\, optionally inserting them as new records","."," Appends related to o",".","R",".","Sidecars","."," Sets related",".","R",".","App appropriately","."),(0,o.kt)("h3",{id:"func-appquery-addtasks"},"func ","(","appQuery",")"," AddTasks"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) AddTasks(o *App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Task) error\n")),(0,o.kt)("p",null,"AddTasks adds the given related objects to the existing relationships of the app\\, optionally inserting them as new records","."," Appends related to o",".","R",".","Tasks","."," Sets related",".","R",".","App appropriately","."),(0,o.kt)("h3",{id:"func-appquery-all"},"func ","(","appQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) All(ctx context.Context, exec boil.ContextExecutor) (AppSlice, error)\n")),(0,o.kt)("p",null,"All returns all App records from the query","."),(0,o.kt)("h3",{id:"func-appquery-builds"},"func ","(","appQuery",")"," Builds"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) Builds(o *App, mods ...qm.QueryMod) buildQuery\n")),(0,o.kt)("p",null,"Builds retrieves all the build's Builds with an executor","."),(0,o.kt)("h3",{id:"func-appquery-count"},"func ","(","appQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all App records in the query","."),(0,o.kt)("h3",{id:"func-appquery-delete"},"func ","(","appQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) Delete(o *App, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single App record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-appquery-deleteall"},"func ","(","appQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-appquery-deleteallslice"},"func ","(","appQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) DeleteAllSlice(o AppSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-appquery-deployments"},"func ","(","appQuery",")"," Deployments"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) Deployments(o *App, mods ...qm.QueryMod) deploymentQuery\n")),(0,o.kt)("p",null,"Deployments retrieves all the deployment's Deployments with an executor","."),(0,o.kt)("h3",{id:"func-appquery-droplets"},"func ","(","appQuery",")"," Droplets"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) Droplets(o *App, mods ...qm.QueryMod) dropletQuery\n")),(0,o.kt)("p",null,"Droplets retrieves all the droplet's Droplets with an executor","."),(0,o.kt)("h3",{id:"func-appquery-exists"},"func ","(","appQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-appquery-insert"},"func ","(","appQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) Insert(o *App, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-appquery-kpacklifecycledata"},"func ","(","appQuery",")"," KpackLifecycleData"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) KpackLifecycleData(o *App, mods ...qm.QueryMod) kpackLifecycleDatumQuery\n")),(0,o.kt)("p",null,"KpackLifecycleData retrieves all the kpack","_","lifecycle","_","datum's KpackLifecycleData with an executor","."),(0,o.kt)("h3",{id:"func-appquery-one"},"func ","(","appQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) One(ctx context.Context, exec boil.ContextExecutor) (*App, error)\n")),(0,o.kt)("p",null,"One returns a single app record from the query","."),(0,o.kt)("h3",{id:"func-appquery-packages"},"func ","(","appQuery",")"," Packages"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) Packages(o *App, mods ...qm.QueryMod) packageQuery\n")),(0,o.kt)("p",null,"Packages retrieves all the package's Packages with an executor","."),(0,o.kt)("h3",{id:"func-appquery-processes"},"func ","(","appQuery",")"," Processes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) Processes(o *App, mods ...qm.QueryMod) processQuery\n")),(0,o.kt)("p",null,"Processes retrieves all the process's Processes with an executor","."),(0,o.kt)("h3",{id:"func-appquery-reload"},"func ","(","appQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) Reload(o *App, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-appquery-reloadall"},"func ","(","appQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) ReloadAll(o *AppSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-appquery-removebuilds"},"func ","(","appQuery",")"," RemoveBuilds"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) RemoveBuilds(o *App, ctx context.Context, exec boil.ContextExecutor, related ...*Build) error\n")),(0,o.kt)("p",null,"RemoveBuilds relationships from objects passed in","."," Removes related items from R",".","Builds ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","App","."),(0,o.kt)("h3",{id:"func-appquery-removedeployments"},"func ","(","appQuery",")"," RemoveDeployments"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) RemoveDeployments(o *App, ctx context.Context, exec boil.ContextExecutor, related ...*Deployment) error\n")),(0,o.kt)("p",null,"RemoveDeployments relationships from objects passed in","."," Removes related items from R",".","Deployments ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","App","."),(0,o.kt)("h3",{id:"func-appquery-removedroplets"},"func ","(","appQuery",")"," RemoveDroplets"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) RemoveDroplets(o *App, ctx context.Context, exec boil.ContextExecutor, related ...*Droplet) error\n")),(0,o.kt)("p",null,"RemoveDroplets relationships from objects passed in","."," Removes related items from R",".","Droplets ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","App","."),(0,o.kt)("h3",{id:"func-appquery-removekpacklifecycledata"},"func ","(","appQuery",")"," RemoveKpackLifecycleData"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) RemoveKpackLifecycleData(o *App, ctx context.Context, exec boil.ContextExecutor, related ...*KpackLifecycleDatum) error\n")),(0,o.kt)("p",null,"RemoveKpackLifecycleData relationships from objects passed in","."," Removes related items from R",".","KpackLifecycleData ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","App","."),(0,o.kt)("h3",{id:"func-appquery-removepackages"},"func ","(","appQuery",")"," RemovePackages"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) RemovePackages(o *App, ctx context.Context, exec boil.ContextExecutor, related ...*Package) error\n")),(0,o.kt)("p",null,"RemovePackages relationships from objects passed in","."," Removes related items from R",".","Packages ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","App","."),(0,o.kt)("h3",{id:"func-appquery-removeprocesses"},"func ","(","appQuery",")"," RemoveProcesses"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) RemoveProcesses(o *App, ctx context.Context, exec boil.ContextExecutor, related ...*Process) error\n")),(0,o.kt)("p",null,"RemoveProcesses relationships from objects passed in","."," Removes related items from R",".","Processes ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","App","."),(0,o.kt)("h3",{id:"func-appquery-removeresourceappannotations"},"func ","(","appQuery",")"," RemoveResourceAppAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) RemoveResourceAppAnnotations(o *App, ctx context.Context, exec boil.ContextExecutor, related ...*AppAnnotation) error\n")),(0,o.kt)("p",null,"RemoveResourceAppAnnotations relationships from objects passed in","."," Removes related items from R",".","ResourceAppAnnotations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-appquery-removeresourceapplabels"},"func ","(","appQuery",")"," RemoveResourceAppLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) RemoveResourceAppLabels(o *App, ctx context.Context, exec boil.ContextExecutor, related ...*AppLabel) error\n")),(0,o.kt)("p",null,"RemoveResourceAppLabels relationships from objects passed in","."," Removes related items from R",".","ResourceAppLabels ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-appquery-removerevisions"},"func ","(","appQuery",")"," RemoveRevisions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) RemoveRevisions(o *App, ctx context.Context, exec boil.ContextExecutor, related ...*Revision) error\n")),(0,o.kt)("p",null,"RemoveRevisions relationships from objects passed in","."," Removes related items from R",".","Revisions ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","App","."),(0,o.kt)("h3",{id:"func-appquery-removespace"},"func ","(","appQuery",")"," RemoveSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) RemoveSpace(o *App, ctx context.Context, exec boil.ContextExecutor, related *Space) error\n")),(0,o.kt)("p",null,"RemoveSpace relationship","."," Sets o",".","R",".","Space to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-appquery-resourceappannotations"},"func ","(","appQuery",")"," ResourceAppAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) ResourceAppAnnotations(o *App, mods ...qm.QueryMod) appAnnotationQuery\n")),(0,o.kt)("p",null,"ResourceAppAnnotations retrieves all the app","_","annotation's AppAnnotations with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-appquery-resourceapplabels"},"func ","(","appQuery",")"," ResourceAppLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) ResourceAppLabels(o *App, mods ...qm.QueryMod) appLabelQuery\n")),(0,o.kt)("p",null,"ResourceAppLabels retrieves all the app","_","label's AppLabels with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-appquery-revisions"},"func ","(","appQuery",")"," Revisions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) Revisions(o *App, mods ...qm.QueryMod) revisionQuery\n")),(0,o.kt)("p",null,"Revisions retrieves all the revision's Revisions with an executor","."),(0,o.kt)("h3",{id:"func-appquery-routemappings"},"func ","(","appQuery",")"," RouteMappings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) RouteMappings(o *App, mods ...qm.QueryMod) routeMappingQuery\n")),(0,o.kt)("p",null,"RouteMappings retrieves all the route","_","mapping's RouteMappings with an executor","."),(0,o.kt)("h3",{id:"func-appquery-servicebindings"},"func ","(","appQuery",")"," ServiceBindings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) ServiceBindings(o *App, mods ...qm.QueryMod) serviceBindingQuery\n")),(0,o.kt)("p",null,"ServiceBindings retrieves all the service","_","binding's ServiceBindings with an executor","."),(0,o.kt)("h3",{id:"func-appquery-setbuilds"},"func ","(","appQuery",")"," SetBuilds"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) SetBuilds(o *App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Build) error\n")),(0,o.kt)("p",null,"SetBuilds removes all previously related items of the app replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","App's Builds accordingly","."," Replaces o",".","R",".","Builds with related","."," Sets related",".","R",".","App's Builds accordingly","."),(0,o.kt)("h3",{id:"func-appquery-setdeployments"},"func ","(","appQuery",")"," SetDeployments"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) SetDeployments(o *App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Deployment) error\n")),(0,o.kt)("p",null,"SetDeployments removes all previously related items of the app replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","App's Deployments accordingly","."," Replaces o",".","R",".","Deployments with related","."," Sets related",".","R",".","App's Deployments accordingly","."),(0,o.kt)("h3",{id:"func-appquery-setdroplets"},"func ","(","appQuery",")"," SetDroplets"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) SetDroplets(o *App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Droplet) error\n")),(0,o.kt)("p",null,"SetDroplets removes all previously related items of the app replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","App's Droplets accordingly","."," Replaces o",".","R",".","Droplets with related","."," Sets related",".","R",".","App's Droplets accordingly","."),(0,o.kt)("h3",{id:"func-appquery-setkpacklifecycledata"},"func ","(","appQuery",")"," SetKpackLifecycleData"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) SetKpackLifecycleData(o *App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*KpackLifecycleDatum) error\n")),(0,o.kt)("p",null,"SetKpackLifecycleData removes all previously related items of the app replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","App's KpackLifecycleData accordingly","."," Replaces o",".","R",".","KpackLifecycleData with related","."," Sets related",".","R",".","App's KpackLifecycleData accordingly","."),(0,o.kt)("h3",{id:"func-appquery-setpackages"},"func ","(","appQuery",")"," SetPackages"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) SetPackages(o *App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Package) error\n")),(0,o.kt)("p",null,"SetPackages removes all previously related items of the app replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","App's Packages accordingly","."," Replaces o",".","R",".","Packages with related","."," Sets related",".","R",".","App's Packages accordingly","."),(0,o.kt)("h3",{id:"func-appquery-setprocesses"},"func ","(","appQuery",")"," SetProcesses"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) SetProcesses(o *App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Process) error\n")),(0,o.kt)("p",null,"SetProcesses removes all previously related items of the app replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","App's Processes accordingly","."," Replaces o",".","R",".","Processes with related","."," Sets related",".","R",".","App's Processes accordingly","."),(0,o.kt)("h3",{id:"func-appquery-setresourceappannotations"},"func ","(","appQuery",")"," SetResourceAppAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) SetResourceAppAnnotations(o *App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AppAnnotation) error\n")),(0,o.kt)("p",null,"SetResourceAppAnnotations removes all previously related items of the app replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceAppAnnotations accordingly","."," Replaces o",".","R",".","ResourceAppAnnotations with related","."," Sets related",".","R",".","Resource's ResourceAppAnnotations accordingly","."),(0,o.kt)("h3",{id:"func-appquery-setresourceapplabels"},"func ","(","appQuery",")"," SetResourceAppLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) SetResourceAppLabels(o *App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AppLabel) error\n")),(0,o.kt)("p",null,"SetResourceAppLabels removes all previously related items of the app replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceAppLabels accordingly","."," Replaces o",".","R",".","ResourceAppLabels with related","."," Sets related",".","R",".","Resource's ResourceAppLabels accordingly","."),(0,o.kt)("h3",{id:"func-appquery-setrevisions"},"func ","(","appQuery",")"," SetRevisions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) SetRevisions(o *App, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Revision) error\n")),(0,o.kt)("p",null,"SetRevisions removes all previously related items of the app replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","App's Revisions accordingly","."," Replaces o",".","R",".","Revisions with related","."," Sets related",".","R",".","App's Revisions accordingly","."),(0,o.kt)("h3",{id:"func-appquery-setspace"},"func ","(","appQuery",")"," SetSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) SetSpace(o *App, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Space) error\n")),(0,o.kt)("p",null,"SetSpace of the app to the related item","."," Sets o",".","R",".","Space to related","."," Adds o to related",".","R",".","Apps","."),(0,o.kt)("h3",{id:"func-appquery-sidecars"},"func ","(","appQuery",")"," Sidecars"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) Sidecars(o *App, mods ...qm.QueryMod) sidecarQuery\n")),(0,o.kt)("p",null,"Sidecars retrieves all the sidecar's Sidecars with an executor","."),(0,o.kt)("h3",{id:"func-appquery-space"},"func ","(","appQuery",")"," Space"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) Space(o *App, mods ...qm.QueryMod) spaceQuery\n")),(0,o.kt)("p",null,"Space pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-appquery-tasks"},"func ","(","appQuery",")"," Tasks"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) Tasks(o *App, mods ...qm.QueryMod) taskQuery\n")),(0,o.kt)("p",null,"Tasks retrieves all the task's Tasks with an executor","."),(0,o.kt)("h3",{id:"func-appquery-update"},"func ","(","appQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) Update(o *App, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the App","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-appquery-updateall"},"func ","(","appQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-appquery-updateallslice"},"func ","(","appQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) UpdateAllSlice(o AppSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-appquery-upsert"},"func ","(","appQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appQuery) Upsert(o *App, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-appr"},"type appR"),(0,o.kt)("p",null,"appR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type appR struct {\n    Space                  *Space                   `boil:"Space" json:"Space" toml:"Space" yaml:"Space"`\n    ResourceAppAnnotations AppAnnotationSlice       `boil:"ResourceAppAnnotations" json:"ResourceAppAnnotations" toml:"ResourceAppAnnotations" yaml:"ResourceAppAnnotations"`\n    ResourceAppLabels      AppLabelSlice            `boil:"ResourceAppLabels" json:"ResourceAppLabels" toml:"ResourceAppLabels" yaml:"ResourceAppLabels"`\n    Builds                 BuildSlice               `boil:"Builds" json:"Builds" toml:"Builds" yaml:"Builds"`\n    Deployments            DeploymentSlice          `boil:"Deployments" json:"Deployments" toml:"Deployments" yaml:"Deployments"`\n    Droplets               DropletSlice             `boil:"Droplets" json:"Droplets" toml:"Droplets" yaml:"Droplets"`\n    KpackLifecycleData     KpackLifecycleDatumSlice `boil:"KpackLifecycleData" json:"KpackLifecycleData" toml:"KpackLifecycleData" yaml:"KpackLifecycleData"`\n    Packages               PackageSlice             `boil:"Packages" json:"Packages" toml:"Packages" yaml:"Packages"`\n    Processes              ProcessSlice             `boil:"Processes" json:"Processes" toml:"Processes" yaml:"Processes"`\n    Revisions              RevisionSlice            `boil:"Revisions" json:"Revisions" toml:"Revisions" yaml:"Revisions"`\n    RouteMappings          RouteMappingSlice        `boil:"RouteMappings" json:"RouteMappings" toml:"RouteMappings" yaml:"RouteMappings"`\n    ServiceBindings        ServiceBindingSlice      `boil:"ServiceBindings" json:"ServiceBindings" toml:"ServiceBindings" yaml:"ServiceBindings"`\n    Sidecars               SidecarSlice             `boil:"Sidecars" json:"Sidecars" toml:"Sidecars" yaml:"Sidecars"`\n    Tasks                  TaskSlice                `boil:"Tasks" json:"Tasks" toml:"Tasks" yaml:"Tasks"`\n}\n')),(0,o.kt)("h3",{id:"func-appr-newstruct"},"func ","(","*","appR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*appR) NewStruct() *appR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-appusageeventl"},"type appUsageEventL"),(0,o.kt)("p",null,"appUsageEventL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type appUsageEventL struct{}\n")),(0,o.kt)("h2",{id:"type-appusageeventquery"},"type appUsageEventQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type appUsageEventQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-appusageevents"},"func AppUsageEvents"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func AppUsageEvents(mods ...qm.QueryMod) appUsageEventQuery\n")),(0,o.kt)("p",null,"AppUsageEvents retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-appusageeventquery-all"},"func ","(","appUsageEventQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appUsageEventQuery) All(ctx context.Context, exec boil.ContextExecutor) (AppUsageEventSlice, error)\n")),(0,o.kt)("p",null,"All returns all AppUsageEvent records from the query","."),(0,o.kt)("h3",{id:"func-appusageeventquery-count"},"func ","(","appUsageEventQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appUsageEventQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all AppUsageEvent records in the query","."),(0,o.kt)("h3",{id:"func-appusageeventquery-delete"},"func ","(","appUsageEventQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appUsageEventQuery) Delete(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single AppUsageEvent record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-appusageeventquery-deleteall"},"func ","(","appUsageEventQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appUsageEventQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-appusageeventquery-deleteallslice"},"func ","(","appUsageEventQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appUsageEventQuery) DeleteAllSlice(o AppUsageEventSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-appusageeventquery-exists"},"func ","(","appUsageEventQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appUsageEventQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-appusageeventquery-insert"},"func ","(","appUsageEventQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appUsageEventQuery) Insert(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-appusageeventquery-one"},"func ","(","appUsageEventQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appUsageEventQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AppUsageEvent, error)\n")),(0,o.kt)("p",null,"One returns a single appUsageEvent record from the query","."),(0,o.kt)("h3",{id:"func-appusageeventquery-reload"},"func ","(","appUsageEventQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appUsageEventQuery) Reload(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-appusageeventquery-reloadall"},"func ","(","appUsageEventQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appUsageEventQuery) ReloadAll(o *AppUsageEventSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-appusageeventquery-update"},"func ","(","appUsageEventQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appUsageEventQuery) Update(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the AppUsageEvent","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-appusageeventquery-updateall"},"func ","(","appUsageEventQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appUsageEventQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-appusageeventquery-updateallslice"},"func ","(","appUsageEventQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appUsageEventQuery) UpdateAllSlice(o AppUsageEventSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-appusageeventquery-upsert"},"func ","(","appUsageEventQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q appUsageEventQuery) Upsert(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-appusageeventr"},"type appUsageEventR"),(0,o.kt)("p",null,"appUsageEventR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type appUsageEventR struct {\n}\n")),(0,o.kt)("h3",{id:"func-appusageeventr-newstruct"},"func ","(","*","appUsageEventR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*appUsageEventR) NewStruct() *appUsageEventR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-buildannotationl"},"type buildAnnotationL"),(0,o.kt)("p",null,"buildAnnotationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type buildAnnotationL struct{}\n")),(0,o.kt)("h3",{id:"func-buildannotationl-loadresource"},"func ","(","buildAnnotationL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (buildAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuildAnnotation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-buildannotationquery"},"type buildAnnotationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type buildAnnotationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-buildannotations"},"func BuildAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func BuildAnnotations(mods ...qm.QueryMod) buildAnnotationQuery\n")),(0,o.kt)("p",null,"BuildAnnotations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-buildannotationquery-all"},"func ","(","buildAnnotationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (BuildAnnotationSlice, error)\n")),(0,o.kt)("p",null,"All returns all BuildAnnotation records from the query","."),(0,o.kt)("h3",{id:"func-buildannotationquery-count"},"func ","(","buildAnnotationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all BuildAnnotation records in the query","."),(0,o.kt)("h3",{id:"func-buildannotationquery-delete"},"func ","(","buildAnnotationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildAnnotationQuery) Delete(o *BuildAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single BuildAnnotation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-buildannotationquery-deleteall"},"func ","(","buildAnnotationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-buildannotationquery-deleteallslice"},"func ","(","buildAnnotationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildAnnotationQuery) DeleteAllSlice(o BuildAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-buildannotationquery-exists"},"func ","(","buildAnnotationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-buildannotationquery-insert"},"func ","(","buildAnnotationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildAnnotationQuery) Insert(o *BuildAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-buildannotationquery-one"},"func ","(","buildAnnotationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BuildAnnotation, error)\n")),(0,o.kt)("p",null,"One returns a single buildAnnotation record from the query","."),(0,o.kt)("h3",{id:"func-buildannotationquery-reload"},"func ","(","buildAnnotationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildAnnotationQuery) Reload(o *BuildAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-buildannotationquery-reloadall"},"func ","(","buildAnnotationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildAnnotationQuery) ReloadAll(o *BuildAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-buildannotationquery-removeresource"},"func ","(","buildAnnotationQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildAnnotationQuery) RemoveResource(o *BuildAnnotation, ctx context.Context, exec boil.ContextExecutor, related *Build) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-buildannotationquery-resource"},"func ","(","buildAnnotationQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildAnnotationQuery) Resource(o *BuildAnnotation, mods ...qm.QueryMod) buildQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-buildannotationquery-setresource"},"func ","(","buildAnnotationQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildAnnotationQuery) SetResource(o *BuildAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Build) error\n")),(0,o.kt)("p",null,"SetResource of the buildAnnotation to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceBuildAnnotations","."),(0,o.kt)("h3",{id:"func-buildannotationquery-update"},"func ","(","buildAnnotationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildAnnotationQuery) Update(o *BuildAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the BuildAnnotation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-buildannotationquery-updateall"},"func ","(","buildAnnotationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-buildannotationquery-updateallslice"},"func ","(","buildAnnotationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildAnnotationQuery) UpdateAllSlice(o BuildAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-buildannotationquery-upsert"},"func ","(","buildAnnotationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildAnnotationQuery) Upsert(o *BuildAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-buildannotationr"},"type buildAnnotationR"),(0,o.kt)("p",null,"buildAnnotationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type buildAnnotationR struct {\n    Resource *Build `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-buildannotationr-newstruct"},"func ","(","*","buildAnnotationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*buildAnnotationR) NewStruct() *buildAnnotationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-buildl"},"type buildL"),(0,o.kt)("p",null,"buildL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type buildL struct{}\n")),(0,o.kt)("h3",{id:"func-buildl-loadapp"},"func ","(","buildL",")"," LoadApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (buildL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuild interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadApp allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-buildl-loadkpacklifecycledata"},"func ","(","buildL",")"," LoadKpackLifecycleData"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (buildL) LoadKpackLifecycleData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuild interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadKpackLifecycleData allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-buildl-loadresourcebuildannotations"},"func ","(","buildL",")"," LoadResourceBuildAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (buildL) LoadResourceBuildAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuild interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceBuildAnnotations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-buildl-loadresourcebuildlabels"},"func ","(","buildL",")"," LoadResourceBuildLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (buildL) LoadResourceBuildLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuild interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceBuildLabels allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-buildlabell"},"type buildLabelL"),(0,o.kt)("p",null,"buildLabelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type buildLabelL struct{}\n")),(0,o.kt)("h3",{id:"func-buildlabell-loadresource"},"func ","(","buildLabelL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (buildLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuildLabel interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-buildlabelquery"},"type buildLabelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type buildLabelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-buildlabels"},"func BuildLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func BuildLabels(mods ...qm.QueryMod) buildLabelQuery\n")),(0,o.kt)("p",null,"BuildLabels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-buildlabelquery-all"},"func ","(","buildLabelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (BuildLabelSlice, error)\n")),(0,o.kt)("p",null,"All returns all BuildLabel records from the query","."),(0,o.kt)("h3",{id:"func-buildlabelquery-count"},"func ","(","buildLabelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all BuildLabel records in the query","."),(0,o.kt)("h3",{id:"func-buildlabelquery-delete"},"func ","(","buildLabelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildLabelQuery) Delete(o *BuildLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single BuildLabel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-buildlabelquery-deleteall"},"func ","(","buildLabelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-buildlabelquery-deleteallslice"},"func ","(","buildLabelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildLabelQuery) DeleteAllSlice(o BuildLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-buildlabelquery-exists"},"func ","(","buildLabelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-buildlabelquery-insert"},"func ","(","buildLabelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildLabelQuery) Insert(o *BuildLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-buildlabelquery-one"},"func ","(","buildLabelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BuildLabel, error)\n")),(0,o.kt)("p",null,"One returns a single buildLabel record from the query","."),(0,o.kt)("h3",{id:"func-buildlabelquery-reload"},"func ","(","buildLabelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildLabelQuery) Reload(o *BuildLabel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-buildlabelquery-reloadall"},"func ","(","buildLabelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildLabelQuery) ReloadAll(o *BuildLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-buildlabelquery-removeresource"},"func ","(","buildLabelQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildLabelQuery) RemoveResource(o *BuildLabel, ctx context.Context, exec boil.ContextExecutor, related *Build) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-buildlabelquery-resource"},"func ","(","buildLabelQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildLabelQuery) Resource(o *BuildLabel, mods ...qm.QueryMod) buildQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-buildlabelquery-setresource"},"func ","(","buildLabelQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildLabelQuery) SetResource(o *BuildLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Build) error\n")),(0,o.kt)("p",null,"SetResource of the buildLabel to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceBuildLabels","."),(0,o.kt)("h3",{id:"func-buildlabelquery-update"},"func ","(","buildLabelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildLabelQuery) Update(o *BuildLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the BuildLabel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-buildlabelquery-updateall"},"func ","(","buildLabelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-buildlabelquery-updateallslice"},"func ","(","buildLabelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildLabelQuery) UpdateAllSlice(o BuildLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-buildlabelquery-upsert"},"func ","(","buildLabelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildLabelQuery) Upsert(o *BuildLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-buildlabelr"},"type buildLabelR"),(0,o.kt)("p",null,"buildLabelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type buildLabelR struct {\n    Resource *Build `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-buildlabelr-newstruct"},"func ","(","*","buildLabelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*buildLabelR) NewStruct() *buildLabelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-buildquery"},"type buildQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type buildQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-builds"},"func Builds"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func Builds(mods ...qm.QueryMod) buildQuery\n")),(0,o.kt)("p",null,"Builds retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-buildquery-addkpacklifecycledata"},"func ","(","buildQuery",")"," AddKpackLifecycleData"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) AddKpackLifecycleData(o *Build, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*KpackLifecycleDatum) error\n")),(0,o.kt)("p",null,"AddKpackLifecycleData adds the given related objects to the existing relationships of the build\\, optionally inserting them as new records","."," Appends related to o",".","R",".","KpackLifecycleData","."," Sets related",".","R",".","Build appropriately","."),(0,o.kt)("h3",{id:"func-buildquery-addresourcebuildannotations"},"func ","(","buildQuery",")"," AddResourceBuildAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) AddResourceBuildAnnotations(o *Build, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BuildAnnotation) error\n")),(0,o.kt)("p",null,"AddResourceBuildAnnotations adds the given related objects to the existing relationships of the build\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceBuildAnnotations","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-buildquery-addresourcebuildlabels"},"func ","(","buildQuery",")"," AddResourceBuildLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) AddResourceBuildLabels(o *Build, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BuildLabel) error\n")),(0,o.kt)("p",null,"AddResourceBuildLabels adds the given related objects to the existing relationships of the build\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceBuildLabels","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-buildquery-all"},"func ","(","buildQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) All(ctx context.Context, exec boil.ContextExecutor) (BuildSlice, error)\n")),(0,o.kt)("p",null,"All returns all Build records from the query","."),(0,o.kt)("h3",{id:"func-buildquery-app"},"func ","(","buildQuery",")"," App"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) App(o *Build, mods ...qm.QueryMod) appQuery\n")),(0,o.kt)("p",null,"App pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-buildquery-count"},"func ","(","buildQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all Build records in the query","."),(0,o.kt)("h3",{id:"func-buildquery-delete"},"func ","(","buildQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) Delete(o *Build, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single Build record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-buildquery-deleteall"},"func ","(","buildQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-buildquery-deleteallslice"},"func ","(","buildQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) DeleteAllSlice(o BuildSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-buildquery-exists"},"func ","(","buildQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-buildquery-insert"},"func ","(","buildQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) Insert(o *Build, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-buildquery-kpacklifecycledata"},"func ","(","buildQuery",")"," KpackLifecycleData"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) KpackLifecycleData(o *Build, mods ...qm.QueryMod) kpackLifecycleDatumQuery\n")),(0,o.kt)("p",null,"KpackLifecycleData retrieves all the kpack","_","lifecycle","_","datum's KpackLifecycleData with an executor","."),(0,o.kt)("h3",{id:"func-buildquery-one"},"func ","(","buildQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Build, error)\n")),(0,o.kt)("p",null,"One returns a single build record from the query","."),(0,o.kt)("h3",{id:"func-buildquery-reload"},"func ","(","buildQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) Reload(o *Build, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-buildquery-reloadall"},"func ","(","buildQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) ReloadAll(o *BuildSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-buildquery-removeapp"},"func ","(","buildQuery",")"," RemoveApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) RemoveApp(o *Build, ctx context.Context, exec boil.ContextExecutor, related *App) error\n")),(0,o.kt)("p",null,"RemoveApp relationship","."," Sets o",".","R",".","App to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-buildquery-removekpacklifecycledata"},"func ","(","buildQuery",")"," RemoveKpackLifecycleData"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) RemoveKpackLifecycleData(o *Build, ctx context.Context, exec boil.ContextExecutor, related ...*KpackLifecycleDatum) error\n")),(0,o.kt)("p",null,"RemoveKpackLifecycleData relationships from objects passed in","."," Removes related items from R",".","KpackLifecycleData ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Build","."),(0,o.kt)("h3",{id:"func-buildquery-removeresourcebuildannotations"},"func ","(","buildQuery",")"," RemoveResourceBuildAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) RemoveResourceBuildAnnotations(o *Build, ctx context.Context, exec boil.ContextExecutor, related ...*BuildAnnotation) error\n")),(0,o.kt)("p",null,"RemoveResourceBuildAnnotations relationships from objects passed in","."," Removes related items from R",".","ResourceBuildAnnotations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-buildquery-removeresourcebuildlabels"},"func ","(","buildQuery",")"," RemoveResourceBuildLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) RemoveResourceBuildLabels(o *Build, ctx context.Context, exec boil.ContextExecutor, related ...*BuildLabel) error\n")),(0,o.kt)("p",null,"RemoveResourceBuildLabels relationships from objects passed in","."," Removes related items from R",".","ResourceBuildLabels ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-buildquery-resourcebuildannotations"},"func ","(","buildQuery",")"," ResourceBuildAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) ResourceBuildAnnotations(o *Build, mods ...qm.QueryMod) buildAnnotationQuery\n")),(0,o.kt)("p",null,"ResourceBuildAnnotations retrieves all the build","_","annotation's BuildAnnotations with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-buildquery-resourcebuildlabels"},"func ","(","buildQuery",")"," ResourceBuildLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) ResourceBuildLabels(o *Build, mods ...qm.QueryMod) buildLabelQuery\n")),(0,o.kt)("p",null,"ResourceBuildLabels retrieves all the build","_","label's BuildLabels with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-buildquery-setapp"},"func ","(","buildQuery",")"," SetApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) SetApp(o *Build, ctx context.Context, exec boil.ContextExecutor, insert bool, related *App) error\n")),(0,o.kt)("p",null,"SetApp of the build to the related item","."," Sets o",".","R",".","App to related","."," Adds o to related",".","R",".","Builds","."),(0,o.kt)("h3",{id:"func-buildquery-setkpacklifecycledata"},"func ","(","buildQuery",")"," SetKpackLifecycleData"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) SetKpackLifecycleData(o *Build, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*KpackLifecycleDatum) error\n")),(0,o.kt)("p",null,"SetKpackLifecycleData removes all previously related items of the build replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Build's KpackLifecycleData accordingly","."," Replaces o",".","R",".","KpackLifecycleData with related","."," Sets related",".","R",".","Build's KpackLifecycleData accordingly","."),(0,o.kt)("h3",{id:"func-buildquery-setresourcebuildannotations"},"func ","(","buildQuery",")"," SetResourceBuildAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) SetResourceBuildAnnotations(o *Build, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BuildAnnotation) error\n")),(0,o.kt)("p",null,"SetResourceBuildAnnotations removes all previously related items of the build replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceBuildAnnotations accordingly","."," Replaces o",".","R",".","ResourceBuildAnnotations with related","."," Sets related",".","R",".","Resource's ResourceBuildAnnotations accordingly","."),(0,o.kt)("h3",{id:"func-buildquery-setresourcebuildlabels"},"func ","(","buildQuery",")"," SetResourceBuildLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) SetResourceBuildLabels(o *Build, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BuildLabel) error\n")),(0,o.kt)("p",null,"SetResourceBuildLabels removes all previously related items of the build replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceBuildLabels accordingly","."," Replaces o",".","R",".","ResourceBuildLabels with related","."," Sets related",".","R",".","Resource's ResourceBuildLabels accordingly","."),(0,o.kt)("h3",{id:"func-buildquery-update"},"func ","(","buildQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) Update(o *Build, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the Build","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-buildquery-updateall"},"func ","(","buildQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-buildquery-updateallslice"},"func ","(","buildQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) UpdateAllSlice(o BuildSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-buildquery-upsert"},"func ","(","buildQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildQuery) Upsert(o *Build, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-buildr"},"type buildR"),(0,o.kt)("p",null,"buildR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type buildR struct {\n    App                      *App                     `boil:"App" json:"App" toml:"App" yaml:"App"`\n    ResourceBuildAnnotations BuildAnnotationSlice     `boil:"ResourceBuildAnnotations" json:"ResourceBuildAnnotations" toml:"ResourceBuildAnnotations" yaml:"ResourceBuildAnnotations"`\n    ResourceBuildLabels      BuildLabelSlice          `boil:"ResourceBuildLabels" json:"ResourceBuildLabels" toml:"ResourceBuildLabels" yaml:"ResourceBuildLabels"`\n    KpackLifecycleData       KpackLifecycleDatumSlice `boil:"KpackLifecycleData" json:"KpackLifecycleData" toml:"KpackLifecycleData" yaml:"KpackLifecycleData"`\n}\n')),(0,o.kt)("h3",{id:"func-buildr-newstruct"},"func ","(","*","buildR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*buildR) NewStruct() *buildR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-buildpackannotationl"},"type buildpackAnnotationL"),(0,o.kt)("p",null,"buildpackAnnotationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type buildpackAnnotationL struct{}\n")),(0,o.kt)("h3",{id:"func-buildpackannotationl-loadresource"},"func ","(","buildpackAnnotationL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (buildpackAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuildpackAnnotation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-buildpackannotationquery"},"type buildpackAnnotationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type buildpackAnnotationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-buildpackannotations"},"func BuildpackAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func BuildpackAnnotations(mods ...qm.QueryMod) buildpackAnnotationQuery\n")),(0,o.kt)("p",null,"BuildpackAnnotations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-buildpackannotationquery-all"},"func ","(","buildpackAnnotationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (BuildpackAnnotationSlice, error)\n")),(0,o.kt)("p",null,"All returns all BuildpackAnnotation records from the query","."),(0,o.kt)("h3",{id:"func-buildpackannotationquery-count"},"func ","(","buildpackAnnotationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all BuildpackAnnotation records in the query","."),(0,o.kt)("h3",{id:"func-buildpackannotationquery-delete"},"func ","(","buildpackAnnotationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackAnnotationQuery) Delete(o *BuildpackAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single BuildpackAnnotation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-buildpackannotationquery-deleteall"},"func ","(","buildpackAnnotationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-buildpackannotationquery-deleteallslice"},"func ","(","buildpackAnnotationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackAnnotationQuery) DeleteAllSlice(o BuildpackAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-buildpackannotationquery-exists"},"func ","(","buildpackAnnotationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-buildpackannotationquery-insert"},"func ","(","buildpackAnnotationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackAnnotationQuery) Insert(o *BuildpackAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-buildpackannotationquery-one"},"func ","(","buildpackAnnotationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BuildpackAnnotation, error)\n")),(0,o.kt)("p",null,"One returns a single buildpackAnnotation record from the query","."),(0,o.kt)("h3",{id:"func-buildpackannotationquery-reload"},"func ","(","buildpackAnnotationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackAnnotationQuery) Reload(o *BuildpackAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-buildpackannotationquery-reloadall"},"func ","(","buildpackAnnotationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackAnnotationQuery) ReloadAll(o *BuildpackAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-buildpackannotationquery-removeresource"},"func ","(","buildpackAnnotationQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackAnnotationQuery) RemoveResource(o *BuildpackAnnotation, ctx context.Context, exec boil.ContextExecutor, related *Buildpack) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-buildpackannotationquery-resource"},"func ","(","buildpackAnnotationQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackAnnotationQuery) Resource(o *BuildpackAnnotation, mods ...qm.QueryMod) buildpackQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-buildpackannotationquery-setresource"},"func ","(","buildpackAnnotationQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackAnnotationQuery) SetResource(o *BuildpackAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Buildpack) error\n")),(0,o.kt)("p",null,"SetResource of the buildpackAnnotation to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceBuildpackAnnotations","."),(0,o.kt)("h3",{id:"func-buildpackannotationquery-update"},"func ","(","buildpackAnnotationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackAnnotationQuery) Update(o *BuildpackAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the BuildpackAnnotation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-buildpackannotationquery-updateall"},"func ","(","buildpackAnnotationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-buildpackannotationquery-updateallslice"},"func ","(","buildpackAnnotationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackAnnotationQuery) UpdateAllSlice(o BuildpackAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-buildpackannotationquery-upsert"},"func ","(","buildpackAnnotationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackAnnotationQuery) Upsert(o *BuildpackAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-buildpackannotationr"},"type buildpackAnnotationR"),(0,o.kt)("p",null,"buildpackAnnotationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type buildpackAnnotationR struct {\n    Resource *Buildpack `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-buildpackannotationr-newstruct"},"func ","(","*","buildpackAnnotationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*buildpackAnnotationR) NewStruct() *buildpackAnnotationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-buildpackl"},"type buildpackL"),(0,o.kt)("p",null,"buildpackL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type buildpackL struct{}\n")),(0,o.kt)("h3",{id:"func-buildpackl-loadresourcebuildpackannotations"},"func ","(","buildpackL",")"," LoadResourceBuildpackAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (buildpackL) LoadResourceBuildpackAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuildpack interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceBuildpackAnnotations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-buildpackl-loadresourcebuildpacklabels"},"func ","(","buildpackL",")"," LoadResourceBuildpackLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (buildpackL) LoadResourceBuildpackLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuildpack interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceBuildpackLabels allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-buildpacklabell"},"type buildpackLabelL"),(0,o.kt)("p",null,"buildpackLabelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type buildpackLabelL struct{}\n")),(0,o.kt)("h3",{id:"func-buildpacklabell-loadresource"},"func ","(","buildpackLabelL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (buildpackLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuildpackLabel interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-buildpacklabelquery"},"type buildpackLabelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type buildpackLabelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-buildpacklabels"},"func BuildpackLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func BuildpackLabels(mods ...qm.QueryMod) buildpackLabelQuery\n")),(0,o.kt)("p",null,"BuildpackLabels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-buildpacklabelquery-all"},"func ","(","buildpackLabelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (BuildpackLabelSlice, error)\n")),(0,o.kt)("p",null,"All returns all BuildpackLabel records from the query","."),(0,o.kt)("h3",{id:"func-buildpacklabelquery-count"},"func ","(","buildpackLabelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all BuildpackLabel records in the query","."),(0,o.kt)("h3",{id:"func-buildpacklabelquery-delete"},"func ","(","buildpackLabelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLabelQuery) Delete(o *BuildpackLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single BuildpackLabel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-buildpacklabelquery-deleteall"},"func ","(","buildpackLabelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-buildpacklabelquery-deleteallslice"},"func ","(","buildpackLabelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLabelQuery) DeleteAllSlice(o BuildpackLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-buildpacklabelquery-exists"},"func ","(","buildpackLabelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-buildpacklabelquery-insert"},"func ","(","buildpackLabelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLabelQuery) Insert(o *BuildpackLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-buildpacklabelquery-one"},"func ","(","buildpackLabelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BuildpackLabel, error)\n")),(0,o.kt)("p",null,"One returns a single buildpackLabel record from the query","."),(0,o.kt)("h3",{id:"func-buildpacklabelquery-reload"},"func ","(","buildpackLabelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLabelQuery) Reload(o *BuildpackLabel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-buildpacklabelquery-reloadall"},"func ","(","buildpackLabelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLabelQuery) ReloadAll(o *BuildpackLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-buildpacklabelquery-removeresource"},"func ","(","buildpackLabelQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLabelQuery) RemoveResource(o *BuildpackLabel, ctx context.Context, exec boil.ContextExecutor, related *Buildpack) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-buildpacklabelquery-resource"},"func ","(","buildpackLabelQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLabelQuery) Resource(o *BuildpackLabel, mods ...qm.QueryMod) buildpackQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-buildpacklabelquery-setresource"},"func ","(","buildpackLabelQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLabelQuery) SetResource(o *BuildpackLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Buildpack) error\n")),(0,o.kt)("p",null,"SetResource of the buildpackLabel to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceBuildpackLabels","."),(0,o.kt)("h3",{id:"func-buildpacklabelquery-update"},"func ","(","buildpackLabelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLabelQuery) Update(o *BuildpackLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the BuildpackLabel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-buildpacklabelquery-updateall"},"func ","(","buildpackLabelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-buildpacklabelquery-updateallslice"},"func ","(","buildpackLabelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLabelQuery) UpdateAllSlice(o BuildpackLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-buildpacklabelquery-upsert"},"func ","(","buildpackLabelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLabelQuery) Upsert(o *BuildpackLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-buildpacklabelr"},"type buildpackLabelR"),(0,o.kt)("p",null,"buildpackLabelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type buildpackLabelR struct {\n    Resource *Buildpack `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-buildpacklabelr-newstruct"},"func ","(","*","buildpackLabelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*buildpackLabelR) NewStruct() *buildpackLabelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-buildpacklifecyclebuildpackl"},"type buildpackLifecycleBuildpackL"),(0,o.kt)("p",null,"buildpackLifecycleBuildpackL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type buildpackLifecycleBuildpackL struct{}\n")),(0,o.kt)("h3",{id:"func-buildpacklifecyclebuildpackl-loadbuildpacklifecycledatum"},"func ","(","buildpackLifecycleBuildpackL",")"," LoadBuildpackLifecycleDatum"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (buildpackLifecycleBuildpackL) LoadBuildpackLifecycleDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuildpackLifecycleBuildpack interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadBuildpackLifecycleDatum allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-buildpacklifecyclebuildpackquery"},"type buildpackLifecycleBuildpackQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type buildpackLifecycleBuildpackQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-buildpacklifecyclebuildpacks"},"func BuildpackLifecycleBuildpacks"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func BuildpackLifecycleBuildpacks(mods ...qm.QueryMod) buildpackLifecycleBuildpackQuery\n")),(0,o.kt)("p",null,"BuildpackLifecycleBuildpacks retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-buildpacklifecyclebuildpackquery-all"},"func ","(","buildpackLifecycleBuildpackQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleBuildpackQuery) All(ctx context.Context, exec boil.ContextExecutor) (BuildpackLifecycleBuildpackSlice, error)\n")),(0,o.kt)("p",null,"All returns all BuildpackLifecycleBuildpack records from the query","."),(0,o.kt)("h3",{id:"func-buildpacklifecyclebuildpackquery-buildpacklifecycledatum"},"func ","(","buildpackLifecycleBuildpackQuery",")"," BuildpackLifecycleDatum"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleBuildpackQuery) BuildpackLifecycleDatum(o *BuildpackLifecycleBuildpack, mods ...qm.QueryMod) buildpackLifecycleDatumQuery\n")),(0,o.kt)("p",null,"BuildpackLifecycleDatum pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-buildpacklifecyclebuildpackquery-count"},"func ","(","buildpackLifecycleBuildpackQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleBuildpackQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all BuildpackLifecycleBuildpack records in the query","."),(0,o.kt)("h3",{id:"func-buildpacklifecyclebuildpackquery-delete"},"func ","(","buildpackLifecycleBuildpackQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleBuildpackQuery) Delete(o *BuildpackLifecycleBuildpack, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single BuildpackLifecycleBuildpack record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-buildpacklifecyclebuildpackquery-deleteall"},"func ","(","buildpackLifecycleBuildpackQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleBuildpackQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-buildpacklifecyclebuildpackquery-deleteallslice"},"func ","(","buildpackLifecycleBuildpackQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleBuildpackQuery) DeleteAllSlice(o BuildpackLifecycleBuildpackSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-buildpacklifecyclebuildpackquery-exists"},"func ","(","buildpackLifecycleBuildpackQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleBuildpackQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-buildpacklifecyclebuildpackquery-insert"},"func ","(","buildpackLifecycleBuildpackQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleBuildpackQuery) Insert(o *BuildpackLifecycleBuildpack, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-buildpacklifecyclebuildpackquery-one"},"func ","(","buildpackLifecycleBuildpackQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleBuildpackQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BuildpackLifecycleBuildpack, error)\n")),(0,o.kt)("p",null,"One returns a single buildpackLifecycleBuildpack record from the query","."),(0,o.kt)("h3",{id:"func-buildpacklifecyclebuildpackquery-reload"},"func ","(","buildpackLifecycleBuildpackQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleBuildpackQuery) Reload(o *BuildpackLifecycleBuildpack, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-buildpacklifecyclebuildpackquery-reloadall"},"func ","(","buildpackLifecycleBuildpackQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleBuildpackQuery) ReloadAll(o *BuildpackLifecycleBuildpackSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-buildpacklifecyclebuildpackquery-removebuildpacklifecycledatum"},"func ","(","buildpackLifecycleBuildpackQuery",")"," RemoveBuildpackLifecycleDatum"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleBuildpackQuery) RemoveBuildpackLifecycleDatum(o *BuildpackLifecycleBuildpack, ctx context.Context, exec boil.ContextExecutor, related *BuildpackLifecycleDatum) error\n")),(0,o.kt)("p",null,"RemoveBuildpackLifecycleDatum relationship","."," Sets o",".","R",".","BuildpackLifecycleDatum to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-buildpacklifecyclebuildpackquery-setbuildpacklifecycledatum"},"func ","(","buildpackLifecycleBuildpackQuery",")"," SetBuildpackLifecycleDatum"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleBuildpackQuery) SetBuildpackLifecycleDatum(o *BuildpackLifecycleBuildpack, ctx context.Context, exec boil.ContextExecutor, insert bool, related *BuildpackLifecycleDatum) error\n")),(0,o.kt)("p",null,"SetBuildpackLifecycleDatum of the buildpackLifecycleBuildpack to the related item","."," Sets o",".","R",".","BuildpackLifecycleDatum to related","."," Adds o to related",".","R",".","BuildpackLifecycleBuildpacks","."),(0,o.kt)("h3",{id:"func-buildpacklifecyclebuildpackquery-update"},"func ","(","buildpackLifecycleBuildpackQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleBuildpackQuery) Update(o *BuildpackLifecycleBuildpack, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the BuildpackLifecycleBuildpack","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-buildpacklifecyclebuildpackquery-updateall"},"func ","(","buildpackLifecycleBuildpackQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleBuildpackQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-buildpacklifecyclebuildpackquery-updateallslice"},"func ","(","buildpackLifecycleBuildpackQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleBuildpackQuery) UpdateAllSlice(o BuildpackLifecycleBuildpackSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-buildpacklifecyclebuildpackquery-upsert"},"func ","(","buildpackLifecycleBuildpackQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleBuildpackQuery) Upsert(o *BuildpackLifecycleBuildpack, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-buildpacklifecyclebuildpackr"},"type buildpackLifecycleBuildpackR"),(0,o.kt)("p",null,"buildpackLifecycleBuildpackR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type buildpackLifecycleBuildpackR struct {\n    BuildpackLifecycleDatum *BuildpackLifecycleDatum `boil:"BuildpackLifecycleDatum" json:"BuildpackLifecycleDatum" toml:"BuildpackLifecycleDatum" yaml:"BuildpackLifecycleDatum"`\n}\n')),(0,o.kt)("h3",{id:"func-buildpacklifecyclebuildpackr-newstruct"},"func ","(","*","buildpackLifecycleBuildpackR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*buildpackLifecycleBuildpackR) NewStruct() *buildpackLifecycleBuildpackR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-buildpacklifecycledatuml"},"type buildpackLifecycleDatumL"),(0,o.kt)("p",null,"buildpackLifecycleDatumL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type buildpackLifecycleDatumL struct{}\n")),(0,o.kt)("h3",{id:"func-buildpacklifecycledatuml-loadbuildpacklifecyclebuildpacks"},"func ","(","buildpackLifecycleDatumL",")"," LoadBuildpackLifecycleBuildpacks"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (buildpackLifecycleDatumL) LoadBuildpackLifecycleBuildpacks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuildpackLifecycleDatum interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadBuildpackLifecycleBuildpacks allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-buildpacklifecycledatumquery"},"type buildpackLifecycleDatumQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type buildpackLifecycleDatumQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-buildpacklifecycledata"},"func BuildpackLifecycleData"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func BuildpackLifecycleData(mods ...qm.QueryMod) buildpackLifecycleDatumQuery\n")),(0,o.kt)("p",null,"BuildpackLifecycleData retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-buildpacklifecycledatumquery-addbuildpacklifecyclebuildpacks"},"func ","(","buildpackLifecycleDatumQuery",")"," AddBuildpackLifecycleBuildpacks"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleDatumQuery) AddBuildpackLifecycleBuildpacks(o *BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BuildpackLifecycleBuildpack) error\n")),(0,o.kt)("p",null,"AddBuildpackLifecycleBuildpacks adds the given related objects to the existing relationships of the buildpack","_","lifecycle","_","datum\\, optionally inserting them as new records","."," Appends related to o",".","R",".","BuildpackLifecycleBuildpacks","."," Sets related",".","R",".","BuildpackLifecycleDatum appropriately","."),(0,o.kt)("h3",{id:"func-buildpacklifecycledatumquery-all"},"func ","(","buildpackLifecycleDatumQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (BuildpackLifecycleDatumSlice, error)\n")),(0,o.kt)("p",null,"All returns all BuildpackLifecycleDatum records from the query","."),(0,o.kt)("h3",{id:"func-buildpacklifecycledatumquery-buildpacklifecyclebuildpacks"},"func ","(","buildpackLifecycleDatumQuery",")"," BuildpackLifecycleBuildpacks"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleDatumQuery) BuildpackLifecycleBuildpacks(o *BuildpackLifecycleDatum, mods ...qm.QueryMod) buildpackLifecycleBuildpackQuery\n")),(0,o.kt)("p",null,"BuildpackLifecycleBuildpacks retrieves all the buildpack","_","lifecycle","_","buildpack's BuildpackLifecycleBuildpacks with an executor","."),(0,o.kt)("h3",{id:"func-buildpacklifecycledatumquery-count"},"func ","(","buildpackLifecycleDatumQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all BuildpackLifecycleDatum records in the query","."),(0,o.kt)("h3",{id:"func-buildpacklifecycledatumquery-delete"},"func ","(","buildpackLifecycleDatumQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleDatumQuery) Delete(o *BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single BuildpackLifecycleDatum record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-buildpacklifecycledatumquery-deleteall"},"func ","(","buildpackLifecycleDatumQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-buildpacklifecycledatumquery-deleteallslice"},"func ","(","buildpackLifecycleDatumQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleDatumQuery) DeleteAllSlice(o BuildpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-buildpacklifecycledatumquery-exists"},"func ","(","buildpackLifecycleDatumQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-buildpacklifecycledatumquery-insert"},"func ","(","buildpackLifecycleDatumQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleDatumQuery) Insert(o *BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-buildpacklifecycledatumquery-one"},"func ","(","buildpackLifecycleDatumQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BuildpackLifecycleDatum, error)\n")),(0,o.kt)("p",null,"One returns a single buildpackLifecycleDatum record from the query","."),(0,o.kt)("h3",{id:"func-buildpacklifecycledatumquery-reload"},"func ","(","buildpackLifecycleDatumQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleDatumQuery) Reload(o *BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-buildpacklifecycledatumquery-reloadall"},"func ","(","buildpackLifecycleDatumQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleDatumQuery) ReloadAll(o *BuildpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-buildpacklifecycledatumquery-removebuildpacklifecyclebuildpacks"},"func ","(","buildpackLifecycleDatumQuery",")"," RemoveBuildpackLifecycleBuildpacks"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleDatumQuery) RemoveBuildpackLifecycleBuildpacks(o *BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, related ...*BuildpackLifecycleBuildpack) error\n")),(0,o.kt)("p",null,"RemoveBuildpackLifecycleBuildpacks relationships from objects passed in","."," Removes related items from R",".","BuildpackLifecycleBuildpacks ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","BuildpackLifecycleDatum","."),(0,o.kt)("h3",{id:"func-buildpacklifecycledatumquery-setbuildpacklifecyclebuildpacks"},"func ","(","buildpackLifecycleDatumQuery",")"," SetBuildpackLifecycleBuildpacks"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleDatumQuery) SetBuildpackLifecycleBuildpacks(o *BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BuildpackLifecycleBuildpack) error\n")),(0,o.kt)("p",null,"SetBuildpackLifecycleBuildpacks removes all previously related items of the buildpack","_","lifecycle","_","datum replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","BuildpackLifecycleDatum's BuildpackLifecycleBuildpacks accordingly","."," Replaces o",".","R",".","BuildpackLifecycleBuildpacks with related","."," Sets related",".","R",".","BuildpackLifecycleDatum's BuildpackLifecycleBuildpacks accordingly","."),(0,o.kt)("h3",{id:"func-buildpacklifecycledatumquery-update"},"func ","(","buildpackLifecycleDatumQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleDatumQuery) Update(o *BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the BuildpackLifecycleDatum","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-buildpacklifecycledatumquery-updateall"},"func ","(","buildpackLifecycleDatumQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-buildpacklifecycledatumquery-updateallslice"},"func ","(","buildpackLifecycleDatumQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleDatumQuery) UpdateAllSlice(o BuildpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-buildpacklifecycledatumquery-upsert"},"func ","(","buildpackLifecycleDatumQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackLifecycleDatumQuery) Upsert(o *BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-buildpacklifecycledatumr"},"type buildpackLifecycleDatumR"),(0,o.kt)("p",null,"buildpackLifecycleDatumR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type buildpackLifecycleDatumR struct {\n    BuildpackLifecycleBuildpacks BuildpackLifecycleBuildpackSlice `boil:"BuildpackLifecycleBuildpacks" json:"BuildpackLifecycleBuildpacks" toml:"BuildpackLifecycleBuildpacks" yaml:"BuildpackLifecycleBuildpacks"`\n}\n')),(0,o.kt)("h3",{id:"func-buildpacklifecycledatumr-newstruct"},"func ","(","*","buildpackLifecycleDatumR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*buildpackLifecycleDatumR) NewStruct() *buildpackLifecycleDatumR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-buildpackquery"},"type buildpackQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type buildpackQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-buildpacks"},"func Buildpacks"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func Buildpacks(mods ...qm.QueryMod) buildpackQuery\n")),(0,o.kt)("p",null,"Buildpacks retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-buildpackquery-addresourcebuildpackannotations"},"func ","(","buildpackQuery",")"," AddResourceBuildpackAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackQuery) AddResourceBuildpackAnnotations(o *Buildpack, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BuildpackAnnotation) error\n")),(0,o.kt)("p",null,"AddResourceBuildpackAnnotations adds the given related objects to the existing relationships of the buildpack\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceBuildpackAnnotations","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-buildpackquery-addresourcebuildpacklabels"},"func ","(","buildpackQuery",")"," AddResourceBuildpackLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackQuery) AddResourceBuildpackLabels(o *Buildpack, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BuildpackLabel) error\n")),(0,o.kt)("p",null,"AddResourceBuildpackLabels adds the given related objects to the existing relationships of the buildpack\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceBuildpackLabels","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-buildpackquery-all"},"func ","(","buildpackQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackQuery) All(ctx context.Context, exec boil.ContextExecutor) (BuildpackSlice, error)\n")),(0,o.kt)("p",null,"All returns all Buildpack records from the query","."),(0,o.kt)("h3",{id:"func-buildpackquery-count"},"func ","(","buildpackQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all Buildpack records in the query","."),(0,o.kt)("h3",{id:"func-buildpackquery-delete"},"func ","(","buildpackQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackQuery) Delete(o *Buildpack, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single Buildpack record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-buildpackquery-deleteall"},"func ","(","buildpackQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-buildpackquery-deleteallslice"},"func ","(","buildpackQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackQuery) DeleteAllSlice(o BuildpackSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-buildpackquery-exists"},"func ","(","buildpackQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-buildpackquery-insert"},"func ","(","buildpackQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackQuery) Insert(o *Buildpack, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-buildpackquery-one"},"func ","(","buildpackQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Buildpack, error)\n")),(0,o.kt)("p",null,"One returns a single buildpack record from the query","."),(0,o.kt)("h3",{id:"func-buildpackquery-reload"},"func ","(","buildpackQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackQuery) Reload(o *Buildpack, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-buildpackquery-reloadall"},"func ","(","buildpackQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackQuery) ReloadAll(o *BuildpackSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-buildpackquery-removeresourcebuildpackannotations"},"func ","(","buildpackQuery",")"," RemoveResourceBuildpackAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackQuery) RemoveResourceBuildpackAnnotations(o *Buildpack, ctx context.Context, exec boil.ContextExecutor, related ...*BuildpackAnnotation) error\n")),(0,o.kt)("p",null,"RemoveResourceBuildpackAnnotations relationships from objects passed in","."," Removes related items from R",".","ResourceBuildpackAnnotations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-buildpackquery-removeresourcebuildpacklabels"},"func ","(","buildpackQuery",")"," RemoveResourceBuildpackLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackQuery) RemoveResourceBuildpackLabels(o *Buildpack, ctx context.Context, exec boil.ContextExecutor, related ...*BuildpackLabel) error\n")),(0,o.kt)("p",null,"RemoveResourceBuildpackLabels relationships from objects passed in","."," Removes related items from R",".","ResourceBuildpackLabels ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-buildpackquery-resourcebuildpackannotations"},"func ","(","buildpackQuery",")"," ResourceBuildpackAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackQuery) ResourceBuildpackAnnotations(o *Buildpack, mods ...qm.QueryMod) buildpackAnnotationQuery\n")),(0,o.kt)("p",null,"ResourceBuildpackAnnotations retrieves all the buildpack","_","annotation's BuildpackAnnotations with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-buildpackquery-resourcebuildpacklabels"},"func ","(","buildpackQuery",")"," ResourceBuildpackLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackQuery) ResourceBuildpackLabels(o *Buildpack, mods ...qm.QueryMod) buildpackLabelQuery\n")),(0,o.kt)("p",null,"ResourceBuildpackLabels retrieves all the buildpack","_","label's BuildpackLabels with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-buildpackquery-setresourcebuildpackannotations"},"func ","(","buildpackQuery",")"," SetResourceBuildpackAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackQuery) SetResourceBuildpackAnnotations(o *Buildpack, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BuildpackAnnotation) error\n")),(0,o.kt)("p",null,"SetResourceBuildpackAnnotations removes all previously related items of the buildpack replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceBuildpackAnnotations accordingly","."," Replaces o",".","R",".","ResourceBuildpackAnnotations with related","."," Sets related",".","R",".","Resource's ResourceBuildpackAnnotations accordingly","."),(0,o.kt)("h3",{id:"func-buildpackquery-setresourcebuildpacklabels"},"func ","(","buildpackQuery",")"," SetResourceBuildpackLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackQuery) SetResourceBuildpackLabels(o *Buildpack, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BuildpackLabel) error\n")),(0,o.kt)("p",null,"SetResourceBuildpackLabels removes all previously related items of the buildpack replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceBuildpackLabels accordingly","."," Replaces o",".","R",".","ResourceBuildpackLabels with related","."," Sets related",".","R",".","Resource's ResourceBuildpackLabels accordingly","."),(0,o.kt)("h3",{id:"func-buildpackquery-update"},"func ","(","buildpackQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackQuery) Update(o *Buildpack, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the Buildpack","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-buildpackquery-updateall"},"func ","(","buildpackQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-buildpackquery-updateallslice"},"func ","(","buildpackQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackQuery) UpdateAllSlice(o BuildpackSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-buildpackquery-upsert"},"func ","(","buildpackQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q buildpackQuery) Upsert(o *Buildpack, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-buildpackr"},"type buildpackR"),(0,o.kt)("p",null,"buildpackR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type buildpackR struct {\n    ResourceBuildpackAnnotations BuildpackAnnotationSlice `boil:"ResourceBuildpackAnnotations" json:"ResourceBuildpackAnnotations" toml:"ResourceBuildpackAnnotations" yaml:"ResourceBuildpackAnnotations"`\n    ResourceBuildpackLabels      BuildpackLabelSlice      `boil:"ResourceBuildpackLabels" json:"ResourceBuildpackLabels" toml:"ResourceBuildpackLabels" yaml:"ResourceBuildpackLabels"`\n}\n')),(0,o.kt)("h3",{id:"func-buildpackr-newstruct"},"func ","(","*","buildpackR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*buildpackR) NewStruct() *buildpackR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-clockjobl"},"type clockJobL"),(0,o.kt)("p",null,"clockJobL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type clockJobL struct{}\n")),(0,o.kt)("h2",{id:"type-clockjobquery"},"type clockJobQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type clockJobQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-clockjobs"},"func ClockJobs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ClockJobs(mods ...qm.QueryMod) clockJobQuery\n")),(0,o.kt)("p",null,"ClockJobs retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-clockjobquery-all"},"func ","(","clockJobQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q clockJobQuery) All(ctx context.Context, exec boil.ContextExecutor) (ClockJobSlice, error)\n")),(0,o.kt)("p",null,"All returns all ClockJob records from the query","."),(0,o.kt)("h3",{id:"func-clockjobquery-count"},"func ","(","clockJobQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q clockJobQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ClockJob records in the query","."),(0,o.kt)("h3",{id:"func-clockjobquery-delete"},"func ","(","clockJobQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q clockJobQuery) Delete(o *ClockJob, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ClockJob record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-clockjobquery-deleteall"},"func ","(","clockJobQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q clockJobQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-clockjobquery-deleteallslice"},"func ","(","clockJobQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q clockJobQuery) DeleteAllSlice(o ClockJobSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-clockjobquery-exists"},"func ","(","clockJobQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q clockJobQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-clockjobquery-insert"},"func ","(","clockJobQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q clockJobQuery) Insert(o *ClockJob, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-clockjobquery-one"},"func ","(","clockJobQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q clockJobQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ClockJob, error)\n")),(0,o.kt)("p",null,"One returns a single clockJob record from the query","."),(0,o.kt)("h3",{id:"func-clockjobquery-reload"},"func ","(","clockJobQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q clockJobQuery) Reload(o *ClockJob, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-clockjobquery-reloadall"},"func ","(","clockJobQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q clockJobQuery) ReloadAll(o *ClockJobSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-clockjobquery-update"},"func ","(","clockJobQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q clockJobQuery) Update(o *ClockJob, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ClockJob","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-clockjobquery-updateall"},"func ","(","clockJobQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q clockJobQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-clockjobquery-updateallslice"},"func ","(","clockJobQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q clockJobQuery) UpdateAllSlice(o ClockJobSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-clockjobquery-upsert"},"func ","(","clockJobQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q clockJobQuery) Upsert(o *ClockJob, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-clockjobr"},"type clockJobR"),(0,o.kt)("p",null,"clockJobR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type clockJobR struct {\n}\n")),(0,o.kt)("h3",{id:"func-clockjobr-newstruct"},"func ","(","*","clockJobR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*clockJobR) NewStruct() *clockJobR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-delayedjobl"},"type delayedJobL"),(0,o.kt)("p",null,"delayedJobL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type delayedJobL struct{}\n")),(0,o.kt)("h2",{id:"type-delayedjobquery"},"type delayedJobQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type delayedJobQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-delayedjobs"},"func DelayedJobs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func DelayedJobs(mods ...qm.QueryMod) delayedJobQuery\n")),(0,o.kt)("p",null,"DelayedJobs retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-delayedjobquery-all"},"func ","(","delayedJobQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q delayedJobQuery) All(ctx context.Context, exec boil.ContextExecutor) (DelayedJobSlice, error)\n")),(0,o.kt)("p",null,"All returns all DelayedJob records from the query","."),(0,o.kt)("h3",{id:"func-delayedjobquery-count"},"func ","(","delayedJobQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q delayedJobQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all DelayedJob records in the query","."),(0,o.kt)("h3",{id:"func-delayedjobquery-delete"},"func ","(","delayedJobQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q delayedJobQuery) Delete(o *DelayedJob, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single DelayedJob record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-delayedjobquery-deleteall"},"func ","(","delayedJobQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q delayedJobQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-delayedjobquery-deleteallslice"},"func ","(","delayedJobQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q delayedJobQuery) DeleteAllSlice(o DelayedJobSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-delayedjobquery-exists"},"func ","(","delayedJobQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q delayedJobQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-delayedjobquery-insert"},"func ","(","delayedJobQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q delayedJobQuery) Insert(o *DelayedJob, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-delayedjobquery-one"},"func ","(","delayedJobQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q delayedJobQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DelayedJob, error)\n")),(0,o.kt)("p",null,"One returns a single delayedJob record from the query","."),(0,o.kt)("h3",{id:"func-delayedjobquery-reload"},"func ","(","delayedJobQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q delayedJobQuery) Reload(o *DelayedJob, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-delayedjobquery-reloadall"},"func ","(","delayedJobQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q delayedJobQuery) ReloadAll(o *DelayedJobSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-delayedjobquery-update"},"func ","(","delayedJobQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q delayedJobQuery) Update(o *DelayedJob, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the DelayedJob","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-delayedjobquery-updateall"},"func ","(","delayedJobQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q delayedJobQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-delayedjobquery-updateallslice"},"func ","(","delayedJobQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q delayedJobQuery) UpdateAllSlice(o DelayedJobSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-delayedjobquery-upsert"},"func ","(","delayedJobQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q delayedJobQuery) Upsert(o *DelayedJob, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-delayedjobr"},"type delayedJobR"),(0,o.kt)("p",null,"delayedJobR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type delayedJobR struct {\n}\n")),(0,o.kt)("h3",{id:"func-delayedjobr-newstruct"},"func ","(","*","delayedJobR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*delayedJobR) NewStruct() *delayedJobR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-deploymentannotationl"},"type deploymentAnnotationL"),(0,o.kt)("p",null,"deploymentAnnotationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type deploymentAnnotationL struct{}\n")),(0,o.kt)("h3",{id:"func-deploymentannotationl-loadresource"},"func ","(","deploymentAnnotationL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (deploymentAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeploymentAnnotation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-deploymentannotationquery"},"type deploymentAnnotationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type deploymentAnnotationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-deploymentannotations"},"func DeploymentAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func DeploymentAnnotations(mods ...qm.QueryMod) deploymentAnnotationQuery\n")),(0,o.kt)("p",null,"DeploymentAnnotations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-deploymentannotationquery-all"},"func ","(","deploymentAnnotationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeploymentAnnotationSlice, error)\n")),(0,o.kt)("p",null,"All returns all DeploymentAnnotation records from the query","."),(0,o.kt)("h3",{id:"func-deploymentannotationquery-count"},"func ","(","deploymentAnnotationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all DeploymentAnnotation records in the query","."),(0,o.kt)("h3",{id:"func-deploymentannotationquery-delete"},"func ","(","deploymentAnnotationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentAnnotationQuery) Delete(o *DeploymentAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single DeploymentAnnotation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-deploymentannotationquery-deleteall"},"func ","(","deploymentAnnotationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-deploymentannotationquery-deleteallslice"},"func ","(","deploymentAnnotationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentAnnotationQuery) DeleteAllSlice(o DeploymentAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-deploymentannotationquery-exists"},"func ","(","deploymentAnnotationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-deploymentannotationquery-insert"},"func ","(","deploymentAnnotationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentAnnotationQuery) Insert(o *DeploymentAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-deploymentannotationquery-one"},"func ","(","deploymentAnnotationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeploymentAnnotation, error)\n")),(0,o.kt)("p",null,"One returns a single deploymentAnnotation record from the query","."),(0,o.kt)("h3",{id:"func-deploymentannotationquery-reload"},"func ","(","deploymentAnnotationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentAnnotationQuery) Reload(o *DeploymentAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-deploymentannotationquery-reloadall"},"func ","(","deploymentAnnotationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentAnnotationQuery) ReloadAll(o *DeploymentAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-deploymentannotationquery-removeresource"},"func ","(","deploymentAnnotationQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentAnnotationQuery) RemoveResource(o *DeploymentAnnotation, ctx context.Context, exec boil.ContextExecutor, related *Deployment) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-deploymentannotationquery-resource"},"func ","(","deploymentAnnotationQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentAnnotationQuery) Resource(o *DeploymentAnnotation, mods ...qm.QueryMod) deploymentQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-deploymentannotationquery-setresource"},"func ","(","deploymentAnnotationQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentAnnotationQuery) SetResource(o *DeploymentAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Deployment) error\n")),(0,o.kt)("p",null,"SetResource of the deploymentAnnotation to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceDeploymentAnnotations","."),(0,o.kt)("h3",{id:"func-deploymentannotationquery-update"},"func ","(","deploymentAnnotationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentAnnotationQuery) Update(o *DeploymentAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the DeploymentAnnotation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-deploymentannotationquery-updateall"},"func ","(","deploymentAnnotationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-deploymentannotationquery-updateallslice"},"func ","(","deploymentAnnotationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentAnnotationQuery) UpdateAllSlice(o DeploymentAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-deploymentannotationquery-upsert"},"func ","(","deploymentAnnotationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentAnnotationQuery) Upsert(o *DeploymentAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-deploymentannotationr"},"type deploymentAnnotationR"),(0,o.kt)("p",null,"deploymentAnnotationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type deploymentAnnotationR struct {\n    Resource *Deployment `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-deploymentannotationr-newstruct"},"func ","(","*","deploymentAnnotationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*deploymentAnnotationR) NewStruct() *deploymentAnnotationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-deploymentl"},"type deploymentL"),(0,o.kt)("p",null,"deploymentL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type deploymentL struct{}\n")),(0,o.kt)("h3",{id:"func-deploymentl-loadapp"},"func ","(","deploymentL",")"," LoadApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (deploymentL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeployment interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadApp allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-deploymentl-loaddeploymentprocesses"},"func ","(","deploymentL",")"," LoadDeploymentProcesses"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (deploymentL) LoadDeploymentProcesses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeployment interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadDeploymentProcesses allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-deploymentl-loadresourcedeploymentannotations"},"func ","(","deploymentL",")"," LoadResourceDeploymentAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (deploymentL) LoadResourceDeploymentAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeployment interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceDeploymentAnnotations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-deploymentl-loadresourcedeploymentlabels"},"func ","(","deploymentL",")"," LoadResourceDeploymentLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (deploymentL) LoadResourceDeploymentLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeployment interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceDeploymentLabels allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-deploymentlabell"},"type deploymentLabelL"),(0,o.kt)("p",null,"deploymentLabelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type deploymentLabelL struct{}\n")),(0,o.kt)("h3",{id:"func-deploymentlabell-loadresource"},"func ","(","deploymentLabelL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (deploymentLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeploymentLabel interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-deploymentlabelquery"},"type deploymentLabelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type deploymentLabelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-deploymentlabels"},"func DeploymentLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func DeploymentLabels(mods ...qm.QueryMod) deploymentLabelQuery\n")),(0,o.kt)("p",null,"DeploymentLabels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-deploymentlabelquery-all"},"func ","(","deploymentLabelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeploymentLabelSlice, error)\n")),(0,o.kt)("p",null,"All returns all DeploymentLabel records from the query","."),(0,o.kt)("h3",{id:"func-deploymentlabelquery-count"},"func ","(","deploymentLabelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all DeploymentLabel records in the query","."),(0,o.kt)("h3",{id:"func-deploymentlabelquery-delete"},"func ","(","deploymentLabelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentLabelQuery) Delete(o *DeploymentLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single DeploymentLabel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-deploymentlabelquery-deleteall"},"func ","(","deploymentLabelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-deploymentlabelquery-deleteallslice"},"func ","(","deploymentLabelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentLabelQuery) DeleteAllSlice(o DeploymentLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-deploymentlabelquery-exists"},"func ","(","deploymentLabelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-deploymentlabelquery-insert"},"func ","(","deploymentLabelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentLabelQuery) Insert(o *DeploymentLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-deploymentlabelquery-one"},"func ","(","deploymentLabelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeploymentLabel, error)\n")),(0,o.kt)("p",null,"One returns a single deploymentLabel record from the query","."),(0,o.kt)("h3",{id:"func-deploymentlabelquery-reload"},"func ","(","deploymentLabelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentLabelQuery) Reload(o *DeploymentLabel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-deploymentlabelquery-reloadall"},"func ","(","deploymentLabelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentLabelQuery) ReloadAll(o *DeploymentLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-deploymentlabelquery-removeresource"},"func ","(","deploymentLabelQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentLabelQuery) RemoveResource(o *DeploymentLabel, ctx context.Context, exec boil.ContextExecutor, related *Deployment) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-deploymentlabelquery-resource"},"func ","(","deploymentLabelQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentLabelQuery) Resource(o *DeploymentLabel, mods ...qm.QueryMod) deploymentQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-deploymentlabelquery-setresource"},"func ","(","deploymentLabelQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentLabelQuery) SetResource(o *DeploymentLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Deployment) error\n")),(0,o.kt)("p",null,"SetResource of the deploymentLabel to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceDeploymentLabels","."),(0,o.kt)("h3",{id:"func-deploymentlabelquery-update"},"func ","(","deploymentLabelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentLabelQuery) Update(o *DeploymentLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the DeploymentLabel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-deploymentlabelquery-updateall"},"func ","(","deploymentLabelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-deploymentlabelquery-updateallslice"},"func ","(","deploymentLabelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentLabelQuery) UpdateAllSlice(o DeploymentLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-deploymentlabelquery-upsert"},"func ","(","deploymentLabelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentLabelQuery) Upsert(o *DeploymentLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-deploymentlabelr"},"type deploymentLabelR"),(0,o.kt)("p",null,"deploymentLabelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type deploymentLabelR struct {\n    Resource *Deployment `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-deploymentlabelr-newstruct"},"func ","(","*","deploymentLabelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*deploymentLabelR) NewStruct() *deploymentLabelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-deploymentprocessl"},"type deploymentProcessL"),(0,o.kt)("p",null,"deploymentProcessL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type deploymentProcessL struct{}\n")),(0,o.kt)("h3",{id:"func-deploymentprocessl-loaddeployment"},"func ","(","deploymentProcessL",")"," LoadDeployment"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (deploymentProcessL) LoadDeployment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeploymentProcess interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadDeployment allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-deploymentprocessquery"},"type deploymentProcessQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type deploymentProcessQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-deploymentprocesses"},"func DeploymentProcesses"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func DeploymentProcesses(mods ...qm.QueryMod) deploymentProcessQuery\n")),(0,o.kt)("p",null,"DeploymentProcesses retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-deploymentprocessquery-all"},"func ","(","deploymentProcessQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentProcessQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeploymentProcessSlice, error)\n")),(0,o.kt)("p",null,"All returns all DeploymentProcess records from the query","."),(0,o.kt)("h3",{id:"func-deploymentprocessquery-count"},"func ","(","deploymentProcessQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentProcessQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all DeploymentProcess records in the query","."),(0,o.kt)("h3",{id:"func-deploymentprocessquery-delete"},"func ","(","deploymentProcessQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentProcessQuery) Delete(o *DeploymentProcess, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single DeploymentProcess record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-deploymentprocessquery-deleteall"},"func ","(","deploymentProcessQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentProcessQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-deploymentprocessquery-deleteallslice"},"func ","(","deploymentProcessQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentProcessQuery) DeleteAllSlice(o DeploymentProcessSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-deploymentprocessquery-deployment"},"func ","(","deploymentProcessQuery",")"," Deployment"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentProcessQuery) Deployment(o *DeploymentProcess, mods ...qm.QueryMod) deploymentQuery\n")),(0,o.kt)("p",null,"Deployment pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-deploymentprocessquery-exists"},"func ","(","deploymentProcessQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentProcessQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-deploymentprocessquery-insert"},"func ","(","deploymentProcessQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentProcessQuery) Insert(o *DeploymentProcess, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-deploymentprocessquery-one"},"func ","(","deploymentProcessQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentProcessQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeploymentProcess, error)\n")),(0,o.kt)("p",null,"One returns a single deploymentProcess record from the query","."),(0,o.kt)("h3",{id:"func-deploymentprocessquery-reload"},"func ","(","deploymentProcessQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentProcessQuery) Reload(o *DeploymentProcess, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-deploymentprocessquery-reloadall"},"func ","(","deploymentProcessQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentProcessQuery) ReloadAll(o *DeploymentProcessSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-deploymentprocessquery-removedeployment"},"func ","(","deploymentProcessQuery",")"," RemoveDeployment"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentProcessQuery) RemoveDeployment(o *DeploymentProcess, ctx context.Context, exec boil.ContextExecutor, related *Deployment) error\n")),(0,o.kt)("p",null,"RemoveDeployment relationship","."," Sets o",".","R",".","Deployment to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-deploymentprocessquery-setdeployment"},"func ","(","deploymentProcessQuery",")"," SetDeployment"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentProcessQuery) SetDeployment(o *DeploymentProcess, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Deployment) error\n")),(0,o.kt)("p",null,"SetDeployment of the deploymentProcess to the related item","."," Sets o",".","R",".","Deployment to related","."," Adds o to related",".","R",".","DeploymentProcesses","."),(0,o.kt)("h3",{id:"func-deploymentprocessquery-update"},"func ","(","deploymentProcessQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentProcessQuery) Update(o *DeploymentProcess, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the DeploymentProcess","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-deploymentprocessquery-updateall"},"func ","(","deploymentProcessQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentProcessQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-deploymentprocessquery-updateallslice"},"func ","(","deploymentProcessQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentProcessQuery) UpdateAllSlice(o DeploymentProcessSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-deploymentprocessquery-upsert"},"func ","(","deploymentProcessQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentProcessQuery) Upsert(o *DeploymentProcess, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-deploymentprocessr"},"type deploymentProcessR"),(0,o.kt)("p",null,"deploymentProcessR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type deploymentProcessR struct {\n    Deployment *Deployment `boil:"Deployment" json:"Deployment" toml:"Deployment" yaml:"Deployment"`\n}\n')),(0,o.kt)("h3",{id:"func-deploymentprocessr-newstruct"},"func ","(","*","deploymentProcessR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*deploymentProcessR) NewStruct() *deploymentProcessR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-deploymentquery"},"type deploymentQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type deploymentQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-deployments"},"func Deployments"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func Deployments(mods ...qm.QueryMod) deploymentQuery\n")),(0,o.kt)("p",null,"Deployments retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-deploymentquery-adddeploymentprocesses"},"func ","(","deploymentQuery",")"," AddDeploymentProcesses"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) AddDeploymentProcesses(o *Deployment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DeploymentProcess) error\n")),(0,o.kt)("p",null,"AddDeploymentProcesses adds the given related objects to the existing relationships of the deployment\\, optionally inserting them as new records","."," Appends related to o",".","R",".","DeploymentProcesses","."," Sets related",".","R",".","Deployment appropriately","."),(0,o.kt)("h3",{id:"func-deploymentquery-addresourcedeploymentannotations"},"func ","(","deploymentQuery",")"," AddResourceDeploymentAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) AddResourceDeploymentAnnotations(o *Deployment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DeploymentAnnotation) error\n")),(0,o.kt)("p",null,"AddResourceDeploymentAnnotations adds the given related objects to the existing relationships of the deployment\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceDeploymentAnnotations","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-deploymentquery-addresourcedeploymentlabels"},"func ","(","deploymentQuery",")"," AddResourceDeploymentLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) AddResourceDeploymentLabels(o *Deployment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DeploymentLabel) error\n")),(0,o.kt)("p",null,"AddResourceDeploymentLabels adds the given related objects to the existing relationships of the deployment\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceDeploymentLabels","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-deploymentquery-all"},"func ","(","deploymentQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeploymentSlice, error)\n")),(0,o.kt)("p",null,"All returns all Deployment records from the query","."),(0,o.kt)("h3",{id:"func-deploymentquery-app"},"func ","(","deploymentQuery",")"," App"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) App(o *Deployment, mods ...qm.QueryMod) appQuery\n")),(0,o.kt)("p",null,"App pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-deploymentquery-count"},"func ","(","deploymentQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all Deployment records in the query","."),(0,o.kt)("h3",{id:"func-deploymentquery-delete"},"func ","(","deploymentQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) Delete(o *Deployment, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single Deployment record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-deploymentquery-deleteall"},"func ","(","deploymentQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-deploymentquery-deleteallslice"},"func ","(","deploymentQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) DeleteAllSlice(o DeploymentSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-deploymentquery-deploymentprocesses"},"func ","(","deploymentQuery",")"," DeploymentProcesses"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) DeploymentProcesses(o *Deployment, mods ...qm.QueryMod) deploymentProcessQuery\n")),(0,o.kt)("p",null,"DeploymentProcesses retrieves all the deployment","_","process's DeploymentProcesses with an executor","."),(0,o.kt)("h3",{id:"func-deploymentquery-exists"},"func ","(","deploymentQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-deploymentquery-insert"},"func ","(","deploymentQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) Insert(o *Deployment, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-deploymentquery-one"},"func ","(","deploymentQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Deployment, error)\n")),(0,o.kt)("p",null,"One returns a single deployment record from the query","."),(0,o.kt)("h3",{id:"func-deploymentquery-reload"},"func ","(","deploymentQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) Reload(o *Deployment, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-deploymentquery-reloadall"},"func ","(","deploymentQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) ReloadAll(o *DeploymentSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-deploymentquery-removeapp"},"func ","(","deploymentQuery",")"," RemoveApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) RemoveApp(o *Deployment, ctx context.Context, exec boil.ContextExecutor, related *App) error\n")),(0,o.kt)("p",null,"RemoveApp relationship","."," Sets o",".","R",".","App to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-deploymentquery-removedeploymentprocesses"},"func ","(","deploymentQuery",")"," RemoveDeploymentProcesses"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) RemoveDeploymentProcesses(o *Deployment, ctx context.Context, exec boil.ContextExecutor, related ...*DeploymentProcess) error\n")),(0,o.kt)("p",null,"RemoveDeploymentProcesses relationships from objects passed in","."," Removes related items from R",".","DeploymentProcesses ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Deployment","."),(0,o.kt)("h3",{id:"func-deploymentquery-removeresourcedeploymentannotations"},"func ","(","deploymentQuery",")"," RemoveResourceDeploymentAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) RemoveResourceDeploymentAnnotations(o *Deployment, ctx context.Context, exec boil.ContextExecutor, related ...*DeploymentAnnotation) error\n")),(0,o.kt)("p",null,"RemoveResourceDeploymentAnnotations relationships from objects passed in","."," Removes related items from R",".","ResourceDeploymentAnnotations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-deploymentquery-removeresourcedeploymentlabels"},"func ","(","deploymentQuery",")"," RemoveResourceDeploymentLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) RemoveResourceDeploymentLabels(o *Deployment, ctx context.Context, exec boil.ContextExecutor, related ...*DeploymentLabel) error\n")),(0,o.kt)("p",null,"RemoveResourceDeploymentLabels relationships from objects passed in","."," Removes related items from R",".","ResourceDeploymentLabels ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-deploymentquery-resourcedeploymentannotations"},"func ","(","deploymentQuery",")"," ResourceDeploymentAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) ResourceDeploymentAnnotations(o *Deployment, mods ...qm.QueryMod) deploymentAnnotationQuery\n")),(0,o.kt)("p",null,"ResourceDeploymentAnnotations retrieves all the deployment","_","annotation's DeploymentAnnotations with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-deploymentquery-resourcedeploymentlabels"},"func ","(","deploymentQuery",")"," ResourceDeploymentLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) ResourceDeploymentLabels(o *Deployment, mods ...qm.QueryMod) deploymentLabelQuery\n")),(0,o.kt)("p",null,"ResourceDeploymentLabels retrieves all the deployment","_","label's DeploymentLabels with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-deploymentquery-setapp"},"func ","(","deploymentQuery",")"," SetApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) SetApp(o *Deployment, ctx context.Context, exec boil.ContextExecutor, insert bool, related *App) error\n")),(0,o.kt)("p",null,"SetApp of the deployment to the related item","."," Sets o",".","R",".","App to related","."," Adds o to related",".","R",".","Deployments","."),(0,o.kt)("h3",{id:"func-deploymentquery-setdeploymentprocesses"},"func ","(","deploymentQuery",")"," SetDeploymentProcesses"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) SetDeploymentProcesses(o *Deployment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DeploymentProcess) error\n")),(0,o.kt)("p",null,"SetDeploymentProcesses removes all previously related items of the deployment replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Deployment's DeploymentProcesses accordingly","."," Replaces o",".","R",".","DeploymentProcesses with related","."," Sets related",".","R",".","Deployment's DeploymentProcesses accordingly","."),(0,o.kt)("h3",{id:"func-deploymentquery-setresourcedeploymentannotations"},"func ","(","deploymentQuery",")"," SetResourceDeploymentAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) SetResourceDeploymentAnnotations(o *Deployment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DeploymentAnnotation) error\n")),(0,o.kt)("p",null,"SetResourceDeploymentAnnotations removes all previously related items of the deployment replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceDeploymentAnnotations accordingly","."," Replaces o",".","R",".","ResourceDeploymentAnnotations with related","."," Sets related",".","R",".","Resource's ResourceDeploymentAnnotations accordingly","."),(0,o.kt)("h3",{id:"func-deploymentquery-setresourcedeploymentlabels"},"func ","(","deploymentQuery",")"," SetResourceDeploymentLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) SetResourceDeploymentLabels(o *Deployment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DeploymentLabel) error\n")),(0,o.kt)("p",null,"SetResourceDeploymentLabels removes all previously related items of the deployment replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceDeploymentLabels accordingly","."," Replaces o",".","R",".","ResourceDeploymentLabels with related","."," Sets related",".","R",".","Resource's ResourceDeploymentLabels accordingly","."),(0,o.kt)("h3",{id:"func-deploymentquery-update"},"func ","(","deploymentQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) Update(o *Deployment, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the Deployment","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-deploymentquery-updateall"},"func ","(","deploymentQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-deploymentquery-updateallslice"},"func ","(","deploymentQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) UpdateAllSlice(o DeploymentSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-deploymentquery-upsert"},"func ","(","deploymentQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q deploymentQuery) Upsert(o *Deployment, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-deploymentr"},"type deploymentR"),(0,o.kt)("p",null,"deploymentR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type deploymentR struct {\n    App                           *App                      `boil:"App" json:"App" toml:"App" yaml:"App"`\n    ResourceDeploymentAnnotations DeploymentAnnotationSlice `boil:"ResourceDeploymentAnnotations" json:"ResourceDeploymentAnnotations" toml:"ResourceDeploymentAnnotations" yaml:"ResourceDeploymentAnnotations"`\n    ResourceDeploymentLabels      DeploymentLabelSlice      `boil:"ResourceDeploymentLabels" json:"ResourceDeploymentLabels" toml:"ResourceDeploymentLabels" yaml:"ResourceDeploymentLabels"`\n    DeploymentProcesses           DeploymentProcessSlice    `boil:"DeploymentProcesses" json:"DeploymentProcesses" toml:"DeploymentProcesses" yaml:"DeploymentProcesses"`\n}\n')),(0,o.kt)("h3",{id:"func-deploymentr-newstruct"},"func ","(","*","deploymentR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*deploymentR) NewStruct() *deploymentR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-domainannotationl"},"type domainAnnotationL"),(0,o.kt)("p",null,"domainAnnotationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type domainAnnotationL struct{}\n")),(0,o.kt)("h3",{id:"func-domainannotationl-loadresource"},"func ","(","domainAnnotationL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (domainAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomainAnnotation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-domainannotationquery"},"type domainAnnotationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type domainAnnotationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-domainannotations"},"func DomainAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func DomainAnnotations(mods ...qm.QueryMod) domainAnnotationQuery\n")),(0,o.kt)("p",null,"DomainAnnotations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-domainannotationquery-all"},"func ","(","domainAnnotationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (DomainAnnotationSlice, error)\n")),(0,o.kt)("p",null,"All returns all DomainAnnotation records from the query","."),(0,o.kt)("h3",{id:"func-domainannotationquery-count"},"func ","(","domainAnnotationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all DomainAnnotation records in the query","."),(0,o.kt)("h3",{id:"func-domainannotationquery-delete"},"func ","(","domainAnnotationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainAnnotationQuery) Delete(o *DomainAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single DomainAnnotation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-domainannotationquery-deleteall"},"func ","(","domainAnnotationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-domainannotationquery-deleteallslice"},"func ","(","domainAnnotationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainAnnotationQuery) DeleteAllSlice(o DomainAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-domainannotationquery-exists"},"func ","(","domainAnnotationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-domainannotationquery-insert"},"func ","(","domainAnnotationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainAnnotationQuery) Insert(o *DomainAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-domainannotationquery-one"},"func ","(","domainAnnotationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DomainAnnotation, error)\n")),(0,o.kt)("p",null,"One returns a single domainAnnotation record from the query","."),(0,o.kt)("h3",{id:"func-domainannotationquery-reload"},"func ","(","domainAnnotationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainAnnotationQuery) Reload(o *DomainAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-domainannotationquery-reloadall"},"func ","(","domainAnnotationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainAnnotationQuery) ReloadAll(o *DomainAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-domainannotationquery-removeresource"},"func ","(","domainAnnotationQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainAnnotationQuery) RemoveResource(o *DomainAnnotation, ctx context.Context, exec boil.ContextExecutor, related *Domain) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-domainannotationquery-resource"},"func ","(","domainAnnotationQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainAnnotationQuery) Resource(o *DomainAnnotation, mods ...qm.QueryMod) domainQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-domainannotationquery-setresource"},"func ","(","domainAnnotationQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainAnnotationQuery) SetResource(o *DomainAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Domain) error\n")),(0,o.kt)("p",null,"SetResource of the domainAnnotation to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceDomainAnnotations","."),(0,o.kt)("h3",{id:"func-domainannotationquery-update"},"func ","(","domainAnnotationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainAnnotationQuery) Update(o *DomainAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the DomainAnnotation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-domainannotationquery-updateall"},"func ","(","domainAnnotationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-domainannotationquery-updateallslice"},"func ","(","domainAnnotationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainAnnotationQuery) UpdateAllSlice(o DomainAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-domainannotationquery-upsert"},"func ","(","domainAnnotationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainAnnotationQuery) Upsert(o *DomainAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-domainannotationr"},"type domainAnnotationR"),(0,o.kt)("p",null,"domainAnnotationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type domainAnnotationR struct {\n    Resource *Domain `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-domainannotationr-newstruct"},"func ","(","*","domainAnnotationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*domainAnnotationR) NewStruct() *domainAnnotationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-domainl"},"type domainL"),(0,o.kt)("p",null,"domainL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type domainL struct{}\n")),(0,o.kt)("h3",{id:"func-domainl-loadowningorganization"},"func ","(","domainL",")"," LoadOwningOrganization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (domainL) LoadOwningOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomain interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadOwningOrganization allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-domainl-loadprivatedomainorganizationsprivatedomains"},"func ","(","domainL",")"," LoadPrivateDomainOrganizationsPrivateDomains"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (domainL) LoadPrivateDomainOrganizationsPrivateDomains(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomain interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadPrivateDomainOrganizationsPrivateDomains allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-domainl-loadresourcedomainannotations"},"func ","(","domainL",")"," LoadResourceDomainAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (domainL) LoadResourceDomainAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomain interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceDomainAnnotations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-domainl-loadresourcedomainlabels"},"func ","(","domainL",")"," LoadResourceDomainLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (domainL) LoadResourceDomainLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomain interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceDomainLabels allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-domainl-loadroutes"},"func ","(","domainL",")"," LoadRoutes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (domainL) LoadRoutes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomain interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadRoutes allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-domainlabell"},"type domainLabelL"),(0,o.kt)("p",null,"domainLabelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type domainLabelL struct{}\n")),(0,o.kt)("h3",{id:"func-domainlabell-loadresource"},"func ","(","domainLabelL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (domainLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomainLabel interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-domainlabelquery"},"type domainLabelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type domainLabelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-domainlabels"},"func DomainLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func DomainLabels(mods ...qm.QueryMod) domainLabelQuery\n")),(0,o.kt)("p",null,"DomainLabels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-domainlabelquery-all"},"func ","(","domainLabelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (DomainLabelSlice, error)\n")),(0,o.kt)("p",null,"All returns all DomainLabel records from the query","."),(0,o.kt)("h3",{id:"func-domainlabelquery-count"},"func ","(","domainLabelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all DomainLabel records in the query","."),(0,o.kt)("h3",{id:"func-domainlabelquery-delete"},"func ","(","domainLabelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainLabelQuery) Delete(o *DomainLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single DomainLabel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-domainlabelquery-deleteall"},"func ","(","domainLabelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-domainlabelquery-deleteallslice"},"func ","(","domainLabelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainLabelQuery) DeleteAllSlice(o DomainLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-domainlabelquery-exists"},"func ","(","domainLabelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-domainlabelquery-insert"},"func ","(","domainLabelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainLabelQuery) Insert(o *DomainLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-domainlabelquery-one"},"func ","(","domainLabelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DomainLabel, error)\n")),(0,o.kt)("p",null,"One returns a single domainLabel record from the query","."),(0,o.kt)("h3",{id:"func-domainlabelquery-reload"},"func ","(","domainLabelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainLabelQuery) Reload(o *DomainLabel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-domainlabelquery-reloadall"},"func ","(","domainLabelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainLabelQuery) ReloadAll(o *DomainLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-domainlabelquery-removeresource"},"func ","(","domainLabelQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainLabelQuery) RemoveResource(o *DomainLabel, ctx context.Context, exec boil.ContextExecutor, related *Domain) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-domainlabelquery-resource"},"func ","(","domainLabelQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainLabelQuery) Resource(o *DomainLabel, mods ...qm.QueryMod) domainQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-domainlabelquery-setresource"},"func ","(","domainLabelQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainLabelQuery) SetResource(o *DomainLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Domain) error\n")),(0,o.kt)("p",null,"SetResource of the domainLabel to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceDomainLabels","."),(0,o.kt)("h3",{id:"func-domainlabelquery-update"},"func ","(","domainLabelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainLabelQuery) Update(o *DomainLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the DomainLabel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-domainlabelquery-updateall"},"func ","(","domainLabelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-domainlabelquery-updateallslice"},"func ","(","domainLabelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainLabelQuery) UpdateAllSlice(o DomainLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-domainlabelquery-upsert"},"func ","(","domainLabelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainLabelQuery) Upsert(o *DomainLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-domainlabelr"},"type domainLabelR"),(0,o.kt)("p",null,"domainLabelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type domainLabelR struct {\n    Resource *Domain `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-domainlabelr-newstruct"},"func ","(","*","domainLabelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*domainLabelR) NewStruct() *domainLabelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-domainquery"},"type domainQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type domainQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-domains"},"func Domains"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func Domains(mods ...qm.QueryMod) domainQuery\n")),(0,o.kt)("p",null,"Domains retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-domainquery-addprivatedomainorganizationsprivatedomains"},"func ","(","domainQuery",")"," AddPrivateDomainOrganizationsPrivateDomains"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) AddPrivateDomainOrganizationsPrivateDomains(o *Domain, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationsPrivateDomain) error\n")),(0,o.kt)("p",null,"AddPrivateDomainOrganizationsPrivateDomains adds the given related objects to the existing relationships of the domain\\, optionally inserting them as new records","."," Appends related to o",".","R",".","PrivateDomainOrganizationsPrivateDomains","."," Sets related",".","R",".","PrivateDomain appropriately","."),(0,o.kt)("h3",{id:"func-domainquery-addresourcedomainannotations"},"func ","(","domainQuery",")"," AddResourceDomainAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) AddResourceDomainAnnotations(o *Domain, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DomainAnnotation) error\n")),(0,o.kt)("p",null,"AddResourceDomainAnnotations adds the given related objects to the existing relationships of the domain\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceDomainAnnotations","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-domainquery-addresourcedomainlabels"},"func ","(","domainQuery",")"," AddResourceDomainLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) AddResourceDomainLabels(o *Domain, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DomainLabel) error\n")),(0,o.kt)("p",null,"AddResourceDomainLabels adds the given related objects to the existing relationships of the domain\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceDomainLabels","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-domainquery-addroutes"},"func ","(","domainQuery",")"," AddRoutes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) AddRoutes(o *Domain, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Route) error\n")),(0,o.kt)("p",null,"AddRoutes adds the given related objects to the existing relationships of the domain\\, optionally inserting them as new records","."," Appends related to o",".","R",".","Routes","."," Sets related",".","R",".","Domain appropriately","."),(0,o.kt)("h3",{id:"func-domainquery-all"},"func ","(","domainQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) All(ctx context.Context, exec boil.ContextExecutor) (DomainSlice, error)\n")),(0,o.kt)("p",null,"All returns all Domain records from the query","."),(0,o.kt)("h3",{id:"func-domainquery-count"},"func ","(","domainQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all Domain records in the query","."),(0,o.kt)("h3",{id:"func-domainquery-delete"},"func ","(","domainQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) Delete(o *Domain, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single Domain record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-domainquery-deleteall"},"func ","(","domainQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-domainquery-deleteallslice"},"func ","(","domainQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) DeleteAllSlice(o DomainSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-domainquery-exists"},"func ","(","domainQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-domainquery-insert"},"func ","(","domainQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) Insert(o *Domain, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-domainquery-one"},"func ","(","domainQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Domain, error)\n")),(0,o.kt)("p",null,"One returns a single domain record from the query","."),(0,o.kt)("h3",{id:"func-domainquery-owningorganization"},"func ","(","domainQuery",")"," OwningOrganization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) OwningOrganization(o *Domain, mods ...qm.QueryMod) organizationQuery\n")),(0,o.kt)("p",null,"OwningOrganization pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-domainquery-privatedomainorganizationsprivatedomains"},"func ","(","domainQuery",")"," PrivateDomainOrganizationsPrivateDomains"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) PrivateDomainOrganizationsPrivateDomains(o *Domain, mods ...qm.QueryMod) organizationsPrivateDomainQuery\n")),(0,o.kt)("p",null,"PrivateDomainOrganizationsPrivateDomains retrieves all the organizations","_","private","_","domain's OrganizationsPrivateDomains with an executor via private","_","domain","_","id column","."),(0,o.kt)("h3",{id:"func-domainquery-reload"},"func ","(","domainQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) Reload(o *Domain, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-domainquery-reloadall"},"func ","(","domainQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) ReloadAll(o *DomainSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-domainquery-removeowningorganization"},"func ","(","domainQuery",")"," RemoveOwningOrganization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) RemoveOwningOrganization(o *Domain, ctx context.Context, exec boil.ContextExecutor, related *Organization) error\n")),(0,o.kt)("p",null,"RemoveOwningOrganization relationship","."," Sets o",".","R",".","OwningOrganization to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-domainquery-removeresourcedomainannotations"},"func ","(","domainQuery",")"," RemoveResourceDomainAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) RemoveResourceDomainAnnotations(o *Domain, ctx context.Context, exec boil.ContextExecutor, related ...*DomainAnnotation) error\n")),(0,o.kt)("p",null,"RemoveResourceDomainAnnotations relationships from objects passed in","."," Removes related items from R",".","ResourceDomainAnnotations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-domainquery-removeresourcedomainlabels"},"func ","(","domainQuery",")"," RemoveResourceDomainLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) RemoveResourceDomainLabels(o *Domain, ctx context.Context, exec boil.ContextExecutor, related ...*DomainLabel) error\n")),(0,o.kt)("p",null,"RemoveResourceDomainLabels relationships from objects passed in","."," Removes related items from R",".","ResourceDomainLabels ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-domainquery-resourcedomainannotations"},"func ","(","domainQuery",")"," ResourceDomainAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) ResourceDomainAnnotations(o *Domain, mods ...qm.QueryMod) domainAnnotationQuery\n")),(0,o.kt)("p",null,"ResourceDomainAnnotations retrieves all the domain","_","annotation's DomainAnnotations with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-domainquery-resourcedomainlabels"},"func ","(","domainQuery",")"," ResourceDomainLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) ResourceDomainLabels(o *Domain, mods ...qm.QueryMod) domainLabelQuery\n")),(0,o.kt)("p",null,"ResourceDomainLabels retrieves all the domain","_","label's DomainLabels with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-domainquery-routes"},"func ","(","domainQuery",")"," Routes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) Routes(o *Domain, mods ...qm.QueryMod) routeQuery\n")),(0,o.kt)("p",null,"Routes retrieves all the route's Routes with an executor","."),(0,o.kt)("h3",{id:"func-domainquery-setowningorganization"},"func ","(","domainQuery",")"," SetOwningOrganization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) SetOwningOrganization(o *Domain, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error\n")),(0,o.kt)("p",null,"SetOwningOrganization of the domain to the related item","."," Sets o",".","R",".","OwningOrganization to related","."," Adds o to related",".","R",".","OwningOrganizationDomains","."),(0,o.kt)("h3",{id:"func-domainquery-setresourcedomainannotations"},"func ","(","domainQuery",")"," SetResourceDomainAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) SetResourceDomainAnnotations(o *Domain, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DomainAnnotation) error\n")),(0,o.kt)("p",null,"SetResourceDomainAnnotations removes all previously related items of the domain replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceDomainAnnotations accordingly","."," Replaces o",".","R",".","ResourceDomainAnnotations with related","."," Sets related",".","R",".","Resource's ResourceDomainAnnotations accordingly","."),(0,o.kt)("h3",{id:"func-domainquery-setresourcedomainlabels"},"func ","(","domainQuery",")"," SetResourceDomainLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) SetResourceDomainLabels(o *Domain, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DomainLabel) error\n")),(0,o.kt)("p",null,"SetResourceDomainLabels removes all previously related items of the domain replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceDomainLabels accordingly","."," Replaces o",".","R",".","ResourceDomainLabels with related","."," Sets related",".","R",".","Resource's ResourceDomainLabels accordingly","."),(0,o.kt)("h3",{id:"func-domainquery-update"},"func ","(","domainQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) Update(o *Domain, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the Domain","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-domainquery-updateall"},"func ","(","domainQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-domainquery-updateallslice"},"func ","(","domainQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) UpdateAllSlice(o DomainSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-domainquery-upsert"},"func ","(","domainQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q domainQuery) Upsert(o *Domain, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-domainr"},"type domainR"),(0,o.kt)("p",null,"domainR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type domainR struct {\n    OwningOrganization                       *Organization                   `boil:"OwningOrganization" json:"OwningOrganization" toml:"OwningOrganization" yaml:"OwningOrganization"`\n    ResourceDomainAnnotations                DomainAnnotationSlice           `boil:"ResourceDomainAnnotations" json:"ResourceDomainAnnotations" toml:"ResourceDomainAnnotations" yaml:"ResourceDomainAnnotations"`\n    ResourceDomainLabels                     DomainLabelSlice                `boil:"ResourceDomainLabels" json:"ResourceDomainLabels" toml:"ResourceDomainLabels" yaml:"ResourceDomainLabels"`\n    PrivateDomainOrganizationsPrivateDomains OrganizationsPrivateDomainSlice `boil:"PrivateDomainOrganizationsPrivateDomains" json:"PrivateDomainOrganizationsPrivateDomains" toml:"PrivateDomainOrganizationsPrivateDomains" yaml:"PrivateDomainOrganizationsPrivateDomains"`\n    Routes                                   RouteSlice                      `boil:"Routes" json:"Routes" toml:"Routes" yaml:"Routes"`\n}\n')),(0,o.kt)("h3",{id:"func-domainr-newstruct"},"func ","(","*","domainR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*domainR) NewStruct() *domainR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-dropletannotationl"},"type dropletAnnotationL"),(0,o.kt)("p",null,"dropletAnnotationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type dropletAnnotationL struct{}\n")),(0,o.kt)("h3",{id:"func-dropletannotationl-loadresource"},"func ","(","dropletAnnotationL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (dropletAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDropletAnnotation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-dropletannotationquery"},"type dropletAnnotationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type dropletAnnotationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-dropletannotations"},"func DropletAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func DropletAnnotations(mods ...qm.QueryMod) dropletAnnotationQuery\n")),(0,o.kt)("p",null,"DropletAnnotations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-dropletannotationquery-all"},"func ","(","dropletAnnotationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (DropletAnnotationSlice, error)\n")),(0,o.kt)("p",null,"All returns all DropletAnnotation records from the query","."),(0,o.kt)("h3",{id:"func-dropletannotationquery-count"},"func ","(","dropletAnnotationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all DropletAnnotation records in the query","."),(0,o.kt)("h3",{id:"func-dropletannotationquery-delete"},"func ","(","dropletAnnotationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletAnnotationQuery) Delete(o *DropletAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single DropletAnnotation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-dropletannotationquery-deleteall"},"func ","(","dropletAnnotationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-dropletannotationquery-deleteallslice"},"func ","(","dropletAnnotationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletAnnotationQuery) DeleteAllSlice(o DropletAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-dropletannotationquery-exists"},"func ","(","dropletAnnotationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-dropletannotationquery-insert"},"func ","(","dropletAnnotationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletAnnotationQuery) Insert(o *DropletAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-dropletannotationquery-one"},"func ","(","dropletAnnotationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DropletAnnotation, error)\n")),(0,o.kt)("p",null,"One returns a single dropletAnnotation record from the query","."),(0,o.kt)("h3",{id:"func-dropletannotationquery-reload"},"func ","(","dropletAnnotationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletAnnotationQuery) Reload(o *DropletAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-dropletannotationquery-reloadall"},"func ","(","dropletAnnotationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletAnnotationQuery) ReloadAll(o *DropletAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-dropletannotationquery-removeresource"},"func ","(","dropletAnnotationQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletAnnotationQuery) RemoveResource(o *DropletAnnotation, ctx context.Context, exec boil.ContextExecutor, related *Droplet) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-dropletannotationquery-resource"},"func ","(","dropletAnnotationQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletAnnotationQuery) Resource(o *DropletAnnotation, mods ...qm.QueryMod) dropletQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-dropletannotationquery-setresource"},"func ","(","dropletAnnotationQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletAnnotationQuery) SetResource(o *DropletAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Droplet) error\n")),(0,o.kt)("p",null,"SetResource of the dropletAnnotation to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceDropletAnnotations","."),(0,o.kt)("h3",{id:"func-dropletannotationquery-update"},"func ","(","dropletAnnotationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletAnnotationQuery) Update(o *DropletAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the DropletAnnotation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-dropletannotationquery-updateall"},"func ","(","dropletAnnotationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-dropletannotationquery-updateallslice"},"func ","(","dropletAnnotationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletAnnotationQuery) UpdateAllSlice(o DropletAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-dropletannotationquery-upsert"},"func ","(","dropletAnnotationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletAnnotationQuery) Upsert(o *DropletAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-dropletannotationr"},"type dropletAnnotationR"),(0,o.kt)("p",null,"dropletAnnotationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type dropletAnnotationR struct {\n    Resource *Droplet `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-dropletannotationr-newstruct"},"func ","(","*","dropletAnnotationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*dropletAnnotationR) NewStruct() *dropletAnnotationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-dropletl"},"type dropletL"),(0,o.kt)("p",null,"dropletL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type dropletL struct{}\n")),(0,o.kt)("h3",{id:"func-dropletl-loadapp"},"func ","(","dropletL",")"," LoadApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (dropletL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDroplet interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadApp allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-dropletl-loadresourcedropletannotations"},"func ","(","dropletL",")"," LoadResourceDropletAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (dropletL) LoadResourceDropletAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDroplet interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceDropletAnnotations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-dropletl-loadresourcedropletlabels"},"func ","(","dropletL",")"," LoadResourceDropletLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (dropletL) LoadResourceDropletLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDroplet interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceDropletLabels allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-dropletlabell"},"type dropletLabelL"),(0,o.kt)("p",null,"dropletLabelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type dropletLabelL struct{}\n")),(0,o.kt)("h3",{id:"func-dropletlabell-loadresource"},"func ","(","dropletLabelL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (dropletLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDropletLabel interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-dropletlabelquery"},"type dropletLabelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type dropletLabelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-dropletlabels"},"func DropletLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func DropletLabels(mods ...qm.QueryMod) dropletLabelQuery\n")),(0,o.kt)("p",null,"DropletLabels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-dropletlabelquery-all"},"func ","(","dropletLabelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (DropletLabelSlice, error)\n")),(0,o.kt)("p",null,"All returns all DropletLabel records from the query","."),(0,o.kt)("h3",{id:"func-dropletlabelquery-count"},"func ","(","dropletLabelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all DropletLabel records in the query","."),(0,o.kt)("h3",{id:"func-dropletlabelquery-delete"},"func ","(","dropletLabelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletLabelQuery) Delete(o *DropletLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single DropletLabel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-dropletlabelquery-deleteall"},"func ","(","dropletLabelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-dropletlabelquery-deleteallslice"},"func ","(","dropletLabelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletLabelQuery) DeleteAllSlice(o DropletLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-dropletlabelquery-exists"},"func ","(","dropletLabelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-dropletlabelquery-insert"},"func ","(","dropletLabelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletLabelQuery) Insert(o *DropletLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-dropletlabelquery-one"},"func ","(","dropletLabelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DropletLabel, error)\n")),(0,o.kt)("p",null,"One returns a single dropletLabel record from the query","."),(0,o.kt)("h3",{id:"func-dropletlabelquery-reload"},"func ","(","dropletLabelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletLabelQuery) Reload(o *DropletLabel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-dropletlabelquery-reloadall"},"func ","(","dropletLabelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletLabelQuery) ReloadAll(o *DropletLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-dropletlabelquery-removeresource"},"func ","(","dropletLabelQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletLabelQuery) RemoveResource(o *DropletLabel, ctx context.Context, exec boil.ContextExecutor, related *Droplet) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-dropletlabelquery-resource"},"func ","(","dropletLabelQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletLabelQuery) Resource(o *DropletLabel, mods ...qm.QueryMod) dropletQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-dropletlabelquery-setresource"},"func ","(","dropletLabelQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletLabelQuery) SetResource(o *DropletLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Droplet) error\n")),(0,o.kt)("p",null,"SetResource of the dropletLabel to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceDropletLabels","."),(0,o.kt)("h3",{id:"func-dropletlabelquery-update"},"func ","(","dropletLabelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletLabelQuery) Update(o *DropletLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the DropletLabel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-dropletlabelquery-updateall"},"func ","(","dropletLabelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-dropletlabelquery-updateallslice"},"func ","(","dropletLabelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletLabelQuery) UpdateAllSlice(o DropletLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-dropletlabelquery-upsert"},"func ","(","dropletLabelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletLabelQuery) Upsert(o *DropletLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-dropletlabelr"},"type dropletLabelR"),(0,o.kt)("p",null,"dropletLabelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type dropletLabelR struct {\n    Resource *Droplet `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-dropletlabelr-newstruct"},"func ","(","*","dropletLabelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*dropletLabelR) NewStruct() *dropletLabelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-dropletquery"},"type dropletQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type dropletQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-droplets"},"func Droplets"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func Droplets(mods ...qm.QueryMod) dropletQuery\n")),(0,o.kt)("p",null,"Droplets retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-dropletquery-addresourcedropletannotations"},"func ","(","dropletQuery",")"," AddResourceDropletAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) AddResourceDropletAnnotations(o *Droplet, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DropletAnnotation) error\n")),(0,o.kt)("p",null,"AddResourceDropletAnnotations adds the given related objects to the existing relationships of the droplet\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceDropletAnnotations","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-dropletquery-addresourcedropletlabels"},"func ","(","dropletQuery",")"," AddResourceDropletLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) AddResourceDropletLabels(o *Droplet, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DropletLabel) error\n")),(0,o.kt)("p",null,"AddResourceDropletLabels adds the given related objects to the existing relationships of the droplet\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceDropletLabels","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-dropletquery-all"},"func ","(","dropletQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) All(ctx context.Context, exec boil.ContextExecutor) (DropletSlice, error)\n")),(0,o.kt)("p",null,"All returns all Droplet records from the query","."),(0,o.kt)("h3",{id:"func-dropletquery-app"},"func ","(","dropletQuery",")"," App"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) App(o *Droplet, mods ...qm.QueryMod) appQuery\n")),(0,o.kt)("p",null,"App pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-dropletquery-count"},"func ","(","dropletQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all Droplet records in the query","."),(0,o.kt)("h3",{id:"func-dropletquery-delete"},"func ","(","dropletQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) Delete(o *Droplet, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single Droplet record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-dropletquery-deleteall"},"func ","(","dropletQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-dropletquery-deleteallslice"},"func ","(","dropletQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) DeleteAllSlice(o DropletSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-dropletquery-exists"},"func ","(","dropletQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-dropletquery-insert"},"func ","(","dropletQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) Insert(o *Droplet, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-dropletquery-one"},"func ","(","dropletQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Droplet, error)\n")),(0,o.kt)("p",null,"One returns a single droplet record from the query","."),(0,o.kt)("h3",{id:"func-dropletquery-reload"},"func ","(","dropletQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) Reload(o *Droplet, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-dropletquery-reloadall"},"func ","(","dropletQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) ReloadAll(o *DropletSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-dropletquery-removeapp"},"func ","(","dropletQuery",")"," RemoveApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) RemoveApp(o *Droplet, ctx context.Context, exec boil.ContextExecutor, related *App) error\n")),(0,o.kt)("p",null,"RemoveApp relationship","."," Sets o",".","R",".","App to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-dropletquery-removeresourcedropletannotations"},"func ","(","dropletQuery",")"," RemoveResourceDropletAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) RemoveResourceDropletAnnotations(o *Droplet, ctx context.Context, exec boil.ContextExecutor, related ...*DropletAnnotation) error\n")),(0,o.kt)("p",null,"RemoveResourceDropletAnnotations relationships from objects passed in","."," Removes related items from R",".","ResourceDropletAnnotations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-dropletquery-removeresourcedropletlabels"},"func ","(","dropletQuery",")"," RemoveResourceDropletLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) RemoveResourceDropletLabels(o *Droplet, ctx context.Context, exec boil.ContextExecutor, related ...*DropletLabel) error\n")),(0,o.kt)("p",null,"RemoveResourceDropletLabels relationships from objects passed in","."," Removes related items from R",".","ResourceDropletLabels ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-dropletquery-resourcedropletannotations"},"func ","(","dropletQuery",")"," ResourceDropletAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) ResourceDropletAnnotations(o *Droplet, mods ...qm.QueryMod) dropletAnnotationQuery\n")),(0,o.kt)("p",null,"ResourceDropletAnnotations retrieves all the droplet","_","annotation's DropletAnnotations with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-dropletquery-resourcedropletlabels"},"func ","(","dropletQuery",")"," ResourceDropletLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) ResourceDropletLabels(o *Droplet, mods ...qm.QueryMod) dropletLabelQuery\n")),(0,o.kt)("p",null,"ResourceDropletLabels retrieves all the droplet","_","label's DropletLabels with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-dropletquery-setapp"},"func ","(","dropletQuery",")"," SetApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) SetApp(o *Droplet, ctx context.Context, exec boil.ContextExecutor, insert bool, related *App) error\n")),(0,o.kt)("p",null,"SetApp of the droplet to the related item","."," Sets o",".","R",".","App to related","."," Adds o to related",".","R",".","Droplets","."),(0,o.kt)("h3",{id:"func-dropletquery-setresourcedropletannotations"},"func ","(","dropletQuery",")"," SetResourceDropletAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) SetResourceDropletAnnotations(o *Droplet, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DropletAnnotation) error\n")),(0,o.kt)("p",null,"SetResourceDropletAnnotations removes all previously related items of the droplet replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceDropletAnnotations accordingly","."," Replaces o",".","R",".","ResourceDropletAnnotations with related","."," Sets related",".","R",".","Resource's ResourceDropletAnnotations accordingly","."),(0,o.kt)("h3",{id:"func-dropletquery-setresourcedropletlabels"},"func ","(","dropletQuery",")"," SetResourceDropletLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) SetResourceDropletLabels(o *Droplet, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DropletLabel) error\n")),(0,o.kt)("p",null,"SetResourceDropletLabels removes all previously related items of the droplet replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceDropletLabels accordingly","."," Replaces o",".","R",".","ResourceDropletLabels with related","."," Sets related",".","R",".","Resource's ResourceDropletLabels accordingly","."),(0,o.kt)("h3",{id:"func-dropletquery-update"},"func ","(","dropletQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) Update(o *Droplet, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the Droplet","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-dropletquery-updateall"},"func ","(","dropletQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-dropletquery-updateallslice"},"func ","(","dropletQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) UpdateAllSlice(o DropletSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-dropletquery-upsert"},"func ","(","dropletQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q dropletQuery) Upsert(o *Droplet, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-dropletr"},"type dropletR"),(0,o.kt)("p",null,"dropletR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type dropletR struct {\n    App                        *App                   `boil:"App" json:"App" toml:"App" yaml:"App"`\n    ResourceDropletAnnotations DropletAnnotationSlice `boil:"ResourceDropletAnnotations" json:"ResourceDropletAnnotations" toml:"ResourceDropletAnnotations" yaml:"ResourceDropletAnnotations"`\n    ResourceDropletLabels      DropletLabelSlice      `boil:"ResourceDropletLabels" json:"ResourceDropletLabels" toml:"ResourceDropletLabels" yaml:"ResourceDropletLabels"`\n}\n')),(0,o.kt)("h3",{id:"func-dropletr-newstruct"},"func ","(","*","dropletR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*dropletR) NewStruct() *dropletR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-encryptionkeysentinell"},"type encryptionKeySentinelL"),(0,o.kt)("p",null,"encryptionKeySentinelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type encryptionKeySentinelL struct{}\n")),(0,o.kt)("h2",{id:"type-encryptionkeysentinelquery"},"type encryptionKeySentinelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type encryptionKeySentinelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-encryptionkeysentinels"},"func EncryptionKeySentinels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func EncryptionKeySentinels(mods ...qm.QueryMod) encryptionKeySentinelQuery\n")),(0,o.kt)("p",null,"EncryptionKeySentinels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-encryptionkeysentinelquery-all"},"func ","(","encryptionKeySentinelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q encryptionKeySentinelQuery) All(ctx context.Context, exec boil.ContextExecutor) (EncryptionKeySentinelSlice, error)\n")),(0,o.kt)("p",null,"All returns all EncryptionKeySentinel records from the query","."),(0,o.kt)("h3",{id:"func-encryptionkeysentinelquery-count"},"func ","(","encryptionKeySentinelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q encryptionKeySentinelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all EncryptionKeySentinel records in the query","."),(0,o.kt)("h3",{id:"func-encryptionkeysentinelquery-delete"},"func ","(","encryptionKeySentinelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q encryptionKeySentinelQuery) Delete(o *EncryptionKeySentinel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single EncryptionKeySentinel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-encryptionkeysentinelquery-deleteall"},"func ","(","encryptionKeySentinelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q encryptionKeySentinelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-encryptionkeysentinelquery-deleteallslice"},"func ","(","encryptionKeySentinelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q encryptionKeySentinelQuery) DeleteAllSlice(o EncryptionKeySentinelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-encryptionkeysentinelquery-exists"},"func ","(","encryptionKeySentinelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q encryptionKeySentinelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-encryptionkeysentinelquery-insert"},"func ","(","encryptionKeySentinelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q encryptionKeySentinelQuery) Insert(o *EncryptionKeySentinel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-encryptionkeysentinelquery-one"},"func ","(","encryptionKeySentinelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q encryptionKeySentinelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EncryptionKeySentinel, error)\n")),(0,o.kt)("p",null,"One returns a single encryptionKeySentinel record from the query","."),(0,o.kt)("h3",{id:"func-encryptionkeysentinelquery-reload"},"func ","(","encryptionKeySentinelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q encryptionKeySentinelQuery) Reload(o *EncryptionKeySentinel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-encryptionkeysentinelquery-reloadall"},"func ","(","encryptionKeySentinelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q encryptionKeySentinelQuery) ReloadAll(o *EncryptionKeySentinelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-encryptionkeysentinelquery-update"},"func ","(","encryptionKeySentinelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q encryptionKeySentinelQuery) Update(o *EncryptionKeySentinel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the EncryptionKeySentinel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-encryptionkeysentinelquery-updateall"},"func ","(","encryptionKeySentinelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q encryptionKeySentinelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-encryptionkeysentinelquery-updateallslice"},"func ","(","encryptionKeySentinelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q encryptionKeySentinelQuery) UpdateAllSlice(o EncryptionKeySentinelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-encryptionkeysentinelquery-upsert"},"func ","(","encryptionKeySentinelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q encryptionKeySentinelQuery) Upsert(o *EncryptionKeySentinel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-encryptionkeysentinelr"},"type encryptionKeySentinelR"),(0,o.kt)("p",null,"encryptionKeySentinelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type encryptionKeySentinelR struct {\n}\n")),(0,o.kt)("h3",{id:"func-encryptionkeysentinelr-newstruct"},"func ","(","*","encryptionKeySentinelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*encryptionKeySentinelR) NewStruct() *encryptionKeySentinelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-envgroupl"},"type envGroupL"),(0,o.kt)("p",null,"envGroupL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type envGroupL struct{}\n")),(0,o.kt)("h2",{id:"type-envgroupquery"},"type envGroupQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type envGroupQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-envgroups"},"func EnvGroups"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func EnvGroups(mods ...qm.QueryMod) envGroupQuery\n")),(0,o.kt)("p",null,"EnvGroups retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-envgroupquery-all"},"func ","(","envGroupQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q envGroupQuery) All(ctx context.Context, exec boil.ContextExecutor) (EnvGroupSlice, error)\n")),(0,o.kt)("p",null,"All returns all EnvGroup records from the query","."),(0,o.kt)("h3",{id:"func-envgroupquery-count"},"func ","(","envGroupQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q envGroupQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all EnvGroup records in the query","."),(0,o.kt)("h3",{id:"func-envgroupquery-delete"},"func ","(","envGroupQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q envGroupQuery) Delete(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single EnvGroup record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-envgroupquery-deleteall"},"func ","(","envGroupQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q envGroupQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-envgroupquery-deleteallslice"},"func ","(","envGroupQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q envGroupQuery) DeleteAllSlice(o EnvGroupSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-envgroupquery-exists"},"func ","(","envGroupQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q envGroupQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-envgroupquery-insert"},"func ","(","envGroupQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q envGroupQuery) Insert(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-envgroupquery-one"},"func ","(","envGroupQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q envGroupQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EnvGroup, error)\n")),(0,o.kt)("p",null,"One returns a single envGroup record from the query","."),(0,o.kt)("h3",{id:"func-envgroupquery-reload"},"func ","(","envGroupQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q envGroupQuery) Reload(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-envgroupquery-reloadall"},"func ","(","envGroupQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q envGroupQuery) ReloadAll(o *EnvGroupSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-envgroupquery-update"},"func ","(","envGroupQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q envGroupQuery) Update(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the EnvGroup","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-envgroupquery-updateall"},"func ","(","envGroupQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q envGroupQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-envgroupquery-updateallslice"},"func ","(","envGroupQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q envGroupQuery) UpdateAllSlice(o EnvGroupSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-envgroupquery-upsert"},"func ","(","envGroupQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q envGroupQuery) Upsert(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-envgroupr"},"type envGroupR"),(0,o.kt)("p",null,"envGroupR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type envGroupR struct {\n}\n")),(0,o.kt)("h3",{id:"func-envgroupr-newstruct"},"func ","(","*","envGroupR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*envGroupR) NewStruct() *envGroupR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-eventl"},"type eventL"),(0,o.kt)("p",null,"eventL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type eventL struct{}\n")),(0,o.kt)("h2",{id:"type-eventquery"},"type eventQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type eventQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-events"},"func Events"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func Events(mods ...qm.QueryMod) eventQuery\n")),(0,o.kt)("p",null,"Events retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-eventquery-all"},"func ","(","eventQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q eventQuery) All(ctx context.Context, exec boil.ContextExecutor) (EventSlice, error)\n")),(0,o.kt)("p",null,"All returns all Event records from the query","."),(0,o.kt)("h3",{id:"func-eventquery-count"},"func ","(","eventQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q eventQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all Event records in the query","."),(0,o.kt)("h3",{id:"func-eventquery-delete"},"func ","(","eventQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q eventQuery) Delete(o *Event, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single Event record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-eventquery-deleteall"},"func ","(","eventQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q eventQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-eventquery-deleteallslice"},"func ","(","eventQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q eventQuery) DeleteAllSlice(o EventSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-eventquery-exists"},"func ","(","eventQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q eventQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-eventquery-insert"},"func ","(","eventQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q eventQuery) Insert(o *Event, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-eventquery-one"},"func ","(","eventQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q eventQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Event, error)\n")),(0,o.kt)("p",null,"One returns a single event record from the query","."),(0,o.kt)("h3",{id:"func-eventquery-reload"},"func ","(","eventQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q eventQuery) Reload(o *Event, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-eventquery-reloadall"},"func ","(","eventQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q eventQuery) ReloadAll(o *EventSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-eventquery-update"},"func ","(","eventQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q eventQuery) Update(o *Event, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the Event","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-eventquery-updateall"},"func ","(","eventQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q eventQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-eventquery-updateallslice"},"func ","(","eventQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q eventQuery) UpdateAllSlice(o EventSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-eventquery-upsert"},"func ","(","eventQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q eventQuery) Upsert(o *Event, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-eventr"},"type eventR"),(0,o.kt)("p",null,"eventR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type eventR struct {\n}\n")),(0,o.kt)("h3",{id:"func-eventr-newstruct"},"func ","(","*","eventR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*eventR) NewStruct() *eventR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-featureflagl"},"type featureFlagL"),(0,o.kt)("p",null,"featureFlagL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type featureFlagL struct{}\n")),(0,o.kt)("h2",{id:"type-featureflagquery"},"type featureFlagQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type featureFlagQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-featureflags"},"func FeatureFlags"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FeatureFlags(mods ...qm.QueryMod) featureFlagQuery\n")),(0,o.kt)("p",null,"FeatureFlags retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-featureflagquery-all"},"func ","(","featureFlagQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q featureFlagQuery) All(ctx context.Context, exec boil.ContextExecutor) (FeatureFlagSlice, error)\n")),(0,o.kt)("p",null,"All returns all FeatureFlag records from the query","."),(0,o.kt)("h3",{id:"func-featureflagquery-count"},"func ","(","featureFlagQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q featureFlagQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all FeatureFlag records in the query","."),(0,o.kt)("h3",{id:"func-featureflagquery-delete"},"func ","(","featureFlagQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q featureFlagQuery) Delete(o *FeatureFlag, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single FeatureFlag record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-featureflagquery-deleteall"},"func ","(","featureFlagQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q featureFlagQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-featureflagquery-deleteallslice"},"func ","(","featureFlagQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q featureFlagQuery) DeleteAllSlice(o FeatureFlagSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-featureflagquery-exists"},"func ","(","featureFlagQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q featureFlagQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-featureflagquery-insert"},"func ","(","featureFlagQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q featureFlagQuery) Insert(o *FeatureFlag, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-featureflagquery-one"},"func ","(","featureFlagQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q featureFlagQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FeatureFlag, error)\n")),(0,o.kt)("p",null,"One returns a single featureFlag record from the query","."),(0,o.kt)("h3",{id:"func-featureflagquery-reload"},"func ","(","featureFlagQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q featureFlagQuery) Reload(o *FeatureFlag, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-featureflagquery-reloadall"},"func ","(","featureFlagQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q featureFlagQuery) ReloadAll(o *FeatureFlagSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-featureflagquery-update"},"func ","(","featureFlagQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q featureFlagQuery) Update(o *FeatureFlag, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the FeatureFlag","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-featureflagquery-updateall"},"func ","(","featureFlagQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q featureFlagQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-featureflagquery-updateallslice"},"func ","(","featureFlagQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q featureFlagQuery) UpdateAllSlice(o FeatureFlagSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-featureflagquery-upsert"},"func ","(","featureFlagQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q featureFlagQuery) Upsert(o *FeatureFlag, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-featureflagr"},"type featureFlagR"),(0,o.kt)("p",null,"featureFlagR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type featureFlagR struct {\n}\n")),(0,o.kt)("h3",{id:"func-featureflagr-newstruct"},"func ","(","*","featureFlagR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*featureFlagR) NewStruct() *featureFlagR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-insertcache"},"type insertCache"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type insertCache struct {\n    query        string\n    retQuery     string\n    valueMapping []uint64\n    retMapping   []uint64\n}\n")),(0,o.kt)("h2",{id:"type-isolationsegmentannotationl"},"type isolationSegmentAnnotationL"),(0,o.kt)("p",null,"isolationSegmentAnnotationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type isolationSegmentAnnotationL struct{}\n")),(0,o.kt)("h3",{id:"func-isolationsegmentannotationl-loadresource"},"func ","(","isolationSegmentAnnotationL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (isolationSegmentAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIsolationSegmentAnnotation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-isolationsegmentannotationquery"},"type isolationSegmentAnnotationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type isolationSegmentAnnotationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-isolationsegmentannotations"},"func IsolationSegmentAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func IsolationSegmentAnnotations(mods ...qm.QueryMod) isolationSegmentAnnotationQuery\n")),(0,o.kt)("p",null,"IsolationSegmentAnnotations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-isolationsegmentannotationquery-all"},"func ","(","isolationSegmentAnnotationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (IsolationSegmentAnnotationSlice, error)\n")),(0,o.kt)("p",null,"All returns all IsolationSegmentAnnotation records from the query","."),(0,o.kt)("h3",{id:"func-isolationsegmentannotationquery-count"},"func ","(","isolationSegmentAnnotationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all IsolationSegmentAnnotation records in the query","."),(0,o.kt)("h3",{id:"func-isolationsegmentannotationquery-delete"},"func ","(","isolationSegmentAnnotationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentAnnotationQuery) Delete(o *IsolationSegmentAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single IsolationSegmentAnnotation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-isolationsegmentannotationquery-deleteall"},"func ","(","isolationSegmentAnnotationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-isolationsegmentannotationquery-deleteallslice"},"func ","(","isolationSegmentAnnotationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentAnnotationQuery) DeleteAllSlice(o IsolationSegmentAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-isolationsegmentannotationquery-exists"},"func ","(","isolationSegmentAnnotationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-isolationsegmentannotationquery-insert"},"func ","(","isolationSegmentAnnotationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentAnnotationQuery) Insert(o *IsolationSegmentAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-isolationsegmentannotationquery-one"},"func ","(","isolationSegmentAnnotationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*IsolationSegmentAnnotation, error)\n")),(0,o.kt)("p",null,"One returns a single isolationSegmentAnnotation record from the query","."),(0,o.kt)("h3",{id:"func-isolationsegmentannotationquery-reload"},"func ","(","isolationSegmentAnnotationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentAnnotationQuery) Reload(o *IsolationSegmentAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-isolationsegmentannotationquery-reloadall"},"func ","(","isolationSegmentAnnotationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentAnnotationQuery) ReloadAll(o *IsolationSegmentAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-isolationsegmentannotationquery-removeresource"},"func ","(","isolationSegmentAnnotationQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentAnnotationQuery) RemoveResource(o *IsolationSegmentAnnotation, ctx context.Context, exec boil.ContextExecutor, related *IsolationSegment) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-isolationsegmentannotationquery-resource"},"func ","(","isolationSegmentAnnotationQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentAnnotationQuery) Resource(o *IsolationSegmentAnnotation, mods ...qm.QueryMod) isolationSegmentQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-isolationsegmentannotationquery-setresource"},"func ","(","isolationSegmentAnnotationQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentAnnotationQuery) SetResource(o *IsolationSegmentAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *IsolationSegment) error\n")),(0,o.kt)("p",null,"SetResource of the isolationSegmentAnnotation to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceIsolationSegmentAnnotations","."),(0,o.kt)("h3",{id:"func-isolationsegmentannotationquery-update"},"func ","(","isolationSegmentAnnotationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentAnnotationQuery) Update(o *IsolationSegmentAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the IsolationSegmentAnnotation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-isolationsegmentannotationquery-updateall"},"func ","(","isolationSegmentAnnotationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-isolationsegmentannotationquery-updateallslice"},"func ","(","isolationSegmentAnnotationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentAnnotationQuery) UpdateAllSlice(o IsolationSegmentAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-isolationsegmentannotationquery-upsert"},"func ","(","isolationSegmentAnnotationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentAnnotationQuery) Upsert(o *IsolationSegmentAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-isolationsegmentannotationr"},"type isolationSegmentAnnotationR"),(0,o.kt)("p",null,"isolationSegmentAnnotationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type isolationSegmentAnnotationR struct {\n    Resource *IsolationSegment `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-isolationsegmentannotationr-newstruct"},"func ","(","*","isolationSegmentAnnotationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*isolationSegmentAnnotationR) NewStruct() *isolationSegmentAnnotationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-isolationsegmentl"},"type isolationSegmentL"),(0,o.kt)("p",null,"isolationSegmentL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type isolationSegmentL struct{}\n")),(0,o.kt)("h3",{id:"func-isolationsegmentl-loadorganizations"},"func ","(","isolationSegmentL",")"," LoadOrganizations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (isolationSegmentL) LoadOrganizations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIsolationSegment interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadOrganizations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-isolationsegmentl-loadresourceisolationsegmentannotations"},"func ","(","isolationSegmentL",")"," LoadResourceIsolationSegmentAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (isolationSegmentL) LoadResourceIsolationSegmentAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIsolationSegment interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceIsolationSegmentAnnotations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-isolationsegmentl-loadresourceisolationsegmentlabels"},"func ","(","isolationSegmentL",")"," LoadResourceIsolationSegmentLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (isolationSegmentL) LoadResourceIsolationSegmentLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIsolationSegment interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceIsolationSegmentLabels allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-isolationsegmentl-loadspaces"},"func ","(","isolationSegmentL",")"," LoadSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (isolationSegmentL) LoadSpaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIsolationSegment interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSpaces allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-isolationsegmentlabell"},"type isolationSegmentLabelL"),(0,o.kt)("p",null,"isolationSegmentLabelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type isolationSegmentLabelL struct{}\n")),(0,o.kt)("h3",{id:"func-isolationsegmentlabell-loadresource"},"func ","(","isolationSegmentLabelL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (isolationSegmentLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIsolationSegmentLabel interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-isolationsegmentlabelquery"},"type isolationSegmentLabelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type isolationSegmentLabelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-isolationsegmentlabels"},"func IsolationSegmentLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func IsolationSegmentLabels(mods ...qm.QueryMod) isolationSegmentLabelQuery\n")),(0,o.kt)("p",null,"IsolationSegmentLabels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-isolationsegmentlabelquery-all"},"func ","(","isolationSegmentLabelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (IsolationSegmentLabelSlice, error)\n")),(0,o.kt)("p",null,"All returns all IsolationSegmentLabel records from the query","."),(0,o.kt)("h3",{id:"func-isolationsegmentlabelquery-count"},"func ","(","isolationSegmentLabelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all IsolationSegmentLabel records in the query","."),(0,o.kt)("h3",{id:"func-isolationsegmentlabelquery-delete"},"func ","(","isolationSegmentLabelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentLabelQuery) Delete(o *IsolationSegmentLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single IsolationSegmentLabel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-isolationsegmentlabelquery-deleteall"},"func ","(","isolationSegmentLabelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-isolationsegmentlabelquery-deleteallslice"},"func ","(","isolationSegmentLabelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentLabelQuery) DeleteAllSlice(o IsolationSegmentLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-isolationsegmentlabelquery-exists"},"func ","(","isolationSegmentLabelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-isolationsegmentlabelquery-insert"},"func ","(","isolationSegmentLabelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentLabelQuery) Insert(o *IsolationSegmentLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-isolationsegmentlabelquery-one"},"func ","(","isolationSegmentLabelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*IsolationSegmentLabel, error)\n")),(0,o.kt)("p",null,"One returns a single isolationSegmentLabel record from the query","."),(0,o.kt)("h3",{id:"func-isolationsegmentlabelquery-reload"},"func ","(","isolationSegmentLabelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentLabelQuery) Reload(o *IsolationSegmentLabel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-isolationsegmentlabelquery-reloadall"},"func ","(","isolationSegmentLabelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentLabelQuery) ReloadAll(o *IsolationSegmentLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-isolationsegmentlabelquery-removeresource"},"func ","(","isolationSegmentLabelQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentLabelQuery) RemoveResource(o *IsolationSegmentLabel, ctx context.Context, exec boil.ContextExecutor, related *IsolationSegment) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-isolationsegmentlabelquery-resource"},"func ","(","isolationSegmentLabelQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentLabelQuery) Resource(o *IsolationSegmentLabel, mods ...qm.QueryMod) isolationSegmentQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-isolationsegmentlabelquery-setresource"},"func ","(","isolationSegmentLabelQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentLabelQuery) SetResource(o *IsolationSegmentLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related *IsolationSegment) error\n")),(0,o.kt)("p",null,"SetResource of the isolationSegmentLabel to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceIsolationSegmentLabels","."),(0,o.kt)("h3",{id:"func-isolationsegmentlabelquery-update"},"func ","(","isolationSegmentLabelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentLabelQuery) Update(o *IsolationSegmentLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the IsolationSegmentLabel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-isolationsegmentlabelquery-updateall"},"func ","(","isolationSegmentLabelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-isolationsegmentlabelquery-updateallslice"},"func ","(","isolationSegmentLabelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentLabelQuery) UpdateAllSlice(o IsolationSegmentLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-isolationsegmentlabelquery-upsert"},"func ","(","isolationSegmentLabelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentLabelQuery) Upsert(o *IsolationSegmentLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-isolationsegmentlabelr"},"type isolationSegmentLabelR"),(0,o.kt)("p",null,"isolationSegmentLabelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type isolationSegmentLabelR struct {\n    Resource *IsolationSegment `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-isolationsegmentlabelr-newstruct"},"func ","(","*","isolationSegmentLabelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*isolationSegmentLabelR) NewStruct() *isolationSegmentLabelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-isolationsegmentquery"},"type isolationSegmentQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type isolationSegmentQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-isolationsegments"},"func IsolationSegments"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func IsolationSegments(mods ...qm.QueryMod) isolationSegmentQuery\n")),(0,o.kt)("p",null,"IsolationSegments retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-addorganizations"},"func ","(","isolationSegmentQuery",")"," AddOrganizations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) AddOrganizations(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Organization) error\n")),(0,o.kt)("p",null,"AddOrganizations adds the given related objects to the existing relationships of the isolation","_","segment\\, optionally inserting them as new records","."," Appends related to o",".","R",".","Organizations","."," Sets related",".","R",".","IsolationSegments appropriately","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-addresourceisolationsegmentannotations"},"func ","(","isolationSegmentQuery",")"," AddResourceIsolationSegmentAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) AddResourceIsolationSegmentAnnotations(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IsolationSegmentAnnotation) error\n")),(0,o.kt)("p",null,"AddResourceIsolationSegmentAnnotations adds the given related objects to the existing relationships of the isolation","_","segment\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceIsolationSegmentAnnotations","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-addresourceisolationsegmentlabels"},"func ","(","isolationSegmentQuery",")"," AddResourceIsolationSegmentLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) AddResourceIsolationSegmentLabels(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IsolationSegmentLabel) error\n")),(0,o.kt)("p",null,"AddResourceIsolationSegmentLabels adds the given related objects to the existing relationships of the isolation","_","segment\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceIsolationSegmentLabels","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-addspaces"},"func ","(","isolationSegmentQuery",")"," AddSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) AddSpaces(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Space) error\n")),(0,o.kt)("p",null,"AddSpaces adds the given related objects to the existing relationships of the isolation","_","segment\\, optionally inserting them as new records","."," Appends related to o",".","R",".","Spaces","."," Sets related",".","R",".","IsolationSegment appropriately","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-all"},"func ","(","isolationSegmentQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) All(ctx context.Context, exec boil.ContextExecutor) (IsolationSegmentSlice, error)\n")),(0,o.kt)("p",null,"All returns all IsolationSegment records from the query","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-count"},"func ","(","isolationSegmentQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all IsolationSegment records in the query","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-delete"},"func ","(","isolationSegmentQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) Delete(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single IsolationSegment record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-deleteall"},"func ","(","isolationSegmentQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-deleteallslice"},"func ","(","isolationSegmentQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) DeleteAllSlice(o IsolationSegmentSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-exists"},"func ","(","isolationSegmentQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-insert"},"func ","(","isolationSegmentQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) Insert(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-one"},"func ","(","isolationSegmentQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*IsolationSegment, error)\n")),(0,o.kt)("p",null,"One returns a single isolationSegment record from the query","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-organizations"},"func ","(","isolationSegmentQuery",")"," Organizations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) Organizations(o *IsolationSegment, mods ...qm.QueryMod) organizationQuery\n")),(0,o.kt)("p",null,"Organizations retrieves all the organization's Organizations with an executor","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-reload"},"func ","(","isolationSegmentQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) Reload(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-reloadall"},"func ","(","isolationSegmentQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) ReloadAll(o *IsolationSegmentSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-removeorganizations"},"func ","(","isolationSegmentQuery",")"," RemoveOrganizations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) RemoveOrganizations(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor, related ...*Organization) error\n")),(0,o.kt)("p",null,"RemoveOrganizations relationships from objects passed in","."," Removes related items from R",".","Organizations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","IsolationSegments","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-removeresourceisolationsegmentannotations"},"func ","(","isolationSegmentQuery",")"," RemoveResourceIsolationSegmentAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) RemoveResourceIsolationSegmentAnnotations(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor, related ...*IsolationSegmentAnnotation) error\n")),(0,o.kt)("p",null,"RemoveResourceIsolationSegmentAnnotations relationships from objects passed in","."," Removes related items from R",".","ResourceIsolationSegmentAnnotations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-removeresourceisolationsegmentlabels"},"func ","(","isolationSegmentQuery",")"," RemoveResourceIsolationSegmentLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) RemoveResourceIsolationSegmentLabels(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor, related ...*IsolationSegmentLabel) error\n")),(0,o.kt)("p",null,"RemoveResourceIsolationSegmentLabels relationships from objects passed in","."," Removes related items from R",".","ResourceIsolationSegmentLabels ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-removespaces"},"func ","(","isolationSegmentQuery",")"," RemoveSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) RemoveSpaces(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor, related ...*Space) error\n")),(0,o.kt)("p",null,"RemoveSpaces relationships from objects passed in","."," Removes related items from R",".","Spaces ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","IsolationSegment","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-resourceisolationsegmentannotations"},"func ","(","isolationSegmentQuery",")"," ResourceIsolationSegmentAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) ResourceIsolationSegmentAnnotations(o *IsolationSegment, mods ...qm.QueryMod) isolationSegmentAnnotationQuery\n")),(0,o.kt)("p",null,"ResourceIsolationSegmentAnnotations retrieves all the isolation","_","segment","_","annotation's IsolationSegmentAnnotations with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-resourceisolationsegmentlabels"},"func ","(","isolationSegmentQuery",")"," ResourceIsolationSegmentLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) ResourceIsolationSegmentLabels(o *IsolationSegment, mods ...qm.QueryMod) isolationSegmentLabelQuery\n")),(0,o.kt)("p",null,"ResourceIsolationSegmentLabels retrieves all the isolation","_","segment","_","label's IsolationSegmentLabels with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-setorganizations"},"func ","(","isolationSegmentQuery",")"," SetOrganizations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) SetOrganizations(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Organization) error\n")),(0,o.kt)("p",null,"SetOrganizations removes all previously related items of the isolation","_","segment replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","IsolationSegments's Organizations accordingly","."," Replaces o",".","R",".","Organizations with related","."," Sets related",".","R",".","IsolationSegments's Organizations accordingly","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-setresourceisolationsegmentannotations"},"func ","(","isolationSegmentQuery",")"," SetResourceIsolationSegmentAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) SetResourceIsolationSegmentAnnotations(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IsolationSegmentAnnotation) error\n")),(0,o.kt)("p",null,"SetResourceIsolationSegmentAnnotations removes all previously related items of the isolation","_","segment replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceIsolationSegmentAnnotations accordingly","."," Replaces o",".","R",".","ResourceIsolationSegmentAnnotations with related","."," Sets related",".","R",".","Resource's ResourceIsolationSegmentAnnotations accordingly","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-setresourceisolationsegmentlabels"},"func ","(","isolationSegmentQuery",")"," SetResourceIsolationSegmentLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) SetResourceIsolationSegmentLabels(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IsolationSegmentLabel) error\n")),(0,o.kt)("p",null,"SetResourceIsolationSegmentLabels removes all previously related items of the isolation","_","segment replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceIsolationSegmentLabels accordingly","."," Replaces o",".","R",".","ResourceIsolationSegmentLabels with related","."," Sets related",".","R",".","Resource's ResourceIsolationSegmentLabels accordingly","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-setspaces"},"func ","(","isolationSegmentQuery",")"," SetSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) SetSpaces(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Space) error\n")),(0,o.kt)("p",null,"SetSpaces removes all previously related items of the isolation","_","segment replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","IsolationSegment's Spaces accordingly","."," Replaces o",".","R",".","Spaces with related","."," Sets related",".","R",".","IsolationSegment's Spaces accordingly","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-spaces"},"func ","(","isolationSegmentQuery",")"," Spaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) Spaces(o *IsolationSegment, mods ...qm.QueryMod) spaceQuery\n")),(0,o.kt)("p",null,"Spaces retrieves all the space's Spaces with an executor","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-update"},"func ","(","isolationSegmentQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) Update(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the IsolationSegment","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-updateall"},"func ","(","isolationSegmentQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-updateallslice"},"func ","(","isolationSegmentQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) UpdateAllSlice(o IsolationSegmentSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-isolationsegmentquery-upsert"},"func ","(","isolationSegmentQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q isolationSegmentQuery) Upsert(o *IsolationSegment, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-isolationsegmentr"},"type isolationSegmentR"),(0,o.kt)("p",null,"isolationSegmentR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type isolationSegmentR struct {\n    ResourceIsolationSegmentAnnotations IsolationSegmentAnnotationSlice `boil:"ResourceIsolationSegmentAnnotations" json:"ResourceIsolationSegmentAnnotations" toml:"ResourceIsolationSegmentAnnotations" yaml:"ResourceIsolationSegmentAnnotations"`\n    ResourceIsolationSegmentLabels      IsolationSegmentLabelSlice      `boil:"ResourceIsolationSegmentLabels" json:"ResourceIsolationSegmentLabels" toml:"ResourceIsolationSegmentLabels" yaml:"ResourceIsolationSegmentLabels"`\n    Organizations                       OrganizationSlice               `boil:"Organizations" json:"Organizations" toml:"Organizations" yaml:"Organizations"`\n    Spaces                              SpaceSlice                      `boil:"Spaces" json:"Spaces" toml:"Spaces" yaml:"Spaces"`\n}\n')),(0,o.kt)("h3",{id:"func-isolationsegmentr-newstruct"},"func ","(","*","isolationSegmentR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*isolationSegmentR) NewStruct() *isolationSegmentR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-jobl"},"type jobL"),(0,o.kt)("p",null,"jobL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type jobL struct{}\n")),(0,o.kt)("h3",{id:"func-jobl-loadfkjobjobwarnings"},"func ","(","jobL",")"," LoadFKJobJobWarnings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (jobL) LoadFKJobJobWarnings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJob interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadFKJobJobWarnings allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-jobquery"},"type jobQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type jobQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-jobs"},"func Jobs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func Jobs(mods ...qm.QueryMod) jobQuery\n")),(0,o.kt)("p",null,"Jobs retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-jobquery-addfkjobjobwarnings"},"func ","(","jobQuery",")"," AddFKJobJobWarnings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobQuery) AddFKJobJobWarnings(o *Job, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*JobWarning) error\n")),(0,o.kt)("p",null,"AddFKJobJobWarnings adds the given related objects to the existing relationships of the job\\, optionally inserting them as new records","."," Appends related to o",".","R",".","FKJobJobWarnings","."," Sets related",".","R",".","FKJob appropriately","."),(0,o.kt)("h3",{id:"func-jobquery-all"},"func ","(","jobQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobQuery) All(ctx context.Context, exec boil.ContextExecutor) (JobSlice, error)\n")),(0,o.kt)("p",null,"All returns all Job records from the query","."),(0,o.kt)("h3",{id:"func-jobquery-count"},"func ","(","jobQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all Job records in the query","."),(0,o.kt)("h3",{id:"func-jobquery-delete"},"func ","(","jobQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobQuery) Delete(o *Job, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single Job record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-jobquery-deleteall"},"func ","(","jobQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-jobquery-deleteallslice"},"func ","(","jobQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobQuery) DeleteAllSlice(o JobSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-jobquery-exists"},"func ","(","jobQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-jobquery-fkjobjobwarnings"},"func ","(","jobQuery",")"," FKJobJobWarnings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobQuery) FKJobJobWarnings(o *Job, mods ...qm.QueryMod) jobWarningQuery\n")),(0,o.kt)("p",null,"FKJobJobWarnings retrieves all the job","_","warning's JobWarnings with an executor via fk","_","jobs","_","id column","."),(0,o.kt)("h3",{id:"func-jobquery-insert"},"func ","(","jobQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobQuery) Insert(o *Job, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-jobquery-one"},"func ","(","jobQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Job, error)\n")),(0,o.kt)("p",null,"One returns a single job record from the query","."),(0,o.kt)("h3",{id:"func-jobquery-reload"},"func ","(","jobQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobQuery) Reload(o *Job, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-jobquery-reloadall"},"func ","(","jobQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobQuery) ReloadAll(o *JobSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-jobquery-removefkjobjobwarnings"},"func ","(","jobQuery",")"," RemoveFKJobJobWarnings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobQuery) RemoveFKJobJobWarnings(o *Job, ctx context.Context, exec boil.ContextExecutor, related ...*JobWarning) error\n")),(0,o.kt)("p",null,"RemoveFKJobJobWarnings relationships from objects passed in","."," Removes related items from R",".","FKJobJobWarnings ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","FKJob","."),(0,o.kt)("h3",{id:"func-jobquery-setfkjobjobwarnings"},"func ","(","jobQuery",")"," SetFKJobJobWarnings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobQuery) SetFKJobJobWarnings(o *Job, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*JobWarning) error\n")),(0,o.kt)("p",null,"SetFKJobJobWarnings removes all previously related items of the job replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","FKJob's FKJobJobWarnings accordingly","."," Replaces o",".","R",".","FKJobJobWarnings with related","."," Sets related",".","R",".","FKJob's FKJobJobWarnings accordingly","."),(0,o.kt)("h3",{id:"func-jobquery-update"},"func ","(","jobQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobQuery) Update(o *Job, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the Job","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-jobquery-updateall"},"func ","(","jobQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-jobquery-updateallslice"},"func ","(","jobQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobQuery) UpdateAllSlice(o JobSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-jobquery-upsert"},"func ","(","jobQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobQuery) Upsert(o *Job, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-jobr"},"type jobR"),(0,o.kt)("p",null,"jobR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type jobR struct {\n    FKJobJobWarnings JobWarningSlice `boil:"FKJobJobWarnings" json:"FKJobJobWarnings" toml:"FKJobJobWarnings" yaml:"FKJobJobWarnings"`\n}\n')),(0,o.kt)("h3",{id:"func-jobr-newstruct"},"func ","(","*","jobR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*jobR) NewStruct() *jobR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-jobwarningl"},"type jobWarningL"),(0,o.kt)("p",null,"jobWarningL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type jobWarningL struct{}\n")),(0,o.kt)("h3",{id:"func-jobwarningl-loadfkjob"},"func ","(","jobWarningL",")"," LoadFKJob"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (jobWarningL) LoadFKJob(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJobWarning interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadFKJob allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-jobwarningquery"},"type jobWarningQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type jobWarningQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-jobwarnings"},"func JobWarnings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func JobWarnings(mods ...qm.QueryMod) jobWarningQuery\n")),(0,o.kt)("p",null,"JobWarnings retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-jobwarningquery-all"},"func ","(","jobWarningQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobWarningQuery) All(ctx context.Context, exec boil.ContextExecutor) (JobWarningSlice, error)\n")),(0,o.kt)("p",null,"All returns all JobWarning records from the query","."),(0,o.kt)("h3",{id:"func-jobwarningquery-count"},"func ","(","jobWarningQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobWarningQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all JobWarning records in the query","."),(0,o.kt)("h3",{id:"func-jobwarningquery-delete"},"func ","(","jobWarningQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobWarningQuery) Delete(o *JobWarning, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single JobWarning record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-jobwarningquery-deleteall"},"func ","(","jobWarningQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobWarningQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-jobwarningquery-deleteallslice"},"func ","(","jobWarningQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobWarningQuery) DeleteAllSlice(o JobWarningSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-jobwarningquery-exists"},"func ","(","jobWarningQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobWarningQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-jobwarningquery-fkjob"},"func ","(","jobWarningQuery",")"," FKJob"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobWarningQuery) FKJob(o *JobWarning, mods ...qm.QueryMod) jobQuery\n")),(0,o.kt)("p",null,"FKJob pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-jobwarningquery-insert"},"func ","(","jobWarningQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobWarningQuery) Insert(o *JobWarning, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-jobwarningquery-one"},"func ","(","jobWarningQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobWarningQuery) One(ctx context.Context, exec boil.ContextExecutor) (*JobWarning, error)\n")),(0,o.kt)("p",null,"One returns a single jobWarning record from the query","."),(0,o.kt)("h3",{id:"func-jobwarningquery-reload"},"func ","(","jobWarningQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobWarningQuery) Reload(o *JobWarning, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-jobwarningquery-reloadall"},"func ","(","jobWarningQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobWarningQuery) ReloadAll(o *JobWarningSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-jobwarningquery-removefkjob"},"func ","(","jobWarningQuery",")"," RemoveFKJob"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobWarningQuery) RemoveFKJob(o *JobWarning, ctx context.Context, exec boil.ContextExecutor, related *Job) error\n")),(0,o.kt)("p",null,"RemoveFKJob relationship","."," Sets o",".","R",".","FKJob to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-jobwarningquery-setfkjob"},"func ","(","jobWarningQuery",")"," SetFKJob"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobWarningQuery) SetFKJob(o *JobWarning, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Job) error\n")),(0,o.kt)("p",null,"SetFKJob of the jobWarning to the related item","."," Sets o",".","R",".","FKJob to related","."," Adds o to related",".","R",".","FKJobJobWarnings","."),(0,o.kt)("h3",{id:"func-jobwarningquery-update"},"func ","(","jobWarningQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobWarningQuery) Update(o *JobWarning, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the JobWarning","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-jobwarningquery-updateall"},"func ","(","jobWarningQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobWarningQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-jobwarningquery-updateallslice"},"func ","(","jobWarningQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobWarningQuery) UpdateAllSlice(o JobWarningSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-jobwarningquery-upsert"},"func ","(","jobWarningQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q jobWarningQuery) Upsert(o *JobWarning, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-jobwarningr"},"type jobWarningR"),(0,o.kt)("p",null,"jobWarningR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type jobWarningR struct {\n    FKJob *Job `boil:"FKJob" json:"FKJob" toml:"FKJob" yaml:"FKJob"`\n}\n')),(0,o.kt)("h3",{id:"func-jobwarningr-newstruct"},"func ","(","*","jobWarningR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*jobWarningR) NewStruct() *jobWarningR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-kpacklifecycledatuml"},"type kpackLifecycleDatumL"),(0,o.kt)("p",null,"kpackLifecycleDatumL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type kpackLifecycleDatumL struct{}\n")),(0,o.kt)("h3",{id:"func-kpacklifecycledatuml-loadapp"},"func ","(","kpackLifecycleDatumL",")"," LoadApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (kpackLifecycleDatumL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeKpackLifecycleDatum interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadApp allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-kpacklifecycledatuml-loadbuild"},"func ","(","kpackLifecycleDatumL",")"," LoadBuild"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (kpackLifecycleDatumL) LoadBuild(ctx context.Context, e boil.ContextExecutor, singular bool, maybeKpackLifecycleDatum interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadBuild allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-kpacklifecycledatumquery"},"type kpackLifecycleDatumQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type kpackLifecycleDatumQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-kpacklifecycledata"},"func KpackLifecycleData"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func KpackLifecycleData(mods ...qm.QueryMod) kpackLifecycleDatumQuery\n")),(0,o.kt)("p",null,"KpackLifecycleData retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-kpacklifecycledatumquery-all"},"func ","(","kpackLifecycleDatumQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q kpackLifecycleDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (KpackLifecycleDatumSlice, error)\n")),(0,o.kt)("p",null,"All returns all KpackLifecycleDatum records from the query","."),(0,o.kt)("h3",{id:"func-kpacklifecycledatumquery-app"},"func ","(","kpackLifecycleDatumQuery",")"," App"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q kpackLifecycleDatumQuery) App(o *KpackLifecycleDatum, mods ...qm.QueryMod) appQuery\n")),(0,o.kt)("p",null,"App pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-kpacklifecycledatumquery-build"},"func ","(","kpackLifecycleDatumQuery",")"," Build"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q kpackLifecycleDatumQuery) Build(o *KpackLifecycleDatum, mods ...qm.QueryMod) buildQuery\n")),(0,o.kt)("p",null,"Build pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-kpacklifecycledatumquery-count"},"func ","(","kpackLifecycleDatumQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q kpackLifecycleDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all KpackLifecycleDatum records in the query","."),(0,o.kt)("h3",{id:"func-kpacklifecycledatumquery-delete"},"func ","(","kpackLifecycleDatumQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q kpackLifecycleDatumQuery) Delete(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single KpackLifecycleDatum record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-kpacklifecycledatumquery-deleteall"},"func ","(","kpackLifecycleDatumQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q kpackLifecycleDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-kpacklifecycledatumquery-deleteallslice"},"func ","(","kpackLifecycleDatumQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q kpackLifecycleDatumQuery) DeleteAllSlice(o KpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-kpacklifecycledatumquery-exists"},"func ","(","kpackLifecycleDatumQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q kpackLifecycleDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-kpacklifecycledatumquery-insert"},"func ","(","kpackLifecycleDatumQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q kpackLifecycleDatumQuery) Insert(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-kpacklifecycledatumquery-one"},"func ","(","kpackLifecycleDatumQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q kpackLifecycleDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*KpackLifecycleDatum, error)\n")),(0,o.kt)("p",null,"One returns a single kpackLifecycleDatum record from the query","."),(0,o.kt)("h3",{id:"func-kpacklifecycledatumquery-reload"},"func ","(","kpackLifecycleDatumQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q kpackLifecycleDatumQuery) Reload(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-kpacklifecycledatumquery-reloadall"},"func ","(","kpackLifecycleDatumQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q kpackLifecycleDatumQuery) ReloadAll(o *KpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-kpacklifecycledatumquery-removeapp"},"func ","(","kpackLifecycleDatumQuery",")"," RemoveApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q kpackLifecycleDatumQuery) RemoveApp(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, related *App) error\n")),(0,o.kt)("p",null,"RemoveApp relationship","."," Sets o",".","R",".","App to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-kpacklifecycledatumquery-removebuild"},"func ","(","kpackLifecycleDatumQuery",")"," RemoveBuild"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q kpackLifecycleDatumQuery) RemoveBuild(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, related *Build) error\n")),(0,o.kt)("p",null,"RemoveBuild relationship","."," Sets o",".","R",".","Build to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-kpacklifecycledatumquery-setapp"},"func ","(","kpackLifecycleDatumQuery",")"," SetApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q kpackLifecycleDatumQuery) SetApp(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, insert bool, related *App) error\n")),(0,o.kt)("p",null,"SetApp of the kpackLifecycleDatum to the related item","."," Sets o",".","R",".","App to related","."," Adds o to related",".","R",".","KpackLifecycleData","."),(0,o.kt)("h3",{id:"func-kpacklifecycledatumquery-setbuild"},"func ","(","kpackLifecycleDatumQuery",")"," SetBuild"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q kpackLifecycleDatumQuery) SetBuild(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Build) error\n")),(0,o.kt)("p",null,"SetBuild of the kpackLifecycleDatum to the related item","."," Sets o",".","R",".","Build to related","."," Adds o to related",".","R",".","KpackLifecycleData","."),(0,o.kt)("h3",{id:"func-kpacklifecycledatumquery-update"},"func ","(","kpackLifecycleDatumQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q kpackLifecycleDatumQuery) Update(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the KpackLifecycleDatum","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-kpacklifecycledatumquery-updateall"},"func ","(","kpackLifecycleDatumQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q kpackLifecycleDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-kpacklifecycledatumquery-updateallslice"},"func ","(","kpackLifecycleDatumQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q kpackLifecycleDatumQuery) UpdateAllSlice(o KpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-kpacklifecycledatumquery-upsert"},"func ","(","kpackLifecycleDatumQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q kpackLifecycleDatumQuery) Upsert(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-kpacklifecycledatumr"},"type kpackLifecycleDatumR"),(0,o.kt)("p",null,"kpackLifecycleDatumR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type kpackLifecycleDatumR struct {\n    App   *App   `boil:"App" json:"App" toml:"App" yaml:"App"`\n    Build *Build `boil:"Build" json:"Build" toml:"Build" yaml:"Build"`\n}\n')),(0,o.kt)("h3",{id:"func-kpacklifecycledatumr-newstruct"},"func ","(","*","kpackLifecycleDatumR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*kpackLifecycleDatumR) NewStruct() *kpackLifecycleDatumR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-lockingl"},"type lockingL"),(0,o.kt)("p",null,"lockingL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type lockingL struct{}\n")),(0,o.kt)("h2",{id:"type-lockingquery"},"type lockingQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type lockingQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-lockings"},"func Lockings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func Lockings(mods ...qm.QueryMod) lockingQuery\n")),(0,o.kt)("p",null,"Lockings retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-lockingquery-all"},"func ","(","lockingQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q lockingQuery) All(ctx context.Context, exec boil.ContextExecutor) (LockingSlice, error)\n")),(0,o.kt)("p",null,"All returns all Locking records from the query","."),(0,o.kt)("h3",{id:"func-lockingquery-count"},"func ","(","lockingQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q lockingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all Locking records in the query","."),(0,o.kt)("h3",{id:"func-lockingquery-delete"},"func ","(","lockingQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q lockingQuery) Delete(o *Locking, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single Locking record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-lockingquery-deleteall"},"func ","(","lockingQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q lockingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-lockingquery-deleteallslice"},"func ","(","lockingQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q lockingQuery) DeleteAllSlice(o LockingSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-lockingquery-exists"},"func ","(","lockingQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q lockingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-lockingquery-insert"},"func ","(","lockingQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q lockingQuery) Insert(o *Locking, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-lockingquery-one"},"func ","(","lockingQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q lockingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Locking, error)\n")),(0,o.kt)("p",null,"One returns a single locking record from the query","."),(0,o.kt)("h3",{id:"func-lockingquery-reload"},"func ","(","lockingQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q lockingQuery) Reload(o *Locking, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-lockingquery-reloadall"},"func ","(","lockingQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q lockingQuery) ReloadAll(o *LockingSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-lockingquery-update"},"func ","(","lockingQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q lockingQuery) Update(o *Locking, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the Locking","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-lockingquery-updateall"},"func ","(","lockingQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q lockingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-lockingquery-updateallslice"},"func ","(","lockingQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q lockingQuery) UpdateAllSlice(o LockingSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-lockingquery-upsert"},"func ","(","lockingQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q lockingQuery) Upsert(o *Locking, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-lockingr"},"type lockingR"),(0,o.kt)("p",null,"lockingR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type lockingR struct {\n}\n")),(0,o.kt)("h3",{id:"func-lockingr-newstruct"},"func ","(","*","lockingR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*lockingR) NewStruct() *lockingR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-organizationannotationl"},"type organizationAnnotationL"),(0,o.kt)("p",null,"organizationAnnotationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type organizationAnnotationL struct{}\n")),(0,o.kt)("h3",{id:"func-organizationannotationl-loadresource"},"func ","(","organizationAnnotationL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationAnnotation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-organizationannotationquery"},"type organizationAnnotationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type organizationAnnotationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-organizationannotations"},"func OrganizationAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func OrganizationAnnotations(mods ...qm.QueryMod) organizationAnnotationQuery\n")),(0,o.kt)("p",null,"OrganizationAnnotations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-organizationannotationquery-all"},"func ","(","organizationAnnotationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationAnnotationSlice, error)\n")),(0,o.kt)("p",null,"All returns all OrganizationAnnotation records from the query","."),(0,o.kt)("h3",{id:"func-organizationannotationquery-count"},"func ","(","organizationAnnotationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all OrganizationAnnotation records in the query","."),(0,o.kt)("h3",{id:"func-organizationannotationquery-delete"},"func ","(","organizationAnnotationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationAnnotationQuery) Delete(o *OrganizationAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single OrganizationAnnotation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-organizationannotationquery-deleteall"},"func ","(","organizationAnnotationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-organizationannotationquery-deleteallslice"},"func ","(","organizationAnnotationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationAnnotationQuery) DeleteAllSlice(o OrganizationAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-organizationannotationquery-exists"},"func ","(","organizationAnnotationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-organizationannotationquery-insert"},"func ","(","organizationAnnotationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationAnnotationQuery) Insert(o *OrganizationAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-organizationannotationquery-one"},"func ","(","organizationAnnotationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationAnnotation, error)\n")),(0,o.kt)("p",null,"One returns a single organizationAnnotation record from the query","."),(0,o.kt)("h3",{id:"func-organizationannotationquery-reload"},"func ","(","organizationAnnotationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationAnnotationQuery) Reload(o *OrganizationAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-organizationannotationquery-reloadall"},"func ","(","organizationAnnotationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationAnnotationQuery) ReloadAll(o *OrganizationAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-organizationannotationquery-removeresource"},"func ","(","organizationAnnotationQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationAnnotationQuery) RemoveResource(o *OrganizationAnnotation, ctx context.Context, exec boil.ContextExecutor, related *Organization) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-organizationannotationquery-resource"},"func ","(","organizationAnnotationQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationAnnotationQuery) Resource(o *OrganizationAnnotation, mods ...qm.QueryMod) organizationQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-organizationannotationquery-setresource"},"func ","(","organizationAnnotationQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationAnnotationQuery) SetResource(o *OrganizationAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error\n")),(0,o.kt)("p",null,"SetResource of the organizationAnnotation to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceOrganizationAnnotations","."),(0,o.kt)("h3",{id:"func-organizationannotationquery-update"},"func ","(","organizationAnnotationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationAnnotationQuery) Update(o *OrganizationAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the OrganizationAnnotation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-organizationannotationquery-updateall"},"func ","(","organizationAnnotationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-organizationannotationquery-updateallslice"},"func ","(","organizationAnnotationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationAnnotationQuery) UpdateAllSlice(o OrganizationAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-organizationannotationquery-upsert"},"func ","(","organizationAnnotationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationAnnotationQuery) Upsert(o *OrganizationAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-organizationannotationr"},"type organizationAnnotationR"),(0,o.kt)("p",null,"organizationAnnotationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type organizationAnnotationR struct {\n    Resource *Organization `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-organizationannotationr-newstruct"},"func ","(","*","organizationAnnotationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*organizationAnnotationR) NewStruct() *organizationAnnotationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-organizationl"},"type organizationL"),(0,o.kt)("p",null,"organizationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type organizationL struct{}\n")),(0,o.kt)("h3",{id:"func-organizationl-loadisolationsegments"},"func ","(","organizationL",")"," LoadIsolationSegments"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationL) LoadIsolationSegments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadIsolationSegments allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-organizationl-loadorganizationsauditors"},"func ","(","organizationL",")"," LoadOrganizationsAuditors"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationL) LoadOrganizationsAuditors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadOrganizationsAuditors allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-organizationl-loadorganizationsbillingmanagers"},"func ","(","organizationL",")"," LoadOrganizationsBillingManagers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationL) LoadOrganizationsBillingManagers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadOrganizationsBillingManagers allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-organizationl-loadorganizationsmanagers"},"func ","(","organizationL",")"," LoadOrganizationsManagers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationL) LoadOrganizationsManagers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadOrganizationsManagers allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-organizationl-loadorganizationsprivatedomains"},"func ","(","organizationL",")"," LoadOrganizationsPrivateDomains"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationL) LoadOrganizationsPrivateDomains(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadOrganizationsPrivateDomains allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-organizationl-loadorganizationsusers"},"func ","(","organizationL",")"," LoadOrganizationsUsers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationL) LoadOrganizationsUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadOrganizationsUsers allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-organizationl-loadowningorganizationdomains"},"func ","(","organizationL",")"," LoadOwningOrganizationDomains"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationL) LoadOwningOrganizationDomains(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadOwningOrganizationDomains allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-organizationl-loadquotadefinition"},"func ","(","organizationL",")"," LoadQuotaDefinition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationL) LoadQuotaDefinition(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadQuotaDefinition allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-organizationl-loadresourceorganizationannotations"},"func ","(","organizationL",")"," LoadResourceOrganizationAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationL) LoadResourceOrganizationAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceOrganizationAnnotations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-organizationl-loadresourceorganizationlabels"},"func ","(","organizationL",")"," LoadResourceOrganizationLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationL) LoadResourceOrganizationLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceOrganizationLabels allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-organizationl-loadserviceplanvisibilities"},"func ","(","organizationL",")"," LoadServicePlanVisibilities"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationL) LoadServicePlanVisibilities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadServicePlanVisibilities allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-organizationl-loadspacequotadefinitions"},"func ","(","organizationL",")"," LoadSpaceQuotaDefinitions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationL) LoadSpaceQuotaDefinitions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSpaceQuotaDefinitions allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-organizationl-loadspaces"},"func ","(","organizationL",")"," LoadSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationL) LoadSpaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSpaces allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-organizationlabell"},"type organizationLabelL"),(0,o.kt)("p",null,"organizationLabelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type organizationLabelL struct{}\n")),(0,o.kt)("h3",{id:"func-organizationlabell-loadresource"},"func ","(","organizationLabelL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationLabel interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-organizationlabelquery"},"type organizationLabelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type organizationLabelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-organizationlabels"},"func OrganizationLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func OrganizationLabels(mods ...qm.QueryMod) organizationLabelQuery\n")),(0,o.kt)("p",null,"OrganizationLabels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-organizationlabelquery-all"},"func ","(","organizationLabelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationLabelSlice, error)\n")),(0,o.kt)("p",null,"All returns all OrganizationLabel records from the query","."),(0,o.kt)("h3",{id:"func-organizationlabelquery-count"},"func ","(","organizationLabelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all OrganizationLabel records in the query","."),(0,o.kt)("h3",{id:"func-organizationlabelquery-delete"},"func ","(","organizationLabelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationLabelQuery) Delete(o *OrganizationLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single OrganizationLabel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-organizationlabelquery-deleteall"},"func ","(","organizationLabelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-organizationlabelquery-deleteallslice"},"func ","(","organizationLabelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationLabelQuery) DeleteAllSlice(o OrganizationLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-organizationlabelquery-exists"},"func ","(","organizationLabelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-organizationlabelquery-insert"},"func ","(","organizationLabelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationLabelQuery) Insert(o *OrganizationLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-organizationlabelquery-one"},"func ","(","organizationLabelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationLabel, error)\n")),(0,o.kt)("p",null,"One returns a single organizationLabel record from the query","."),(0,o.kt)("h3",{id:"func-organizationlabelquery-reload"},"func ","(","organizationLabelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationLabelQuery) Reload(o *OrganizationLabel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-organizationlabelquery-reloadall"},"func ","(","organizationLabelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationLabelQuery) ReloadAll(o *OrganizationLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-organizationlabelquery-removeresource"},"func ","(","organizationLabelQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationLabelQuery) RemoveResource(o *OrganizationLabel, ctx context.Context, exec boil.ContextExecutor, related *Organization) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-organizationlabelquery-resource"},"func ","(","organizationLabelQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationLabelQuery) Resource(o *OrganizationLabel, mods ...qm.QueryMod) organizationQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-organizationlabelquery-setresource"},"func ","(","organizationLabelQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationLabelQuery) SetResource(o *OrganizationLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error\n")),(0,o.kt)("p",null,"SetResource of the organizationLabel to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceOrganizationLabels","."),(0,o.kt)("h3",{id:"func-organizationlabelquery-update"},"func ","(","organizationLabelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationLabelQuery) Update(o *OrganizationLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the OrganizationLabel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-organizationlabelquery-updateall"},"func ","(","organizationLabelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-organizationlabelquery-updateallslice"},"func ","(","organizationLabelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationLabelQuery) UpdateAllSlice(o OrganizationLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-organizationlabelquery-upsert"},"func ","(","organizationLabelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationLabelQuery) Upsert(o *OrganizationLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-organizationlabelr"},"type organizationLabelR"),(0,o.kt)("p",null,"organizationLabelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type organizationLabelR struct {\n    Resource *Organization `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-organizationlabelr-newstruct"},"func ","(","*","organizationLabelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*organizationLabelR) NewStruct() *organizationLabelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-organizationquery"},"type organizationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type organizationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-organizations"},"func Organizations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func Organizations(mods ...qm.QueryMod) organizationQuery\n")),(0,o.kt)("p",null,"Organizations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-organizationquery-addisolationsegments"},"func ","(","organizationQuery",")"," AddIsolationSegments"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) AddIsolationSegments(o *Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IsolationSegment) error\n")),(0,o.kt)("p",null,"AddIsolationSegments adds the given related objects to the existing relationships of the organization\\, optionally inserting them as new records","."," Appends related to o",".","R",".","IsolationSegments","."," Sets related",".","R",".","Organizations appropriately","."),(0,o.kt)("h3",{id:"func-organizationquery-addorganizationsauditors"},"func ","(","organizationQuery",")"," AddOrganizationsAuditors"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) AddOrganizationsAuditors(o *Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationsAuditor) error\n")),(0,o.kt)("p",null,"AddOrganizationsAuditors adds the given related objects to the existing relationships of the organization\\, optionally inserting them as new records","."," Appends related to o",".","R",".","OrganizationsAuditors","."," Sets related",".","R",".","Organization appropriately","."),(0,o.kt)("h3",{id:"func-organizationquery-addorganizationsbillingmanagers"},"func ","(","organizationQuery",")"," AddOrganizationsBillingManagers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) AddOrganizationsBillingManagers(o *Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationsBillingManager) error\n")),(0,o.kt)("p",null,"AddOrganizationsBillingManagers adds the given related objects to the existing relationships of the organization\\, optionally inserting them as new records","."," Appends related to o",".","R",".","OrganizationsBillingManagers","."," Sets related",".","R",".","Organization appropriately","."),(0,o.kt)("h3",{id:"func-organizationquery-addorganizationsmanagers"},"func ","(","organizationQuery",")"," AddOrganizationsManagers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) AddOrganizationsManagers(o *Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationsManager) error\n")),(0,o.kt)("p",null,"AddOrganizationsManagers adds the given related objects to the existing relationships of the organization\\, optionally inserting them as new records","."," Appends related to o",".","R",".","OrganizationsManagers","."," Sets related",".","R",".","Organization appropriately","."),(0,o.kt)("h3",{id:"func-organizationquery-addorganizationsprivatedomains"},"func ","(","organizationQuery",")"," AddOrganizationsPrivateDomains"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) AddOrganizationsPrivateDomains(o *Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationsPrivateDomain) error\n")),(0,o.kt)("p",null,"AddOrganizationsPrivateDomains adds the given related objects to the existing relationships of the organization\\, optionally inserting them as new records","."," Appends related to o",".","R",".","OrganizationsPrivateDomains","."," Sets related",".","R",".","Organization appropriately","."),(0,o.kt)("h3",{id:"func-organizationquery-addorganizationsusers"},"func ","(","organizationQuery",")"," AddOrganizationsUsers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) AddOrganizationsUsers(o *Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationsUser) error\n")),(0,o.kt)("p",null,"AddOrganizationsUsers adds the given related objects to the existing relationships of the organization\\, optionally inserting them as new records","."," Appends related to o",".","R",".","OrganizationsUsers","."," Sets related",".","R",".","Organization appropriately","."),(0,o.kt)("h3",{id:"func-organizationquery-addowningorganizationdomains"},"func ","(","organizationQuery",")"," AddOwningOrganizationDomains"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) AddOwningOrganizationDomains(o *Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Domain) error\n")),(0,o.kt)("p",null,"AddOwningOrganizationDomains adds the given related objects to the existing relationships of the organization\\, optionally inserting them as new records","."," Appends related to o",".","R",".","OwningOrganizationDomains","."," Sets related",".","R",".","OwningOrganization appropriately","."),(0,o.kt)("h3",{id:"func-organizationquery-addresourceorganizationannotations"},"func ","(","organizationQuery",")"," AddResourceOrganizationAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) AddResourceOrganizationAnnotations(o *Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationAnnotation) error\n")),(0,o.kt)("p",null,"AddResourceOrganizationAnnotations adds the given related objects to the existing relationships of the organization\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceOrganizationAnnotations","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-organizationquery-addresourceorganizationlabels"},"func ","(","organizationQuery",")"," AddResourceOrganizationLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) AddResourceOrganizationLabels(o *Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationLabel) error\n")),(0,o.kt)("p",null,"AddResourceOrganizationLabels adds the given related objects to the existing relationships of the organization\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceOrganizationLabels","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-organizationquery-addserviceplanvisibilities"},"func ","(","organizationQuery",")"," AddServicePlanVisibilities"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) AddServicePlanVisibilities(o *Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServicePlanVisibility) error\n")),(0,o.kt)("p",null,"AddServicePlanVisibilities adds the given related objects to the existing relationships of the organization\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ServicePlanVisibilities","."," Sets related",".","R",".","Organization appropriately","."),(0,o.kt)("h3",{id:"func-organizationquery-addspacequotadefinitions"},"func ","(","organizationQuery",")"," AddSpaceQuotaDefinitions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) AddSpaceQuotaDefinitions(o *Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpaceQuotaDefinition) error\n")),(0,o.kt)("p",null,"AddSpaceQuotaDefinitions adds the given related objects to the existing relationships of the organization\\, optionally inserting them as new records","."," Appends related to o",".","R",".","SpaceQuotaDefinitions","."," Sets related",".","R",".","Organization appropriately","."),(0,o.kt)("h3",{id:"func-organizationquery-addspaces"},"func ","(","organizationQuery",")"," AddSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) AddSpaces(o *Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Space) error\n")),(0,o.kt)("p",null,"AddSpaces adds the given related objects to the existing relationships of the organization\\, optionally inserting them as new records","."," Appends related to o",".","R",".","Spaces","."," Sets related",".","R",".","Organization appropriately","."),(0,o.kt)("h3",{id:"func-organizationquery-all"},"func ","(","organizationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationSlice, error)\n")),(0,o.kt)("p",null,"All returns all Organization records from the query","."),(0,o.kt)("h3",{id:"func-organizationquery-count"},"func ","(","organizationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all Organization records in the query","."),(0,o.kt)("h3",{id:"func-organizationquery-delete"},"func ","(","organizationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) Delete(o *Organization, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single Organization record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-organizationquery-deleteall"},"func ","(","organizationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-organizationquery-deleteallslice"},"func ","(","organizationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) DeleteAllSlice(o OrganizationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-organizationquery-exists"},"func ","(","organizationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-organizationquery-insert"},"func ","(","organizationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) Insert(o *Organization, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-organizationquery-isolationsegments"},"func ","(","organizationQuery",")"," IsolationSegments"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) IsolationSegments(o *Organization, mods ...qm.QueryMod) isolationSegmentQuery\n")),(0,o.kt)("p",null,"IsolationSegments retrieves all the isolation","_","segment's IsolationSegments with an executor","."),(0,o.kt)("h3",{id:"func-organizationquery-one"},"func ","(","organizationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Organization, error)\n")),(0,o.kt)("p",null,"One returns a single organization record from the query","."),(0,o.kt)("h3",{id:"func-organizationquery-organizationsauditors"},"func ","(","organizationQuery",")"," OrganizationsAuditors"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) OrganizationsAuditors(o *Organization, mods ...qm.QueryMod) organizationsAuditorQuery\n")),(0,o.kt)("p",null,"OrganizationsAuditors retrieves all the organizations","_","auditor's OrganizationsAuditors with an executor","."),(0,o.kt)("h3",{id:"func-organizationquery-organizationsbillingmanagers"},"func ","(","organizationQuery",")"," OrganizationsBillingManagers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) OrganizationsBillingManagers(o *Organization, mods ...qm.QueryMod) organizationsBillingManagerQuery\n")),(0,o.kt)("p",null,"OrganizationsBillingManagers retrieves all the organizations","_","billing","_","manager's OrganizationsBillingManagers with an executor","."),(0,o.kt)("h3",{id:"func-organizationquery-organizationsmanagers"},"func ","(","organizationQuery",")"," OrganizationsManagers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) OrganizationsManagers(o *Organization, mods ...qm.QueryMod) organizationsManagerQuery\n")),(0,o.kt)("p",null,"OrganizationsManagers retrieves all the organizations","_","manager's OrganizationsManagers with an executor","."),(0,o.kt)("h3",{id:"func-organizationquery-organizationsprivatedomains"},"func ","(","organizationQuery",")"," OrganizationsPrivateDomains"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) OrganizationsPrivateDomains(o *Organization, mods ...qm.QueryMod) organizationsPrivateDomainQuery\n")),(0,o.kt)("p",null,"OrganizationsPrivateDomains retrieves all the organizations","_","private","_","domain's OrganizationsPrivateDomains with an executor","."),(0,o.kt)("h3",{id:"func-organizationquery-organizationsusers"},"func ","(","organizationQuery",")"," OrganizationsUsers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) OrganizationsUsers(o *Organization, mods ...qm.QueryMod) organizationsUserQuery\n")),(0,o.kt)("p",null,"OrganizationsUsers retrieves all the organizations","_","user's OrganizationsUsers with an executor","."),(0,o.kt)("h3",{id:"func-organizationquery-owningorganizationdomains"},"func ","(","organizationQuery",")"," OwningOrganizationDomains"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) OwningOrganizationDomains(o *Organization, mods ...qm.QueryMod) domainQuery\n")),(0,o.kt)("p",null,"OwningOrganizationDomains retrieves all the domain's Domains with an executor via owning","_","organization","_","id column","."),(0,o.kt)("h3",{id:"func-organizationquery-quotadefinition"},"func ","(","organizationQuery",")"," QuotaDefinition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) QuotaDefinition(o *Organization, mods ...qm.QueryMod) quotaDefinitionQuery\n")),(0,o.kt)("p",null,"QuotaDefinition pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-organizationquery-reload"},"func ","(","organizationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) Reload(o *Organization, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-organizationquery-reloadall"},"func ","(","organizationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) ReloadAll(o *OrganizationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-organizationquery-removeisolationsegments"},"func ","(","organizationQuery",")"," RemoveIsolationSegments"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) RemoveIsolationSegments(o *Organization, ctx context.Context, exec boil.ContextExecutor, related ...*IsolationSegment) error\n")),(0,o.kt)("p",null,"RemoveIsolationSegments relationships from objects passed in","."," Removes related items from R",".","IsolationSegments ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Organizations","."),(0,o.kt)("h3",{id:"func-organizationquery-removeowningorganizationdomains"},"func ","(","organizationQuery",")"," RemoveOwningOrganizationDomains"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) RemoveOwningOrganizationDomains(o *Organization, ctx context.Context, exec boil.ContextExecutor, related ...*Domain) error\n")),(0,o.kt)("p",null,"RemoveOwningOrganizationDomains relationships from objects passed in","."," Removes related items from R",".","OwningOrganizationDomains ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","OwningOrganization","."),(0,o.kt)("h3",{id:"func-organizationquery-removeresourceorganizationannotations"},"func ","(","organizationQuery",")"," RemoveResourceOrganizationAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) RemoveResourceOrganizationAnnotations(o *Organization, ctx context.Context, exec boil.ContextExecutor, related ...*OrganizationAnnotation) error\n")),(0,o.kt)("p",null,"RemoveResourceOrganizationAnnotations relationships from objects passed in","."," Removes related items from R",".","ResourceOrganizationAnnotations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-organizationquery-removeresourceorganizationlabels"},"func ","(","organizationQuery",")"," RemoveResourceOrganizationLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) RemoveResourceOrganizationLabels(o *Organization, ctx context.Context, exec boil.ContextExecutor, related ...*OrganizationLabel) error\n")),(0,o.kt)("p",null,"RemoveResourceOrganizationLabels relationships from objects passed in","."," Removes related items from R",".","ResourceOrganizationLabels ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-organizationquery-resourceorganizationannotations"},"func ","(","organizationQuery",")"," ResourceOrganizationAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) ResourceOrganizationAnnotations(o *Organization, mods ...qm.QueryMod) organizationAnnotationQuery\n")),(0,o.kt)("p",null,"ResourceOrganizationAnnotations retrieves all the organization","_","annotation's OrganizationAnnotations with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-organizationquery-resourceorganizationlabels"},"func ","(","organizationQuery",")"," ResourceOrganizationLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) ResourceOrganizationLabels(o *Organization, mods ...qm.QueryMod) organizationLabelQuery\n")),(0,o.kt)("p",null,"ResourceOrganizationLabels retrieves all the organization","_","label's OrganizationLabels with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-organizationquery-serviceplanvisibilities"},"func ","(","organizationQuery",")"," ServicePlanVisibilities"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) ServicePlanVisibilities(o *Organization, mods ...qm.QueryMod) servicePlanVisibilityQuery\n")),(0,o.kt)("p",null,"ServicePlanVisibilities retrieves all the service","_","plan","_","visibility's ServicePlanVisibilities with an executor","."),(0,o.kt)("h3",{id:"func-organizationquery-setisolationsegments"},"func ","(","organizationQuery",")"," SetIsolationSegments"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) SetIsolationSegments(o *Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IsolationSegment) error\n")),(0,o.kt)("p",null,"SetIsolationSegments removes all previously related items of the organization replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Organizations's IsolationSegments accordingly","."," Replaces o",".","R",".","IsolationSegments with related","."," Sets related",".","R",".","Organizations's IsolationSegments accordingly","."),(0,o.kt)("h3",{id:"func-organizationquery-setowningorganizationdomains"},"func ","(","organizationQuery",")"," SetOwningOrganizationDomains"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) SetOwningOrganizationDomains(o *Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Domain) error\n")),(0,o.kt)("p",null,"SetOwningOrganizationDomains removes all previously related items of the organization replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","OwningOrganization's OwningOrganizationDomains accordingly","."," Replaces o",".","R",".","OwningOrganizationDomains with related","."," Sets related",".","R",".","OwningOrganization's OwningOrganizationDomains accordingly","."),(0,o.kt)("h3",{id:"func-organizationquery-setquotadefinition"},"func ","(","organizationQuery",")"," SetQuotaDefinition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) SetQuotaDefinition(o *Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related *QuotaDefinition) error\n")),(0,o.kt)("p",null,"SetQuotaDefinition of the organization to the related item","."," Sets o",".","R",".","QuotaDefinition to related","."," Adds o to related",".","R",".","Organizations","."),(0,o.kt)("h3",{id:"func-organizationquery-setresourceorganizationannotations"},"func ","(","organizationQuery",")"," SetResourceOrganizationAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) SetResourceOrganizationAnnotations(o *Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationAnnotation) error\n")),(0,o.kt)("p",null,"SetResourceOrganizationAnnotations removes all previously related items of the organization replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceOrganizationAnnotations accordingly","."," Replaces o",".","R",".","ResourceOrganizationAnnotations with related","."," Sets related",".","R",".","Resource's ResourceOrganizationAnnotations accordingly","."),(0,o.kt)("h3",{id:"func-organizationquery-setresourceorganizationlabels"},"func ","(","organizationQuery",")"," SetResourceOrganizationLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) SetResourceOrganizationLabels(o *Organization, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationLabel) error\n")),(0,o.kt)("p",null,"SetResourceOrganizationLabels removes all previously related items of the organization replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceOrganizationLabels accordingly","."," Replaces o",".","R",".","ResourceOrganizationLabels with related","."," Sets related",".","R",".","Resource's ResourceOrganizationLabels accordingly","."),(0,o.kt)("h3",{id:"func-organizationquery-spacequotadefinitions"},"func ","(","organizationQuery",")"," SpaceQuotaDefinitions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) SpaceQuotaDefinitions(o *Organization, mods ...qm.QueryMod) spaceQuotaDefinitionQuery\n")),(0,o.kt)("p",null,"SpaceQuotaDefinitions retrieves all the space","_","quota","_","definition's SpaceQuotaDefinitions with an executor","."),(0,o.kt)("h3",{id:"func-organizationquery-spaces"},"func ","(","organizationQuery",")"," Spaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) Spaces(o *Organization, mods ...qm.QueryMod) spaceQuery\n")),(0,o.kt)("p",null,"Spaces retrieves all the space's Spaces with an executor","."),(0,o.kt)("h3",{id:"func-organizationquery-update"},"func ","(","organizationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) Update(o *Organization, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the Organization","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-organizationquery-updateall"},"func ","(","organizationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-organizationquery-updateallslice"},"func ","(","organizationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) UpdateAllSlice(o OrganizationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-organizationquery-upsert"},"func ","(","organizationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationQuery) Upsert(o *Organization, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-organizationr"},"type organizationR"),(0,o.kt)("p",null,"organizationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type organizationR struct {\n    QuotaDefinition                 *QuotaDefinition                 `boil:"QuotaDefinition" json:"QuotaDefinition" toml:"QuotaDefinition" yaml:"QuotaDefinition"`\n    OwningOrganizationDomains       DomainSlice                      `boil:"OwningOrganizationDomains" json:"OwningOrganizationDomains" toml:"OwningOrganizationDomains" yaml:"OwningOrganizationDomains"`\n    ResourceOrganizationAnnotations OrganizationAnnotationSlice      `boil:"ResourceOrganizationAnnotations" json:"ResourceOrganizationAnnotations" toml:"ResourceOrganizationAnnotations" yaml:"ResourceOrganizationAnnotations"`\n    ResourceOrganizationLabels      OrganizationLabelSlice           `boil:"ResourceOrganizationLabels" json:"ResourceOrganizationLabels" toml:"ResourceOrganizationLabels" yaml:"ResourceOrganizationLabels"`\n    OrganizationsAuditors           OrganizationsAuditorSlice        `boil:"OrganizationsAuditors" json:"OrganizationsAuditors" toml:"OrganizationsAuditors" yaml:"OrganizationsAuditors"`\n    OrganizationsBillingManagers    OrganizationsBillingManagerSlice `boil:"OrganizationsBillingManagers" json:"OrganizationsBillingManagers" toml:"OrganizationsBillingManagers" yaml:"OrganizationsBillingManagers"`\n    IsolationSegments               IsolationSegmentSlice            `boil:"IsolationSegments" json:"IsolationSegments" toml:"IsolationSegments" yaml:"IsolationSegments"`\n    OrganizationsManagers           OrganizationsManagerSlice        `boil:"OrganizationsManagers" json:"OrganizationsManagers" toml:"OrganizationsManagers" yaml:"OrganizationsManagers"`\n    OrganizationsPrivateDomains     OrganizationsPrivateDomainSlice  `boil:"OrganizationsPrivateDomains" json:"OrganizationsPrivateDomains" toml:"OrganizationsPrivateDomains" yaml:"OrganizationsPrivateDomains"`\n    OrganizationsUsers              OrganizationsUserSlice           `boil:"OrganizationsUsers" json:"OrganizationsUsers" toml:"OrganizationsUsers" yaml:"OrganizationsUsers"`\n    ServicePlanVisibilities         ServicePlanVisibilitySlice       `boil:"ServicePlanVisibilities" json:"ServicePlanVisibilities" toml:"ServicePlanVisibilities" yaml:"ServicePlanVisibilities"`\n    SpaceQuotaDefinitions           SpaceQuotaDefinitionSlice        `boil:"SpaceQuotaDefinitions" json:"SpaceQuotaDefinitions" toml:"SpaceQuotaDefinitions" yaml:"SpaceQuotaDefinitions"`\n    Spaces                          SpaceSlice                       `boil:"Spaces" json:"Spaces" toml:"Spaces" yaml:"Spaces"`\n}\n')),(0,o.kt)("h3",{id:"func-organizationr-newstruct"},"func ","(","*","organizationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*organizationR) NewStruct() *organizationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-organizationsauditorl"},"type organizationsAuditorL"),(0,o.kt)("p",null,"organizationsAuditorL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type organizationsAuditorL struct{}\n")),(0,o.kt)("h3",{id:"func-organizationsauditorl-loadorganization"},"func ","(","organizationsAuditorL",")"," LoadOrganization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationsAuditorL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationsAuditor interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadOrganization allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-organizationsauditorl-loaduser"},"func ","(","organizationsAuditorL",")"," LoadUser"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationsAuditorL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationsAuditor interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadUser allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-organizationsauditorquery"},"type organizationsAuditorQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type organizationsAuditorQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-organizationsauditors"},"func OrganizationsAuditors"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func OrganizationsAuditors(mods ...qm.QueryMod) organizationsAuditorQuery\n")),(0,o.kt)("p",null,"OrganizationsAuditors retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-organizationsauditorquery-all"},"func ","(","organizationsAuditorQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsAuditorQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationsAuditorSlice, error)\n")),(0,o.kt)("p",null,"All returns all OrganizationsAuditor records from the query","."),(0,o.kt)("h3",{id:"func-organizationsauditorquery-count"},"func ","(","organizationsAuditorQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsAuditorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all OrganizationsAuditor records in the query","."),(0,o.kt)("h3",{id:"func-organizationsauditorquery-delete"},"func ","(","organizationsAuditorQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsAuditorQuery) Delete(o *OrganizationsAuditor, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single OrganizationsAuditor record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-organizationsauditorquery-deleteall"},"func ","(","organizationsAuditorQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsAuditorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-organizationsauditorquery-deleteallslice"},"func ","(","organizationsAuditorQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsAuditorQuery) DeleteAllSlice(o OrganizationsAuditorSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-organizationsauditorquery-exists"},"func ","(","organizationsAuditorQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsAuditorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-organizationsauditorquery-insert"},"func ","(","organizationsAuditorQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsAuditorQuery) Insert(o *OrganizationsAuditor, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-organizationsauditorquery-one"},"func ","(","organizationsAuditorQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsAuditorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationsAuditor, error)\n")),(0,o.kt)("p",null,"One returns a single organizationsAuditor record from the query","."),(0,o.kt)("h3",{id:"func-organizationsauditorquery-organization"},"func ","(","organizationsAuditorQuery",")"," Organization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsAuditorQuery) Organization(o *OrganizationsAuditor, mods ...qm.QueryMod) organizationQuery\n")),(0,o.kt)("p",null,"Organization pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-organizationsauditorquery-reload"},"func ","(","organizationsAuditorQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsAuditorQuery) Reload(o *OrganizationsAuditor, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-organizationsauditorquery-reloadall"},"func ","(","organizationsAuditorQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsAuditorQuery) ReloadAll(o *OrganizationsAuditorSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-organizationsauditorquery-setorganization"},"func ","(","organizationsAuditorQuery",")"," SetOrganization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsAuditorQuery) SetOrganization(o *OrganizationsAuditor, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error\n")),(0,o.kt)("p",null,"SetOrganization of the organizationsAuditor to the related item","."," Sets o",".","R",".","Organization to related","."," Adds o to related",".","R",".","OrganizationsAuditors","."),(0,o.kt)("h3",{id:"func-organizationsauditorquery-setuser"},"func ","(","organizationsAuditorQuery",")"," SetUser"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsAuditorQuery) SetUser(o *OrganizationsAuditor, ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error\n")),(0,o.kt)("p",null,"SetUser of the organizationsAuditor to the related item","."," Sets o",".","R",".","User to related","."," Adds o to related",".","R",".","OrganizationsAuditors","."),(0,o.kt)("h3",{id:"func-organizationsauditorquery-update"},"func ","(","organizationsAuditorQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsAuditorQuery) Update(o *OrganizationsAuditor, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the OrganizationsAuditor","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-organizationsauditorquery-updateall"},"func ","(","organizationsAuditorQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsAuditorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-organizationsauditorquery-updateallslice"},"func ","(","organizationsAuditorQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsAuditorQuery) UpdateAllSlice(o OrganizationsAuditorSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-organizationsauditorquery-upsert"},"func ","(","organizationsAuditorQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsAuditorQuery) Upsert(o *OrganizationsAuditor, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h3",{id:"func-organizationsauditorquery-user"},"func ","(","organizationsAuditorQuery",")"," User"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsAuditorQuery) User(o *OrganizationsAuditor, mods ...qm.QueryMod) userQuery\n")),(0,o.kt)("p",null,"User pointed to by the foreign key","."),(0,o.kt)("h2",{id:"type-organizationsauditorr"},"type organizationsAuditorR"),(0,o.kt)("p",null,"organizationsAuditorR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type organizationsAuditorR struct {\n    Organization *Organization `boil:"Organization" json:"Organization" toml:"Organization" yaml:"Organization"`\n    User         *User         `boil:"User" json:"User" toml:"User" yaml:"User"`\n}\n')),(0,o.kt)("h3",{id:"func-organizationsauditorr-newstruct"},"func ","(","*","organizationsAuditorR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*organizationsAuditorR) NewStruct() *organizationsAuditorR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-organizationsbillingmanagerl"},"type organizationsBillingManagerL"),(0,o.kt)("p",null,"organizationsBillingManagerL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type organizationsBillingManagerL struct{}\n")),(0,o.kt)("h3",{id:"func-organizationsbillingmanagerl-loadorganization"},"func ","(","organizationsBillingManagerL",")"," LoadOrganization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationsBillingManagerL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationsBillingManager interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadOrganization allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-organizationsbillingmanagerl-loaduser"},"func ","(","organizationsBillingManagerL",")"," LoadUser"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationsBillingManagerL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationsBillingManager interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadUser allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-organizationsbillingmanagerquery"},"type organizationsBillingManagerQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type organizationsBillingManagerQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-organizationsbillingmanagers"},"func OrganizationsBillingManagers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func OrganizationsBillingManagers(mods ...qm.QueryMod) organizationsBillingManagerQuery\n")),(0,o.kt)("p",null,"OrganizationsBillingManagers retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-organizationsbillingmanagerquery-all"},"func ","(","organizationsBillingManagerQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsBillingManagerQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationsBillingManagerSlice, error)\n")),(0,o.kt)("p",null,"All returns all OrganizationsBillingManager records from the query","."),(0,o.kt)("h3",{id:"func-organizationsbillingmanagerquery-count"},"func ","(","organizationsBillingManagerQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsBillingManagerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all OrganizationsBillingManager records in the query","."),(0,o.kt)("h3",{id:"func-organizationsbillingmanagerquery-delete"},"func ","(","organizationsBillingManagerQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsBillingManagerQuery) Delete(o *OrganizationsBillingManager, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single OrganizationsBillingManager record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-organizationsbillingmanagerquery-deleteall"},"func ","(","organizationsBillingManagerQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsBillingManagerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-organizationsbillingmanagerquery-deleteallslice"},"func ","(","organizationsBillingManagerQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsBillingManagerQuery) DeleteAllSlice(o OrganizationsBillingManagerSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-organizationsbillingmanagerquery-exists"},"func ","(","organizationsBillingManagerQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsBillingManagerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-organizationsbillingmanagerquery-insert"},"func ","(","organizationsBillingManagerQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsBillingManagerQuery) Insert(o *OrganizationsBillingManager, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-organizationsbillingmanagerquery-one"},"func ","(","organizationsBillingManagerQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsBillingManagerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationsBillingManager, error)\n")),(0,o.kt)("p",null,"One returns a single organizationsBillingManager record from the query","."),(0,o.kt)("h3",{id:"func-organizationsbillingmanagerquery-organization"},"func ","(","organizationsBillingManagerQuery",")"," Organization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsBillingManagerQuery) Organization(o *OrganizationsBillingManager, mods ...qm.QueryMod) organizationQuery\n")),(0,o.kt)("p",null,"Organization pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-organizationsbillingmanagerquery-reload"},"func ","(","organizationsBillingManagerQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsBillingManagerQuery) Reload(o *OrganizationsBillingManager, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-organizationsbillingmanagerquery-reloadall"},"func ","(","organizationsBillingManagerQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsBillingManagerQuery) ReloadAll(o *OrganizationsBillingManagerSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-organizationsbillingmanagerquery-setorganization"},"func ","(","organizationsBillingManagerQuery",")"," SetOrganization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsBillingManagerQuery) SetOrganization(o *OrganizationsBillingManager, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error\n")),(0,o.kt)("p",null,"SetOrganization of the organizationsBillingManager to the related item","."," Sets o",".","R",".","Organization to related","."," Adds o to related",".","R",".","OrganizationsBillingManagers","."),(0,o.kt)("h3",{id:"func-organizationsbillingmanagerquery-setuser"},"func ","(","organizationsBillingManagerQuery",")"," SetUser"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsBillingManagerQuery) SetUser(o *OrganizationsBillingManager, ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error\n")),(0,o.kt)("p",null,"SetUser of the organizationsBillingManager to the related item","."," Sets o",".","R",".","User to related","."," Adds o to related",".","R",".","OrganizationsBillingManagers","."),(0,o.kt)("h3",{id:"func-organizationsbillingmanagerquery-update"},"func ","(","organizationsBillingManagerQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsBillingManagerQuery) Update(o *OrganizationsBillingManager, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the OrganizationsBillingManager","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-organizationsbillingmanagerquery-updateall"},"func ","(","organizationsBillingManagerQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsBillingManagerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-organizationsbillingmanagerquery-updateallslice"},"func ","(","organizationsBillingManagerQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsBillingManagerQuery) UpdateAllSlice(o OrganizationsBillingManagerSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-organizationsbillingmanagerquery-upsert"},"func ","(","organizationsBillingManagerQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsBillingManagerQuery) Upsert(o *OrganizationsBillingManager, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h3",{id:"func-organizationsbillingmanagerquery-user"},"func ","(","organizationsBillingManagerQuery",")"," User"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsBillingManagerQuery) User(o *OrganizationsBillingManager, mods ...qm.QueryMod) userQuery\n")),(0,o.kt)("p",null,"User pointed to by the foreign key","."),(0,o.kt)("h2",{id:"type-organizationsbillingmanagerr"},"type organizationsBillingManagerR"),(0,o.kt)("p",null,"organizationsBillingManagerR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type organizationsBillingManagerR struct {\n    Organization *Organization `boil:"Organization" json:"Organization" toml:"Organization" yaml:"Organization"`\n    User         *User         `boil:"User" json:"User" toml:"User" yaml:"User"`\n}\n')),(0,o.kt)("h3",{id:"func-organizationsbillingmanagerr-newstruct"},"func ","(","*","organizationsBillingManagerR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*organizationsBillingManagerR) NewStruct() *organizationsBillingManagerR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-organizationsmanagerl"},"type organizationsManagerL"),(0,o.kt)("p",null,"organizationsManagerL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type organizationsManagerL struct{}\n")),(0,o.kt)("h3",{id:"func-organizationsmanagerl-loadorganization"},"func ","(","organizationsManagerL",")"," LoadOrganization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationsManagerL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationsManager interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadOrganization allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-organizationsmanagerl-loaduser"},"func ","(","organizationsManagerL",")"," LoadUser"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationsManagerL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationsManager interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadUser allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-organizationsmanagerquery"},"type organizationsManagerQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type organizationsManagerQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-organizationsmanagers"},"func OrganizationsManagers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func OrganizationsManagers(mods ...qm.QueryMod) organizationsManagerQuery\n")),(0,o.kt)("p",null,"OrganizationsManagers retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-organizationsmanagerquery-all"},"func ","(","organizationsManagerQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsManagerQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationsManagerSlice, error)\n")),(0,o.kt)("p",null,"All returns all OrganizationsManager records from the query","."),(0,o.kt)("h3",{id:"func-organizationsmanagerquery-count"},"func ","(","organizationsManagerQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsManagerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all OrganizationsManager records in the query","."),(0,o.kt)("h3",{id:"func-organizationsmanagerquery-delete"},"func ","(","organizationsManagerQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsManagerQuery) Delete(o *OrganizationsManager, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single OrganizationsManager record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-organizationsmanagerquery-deleteall"},"func ","(","organizationsManagerQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsManagerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-organizationsmanagerquery-deleteallslice"},"func ","(","organizationsManagerQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsManagerQuery) DeleteAllSlice(o OrganizationsManagerSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-organizationsmanagerquery-exists"},"func ","(","organizationsManagerQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsManagerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-organizationsmanagerquery-insert"},"func ","(","organizationsManagerQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsManagerQuery) Insert(o *OrganizationsManager, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-organizationsmanagerquery-one"},"func ","(","organizationsManagerQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsManagerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationsManager, error)\n")),(0,o.kt)("p",null,"One returns a single organizationsManager record from the query","."),(0,o.kt)("h3",{id:"func-organizationsmanagerquery-organization"},"func ","(","organizationsManagerQuery",")"," Organization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsManagerQuery) Organization(o *OrganizationsManager, mods ...qm.QueryMod) organizationQuery\n")),(0,o.kt)("p",null,"Organization pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-organizationsmanagerquery-reload"},"func ","(","organizationsManagerQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsManagerQuery) Reload(o *OrganizationsManager, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-organizationsmanagerquery-reloadall"},"func ","(","organizationsManagerQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsManagerQuery) ReloadAll(o *OrganizationsManagerSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-organizationsmanagerquery-setorganization"},"func ","(","organizationsManagerQuery",")"," SetOrganization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsManagerQuery) SetOrganization(o *OrganizationsManager, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error\n")),(0,o.kt)("p",null,"SetOrganization of the organizationsManager to the related item","."," Sets o",".","R",".","Organization to related","."," Adds o to related",".","R",".","OrganizationsManagers","."),(0,o.kt)("h3",{id:"func-organizationsmanagerquery-setuser"},"func ","(","organizationsManagerQuery",")"," SetUser"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsManagerQuery) SetUser(o *OrganizationsManager, ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error\n")),(0,o.kt)("p",null,"SetUser of the organizationsManager to the related item","."," Sets o",".","R",".","User to related","."," Adds o to related",".","R",".","OrganizationsManagers","."),(0,o.kt)("h3",{id:"func-organizationsmanagerquery-update"},"func ","(","organizationsManagerQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsManagerQuery) Update(o *OrganizationsManager, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the OrganizationsManager","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-organizationsmanagerquery-updateall"},"func ","(","organizationsManagerQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsManagerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-organizationsmanagerquery-updateallslice"},"func ","(","organizationsManagerQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsManagerQuery) UpdateAllSlice(o OrganizationsManagerSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-organizationsmanagerquery-upsert"},"func ","(","organizationsManagerQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsManagerQuery) Upsert(o *OrganizationsManager, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h3",{id:"func-organizationsmanagerquery-user"},"func ","(","organizationsManagerQuery",")"," User"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsManagerQuery) User(o *OrganizationsManager, mods ...qm.QueryMod) userQuery\n")),(0,o.kt)("p",null,"User pointed to by the foreign key","."),(0,o.kt)("h2",{id:"type-organizationsmanagerr"},"type organizationsManagerR"),(0,o.kt)("p",null,"organizationsManagerR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type organizationsManagerR struct {\n    Organization *Organization `boil:"Organization" json:"Organization" toml:"Organization" yaml:"Organization"`\n    User         *User         `boil:"User" json:"User" toml:"User" yaml:"User"`\n}\n')),(0,o.kt)("h3",{id:"func-organizationsmanagerr-newstruct"},"func ","(","*","organizationsManagerR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*organizationsManagerR) NewStruct() *organizationsManagerR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-organizationsprivatedomainl"},"type organizationsPrivateDomainL"),(0,o.kt)("p",null,"organizationsPrivateDomainL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type organizationsPrivateDomainL struct{}\n")),(0,o.kt)("h3",{id:"func-organizationsprivatedomainl-loadorganization"},"func ","(","organizationsPrivateDomainL",")"," LoadOrganization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationsPrivateDomainL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationsPrivateDomain interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadOrganization allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-organizationsprivatedomainl-loadprivatedomain"},"func ","(","organizationsPrivateDomainL",")"," LoadPrivateDomain"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationsPrivateDomainL) LoadPrivateDomain(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationsPrivateDomain interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadPrivateDomain allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-organizationsprivatedomainquery"},"type organizationsPrivateDomainQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type organizationsPrivateDomainQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-organizationsprivatedomains"},"func OrganizationsPrivateDomains"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func OrganizationsPrivateDomains(mods ...qm.QueryMod) organizationsPrivateDomainQuery\n")),(0,o.kt)("p",null,"OrganizationsPrivateDomains retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-organizationsprivatedomainquery-all"},"func ","(","organizationsPrivateDomainQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsPrivateDomainQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationsPrivateDomainSlice, error)\n")),(0,o.kt)("p",null,"All returns all OrganizationsPrivateDomain records from the query","."),(0,o.kt)("h3",{id:"func-organizationsprivatedomainquery-count"},"func ","(","organizationsPrivateDomainQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsPrivateDomainQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all OrganizationsPrivateDomain records in the query","."),(0,o.kt)("h3",{id:"func-organizationsprivatedomainquery-delete"},"func ","(","organizationsPrivateDomainQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsPrivateDomainQuery) Delete(o *OrganizationsPrivateDomain, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single OrganizationsPrivateDomain record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-organizationsprivatedomainquery-deleteall"},"func ","(","organizationsPrivateDomainQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsPrivateDomainQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-organizationsprivatedomainquery-deleteallslice"},"func ","(","organizationsPrivateDomainQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsPrivateDomainQuery) DeleteAllSlice(o OrganizationsPrivateDomainSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-organizationsprivatedomainquery-exists"},"func ","(","organizationsPrivateDomainQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsPrivateDomainQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-organizationsprivatedomainquery-insert"},"func ","(","organizationsPrivateDomainQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsPrivateDomainQuery) Insert(o *OrganizationsPrivateDomain, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-organizationsprivatedomainquery-one"},"func ","(","organizationsPrivateDomainQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsPrivateDomainQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationsPrivateDomain, error)\n")),(0,o.kt)("p",null,"One returns a single organizationsPrivateDomain record from the query","."),(0,o.kt)("h3",{id:"func-organizationsprivatedomainquery-organization"},"func ","(","organizationsPrivateDomainQuery",")"," Organization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsPrivateDomainQuery) Organization(o *OrganizationsPrivateDomain, mods ...qm.QueryMod) organizationQuery\n")),(0,o.kt)("p",null,"Organization pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-organizationsprivatedomainquery-privatedomain"},"func ","(","organizationsPrivateDomainQuery",")"," PrivateDomain"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsPrivateDomainQuery) PrivateDomain(o *OrganizationsPrivateDomain, mods ...qm.QueryMod) domainQuery\n")),(0,o.kt)("p",null,"PrivateDomain pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-organizationsprivatedomainquery-reload"},"func ","(","organizationsPrivateDomainQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsPrivateDomainQuery) Reload(o *OrganizationsPrivateDomain, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-organizationsprivatedomainquery-reloadall"},"func ","(","organizationsPrivateDomainQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsPrivateDomainQuery) ReloadAll(o *OrganizationsPrivateDomainSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-organizationsprivatedomainquery-setorganization"},"func ","(","organizationsPrivateDomainQuery",")"," SetOrganization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsPrivateDomainQuery) SetOrganization(o *OrganizationsPrivateDomain, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error\n")),(0,o.kt)("p",null,"SetOrganization of the organizationsPrivateDomain to the related item","."," Sets o",".","R",".","Organization to related","."," Adds o to related",".","R",".","OrganizationsPrivateDomains","."),(0,o.kt)("h3",{id:"func-organizationsprivatedomainquery-setprivatedomain"},"func ","(","organizationsPrivateDomainQuery",")"," SetPrivateDomain"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsPrivateDomainQuery) SetPrivateDomain(o *OrganizationsPrivateDomain, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Domain) error\n")),(0,o.kt)("p",null,"SetPrivateDomain of the organizationsPrivateDomain to the related item","."," Sets o",".","R",".","PrivateDomain to related","."," Adds o to related",".","R",".","PrivateDomainOrganizationsPrivateDomains","."),(0,o.kt)("h3",{id:"func-organizationsprivatedomainquery-update"},"func ","(","organizationsPrivateDomainQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsPrivateDomainQuery) Update(o *OrganizationsPrivateDomain, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the OrganizationsPrivateDomain","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-organizationsprivatedomainquery-updateall"},"func ","(","organizationsPrivateDomainQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsPrivateDomainQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-organizationsprivatedomainquery-updateallslice"},"func ","(","organizationsPrivateDomainQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsPrivateDomainQuery) UpdateAllSlice(o OrganizationsPrivateDomainSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-organizationsprivatedomainquery-upsert"},"func ","(","organizationsPrivateDomainQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsPrivateDomainQuery) Upsert(o *OrganizationsPrivateDomain, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-organizationsprivatedomainr"},"type organizationsPrivateDomainR"),(0,o.kt)("p",null,"organizationsPrivateDomainR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type organizationsPrivateDomainR struct {\n    Organization  *Organization `boil:"Organization" json:"Organization" toml:"Organization" yaml:"Organization"`\n    PrivateDomain *Domain       `boil:"PrivateDomain" json:"PrivateDomain" toml:"PrivateDomain" yaml:"PrivateDomain"`\n}\n')),(0,o.kt)("h3",{id:"func-organizationsprivatedomainr-newstruct"},"func ","(","*","organizationsPrivateDomainR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*organizationsPrivateDomainR) NewStruct() *organizationsPrivateDomainR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-organizationsuserl"},"type organizationsUserL"),(0,o.kt)("p",null,"organizationsUserL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type organizationsUserL struct{}\n")),(0,o.kt)("h3",{id:"func-organizationsuserl-loadorganization"},"func ","(","organizationsUserL",")"," LoadOrganization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationsUserL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationsUser interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadOrganization allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-organizationsuserl-loaduser"},"func ","(","organizationsUserL",")"," LoadUser"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (organizationsUserL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationsUser interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadUser allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-organizationsuserquery"},"type organizationsUserQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type organizationsUserQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-organizationsusers"},"func OrganizationsUsers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func OrganizationsUsers(mods ...qm.QueryMod) organizationsUserQuery\n")),(0,o.kt)("p",null,"OrganizationsUsers retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-organizationsuserquery-all"},"func ","(","organizationsUserQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationsUserSlice, error)\n")),(0,o.kt)("p",null,"All returns all OrganizationsUser records from the query","."),(0,o.kt)("h3",{id:"func-organizationsuserquery-count"},"func ","(","organizationsUserQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all OrganizationsUser records in the query","."),(0,o.kt)("h3",{id:"func-organizationsuserquery-delete"},"func ","(","organizationsUserQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsUserQuery) Delete(o *OrganizationsUser, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single OrganizationsUser record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-organizationsuserquery-deleteall"},"func ","(","organizationsUserQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-organizationsuserquery-deleteallslice"},"func ","(","organizationsUserQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsUserQuery) DeleteAllSlice(o OrganizationsUserSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-organizationsuserquery-exists"},"func ","(","organizationsUserQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-organizationsuserquery-insert"},"func ","(","organizationsUserQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsUserQuery) Insert(o *OrganizationsUser, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-organizationsuserquery-one"},"func ","(","organizationsUserQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationsUser, error)\n")),(0,o.kt)("p",null,"One returns a single organizationsUser record from the query","."),(0,o.kt)("h3",{id:"func-organizationsuserquery-organization"},"func ","(","organizationsUserQuery",")"," Organization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsUserQuery) Organization(o *OrganizationsUser, mods ...qm.QueryMod) organizationQuery\n")),(0,o.kt)("p",null,"Organization pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-organizationsuserquery-reload"},"func ","(","organizationsUserQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsUserQuery) Reload(o *OrganizationsUser, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-organizationsuserquery-reloadall"},"func ","(","organizationsUserQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsUserQuery) ReloadAll(o *OrganizationsUserSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-organizationsuserquery-setorganization"},"func ","(","organizationsUserQuery",")"," SetOrganization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsUserQuery) SetOrganization(o *OrganizationsUser, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error\n")),(0,o.kt)("p",null,"SetOrganization of the organizationsUser to the related item","."," Sets o",".","R",".","Organization to related","."," Adds o to related",".","R",".","OrganizationsUsers","."),(0,o.kt)("h3",{id:"func-organizationsuserquery-setuser"},"func ","(","organizationsUserQuery",")"," SetUser"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsUserQuery) SetUser(o *OrganizationsUser, ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error\n")),(0,o.kt)("p",null,"SetUser of the organizationsUser to the related item","."," Sets o",".","R",".","User to related","."," Adds o to related",".","R",".","OrganizationsUsers","."),(0,o.kt)("h3",{id:"func-organizationsuserquery-update"},"func ","(","organizationsUserQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsUserQuery) Update(o *OrganizationsUser, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the OrganizationsUser","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-organizationsuserquery-updateall"},"func ","(","organizationsUserQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-organizationsuserquery-updateallslice"},"func ","(","organizationsUserQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsUserQuery) UpdateAllSlice(o OrganizationsUserSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-organizationsuserquery-upsert"},"func ","(","organizationsUserQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsUserQuery) Upsert(o *OrganizationsUser, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h3",{id:"func-organizationsuserquery-user"},"func ","(","organizationsUserQuery",")"," User"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q organizationsUserQuery) User(o *OrganizationsUser, mods ...qm.QueryMod) userQuery\n")),(0,o.kt)("p",null,"User pointed to by the foreign key","."),(0,o.kt)("h2",{id:"type-organizationsuserr"},"type organizationsUserR"),(0,o.kt)("p",null,"organizationsUserR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type organizationsUserR struct {\n    Organization *Organization `boil:"Organization" json:"Organization" toml:"Organization" yaml:"Organization"`\n    User         *User         `boil:"User" json:"User" toml:"User" yaml:"User"`\n}\n')),(0,o.kt)("h3",{id:"func-organizationsuserr-newstruct"},"func ","(","*","organizationsUserR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*organizationsUserR) NewStruct() *organizationsUserR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-orphanedblobl"},"type orphanedBlobL"),(0,o.kt)("p",null,"orphanedBlobL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type orphanedBlobL struct{}\n")),(0,o.kt)("h2",{id:"type-orphanedblobquery"},"type orphanedBlobQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type orphanedBlobQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-orphanedblobs"},"func OrphanedBlobs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func OrphanedBlobs(mods ...qm.QueryMod) orphanedBlobQuery\n")),(0,o.kt)("p",null,"OrphanedBlobs retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-orphanedblobquery-all"},"func ","(","orphanedBlobQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q orphanedBlobQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrphanedBlobSlice, error)\n")),(0,o.kt)("p",null,"All returns all OrphanedBlob records from the query","."),(0,o.kt)("h3",{id:"func-orphanedblobquery-count"},"func ","(","orphanedBlobQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q orphanedBlobQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all OrphanedBlob records in the query","."),(0,o.kt)("h3",{id:"func-orphanedblobquery-delete"},"func ","(","orphanedBlobQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q orphanedBlobQuery) Delete(o *OrphanedBlob, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single OrphanedBlob record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-orphanedblobquery-deleteall"},"func ","(","orphanedBlobQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q orphanedBlobQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-orphanedblobquery-deleteallslice"},"func ","(","orphanedBlobQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q orphanedBlobQuery) DeleteAllSlice(o OrphanedBlobSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-orphanedblobquery-exists"},"func ","(","orphanedBlobQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q orphanedBlobQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-orphanedblobquery-insert"},"func ","(","orphanedBlobQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q orphanedBlobQuery) Insert(o *OrphanedBlob, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-orphanedblobquery-one"},"func ","(","orphanedBlobQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q orphanedBlobQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrphanedBlob, error)\n")),(0,o.kt)("p",null,"One returns a single orphanedBlob record from the query","."),(0,o.kt)("h3",{id:"func-orphanedblobquery-reload"},"func ","(","orphanedBlobQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q orphanedBlobQuery) Reload(o *OrphanedBlob, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-orphanedblobquery-reloadall"},"func ","(","orphanedBlobQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q orphanedBlobQuery) ReloadAll(o *OrphanedBlobSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-orphanedblobquery-update"},"func ","(","orphanedBlobQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q orphanedBlobQuery) Update(o *OrphanedBlob, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the OrphanedBlob","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-orphanedblobquery-updateall"},"func ","(","orphanedBlobQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q orphanedBlobQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-orphanedblobquery-updateallslice"},"func ","(","orphanedBlobQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q orphanedBlobQuery) UpdateAllSlice(o OrphanedBlobSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-orphanedblobquery-upsert"},"func ","(","orphanedBlobQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q orphanedBlobQuery) Upsert(o *OrphanedBlob, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-orphanedblobr"},"type orphanedBlobR"),(0,o.kt)("p",null,"orphanedBlobR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type orphanedBlobR struct {\n}\n")),(0,o.kt)("h3",{id:"func-orphanedblobr-newstruct"},"func ","(","*","orphanedBlobR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*orphanedBlobR) NewStruct() *orphanedBlobR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-packageannotationl"},"type packageAnnotationL"),(0,o.kt)("p",null,"packageAnnotationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type packageAnnotationL struct{}\n")),(0,o.kt)("h3",{id:"func-packageannotationl-loadresource"},"func ","(","packageAnnotationL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (packageAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybePackageAnnotation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-packageannotationquery"},"type packageAnnotationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type packageAnnotationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-packageannotations"},"func PackageAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func PackageAnnotations(mods ...qm.QueryMod) packageAnnotationQuery\n")),(0,o.kt)("p",null,"PackageAnnotations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-packageannotationquery-all"},"func ","(","packageAnnotationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (PackageAnnotationSlice, error)\n")),(0,o.kt)("p",null,"All returns all PackageAnnotation records from the query","."),(0,o.kt)("h3",{id:"func-packageannotationquery-count"},"func ","(","packageAnnotationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all PackageAnnotation records in the query","."),(0,o.kt)("h3",{id:"func-packageannotationquery-delete"},"func ","(","packageAnnotationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageAnnotationQuery) Delete(o *PackageAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single PackageAnnotation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-packageannotationquery-deleteall"},"func ","(","packageAnnotationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-packageannotationquery-deleteallslice"},"func ","(","packageAnnotationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageAnnotationQuery) DeleteAllSlice(o PackageAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-packageannotationquery-exists"},"func ","(","packageAnnotationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-packageannotationquery-insert"},"func ","(","packageAnnotationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageAnnotationQuery) Insert(o *PackageAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-packageannotationquery-one"},"func ","(","packageAnnotationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PackageAnnotation, error)\n")),(0,o.kt)("p",null,"One returns a single packageAnnotation record from the query","."),(0,o.kt)("h3",{id:"func-packageannotationquery-reload"},"func ","(","packageAnnotationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageAnnotationQuery) Reload(o *PackageAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-packageannotationquery-reloadall"},"func ","(","packageAnnotationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageAnnotationQuery) ReloadAll(o *PackageAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-packageannotationquery-removeresource"},"func ","(","packageAnnotationQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageAnnotationQuery) RemoveResource(o *PackageAnnotation, ctx context.Context, exec boil.ContextExecutor, related *Package) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-packageannotationquery-resource"},"func ","(","packageAnnotationQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageAnnotationQuery) Resource(o *PackageAnnotation, mods ...qm.QueryMod) packageQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-packageannotationquery-setresource"},"func ","(","packageAnnotationQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageAnnotationQuery) SetResource(o *PackageAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Package) error\n")),(0,o.kt)("p",null,"SetResource of the packageAnnotation to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourcePackageAnnotations","."),(0,o.kt)("h3",{id:"func-packageannotationquery-update"},"func ","(","packageAnnotationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageAnnotationQuery) Update(o *PackageAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the PackageAnnotation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-packageannotationquery-updateall"},"func ","(","packageAnnotationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-packageannotationquery-updateallslice"},"func ","(","packageAnnotationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageAnnotationQuery) UpdateAllSlice(o PackageAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-packageannotationquery-upsert"},"func ","(","packageAnnotationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageAnnotationQuery) Upsert(o *PackageAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-packageannotationr"},"type packageAnnotationR"),(0,o.kt)("p",null,"packageAnnotationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type packageAnnotationR struct {\n    Resource *Package `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-packageannotationr-newstruct"},"func ","(","*","packageAnnotationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*packageAnnotationR) NewStruct() *packageAnnotationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-packagel"},"type packageL"),(0,o.kt)("p",null,"packageL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type packageL struct{}\n")),(0,o.kt)("h3",{id:"func-packagel-loadapp"},"func ","(","packageL",")"," LoadApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (packageL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybePackage interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadApp allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-packagel-loadresourcepackageannotations"},"func ","(","packageL",")"," LoadResourcePackageAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (packageL) LoadResourcePackageAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybePackage interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourcePackageAnnotations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-packagel-loadresourcepackagelabels"},"func ","(","packageL",")"," LoadResourcePackageLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (packageL) LoadResourcePackageLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybePackage interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourcePackageLabels allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-packagelabell"},"type packageLabelL"),(0,o.kt)("p",null,"packageLabelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type packageLabelL struct{}\n")),(0,o.kt)("h3",{id:"func-packagelabell-loadresource"},"func ","(","packageLabelL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (packageLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybePackageLabel interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-packagelabelquery"},"type packageLabelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type packageLabelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-packagelabels"},"func PackageLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func PackageLabels(mods ...qm.QueryMod) packageLabelQuery\n")),(0,o.kt)("p",null,"PackageLabels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-packagelabelquery-all"},"func ","(","packageLabelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (PackageLabelSlice, error)\n")),(0,o.kt)("p",null,"All returns all PackageLabel records from the query","."),(0,o.kt)("h3",{id:"func-packagelabelquery-count"},"func ","(","packageLabelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all PackageLabel records in the query","."),(0,o.kt)("h3",{id:"func-packagelabelquery-delete"},"func ","(","packageLabelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageLabelQuery) Delete(o *PackageLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single PackageLabel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-packagelabelquery-deleteall"},"func ","(","packageLabelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-packagelabelquery-deleteallslice"},"func ","(","packageLabelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageLabelQuery) DeleteAllSlice(o PackageLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-packagelabelquery-exists"},"func ","(","packageLabelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-packagelabelquery-insert"},"func ","(","packageLabelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageLabelQuery) Insert(o *PackageLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-packagelabelquery-one"},"func ","(","packageLabelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PackageLabel, error)\n")),(0,o.kt)("p",null,"One returns a single packageLabel record from the query","."),(0,o.kt)("h3",{id:"func-packagelabelquery-reload"},"func ","(","packageLabelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageLabelQuery) Reload(o *PackageLabel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-packagelabelquery-reloadall"},"func ","(","packageLabelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageLabelQuery) ReloadAll(o *PackageLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-packagelabelquery-removeresource"},"func ","(","packageLabelQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageLabelQuery) RemoveResource(o *PackageLabel, ctx context.Context, exec boil.ContextExecutor, related *Package) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-packagelabelquery-resource"},"func ","(","packageLabelQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageLabelQuery) Resource(o *PackageLabel, mods ...qm.QueryMod) packageQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-packagelabelquery-setresource"},"func ","(","packageLabelQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageLabelQuery) SetResource(o *PackageLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Package) error\n")),(0,o.kt)("p",null,"SetResource of the packageLabel to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourcePackageLabels","."),(0,o.kt)("h3",{id:"func-packagelabelquery-update"},"func ","(","packageLabelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageLabelQuery) Update(o *PackageLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the PackageLabel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-packagelabelquery-updateall"},"func ","(","packageLabelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-packagelabelquery-updateallslice"},"func ","(","packageLabelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageLabelQuery) UpdateAllSlice(o PackageLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-packagelabelquery-upsert"},"func ","(","packageLabelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageLabelQuery) Upsert(o *PackageLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-packagelabelr"},"type packageLabelR"),(0,o.kt)("p",null,"packageLabelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type packageLabelR struct {\n    Resource *Package `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-packagelabelr-newstruct"},"func ","(","*","packageLabelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*packageLabelR) NewStruct() *packageLabelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-packagequery"},"type packageQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type packageQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-packages"},"func Packages"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func Packages(mods ...qm.QueryMod) packageQuery\n")),(0,o.kt)("p",null,"Packages retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-packagequery-addresourcepackageannotations"},"func ","(","packageQuery",")"," AddResourcePackageAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) AddResourcePackageAnnotations(o *Package, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PackageAnnotation) error\n")),(0,o.kt)("p",null,"AddResourcePackageAnnotations adds the given related objects to the existing relationships of the package\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourcePackageAnnotations","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-packagequery-addresourcepackagelabels"},"func ","(","packageQuery",")"," AddResourcePackageLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) AddResourcePackageLabels(o *Package, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PackageLabel) error\n")),(0,o.kt)("p",null,"AddResourcePackageLabels adds the given related objects to the existing relationships of the package\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourcePackageLabels","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-packagequery-all"},"func ","(","packageQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) All(ctx context.Context, exec boil.ContextExecutor) (PackageSlice, error)\n")),(0,o.kt)("p",null,"All returns all Package records from the query","."),(0,o.kt)("h3",{id:"func-packagequery-app"},"func ","(","packageQuery",")"," App"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) App(o *Package, mods ...qm.QueryMod) appQuery\n")),(0,o.kt)("p",null,"App pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-packagequery-count"},"func ","(","packageQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all Package records in the query","."),(0,o.kt)("h3",{id:"func-packagequery-delete"},"func ","(","packageQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) Delete(o *Package, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single Package record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-packagequery-deleteall"},"func ","(","packageQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-packagequery-deleteallslice"},"func ","(","packageQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) DeleteAllSlice(o PackageSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-packagequery-exists"},"func ","(","packageQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-packagequery-insert"},"func ","(","packageQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) Insert(o *Package, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-packagequery-one"},"func ","(","packageQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Package, error)\n")),(0,o.kt)("p",null,"One returns a single package record from the query","."),(0,o.kt)("h3",{id:"func-packagequery-reload"},"func ","(","packageQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) Reload(o *Package, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-packagequery-reloadall"},"func ","(","packageQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) ReloadAll(o *PackageSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-packagequery-removeapp"},"func ","(","packageQuery",")"," RemoveApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) RemoveApp(o *Package, ctx context.Context, exec boil.ContextExecutor, related *App) error\n")),(0,o.kt)("p",null,"RemoveApp relationship","."," Sets o",".","R",".","App to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-packagequery-removeresourcepackageannotations"},"func ","(","packageQuery",")"," RemoveResourcePackageAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) RemoveResourcePackageAnnotations(o *Package, ctx context.Context, exec boil.ContextExecutor, related ...*PackageAnnotation) error\n")),(0,o.kt)("p",null,"RemoveResourcePackageAnnotations relationships from objects passed in","."," Removes related items from R",".","ResourcePackageAnnotations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-packagequery-removeresourcepackagelabels"},"func ","(","packageQuery",")"," RemoveResourcePackageLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) RemoveResourcePackageLabels(o *Package, ctx context.Context, exec boil.ContextExecutor, related ...*PackageLabel) error\n")),(0,o.kt)("p",null,"RemoveResourcePackageLabels relationships from objects passed in","."," Removes related items from R",".","ResourcePackageLabels ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-packagequery-resourcepackageannotations"},"func ","(","packageQuery",")"," ResourcePackageAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) ResourcePackageAnnotations(o *Package, mods ...qm.QueryMod) packageAnnotationQuery\n")),(0,o.kt)("p",null,"ResourcePackageAnnotations retrieves all the package","_","annotation's PackageAnnotations with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-packagequery-resourcepackagelabels"},"func ","(","packageQuery",")"," ResourcePackageLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) ResourcePackageLabels(o *Package, mods ...qm.QueryMod) packageLabelQuery\n")),(0,o.kt)("p",null,"ResourcePackageLabels retrieves all the package","_","label's PackageLabels with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-packagequery-setapp"},"func ","(","packageQuery",")"," SetApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) SetApp(o *Package, ctx context.Context, exec boil.ContextExecutor, insert bool, related *App) error\n")),(0,o.kt)("p",null,"SetApp of the package to the related item","."," Sets o",".","R",".","App to related","."," Adds o to related",".","R",".","Packages","."),(0,o.kt)("h3",{id:"func-packagequery-setresourcepackageannotations"},"func ","(","packageQuery",")"," SetResourcePackageAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) SetResourcePackageAnnotations(o *Package, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PackageAnnotation) error\n")),(0,o.kt)("p",null,"SetResourcePackageAnnotations removes all previously related items of the package replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourcePackageAnnotations accordingly","."," Replaces o",".","R",".","ResourcePackageAnnotations with related","."," Sets related",".","R",".","Resource's ResourcePackageAnnotations accordingly","."),(0,o.kt)("h3",{id:"func-packagequery-setresourcepackagelabels"},"func ","(","packageQuery",")"," SetResourcePackageLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) SetResourcePackageLabels(o *Package, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PackageLabel) error\n")),(0,o.kt)("p",null,"SetResourcePackageLabels removes all previously related items of the package replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourcePackageLabels accordingly","."," Replaces o",".","R",".","ResourcePackageLabels with related","."," Sets related",".","R",".","Resource's ResourcePackageLabels accordingly","."),(0,o.kt)("h3",{id:"func-packagequery-update"},"func ","(","packageQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) Update(o *Package, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the Package","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-packagequery-updateall"},"func ","(","packageQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-packagequery-updateallslice"},"func ","(","packageQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) UpdateAllSlice(o PackageSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-packagequery-upsert"},"func ","(","packageQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q packageQuery) Upsert(o *Package, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-packager"},"type packageR"),(0,o.kt)("p",null,"packageR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type packageR struct {\n    App                        *App                   `boil:"App" json:"App" toml:"App" yaml:"App"`\n    ResourcePackageAnnotations PackageAnnotationSlice `boil:"ResourcePackageAnnotations" json:"ResourcePackageAnnotations" toml:"ResourcePackageAnnotations" yaml:"ResourcePackageAnnotations"`\n    ResourcePackageLabels      PackageLabelSlice      `boil:"ResourcePackageLabels" json:"ResourcePackageLabels" toml:"ResourcePackageLabels" yaml:"ResourcePackageLabels"`\n}\n')),(0,o.kt)("h3",{id:"func-packager-newstruct"},"func ","(","*","packageR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*packageR) NewStruct() *packageR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-processannotationl"},"type processAnnotationL"),(0,o.kt)("p",null,"processAnnotationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type processAnnotationL struct{}\n")),(0,o.kt)("h3",{id:"func-processannotationl-loadresource"},"func ","(","processAnnotationL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (processAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProcessAnnotation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-processannotationquery"},"type processAnnotationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type processAnnotationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-processannotations"},"func ProcessAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ProcessAnnotations(mods ...qm.QueryMod) processAnnotationQuery\n")),(0,o.kt)("p",null,"ProcessAnnotations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-processannotationquery-all"},"func ","(","processAnnotationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProcessAnnotationSlice, error)\n")),(0,o.kt)("p",null,"All returns all ProcessAnnotation records from the query","."),(0,o.kt)("h3",{id:"func-processannotationquery-count"},"func ","(","processAnnotationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ProcessAnnotation records in the query","."),(0,o.kt)("h3",{id:"func-processannotationquery-delete"},"func ","(","processAnnotationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processAnnotationQuery) Delete(o *ProcessAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ProcessAnnotation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-processannotationquery-deleteall"},"func ","(","processAnnotationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-processannotationquery-deleteallslice"},"func ","(","processAnnotationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processAnnotationQuery) DeleteAllSlice(o ProcessAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-processannotationquery-exists"},"func ","(","processAnnotationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-processannotationquery-insert"},"func ","(","processAnnotationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processAnnotationQuery) Insert(o *ProcessAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-processannotationquery-one"},"func ","(","processAnnotationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProcessAnnotation, error)\n")),(0,o.kt)("p",null,"One returns a single processAnnotation record from the query","."),(0,o.kt)("h3",{id:"func-processannotationquery-reload"},"func ","(","processAnnotationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processAnnotationQuery) Reload(o *ProcessAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-processannotationquery-reloadall"},"func ","(","processAnnotationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processAnnotationQuery) ReloadAll(o *ProcessAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-processannotationquery-removeresource"},"func ","(","processAnnotationQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processAnnotationQuery) RemoveResource(o *ProcessAnnotation, ctx context.Context, exec boil.ContextExecutor, related *Process) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-processannotationquery-resource"},"func ","(","processAnnotationQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processAnnotationQuery) Resource(o *ProcessAnnotation, mods ...qm.QueryMod) processQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-processannotationquery-setresource"},"func ","(","processAnnotationQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processAnnotationQuery) SetResource(o *ProcessAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Process) error\n")),(0,o.kt)("p",null,"SetResource of the processAnnotation to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceProcessAnnotations","."),(0,o.kt)("h3",{id:"func-processannotationquery-update"},"func ","(","processAnnotationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processAnnotationQuery) Update(o *ProcessAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ProcessAnnotation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-processannotationquery-updateall"},"func ","(","processAnnotationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-processannotationquery-updateallslice"},"func ","(","processAnnotationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processAnnotationQuery) UpdateAllSlice(o ProcessAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-processannotationquery-upsert"},"func ","(","processAnnotationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processAnnotationQuery) Upsert(o *ProcessAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-processannotationr"},"type processAnnotationR"),(0,o.kt)("p",null,"processAnnotationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type processAnnotationR struct {\n    Resource *Process `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-processannotationr-newstruct"},"func ","(","*","processAnnotationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*processAnnotationR) NewStruct() *processAnnotationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-processl"},"type processL"),(0,o.kt)("p",null,"processL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type processL struct{}\n")),(0,o.kt)("h3",{id:"func-processl-loadapp"},"func ","(","processL",")"," LoadApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (processL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProcess interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadApp allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-processl-loadappappevents"},"func ","(","processL",")"," LoadAppAppEvents"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (processL) LoadAppAppEvents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProcess interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadAppAppEvents allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-processl-loadresourceprocessannotations"},"func ","(","processL",")"," LoadResourceProcessAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (processL) LoadResourceProcessAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProcess interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceProcessAnnotations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-processl-loadresourceprocesslabels"},"func ","(","processL",")"," LoadResourceProcessLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (processL) LoadResourceProcessLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProcess interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceProcessLabels allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-processlabell"},"type processLabelL"),(0,o.kt)("p",null,"processLabelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type processLabelL struct{}\n")),(0,o.kt)("h3",{id:"func-processlabell-loadresource"},"func ","(","processLabelL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (processLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProcessLabel interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-processlabelquery"},"type processLabelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type processLabelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-processlabels"},"func ProcessLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ProcessLabels(mods ...qm.QueryMod) processLabelQuery\n")),(0,o.kt)("p",null,"ProcessLabels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-processlabelquery-all"},"func ","(","processLabelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProcessLabelSlice, error)\n")),(0,o.kt)("p",null,"All returns all ProcessLabel records from the query","."),(0,o.kt)("h3",{id:"func-processlabelquery-count"},"func ","(","processLabelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ProcessLabel records in the query","."),(0,o.kt)("h3",{id:"func-processlabelquery-delete"},"func ","(","processLabelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processLabelQuery) Delete(o *ProcessLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ProcessLabel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-processlabelquery-deleteall"},"func ","(","processLabelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-processlabelquery-deleteallslice"},"func ","(","processLabelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processLabelQuery) DeleteAllSlice(o ProcessLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-processlabelquery-exists"},"func ","(","processLabelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-processlabelquery-insert"},"func ","(","processLabelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processLabelQuery) Insert(o *ProcessLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-processlabelquery-one"},"func ","(","processLabelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProcessLabel, error)\n")),(0,o.kt)("p",null,"One returns a single processLabel record from the query","."),(0,o.kt)("h3",{id:"func-processlabelquery-reload"},"func ","(","processLabelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processLabelQuery) Reload(o *ProcessLabel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-processlabelquery-reloadall"},"func ","(","processLabelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processLabelQuery) ReloadAll(o *ProcessLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-processlabelquery-removeresource"},"func ","(","processLabelQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processLabelQuery) RemoveResource(o *ProcessLabel, ctx context.Context, exec boil.ContextExecutor, related *Process) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-processlabelquery-resource"},"func ","(","processLabelQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processLabelQuery) Resource(o *ProcessLabel, mods ...qm.QueryMod) processQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-processlabelquery-setresource"},"func ","(","processLabelQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processLabelQuery) SetResource(o *ProcessLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Process) error\n")),(0,o.kt)("p",null,"SetResource of the processLabel to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceProcessLabels","."),(0,o.kt)("h3",{id:"func-processlabelquery-update"},"func ","(","processLabelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processLabelQuery) Update(o *ProcessLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ProcessLabel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-processlabelquery-updateall"},"func ","(","processLabelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-processlabelquery-updateallslice"},"func ","(","processLabelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processLabelQuery) UpdateAllSlice(o ProcessLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-processlabelquery-upsert"},"func ","(","processLabelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processLabelQuery) Upsert(o *ProcessLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-processlabelr"},"type processLabelR"),(0,o.kt)("p",null,"processLabelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type processLabelR struct {\n    Resource *Process `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-processlabelr-newstruct"},"func ","(","*","processLabelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*processLabelR) NewStruct() *processLabelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-processquery"},"type processQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type processQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-processes"},"func Processes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func Processes(mods ...qm.QueryMod) processQuery\n")),(0,o.kt)("p",null,"Processes retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-processquery-addappappevents"},"func ","(","processQuery",")"," AddAppAppEvents"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) AddAppAppEvents(o *Process, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AppEvent) error\n")),(0,o.kt)("p",null,"AddAppAppEvents adds the given related objects to the existing relationships of the process\\, optionally inserting them as new records","."," Appends related to o",".","R",".","AppAppEvents","."," Sets related",".","R",".","App appropriately","."),(0,o.kt)("h3",{id:"func-processquery-addresourceprocessannotations"},"func ","(","processQuery",")"," AddResourceProcessAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) AddResourceProcessAnnotations(o *Process, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProcessAnnotation) error\n")),(0,o.kt)("p",null,"AddResourceProcessAnnotations adds the given related objects to the existing relationships of the process\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceProcessAnnotations","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-processquery-addresourceprocesslabels"},"func ","(","processQuery",")"," AddResourceProcessLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) AddResourceProcessLabels(o *Process, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProcessLabel) error\n")),(0,o.kt)("p",null,"AddResourceProcessLabels adds the given related objects to the existing relationships of the process\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceProcessLabels","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-processquery-all"},"func ","(","processQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProcessSlice, error)\n")),(0,o.kt)("p",null,"All returns all Process records from the query","."),(0,o.kt)("h3",{id:"func-processquery-app"},"func ","(","processQuery",")"," App"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) App(o *Process, mods ...qm.QueryMod) appQuery\n")),(0,o.kt)("p",null,"App pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-processquery-appappevents"},"func ","(","processQuery",")"," AppAppEvents"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) AppAppEvents(o *Process, mods ...qm.QueryMod) appEventQuery\n")),(0,o.kt)("p",null,"AppAppEvents retrieves all the app","_","event's AppEvents with an executor via app","_","id column","."),(0,o.kt)("h3",{id:"func-processquery-count"},"func ","(","processQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all Process records in the query","."),(0,o.kt)("h3",{id:"func-processquery-delete"},"func ","(","processQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) Delete(o *Process, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single Process record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-processquery-deleteall"},"func ","(","processQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-processquery-deleteallslice"},"func ","(","processQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) DeleteAllSlice(o ProcessSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-processquery-exists"},"func ","(","processQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-processquery-insert"},"func ","(","processQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) Insert(o *Process, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-processquery-one"},"func ","(","processQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Process, error)\n")),(0,o.kt)("p",null,"One returns a single process record from the query","."),(0,o.kt)("h3",{id:"func-processquery-reload"},"func ","(","processQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) Reload(o *Process, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-processquery-reloadall"},"func ","(","processQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) ReloadAll(o *ProcessSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-processquery-removeapp"},"func ","(","processQuery",")"," RemoveApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) RemoveApp(o *Process, ctx context.Context, exec boil.ContextExecutor, related *App) error\n")),(0,o.kt)("p",null,"RemoveApp relationship","."," Sets o",".","R",".","App to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-processquery-removeresourceprocessannotations"},"func ","(","processQuery",")"," RemoveResourceProcessAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) RemoveResourceProcessAnnotations(o *Process, ctx context.Context, exec boil.ContextExecutor, related ...*ProcessAnnotation) error\n")),(0,o.kt)("p",null,"RemoveResourceProcessAnnotations relationships from objects passed in","."," Removes related items from R",".","ResourceProcessAnnotations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-processquery-removeresourceprocesslabels"},"func ","(","processQuery",")"," RemoveResourceProcessLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) RemoveResourceProcessLabels(o *Process, ctx context.Context, exec boil.ContextExecutor, related ...*ProcessLabel) error\n")),(0,o.kt)("p",null,"RemoveResourceProcessLabels relationships from objects passed in","."," Removes related items from R",".","ResourceProcessLabels ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-processquery-resourceprocessannotations"},"func ","(","processQuery",")"," ResourceProcessAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) ResourceProcessAnnotations(o *Process, mods ...qm.QueryMod) processAnnotationQuery\n")),(0,o.kt)("p",null,"ResourceProcessAnnotations retrieves all the process","_","annotation's ProcessAnnotations with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-processquery-resourceprocesslabels"},"func ","(","processQuery",")"," ResourceProcessLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) ResourceProcessLabels(o *Process, mods ...qm.QueryMod) processLabelQuery\n")),(0,o.kt)("p",null,"ResourceProcessLabels retrieves all the process","_","label's ProcessLabels with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-processquery-setapp"},"func ","(","processQuery",")"," SetApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) SetApp(o *Process, ctx context.Context, exec boil.ContextExecutor, insert bool, related *App) error\n")),(0,o.kt)("p",null,"SetApp of the process to the related item","."," Sets o",".","R",".","App to related","."," Adds o to related",".","R",".","Processes","."),(0,o.kt)("h3",{id:"func-processquery-setresourceprocessannotations"},"func ","(","processQuery",")"," SetResourceProcessAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) SetResourceProcessAnnotations(o *Process, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProcessAnnotation) error\n")),(0,o.kt)("p",null,"SetResourceProcessAnnotations removes all previously related items of the process replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceProcessAnnotations accordingly","."," Replaces o",".","R",".","ResourceProcessAnnotations with related","."," Sets related",".","R",".","Resource's ResourceProcessAnnotations accordingly","."),(0,o.kt)("h3",{id:"func-processquery-setresourceprocesslabels"},"func ","(","processQuery",")"," SetResourceProcessLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) SetResourceProcessLabels(o *Process, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProcessLabel) error\n")),(0,o.kt)("p",null,"SetResourceProcessLabels removes all previously related items of the process replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceProcessLabels accordingly","."," Replaces o",".","R",".","ResourceProcessLabels with related","."," Sets related",".","R",".","Resource's ResourceProcessLabels accordingly","."),(0,o.kt)("h3",{id:"func-processquery-update"},"func ","(","processQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) Update(o *Process, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the Process","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-processquery-updateall"},"func ","(","processQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-processquery-updateallslice"},"func ","(","processQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) UpdateAllSlice(o ProcessSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-processquery-upsert"},"func ","(","processQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q processQuery) Upsert(o *Process, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-processr"},"type processR"),(0,o.kt)("p",null,"processR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type processR struct {\n    App                        *App                   `boil:"App" json:"App" toml:"App" yaml:"App"`\n    AppAppEvents               AppEventSlice          `boil:"AppAppEvents" json:"AppAppEvents" toml:"AppAppEvents" yaml:"AppAppEvents"`\n    ResourceProcessAnnotations ProcessAnnotationSlice `boil:"ResourceProcessAnnotations" json:"ResourceProcessAnnotations" toml:"ResourceProcessAnnotations" yaml:"ResourceProcessAnnotations"`\n    ResourceProcessLabels      ProcessLabelSlice      `boil:"ResourceProcessLabels" json:"ResourceProcessLabels" toml:"ResourceProcessLabels" yaml:"ResourceProcessLabels"`\n}\n')),(0,o.kt)("h3",{id:"func-processr-newstruct"},"func ","(","*","processR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*processR) NewStruct() *processR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-quotadefinitionl"},"type quotaDefinitionL"),(0,o.kt)("p",null,"quotaDefinitionL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type quotaDefinitionL struct{}\n")),(0,o.kt)("h3",{id:"func-quotadefinitionl-loadorganizations"},"func ","(","quotaDefinitionL",")"," LoadOrganizations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (quotaDefinitionL) LoadOrganizations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeQuotaDefinition interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadOrganizations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-quotadefinitionquery"},"type quotaDefinitionQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type quotaDefinitionQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-quotadefinitions"},"func QuotaDefinitions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func QuotaDefinitions(mods ...qm.QueryMod) quotaDefinitionQuery\n")),(0,o.kt)("p",null,"QuotaDefinitions retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-quotadefinitionquery-addorganizations"},"func ","(","quotaDefinitionQuery",")"," AddOrganizations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q quotaDefinitionQuery) AddOrganizations(o *QuotaDefinition, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Organization) error\n")),(0,o.kt)("p",null,"AddOrganizations adds the given related objects to the existing relationships of the quota","_","definition\\, optionally inserting them as new records","."," Appends related to o",".","R",".","Organizations","."," Sets related",".","R",".","QuotaDefinition appropriately","."),(0,o.kt)("h3",{id:"func-quotadefinitionquery-all"},"func ","(","quotaDefinitionQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q quotaDefinitionQuery) All(ctx context.Context, exec boil.ContextExecutor) (QuotaDefinitionSlice, error)\n")),(0,o.kt)("p",null,"All returns all QuotaDefinition records from the query","."),(0,o.kt)("h3",{id:"func-quotadefinitionquery-count"},"func ","(","quotaDefinitionQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q quotaDefinitionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all QuotaDefinition records in the query","."),(0,o.kt)("h3",{id:"func-quotadefinitionquery-delete"},"func ","(","quotaDefinitionQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q quotaDefinitionQuery) Delete(o *QuotaDefinition, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single QuotaDefinition record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-quotadefinitionquery-deleteall"},"func ","(","quotaDefinitionQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q quotaDefinitionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-quotadefinitionquery-deleteallslice"},"func ","(","quotaDefinitionQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q quotaDefinitionQuery) DeleteAllSlice(o QuotaDefinitionSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-quotadefinitionquery-exists"},"func ","(","quotaDefinitionQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q quotaDefinitionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-quotadefinitionquery-insert"},"func ","(","quotaDefinitionQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q quotaDefinitionQuery) Insert(o *QuotaDefinition, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-quotadefinitionquery-one"},"func ","(","quotaDefinitionQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q quotaDefinitionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*QuotaDefinition, error)\n")),(0,o.kt)("p",null,"One returns a single quotaDefinition record from the query","."),(0,o.kt)("h3",{id:"func-quotadefinitionquery-organizations"},"func ","(","quotaDefinitionQuery",")"," Organizations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q quotaDefinitionQuery) Organizations(o *QuotaDefinition, mods ...qm.QueryMod) organizationQuery\n")),(0,o.kt)("p",null,"Organizations retrieves all the organization's Organizations with an executor","."),(0,o.kt)("h3",{id:"func-quotadefinitionquery-reload"},"func ","(","quotaDefinitionQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q quotaDefinitionQuery) Reload(o *QuotaDefinition, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-quotadefinitionquery-reloadall"},"func ","(","quotaDefinitionQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q quotaDefinitionQuery) ReloadAll(o *QuotaDefinitionSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-quotadefinitionquery-update"},"func ","(","quotaDefinitionQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q quotaDefinitionQuery) Update(o *QuotaDefinition, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the QuotaDefinition","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-quotadefinitionquery-updateall"},"func ","(","quotaDefinitionQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q quotaDefinitionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-quotadefinitionquery-updateallslice"},"func ","(","quotaDefinitionQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q quotaDefinitionQuery) UpdateAllSlice(o QuotaDefinitionSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-quotadefinitionquery-upsert"},"func ","(","quotaDefinitionQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q quotaDefinitionQuery) Upsert(o *QuotaDefinition, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-quotadefinitionr"},"type quotaDefinitionR"),(0,o.kt)("p",null,"quotaDefinitionR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type quotaDefinitionR struct {\n    Organizations OrganizationSlice `boil:"Organizations" json:"Organizations" toml:"Organizations" yaml:"Organizations"`\n}\n')),(0,o.kt)("h3",{id:"func-quotadefinitionr-newstruct"},"func ","(","*","quotaDefinitionR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*quotaDefinitionR) NewStruct() *quotaDefinitionR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-requestcountl"},"type requestCountL"),(0,o.kt)("p",null,"requestCountL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type requestCountL struct{}\n")),(0,o.kt)("h2",{id:"type-requestcountquery"},"type requestCountQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type requestCountQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-requestcounts"},"func RequestCounts"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RequestCounts(mods ...qm.QueryMod) requestCountQuery\n")),(0,o.kt)("p",null,"RequestCounts retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-requestcountquery-all"},"func ","(","requestCountQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q requestCountQuery) All(ctx context.Context, exec boil.ContextExecutor) (RequestCountSlice, error)\n")),(0,o.kt)("p",null,"All returns all RequestCount records from the query","."),(0,o.kt)("h3",{id:"func-requestcountquery-count"},"func ","(","requestCountQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q requestCountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all RequestCount records in the query","."),(0,o.kt)("h3",{id:"func-requestcountquery-delete"},"func ","(","requestCountQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q requestCountQuery) Delete(o *RequestCount, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single RequestCount record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-requestcountquery-deleteall"},"func ","(","requestCountQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q requestCountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-requestcountquery-deleteallslice"},"func ","(","requestCountQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q requestCountQuery) DeleteAllSlice(o RequestCountSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-requestcountquery-exists"},"func ","(","requestCountQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q requestCountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-requestcountquery-insert"},"func ","(","requestCountQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q requestCountQuery) Insert(o *RequestCount, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-requestcountquery-one"},"func ","(","requestCountQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q requestCountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RequestCount, error)\n")),(0,o.kt)("p",null,"One returns a single requestCount record from the query","."),(0,o.kt)("h3",{id:"func-requestcountquery-reload"},"func ","(","requestCountQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q requestCountQuery) Reload(o *RequestCount, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-requestcountquery-reloadall"},"func ","(","requestCountQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q requestCountQuery) ReloadAll(o *RequestCountSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-requestcountquery-update"},"func ","(","requestCountQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q requestCountQuery) Update(o *RequestCount, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the RequestCount","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-requestcountquery-updateall"},"func ","(","requestCountQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q requestCountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-requestcountquery-updateallslice"},"func ","(","requestCountQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q requestCountQuery) UpdateAllSlice(o RequestCountSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-requestcountquery-upsert"},"func ","(","requestCountQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q requestCountQuery) Upsert(o *RequestCount, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-requestcountr"},"type requestCountR"),(0,o.kt)("p",null,"requestCountR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type requestCountR struct {\n}\n")),(0,o.kt)("h3",{id:"func-requestcountr-newstruct"},"func ","(","*","requestCountR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*requestCountR) NewStruct() *requestCountR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-revisionannotationl"},"type revisionAnnotationL"),(0,o.kt)("p",null,"revisionAnnotationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type revisionAnnotationL struct{}\n")),(0,o.kt)("h3",{id:"func-revisionannotationl-loadresource"},"func ","(","revisionAnnotationL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (revisionAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevisionAnnotation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-revisionannotationquery"},"type revisionAnnotationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type revisionAnnotationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-revisionannotations"},"func RevisionAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RevisionAnnotations(mods ...qm.QueryMod) revisionAnnotationQuery\n")),(0,o.kt)("p",null,"RevisionAnnotations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-revisionannotationquery-all"},"func ","(","revisionAnnotationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (RevisionAnnotationSlice, error)\n")),(0,o.kt)("p",null,"All returns all RevisionAnnotation records from the query","."),(0,o.kt)("h3",{id:"func-revisionannotationquery-count"},"func ","(","revisionAnnotationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all RevisionAnnotation records in the query","."),(0,o.kt)("h3",{id:"func-revisionannotationquery-delete"},"func ","(","revisionAnnotationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionAnnotationQuery) Delete(o *RevisionAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single RevisionAnnotation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-revisionannotationquery-deleteall"},"func ","(","revisionAnnotationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-revisionannotationquery-deleteallslice"},"func ","(","revisionAnnotationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionAnnotationQuery) DeleteAllSlice(o RevisionAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-revisionannotationquery-exists"},"func ","(","revisionAnnotationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-revisionannotationquery-insert"},"func ","(","revisionAnnotationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionAnnotationQuery) Insert(o *RevisionAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-revisionannotationquery-one"},"func ","(","revisionAnnotationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RevisionAnnotation, error)\n")),(0,o.kt)("p",null,"One returns a single revisionAnnotation record from the query","."),(0,o.kt)("h3",{id:"func-revisionannotationquery-reload"},"func ","(","revisionAnnotationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionAnnotationQuery) Reload(o *RevisionAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-revisionannotationquery-reloadall"},"func ","(","revisionAnnotationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionAnnotationQuery) ReloadAll(o *RevisionAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-revisionannotationquery-removeresource"},"func ","(","revisionAnnotationQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionAnnotationQuery) RemoveResource(o *RevisionAnnotation, ctx context.Context, exec boil.ContextExecutor, related *Revision) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-revisionannotationquery-resource"},"func ","(","revisionAnnotationQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionAnnotationQuery) Resource(o *RevisionAnnotation, mods ...qm.QueryMod) revisionQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-revisionannotationquery-setresource"},"func ","(","revisionAnnotationQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionAnnotationQuery) SetResource(o *RevisionAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Revision) error\n")),(0,o.kt)("p",null,"SetResource of the revisionAnnotation to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceRevisionAnnotations","."),(0,o.kt)("h3",{id:"func-revisionannotationquery-update"},"func ","(","revisionAnnotationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionAnnotationQuery) Update(o *RevisionAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the RevisionAnnotation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-revisionannotationquery-updateall"},"func ","(","revisionAnnotationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-revisionannotationquery-updateallslice"},"func ","(","revisionAnnotationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionAnnotationQuery) UpdateAllSlice(o RevisionAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-revisionannotationquery-upsert"},"func ","(","revisionAnnotationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionAnnotationQuery) Upsert(o *RevisionAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-revisionannotationr"},"type revisionAnnotationR"),(0,o.kt)("p",null,"revisionAnnotationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type revisionAnnotationR struct {\n    Resource *Revision `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-revisionannotationr-newstruct"},"func ","(","*","revisionAnnotationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*revisionAnnotationR) NewStruct() *revisionAnnotationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-revisionl"},"type revisionL"),(0,o.kt)("p",null,"revisionL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type revisionL struct{}\n")),(0,o.kt)("h3",{id:"func-revisionl-loadapp"},"func ","(","revisionL",")"," LoadApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (revisionL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevision interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadApp allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-revisionl-loadresourcerevisionannotations"},"func ","(","revisionL",")"," LoadResourceRevisionAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (revisionL) LoadResourceRevisionAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevision interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceRevisionAnnotations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-revisionl-loadresourcerevisionlabels"},"func ","(","revisionL",")"," LoadResourceRevisionLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (revisionL) LoadResourceRevisionLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevision interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceRevisionLabels allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-revisionl-loadrevisionprocesscommands"},"func ","(","revisionL",")"," LoadRevisionProcessCommands"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (revisionL) LoadRevisionProcessCommands(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevision interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadRevisionProcessCommands allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-revisionl-loadrevisionsidecars"},"func ","(","revisionL",")"," LoadRevisionSidecars"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (revisionL) LoadRevisionSidecars(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevision interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadRevisionSidecars allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-revisionlabell"},"type revisionLabelL"),(0,o.kt)("p",null,"revisionLabelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type revisionLabelL struct{}\n")),(0,o.kt)("h3",{id:"func-revisionlabell-loadresource"},"func ","(","revisionLabelL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (revisionLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevisionLabel interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-revisionlabelquery"},"type revisionLabelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type revisionLabelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-revisionlabels"},"func RevisionLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RevisionLabels(mods ...qm.QueryMod) revisionLabelQuery\n")),(0,o.kt)("p",null,"RevisionLabels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-revisionlabelquery-all"},"func ","(","revisionLabelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (RevisionLabelSlice, error)\n")),(0,o.kt)("p",null,"All returns all RevisionLabel records from the query","."),(0,o.kt)("h3",{id:"func-revisionlabelquery-count"},"func ","(","revisionLabelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all RevisionLabel records in the query","."),(0,o.kt)("h3",{id:"func-revisionlabelquery-delete"},"func ","(","revisionLabelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionLabelQuery) Delete(o *RevisionLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single RevisionLabel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-revisionlabelquery-deleteall"},"func ","(","revisionLabelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-revisionlabelquery-deleteallslice"},"func ","(","revisionLabelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionLabelQuery) DeleteAllSlice(o RevisionLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-revisionlabelquery-exists"},"func ","(","revisionLabelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-revisionlabelquery-insert"},"func ","(","revisionLabelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionLabelQuery) Insert(o *RevisionLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-revisionlabelquery-one"},"func ","(","revisionLabelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RevisionLabel, error)\n")),(0,o.kt)("p",null,"One returns a single revisionLabel record from the query","."),(0,o.kt)("h3",{id:"func-revisionlabelquery-reload"},"func ","(","revisionLabelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionLabelQuery) Reload(o *RevisionLabel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-revisionlabelquery-reloadall"},"func ","(","revisionLabelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionLabelQuery) ReloadAll(o *RevisionLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-revisionlabelquery-removeresource"},"func ","(","revisionLabelQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionLabelQuery) RemoveResource(o *RevisionLabel, ctx context.Context, exec boil.ContextExecutor, related *Revision) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-revisionlabelquery-resource"},"func ","(","revisionLabelQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionLabelQuery) Resource(o *RevisionLabel, mods ...qm.QueryMod) revisionQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-revisionlabelquery-setresource"},"func ","(","revisionLabelQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionLabelQuery) SetResource(o *RevisionLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Revision) error\n")),(0,o.kt)("p",null,"SetResource of the revisionLabel to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceRevisionLabels","."),(0,o.kt)("h3",{id:"func-revisionlabelquery-update"},"func ","(","revisionLabelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionLabelQuery) Update(o *RevisionLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the RevisionLabel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-revisionlabelquery-updateall"},"func ","(","revisionLabelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-revisionlabelquery-updateallslice"},"func ","(","revisionLabelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionLabelQuery) UpdateAllSlice(o RevisionLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-revisionlabelquery-upsert"},"func ","(","revisionLabelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionLabelQuery) Upsert(o *RevisionLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-revisionlabelr"},"type revisionLabelR"),(0,o.kt)("p",null,"revisionLabelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type revisionLabelR struct {\n    Resource *Revision `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-revisionlabelr-newstruct"},"func ","(","*","revisionLabelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*revisionLabelR) NewStruct() *revisionLabelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-revisionprocesscommandl"},"type revisionProcessCommandL"),(0,o.kt)("p",null,"revisionProcessCommandL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type revisionProcessCommandL struct{}\n")),(0,o.kt)("h3",{id:"func-revisionprocesscommandl-loadrevision"},"func ","(","revisionProcessCommandL",")"," LoadRevision"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (revisionProcessCommandL) LoadRevision(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevisionProcessCommand interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadRevision allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-revisionprocesscommandquery"},"type revisionProcessCommandQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type revisionProcessCommandQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-revisionprocesscommands"},"func RevisionProcessCommands"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RevisionProcessCommands(mods ...qm.QueryMod) revisionProcessCommandQuery\n")),(0,o.kt)("p",null,"RevisionProcessCommands retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-revisionprocesscommandquery-all"},"func ","(","revisionProcessCommandQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionProcessCommandQuery) All(ctx context.Context, exec boil.ContextExecutor) (RevisionProcessCommandSlice, error)\n")),(0,o.kt)("p",null,"All returns all RevisionProcessCommand records from the query","."),(0,o.kt)("h3",{id:"func-revisionprocesscommandquery-count"},"func ","(","revisionProcessCommandQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionProcessCommandQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all RevisionProcessCommand records in the query","."),(0,o.kt)("h3",{id:"func-revisionprocesscommandquery-delete"},"func ","(","revisionProcessCommandQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionProcessCommandQuery) Delete(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single RevisionProcessCommand record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-revisionprocesscommandquery-deleteall"},"func ","(","revisionProcessCommandQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionProcessCommandQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-revisionprocesscommandquery-deleteallslice"},"func ","(","revisionProcessCommandQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionProcessCommandQuery) DeleteAllSlice(o RevisionProcessCommandSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-revisionprocesscommandquery-exists"},"func ","(","revisionProcessCommandQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionProcessCommandQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-revisionprocesscommandquery-insert"},"func ","(","revisionProcessCommandQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionProcessCommandQuery) Insert(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-revisionprocesscommandquery-one"},"func ","(","revisionProcessCommandQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionProcessCommandQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RevisionProcessCommand, error)\n")),(0,o.kt)("p",null,"One returns a single revisionProcessCommand record from the query","."),(0,o.kt)("h3",{id:"func-revisionprocesscommandquery-reload"},"func ","(","revisionProcessCommandQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionProcessCommandQuery) Reload(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-revisionprocesscommandquery-reloadall"},"func ","(","revisionProcessCommandQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionProcessCommandQuery) ReloadAll(o *RevisionProcessCommandSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-revisionprocesscommandquery-revision"},"func ","(","revisionProcessCommandQuery",")"," Revision"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionProcessCommandQuery) Revision(o *RevisionProcessCommand, mods ...qm.QueryMod) revisionQuery\n")),(0,o.kt)("p",null,"Revision pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-revisionprocesscommandquery-setrevision"},"func ","(","revisionProcessCommandQuery",")"," SetRevision"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionProcessCommandQuery) SetRevision(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Revision) error\n")),(0,o.kt)("p",null,"SetRevision of the revisionProcessCommand to the related item","."," Sets o",".","R",".","Revision to related","."," Adds o to related",".","R",".","RevisionProcessCommands","."),(0,o.kt)("h3",{id:"func-revisionprocesscommandquery-update"},"func ","(","revisionProcessCommandQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionProcessCommandQuery) Update(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the RevisionProcessCommand","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-revisionprocesscommandquery-updateall"},"func ","(","revisionProcessCommandQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionProcessCommandQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-revisionprocesscommandquery-updateallslice"},"func ","(","revisionProcessCommandQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionProcessCommandQuery) UpdateAllSlice(o RevisionProcessCommandSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-revisionprocesscommandquery-upsert"},"func ","(","revisionProcessCommandQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionProcessCommandQuery) Upsert(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-revisionprocesscommandr"},"type revisionProcessCommandR"),(0,o.kt)("p",null,"revisionProcessCommandR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type revisionProcessCommandR struct {\n    Revision *Revision `boil:"Revision" json:"Revision" toml:"Revision" yaml:"Revision"`\n}\n')),(0,o.kt)("h3",{id:"func-revisionprocesscommandr-newstruct"},"func ","(","*","revisionProcessCommandR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*revisionProcessCommandR) NewStruct() *revisionProcessCommandR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-revisionquery"},"type revisionQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type revisionQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-revisions"},"func Revisions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func Revisions(mods ...qm.QueryMod) revisionQuery\n")),(0,o.kt)("p",null,"Revisions retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-revisionquery-addresourcerevisionannotations"},"func ","(","revisionQuery",")"," AddResourceRevisionAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) AddResourceRevisionAnnotations(o *Revision, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RevisionAnnotation) error\n")),(0,o.kt)("p",null,"AddResourceRevisionAnnotations adds the given related objects to the existing relationships of the revision\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceRevisionAnnotations","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-revisionquery-addresourcerevisionlabels"},"func ","(","revisionQuery",")"," AddResourceRevisionLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) AddResourceRevisionLabels(o *Revision, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RevisionLabel) error\n")),(0,o.kt)("p",null,"AddResourceRevisionLabels adds the given related objects to the existing relationships of the revision\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceRevisionLabels","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-revisionquery-addrevisionprocesscommands"},"func ","(","revisionQuery",")"," AddRevisionProcessCommands"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) AddRevisionProcessCommands(o *Revision, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RevisionProcessCommand) error\n")),(0,o.kt)("p",null,"AddRevisionProcessCommands adds the given related objects to the existing relationships of the revision\\, optionally inserting them as new records","."," Appends related to o",".","R",".","RevisionProcessCommands","."," Sets related",".","R",".","Revision appropriately","."),(0,o.kt)("h3",{id:"func-revisionquery-addrevisionsidecars"},"func ","(","revisionQuery",")"," AddRevisionSidecars"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) AddRevisionSidecars(o *Revision, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RevisionSidecar) error\n")),(0,o.kt)("p",null,"AddRevisionSidecars adds the given related objects to the existing relationships of the revision\\, optionally inserting them as new records","."," Appends related to o",".","R",".","RevisionSidecars","."," Sets related",".","R",".","Revision appropriately","."),(0,o.kt)("h3",{id:"func-revisionquery-all"},"func ","(","revisionQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) All(ctx context.Context, exec boil.ContextExecutor) (RevisionSlice, error)\n")),(0,o.kt)("p",null,"All returns all Revision records from the query","."),(0,o.kt)("h3",{id:"func-revisionquery-app"},"func ","(","revisionQuery",")"," App"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) App(o *Revision, mods ...qm.QueryMod) appQuery\n")),(0,o.kt)("p",null,"App pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-revisionquery-count"},"func ","(","revisionQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all Revision records in the query","."),(0,o.kt)("h3",{id:"func-revisionquery-delete"},"func ","(","revisionQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) Delete(o *Revision, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single Revision record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-revisionquery-deleteall"},"func ","(","revisionQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-revisionquery-deleteallslice"},"func ","(","revisionQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) DeleteAllSlice(o RevisionSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-revisionquery-exists"},"func ","(","revisionQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-revisionquery-insert"},"func ","(","revisionQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) Insert(o *Revision, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-revisionquery-one"},"func ","(","revisionQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Revision, error)\n")),(0,o.kt)("p",null,"One returns a single revision record from the query","."),(0,o.kt)("h3",{id:"func-revisionquery-reload"},"func ","(","revisionQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) Reload(o *Revision, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-revisionquery-reloadall"},"func ","(","revisionQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) ReloadAll(o *RevisionSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-revisionquery-removeapp"},"func ","(","revisionQuery",")"," RemoveApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) RemoveApp(o *Revision, ctx context.Context, exec boil.ContextExecutor, related *App) error\n")),(0,o.kt)("p",null,"RemoveApp relationship","."," Sets o",".","R",".","App to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-revisionquery-removeresourcerevisionannotations"},"func ","(","revisionQuery",")"," RemoveResourceRevisionAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) RemoveResourceRevisionAnnotations(o *Revision, ctx context.Context, exec boil.ContextExecutor, related ...*RevisionAnnotation) error\n")),(0,o.kt)("p",null,"RemoveResourceRevisionAnnotations relationships from objects passed in","."," Removes related items from R",".","ResourceRevisionAnnotations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-revisionquery-removeresourcerevisionlabels"},"func ","(","revisionQuery",")"," RemoveResourceRevisionLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) RemoveResourceRevisionLabels(o *Revision, ctx context.Context, exec boil.ContextExecutor, related ...*RevisionLabel) error\n")),(0,o.kt)("p",null,"RemoveResourceRevisionLabels relationships from objects passed in","."," Removes related items from R",".","ResourceRevisionLabels ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-revisionquery-resourcerevisionannotations"},"func ","(","revisionQuery",")"," ResourceRevisionAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) ResourceRevisionAnnotations(o *Revision, mods ...qm.QueryMod) revisionAnnotationQuery\n")),(0,o.kt)("p",null,"ResourceRevisionAnnotations retrieves all the revision","_","annotation's RevisionAnnotations with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-revisionquery-resourcerevisionlabels"},"func ","(","revisionQuery",")"," ResourceRevisionLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) ResourceRevisionLabels(o *Revision, mods ...qm.QueryMod) revisionLabelQuery\n")),(0,o.kt)("p",null,"ResourceRevisionLabels retrieves all the revision","_","label's RevisionLabels with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-revisionquery-revisionprocesscommands"},"func ","(","revisionQuery",")"," RevisionProcessCommands"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) RevisionProcessCommands(o *Revision, mods ...qm.QueryMod) revisionProcessCommandQuery\n")),(0,o.kt)("p",null,"RevisionProcessCommands retrieves all the revision","_","process","_","command's RevisionProcessCommands with an executor","."),(0,o.kt)("h3",{id:"func-revisionquery-revisionsidecars"},"func ","(","revisionQuery",")"," RevisionSidecars"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) RevisionSidecars(o *Revision, mods ...qm.QueryMod) revisionSidecarQuery\n")),(0,o.kt)("p",null,"RevisionSidecars retrieves all the revision","_","sidecar's RevisionSidecars with an executor","."),(0,o.kt)("h3",{id:"func-revisionquery-setapp"},"func ","(","revisionQuery",")"," SetApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) SetApp(o *Revision, ctx context.Context, exec boil.ContextExecutor, insert bool, related *App) error\n")),(0,o.kt)("p",null,"SetApp of the revision to the related item","."," Sets o",".","R",".","App to related","."," Adds o to related",".","R",".","Revisions","."),(0,o.kt)("h3",{id:"func-revisionquery-setresourcerevisionannotations"},"func ","(","revisionQuery",")"," SetResourceRevisionAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) SetResourceRevisionAnnotations(o *Revision, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RevisionAnnotation) error\n")),(0,o.kt)("p",null,"SetResourceRevisionAnnotations removes all previously related items of the revision replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceRevisionAnnotations accordingly","."," Replaces o",".","R",".","ResourceRevisionAnnotations with related","."," Sets related",".","R",".","Resource's ResourceRevisionAnnotations accordingly","."),(0,o.kt)("h3",{id:"func-revisionquery-setresourcerevisionlabels"},"func ","(","revisionQuery",")"," SetResourceRevisionLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) SetResourceRevisionLabels(o *Revision, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RevisionLabel) error\n")),(0,o.kt)("p",null,"SetResourceRevisionLabels removes all previously related items of the revision replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceRevisionLabels accordingly","."," Replaces o",".","R",".","ResourceRevisionLabels with related","."," Sets related",".","R",".","Resource's ResourceRevisionLabels accordingly","."),(0,o.kt)("h3",{id:"func-revisionquery-update"},"func ","(","revisionQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) Update(o *Revision, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the Revision","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-revisionquery-updateall"},"func ","(","revisionQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-revisionquery-updateallslice"},"func ","(","revisionQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) UpdateAllSlice(o RevisionSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-revisionquery-upsert"},"func ","(","revisionQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionQuery) Upsert(o *Revision, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-revisionr"},"type revisionR"),(0,o.kt)("p",null,"revisionR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type revisionR struct {\n    App                         *App                        `boil:"App" json:"App" toml:"App" yaml:"App"`\n    ResourceRevisionAnnotations RevisionAnnotationSlice     `boil:"ResourceRevisionAnnotations" json:"ResourceRevisionAnnotations" toml:"ResourceRevisionAnnotations" yaml:"ResourceRevisionAnnotations"`\n    ResourceRevisionLabels      RevisionLabelSlice          `boil:"ResourceRevisionLabels" json:"ResourceRevisionLabels" toml:"ResourceRevisionLabels" yaml:"ResourceRevisionLabels"`\n    RevisionProcessCommands     RevisionProcessCommandSlice `boil:"RevisionProcessCommands" json:"RevisionProcessCommands" toml:"RevisionProcessCommands" yaml:"RevisionProcessCommands"`\n    RevisionSidecars            RevisionSidecarSlice        `boil:"RevisionSidecars" json:"RevisionSidecars" toml:"RevisionSidecars" yaml:"RevisionSidecars"`\n}\n')),(0,o.kt)("h3",{id:"func-revisionr-newstruct"},"func ","(","*","revisionR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*revisionR) NewStruct() *revisionR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-revisionsidecarl"},"type revisionSidecarL"),(0,o.kt)("p",null,"revisionSidecarL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type revisionSidecarL struct{}\n")),(0,o.kt)("h3",{id:"func-revisionsidecarl-loadrevision"},"func ","(","revisionSidecarL",")"," LoadRevision"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (revisionSidecarL) LoadRevision(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevisionSidecar interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadRevision allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-revisionsidecarl-loadrevisionsidecarprocesstypes"},"func ","(","revisionSidecarL",")"," LoadRevisionSidecarProcessTypes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (revisionSidecarL) LoadRevisionSidecarProcessTypes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevisionSidecar interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadRevisionSidecarProcessTypes allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-revisionsidecarprocesstypel"},"type revisionSidecarProcessTypeL"),(0,o.kt)("p",null,"revisionSidecarProcessTypeL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type revisionSidecarProcessTypeL struct{}\n")),(0,o.kt)("h3",{id:"func-revisionsidecarprocesstypel-loadrevisionsidecar"},"func ","(","revisionSidecarProcessTypeL",")"," LoadRevisionSidecar"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (revisionSidecarProcessTypeL) LoadRevisionSidecar(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevisionSidecarProcessType interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadRevisionSidecar allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-revisionsidecarprocesstypequery"},"type revisionSidecarProcessTypeQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type revisionSidecarProcessTypeQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-revisionsidecarprocesstypes"},"func RevisionSidecarProcessTypes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RevisionSidecarProcessTypes(mods ...qm.QueryMod) revisionSidecarProcessTypeQuery\n")),(0,o.kt)("p",null,"RevisionSidecarProcessTypes retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-revisionsidecarprocesstypequery-all"},"func ","(","revisionSidecarProcessTypeQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarProcessTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (RevisionSidecarProcessTypeSlice, error)\n")),(0,o.kt)("p",null,"All returns all RevisionSidecarProcessType records from the query","."),(0,o.kt)("h3",{id:"func-revisionsidecarprocesstypequery-count"},"func ","(","revisionSidecarProcessTypeQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarProcessTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all RevisionSidecarProcessType records in the query","."),(0,o.kt)("h3",{id:"func-revisionsidecarprocesstypequery-delete"},"func ","(","revisionSidecarProcessTypeQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarProcessTypeQuery) Delete(o *RevisionSidecarProcessType, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single RevisionSidecarProcessType record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-revisionsidecarprocesstypequery-deleteall"},"func ","(","revisionSidecarProcessTypeQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarProcessTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-revisionsidecarprocesstypequery-deleteallslice"},"func ","(","revisionSidecarProcessTypeQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarProcessTypeQuery) DeleteAllSlice(o RevisionSidecarProcessTypeSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-revisionsidecarprocesstypequery-exists"},"func ","(","revisionSidecarProcessTypeQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarProcessTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-revisionsidecarprocesstypequery-insert"},"func ","(","revisionSidecarProcessTypeQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarProcessTypeQuery) Insert(o *RevisionSidecarProcessType, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-revisionsidecarprocesstypequery-one"},"func ","(","revisionSidecarProcessTypeQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarProcessTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RevisionSidecarProcessType, error)\n")),(0,o.kt)("p",null,"One returns a single revisionSidecarProcessType record from the query","."),(0,o.kt)("h3",{id:"func-revisionsidecarprocesstypequery-reload"},"func ","(","revisionSidecarProcessTypeQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarProcessTypeQuery) Reload(o *RevisionSidecarProcessType, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-revisionsidecarprocesstypequery-reloadall"},"func ","(","revisionSidecarProcessTypeQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarProcessTypeQuery) ReloadAll(o *RevisionSidecarProcessTypeSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-revisionsidecarprocesstypequery-revisionsidecar"},"func ","(","revisionSidecarProcessTypeQuery",")"," RevisionSidecar"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarProcessTypeQuery) RevisionSidecar(o *RevisionSidecarProcessType, mods ...qm.QueryMod) revisionSidecarQuery\n")),(0,o.kt)("p",null,"RevisionSidecar pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-revisionsidecarprocesstypequery-setrevisionsidecar"},"func ","(","revisionSidecarProcessTypeQuery",")"," SetRevisionSidecar"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarProcessTypeQuery) SetRevisionSidecar(o *RevisionSidecarProcessType, ctx context.Context, exec boil.ContextExecutor, insert bool, related *RevisionSidecar) error\n")),(0,o.kt)("p",null,"SetRevisionSidecar of the revisionSidecarProcessType to the related item","."," Sets o",".","R",".","RevisionSidecar to related","."," Adds o to related",".","R",".","RevisionSidecarProcessTypes","."),(0,o.kt)("h3",{id:"func-revisionsidecarprocesstypequery-update"},"func ","(","revisionSidecarProcessTypeQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarProcessTypeQuery) Update(o *RevisionSidecarProcessType, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the RevisionSidecarProcessType","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-revisionsidecarprocesstypequery-updateall"},"func ","(","revisionSidecarProcessTypeQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarProcessTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-revisionsidecarprocesstypequery-updateallslice"},"func ","(","revisionSidecarProcessTypeQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarProcessTypeQuery) UpdateAllSlice(o RevisionSidecarProcessTypeSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-revisionsidecarprocesstypequery-upsert"},"func ","(","revisionSidecarProcessTypeQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarProcessTypeQuery) Upsert(o *RevisionSidecarProcessType, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-revisionsidecarprocesstyper"},"type revisionSidecarProcessTypeR"),(0,o.kt)("p",null,"revisionSidecarProcessTypeR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type revisionSidecarProcessTypeR struct {\n    RevisionSidecar *RevisionSidecar `boil:"RevisionSidecar" json:"RevisionSidecar" toml:"RevisionSidecar" yaml:"RevisionSidecar"`\n}\n')),(0,o.kt)("h3",{id:"func-revisionsidecarprocesstyper-newstruct"},"func ","(","*","revisionSidecarProcessTypeR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*revisionSidecarProcessTypeR) NewStruct() *revisionSidecarProcessTypeR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-revisionsidecarquery"},"type revisionSidecarQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type revisionSidecarQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-revisionsidecars"},"func RevisionSidecars"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RevisionSidecars(mods ...qm.QueryMod) revisionSidecarQuery\n")),(0,o.kt)("p",null,"RevisionSidecars retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-revisionsidecarquery-addrevisionsidecarprocesstypes"},"func ","(","revisionSidecarQuery",")"," AddRevisionSidecarProcessTypes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarQuery) AddRevisionSidecarProcessTypes(o *RevisionSidecar, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RevisionSidecarProcessType) error\n")),(0,o.kt)("p",null,"AddRevisionSidecarProcessTypes adds the given related objects to the existing relationships of the revision","_","sidecar\\, optionally inserting them as new records","."," Appends related to o",".","R",".","RevisionSidecarProcessTypes","."," Sets related",".","R",".","RevisionSidecar appropriately","."),(0,o.kt)("h3",{id:"func-revisionsidecarquery-all"},"func ","(","revisionSidecarQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarQuery) All(ctx context.Context, exec boil.ContextExecutor) (RevisionSidecarSlice, error)\n")),(0,o.kt)("p",null,"All returns all RevisionSidecar records from the query","."),(0,o.kt)("h3",{id:"func-revisionsidecarquery-count"},"func ","(","revisionSidecarQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all RevisionSidecar records in the query","."),(0,o.kt)("h3",{id:"func-revisionsidecarquery-delete"},"func ","(","revisionSidecarQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarQuery) Delete(o *RevisionSidecar, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single RevisionSidecar record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-revisionsidecarquery-deleteall"},"func ","(","revisionSidecarQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-revisionsidecarquery-deleteallslice"},"func ","(","revisionSidecarQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarQuery) DeleteAllSlice(o RevisionSidecarSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-revisionsidecarquery-exists"},"func ","(","revisionSidecarQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-revisionsidecarquery-insert"},"func ","(","revisionSidecarQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarQuery) Insert(o *RevisionSidecar, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-revisionsidecarquery-one"},"func ","(","revisionSidecarQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RevisionSidecar, error)\n")),(0,o.kt)("p",null,"One returns a single revisionSidecar record from the query","."),(0,o.kt)("h3",{id:"func-revisionsidecarquery-reload"},"func ","(","revisionSidecarQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarQuery) Reload(o *RevisionSidecar, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-revisionsidecarquery-reloadall"},"func ","(","revisionSidecarQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarQuery) ReloadAll(o *RevisionSidecarSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-revisionsidecarquery-revision"},"func ","(","revisionSidecarQuery",")"," Revision"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarQuery) Revision(o *RevisionSidecar, mods ...qm.QueryMod) revisionQuery\n")),(0,o.kt)("p",null,"Revision pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-revisionsidecarquery-revisionsidecarprocesstypes"},"func ","(","revisionSidecarQuery",")"," RevisionSidecarProcessTypes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarQuery) RevisionSidecarProcessTypes(o *RevisionSidecar, mods ...qm.QueryMod) revisionSidecarProcessTypeQuery\n")),(0,o.kt)("p",null,"RevisionSidecarProcessTypes retrieves all the revision","_","sidecar","_","process","_","type's RevisionSidecarProcessTypes with an executor","."),(0,o.kt)("h3",{id:"func-revisionsidecarquery-setrevision"},"func ","(","revisionSidecarQuery",")"," SetRevision"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarQuery) SetRevision(o *RevisionSidecar, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Revision) error\n")),(0,o.kt)("p",null,"SetRevision of the revisionSidecar to the related item","."," Sets o",".","R",".","Revision to related","."," Adds o to related",".","R",".","RevisionSidecars","."),(0,o.kt)("h3",{id:"func-revisionsidecarquery-update"},"func ","(","revisionSidecarQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarQuery) Update(o *RevisionSidecar, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the RevisionSidecar","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-revisionsidecarquery-updateall"},"func ","(","revisionSidecarQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-revisionsidecarquery-updateallslice"},"func ","(","revisionSidecarQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarQuery) UpdateAllSlice(o RevisionSidecarSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-revisionsidecarquery-upsert"},"func ","(","revisionSidecarQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q revisionSidecarQuery) Upsert(o *RevisionSidecar, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-revisionsidecarr"},"type revisionSidecarR"),(0,o.kt)("p",null,"revisionSidecarR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type revisionSidecarR struct {\n    Revision                    *Revision                       `boil:"Revision" json:"Revision" toml:"Revision" yaml:"Revision"`\n    RevisionSidecarProcessTypes RevisionSidecarProcessTypeSlice `boil:"RevisionSidecarProcessTypes" json:"RevisionSidecarProcessTypes" toml:"RevisionSidecarProcessTypes" yaml:"RevisionSidecarProcessTypes"`\n}\n')),(0,o.kt)("h3",{id:"func-revisionsidecarr-newstruct"},"func ","(","*","revisionSidecarR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*revisionSidecarR) NewStruct() *revisionSidecarR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-routeannotationl"},"type routeAnnotationL"),(0,o.kt)("p",null,"routeAnnotationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type routeAnnotationL struct{}\n")),(0,o.kt)("h3",{id:"func-routeannotationl-loadresource"},"func ","(","routeAnnotationL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (routeAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteAnnotation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-routeannotationquery"},"type routeAnnotationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type routeAnnotationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-routeannotations"},"func RouteAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RouteAnnotations(mods ...qm.QueryMod) routeAnnotationQuery\n")),(0,o.kt)("p",null,"RouteAnnotations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-routeannotationquery-all"},"func ","(","routeAnnotationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (RouteAnnotationSlice, error)\n")),(0,o.kt)("p",null,"All returns all RouteAnnotation records from the query","."),(0,o.kt)("h3",{id:"func-routeannotationquery-count"},"func ","(","routeAnnotationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all RouteAnnotation records in the query","."),(0,o.kt)("h3",{id:"func-routeannotationquery-delete"},"func ","(","routeAnnotationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeAnnotationQuery) Delete(o *RouteAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single RouteAnnotation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-routeannotationquery-deleteall"},"func ","(","routeAnnotationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-routeannotationquery-deleteallslice"},"func ","(","routeAnnotationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeAnnotationQuery) DeleteAllSlice(o RouteAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-routeannotationquery-exists"},"func ","(","routeAnnotationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-routeannotationquery-insert"},"func ","(","routeAnnotationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeAnnotationQuery) Insert(o *RouteAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-routeannotationquery-one"},"func ","(","routeAnnotationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RouteAnnotation, error)\n")),(0,o.kt)("p",null,"One returns a single routeAnnotation record from the query","."),(0,o.kt)("h3",{id:"func-routeannotationquery-reload"},"func ","(","routeAnnotationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeAnnotationQuery) Reload(o *RouteAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-routeannotationquery-reloadall"},"func ","(","routeAnnotationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeAnnotationQuery) ReloadAll(o *RouteAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-routeannotationquery-removeresource"},"func ","(","routeAnnotationQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeAnnotationQuery) RemoveResource(o *RouteAnnotation, ctx context.Context, exec boil.ContextExecutor, related *Route) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-routeannotationquery-resource"},"func ","(","routeAnnotationQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeAnnotationQuery) Resource(o *RouteAnnotation, mods ...qm.QueryMod) routeQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-routeannotationquery-setresource"},"func ","(","routeAnnotationQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeAnnotationQuery) SetResource(o *RouteAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Route) error\n")),(0,o.kt)("p",null,"SetResource of the routeAnnotation to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceRouteAnnotations","."),(0,o.kt)("h3",{id:"func-routeannotationquery-update"},"func ","(","routeAnnotationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeAnnotationQuery) Update(o *RouteAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the RouteAnnotation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-routeannotationquery-updateall"},"func ","(","routeAnnotationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-routeannotationquery-updateallslice"},"func ","(","routeAnnotationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeAnnotationQuery) UpdateAllSlice(o RouteAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-routeannotationquery-upsert"},"func ","(","routeAnnotationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeAnnotationQuery) Upsert(o *RouteAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-routeannotationr"},"type routeAnnotationR"),(0,o.kt)("p",null,"routeAnnotationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type routeAnnotationR struct {\n    Resource *Route `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-routeannotationr-newstruct"},"func ","(","*","routeAnnotationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*routeAnnotationR) NewStruct() *routeAnnotationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-routebindingannotationl"},"type routeBindingAnnotationL"),(0,o.kt)("p",null,"routeBindingAnnotationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type routeBindingAnnotationL struct{}\n")),(0,o.kt)("h3",{id:"func-routebindingannotationl-loadresource"},"func ","(","routeBindingAnnotationL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (routeBindingAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteBindingAnnotation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-routebindingannotationquery"},"type routeBindingAnnotationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type routeBindingAnnotationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-routebindingannotations"},"func RouteBindingAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RouteBindingAnnotations(mods ...qm.QueryMod) routeBindingAnnotationQuery\n")),(0,o.kt)("p",null,"RouteBindingAnnotations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-routebindingannotationquery-all"},"func ","(","routeBindingAnnotationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (RouteBindingAnnotationSlice, error)\n")),(0,o.kt)("p",null,"All returns all RouteBindingAnnotation records from the query","."),(0,o.kt)("h3",{id:"func-routebindingannotationquery-count"},"func ","(","routeBindingAnnotationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all RouteBindingAnnotation records in the query","."),(0,o.kt)("h3",{id:"func-routebindingannotationquery-delete"},"func ","(","routeBindingAnnotationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingAnnotationQuery) Delete(o *RouteBindingAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single RouteBindingAnnotation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-routebindingannotationquery-deleteall"},"func ","(","routeBindingAnnotationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-routebindingannotationquery-deleteallslice"},"func ","(","routeBindingAnnotationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingAnnotationQuery) DeleteAllSlice(o RouteBindingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-routebindingannotationquery-exists"},"func ","(","routeBindingAnnotationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-routebindingannotationquery-insert"},"func ","(","routeBindingAnnotationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingAnnotationQuery) Insert(o *RouteBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-routebindingannotationquery-one"},"func ","(","routeBindingAnnotationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RouteBindingAnnotation, error)\n")),(0,o.kt)("p",null,"One returns a single routeBindingAnnotation record from the query","."),(0,o.kt)("h3",{id:"func-routebindingannotationquery-reload"},"func ","(","routeBindingAnnotationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingAnnotationQuery) Reload(o *RouteBindingAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-routebindingannotationquery-reloadall"},"func ","(","routeBindingAnnotationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingAnnotationQuery) ReloadAll(o *RouteBindingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-routebindingannotationquery-removeresource"},"func ","(","routeBindingAnnotationQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingAnnotationQuery) RemoveResource(o *RouteBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, related *RouteBinding) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-routebindingannotationquery-resource"},"func ","(","routeBindingAnnotationQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingAnnotationQuery) Resource(o *RouteBindingAnnotation, mods ...qm.QueryMod) routeBindingQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-routebindingannotationquery-setresource"},"func ","(","routeBindingAnnotationQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingAnnotationQuery) SetResource(o *RouteBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *RouteBinding) error\n")),(0,o.kt)("p",null,"SetResource of the routeBindingAnnotation to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceRouteBindingAnnotations","."),(0,o.kt)("h3",{id:"func-routebindingannotationquery-update"},"func ","(","routeBindingAnnotationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingAnnotationQuery) Update(o *RouteBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the RouteBindingAnnotation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-routebindingannotationquery-updateall"},"func ","(","routeBindingAnnotationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-routebindingannotationquery-updateallslice"},"func ","(","routeBindingAnnotationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingAnnotationQuery) UpdateAllSlice(o RouteBindingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-routebindingannotationquery-upsert"},"func ","(","routeBindingAnnotationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingAnnotationQuery) Upsert(o *RouteBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-routebindingannotationr"},"type routeBindingAnnotationR"),(0,o.kt)("p",null,"routeBindingAnnotationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type routeBindingAnnotationR struct {\n    Resource *RouteBinding `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-routebindingannotationr-newstruct"},"func ","(","*","routeBindingAnnotationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*routeBindingAnnotationR) NewStruct() *routeBindingAnnotationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-routebindingl"},"type routeBindingL"),(0,o.kt)("p",null,"routeBindingL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type routeBindingL struct{}\n")),(0,o.kt)("h3",{id:"func-routebindingl-loadresourceroutebindingannotations"},"func ","(","routeBindingL",")"," LoadResourceRouteBindingAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (routeBindingL) LoadResourceRouteBindingAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteBinding interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceRouteBindingAnnotations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-routebindingl-loadresourceroutebindinglabels"},"func ","(","routeBindingL",")"," LoadResourceRouteBindingLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (routeBindingL) LoadResourceRouteBindingLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteBinding interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceRouteBindingLabels allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-routebindingl-loadroute"},"func ","(","routeBindingL",")"," LoadRoute"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (routeBindingL) LoadRoute(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteBinding interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadRoute allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-routebindingl-loadroutebindingoperation"},"func ","(","routeBindingL",")"," LoadRouteBindingOperation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (routeBindingL) LoadRouteBindingOperation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteBinding interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadRouteBindingOperation allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","1 relationship","."),(0,o.kt)("h3",{id:"func-routebindingl-loadserviceinstance"},"func ","(","routeBindingL",")"," LoadServiceInstance"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (routeBindingL) LoadServiceInstance(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteBinding interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadServiceInstance allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-routebindinglabell"},"type routeBindingLabelL"),(0,o.kt)("p",null,"routeBindingLabelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type routeBindingLabelL struct{}\n")),(0,o.kt)("h3",{id:"func-routebindinglabell-loadresource"},"func ","(","routeBindingLabelL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (routeBindingLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteBindingLabel interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-routebindinglabelquery"},"type routeBindingLabelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type routeBindingLabelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-routebindinglabels"},"func RouteBindingLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RouteBindingLabels(mods ...qm.QueryMod) routeBindingLabelQuery\n")),(0,o.kt)("p",null,"RouteBindingLabels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-routebindinglabelquery-all"},"func ","(","routeBindingLabelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (RouteBindingLabelSlice, error)\n")),(0,o.kt)("p",null,"All returns all RouteBindingLabel records from the query","."),(0,o.kt)("h3",{id:"func-routebindinglabelquery-count"},"func ","(","routeBindingLabelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all RouteBindingLabel records in the query","."),(0,o.kt)("h3",{id:"func-routebindinglabelquery-delete"},"func ","(","routeBindingLabelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingLabelQuery) Delete(o *RouteBindingLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single RouteBindingLabel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-routebindinglabelquery-deleteall"},"func ","(","routeBindingLabelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-routebindinglabelquery-deleteallslice"},"func ","(","routeBindingLabelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingLabelQuery) DeleteAllSlice(o RouteBindingLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-routebindinglabelquery-exists"},"func ","(","routeBindingLabelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-routebindinglabelquery-insert"},"func ","(","routeBindingLabelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingLabelQuery) Insert(o *RouteBindingLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-routebindinglabelquery-one"},"func ","(","routeBindingLabelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RouteBindingLabel, error)\n")),(0,o.kt)("p",null,"One returns a single routeBindingLabel record from the query","."),(0,o.kt)("h3",{id:"func-routebindinglabelquery-reload"},"func ","(","routeBindingLabelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingLabelQuery) Reload(o *RouteBindingLabel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-routebindinglabelquery-reloadall"},"func ","(","routeBindingLabelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingLabelQuery) ReloadAll(o *RouteBindingLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-routebindinglabelquery-removeresource"},"func ","(","routeBindingLabelQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingLabelQuery) RemoveResource(o *RouteBindingLabel, ctx context.Context, exec boil.ContextExecutor, related *RouteBinding) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-routebindinglabelquery-resource"},"func ","(","routeBindingLabelQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingLabelQuery) Resource(o *RouteBindingLabel, mods ...qm.QueryMod) routeBindingQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-routebindinglabelquery-setresource"},"func ","(","routeBindingLabelQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingLabelQuery) SetResource(o *RouteBindingLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related *RouteBinding) error\n")),(0,o.kt)("p",null,"SetResource of the routeBindingLabel to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceRouteBindingLabels","."),(0,o.kt)("h3",{id:"func-routebindinglabelquery-update"},"func ","(","routeBindingLabelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingLabelQuery) Update(o *RouteBindingLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the RouteBindingLabel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-routebindinglabelquery-updateall"},"func ","(","routeBindingLabelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-routebindinglabelquery-updateallslice"},"func ","(","routeBindingLabelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingLabelQuery) UpdateAllSlice(o RouteBindingLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-routebindinglabelquery-upsert"},"func ","(","routeBindingLabelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingLabelQuery) Upsert(o *RouteBindingLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-routebindinglabelr"},"type routeBindingLabelR"),(0,o.kt)("p",null,"routeBindingLabelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type routeBindingLabelR struct {\n    Resource *RouteBinding `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-routebindinglabelr-newstruct"},"func ","(","*","routeBindingLabelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*routeBindingLabelR) NewStruct() *routeBindingLabelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-routebindingoperationl"},"type routeBindingOperationL"),(0,o.kt)("p",null,"routeBindingOperationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type routeBindingOperationL struct{}\n")),(0,o.kt)("h3",{id:"func-routebindingoperationl-loadroutebinding"},"func ","(","routeBindingOperationL",")"," LoadRouteBinding"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (routeBindingOperationL) LoadRouteBinding(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteBindingOperation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadRouteBinding allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-routebindingoperationquery"},"type routeBindingOperationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type routeBindingOperationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-routebindingoperations"},"func RouteBindingOperations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RouteBindingOperations(mods ...qm.QueryMod) routeBindingOperationQuery\n")),(0,o.kt)("p",null,"RouteBindingOperations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-routebindingoperationquery-all"},"func ","(","routeBindingOperationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingOperationQuery) All(ctx context.Context, exec boil.ContextExecutor) (RouteBindingOperationSlice, error)\n")),(0,o.kt)("p",null,"All returns all RouteBindingOperation records from the query","."),(0,o.kt)("h3",{id:"func-routebindingoperationquery-count"},"func ","(","routeBindingOperationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingOperationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all RouteBindingOperation records in the query","."),(0,o.kt)("h3",{id:"func-routebindingoperationquery-delete"},"func ","(","routeBindingOperationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingOperationQuery) Delete(o *RouteBindingOperation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single RouteBindingOperation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-routebindingoperationquery-deleteall"},"func ","(","routeBindingOperationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingOperationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-routebindingoperationquery-deleteallslice"},"func ","(","routeBindingOperationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingOperationQuery) DeleteAllSlice(o RouteBindingOperationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-routebindingoperationquery-exists"},"func ","(","routeBindingOperationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingOperationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-routebindingoperationquery-insert"},"func ","(","routeBindingOperationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingOperationQuery) Insert(o *RouteBindingOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-routebindingoperationquery-one"},"func ","(","routeBindingOperationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingOperationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RouteBindingOperation, error)\n")),(0,o.kt)("p",null,"One returns a single routeBindingOperation record from the query","."),(0,o.kt)("h3",{id:"func-routebindingoperationquery-reload"},"func ","(","routeBindingOperationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingOperationQuery) Reload(o *RouteBindingOperation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-routebindingoperationquery-reloadall"},"func ","(","routeBindingOperationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingOperationQuery) ReloadAll(o *RouteBindingOperationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-routebindingoperationquery-removeroutebinding"},"func ","(","routeBindingOperationQuery",")"," RemoveRouteBinding"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingOperationQuery) RemoveRouteBinding(o *RouteBindingOperation, ctx context.Context, exec boil.ContextExecutor, related *RouteBinding) error\n")),(0,o.kt)("p",null,"RemoveRouteBinding relationship","."," Sets o",".","R",".","RouteBinding to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-routebindingoperationquery-routebinding"},"func ","(","routeBindingOperationQuery",")"," RouteBinding"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingOperationQuery) RouteBinding(o *RouteBindingOperation, mods ...qm.QueryMod) routeBindingQuery\n")),(0,o.kt)("p",null,"RouteBinding pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-routebindingoperationquery-setroutebinding"},"func ","(","routeBindingOperationQuery",")"," SetRouteBinding"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingOperationQuery) SetRouteBinding(o *RouteBindingOperation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *RouteBinding) error\n")),(0,o.kt)("p",null,"SetRouteBinding of the routeBindingOperation to the related item","."," Sets o",".","R",".","RouteBinding to related","."," Adds o to related",".","R",".","RouteBindingOperation","."),(0,o.kt)("h3",{id:"func-routebindingoperationquery-update"},"func ","(","routeBindingOperationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingOperationQuery) Update(o *RouteBindingOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the RouteBindingOperation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-routebindingoperationquery-updateall"},"func ","(","routeBindingOperationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingOperationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-routebindingoperationquery-updateallslice"},"func ","(","routeBindingOperationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingOperationQuery) UpdateAllSlice(o RouteBindingOperationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-routebindingoperationquery-upsert"},"func ","(","routeBindingOperationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingOperationQuery) Upsert(o *RouteBindingOperation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-routebindingoperationr"},"type routeBindingOperationR"),(0,o.kt)("p",null,"routeBindingOperationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type routeBindingOperationR struct {\n    RouteBinding *RouteBinding `boil:"RouteBinding" json:"RouteBinding" toml:"RouteBinding" yaml:"RouteBinding"`\n}\n')),(0,o.kt)("h3",{id:"func-routebindingoperationr-newstruct"},"func ","(","*","routeBindingOperationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*routeBindingOperationR) NewStruct() *routeBindingOperationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-routebindingquery"},"type routeBindingQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type routeBindingQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-routebindings"},"func RouteBindings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RouteBindings(mods ...qm.QueryMod) routeBindingQuery\n")),(0,o.kt)("p",null,"RouteBindings retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-routebindingquery-addresourceroutebindingannotations"},"func ","(","routeBindingQuery",")"," AddResourceRouteBindingAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) AddResourceRouteBindingAnnotations(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteBindingAnnotation) error\n")),(0,o.kt)("p",null,"AddResourceRouteBindingAnnotations adds the given related objects to the existing relationships of the route","_","binding\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceRouteBindingAnnotations","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-routebindingquery-addresourceroutebindinglabels"},"func ","(","routeBindingQuery",")"," AddResourceRouteBindingLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) AddResourceRouteBindingLabels(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteBindingLabel) error\n")),(0,o.kt)("p",null,"AddResourceRouteBindingLabels adds the given related objects to the existing relationships of the route","_","binding\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceRouteBindingLabels","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-routebindingquery-all"},"func ","(","routeBindingQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) All(ctx context.Context, exec boil.ContextExecutor) (RouteBindingSlice, error)\n")),(0,o.kt)("p",null,"All returns all RouteBinding records from the query","."),(0,o.kt)("h3",{id:"func-routebindingquery-count"},"func ","(","routeBindingQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all RouteBinding records in the query","."),(0,o.kt)("h3",{id:"func-routebindingquery-delete"},"func ","(","routeBindingQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) Delete(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single RouteBinding record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-routebindingquery-deleteall"},"func ","(","routeBindingQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-routebindingquery-deleteallslice"},"func ","(","routeBindingQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) DeleteAllSlice(o RouteBindingSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-routebindingquery-exists"},"func ","(","routeBindingQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-routebindingquery-insert"},"func ","(","routeBindingQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) Insert(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-routebindingquery-one"},"func ","(","routeBindingQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RouteBinding, error)\n")),(0,o.kt)("p",null,"One returns a single routeBinding record from the query","."),(0,o.kt)("h3",{id:"func-routebindingquery-reload"},"func ","(","routeBindingQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) Reload(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-routebindingquery-reloadall"},"func ","(","routeBindingQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) ReloadAll(o *RouteBindingSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-routebindingquery-removeresourceroutebindingannotations"},"func ","(","routeBindingQuery",")"," RemoveResourceRouteBindingAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) RemoveResourceRouteBindingAnnotations(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, related ...*RouteBindingAnnotation) error\n")),(0,o.kt)("p",null,"RemoveResourceRouteBindingAnnotations relationships from objects passed in","."," Removes related items from R",".","ResourceRouteBindingAnnotations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-routebindingquery-removeresourceroutebindinglabels"},"func ","(","routeBindingQuery",")"," RemoveResourceRouteBindingLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) RemoveResourceRouteBindingLabels(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, related ...*RouteBindingLabel) error\n")),(0,o.kt)("p",null,"RemoveResourceRouteBindingLabels relationships from objects passed in","."," Removes related items from R",".","ResourceRouteBindingLabels ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-routebindingquery-removeroute"},"func ","(","routeBindingQuery",")"," RemoveRoute"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) RemoveRoute(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, related *Route) error\n")),(0,o.kt)("p",null,"RemoveRoute relationship","."," Sets o",".","R",".","Route to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-routebindingquery-removeroutebindingoperation"},"func ","(","routeBindingQuery",")"," RemoveRouteBindingOperation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) RemoveRouteBindingOperation(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, related *RouteBindingOperation) error\n")),(0,o.kt)("p",null,"RemoveRouteBindingOperation relationship","."," Sets o",".","R",".","RouteBindingOperation to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-routebindingquery-removeserviceinstance"},"func ","(","routeBindingQuery",")"," RemoveServiceInstance"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) RemoveServiceInstance(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, related *ServiceInstance) error\n")),(0,o.kt)("p",null,"RemoveServiceInstance relationship","."," Sets o",".","R",".","ServiceInstance to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-routebindingquery-resourceroutebindingannotations"},"func ","(","routeBindingQuery",")"," ResourceRouteBindingAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) ResourceRouteBindingAnnotations(o *RouteBinding, mods ...qm.QueryMod) routeBindingAnnotationQuery\n")),(0,o.kt)("p",null,"ResourceRouteBindingAnnotations retrieves all the route","_","binding","_","annotation's RouteBindingAnnotations with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-routebindingquery-resourceroutebindinglabels"},"func ","(","routeBindingQuery",")"," ResourceRouteBindingLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) ResourceRouteBindingLabels(o *RouteBinding, mods ...qm.QueryMod) routeBindingLabelQuery\n")),(0,o.kt)("p",null,"ResourceRouteBindingLabels retrieves all the route","_","binding","_","label's RouteBindingLabels with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-routebindingquery-route"},"func ","(","routeBindingQuery",")"," Route"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) Route(o *RouteBinding, mods ...qm.QueryMod) routeQuery\n")),(0,o.kt)("p",null,"Route pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-routebindingquery-routebindingoperation"},"func ","(","routeBindingQuery",")"," RouteBindingOperation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) RouteBindingOperation(o *RouteBinding, mods ...qm.QueryMod) routeBindingOperationQuery\n")),(0,o.kt)("p",null,"RouteBindingOperation pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-routebindingquery-serviceinstance"},"func ","(","routeBindingQuery",")"," ServiceInstance"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) ServiceInstance(o *RouteBinding, mods ...qm.QueryMod) serviceInstanceQuery\n")),(0,o.kt)("p",null,"ServiceInstance pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-routebindingquery-setresourceroutebindingannotations"},"func ","(","routeBindingQuery",")"," SetResourceRouteBindingAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) SetResourceRouteBindingAnnotations(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteBindingAnnotation) error\n")),(0,o.kt)("p",null,"SetResourceRouteBindingAnnotations removes all previously related items of the route","_","binding replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceRouteBindingAnnotations accordingly","."," Replaces o",".","R",".","ResourceRouteBindingAnnotations with related","."," Sets related",".","R",".","Resource's ResourceRouteBindingAnnotations accordingly","."),(0,o.kt)("h3",{id:"func-routebindingquery-setresourceroutebindinglabels"},"func ","(","routeBindingQuery",")"," SetResourceRouteBindingLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) SetResourceRouteBindingLabels(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteBindingLabel) error\n")),(0,o.kt)("p",null,"SetResourceRouteBindingLabels removes all previously related items of the route","_","binding replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceRouteBindingLabels accordingly","."," Replaces o",".","R",".","ResourceRouteBindingLabels with related","."," Sets related",".","R",".","Resource's ResourceRouteBindingLabels accordingly","."),(0,o.kt)("h3",{id:"func-routebindingquery-setroute"},"func ","(","routeBindingQuery",")"," SetRoute"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) SetRoute(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Route) error\n")),(0,o.kt)("p",null,"SetRoute of the routeBinding to the related item","."," Sets o",".","R",".","Route to related","."," Adds o to related",".","R",".","RouteBindings","."),(0,o.kt)("h3",{id:"func-routebindingquery-setroutebindingoperation"},"func ","(","routeBindingQuery",")"," SetRouteBindingOperation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) SetRouteBindingOperation(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related *RouteBindingOperation) error\n")),(0,o.kt)("p",null,"SetRouteBindingOperation of the routeBinding to the related item","."," Sets o",".","R",".","RouteBindingOperation to related","."," Adds o to related",".","R",".","RouteBinding","."),(0,o.kt)("h3",{id:"func-routebindingquery-setserviceinstance"},"func ","(","routeBindingQuery",")"," SetServiceInstance"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) SetServiceInstance(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceInstance) error\n")),(0,o.kt)("p",null,"SetServiceInstance of the routeBinding to the related item","."," Sets o",".","R",".","ServiceInstance to related","."," Adds o to related",".","R",".","RouteBindings","."),(0,o.kt)("h3",{id:"func-routebindingquery-update"},"func ","(","routeBindingQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) Update(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the RouteBinding","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-routebindingquery-updateall"},"func ","(","routeBindingQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-routebindingquery-updateallslice"},"func ","(","routeBindingQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) UpdateAllSlice(o RouteBindingSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-routebindingquery-upsert"},"func ","(","routeBindingQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeBindingQuery) Upsert(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-routebindingr"},"type routeBindingR"),(0,o.kt)("p",null,"routeBindingR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type routeBindingR struct {\n    Route                           *Route                      `boil:"Route" json:"Route" toml:"Route" yaml:"Route"`\n    ServiceInstance                 *ServiceInstance            `boil:"ServiceInstance" json:"ServiceInstance" toml:"ServiceInstance" yaml:"ServiceInstance"`\n    RouteBindingOperation           *RouteBindingOperation      `boil:"RouteBindingOperation" json:"RouteBindingOperation" toml:"RouteBindingOperation" yaml:"RouteBindingOperation"`\n    ResourceRouteBindingAnnotations RouteBindingAnnotationSlice `boil:"ResourceRouteBindingAnnotations" json:"ResourceRouteBindingAnnotations" toml:"ResourceRouteBindingAnnotations" yaml:"ResourceRouteBindingAnnotations"`\n    ResourceRouteBindingLabels      RouteBindingLabelSlice      `boil:"ResourceRouteBindingLabels" json:"ResourceRouteBindingLabels" toml:"ResourceRouteBindingLabels" yaml:"ResourceRouteBindingLabels"`\n}\n')),(0,o.kt)("h3",{id:"func-routebindingr-newstruct"},"func ","(","*","routeBindingR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*routeBindingR) NewStruct() *routeBindingR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-routel"},"type routeL"),(0,o.kt)("p",null,"routeL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type routeL struct{}\n")),(0,o.kt)("h3",{id:"func-routel-loaddomain"},"func ","(","routeL",")"," LoadDomain"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (routeL) LoadDomain(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoute interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadDomain allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-routel-loadresourcerouteannotations"},"func ","(","routeL",")"," LoadResourceRouteAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (routeL) LoadResourceRouteAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoute interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceRouteAnnotations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-routel-loadresourceroutelabels"},"func ","(","routeL",")"," LoadResourceRouteLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (routeL) LoadResourceRouteLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoute interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceRouteLabels allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-routel-loadroutebindings"},"func ","(","routeL",")"," LoadRouteBindings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (routeL) LoadRouteBindings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoute interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadRouteBindings allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-routel-loadroutemappings"},"func ","(","routeL",")"," LoadRouteMappings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (routeL) LoadRouteMappings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoute interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadRouteMappings allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-routel-loadspace"},"func ","(","routeL",")"," LoadSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (routeL) LoadSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoute interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSpace allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-routelabell"},"type routeLabelL"),(0,o.kt)("p",null,"routeLabelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type routeLabelL struct{}\n")),(0,o.kt)("h3",{id:"func-routelabell-loadresource"},"func ","(","routeLabelL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (routeLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteLabel interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-routelabelquery"},"type routeLabelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type routeLabelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-routelabels"},"func RouteLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RouteLabels(mods ...qm.QueryMod) routeLabelQuery\n")),(0,o.kt)("p",null,"RouteLabels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-routelabelquery-all"},"func ","(","routeLabelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (RouteLabelSlice, error)\n")),(0,o.kt)("p",null,"All returns all RouteLabel records from the query","."),(0,o.kt)("h3",{id:"func-routelabelquery-count"},"func ","(","routeLabelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all RouteLabel records in the query","."),(0,o.kt)("h3",{id:"func-routelabelquery-delete"},"func ","(","routeLabelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeLabelQuery) Delete(o *RouteLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single RouteLabel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-routelabelquery-deleteall"},"func ","(","routeLabelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-routelabelquery-deleteallslice"},"func ","(","routeLabelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeLabelQuery) DeleteAllSlice(o RouteLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-routelabelquery-exists"},"func ","(","routeLabelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-routelabelquery-insert"},"func ","(","routeLabelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeLabelQuery) Insert(o *RouteLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-routelabelquery-one"},"func ","(","routeLabelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RouteLabel, error)\n")),(0,o.kt)("p",null,"One returns a single routeLabel record from the query","."),(0,o.kt)("h3",{id:"func-routelabelquery-reload"},"func ","(","routeLabelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeLabelQuery) Reload(o *RouteLabel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-routelabelquery-reloadall"},"func ","(","routeLabelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeLabelQuery) ReloadAll(o *RouteLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-routelabelquery-removeresource"},"func ","(","routeLabelQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeLabelQuery) RemoveResource(o *RouteLabel, ctx context.Context, exec boil.ContextExecutor, related *Route) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-routelabelquery-resource"},"func ","(","routeLabelQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeLabelQuery) Resource(o *RouteLabel, mods ...qm.QueryMod) routeQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-routelabelquery-setresource"},"func ","(","routeLabelQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeLabelQuery) SetResource(o *RouteLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Route) error\n")),(0,o.kt)("p",null,"SetResource of the routeLabel to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceRouteLabels","."),(0,o.kt)("h3",{id:"func-routelabelquery-update"},"func ","(","routeLabelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeLabelQuery) Update(o *RouteLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the RouteLabel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-routelabelquery-updateall"},"func ","(","routeLabelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-routelabelquery-updateallslice"},"func ","(","routeLabelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeLabelQuery) UpdateAllSlice(o RouteLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-routelabelquery-upsert"},"func ","(","routeLabelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeLabelQuery) Upsert(o *RouteLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-routelabelr"},"type routeLabelR"),(0,o.kt)("p",null,"routeLabelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type routeLabelR struct {\n    Resource *Route `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-routelabelr-newstruct"},"func ","(","*","routeLabelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*routeLabelR) NewStruct() *routeLabelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-routemappingl"},"type routeMappingL"),(0,o.kt)("p",null,"routeMappingL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type routeMappingL struct{}\n")),(0,o.kt)("h3",{id:"func-routemappingl-loadapp"},"func ","(","routeMappingL",")"," LoadApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (routeMappingL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteMapping interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadApp allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-routemappingl-loadroute"},"func ","(","routeMappingL",")"," LoadRoute"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (routeMappingL) LoadRoute(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteMapping interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadRoute allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-routemappingquery"},"type routeMappingQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type routeMappingQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-routemappings"},"func RouteMappings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func RouteMappings(mods ...qm.QueryMod) routeMappingQuery\n")),(0,o.kt)("p",null,"RouteMappings retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-routemappingquery-all"},"func ","(","routeMappingQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeMappingQuery) All(ctx context.Context, exec boil.ContextExecutor) (RouteMappingSlice, error)\n")),(0,o.kt)("p",null,"All returns all RouteMapping records from the query","."),(0,o.kt)("h3",{id:"func-routemappingquery-app"},"func ","(","routeMappingQuery",")"," App"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeMappingQuery) App(o *RouteMapping, mods ...qm.QueryMod) appQuery\n")),(0,o.kt)("p",null,"App pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-routemappingquery-count"},"func ","(","routeMappingQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeMappingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all RouteMapping records in the query","."),(0,o.kt)("h3",{id:"func-routemappingquery-delete"},"func ","(","routeMappingQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeMappingQuery) Delete(o *RouteMapping, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single RouteMapping record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-routemappingquery-deleteall"},"func ","(","routeMappingQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeMappingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-routemappingquery-deleteallslice"},"func ","(","routeMappingQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeMappingQuery) DeleteAllSlice(o RouteMappingSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-routemappingquery-exists"},"func ","(","routeMappingQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeMappingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-routemappingquery-insert"},"func ","(","routeMappingQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeMappingQuery) Insert(o *RouteMapping, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-routemappingquery-one"},"func ","(","routeMappingQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeMappingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RouteMapping, error)\n")),(0,o.kt)("p",null,"One returns a single routeMapping record from the query","."),(0,o.kt)("h3",{id:"func-routemappingquery-reload"},"func ","(","routeMappingQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeMappingQuery) Reload(o *RouteMapping, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-routemappingquery-reloadall"},"func ","(","routeMappingQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeMappingQuery) ReloadAll(o *RouteMappingSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-routemappingquery-route"},"func ","(","routeMappingQuery",")"," Route"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeMappingQuery) Route(o *RouteMapping, mods ...qm.QueryMod) routeQuery\n")),(0,o.kt)("p",null,"Route pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-routemappingquery-setapp"},"func ","(","routeMappingQuery",")"," SetApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeMappingQuery) SetApp(o *RouteMapping, ctx context.Context, exec boil.ContextExecutor, insert bool, related *App) error\n")),(0,o.kt)("p",null,"SetApp of the routeMapping to the related item","."," Sets o",".","R",".","App to related","."," Adds o to related",".","R",".","RouteMappings","."),(0,o.kt)("h3",{id:"func-routemappingquery-setroute"},"func ","(","routeMappingQuery",")"," SetRoute"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeMappingQuery) SetRoute(o *RouteMapping, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Route) error\n")),(0,o.kt)("p",null,"SetRoute of the routeMapping to the related item","."," Sets o",".","R",".","Route to related","."," Adds o to related",".","R",".","RouteMappings","."),(0,o.kt)("h3",{id:"func-routemappingquery-update"},"func ","(","routeMappingQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeMappingQuery) Update(o *RouteMapping, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the RouteMapping","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-routemappingquery-updateall"},"func ","(","routeMappingQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeMappingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-routemappingquery-updateallslice"},"func ","(","routeMappingQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeMappingQuery) UpdateAllSlice(o RouteMappingSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-routemappingquery-upsert"},"func ","(","routeMappingQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeMappingQuery) Upsert(o *RouteMapping, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-routemappingr"},"type routeMappingR"),(0,o.kt)("p",null,"routeMappingR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type routeMappingR struct {\n    App   *App   `boil:"App" json:"App" toml:"App" yaml:"App"`\n    Route *Route `boil:"Route" json:"Route" toml:"Route" yaml:"Route"`\n}\n')),(0,o.kt)("h3",{id:"func-routemappingr-newstruct"},"func ","(","*","routeMappingR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*routeMappingR) NewStruct() *routeMappingR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-routequery"},"type routeQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type routeQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-routes"},"func Routes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func Routes(mods ...qm.QueryMod) routeQuery\n")),(0,o.kt)("p",null,"Routes retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-routequery-addresourcerouteannotations"},"func ","(","routeQuery",")"," AddResourceRouteAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) AddResourceRouteAnnotations(o *Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteAnnotation) error\n")),(0,o.kt)("p",null,"AddResourceRouteAnnotations adds the given related objects to the existing relationships of the route\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceRouteAnnotations","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-routequery-addresourceroutelabels"},"func ","(","routeQuery",")"," AddResourceRouteLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) AddResourceRouteLabels(o *Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteLabel) error\n")),(0,o.kt)("p",null,"AddResourceRouteLabels adds the given related objects to the existing relationships of the route\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceRouteLabels","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-routequery-addroutebindings"},"func ","(","routeQuery",")"," AddRouteBindings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) AddRouteBindings(o *Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteBinding) error\n")),(0,o.kt)("p",null,"AddRouteBindings adds the given related objects to the existing relationships of the route\\, optionally inserting them as new records","."," Appends related to o",".","R",".","RouteBindings","."," Sets related",".","R",".","Route appropriately","."),(0,o.kt)("h3",{id:"func-routequery-addroutemappings"},"func ","(","routeQuery",")"," AddRouteMappings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) AddRouteMappings(o *Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteMapping) error\n")),(0,o.kt)("p",null,"AddRouteMappings adds the given related objects to the existing relationships of the route\\, optionally inserting them as new records","."," Appends related to o",".","R",".","RouteMappings","."," Sets related",".","R",".","Route appropriately","."),(0,o.kt)("h3",{id:"func-routequery-all"},"func ","(","routeQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) All(ctx context.Context, exec boil.ContextExecutor) (RouteSlice, error)\n")),(0,o.kt)("p",null,"All returns all Route records from the query","."),(0,o.kt)("h3",{id:"func-routequery-count"},"func ","(","routeQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all Route records in the query","."),(0,o.kt)("h3",{id:"func-routequery-delete"},"func ","(","routeQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) Delete(o *Route, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single Route record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-routequery-deleteall"},"func ","(","routeQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-routequery-deleteallslice"},"func ","(","routeQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) DeleteAllSlice(o RouteSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-routequery-domain"},"func ","(","routeQuery",")"," Domain"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) Domain(o *Route, mods ...qm.QueryMod) domainQuery\n")),(0,o.kt)("p",null,"Domain pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-routequery-exists"},"func ","(","routeQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-routequery-insert"},"func ","(","routeQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) Insert(o *Route, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-routequery-one"},"func ","(","routeQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Route, error)\n")),(0,o.kt)("p",null,"One returns a single route record from the query","."),(0,o.kt)("h3",{id:"func-routequery-reload"},"func ","(","routeQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) Reload(o *Route, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-routequery-reloadall"},"func ","(","routeQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) ReloadAll(o *RouteSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-routequery-removeresourcerouteannotations"},"func ","(","routeQuery",")"," RemoveResourceRouteAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) RemoveResourceRouteAnnotations(o *Route, ctx context.Context, exec boil.ContextExecutor, related ...*RouteAnnotation) error\n")),(0,o.kt)("p",null,"RemoveResourceRouteAnnotations relationships from objects passed in","."," Removes related items from R",".","ResourceRouteAnnotations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-routequery-removeresourceroutelabels"},"func ","(","routeQuery",")"," RemoveResourceRouteLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) RemoveResourceRouteLabels(o *Route, ctx context.Context, exec boil.ContextExecutor, related ...*RouteLabel) error\n")),(0,o.kt)("p",null,"RemoveResourceRouteLabels relationships from objects passed in","."," Removes related items from R",".","ResourceRouteLabels ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-routequery-removeroutebindings"},"func ","(","routeQuery",")"," RemoveRouteBindings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) RemoveRouteBindings(o *Route, ctx context.Context, exec boil.ContextExecutor, related ...*RouteBinding) error\n")),(0,o.kt)("p",null,"RemoveRouteBindings relationships from objects passed in","."," Removes related items from R",".","RouteBindings ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Route","."),(0,o.kt)("h3",{id:"func-routequery-resourcerouteannotations"},"func ","(","routeQuery",")"," ResourceRouteAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) ResourceRouteAnnotations(o *Route, mods ...qm.QueryMod) routeAnnotationQuery\n")),(0,o.kt)("p",null,"ResourceRouteAnnotations retrieves all the route","_","annotation's RouteAnnotations with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-routequery-resourceroutelabels"},"func ","(","routeQuery",")"," ResourceRouteLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) ResourceRouteLabels(o *Route, mods ...qm.QueryMod) routeLabelQuery\n")),(0,o.kt)("p",null,"ResourceRouteLabels retrieves all the route","_","label's RouteLabels with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-routequery-routebindings"},"func ","(","routeQuery",")"," RouteBindings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) RouteBindings(o *Route, mods ...qm.QueryMod) routeBindingQuery\n")),(0,o.kt)("p",null,"RouteBindings retrieves all the route","_","binding's RouteBindings with an executor","."),(0,o.kt)("h3",{id:"func-routequery-routemappings"},"func ","(","routeQuery",")"," RouteMappings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) RouteMappings(o *Route, mods ...qm.QueryMod) routeMappingQuery\n")),(0,o.kt)("p",null,"RouteMappings retrieves all the route","_","mapping's RouteMappings with an executor","."),(0,o.kt)("h3",{id:"func-routequery-setdomain"},"func ","(","routeQuery",")"," SetDomain"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) SetDomain(o *Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Domain) error\n")),(0,o.kt)("p",null,"SetDomain of the route to the related item","."," Sets o",".","R",".","Domain to related","."," Adds o to related",".","R",".","Routes","."),(0,o.kt)("h3",{id:"func-routequery-setresourcerouteannotations"},"func ","(","routeQuery",")"," SetResourceRouteAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) SetResourceRouteAnnotations(o *Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteAnnotation) error\n")),(0,o.kt)("p",null,"SetResourceRouteAnnotations removes all previously related items of the route replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceRouteAnnotations accordingly","."," Replaces o",".","R",".","ResourceRouteAnnotations with related","."," Sets related",".","R",".","Resource's ResourceRouteAnnotations accordingly","."),(0,o.kt)("h3",{id:"func-routequery-setresourceroutelabels"},"func ","(","routeQuery",")"," SetResourceRouteLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) SetResourceRouteLabels(o *Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteLabel) error\n")),(0,o.kt)("p",null,"SetResourceRouteLabels removes all previously related items of the route replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceRouteLabels accordingly","."," Replaces o",".","R",".","ResourceRouteLabels with related","."," Sets related",".","R",".","Resource's ResourceRouteLabels accordingly","."),(0,o.kt)("h3",{id:"func-routequery-setroutebindings"},"func ","(","routeQuery",")"," SetRouteBindings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) SetRouteBindings(o *Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteBinding) error\n")),(0,o.kt)("p",null,"SetRouteBindings removes all previously related items of the route replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Route's RouteBindings accordingly","."," Replaces o",".","R",".","RouteBindings with related","."," Sets related",".","R",".","Route's RouteBindings accordingly","."),(0,o.kt)("h3",{id:"func-routequery-setspace"},"func ","(","routeQuery",")"," SetSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) SetSpace(o *Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Space) error\n")),(0,o.kt)("p",null,"SetSpace of the route to the related item","."," Sets o",".","R",".","Space to related","."," Adds o to related",".","R",".","Routes","."),(0,o.kt)("h3",{id:"func-routequery-space"},"func ","(","routeQuery",")"," Space"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) Space(o *Route, mods ...qm.QueryMod) spaceQuery\n")),(0,o.kt)("p",null,"Space pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-routequery-update"},"func ","(","routeQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) Update(o *Route, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the Route","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-routequery-updateall"},"func ","(","routeQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-routequery-updateallslice"},"func ","(","routeQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) UpdateAllSlice(o RouteSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-routequery-upsert"},"func ","(","routeQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q routeQuery) Upsert(o *Route, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-router"},"type routeR"),(0,o.kt)("p",null,"routeR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type routeR struct {\n    Domain                   *Domain              `boil:"Domain" json:"Domain" toml:"Domain" yaml:"Domain"`\n    Space                    *Space               `boil:"Space" json:"Space" toml:"Space" yaml:"Space"`\n    ResourceRouteAnnotations RouteAnnotationSlice `boil:"ResourceRouteAnnotations" json:"ResourceRouteAnnotations" toml:"ResourceRouteAnnotations" yaml:"ResourceRouteAnnotations"`\n    RouteBindings            RouteBindingSlice    `boil:"RouteBindings" json:"RouteBindings" toml:"RouteBindings" yaml:"RouteBindings"`\n    ResourceRouteLabels      RouteLabelSlice      `boil:"ResourceRouteLabels" json:"ResourceRouteLabels" toml:"ResourceRouteLabels" yaml:"ResourceRouteLabels"`\n    RouteMappings            RouteMappingSlice    `boil:"RouteMappings" json:"RouteMappings" toml:"RouteMappings" yaml:"RouteMappings"`\n}\n')),(0,o.kt)("h3",{id:"func-router-newstruct"},"func ","(","*","routeR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*routeR) NewStruct() *routeR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-schemamigrationl"},"type schemaMigrationL"),(0,o.kt)("p",null,"schemaMigrationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type schemaMigrationL struct{}\n")),(0,o.kt)("h2",{id:"type-schemamigrationquery"},"type schemaMigrationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type schemaMigrationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-schemamigrations"},"func SchemaMigrations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func SchemaMigrations(mods ...qm.QueryMod) schemaMigrationQuery\n")),(0,o.kt)("p",null,"SchemaMigrations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-schemamigrationquery-all"},"func ","(","schemaMigrationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q schemaMigrationQuery) All(ctx context.Context, exec boil.ContextExecutor) (SchemaMigrationSlice, error)\n")),(0,o.kt)("p",null,"All returns all SchemaMigration records from the query","."),(0,o.kt)("h3",{id:"func-schemamigrationquery-count"},"func ","(","schemaMigrationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q schemaMigrationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all SchemaMigration records in the query","."),(0,o.kt)("h3",{id:"func-schemamigrationquery-delete"},"func ","(","schemaMigrationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q schemaMigrationQuery) Delete(o *SchemaMigration, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single SchemaMigration record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-schemamigrationquery-deleteall"},"func ","(","schemaMigrationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q schemaMigrationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-schemamigrationquery-deleteallslice"},"func ","(","schemaMigrationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q schemaMigrationQuery) DeleteAllSlice(o SchemaMigrationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-schemamigrationquery-exists"},"func ","(","schemaMigrationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q schemaMigrationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-schemamigrationquery-insert"},"func ","(","schemaMigrationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q schemaMigrationQuery) Insert(o *SchemaMigration, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-schemamigrationquery-one"},"func ","(","schemaMigrationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q schemaMigrationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SchemaMigration, error)\n")),(0,o.kt)("p",null,"One returns a single schemaMigration record from the query","."),(0,o.kt)("h3",{id:"func-schemamigrationquery-reload"},"func ","(","schemaMigrationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q schemaMigrationQuery) Reload(o *SchemaMigration, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-schemamigrationquery-reloadall"},"func ","(","schemaMigrationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q schemaMigrationQuery) ReloadAll(o *SchemaMigrationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-schemamigrationquery-update"},"func ","(","schemaMigrationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q schemaMigrationQuery) Update(o *SchemaMigration, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the SchemaMigration","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-schemamigrationquery-updateall"},"func ","(","schemaMigrationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q schemaMigrationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-schemamigrationquery-updateallslice"},"func ","(","schemaMigrationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q schemaMigrationQuery) UpdateAllSlice(o SchemaMigrationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-schemamigrationquery-upsert"},"func ","(","schemaMigrationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q schemaMigrationQuery) Upsert(o *SchemaMigration, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-schemamigrationr"},"type schemaMigrationR"),(0,o.kt)("p",null,"schemaMigrationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type schemaMigrationR struct {\n}\n")),(0,o.kt)("h3",{id:"func-schemamigrationr-newstruct"},"func ","(","*","schemaMigrationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*schemaMigrationR) NewStruct() *schemaMigrationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-securitygroupl"},"type securityGroupL"),(0,o.kt)("p",null,"securityGroupL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type securityGroupL struct{}\n")),(0,o.kt)("h3",{id:"func-securitygroupl-loadsecuritygroupsspaces"},"func ","(","securityGroupL",")"," LoadSecurityGroupsSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (securityGroupL) LoadSecurityGroupsSpaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSecurityGroup interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSecurityGroupsSpaces allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-securitygroupl-loadstagingsecuritygroupstagingsecuritygroupsspaces"},"func ","(","securityGroupL",")"," LoadStagingSecurityGroupStagingSecurityGroupsSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (securityGroupL) LoadStagingSecurityGroupStagingSecurityGroupsSpaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSecurityGroup interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadStagingSecurityGroupStagingSecurityGroupsSpaces allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-securitygroupquery"},"type securityGroupQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type securityGroupQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-securitygroups"},"func SecurityGroups"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func SecurityGroups(mods ...qm.QueryMod) securityGroupQuery\n")),(0,o.kt)("p",null,"SecurityGroups retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-securitygroupquery-addsecuritygroupsspaces"},"func ","(","securityGroupQuery",")"," AddSecurityGroupsSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupQuery) AddSecurityGroupsSpaces(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SecurityGroupsSpace) error\n")),(0,o.kt)("p",null,"AddSecurityGroupsSpaces adds the given related objects to the existing relationships of the security","_","group\\, optionally inserting them as new records","."," Appends related to o",".","R",".","SecurityGroupsSpaces","."," Sets related",".","R",".","SecurityGroup appropriately","."),(0,o.kt)("h3",{id:"func-securitygroupquery-addstagingsecuritygroupstagingsecuritygroupsspaces"},"func ","(","securityGroupQuery",")"," AddStagingSecurityGroupStagingSecurityGroupsSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupQuery) AddStagingSecurityGroupStagingSecurityGroupsSpaces(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StagingSecurityGroupsSpace) error\n")),(0,o.kt)("p",null,"AddStagingSecurityGroupStagingSecurityGroupsSpaces adds the given related objects to the existing relationships of the security","_","group\\, optionally inserting them as new records","."," Appends related to o",".","R",".","StagingSecurityGroupStagingSecurityGroupsSpaces","."," Sets related",".","R",".","StagingSecurityGroup appropriately","."),(0,o.kt)("h3",{id:"func-securitygroupquery-all"},"func ","(","securityGroupQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupQuery) All(ctx context.Context, exec boil.ContextExecutor) (SecurityGroupSlice, error)\n")),(0,o.kt)("p",null,"All returns all SecurityGroup records from the query","."),(0,o.kt)("h3",{id:"func-securitygroupquery-count"},"func ","(","securityGroupQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all SecurityGroup records in the query","."),(0,o.kt)("h3",{id:"func-securitygroupquery-delete"},"func ","(","securityGroupQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupQuery) Delete(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single SecurityGroup record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-securitygroupquery-deleteall"},"func ","(","securityGroupQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-securitygroupquery-deleteallslice"},"func ","(","securityGroupQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupQuery) DeleteAllSlice(o SecurityGroupSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-securitygroupquery-exists"},"func ","(","securityGroupQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-securitygroupquery-insert"},"func ","(","securityGroupQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupQuery) Insert(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-securitygroupquery-one"},"func ","(","securityGroupQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SecurityGroup, error)\n")),(0,o.kt)("p",null,"One returns a single securityGroup record from the query","."),(0,o.kt)("h3",{id:"func-securitygroupquery-reload"},"func ","(","securityGroupQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupQuery) Reload(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-securitygroupquery-reloadall"},"func ","(","securityGroupQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupQuery) ReloadAll(o *SecurityGroupSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-securitygroupquery-securitygroupsspaces"},"func ","(","securityGroupQuery",")"," SecurityGroupsSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupQuery) SecurityGroupsSpaces(o *SecurityGroup, mods ...qm.QueryMod) securityGroupsSpaceQuery\n")),(0,o.kt)("p",null,"SecurityGroupsSpaces retrieves all the security","_","groups","_","space's SecurityGroupsSpaces with an executor","."),(0,o.kt)("h3",{id:"func-securitygroupquery-stagingsecuritygroupstagingsecuritygroupsspaces"},"func ","(","securityGroupQuery",")"," StagingSecurityGroupStagingSecurityGroupsSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupQuery) StagingSecurityGroupStagingSecurityGroupsSpaces(o *SecurityGroup, mods ...qm.QueryMod) stagingSecurityGroupsSpaceQuery\n")),(0,o.kt)("p",null,"StagingSecurityGroupStagingSecurityGroupsSpaces retrieves all the staging","_","security","_","groups","_","space's StagingSecurityGroupsSpaces with an executor via staging","_","security","_","group","_","id column","."),(0,o.kt)("h3",{id:"func-securitygroupquery-update"},"func ","(","securityGroupQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupQuery) Update(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the SecurityGroup","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-securitygroupquery-updateall"},"func ","(","securityGroupQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-securitygroupquery-updateallslice"},"func ","(","securityGroupQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupQuery) UpdateAllSlice(o SecurityGroupSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-securitygroupquery-upsert"},"func ","(","securityGroupQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupQuery) Upsert(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-securitygroupr"},"type securityGroupR"),(0,o.kt)("p",null,"securityGroupR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type securityGroupR struct {\n    SecurityGroupsSpaces                            SecurityGroupsSpaceSlice        `boil:"SecurityGroupsSpaces" json:"SecurityGroupsSpaces" toml:"SecurityGroupsSpaces" yaml:"SecurityGroupsSpaces"`\n    StagingSecurityGroupStagingSecurityGroupsSpaces StagingSecurityGroupsSpaceSlice `boil:"StagingSecurityGroupStagingSecurityGroupsSpaces" json:"StagingSecurityGroupStagingSecurityGroupsSpaces" toml:"StagingSecurityGroupStagingSecurityGroupsSpaces" yaml:"StagingSecurityGroupStagingSecurityGroupsSpaces"`\n}\n')),(0,o.kt)("h3",{id:"func-securitygroupr-newstruct"},"func ","(","*","securityGroupR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*securityGroupR) NewStruct() *securityGroupR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-securitygroupsspacel"},"type securityGroupsSpaceL"),(0,o.kt)("p",null,"securityGroupsSpaceL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type securityGroupsSpaceL struct{}\n")),(0,o.kt)("h3",{id:"func-securitygroupsspacel-loadsecuritygroup"},"func ","(","securityGroupsSpaceL",")"," LoadSecurityGroup"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (securityGroupsSpaceL) LoadSecurityGroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSecurityGroupsSpace interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSecurityGroup allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-securitygroupsspacel-loadspace"},"func ","(","securityGroupsSpaceL",")"," LoadSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (securityGroupsSpaceL) LoadSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSecurityGroupsSpace interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSpace allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-securitygroupsspacequery"},"type securityGroupsSpaceQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type securityGroupsSpaceQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-securitygroupsspaces"},"func SecurityGroupsSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func SecurityGroupsSpaces(mods ...qm.QueryMod) securityGroupsSpaceQuery\n")),(0,o.kt)("p",null,"SecurityGroupsSpaces retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-securitygroupsspacequery-all"},"func ","(","securityGroupsSpaceQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupsSpaceQuery) All(ctx context.Context, exec boil.ContextExecutor) (SecurityGroupsSpaceSlice, error)\n")),(0,o.kt)("p",null,"All returns all SecurityGroupsSpace records from the query","."),(0,o.kt)("h3",{id:"func-securitygroupsspacequery-count"},"func ","(","securityGroupsSpaceQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupsSpaceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all SecurityGroupsSpace records in the query","."),(0,o.kt)("h3",{id:"func-securitygroupsspacequery-delete"},"func ","(","securityGroupsSpaceQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupsSpaceQuery) Delete(o *SecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single SecurityGroupsSpace record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-securitygroupsspacequery-deleteall"},"func ","(","securityGroupsSpaceQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupsSpaceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-securitygroupsspacequery-deleteallslice"},"func ","(","securityGroupsSpaceQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupsSpaceQuery) DeleteAllSlice(o SecurityGroupsSpaceSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-securitygroupsspacequery-exists"},"func ","(","securityGroupsSpaceQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupsSpaceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-securitygroupsspacequery-insert"},"func ","(","securityGroupsSpaceQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupsSpaceQuery) Insert(o *SecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-securitygroupsspacequery-one"},"func ","(","securityGroupsSpaceQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupsSpaceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SecurityGroupsSpace, error)\n")),(0,o.kt)("p",null,"One returns a single securityGroupsSpace record from the query","."),(0,o.kt)("h3",{id:"func-securitygroupsspacequery-reload"},"func ","(","securityGroupsSpaceQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupsSpaceQuery) Reload(o *SecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-securitygroupsspacequery-reloadall"},"func ","(","securityGroupsSpaceQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupsSpaceQuery) ReloadAll(o *SecurityGroupsSpaceSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-securitygroupsspacequery-securitygroup"},"func ","(","securityGroupsSpaceQuery",")"," SecurityGroup"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupsSpaceQuery) SecurityGroup(o *SecurityGroupsSpace, mods ...qm.QueryMod) securityGroupQuery\n")),(0,o.kt)("p",null,"SecurityGroup pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-securitygroupsspacequery-setsecuritygroup"},"func ","(","securityGroupsSpaceQuery",")"," SetSecurityGroup"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupsSpaceQuery) SetSecurityGroup(o *SecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, insert bool, related *SecurityGroup) error\n")),(0,o.kt)("p",null,"SetSecurityGroup of the securityGroupsSpace to the related item","."," Sets o",".","R",".","SecurityGroup to related","."," Adds o to related",".","R",".","SecurityGroupsSpaces","."),(0,o.kt)("h3",{id:"func-securitygroupsspacequery-setspace"},"func ","(","securityGroupsSpaceQuery",")"," SetSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupsSpaceQuery) SetSpace(o *SecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Space) error\n")),(0,o.kt)("p",null,"SetSpace of the securityGroupsSpace to the related item","."," Sets o",".","R",".","Space to related","."," Adds o to related",".","R",".","SecurityGroupsSpaces","."),(0,o.kt)("h3",{id:"func-securitygroupsspacequery-space"},"func ","(","securityGroupsSpaceQuery",")"," Space"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupsSpaceQuery) Space(o *SecurityGroupsSpace, mods ...qm.QueryMod) spaceQuery\n")),(0,o.kt)("p",null,"Space pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-securitygroupsspacequery-update"},"func ","(","securityGroupsSpaceQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupsSpaceQuery) Update(o *SecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the SecurityGroupsSpace","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-securitygroupsspacequery-updateall"},"func ","(","securityGroupsSpaceQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupsSpaceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-securitygroupsspacequery-updateallslice"},"func ","(","securityGroupsSpaceQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupsSpaceQuery) UpdateAllSlice(o SecurityGroupsSpaceSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-securitygroupsspacequery-upsert"},"func ","(","securityGroupsSpaceQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q securityGroupsSpaceQuery) Upsert(o *SecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-securitygroupsspacer"},"type securityGroupsSpaceR"),(0,o.kt)("p",null,"securityGroupsSpaceR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type securityGroupsSpaceR struct {\n    SecurityGroup *SecurityGroup `boil:"SecurityGroup" json:"SecurityGroup" toml:"SecurityGroup" yaml:"SecurityGroup"`\n    Space         *Space         `boil:"Space" json:"Space" toml:"Space" yaml:"Space"`\n}\n')),(0,o.kt)("h3",{id:"func-securitygroupsspacer-newstruct"},"func ","(","*","securityGroupsSpaceR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*securityGroupsSpaceR) NewStruct() *securityGroupsSpaceR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-servicebindingannotationl"},"type serviceBindingAnnotationL"),(0,o.kt)("p",null,"serviceBindingAnnotationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceBindingAnnotationL struct{}\n")),(0,o.kt)("h3",{id:"func-servicebindingannotationl-loadresource"},"func ","(","serviceBindingAnnotationL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceBindingAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBindingAnnotation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-servicebindingannotationquery"},"type serviceBindingAnnotationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceBindingAnnotationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-servicebindingannotations"},"func ServiceBindingAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceBindingAnnotations(mods ...qm.QueryMod) serviceBindingAnnotationQuery\n")),(0,o.kt)("p",null,"ServiceBindingAnnotations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-servicebindingannotationquery-all"},"func ","(","serviceBindingAnnotationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceBindingAnnotationSlice, error)\n")),(0,o.kt)("p",null,"All returns all ServiceBindingAnnotation records from the query","."),(0,o.kt)("h3",{id:"func-servicebindingannotationquery-count"},"func ","(","serviceBindingAnnotationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServiceBindingAnnotation records in the query","."),(0,o.kt)("h3",{id:"func-servicebindingannotationquery-delete"},"func ","(","serviceBindingAnnotationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingAnnotationQuery) Delete(o *ServiceBindingAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServiceBindingAnnotation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-servicebindingannotationquery-deleteall"},"func ","(","serviceBindingAnnotationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-servicebindingannotationquery-deleteallslice"},"func ","(","serviceBindingAnnotationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingAnnotationQuery) DeleteAllSlice(o ServiceBindingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicebindingannotationquery-exists"},"func ","(","serviceBindingAnnotationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-servicebindingannotationquery-insert"},"func ","(","serviceBindingAnnotationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingAnnotationQuery) Insert(o *ServiceBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-servicebindingannotationquery-one"},"func ","(","serviceBindingAnnotationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBindingAnnotation, error)\n")),(0,o.kt)("p",null,"One returns a single serviceBindingAnnotation record from the query","."),(0,o.kt)("h3",{id:"func-servicebindingannotationquery-reload"},"func ","(","serviceBindingAnnotationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingAnnotationQuery) Reload(o *ServiceBindingAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-servicebindingannotationquery-reloadall"},"func ","(","serviceBindingAnnotationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingAnnotationQuery) ReloadAll(o *ServiceBindingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-servicebindingannotationquery-removeresource"},"func ","(","serviceBindingAnnotationQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingAnnotationQuery) RemoveResource(o *ServiceBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, related *ServiceBinding) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-servicebindingannotationquery-resource"},"func ","(","serviceBindingAnnotationQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingAnnotationQuery) Resource(o *ServiceBindingAnnotation, mods ...qm.QueryMod) serviceBindingQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-servicebindingannotationquery-setresource"},"func ","(","serviceBindingAnnotationQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingAnnotationQuery) SetResource(o *ServiceBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceBinding) error\n")),(0,o.kt)("p",null,"SetResource of the serviceBindingAnnotation to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceServiceBindingAnnotations","."),(0,o.kt)("h3",{id:"func-servicebindingannotationquery-update"},"func ","(","serviceBindingAnnotationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingAnnotationQuery) Update(o *ServiceBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServiceBindingAnnotation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-servicebindingannotationquery-updateall"},"func ","(","serviceBindingAnnotationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-servicebindingannotationquery-updateallslice"},"func ","(","serviceBindingAnnotationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingAnnotationQuery) UpdateAllSlice(o ServiceBindingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicebindingannotationquery-upsert"},"func ","(","serviceBindingAnnotationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingAnnotationQuery) Upsert(o *ServiceBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-servicebindingannotationr"},"type serviceBindingAnnotationR"),(0,o.kt)("p",null,"serviceBindingAnnotationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type serviceBindingAnnotationR struct {\n    Resource *ServiceBinding `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-servicebindingannotationr-newstruct"},"func ","(","*","serviceBindingAnnotationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*serviceBindingAnnotationR) NewStruct() *serviceBindingAnnotationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-servicebindingl"},"type serviceBindingL"),(0,o.kt)("p",null,"serviceBindingL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceBindingL struct{}\n")),(0,o.kt)("h3",{id:"func-servicebindingl-loadapp"},"func ","(","serviceBindingL",")"," LoadApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceBindingL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBinding interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadApp allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-servicebindingl-loadresourceservicebindingannotations"},"func ","(","serviceBindingL",")"," LoadResourceServiceBindingAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceBindingL) LoadResourceServiceBindingAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBinding interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceServiceBindingAnnotations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-servicebindingl-loadresourceservicebindinglabels"},"func ","(","serviceBindingL",")"," LoadResourceServiceBindingLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceBindingL) LoadResourceServiceBindingLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBinding interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceServiceBindingLabels allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-servicebindingl-loadservicebindingoperation"},"func ","(","serviceBindingL",")"," LoadServiceBindingOperation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceBindingL) LoadServiceBindingOperation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBinding interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadServiceBindingOperation allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","1 relationship","."),(0,o.kt)("h3",{id:"func-servicebindingl-loadserviceinstance"},"func ","(","serviceBindingL",")"," LoadServiceInstance"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceBindingL) LoadServiceInstance(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBinding interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadServiceInstance allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-servicebindinglabell"},"type serviceBindingLabelL"),(0,o.kt)("p",null,"serviceBindingLabelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceBindingLabelL struct{}\n")),(0,o.kt)("h3",{id:"func-servicebindinglabell-loadresource"},"func ","(","serviceBindingLabelL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceBindingLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBindingLabel interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-servicebindinglabelquery"},"type serviceBindingLabelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceBindingLabelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-servicebindinglabels"},"func ServiceBindingLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceBindingLabels(mods ...qm.QueryMod) serviceBindingLabelQuery\n")),(0,o.kt)("p",null,"ServiceBindingLabels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-servicebindinglabelquery-all"},"func ","(","serviceBindingLabelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceBindingLabelSlice, error)\n")),(0,o.kt)("p",null,"All returns all ServiceBindingLabel records from the query","."),(0,o.kt)("h3",{id:"func-servicebindinglabelquery-count"},"func ","(","serviceBindingLabelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServiceBindingLabel records in the query","."),(0,o.kt)("h3",{id:"func-servicebindinglabelquery-delete"},"func ","(","serviceBindingLabelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingLabelQuery) Delete(o *ServiceBindingLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServiceBindingLabel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-servicebindinglabelquery-deleteall"},"func ","(","serviceBindingLabelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-servicebindinglabelquery-deleteallslice"},"func ","(","serviceBindingLabelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingLabelQuery) DeleteAllSlice(o ServiceBindingLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicebindinglabelquery-exists"},"func ","(","serviceBindingLabelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-servicebindinglabelquery-insert"},"func ","(","serviceBindingLabelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingLabelQuery) Insert(o *ServiceBindingLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-servicebindinglabelquery-one"},"func ","(","serviceBindingLabelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBindingLabel, error)\n")),(0,o.kt)("p",null,"One returns a single serviceBindingLabel record from the query","."),(0,o.kt)("h3",{id:"func-servicebindinglabelquery-reload"},"func ","(","serviceBindingLabelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingLabelQuery) Reload(o *ServiceBindingLabel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-servicebindinglabelquery-reloadall"},"func ","(","serviceBindingLabelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingLabelQuery) ReloadAll(o *ServiceBindingLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-servicebindinglabelquery-removeresource"},"func ","(","serviceBindingLabelQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingLabelQuery) RemoveResource(o *ServiceBindingLabel, ctx context.Context, exec boil.ContextExecutor, related *ServiceBinding) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-servicebindinglabelquery-resource"},"func ","(","serviceBindingLabelQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingLabelQuery) Resource(o *ServiceBindingLabel, mods ...qm.QueryMod) serviceBindingQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-servicebindinglabelquery-setresource"},"func ","(","serviceBindingLabelQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingLabelQuery) SetResource(o *ServiceBindingLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceBinding) error\n")),(0,o.kt)("p",null,"SetResource of the serviceBindingLabel to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceServiceBindingLabels","."),(0,o.kt)("h3",{id:"func-servicebindinglabelquery-update"},"func ","(","serviceBindingLabelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingLabelQuery) Update(o *ServiceBindingLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServiceBindingLabel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-servicebindinglabelquery-updateall"},"func ","(","serviceBindingLabelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-servicebindinglabelquery-updateallslice"},"func ","(","serviceBindingLabelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingLabelQuery) UpdateAllSlice(o ServiceBindingLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicebindinglabelquery-upsert"},"func ","(","serviceBindingLabelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingLabelQuery) Upsert(o *ServiceBindingLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-servicebindinglabelr"},"type serviceBindingLabelR"),(0,o.kt)("p",null,"serviceBindingLabelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type serviceBindingLabelR struct {\n    Resource *ServiceBinding `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-servicebindinglabelr-newstruct"},"func ","(","*","serviceBindingLabelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*serviceBindingLabelR) NewStruct() *serviceBindingLabelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-servicebindingoperationl"},"type serviceBindingOperationL"),(0,o.kt)("p",null,"serviceBindingOperationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceBindingOperationL struct{}\n")),(0,o.kt)("h3",{id:"func-servicebindingoperationl-loadservicebinding"},"func ","(","serviceBindingOperationL",")"," LoadServiceBinding"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceBindingOperationL) LoadServiceBinding(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBindingOperation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadServiceBinding allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-servicebindingoperationquery"},"type serviceBindingOperationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceBindingOperationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-servicebindingoperations"},"func ServiceBindingOperations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceBindingOperations(mods ...qm.QueryMod) serviceBindingOperationQuery\n")),(0,o.kt)("p",null,"ServiceBindingOperations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-servicebindingoperationquery-all"},"func ","(","serviceBindingOperationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingOperationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceBindingOperationSlice, error)\n")),(0,o.kt)("p",null,"All returns all ServiceBindingOperation records from the query","."),(0,o.kt)("h3",{id:"func-servicebindingoperationquery-count"},"func ","(","serviceBindingOperationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingOperationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServiceBindingOperation records in the query","."),(0,o.kt)("h3",{id:"func-servicebindingoperationquery-delete"},"func ","(","serviceBindingOperationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingOperationQuery) Delete(o *ServiceBindingOperation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServiceBindingOperation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-servicebindingoperationquery-deleteall"},"func ","(","serviceBindingOperationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingOperationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-servicebindingoperationquery-deleteallslice"},"func ","(","serviceBindingOperationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingOperationQuery) DeleteAllSlice(o ServiceBindingOperationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicebindingoperationquery-exists"},"func ","(","serviceBindingOperationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingOperationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-servicebindingoperationquery-insert"},"func ","(","serviceBindingOperationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingOperationQuery) Insert(o *ServiceBindingOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-servicebindingoperationquery-one"},"func ","(","serviceBindingOperationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingOperationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBindingOperation, error)\n")),(0,o.kt)("p",null,"One returns a single serviceBindingOperation record from the query","."),(0,o.kt)("h3",{id:"func-servicebindingoperationquery-reload"},"func ","(","serviceBindingOperationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingOperationQuery) Reload(o *ServiceBindingOperation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-servicebindingoperationquery-reloadall"},"func ","(","serviceBindingOperationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingOperationQuery) ReloadAll(o *ServiceBindingOperationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-servicebindingoperationquery-removeservicebinding"},"func ","(","serviceBindingOperationQuery",")"," RemoveServiceBinding"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingOperationQuery) RemoveServiceBinding(o *ServiceBindingOperation, ctx context.Context, exec boil.ContextExecutor, related *ServiceBinding) error\n")),(0,o.kt)("p",null,"RemoveServiceBinding relationship","."," Sets o",".","R",".","ServiceBinding to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-servicebindingoperationquery-servicebinding"},"func ","(","serviceBindingOperationQuery",")"," ServiceBinding"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingOperationQuery) ServiceBinding(o *ServiceBindingOperation, mods ...qm.QueryMod) serviceBindingQuery\n")),(0,o.kt)("p",null,"ServiceBinding pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-servicebindingoperationquery-setservicebinding"},"func ","(","serviceBindingOperationQuery",")"," SetServiceBinding"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingOperationQuery) SetServiceBinding(o *ServiceBindingOperation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceBinding) error\n")),(0,o.kt)("p",null,"SetServiceBinding of the serviceBindingOperation to the related item","."," Sets o",".","R",".","ServiceBinding to related","."," Adds o to related",".","R",".","ServiceBindingOperation","."),(0,o.kt)("h3",{id:"func-servicebindingoperationquery-update"},"func ","(","serviceBindingOperationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingOperationQuery) Update(o *ServiceBindingOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServiceBindingOperation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-servicebindingoperationquery-updateall"},"func ","(","serviceBindingOperationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingOperationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-servicebindingoperationquery-updateallslice"},"func ","(","serviceBindingOperationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingOperationQuery) UpdateAllSlice(o ServiceBindingOperationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicebindingoperationquery-upsert"},"func ","(","serviceBindingOperationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingOperationQuery) Upsert(o *ServiceBindingOperation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-servicebindingoperationr"},"type serviceBindingOperationR"),(0,o.kt)("p",null,"serviceBindingOperationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type serviceBindingOperationR struct {\n    ServiceBinding *ServiceBinding `boil:"ServiceBinding" json:"ServiceBinding" toml:"ServiceBinding" yaml:"ServiceBinding"`\n}\n')),(0,o.kt)("h3",{id:"func-servicebindingoperationr-newstruct"},"func ","(","*","serviceBindingOperationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*serviceBindingOperationR) NewStruct() *serviceBindingOperationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-servicebindingquery"},"type serviceBindingQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceBindingQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-servicebindings"},"func ServiceBindings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceBindings(mods ...qm.QueryMod) serviceBindingQuery\n")),(0,o.kt)("p",null,"ServiceBindings retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-servicebindingquery-addresourceservicebindingannotations"},"func ","(","serviceBindingQuery",")"," AddResourceServiceBindingAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) AddResourceServiceBindingAnnotations(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBindingAnnotation) error\n")),(0,o.kt)("p",null,"AddResourceServiceBindingAnnotations adds the given related objects to the existing relationships of the service","_","binding\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceServiceBindingAnnotations","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-servicebindingquery-addresourceservicebindinglabels"},"func ","(","serviceBindingQuery",")"," AddResourceServiceBindingLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) AddResourceServiceBindingLabels(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBindingLabel) error\n")),(0,o.kt)("p",null,"AddResourceServiceBindingLabels adds the given related objects to the existing relationships of the service","_","binding\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceServiceBindingLabels","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-servicebindingquery-all"},"func ","(","serviceBindingQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceBindingSlice, error)\n")),(0,o.kt)("p",null,"All returns all ServiceBinding records from the query","."),(0,o.kt)("h3",{id:"func-servicebindingquery-app"},"func ","(","serviceBindingQuery",")"," App"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) App(o *ServiceBinding, mods ...qm.QueryMod) appQuery\n")),(0,o.kt)("p",null,"App pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-servicebindingquery-count"},"func ","(","serviceBindingQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServiceBinding records in the query","."),(0,o.kt)("h3",{id:"func-servicebindingquery-delete"},"func ","(","serviceBindingQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) Delete(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServiceBinding record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-servicebindingquery-deleteall"},"func ","(","serviceBindingQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-servicebindingquery-deleteallslice"},"func ","(","serviceBindingQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) DeleteAllSlice(o ServiceBindingSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicebindingquery-exists"},"func ","(","serviceBindingQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-servicebindingquery-insert"},"func ","(","serviceBindingQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) Insert(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-servicebindingquery-one"},"func ","(","serviceBindingQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBinding, error)\n")),(0,o.kt)("p",null,"One returns a single serviceBinding record from the query","."),(0,o.kt)("h3",{id:"func-servicebindingquery-reload"},"func ","(","serviceBindingQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) Reload(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-servicebindingquery-reloadall"},"func ","(","serviceBindingQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) ReloadAll(o *ServiceBindingSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-servicebindingquery-removeresourceservicebindingannotations"},"func ","(","serviceBindingQuery",")"," RemoveResourceServiceBindingAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) RemoveResourceServiceBindingAnnotations(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor, related ...*ServiceBindingAnnotation) error\n")),(0,o.kt)("p",null,"RemoveResourceServiceBindingAnnotations relationships from objects passed in","."," Removes related items from R",".","ResourceServiceBindingAnnotations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-servicebindingquery-removeresourceservicebindinglabels"},"func ","(","serviceBindingQuery",")"," RemoveResourceServiceBindingLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) RemoveResourceServiceBindingLabels(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor, related ...*ServiceBindingLabel) error\n")),(0,o.kt)("p",null,"RemoveResourceServiceBindingLabels relationships from objects passed in","."," Removes related items from R",".","ResourceServiceBindingLabels ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-servicebindingquery-removeservicebindingoperation"},"func ","(","serviceBindingQuery",")"," RemoveServiceBindingOperation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) RemoveServiceBindingOperation(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor, related *ServiceBindingOperation) error\n")),(0,o.kt)("p",null,"RemoveServiceBindingOperation relationship","."," Sets o",".","R",".","ServiceBindingOperation to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-servicebindingquery-resourceservicebindingannotations"},"func ","(","serviceBindingQuery",")"," ResourceServiceBindingAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) ResourceServiceBindingAnnotations(o *ServiceBinding, mods ...qm.QueryMod) serviceBindingAnnotationQuery\n")),(0,o.kt)("p",null,"ResourceServiceBindingAnnotations retrieves all the service","_","binding","_","annotation's ServiceBindingAnnotations with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-servicebindingquery-resourceservicebindinglabels"},"func ","(","serviceBindingQuery",")"," ResourceServiceBindingLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) ResourceServiceBindingLabels(o *ServiceBinding, mods ...qm.QueryMod) serviceBindingLabelQuery\n")),(0,o.kt)("p",null,"ResourceServiceBindingLabels retrieves all the service","_","binding","_","label's ServiceBindingLabels with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-servicebindingquery-servicebindingoperation"},"func ","(","serviceBindingQuery",")"," ServiceBindingOperation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) ServiceBindingOperation(o *ServiceBinding, mods ...qm.QueryMod) serviceBindingOperationQuery\n")),(0,o.kt)("p",null,"ServiceBindingOperation pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-servicebindingquery-serviceinstance"},"func ","(","serviceBindingQuery",")"," ServiceInstance"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) ServiceInstance(o *ServiceBinding, mods ...qm.QueryMod) serviceInstanceQuery\n")),(0,o.kt)("p",null,"ServiceInstance pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-servicebindingquery-setapp"},"func ","(","serviceBindingQuery",")"," SetApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) SetApp(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related *App) error\n")),(0,o.kt)("p",null,"SetApp of the serviceBinding to the related item","."," Sets o",".","R",".","App to related","."," Adds o to related",".","R",".","ServiceBindings","."),(0,o.kt)("h3",{id:"func-servicebindingquery-setresourceservicebindingannotations"},"func ","(","serviceBindingQuery",")"," SetResourceServiceBindingAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) SetResourceServiceBindingAnnotations(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBindingAnnotation) error\n")),(0,o.kt)("p",null,"SetResourceServiceBindingAnnotations removes all previously related items of the service","_","binding replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceServiceBindingAnnotations accordingly","."," Replaces o",".","R",".","ResourceServiceBindingAnnotations with related","."," Sets related",".","R",".","Resource's ResourceServiceBindingAnnotations accordingly","."),(0,o.kt)("h3",{id:"func-servicebindingquery-setresourceservicebindinglabels"},"func ","(","serviceBindingQuery",")"," SetResourceServiceBindingLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) SetResourceServiceBindingLabels(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBindingLabel) error\n")),(0,o.kt)("p",null,"SetResourceServiceBindingLabels removes all previously related items of the service","_","binding replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceServiceBindingLabels accordingly","."," Replaces o",".","R",".","ResourceServiceBindingLabels with related","."," Sets related",".","R",".","Resource's ResourceServiceBindingLabels accordingly","."),(0,o.kt)("h3",{id:"func-servicebindingquery-setservicebindingoperation"},"func ","(","serviceBindingQuery",")"," SetServiceBindingOperation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) SetServiceBindingOperation(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceBindingOperation) error\n")),(0,o.kt)("p",null,"SetServiceBindingOperation of the serviceBinding to the related item","."," Sets o",".","R",".","ServiceBindingOperation to related","."," Adds o to related",".","R",".","ServiceBinding","."),(0,o.kt)("h3",{id:"func-servicebindingquery-setserviceinstance"},"func ","(","serviceBindingQuery",")"," SetServiceInstance"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) SetServiceInstance(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceInstance) error\n")),(0,o.kt)("p",null,"SetServiceInstance of the serviceBinding to the related item","."," Sets o",".","R",".","ServiceInstance to related","."," Adds o to related",".","R",".","ServiceBindings","."),(0,o.kt)("h3",{id:"func-servicebindingquery-update"},"func ","(","serviceBindingQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) Update(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServiceBinding","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-servicebindingquery-updateall"},"func ","(","serviceBindingQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-servicebindingquery-updateallslice"},"func ","(","serviceBindingQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) UpdateAllSlice(o ServiceBindingSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicebindingquery-upsert"},"func ","(","serviceBindingQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBindingQuery) Upsert(o *ServiceBinding, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-servicebindingr"},"type serviceBindingR"),(0,o.kt)("p",null,"serviceBindingR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type serviceBindingR struct {\n    App                               *App                          `boil:"App" json:"App" toml:"App" yaml:"App"`\n    ServiceInstance                   *ServiceInstance              `boil:"ServiceInstance" json:"ServiceInstance" toml:"ServiceInstance" yaml:"ServiceInstance"`\n    ServiceBindingOperation           *ServiceBindingOperation      `boil:"ServiceBindingOperation" json:"ServiceBindingOperation" toml:"ServiceBindingOperation" yaml:"ServiceBindingOperation"`\n    ResourceServiceBindingAnnotations ServiceBindingAnnotationSlice `boil:"ResourceServiceBindingAnnotations" json:"ResourceServiceBindingAnnotations" toml:"ResourceServiceBindingAnnotations" yaml:"ResourceServiceBindingAnnotations"`\n    ResourceServiceBindingLabels      ServiceBindingLabelSlice      `boil:"ResourceServiceBindingLabels" json:"ResourceServiceBindingLabels" toml:"ResourceServiceBindingLabels" yaml:"ResourceServiceBindingLabels"`\n}\n')),(0,o.kt)("h3",{id:"func-servicebindingr-newstruct"},"func ","(","*","serviceBindingR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*serviceBindingR) NewStruct() *serviceBindingR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-servicebrokerannotationl"},"type serviceBrokerAnnotationL"),(0,o.kt)("p",null,"serviceBrokerAnnotationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceBrokerAnnotationL struct{}\n")),(0,o.kt)("h3",{id:"func-servicebrokerannotationl-loadresource"},"func ","(","serviceBrokerAnnotationL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceBrokerAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBrokerAnnotation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-servicebrokerannotationquery"},"type serviceBrokerAnnotationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceBrokerAnnotationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-servicebrokerannotations"},"func ServiceBrokerAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceBrokerAnnotations(mods ...qm.QueryMod) serviceBrokerAnnotationQuery\n")),(0,o.kt)("p",null,"ServiceBrokerAnnotations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerannotationquery-all"},"func ","(","serviceBrokerAnnotationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceBrokerAnnotationSlice, error)\n")),(0,o.kt)("p",null,"All returns all ServiceBrokerAnnotation records from the query","."),(0,o.kt)("h3",{id:"func-servicebrokerannotationquery-count"},"func ","(","serviceBrokerAnnotationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServiceBrokerAnnotation records in the query","."),(0,o.kt)("h3",{id:"func-servicebrokerannotationquery-delete"},"func ","(","serviceBrokerAnnotationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerAnnotationQuery) Delete(o *ServiceBrokerAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServiceBrokerAnnotation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-servicebrokerannotationquery-deleteall"},"func ","(","serviceBrokerAnnotationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-servicebrokerannotationquery-deleteallslice"},"func ","(","serviceBrokerAnnotationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerAnnotationQuery) DeleteAllSlice(o ServiceBrokerAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerannotationquery-exists"},"func ","(","serviceBrokerAnnotationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-servicebrokerannotationquery-insert"},"func ","(","serviceBrokerAnnotationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerAnnotationQuery) Insert(o *ServiceBrokerAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-servicebrokerannotationquery-one"},"func ","(","serviceBrokerAnnotationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBrokerAnnotation, error)\n")),(0,o.kt)("p",null,"One returns a single serviceBrokerAnnotation record from the query","."),(0,o.kt)("h3",{id:"func-servicebrokerannotationquery-reload"},"func ","(","serviceBrokerAnnotationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerAnnotationQuery) Reload(o *ServiceBrokerAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerannotationquery-reloadall"},"func ","(","serviceBrokerAnnotationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerAnnotationQuery) ReloadAll(o *ServiceBrokerAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-servicebrokerannotationquery-removeresource"},"func ","(","serviceBrokerAnnotationQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerAnnotationQuery) RemoveResource(o *ServiceBrokerAnnotation, ctx context.Context, exec boil.ContextExecutor, related *ServiceBroker) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-servicebrokerannotationquery-resource"},"func ","(","serviceBrokerAnnotationQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerAnnotationQuery) Resource(o *ServiceBrokerAnnotation, mods ...qm.QueryMod) serviceBrokerQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-servicebrokerannotationquery-setresource"},"func ","(","serviceBrokerAnnotationQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerAnnotationQuery) SetResource(o *ServiceBrokerAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceBroker) error\n")),(0,o.kt)("p",null,"SetResource of the serviceBrokerAnnotation to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceServiceBrokerAnnotations","."),(0,o.kt)("h3",{id:"func-servicebrokerannotationquery-update"},"func ","(","serviceBrokerAnnotationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerAnnotationQuery) Update(o *ServiceBrokerAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServiceBrokerAnnotation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-servicebrokerannotationquery-updateall"},"func ","(","serviceBrokerAnnotationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-servicebrokerannotationquery-updateallslice"},"func ","(","serviceBrokerAnnotationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerAnnotationQuery) UpdateAllSlice(o ServiceBrokerAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerannotationquery-upsert"},"func ","(","serviceBrokerAnnotationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerAnnotationQuery) Upsert(o *ServiceBrokerAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-servicebrokerannotationr"},"type serviceBrokerAnnotationR"),(0,o.kt)("p",null,"serviceBrokerAnnotationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type serviceBrokerAnnotationR struct {\n    Resource *ServiceBroker `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-servicebrokerannotationr-newstruct"},"func ","(","*","serviceBrokerAnnotationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*serviceBrokerAnnotationR) NewStruct() *serviceBrokerAnnotationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-servicebrokerl"},"type serviceBrokerL"),(0,o.kt)("p",null,"serviceBrokerL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceBrokerL struct{}\n")),(0,o.kt)("h3",{id:"func-servicebrokerl-loadfkservicebrokerservicebrokerupdaterequests"},"func ","(","serviceBrokerL",")"," LoadFKServiceBrokerServiceBrokerUpdateRequests"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceBrokerL) LoadFKServiceBrokerServiceBrokerUpdateRequests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBroker interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadFKServiceBrokerServiceBrokerUpdateRequests allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-servicebrokerl-loadresourceservicebrokerannotations"},"func ","(","serviceBrokerL",")"," LoadResourceServiceBrokerAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceBrokerL) LoadResourceServiceBrokerAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBroker interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceServiceBrokerAnnotations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-servicebrokerl-loadresourceservicebrokerlabels"},"func ","(","serviceBrokerL",")"," LoadResourceServiceBrokerLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceBrokerL) LoadResourceServiceBrokerLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBroker interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceServiceBrokerLabels allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-servicebrokerl-loadservices"},"func ","(","serviceBrokerL",")"," LoadServices"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceBrokerL) LoadServices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBroker interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadServices allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-servicebrokerl-loadspace"},"func ","(","serviceBrokerL",")"," LoadSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceBrokerL) LoadSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBroker interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSpace allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-servicebrokerlabell"},"type serviceBrokerLabelL"),(0,o.kt)("p",null,"serviceBrokerLabelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceBrokerLabelL struct{}\n")),(0,o.kt)("h3",{id:"func-servicebrokerlabell-loadresource"},"func ","(","serviceBrokerLabelL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceBrokerLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBrokerLabel interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-servicebrokerlabelquery"},"type serviceBrokerLabelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceBrokerLabelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-servicebrokerlabels"},"func ServiceBrokerLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceBrokerLabels(mods ...qm.QueryMod) serviceBrokerLabelQuery\n")),(0,o.kt)("p",null,"ServiceBrokerLabels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerlabelquery-all"},"func ","(","serviceBrokerLabelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceBrokerLabelSlice, error)\n")),(0,o.kt)("p",null,"All returns all ServiceBrokerLabel records from the query","."),(0,o.kt)("h3",{id:"func-servicebrokerlabelquery-count"},"func ","(","serviceBrokerLabelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServiceBrokerLabel records in the query","."),(0,o.kt)("h3",{id:"func-servicebrokerlabelquery-delete"},"func ","(","serviceBrokerLabelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerLabelQuery) Delete(o *ServiceBrokerLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServiceBrokerLabel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-servicebrokerlabelquery-deleteall"},"func ","(","serviceBrokerLabelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-servicebrokerlabelquery-deleteallslice"},"func ","(","serviceBrokerLabelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerLabelQuery) DeleteAllSlice(o ServiceBrokerLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerlabelquery-exists"},"func ","(","serviceBrokerLabelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-servicebrokerlabelquery-insert"},"func ","(","serviceBrokerLabelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerLabelQuery) Insert(o *ServiceBrokerLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-servicebrokerlabelquery-one"},"func ","(","serviceBrokerLabelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBrokerLabel, error)\n")),(0,o.kt)("p",null,"One returns a single serviceBrokerLabel record from the query","."),(0,o.kt)("h3",{id:"func-servicebrokerlabelquery-reload"},"func ","(","serviceBrokerLabelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerLabelQuery) Reload(o *ServiceBrokerLabel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerlabelquery-reloadall"},"func ","(","serviceBrokerLabelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerLabelQuery) ReloadAll(o *ServiceBrokerLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-servicebrokerlabelquery-removeresource"},"func ","(","serviceBrokerLabelQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerLabelQuery) RemoveResource(o *ServiceBrokerLabel, ctx context.Context, exec boil.ContextExecutor, related *ServiceBroker) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-servicebrokerlabelquery-resource"},"func ","(","serviceBrokerLabelQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerLabelQuery) Resource(o *ServiceBrokerLabel, mods ...qm.QueryMod) serviceBrokerQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-servicebrokerlabelquery-setresource"},"func ","(","serviceBrokerLabelQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerLabelQuery) SetResource(o *ServiceBrokerLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceBroker) error\n")),(0,o.kt)("p",null,"SetResource of the serviceBrokerLabel to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceServiceBrokerLabels","."),(0,o.kt)("h3",{id:"func-servicebrokerlabelquery-update"},"func ","(","serviceBrokerLabelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerLabelQuery) Update(o *ServiceBrokerLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServiceBrokerLabel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-servicebrokerlabelquery-updateall"},"func ","(","serviceBrokerLabelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-servicebrokerlabelquery-updateallslice"},"func ","(","serviceBrokerLabelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerLabelQuery) UpdateAllSlice(o ServiceBrokerLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerlabelquery-upsert"},"func ","(","serviceBrokerLabelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerLabelQuery) Upsert(o *ServiceBrokerLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-servicebrokerlabelr"},"type serviceBrokerLabelR"),(0,o.kt)("p",null,"serviceBrokerLabelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type serviceBrokerLabelR struct {\n    Resource *ServiceBroker `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-servicebrokerlabelr-newstruct"},"func ","(","*","serviceBrokerLabelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*serviceBrokerLabelR) NewStruct() *serviceBrokerLabelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-servicebrokerquery"},"type serviceBrokerQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceBrokerQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-servicebrokers"},"func ServiceBrokers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceBrokers(mods ...qm.QueryMod) serviceBrokerQuery\n")),(0,o.kt)("p",null,"ServiceBrokers retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-addfkservicebrokerservicebrokerupdaterequests"},"func ","(","serviceBrokerQuery",")"," AddFKServiceBrokerServiceBrokerUpdateRequests"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) AddFKServiceBrokerServiceBrokerUpdateRequests(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBrokerUpdateRequest) error\n")),(0,o.kt)("p",null,"AddFKServiceBrokerServiceBrokerUpdateRequests adds the given related objects to the existing relationships of the service","_","broker\\, optionally inserting them as new records","."," Appends related to o",".","R",".","FKServiceBrokerServiceBrokerUpdateRequests","."," Sets related",".","R",".","FKServiceBroker appropriately","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-addresourceservicebrokerannotations"},"func ","(","serviceBrokerQuery",")"," AddResourceServiceBrokerAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) AddResourceServiceBrokerAnnotations(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBrokerAnnotation) error\n")),(0,o.kt)("p",null,"AddResourceServiceBrokerAnnotations adds the given related objects to the existing relationships of the service","_","broker\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceServiceBrokerAnnotations","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-addresourceservicebrokerlabels"},"func ","(","serviceBrokerQuery",")"," AddResourceServiceBrokerLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) AddResourceServiceBrokerLabels(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBrokerLabel) error\n")),(0,o.kt)("p",null,"AddResourceServiceBrokerLabels adds the given related objects to the existing relationships of the service","_","broker\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceServiceBrokerLabels","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-addservices"},"func ","(","serviceBrokerQuery",")"," AddServices"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) AddServices(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Service) error\n")),(0,o.kt)("p",null,"AddServices adds the given related objects to the existing relationships of the service","_","broker\\, optionally inserting them as new records","."," Appends related to o",".","R",".","Services","."," Sets related",".","R",".","ServiceBroker appropriately","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-all"},"func ","(","serviceBrokerQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceBrokerSlice, error)\n")),(0,o.kt)("p",null,"All returns all ServiceBroker records from the query","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-count"},"func ","(","serviceBrokerQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServiceBroker records in the query","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-delete"},"func ","(","serviceBrokerQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) Delete(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServiceBroker record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-deleteall"},"func ","(","serviceBrokerQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-deleteallslice"},"func ","(","serviceBrokerQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) DeleteAllSlice(o ServiceBrokerSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-exists"},"func ","(","serviceBrokerQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-fkservicebrokerservicebrokerupdaterequests"},"func ","(","serviceBrokerQuery",")"," FKServiceBrokerServiceBrokerUpdateRequests"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) FKServiceBrokerServiceBrokerUpdateRequests(o *ServiceBroker, mods ...qm.QueryMod) serviceBrokerUpdateRequestQuery\n")),(0,o.kt)("p",null,"FKServiceBrokerServiceBrokerUpdateRequests retrieves all the service","_","broker","_","update","_","request's ServiceBrokerUpdateRequests with an executor via fk","_","service","_","brokers","_","id column","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-insert"},"func ","(","serviceBrokerQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) Insert(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-one"},"func ","(","serviceBrokerQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBroker, error)\n")),(0,o.kt)("p",null,"One returns a single serviceBroker record from the query","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-reload"},"func ","(","serviceBrokerQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) Reload(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-reloadall"},"func ","(","serviceBrokerQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) ReloadAll(o *ServiceBrokerSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-removefkservicebrokerservicebrokerupdaterequests"},"func ","(","serviceBrokerQuery",")"," RemoveFKServiceBrokerServiceBrokerUpdateRequests"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) RemoveFKServiceBrokerServiceBrokerUpdateRequests(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, related ...*ServiceBrokerUpdateRequest) error\n")),(0,o.kt)("p",null,"RemoveFKServiceBrokerServiceBrokerUpdateRequests relationships from objects passed in","."," Removes related items from R",".","FKServiceBrokerServiceBrokerUpdateRequests ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","FKServiceBroker","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-removeresourceservicebrokerannotations"},"func ","(","serviceBrokerQuery",")"," RemoveResourceServiceBrokerAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) RemoveResourceServiceBrokerAnnotations(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, related ...*ServiceBrokerAnnotation) error\n")),(0,o.kt)("p",null,"RemoveResourceServiceBrokerAnnotations relationships from objects passed in","."," Removes related items from R",".","ResourceServiceBrokerAnnotations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-removeresourceservicebrokerlabels"},"func ","(","serviceBrokerQuery",")"," RemoveResourceServiceBrokerLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) RemoveResourceServiceBrokerLabels(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, related ...*ServiceBrokerLabel) error\n")),(0,o.kt)("p",null,"RemoveResourceServiceBrokerLabels relationships from objects passed in","."," Removes related items from R",".","ResourceServiceBrokerLabels ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-removeservices"},"func ","(","serviceBrokerQuery",")"," RemoveServices"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) RemoveServices(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, related ...*Service) error\n")),(0,o.kt)("p",null,"RemoveServices relationships from objects passed in","."," Removes related items from R",".","Services ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","ServiceBroker","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-removespace"},"func ","(","serviceBrokerQuery",")"," RemoveSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) RemoveSpace(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, related *Space) error\n")),(0,o.kt)("p",null,"RemoveSpace relationship","."," Sets o",".","R",".","Space to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-resourceservicebrokerannotations"},"func ","(","serviceBrokerQuery",")"," ResourceServiceBrokerAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) ResourceServiceBrokerAnnotations(o *ServiceBroker, mods ...qm.QueryMod) serviceBrokerAnnotationQuery\n")),(0,o.kt)("p",null,"ResourceServiceBrokerAnnotations retrieves all the service","_","broker","_","annotation's ServiceBrokerAnnotations with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-resourceservicebrokerlabels"},"func ","(","serviceBrokerQuery",")"," ResourceServiceBrokerLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) ResourceServiceBrokerLabels(o *ServiceBroker, mods ...qm.QueryMod) serviceBrokerLabelQuery\n")),(0,o.kt)("p",null,"ResourceServiceBrokerLabels retrieves all the service","_","broker","_","label's ServiceBrokerLabels with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-services"},"func ","(","serviceBrokerQuery",")"," Services"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) Services(o *ServiceBroker, mods ...qm.QueryMod) serviceQuery\n")),(0,o.kt)("p",null,"Services retrieves all the service's Services with an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-setfkservicebrokerservicebrokerupdaterequests"},"func ","(","serviceBrokerQuery",")"," SetFKServiceBrokerServiceBrokerUpdateRequests"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) SetFKServiceBrokerServiceBrokerUpdateRequests(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBrokerUpdateRequest) error\n")),(0,o.kt)("p",null,"SetFKServiceBrokerServiceBrokerUpdateRequests removes all previously related items of the service","_","broker replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","FKServiceBroker's FKServiceBrokerServiceBrokerUpdateRequests accordingly","."," Replaces o",".","R",".","FKServiceBrokerServiceBrokerUpdateRequests with related","."," Sets related",".","R",".","FKServiceBroker's FKServiceBrokerServiceBrokerUpdateRequests accordingly","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-setresourceservicebrokerannotations"},"func ","(","serviceBrokerQuery",")"," SetResourceServiceBrokerAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) SetResourceServiceBrokerAnnotations(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBrokerAnnotation) error\n")),(0,o.kt)("p",null,"SetResourceServiceBrokerAnnotations removes all previously related items of the service","_","broker replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceServiceBrokerAnnotations accordingly","."," Replaces o",".","R",".","ResourceServiceBrokerAnnotations with related","."," Sets related",".","R",".","Resource's ResourceServiceBrokerAnnotations accordingly","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-setresourceservicebrokerlabels"},"func ","(","serviceBrokerQuery",")"," SetResourceServiceBrokerLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) SetResourceServiceBrokerLabels(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBrokerLabel) error\n")),(0,o.kt)("p",null,"SetResourceServiceBrokerLabels removes all previously related items of the service","_","broker replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceServiceBrokerLabels accordingly","."," Replaces o",".","R",".","ResourceServiceBrokerLabels with related","."," Sets related",".","R",".","Resource's ResourceServiceBrokerLabels accordingly","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-setservices"},"func ","(","serviceBrokerQuery",")"," SetServices"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) SetServices(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Service) error\n")),(0,o.kt)("p",null,"SetServices removes all previously related items of the service","_","broker replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","ServiceBroker's Services accordingly","."," Replaces o",".","R",".","Services with related","."," Sets related",".","R",".","ServiceBroker's Services accordingly","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-setspace"},"func ","(","serviceBrokerQuery",")"," SetSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) SetSpace(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Space) error\n")),(0,o.kt)("p",null,"SetSpace of the serviceBroker to the related item","."," Sets o",".","R",".","Space to related","."," Adds o to related",".","R",".","ServiceBrokers","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-space"},"func ","(","serviceBrokerQuery",")"," Space"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) Space(o *ServiceBroker, mods ...qm.QueryMod) spaceQuery\n")),(0,o.kt)("p",null,"Space pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-update"},"func ","(","serviceBrokerQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) Update(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServiceBroker","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-updateall"},"func ","(","serviceBrokerQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-updateallslice"},"func ","(","serviceBrokerQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) UpdateAllSlice(o ServiceBrokerSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerquery-upsert"},"func ","(","serviceBrokerQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerQuery) Upsert(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-servicebrokerr"},"type serviceBrokerR"),(0,o.kt)("p",null,"serviceBrokerR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type serviceBrokerR struct {\n    Space                                      *Space                          `boil:"Space" json:"Space" toml:"Space" yaml:"Space"`\n    ResourceServiceBrokerAnnotations           ServiceBrokerAnnotationSlice    `boil:"ResourceServiceBrokerAnnotations" json:"ResourceServiceBrokerAnnotations" toml:"ResourceServiceBrokerAnnotations" yaml:"ResourceServiceBrokerAnnotations"`\n    ResourceServiceBrokerLabels                ServiceBrokerLabelSlice         `boil:"ResourceServiceBrokerLabels" json:"ResourceServiceBrokerLabels" toml:"ResourceServiceBrokerLabels" yaml:"ResourceServiceBrokerLabels"`\n    FKServiceBrokerServiceBrokerUpdateRequests ServiceBrokerUpdateRequestSlice `boil:"FKServiceBrokerServiceBrokerUpdateRequests" json:"FKServiceBrokerServiceBrokerUpdateRequests" toml:"FKServiceBrokerServiceBrokerUpdateRequests" yaml:"FKServiceBrokerServiceBrokerUpdateRequests"`\n    Services                                   ServiceSlice                    `boil:"Services" json:"Services" toml:"Services" yaml:"Services"`\n}\n')),(0,o.kt)("h3",{id:"func-servicebrokerr-newstruct"},"func ","(","*","serviceBrokerR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*serviceBrokerR) NewStruct() *serviceBrokerR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestannotationl"},"type serviceBrokerUpdateRequestAnnotationL"),(0,o.kt)("p",null,"serviceBrokerUpdateRequestAnnotationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceBrokerUpdateRequestAnnotationL struct{}\n")),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestannotationl-loadresource"},"func ","(","serviceBrokerUpdateRequestAnnotationL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceBrokerUpdateRequestAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBrokerUpdateRequestAnnotation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestannotationquery"},"type serviceBrokerUpdateRequestAnnotationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceBrokerUpdateRequestAnnotationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestannotations"},"func ServiceBrokerUpdateRequestAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceBrokerUpdateRequestAnnotations(mods ...qm.QueryMod) serviceBrokerUpdateRequestAnnotationQuery\n")),(0,o.kt)("p",null,"ServiceBrokerUpdateRequestAnnotations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestannotationquery-all"},"func ","(","serviceBrokerUpdateRequestAnnotationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceBrokerUpdateRequestAnnotationSlice, error)\n")),(0,o.kt)("p",null,"All returns all ServiceBrokerUpdateRequestAnnotation records from the query","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestannotationquery-count"},"func ","(","serviceBrokerUpdateRequestAnnotationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServiceBrokerUpdateRequestAnnotation records in the query","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestannotationquery-delete"},"func ","(","serviceBrokerUpdateRequestAnnotationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestAnnotationQuery) Delete(o *ServiceBrokerUpdateRequestAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServiceBrokerUpdateRequestAnnotation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestannotationquery-deleteall"},"func ","(","serviceBrokerUpdateRequestAnnotationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestannotationquery-deleteallslice"},"func ","(","serviceBrokerUpdateRequestAnnotationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestAnnotationQuery) DeleteAllSlice(o ServiceBrokerUpdateRequestAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestannotationquery-exists"},"func ","(","serviceBrokerUpdateRequestAnnotationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestannotationquery-insert"},"func ","(","serviceBrokerUpdateRequestAnnotationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestAnnotationQuery) Insert(o *ServiceBrokerUpdateRequestAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestannotationquery-one"},"func ","(","serviceBrokerUpdateRequestAnnotationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBrokerUpdateRequestAnnotation, error)\n")),(0,o.kt)("p",null,"One returns a single serviceBrokerUpdateRequestAnnotation record from the query","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestannotationquery-reload"},"func ","(","serviceBrokerUpdateRequestAnnotationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestAnnotationQuery) Reload(o *ServiceBrokerUpdateRequestAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestannotationquery-reloadall"},"func ","(","serviceBrokerUpdateRequestAnnotationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestAnnotationQuery) ReloadAll(o *ServiceBrokerUpdateRequestAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestannotationquery-removeresource"},"func ","(","serviceBrokerUpdateRequestAnnotationQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestAnnotationQuery) RemoveResource(o *ServiceBrokerUpdateRequestAnnotation, ctx context.Context, exec boil.ContextExecutor, related *ServiceBrokerUpdateRequest) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestannotationquery-resource"},"func ","(","serviceBrokerUpdateRequestAnnotationQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestAnnotationQuery) Resource(o *ServiceBrokerUpdateRequestAnnotation, mods ...qm.QueryMod) serviceBrokerUpdateRequestQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestannotationquery-setresource"},"func ","(","serviceBrokerUpdateRequestAnnotationQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestAnnotationQuery) SetResource(o *ServiceBrokerUpdateRequestAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceBrokerUpdateRequest) error\n")),(0,o.kt)("p",null,"SetResource of the serviceBrokerUpdateRequestAnnotation to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceServiceBrokerUpdateRequestAnnotations","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestannotationquery-update"},"func ","(","serviceBrokerUpdateRequestAnnotationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestAnnotationQuery) Update(o *ServiceBrokerUpdateRequestAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServiceBrokerUpdateRequestAnnotation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestannotationquery-updateall"},"func ","(","serviceBrokerUpdateRequestAnnotationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestannotationquery-updateallslice"},"func ","(","serviceBrokerUpdateRequestAnnotationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestAnnotationQuery) UpdateAllSlice(o ServiceBrokerUpdateRequestAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestannotationquery-upsert"},"func ","(","serviceBrokerUpdateRequestAnnotationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestAnnotationQuery) Upsert(o *ServiceBrokerUpdateRequestAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestannotationr"},"type serviceBrokerUpdateRequestAnnotationR"),(0,o.kt)("p",null,"serviceBrokerUpdateRequestAnnotationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type serviceBrokerUpdateRequestAnnotationR struct {\n    Resource *ServiceBrokerUpdateRequest `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestannotationr-newstruct"},"func ","(","*","serviceBrokerUpdateRequestAnnotationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*serviceBrokerUpdateRequestAnnotationR) NewStruct() *serviceBrokerUpdateRequestAnnotationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestl"},"type serviceBrokerUpdateRequestL"),(0,o.kt)("p",null,"serviceBrokerUpdateRequestL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceBrokerUpdateRequestL struct{}\n")),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestl-loadfkservicebroker"},"func ","(","serviceBrokerUpdateRequestL",")"," LoadFKServiceBroker"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceBrokerUpdateRequestL) LoadFKServiceBroker(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBrokerUpdateRequest interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadFKServiceBroker allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestl-loadresourceservicebrokerupdaterequestannotations"},"func ","(","serviceBrokerUpdateRequestL",")"," LoadResourceServiceBrokerUpdateRequestAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceBrokerUpdateRequestL) LoadResourceServiceBrokerUpdateRequestAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBrokerUpdateRequest interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceServiceBrokerUpdateRequestAnnotations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestl-loadresourceservicebrokerupdaterequestlabels"},"func ","(","serviceBrokerUpdateRequestL",")"," LoadResourceServiceBrokerUpdateRequestLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceBrokerUpdateRequestL) LoadResourceServiceBrokerUpdateRequestLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBrokerUpdateRequest interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceServiceBrokerUpdateRequestLabels allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestlabell"},"type serviceBrokerUpdateRequestLabelL"),(0,o.kt)("p",null,"serviceBrokerUpdateRequestLabelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceBrokerUpdateRequestLabelL struct{}\n")),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestlabell-loadresource"},"func ","(","serviceBrokerUpdateRequestLabelL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceBrokerUpdateRequestLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBrokerUpdateRequestLabel interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestlabelquery"},"type serviceBrokerUpdateRequestLabelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceBrokerUpdateRequestLabelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestlabels"},"func ServiceBrokerUpdateRequestLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceBrokerUpdateRequestLabels(mods ...qm.QueryMod) serviceBrokerUpdateRequestLabelQuery\n")),(0,o.kt)("p",null,"ServiceBrokerUpdateRequestLabels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestlabelquery-all"},"func ","(","serviceBrokerUpdateRequestLabelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceBrokerUpdateRequestLabelSlice, error)\n")),(0,o.kt)("p",null,"All returns all ServiceBrokerUpdateRequestLabel records from the query","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestlabelquery-count"},"func ","(","serviceBrokerUpdateRequestLabelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServiceBrokerUpdateRequestLabel records in the query","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestlabelquery-delete"},"func ","(","serviceBrokerUpdateRequestLabelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestLabelQuery) Delete(o *ServiceBrokerUpdateRequestLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServiceBrokerUpdateRequestLabel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestlabelquery-deleteall"},"func ","(","serviceBrokerUpdateRequestLabelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestlabelquery-deleteallslice"},"func ","(","serviceBrokerUpdateRequestLabelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestLabelQuery) DeleteAllSlice(o ServiceBrokerUpdateRequestLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestlabelquery-exists"},"func ","(","serviceBrokerUpdateRequestLabelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestlabelquery-insert"},"func ","(","serviceBrokerUpdateRequestLabelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestLabelQuery) Insert(o *ServiceBrokerUpdateRequestLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestlabelquery-one"},"func ","(","serviceBrokerUpdateRequestLabelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBrokerUpdateRequestLabel, error)\n")),(0,o.kt)("p",null,"One returns a single serviceBrokerUpdateRequestLabel record from the query","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestlabelquery-reload"},"func ","(","serviceBrokerUpdateRequestLabelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestLabelQuery) Reload(o *ServiceBrokerUpdateRequestLabel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestlabelquery-reloadall"},"func ","(","serviceBrokerUpdateRequestLabelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestLabelQuery) ReloadAll(o *ServiceBrokerUpdateRequestLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestlabelquery-removeresource"},"func ","(","serviceBrokerUpdateRequestLabelQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestLabelQuery) RemoveResource(o *ServiceBrokerUpdateRequestLabel, ctx context.Context, exec boil.ContextExecutor, related *ServiceBrokerUpdateRequest) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestlabelquery-resource"},"func ","(","serviceBrokerUpdateRequestLabelQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestLabelQuery) Resource(o *ServiceBrokerUpdateRequestLabel, mods ...qm.QueryMod) serviceBrokerUpdateRequestQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestlabelquery-setresource"},"func ","(","serviceBrokerUpdateRequestLabelQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestLabelQuery) SetResource(o *ServiceBrokerUpdateRequestLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceBrokerUpdateRequest) error\n")),(0,o.kt)("p",null,"SetResource of the serviceBrokerUpdateRequestLabel to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceServiceBrokerUpdateRequestLabels","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestlabelquery-update"},"func ","(","serviceBrokerUpdateRequestLabelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestLabelQuery) Update(o *ServiceBrokerUpdateRequestLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServiceBrokerUpdateRequestLabel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestlabelquery-updateall"},"func ","(","serviceBrokerUpdateRequestLabelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestlabelquery-updateallslice"},"func ","(","serviceBrokerUpdateRequestLabelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestLabelQuery) UpdateAllSlice(o ServiceBrokerUpdateRequestLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestlabelquery-upsert"},"func ","(","serviceBrokerUpdateRequestLabelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestLabelQuery) Upsert(o *ServiceBrokerUpdateRequestLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestlabelr"},"type serviceBrokerUpdateRequestLabelR"),(0,o.kt)("p",null,"serviceBrokerUpdateRequestLabelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type serviceBrokerUpdateRequestLabelR struct {\n    Resource *ServiceBrokerUpdateRequest `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestlabelr-newstruct"},"func ","(","*","serviceBrokerUpdateRequestLabelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*serviceBrokerUpdateRequestLabelR) NewStruct() *serviceBrokerUpdateRequestLabelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestquery"},"type serviceBrokerUpdateRequestQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceBrokerUpdateRequestQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequests"},"func ServiceBrokerUpdateRequests"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceBrokerUpdateRequests(mods ...qm.QueryMod) serviceBrokerUpdateRequestQuery\n")),(0,o.kt)("p",null,"ServiceBrokerUpdateRequests retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-addresourceservicebrokerupdaterequestannotations"},"func ","(","serviceBrokerUpdateRequestQuery",")"," AddResourceServiceBrokerUpdateRequestAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) AddResourceServiceBrokerUpdateRequestAnnotations(o *ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBrokerUpdateRequestAnnotation) error\n")),(0,o.kt)("p",null,"AddResourceServiceBrokerUpdateRequestAnnotations adds the given related objects to the existing relationships of the service","_","broker","_","update","_","request\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceServiceBrokerUpdateRequestAnnotations","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-addresourceservicebrokerupdaterequestlabels"},"func ","(","serviceBrokerUpdateRequestQuery",")"," AddResourceServiceBrokerUpdateRequestLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) AddResourceServiceBrokerUpdateRequestLabels(o *ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBrokerUpdateRequestLabel) error\n")),(0,o.kt)("p",null,"AddResourceServiceBrokerUpdateRequestLabels adds the given related objects to the existing relationships of the service","_","broker","_","update","_","request\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceServiceBrokerUpdateRequestLabels","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-all"},"func ","(","serviceBrokerUpdateRequestQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceBrokerUpdateRequestSlice, error)\n")),(0,o.kt)("p",null,"All returns all ServiceBrokerUpdateRequest records from the query","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-count"},"func ","(","serviceBrokerUpdateRequestQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServiceBrokerUpdateRequest records in the query","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-delete"},"func ","(","serviceBrokerUpdateRequestQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) Delete(o *ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServiceBrokerUpdateRequest record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-deleteall"},"func ","(","serviceBrokerUpdateRequestQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-deleteallslice"},"func ","(","serviceBrokerUpdateRequestQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) DeleteAllSlice(o ServiceBrokerUpdateRequestSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-exists"},"func ","(","serviceBrokerUpdateRequestQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-fkservicebroker"},"func ","(","serviceBrokerUpdateRequestQuery",")"," FKServiceBroker"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) FKServiceBroker(o *ServiceBrokerUpdateRequest, mods ...qm.QueryMod) serviceBrokerQuery\n")),(0,o.kt)("p",null,"FKServiceBroker pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-insert"},"func ","(","serviceBrokerUpdateRequestQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) Insert(o *ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-one"},"func ","(","serviceBrokerUpdateRequestQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBrokerUpdateRequest, error)\n")),(0,o.kt)("p",null,"One returns a single serviceBrokerUpdateRequest record from the query","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-reload"},"func ","(","serviceBrokerUpdateRequestQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) Reload(o *ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-reloadall"},"func ","(","serviceBrokerUpdateRequestQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) ReloadAll(o *ServiceBrokerUpdateRequestSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-removefkservicebroker"},"func ","(","serviceBrokerUpdateRequestQuery",")"," RemoveFKServiceBroker"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) RemoveFKServiceBroker(o *ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, related *ServiceBroker) error\n")),(0,o.kt)("p",null,"RemoveFKServiceBroker relationship","."," Sets o",".","R",".","FKServiceBroker to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-removeresourceservicebrokerupdaterequestannotations"},"func ","(","serviceBrokerUpdateRequestQuery",")"," RemoveResourceServiceBrokerUpdateRequestAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) RemoveResourceServiceBrokerUpdateRequestAnnotations(o *ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, related ...*ServiceBrokerUpdateRequestAnnotation) error\n")),(0,o.kt)("p",null,"RemoveResourceServiceBrokerUpdateRequestAnnotations relationships from objects passed in","."," Removes related items from R",".","ResourceServiceBrokerUpdateRequestAnnotations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-removeresourceservicebrokerupdaterequestlabels"},"func ","(","serviceBrokerUpdateRequestQuery",")"," RemoveResourceServiceBrokerUpdateRequestLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) RemoveResourceServiceBrokerUpdateRequestLabels(o *ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, related ...*ServiceBrokerUpdateRequestLabel) error\n")),(0,o.kt)("p",null,"RemoveResourceServiceBrokerUpdateRequestLabels relationships from objects passed in","."," Removes related items from R",".","ResourceServiceBrokerUpdateRequestLabels ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-resourceservicebrokerupdaterequestannotations"},"func ","(","serviceBrokerUpdateRequestQuery",")"," ResourceServiceBrokerUpdateRequestAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) ResourceServiceBrokerUpdateRequestAnnotations(o *ServiceBrokerUpdateRequest, mods ...qm.QueryMod) serviceBrokerUpdateRequestAnnotationQuery\n")),(0,o.kt)("p",null,"ResourceServiceBrokerUpdateRequestAnnotations retrieves all the service","_","broker","_","update","_","request","_","annotation's ServiceBrokerUpdateRequestAnnotations with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-resourceservicebrokerupdaterequestlabels"},"func ","(","serviceBrokerUpdateRequestQuery",")"," ResourceServiceBrokerUpdateRequestLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) ResourceServiceBrokerUpdateRequestLabels(o *ServiceBrokerUpdateRequest, mods ...qm.QueryMod) serviceBrokerUpdateRequestLabelQuery\n")),(0,o.kt)("p",null,"ResourceServiceBrokerUpdateRequestLabels retrieves all the service","_","broker","_","update","_","request","_","label's ServiceBrokerUpdateRequestLabels with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-setfkservicebroker"},"func ","(","serviceBrokerUpdateRequestQuery",")"," SetFKServiceBroker"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) SetFKServiceBroker(o *ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceBroker) error\n")),(0,o.kt)("p",null,"SetFKServiceBroker of the serviceBrokerUpdateRequest to the related item","."," Sets o",".","R",".","FKServiceBroker to related","."," Adds o to related",".","R",".","FKServiceBrokerServiceBrokerUpdateRequests","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-setresourceservicebrokerupdaterequestannotations"},"func ","(","serviceBrokerUpdateRequestQuery",")"," SetResourceServiceBrokerUpdateRequestAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) SetResourceServiceBrokerUpdateRequestAnnotations(o *ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBrokerUpdateRequestAnnotation) error\n")),(0,o.kt)("p",null,"SetResourceServiceBrokerUpdateRequestAnnotations removes all previously related items of the service","_","broker","_","update","_","request replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceServiceBrokerUpdateRequestAnnotations accordingly","."," Replaces o",".","R",".","ResourceServiceBrokerUpdateRequestAnnotations with related","."," Sets related",".","R",".","Resource's ResourceServiceBrokerUpdateRequestAnnotations accordingly","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-setresourceservicebrokerupdaterequestlabels"},"func ","(","serviceBrokerUpdateRequestQuery",")"," SetResourceServiceBrokerUpdateRequestLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) SetResourceServiceBrokerUpdateRequestLabels(o *ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBrokerUpdateRequestLabel) error\n")),(0,o.kt)("p",null,"SetResourceServiceBrokerUpdateRequestLabels removes all previously related items of the service","_","broker","_","update","_","request replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceServiceBrokerUpdateRequestLabels accordingly","."," Replaces o",".","R",".","ResourceServiceBrokerUpdateRequestLabels with related","."," Sets related",".","R",".","Resource's ResourceServiceBrokerUpdateRequestLabels accordingly","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-update"},"func ","(","serviceBrokerUpdateRequestQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) Update(o *ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServiceBrokerUpdateRequest","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-updateall"},"func ","(","serviceBrokerUpdateRequestQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-updateallslice"},"func ","(","serviceBrokerUpdateRequestQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) UpdateAllSlice(o ServiceBrokerUpdateRequestSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestquery-upsert"},"func ","(","serviceBrokerUpdateRequestQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceBrokerUpdateRequestQuery) Upsert(o *ServiceBrokerUpdateRequest, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-servicebrokerupdaterequestr"},"type serviceBrokerUpdateRequestR"),(0,o.kt)("p",null,"serviceBrokerUpdateRequestR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type serviceBrokerUpdateRequestR struct {\n    FKServiceBroker                               *ServiceBroker                            `boil:"FKServiceBroker" json:"FKServiceBroker" toml:"FKServiceBroker" yaml:"FKServiceBroker"`\n    ResourceServiceBrokerUpdateRequestAnnotations ServiceBrokerUpdateRequestAnnotationSlice `boil:"ResourceServiceBrokerUpdateRequestAnnotations" json:"ResourceServiceBrokerUpdateRequestAnnotations" toml:"ResourceServiceBrokerUpdateRequestAnnotations" yaml:"ResourceServiceBrokerUpdateRequestAnnotations"`\n    ResourceServiceBrokerUpdateRequestLabels      ServiceBrokerUpdateRequestLabelSlice      `boil:"ResourceServiceBrokerUpdateRequestLabels" json:"ResourceServiceBrokerUpdateRequestLabels" toml:"ResourceServiceBrokerUpdateRequestLabels" yaml:"ResourceServiceBrokerUpdateRequestLabels"`\n}\n')),(0,o.kt)("h3",{id:"func-servicebrokerupdaterequestr-newstruct"},"func ","(","*","serviceBrokerUpdateRequestR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*serviceBrokerUpdateRequestR) NewStruct() *serviceBrokerUpdateRequestR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-servicedashboardclientl"},"type serviceDashboardClientL"),(0,o.kt)("p",null,"serviceDashboardClientL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceDashboardClientL struct{}\n")),(0,o.kt)("h2",{id:"type-servicedashboardclientquery"},"type serviceDashboardClientQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceDashboardClientQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-servicedashboardclients"},"func ServiceDashboardClients"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceDashboardClients(mods ...qm.QueryMod) serviceDashboardClientQuery\n")),(0,o.kt)("p",null,"ServiceDashboardClients retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-servicedashboardclientquery-all"},"func ","(","serviceDashboardClientQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceDashboardClientQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceDashboardClientSlice, error)\n")),(0,o.kt)("p",null,"All returns all ServiceDashboardClient records from the query","."),(0,o.kt)("h3",{id:"func-servicedashboardclientquery-count"},"func ","(","serviceDashboardClientQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceDashboardClientQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServiceDashboardClient records in the query","."),(0,o.kt)("h3",{id:"func-servicedashboardclientquery-delete"},"func ","(","serviceDashboardClientQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceDashboardClientQuery) Delete(o *ServiceDashboardClient, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServiceDashboardClient record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-servicedashboardclientquery-deleteall"},"func ","(","serviceDashboardClientQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceDashboardClientQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-servicedashboardclientquery-deleteallslice"},"func ","(","serviceDashboardClientQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceDashboardClientQuery) DeleteAllSlice(o ServiceDashboardClientSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicedashboardclientquery-exists"},"func ","(","serviceDashboardClientQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceDashboardClientQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-servicedashboardclientquery-insert"},"func ","(","serviceDashboardClientQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceDashboardClientQuery) Insert(o *ServiceDashboardClient, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-servicedashboardclientquery-one"},"func ","(","serviceDashboardClientQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceDashboardClientQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceDashboardClient, error)\n")),(0,o.kt)("p",null,"One returns a single serviceDashboardClient record from the query","."),(0,o.kt)("h3",{id:"func-servicedashboardclientquery-reload"},"func ","(","serviceDashboardClientQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceDashboardClientQuery) Reload(o *ServiceDashboardClient, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-servicedashboardclientquery-reloadall"},"func ","(","serviceDashboardClientQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceDashboardClientQuery) ReloadAll(o *ServiceDashboardClientSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-servicedashboardclientquery-update"},"func ","(","serviceDashboardClientQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceDashboardClientQuery) Update(o *ServiceDashboardClient, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServiceDashboardClient","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-servicedashboardclientquery-updateall"},"func ","(","serviceDashboardClientQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceDashboardClientQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-servicedashboardclientquery-updateallslice"},"func ","(","serviceDashboardClientQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceDashboardClientQuery) UpdateAllSlice(o ServiceDashboardClientSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicedashboardclientquery-upsert"},"func ","(","serviceDashboardClientQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceDashboardClientQuery) Upsert(o *ServiceDashboardClient, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-servicedashboardclientr"},"type serviceDashboardClientR"),(0,o.kt)("p",null,"serviceDashboardClientR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceDashboardClientR struct {\n}\n")),(0,o.kt)("h3",{id:"func-servicedashboardclientr-newstruct"},"func ","(","*","serviceDashboardClientR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*serviceDashboardClientR) NewStruct() *serviceDashboardClientR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-serviceinstanceannotationl"},"type serviceInstanceAnnotationL"),(0,o.kt)("p",null,"serviceInstanceAnnotationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceInstanceAnnotationL struct{}\n")),(0,o.kt)("h3",{id:"func-serviceinstanceannotationl-loadresource"},"func ","(","serviceInstanceAnnotationL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceInstanceAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceInstanceAnnotation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-serviceinstanceannotationquery"},"type serviceInstanceAnnotationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceInstanceAnnotationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-serviceinstanceannotations"},"func ServiceInstanceAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceInstanceAnnotations(mods ...qm.QueryMod) serviceInstanceAnnotationQuery\n")),(0,o.kt)("p",null,"ServiceInstanceAnnotations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-serviceinstanceannotationquery-all"},"func ","(","serviceInstanceAnnotationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceInstanceAnnotationSlice, error)\n")),(0,o.kt)("p",null,"All returns all ServiceInstanceAnnotation records from the query","."),(0,o.kt)("h3",{id:"func-serviceinstanceannotationquery-count"},"func ","(","serviceInstanceAnnotationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServiceInstanceAnnotation records in the query","."),(0,o.kt)("h3",{id:"func-serviceinstanceannotationquery-delete"},"func ","(","serviceInstanceAnnotationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceAnnotationQuery) Delete(o *ServiceInstanceAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServiceInstanceAnnotation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-serviceinstanceannotationquery-deleteall"},"func ","(","serviceInstanceAnnotationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-serviceinstanceannotationquery-deleteallslice"},"func ","(","serviceInstanceAnnotationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceAnnotationQuery) DeleteAllSlice(o ServiceInstanceAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-serviceinstanceannotationquery-exists"},"func ","(","serviceInstanceAnnotationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-serviceinstanceannotationquery-insert"},"func ","(","serviceInstanceAnnotationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceAnnotationQuery) Insert(o *ServiceInstanceAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-serviceinstanceannotationquery-one"},"func ","(","serviceInstanceAnnotationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceInstanceAnnotation, error)\n")),(0,o.kt)("p",null,"One returns a single serviceInstanceAnnotation record from the query","."),(0,o.kt)("h3",{id:"func-serviceinstanceannotationquery-reload"},"func ","(","serviceInstanceAnnotationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceAnnotationQuery) Reload(o *ServiceInstanceAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-serviceinstanceannotationquery-reloadall"},"func ","(","serviceInstanceAnnotationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceAnnotationQuery) ReloadAll(o *ServiceInstanceAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-serviceinstanceannotationquery-removeresource"},"func ","(","serviceInstanceAnnotationQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceAnnotationQuery) RemoveResource(o *ServiceInstanceAnnotation, ctx context.Context, exec boil.ContextExecutor, related *ServiceInstance) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-serviceinstanceannotationquery-resource"},"func ","(","serviceInstanceAnnotationQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceAnnotationQuery) Resource(o *ServiceInstanceAnnotation, mods ...qm.QueryMod) serviceInstanceQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-serviceinstanceannotationquery-setresource"},"func ","(","serviceInstanceAnnotationQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceAnnotationQuery) SetResource(o *ServiceInstanceAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceInstance) error\n")),(0,o.kt)("p",null,"SetResource of the serviceInstanceAnnotation to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceServiceInstanceAnnotations","."),(0,o.kt)("h3",{id:"func-serviceinstanceannotationquery-update"},"func ","(","serviceInstanceAnnotationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceAnnotationQuery) Update(o *ServiceInstanceAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServiceInstanceAnnotation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-serviceinstanceannotationquery-updateall"},"func ","(","serviceInstanceAnnotationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-serviceinstanceannotationquery-updateallslice"},"func ","(","serviceInstanceAnnotationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceAnnotationQuery) UpdateAllSlice(o ServiceInstanceAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-serviceinstanceannotationquery-upsert"},"func ","(","serviceInstanceAnnotationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceAnnotationQuery) Upsert(o *ServiceInstanceAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-serviceinstanceannotationr"},"type serviceInstanceAnnotationR"),(0,o.kt)("p",null,"serviceInstanceAnnotationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type serviceInstanceAnnotationR struct {\n    Resource *ServiceInstance `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-serviceinstanceannotationr-newstruct"},"func ","(","*","serviceInstanceAnnotationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*serviceInstanceAnnotationR) NewStruct() *serviceInstanceAnnotationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-serviceinstancel"},"type serviceInstanceL"),(0,o.kt)("p",null,"serviceInstanceL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceInstanceL struct{}\n")),(0,o.kt)("h3",{id:"func-serviceinstancel-loadresourceserviceinstanceannotations"},"func ","(","serviceInstanceL",")"," LoadResourceServiceInstanceAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceInstanceL) LoadResourceServiceInstanceAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceInstance interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceServiceInstanceAnnotations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-serviceinstancel-loadresourceserviceinstancelabels"},"func ","(","serviceInstanceL",")"," LoadResourceServiceInstanceLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceInstanceL) LoadResourceServiceInstanceLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceInstance interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceServiceInstanceLabels allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-serviceinstancel-loadroutebindings"},"func ","(","serviceInstanceL",")"," LoadRouteBindings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceInstanceL) LoadRouteBindings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceInstance interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadRouteBindings allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-serviceinstancel-loadservicebindings"},"func ","(","serviceInstanceL",")"," LoadServiceBindings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceInstanceL) LoadServiceBindings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceInstance interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadServiceBindings allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-serviceinstancel-loadserviceinstanceoperations"},"func ","(","serviceInstanceL",")"," LoadServiceInstanceOperations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceInstanceL) LoadServiceInstanceOperations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceInstance interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadServiceInstanceOperations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-serviceinstancel-loadservicekeys"},"func ","(","serviceInstanceL",")"," LoadServiceKeys"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceInstanceL) LoadServiceKeys(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceInstance interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadServiceKeys allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-serviceinstancel-loadserviceplan"},"func ","(","serviceInstanceL",")"," LoadServicePlan"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceInstanceL) LoadServicePlan(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceInstance interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadServicePlan allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-serviceinstancel-loadspace"},"func ","(","serviceInstanceL",")"," LoadSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceInstanceL) LoadSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceInstance interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSpace allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-serviceinstancel-loadspaces"},"func ","(","serviceInstanceL",")"," LoadSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceInstanceL) LoadSpaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceInstance interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSpaces allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-serviceinstancelabell"},"type serviceInstanceLabelL"),(0,o.kt)("p",null,"serviceInstanceLabelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceInstanceLabelL struct{}\n")),(0,o.kt)("h3",{id:"func-serviceinstancelabell-loadresource"},"func ","(","serviceInstanceLabelL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceInstanceLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceInstanceLabel interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-serviceinstancelabelquery"},"type serviceInstanceLabelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceInstanceLabelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-serviceinstancelabels"},"func ServiceInstanceLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceInstanceLabels(mods ...qm.QueryMod) serviceInstanceLabelQuery\n")),(0,o.kt)("p",null,"ServiceInstanceLabels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-serviceinstancelabelquery-all"},"func ","(","serviceInstanceLabelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceInstanceLabelSlice, error)\n")),(0,o.kt)("p",null,"All returns all ServiceInstanceLabel records from the query","."),(0,o.kt)("h3",{id:"func-serviceinstancelabelquery-count"},"func ","(","serviceInstanceLabelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServiceInstanceLabel records in the query","."),(0,o.kt)("h3",{id:"func-serviceinstancelabelquery-delete"},"func ","(","serviceInstanceLabelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceLabelQuery) Delete(o *ServiceInstanceLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServiceInstanceLabel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-serviceinstancelabelquery-deleteall"},"func ","(","serviceInstanceLabelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-serviceinstancelabelquery-deleteallslice"},"func ","(","serviceInstanceLabelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceLabelQuery) DeleteAllSlice(o ServiceInstanceLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-serviceinstancelabelquery-exists"},"func ","(","serviceInstanceLabelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-serviceinstancelabelquery-insert"},"func ","(","serviceInstanceLabelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceLabelQuery) Insert(o *ServiceInstanceLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-serviceinstancelabelquery-one"},"func ","(","serviceInstanceLabelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceInstanceLabel, error)\n")),(0,o.kt)("p",null,"One returns a single serviceInstanceLabel record from the query","."),(0,o.kt)("h3",{id:"func-serviceinstancelabelquery-reload"},"func ","(","serviceInstanceLabelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceLabelQuery) Reload(o *ServiceInstanceLabel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-serviceinstancelabelquery-reloadall"},"func ","(","serviceInstanceLabelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceLabelQuery) ReloadAll(o *ServiceInstanceLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-serviceinstancelabelquery-removeresource"},"func ","(","serviceInstanceLabelQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceLabelQuery) RemoveResource(o *ServiceInstanceLabel, ctx context.Context, exec boil.ContextExecutor, related *ServiceInstance) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-serviceinstancelabelquery-resource"},"func ","(","serviceInstanceLabelQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceLabelQuery) Resource(o *ServiceInstanceLabel, mods ...qm.QueryMod) serviceInstanceQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-serviceinstancelabelquery-setresource"},"func ","(","serviceInstanceLabelQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceLabelQuery) SetResource(o *ServiceInstanceLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceInstance) error\n")),(0,o.kt)("p",null,"SetResource of the serviceInstanceLabel to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceServiceInstanceLabels","."),(0,o.kt)("h3",{id:"func-serviceinstancelabelquery-update"},"func ","(","serviceInstanceLabelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceLabelQuery) Update(o *ServiceInstanceLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServiceInstanceLabel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-serviceinstancelabelquery-updateall"},"func ","(","serviceInstanceLabelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-serviceinstancelabelquery-updateallslice"},"func ","(","serviceInstanceLabelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceLabelQuery) UpdateAllSlice(o ServiceInstanceLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-serviceinstancelabelquery-upsert"},"func ","(","serviceInstanceLabelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceLabelQuery) Upsert(o *ServiceInstanceLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-serviceinstancelabelr"},"type serviceInstanceLabelR"),(0,o.kt)("p",null,"serviceInstanceLabelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type serviceInstanceLabelR struct {\n    Resource *ServiceInstance `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-serviceinstancelabelr-newstruct"},"func ","(","*","serviceInstanceLabelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*serviceInstanceLabelR) NewStruct() *serviceInstanceLabelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-serviceinstanceoperationl"},"type serviceInstanceOperationL"),(0,o.kt)("p",null,"serviceInstanceOperationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceInstanceOperationL struct{}\n")),(0,o.kt)("h3",{id:"func-serviceinstanceoperationl-loadserviceinstance"},"func ","(","serviceInstanceOperationL",")"," LoadServiceInstance"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceInstanceOperationL) LoadServiceInstance(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceInstanceOperation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadServiceInstance allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-serviceinstanceoperationquery"},"type serviceInstanceOperationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceInstanceOperationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-serviceinstanceoperations"},"func ServiceInstanceOperations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceInstanceOperations(mods ...qm.QueryMod) serviceInstanceOperationQuery\n")),(0,o.kt)("p",null,"ServiceInstanceOperations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-serviceinstanceoperationquery-all"},"func ","(","serviceInstanceOperationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceOperationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceInstanceOperationSlice, error)\n")),(0,o.kt)("p",null,"All returns all ServiceInstanceOperation records from the query","."),(0,o.kt)("h3",{id:"func-serviceinstanceoperationquery-count"},"func ","(","serviceInstanceOperationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceOperationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServiceInstanceOperation records in the query","."),(0,o.kt)("h3",{id:"func-serviceinstanceoperationquery-delete"},"func ","(","serviceInstanceOperationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceOperationQuery) Delete(o *ServiceInstanceOperation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServiceInstanceOperation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-serviceinstanceoperationquery-deleteall"},"func ","(","serviceInstanceOperationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceOperationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-serviceinstanceoperationquery-deleteallslice"},"func ","(","serviceInstanceOperationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceOperationQuery) DeleteAllSlice(o ServiceInstanceOperationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-serviceinstanceoperationquery-exists"},"func ","(","serviceInstanceOperationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceOperationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-serviceinstanceoperationquery-insert"},"func ","(","serviceInstanceOperationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceOperationQuery) Insert(o *ServiceInstanceOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-serviceinstanceoperationquery-one"},"func ","(","serviceInstanceOperationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceOperationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceInstanceOperation, error)\n")),(0,o.kt)("p",null,"One returns a single serviceInstanceOperation record from the query","."),(0,o.kt)("h3",{id:"func-serviceinstanceoperationquery-reload"},"func ","(","serviceInstanceOperationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceOperationQuery) Reload(o *ServiceInstanceOperation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-serviceinstanceoperationquery-reloadall"},"func ","(","serviceInstanceOperationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceOperationQuery) ReloadAll(o *ServiceInstanceOperationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-serviceinstanceoperationquery-removeserviceinstance"},"func ","(","serviceInstanceOperationQuery",")"," RemoveServiceInstance"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceOperationQuery) RemoveServiceInstance(o *ServiceInstanceOperation, ctx context.Context, exec boil.ContextExecutor, related *ServiceInstance) error\n")),(0,o.kt)("p",null,"RemoveServiceInstance relationship","."," Sets o",".","R",".","ServiceInstance to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-serviceinstanceoperationquery-serviceinstance"},"func ","(","serviceInstanceOperationQuery",")"," ServiceInstance"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceOperationQuery) ServiceInstance(o *ServiceInstanceOperation, mods ...qm.QueryMod) serviceInstanceQuery\n")),(0,o.kt)("p",null,"ServiceInstance pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-serviceinstanceoperationquery-setserviceinstance"},"func ","(","serviceInstanceOperationQuery",")"," SetServiceInstance"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceOperationQuery) SetServiceInstance(o *ServiceInstanceOperation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceInstance) error\n")),(0,o.kt)("p",null,"SetServiceInstance of the serviceInstanceOperation to the related item","."," Sets o",".","R",".","ServiceInstance to related","."," Adds o to related",".","R",".","ServiceInstanceOperations","."),(0,o.kt)("h3",{id:"func-serviceinstanceoperationquery-update"},"func ","(","serviceInstanceOperationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceOperationQuery) Update(o *ServiceInstanceOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServiceInstanceOperation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-serviceinstanceoperationquery-updateall"},"func ","(","serviceInstanceOperationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceOperationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-serviceinstanceoperationquery-updateallslice"},"func ","(","serviceInstanceOperationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceOperationQuery) UpdateAllSlice(o ServiceInstanceOperationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-serviceinstanceoperationquery-upsert"},"func ","(","serviceInstanceOperationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceOperationQuery) Upsert(o *ServiceInstanceOperation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-serviceinstanceoperationr"},"type serviceInstanceOperationR"),(0,o.kt)("p",null,"serviceInstanceOperationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type serviceInstanceOperationR struct {\n    ServiceInstance *ServiceInstance `boil:"ServiceInstance" json:"ServiceInstance" toml:"ServiceInstance" yaml:"ServiceInstance"`\n}\n')),(0,o.kt)("h3",{id:"func-serviceinstanceoperationr-newstruct"},"func ","(","*","serviceInstanceOperationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*serviceInstanceOperationR) NewStruct() *serviceInstanceOperationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-serviceinstancequery"},"type serviceInstanceQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceInstanceQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-serviceinstances"},"func ServiceInstances"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceInstances(mods ...qm.QueryMod) serviceInstanceQuery\n")),(0,o.kt)("p",null,"ServiceInstances retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-addresourceserviceinstanceannotations"},"func ","(","serviceInstanceQuery",")"," AddResourceServiceInstanceAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) AddResourceServiceInstanceAnnotations(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceInstanceAnnotation) error\n")),(0,o.kt)("p",null,"AddResourceServiceInstanceAnnotations adds the given related objects to the existing relationships of the service","_","instance\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceServiceInstanceAnnotations","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-addresourceserviceinstancelabels"},"func ","(","serviceInstanceQuery",")"," AddResourceServiceInstanceLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) AddResourceServiceInstanceLabels(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceInstanceLabel) error\n")),(0,o.kt)("p",null,"AddResourceServiceInstanceLabels adds the given related objects to the existing relationships of the service","_","instance\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceServiceInstanceLabels","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-addroutebindings"},"func ","(","serviceInstanceQuery",")"," AddRouteBindings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) AddRouteBindings(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteBinding) error\n")),(0,o.kt)("p",null,"AddRouteBindings adds the given related objects to the existing relationships of the service","_","instance\\, optionally inserting them as new records","."," Appends related to o",".","R",".","RouteBindings","."," Sets related",".","R",".","ServiceInstance appropriately","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-addservicebindings"},"func ","(","serviceInstanceQuery",")"," AddServiceBindings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) AddServiceBindings(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBinding) error\n")),(0,o.kt)("p",null,"AddServiceBindings adds the given related objects to the existing relationships of the service","_","instance\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ServiceBindings","."," Sets related",".","R",".","ServiceInstance appropriately","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-addserviceinstanceoperations"},"func ","(","serviceInstanceQuery",")"," AddServiceInstanceOperations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) AddServiceInstanceOperations(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceInstanceOperation) error\n")),(0,o.kt)("p",null,"AddServiceInstanceOperations adds the given related objects to the existing relationships of the service","_","instance\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ServiceInstanceOperations","."," Sets related",".","R",".","ServiceInstance appropriately","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-addservicekeys"},"func ","(","serviceInstanceQuery",")"," AddServiceKeys"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) AddServiceKeys(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceKey) error\n")),(0,o.kt)("p",null,"AddServiceKeys adds the given related objects to the existing relationships of the service","_","instance\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ServiceKeys","."," Sets related",".","R",".","ServiceInstance appropriately","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-addspaces"},"func ","(","serviceInstanceQuery",")"," AddSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) AddSpaces(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Space) error\n")),(0,o.kt)("p",null,"AddSpaces adds the given related objects to the existing relationships of the service","_","instance\\, optionally inserting them as new records","."," Appends related to o",".","R",".","Spaces","."," Sets related",".","R",".","SharedServiceInstances appropriately","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-all"},"func ","(","serviceInstanceQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceInstanceSlice, error)\n")),(0,o.kt)("p",null,"All returns all ServiceInstance records from the query","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-count"},"func ","(","serviceInstanceQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServiceInstance records in the query","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-delete"},"func ","(","serviceInstanceQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) Delete(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServiceInstance record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-deleteall"},"func ","(","serviceInstanceQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-deleteallslice"},"func ","(","serviceInstanceQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) DeleteAllSlice(o ServiceInstanceSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-exists"},"func ","(","serviceInstanceQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-insert"},"func ","(","serviceInstanceQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) Insert(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-one"},"func ","(","serviceInstanceQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceInstance, error)\n")),(0,o.kt)("p",null,"One returns a single serviceInstance record from the query","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-reload"},"func ","(","serviceInstanceQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) Reload(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-reloadall"},"func ","(","serviceInstanceQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) ReloadAll(o *ServiceInstanceSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-removeresourceserviceinstanceannotations"},"func ","(","serviceInstanceQuery",")"," RemoveResourceServiceInstanceAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) RemoveResourceServiceInstanceAnnotations(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, related ...*ServiceInstanceAnnotation) error\n")),(0,o.kt)("p",null,"RemoveResourceServiceInstanceAnnotations relationships from objects passed in","."," Removes related items from R",".","ResourceServiceInstanceAnnotations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-removeresourceserviceinstancelabels"},"func ","(","serviceInstanceQuery",")"," RemoveResourceServiceInstanceLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) RemoveResourceServiceInstanceLabels(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, related ...*ServiceInstanceLabel) error\n")),(0,o.kt)("p",null,"RemoveResourceServiceInstanceLabels relationships from objects passed in","."," Removes related items from R",".","ResourceServiceInstanceLabels ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-removeroutebindings"},"func ","(","serviceInstanceQuery",")"," RemoveRouteBindings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) RemoveRouteBindings(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, related ...*RouteBinding) error\n")),(0,o.kt)("p",null,"RemoveRouteBindings relationships from objects passed in","."," Removes related items from R",".","RouteBindings ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","ServiceInstance","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-removeserviceinstanceoperations"},"func ","(","serviceInstanceQuery",")"," RemoveServiceInstanceOperations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) RemoveServiceInstanceOperations(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, related ...*ServiceInstanceOperation) error\n")),(0,o.kt)("p",null,"RemoveServiceInstanceOperations relationships from objects passed in","."," Removes related items from R",".","ServiceInstanceOperations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","ServiceInstance","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-removeserviceplan"},"func ","(","serviceInstanceQuery",")"," RemoveServicePlan"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) RemoveServicePlan(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, related *ServicePlan) error\n")),(0,o.kt)("p",null,"RemoveServicePlan relationship","."," Sets o",".","R",".","ServicePlan to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-removespaces"},"func ","(","serviceInstanceQuery",")"," RemoveSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) RemoveSpaces(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, related ...*Space) error\n")),(0,o.kt)("p",null,"RemoveSpaces relationships from objects passed in","."," Removes related items from R",".","Spaces ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","SharedServiceInstances","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-resourceserviceinstanceannotations"},"func ","(","serviceInstanceQuery",")"," ResourceServiceInstanceAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) ResourceServiceInstanceAnnotations(o *ServiceInstance, mods ...qm.QueryMod) serviceInstanceAnnotationQuery\n")),(0,o.kt)("p",null,"ResourceServiceInstanceAnnotations retrieves all the service","_","instance","_","annotation's ServiceInstanceAnnotations with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-resourceserviceinstancelabels"},"func ","(","serviceInstanceQuery",")"," ResourceServiceInstanceLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) ResourceServiceInstanceLabels(o *ServiceInstance, mods ...qm.QueryMod) serviceInstanceLabelQuery\n")),(0,o.kt)("p",null,"ResourceServiceInstanceLabels retrieves all the service","_","instance","_","label's ServiceInstanceLabels with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-routebindings"},"func ","(","serviceInstanceQuery",")"," RouteBindings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) RouteBindings(o *ServiceInstance, mods ...qm.QueryMod) routeBindingQuery\n")),(0,o.kt)("p",null,"RouteBindings retrieves all the route","_","binding's RouteBindings with an executor","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-servicebindings"},"func ","(","serviceInstanceQuery",")"," ServiceBindings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) ServiceBindings(o *ServiceInstance, mods ...qm.QueryMod) serviceBindingQuery\n")),(0,o.kt)("p",null,"ServiceBindings retrieves all the service","_","binding's ServiceBindings with an executor","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-serviceinstanceoperations"},"func ","(","serviceInstanceQuery",")"," ServiceInstanceOperations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) ServiceInstanceOperations(o *ServiceInstance, mods ...qm.QueryMod) serviceInstanceOperationQuery\n")),(0,o.kt)("p",null,"ServiceInstanceOperations retrieves all the service","_","instance","_","operation's ServiceInstanceOperations with an executor","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-servicekeys"},"func ","(","serviceInstanceQuery",")"," ServiceKeys"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) ServiceKeys(o *ServiceInstance, mods ...qm.QueryMod) serviceKeyQuery\n")),(0,o.kt)("p",null,"ServiceKeys retrieves all the service","_","key's ServiceKeys with an executor","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-serviceplan"},"func ","(","serviceInstanceQuery",")"," ServicePlan"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) ServicePlan(o *ServiceInstance, mods ...qm.QueryMod) servicePlanQuery\n")),(0,o.kt)("p",null,"ServicePlan pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-setresourceserviceinstanceannotations"},"func ","(","serviceInstanceQuery",")"," SetResourceServiceInstanceAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) SetResourceServiceInstanceAnnotations(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceInstanceAnnotation) error\n")),(0,o.kt)("p",null,"SetResourceServiceInstanceAnnotations removes all previously related items of the service","_","instance replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceServiceInstanceAnnotations accordingly","."," Replaces o",".","R",".","ResourceServiceInstanceAnnotations with related","."," Sets related",".","R",".","Resource's ResourceServiceInstanceAnnotations accordingly","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-setresourceserviceinstancelabels"},"func ","(","serviceInstanceQuery",")"," SetResourceServiceInstanceLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) SetResourceServiceInstanceLabels(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceInstanceLabel) error\n")),(0,o.kt)("p",null,"SetResourceServiceInstanceLabels removes all previously related items of the service","_","instance replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceServiceInstanceLabels accordingly","."," Replaces o",".","R",".","ResourceServiceInstanceLabels with related","."," Sets related",".","R",".","Resource's ResourceServiceInstanceLabels accordingly","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-setroutebindings"},"func ","(","serviceInstanceQuery",")"," SetRouteBindings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) SetRouteBindings(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteBinding) error\n")),(0,o.kt)("p",null,"SetRouteBindings removes all previously related items of the service","_","instance replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","ServiceInstance's RouteBindings accordingly","."," Replaces o",".","R",".","RouteBindings with related","."," Sets related",".","R",".","ServiceInstance's RouteBindings accordingly","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-setserviceinstanceoperations"},"func ","(","serviceInstanceQuery",")"," SetServiceInstanceOperations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) SetServiceInstanceOperations(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceInstanceOperation) error\n")),(0,o.kt)("p",null,"SetServiceInstanceOperations removes all previously related items of the service","_","instance replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","ServiceInstance's ServiceInstanceOperations accordingly","."," Replaces o",".","R",".","ServiceInstanceOperations with related","."," Sets related",".","R",".","ServiceInstance's ServiceInstanceOperations accordingly","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-setserviceplan"},"func ","(","serviceInstanceQuery",")"," SetServicePlan"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) SetServicePlan(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServicePlan) error\n")),(0,o.kt)("p",null,"SetServicePlan of the serviceInstance to the related item","."," Sets o",".","R",".","ServicePlan to related","."," Adds o to related",".","R",".","ServiceInstances","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-setspace"},"func ","(","serviceInstanceQuery",")"," SetSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) SetSpace(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Space) error\n")),(0,o.kt)("p",null,"SetSpace of the serviceInstance to the related item","."," Sets o",".","R",".","Space to related","."," Adds o to related",".","R",".","ServiceInstances","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-setspaces"},"func ","(","serviceInstanceQuery",")"," SetSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) SetSpaces(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Space) error\n")),(0,o.kt)("p",null,"SetSpaces removes all previously related items of the service","_","instance replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","SharedServiceInstances's Spaces accordingly","."," Replaces o",".","R",".","Spaces with related","."," Sets related",".","R",".","SharedServiceInstances's Spaces accordingly","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-space"},"func ","(","serviceInstanceQuery",")"," Space"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) Space(o *ServiceInstance, mods ...qm.QueryMod) spaceQuery\n")),(0,o.kt)("p",null,"Space pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-spaces"},"func ","(","serviceInstanceQuery",")"," Spaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) Spaces(o *ServiceInstance, mods ...qm.QueryMod) spaceQuery\n")),(0,o.kt)("p",null,"Spaces retrieves all the space's Spaces with an executor","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-update"},"func ","(","serviceInstanceQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) Update(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServiceInstance","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-updateall"},"func ","(","serviceInstanceQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-updateallslice"},"func ","(","serviceInstanceQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) UpdateAllSlice(o ServiceInstanceSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-serviceinstancequery-upsert"},"func ","(","serviceInstanceQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceInstanceQuery) Upsert(o *ServiceInstance, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-serviceinstancer"},"type serviceInstanceR"),(0,o.kt)("p",null,"serviceInstanceR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type serviceInstanceR struct {\n    Space                              *Space                         `boil:"Space" json:"Space" toml:"Space" yaml:"Space"`\n    ServicePlan                        *ServicePlan                   `boil:"ServicePlan" json:"ServicePlan" toml:"ServicePlan" yaml:"ServicePlan"`\n    RouteBindings                      RouteBindingSlice              `boil:"RouteBindings" json:"RouteBindings" toml:"RouteBindings" yaml:"RouteBindings"`\n    ServiceBindings                    ServiceBindingSlice            `boil:"ServiceBindings" json:"ServiceBindings" toml:"ServiceBindings" yaml:"ServiceBindings"`\n    ResourceServiceInstanceAnnotations ServiceInstanceAnnotationSlice `boil:"ResourceServiceInstanceAnnotations" json:"ResourceServiceInstanceAnnotations" toml:"ResourceServiceInstanceAnnotations" yaml:"ResourceServiceInstanceAnnotations"`\n    ResourceServiceInstanceLabels      ServiceInstanceLabelSlice      `boil:"ResourceServiceInstanceLabels" json:"ResourceServiceInstanceLabels" toml:"ResourceServiceInstanceLabels" yaml:"ResourceServiceInstanceLabels"`\n    ServiceInstanceOperations          ServiceInstanceOperationSlice  `boil:"ServiceInstanceOperations" json:"ServiceInstanceOperations" toml:"ServiceInstanceOperations" yaml:"ServiceInstanceOperations"`\n    Spaces                             SpaceSlice                     `boil:"Spaces" json:"Spaces" toml:"Spaces" yaml:"Spaces"`\n    ServiceKeys                        ServiceKeySlice                `boil:"ServiceKeys" json:"ServiceKeys" toml:"ServiceKeys" yaml:"ServiceKeys"`\n}\n')),(0,o.kt)("h3",{id:"func-serviceinstancer-newstruct"},"func ","(","*","serviceInstanceR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*serviceInstanceR) NewStruct() *serviceInstanceR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-servicekeyannotationl"},"type serviceKeyAnnotationL"),(0,o.kt)("p",null,"serviceKeyAnnotationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceKeyAnnotationL struct{}\n")),(0,o.kt)("h3",{id:"func-servicekeyannotationl-loadresource"},"func ","(","serviceKeyAnnotationL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceKeyAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceKeyAnnotation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-servicekeyannotationquery"},"type serviceKeyAnnotationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceKeyAnnotationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-servicekeyannotations"},"func ServiceKeyAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceKeyAnnotations(mods ...qm.QueryMod) serviceKeyAnnotationQuery\n")),(0,o.kt)("p",null,"ServiceKeyAnnotations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-servicekeyannotationquery-all"},"func ","(","serviceKeyAnnotationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceKeyAnnotationSlice, error)\n")),(0,o.kt)("p",null,"All returns all ServiceKeyAnnotation records from the query","."),(0,o.kt)("h3",{id:"func-servicekeyannotationquery-count"},"func ","(","serviceKeyAnnotationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServiceKeyAnnotation records in the query","."),(0,o.kt)("h3",{id:"func-servicekeyannotationquery-delete"},"func ","(","serviceKeyAnnotationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyAnnotationQuery) Delete(o *ServiceKeyAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServiceKeyAnnotation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-servicekeyannotationquery-deleteall"},"func ","(","serviceKeyAnnotationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-servicekeyannotationquery-deleteallslice"},"func ","(","serviceKeyAnnotationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyAnnotationQuery) DeleteAllSlice(o ServiceKeyAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicekeyannotationquery-exists"},"func ","(","serviceKeyAnnotationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-servicekeyannotationquery-insert"},"func ","(","serviceKeyAnnotationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyAnnotationQuery) Insert(o *ServiceKeyAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-servicekeyannotationquery-one"},"func ","(","serviceKeyAnnotationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceKeyAnnotation, error)\n")),(0,o.kt)("p",null,"One returns a single serviceKeyAnnotation record from the query","."),(0,o.kt)("h3",{id:"func-servicekeyannotationquery-reload"},"func ","(","serviceKeyAnnotationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyAnnotationQuery) Reload(o *ServiceKeyAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-servicekeyannotationquery-reloadall"},"func ","(","serviceKeyAnnotationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyAnnotationQuery) ReloadAll(o *ServiceKeyAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-servicekeyannotationquery-removeresource"},"func ","(","serviceKeyAnnotationQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyAnnotationQuery) RemoveResource(o *ServiceKeyAnnotation, ctx context.Context, exec boil.ContextExecutor, related *ServiceKey) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-servicekeyannotationquery-resource"},"func ","(","serviceKeyAnnotationQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyAnnotationQuery) Resource(o *ServiceKeyAnnotation, mods ...qm.QueryMod) serviceKeyQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-servicekeyannotationquery-setresource"},"func ","(","serviceKeyAnnotationQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyAnnotationQuery) SetResource(o *ServiceKeyAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceKey) error\n")),(0,o.kt)("p",null,"SetResource of the serviceKeyAnnotation to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceServiceKeyAnnotations","."),(0,o.kt)("h3",{id:"func-servicekeyannotationquery-update"},"func ","(","serviceKeyAnnotationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyAnnotationQuery) Update(o *ServiceKeyAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServiceKeyAnnotation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-servicekeyannotationquery-updateall"},"func ","(","serviceKeyAnnotationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-servicekeyannotationquery-updateallslice"},"func ","(","serviceKeyAnnotationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyAnnotationQuery) UpdateAllSlice(o ServiceKeyAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicekeyannotationquery-upsert"},"func ","(","serviceKeyAnnotationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyAnnotationQuery) Upsert(o *ServiceKeyAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-servicekeyannotationr"},"type serviceKeyAnnotationR"),(0,o.kt)("p",null,"serviceKeyAnnotationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type serviceKeyAnnotationR struct {\n    Resource *ServiceKey `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-servicekeyannotationr-newstruct"},"func ","(","*","serviceKeyAnnotationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*serviceKeyAnnotationR) NewStruct() *serviceKeyAnnotationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-servicekeyl"},"type serviceKeyL"),(0,o.kt)("p",null,"serviceKeyL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceKeyL struct{}\n")),(0,o.kt)("h3",{id:"func-servicekeyl-loadresourceservicekeyannotations"},"func ","(","serviceKeyL",")"," LoadResourceServiceKeyAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceKeyL) LoadResourceServiceKeyAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceKey interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceServiceKeyAnnotations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-servicekeyl-loadresourceservicekeylabels"},"func ","(","serviceKeyL",")"," LoadResourceServiceKeyLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceKeyL) LoadResourceServiceKeyLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceKey interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceServiceKeyLabels allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-servicekeyl-loadserviceinstance"},"func ","(","serviceKeyL",")"," LoadServiceInstance"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceKeyL) LoadServiceInstance(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceKey interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadServiceInstance allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-servicekeyl-loadservicekeyoperation"},"func ","(","serviceKeyL",")"," LoadServiceKeyOperation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceKeyL) LoadServiceKeyOperation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceKey interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadServiceKeyOperation allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","1 relationship","."),(0,o.kt)("h2",{id:"type-servicekeylabell"},"type serviceKeyLabelL"),(0,o.kt)("p",null,"serviceKeyLabelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceKeyLabelL struct{}\n")),(0,o.kt)("h3",{id:"func-servicekeylabell-loadresource"},"func ","(","serviceKeyLabelL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceKeyLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceKeyLabel interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-servicekeylabelquery"},"type serviceKeyLabelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceKeyLabelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-servicekeylabels"},"func ServiceKeyLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceKeyLabels(mods ...qm.QueryMod) serviceKeyLabelQuery\n")),(0,o.kt)("p",null,"ServiceKeyLabels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-servicekeylabelquery-all"},"func ","(","serviceKeyLabelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceKeyLabelSlice, error)\n")),(0,o.kt)("p",null,"All returns all ServiceKeyLabel records from the query","."),(0,o.kt)("h3",{id:"func-servicekeylabelquery-count"},"func ","(","serviceKeyLabelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServiceKeyLabel records in the query","."),(0,o.kt)("h3",{id:"func-servicekeylabelquery-delete"},"func ","(","serviceKeyLabelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyLabelQuery) Delete(o *ServiceKeyLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServiceKeyLabel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-servicekeylabelquery-deleteall"},"func ","(","serviceKeyLabelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-servicekeylabelquery-deleteallslice"},"func ","(","serviceKeyLabelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyLabelQuery) DeleteAllSlice(o ServiceKeyLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicekeylabelquery-exists"},"func ","(","serviceKeyLabelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-servicekeylabelquery-insert"},"func ","(","serviceKeyLabelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyLabelQuery) Insert(o *ServiceKeyLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-servicekeylabelquery-one"},"func ","(","serviceKeyLabelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceKeyLabel, error)\n")),(0,o.kt)("p",null,"One returns a single serviceKeyLabel record from the query","."),(0,o.kt)("h3",{id:"func-servicekeylabelquery-reload"},"func ","(","serviceKeyLabelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyLabelQuery) Reload(o *ServiceKeyLabel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-servicekeylabelquery-reloadall"},"func ","(","serviceKeyLabelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyLabelQuery) ReloadAll(o *ServiceKeyLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-servicekeylabelquery-removeresource"},"func ","(","serviceKeyLabelQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyLabelQuery) RemoveResource(o *ServiceKeyLabel, ctx context.Context, exec boil.ContextExecutor, related *ServiceKey) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-servicekeylabelquery-resource"},"func ","(","serviceKeyLabelQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyLabelQuery) Resource(o *ServiceKeyLabel, mods ...qm.QueryMod) serviceKeyQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-servicekeylabelquery-setresource"},"func ","(","serviceKeyLabelQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyLabelQuery) SetResource(o *ServiceKeyLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceKey) error\n")),(0,o.kt)("p",null,"SetResource of the serviceKeyLabel to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceServiceKeyLabels","."),(0,o.kt)("h3",{id:"func-servicekeylabelquery-update"},"func ","(","serviceKeyLabelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyLabelQuery) Update(o *ServiceKeyLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServiceKeyLabel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-servicekeylabelquery-updateall"},"func ","(","serviceKeyLabelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-servicekeylabelquery-updateallslice"},"func ","(","serviceKeyLabelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyLabelQuery) UpdateAllSlice(o ServiceKeyLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicekeylabelquery-upsert"},"func ","(","serviceKeyLabelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyLabelQuery) Upsert(o *ServiceKeyLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-servicekeylabelr"},"type serviceKeyLabelR"),(0,o.kt)("p",null,"serviceKeyLabelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type serviceKeyLabelR struct {\n    Resource *ServiceKey `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-servicekeylabelr-newstruct"},"func ","(","*","serviceKeyLabelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*serviceKeyLabelR) NewStruct() *serviceKeyLabelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-servicekeyoperationl"},"type serviceKeyOperationL"),(0,o.kt)("p",null,"serviceKeyOperationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceKeyOperationL struct{}\n")),(0,o.kt)("h3",{id:"func-servicekeyoperationl-loadservicekey"},"func ","(","serviceKeyOperationL",")"," LoadServiceKey"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceKeyOperationL) LoadServiceKey(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceKeyOperation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadServiceKey allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-servicekeyoperationquery"},"type serviceKeyOperationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceKeyOperationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-servicekeyoperations"},"func ServiceKeyOperations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceKeyOperations(mods ...qm.QueryMod) serviceKeyOperationQuery\n")),(0,o.kt)("p",null,"ServiceKeyOperations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-servicekeyoperationquery-all"},"func ","(","serviceKeyOperationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyOperationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceKeyOperationSlice, error)\n")),(0,o.kt)("p",null,"All returns all ServiceKeyOperation records from the query","."),(0,o.kt)("h3",{id:"func-servicekeyoperationquery-count"},"func ","(","serviceKeyOperationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyOperationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServiceKeyOperation records in the query","."),(0,o.kt)("h3",{id:"func-servicekeyoperationquery-delete"},"func ","(","serviceKeyOperationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyOperationQuery) Delete(o *ServiceKeyOperation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServiceKeyOperation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-servicekeyoperationquery-deleteall"},"func ","(","serviceKeyOperationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyOperationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-servicekeyoperationquery-deleteallslice"},"func ","(","serviceKeyOperationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyOperationQuery) DeleteAllSlice(o ServiceKeyOperationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicekeyoperationquery-exists"},"func ","(","serviceKeyOperationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyOperationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-servicekeyoperationquery-insert"},"func ","(","serviceKeyOperationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyOperationQuery) Insert(o *ServiceKeyOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-servicekeyoperationquery-one"},"func ","(","serviceKeyOperationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyOperationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceKeyOperation, error)\n")),(0,o.kt)("p",null,"One returns a single serviceKeyOperation record from the query","."),(0,o.kt)("h3",{id:"func-servicekeyoperationquery-reload"},"func ","(","serviceKeyOperationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyOperationQuery) Reload(o *ServiceKeyOperation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-servicekeyoperationquery-reloadall"},"func ","(","serviceKeyOperationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyOperationQuery) ReloadAll(o *ServiceKeyOperationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-servicekeyoperationquery-removeservicekey"},"func ","(","serviceKeyOperationQuery",")"," RemoveServiceKey"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyOperationQuery) RemoveServiceKey(o *ServiceKeyOperation, ctx context.Context, exec boil.ContextExecutor, related *ServiceKey) error\n")),(0,o.kt)("p",null,"RemoveServiceKey relationship","."," Sets o",".","R",".","ServiceKey to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-servicekeyoperationquery-servicekey"},"func ","(","serviceKeyOperationQuery",")"," ServiceKey"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyOperationQuery) ServiceKey(o *ServiceKeyOperation, mods ...qm.QueryMod) serviceKeyQuery\n")),(0,o.kt)("p",null,"ServiceKey pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-servicekeyoperationquery-setservicekey"},"func ","(","serviceKeyOperationQuery",")"," SetServiceKey"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyOperationQuery) SetServiceKey(o *ServiceKeyOperation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceKey) error\n")),(0,o.kt)("p",null,"SetServiceKey of the serviceKeyOperation to the related item","."," Sets o",".","R",".","ServiceKey to related","."," Adds o to related",".","R",".","ServiceKeyOperation","."),(0,o.kt)("h3",{id:"func-servicekeyoperationquery-update"},"func ","(","serviceKeyOperationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyOperationQuery) Update(o *ServiceKeyOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServiceKeyOperation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-servicekeyoperationquery-updateall"},"func ","(","serviceKeyOperationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyOperationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-servicekeyoperationquery-updateallslice"},"func ","(","serviceKeyOperationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyOperationQuery) UpdateAllSlice(o ServiceKeyOperationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicekeyoperationquery-upsert"},"func ","(","serviceKeyOperationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyOperationQuery) Upsert(o *ServiceKeyOperation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-servicekeyoperationr"},"type serviceKeyOperationR"),(0,o.kt)("p",null,"serviceKeyOperationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type serviceKeyOperationR struct {\n    ServiceKey *ServiceKey `boil:"ServiceKey" json:"ServiceKey" toml:"ServiceKey" yaml:"ServiceKey"`\n}\n')),(0,o.kt)("h3",{id:"func-servicekeyoperationr-newstruct"},"func ","(","*","serviceKeyOperationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*serviceKeyOperationR) NewStruct() *serviceKeyOperationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-servicekeyquery"},"type serviceKeyQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceKeyQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-servicekeys"},"func ServiceKeys"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceKeys(mods ...qm.QueryMod) serviceKeyQuery\n")),(0,o.kt)("p",null,"ServiceKeys retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-servicekeyquery-addresourceservicekeyannotations"},"func ","(","serviceKeyQuery",")"," AddResourceServiceKeyAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) AddResourceServiceKeyAnnotations(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceKeyAnnotation) error\n")),(0,o.kt)("p",null,"AddResourceServiceKeyAnnotations adds the given related objects to the existing relationships of the service","_","key\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceServiceKeyAnnotations","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-servicekeyquery-addresourceservicekeylabels"},"func ","(","serviceKeyQuery",")"," AddResourceServiceKeyLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) AddResourceServiceKeyLabels(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceKeyLabel) error\n")),(0,o.kt)("p",null,"AddResourceServiceKeyLabels adds the given related objects to the existing relationships of the service","_","key\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceServiceKeyLabels","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-servicekeyquery-all"},"func ","(","serviceKeyQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceKeySlice, error)\n")),(0,o.kt)("p",null,"All returns all ServiceKey records from the query","."),(0,o.kt)("h3",{id:"func-servicekeyquery-count"},"func ","(","serviceKeyQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServiceKey records in the query","."),(0,o.kt)("h3",{id:"func-servicekeyquery-delete"},"func ","(","serviceKeyQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) Delete(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServiceKey record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-servicekeyquery-deleteall"},"func ","(","serviceKeyQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-servicekeyquery-deleteallslice"},"func ","(","serviceKeyQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) DeleteAllSlice(o ServiceKeySlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicekeyquery-exists"},"func ","(","serviceKeyQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-servicekeyquery-insert"},"func ","(","serviceKeyQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) Insert(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-servicekeyquery-one"},"func ","(","serviceKeyQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceKey, error)\n")),(0,o.kt)("p",null,"One returns a single serviceKey record from the query","."),(0,o.kt)("h3",{id:"func-servicekeyquery-reload"},"func ","(","serviceKeyQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) Reload(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-servicekeyquery-reloadall"},"func ","(","serviceKeyQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) ReloadAll(o *ServiceKeySlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-servicekeyquery-removeresourceservicekeyannotations"},"func ","(","serviceKeyQuery",")"," RemoveResourceServiceKeyAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) RemoveResourceServiceKeyAnnotations(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, related ...*ServiceKeyAnnotation) error\n")),(0,o.kt)("p",null,"RemoveResourceServiceKeyAnnotations relationships from objects passed in","."," Removes related items from R",".","ResourceServiceKeyAnnotations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-servicekeyquery-removeresourceservicekeylabels"},"func ","(","serviceKeyQuery",")"," RemoveResourceServiceKeyLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) RemoveResourceServiceKeyLabels(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, related ...*ServiceKeyLabel) error\n")),(0,o.kt)("p",null,"RemoveResourceServiceKeyLabels relationships from objects passed in","."," Removes related items from R",".","ResourceServiceKeyLabels ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-servicekeyquery-removeservicekeyoperation"},"func ","(","serviceKeyQuery",")"," RemoveServiceKeyOperation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) RemoveServiceKeyOperation(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, related *ServiceKeyOperation) error\n")),(0,o.kt)("p",null,"RemoveServiceKeyOperation relationship","."," Sets o",".","R",".","ServiceKeyOperation to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-servicekeyquery-resourceservicekeyannotations"},"func ","(","serviceKeyQuery",")"," ResourceServiceKeyAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) ResourceServiceKeyAnnotations(o *ServiceKey, mods ...qm.QueryMod) serviceKeyAnnotationQuery\n")),(0,o.kt)("p",null,"ResourceServiceKeyAnnotations retrieves all the service","_","key","_","annotation's ServiceKeyAnnotations with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-servicekeyquery-resourceservicekeylabels"},"func ","(","serviceKeyQuery",")"," ResourceServiceKeyLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) ResourceServiceKeyLabels(o *ServiceKey, mods ...qm.QueryMod) serviceKeyLabelQuery\n")),(0,o.kt)("p",null,"ResourceServiceKeyLabels retrieves all the service","_","key","_","label's ServiceKeyLabels with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-servicekeyquery-serviceinstance"},"func ","(","serviceKeyQuery",")"," ServiceInstance"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) ServiceInstance(o *ServiceKey, mods ...qm.QueryMod) serviceInstanceQuery\n")),(0,o.kt)("p",null,"ServiceInstance pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-servicekeyquery-servicekeyoperation"},"func ","(","serviceKeyQuery",")"," ServiceKeyOperation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) ServiceKeyOperation(o *ServiceKey, mods ...qm.QueryMod) serviceKeyOperationQuery\n")),(0,o.kt)("p",null,"ServiceKeyOperation pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-servicekeyquery-setresourceservicekeyannotations"},"func ","(","serviceKeyQuery",")"," SetResourceServiceKeyAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) SetResourceServiceKeyAnnotations(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceKeyAnnotation) error\n")),(0,o.kt)("p",null,"SetResourceServiceKeyAnnotations removes all previously related items of the service","_","key replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceServiceKeyAnnotations accordingly","."," Replaces o",".","R",".","ResourceServiceKeyAnnotations with related","."," Sets related",".","R",".","Resource's ResourceServiceKeyAnnotations accordingly","."),(0,o.kt)("h3",{id:"func-servicekeyquery-setresourceservicekeylabels"},"func ","(","serviceKeyQuery",")"," SetResourceServiceKeyLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) SetResourceServiceKeyLabels(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceKeyLabel) error\n")),(0,o.kt)("p",null,"SetResourceServiceKeyLabels removes all previously related items of the service","_","key replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceServiceKeyLabels accordingly","."," Replaces o",".","R",".","ResourceServiceKeyLabels with related","."," Sets related",".","R",".","Resource's ResourceServiceKeyLabels accordingly","."),(0,o.kt)("h3",{id:"func-servicekeyquery-setserviceinstance"},"func ","(","serviceKeyQuery",")"," SetServiceInstance"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) SetServiceInstance(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceInstance) error\n")),(0,o.kt)("p",null,"SetServiceInstance of the serviceKey to the related item","."," Sets o",".","R",".","ServiceInstance to related","."," Adds o to related",".","R",".","ServiceKeys","."),(0,o.kt)("h3",{id:"func-servicekeyquery-setservicekeyoperation"},"func ","(","serviceKeyQuery",")"," SetServiceKeyOperation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) SetServiceKeyOperation(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceKeyOperation) error\n")),(0,o.kt)("p",null,"SetServiceKeyOperation of the serviceKey to the related item","."," Sets o",".","R",".","ServiceKeyOperation to related","."," Adds o to related",".","R",".","ServiceKey","."),(0,o.kt)("h3",{id:"func-servicekeyquery-update"},"func ","(","serviceKeyQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) Update(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServiceKey","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-servicekeyquery-updateall"},"func ","(","serviceKeyQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-servicekeyquery-updateallslice"},"func ","(","serviceKeyQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) UpdateAllSlice(o ServiceKeySlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicekeyquery-upsert"},"func ","(","serviceKeyQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceKeyQuery) Upsert(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-servicekeyr"},"type serviceKeyR"),(0,o.kt)("p",null,"serviceKeyR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type serviceKeyR struct {\n    ServiceInstance               *ServiceInstance          `boil:"ServiceInstance" json:"ServiceInstance" toml:"ServiceInstance" yaml:"ServiceInstance"`\n    ServiceKeyOperation           *ServiceKeyOperation      `boil:"ServiceKeyOperation" json:"ServiceKeyOperation" toml:"ServiceKeyOperation" yaml:"ServiceKeyOperation"`\n    ResourceServiceKeyAnnotations ServiceKeyAnnotationSlice `boil:"ResourceServiceKeyAnnotations" json:"ResourceServiceKeyAnnotations" toml:"ResourceServiceKeyAnnotations" yaml:"ResourceServiceKeyAnnotations"`\n    ResourceServiceKeyLabels      ServiceKeyLabelSlice      `boil:"ResourceServiceKeyLabels" json:"ResourceServiceKeyLabels" toml:"ResourceServiceKeyLabels" yaml:"ResourceServiceKeyLabels"`\n}\n')),(0,o.kt)("h3",{id:"func-servicekeyr-newstruct"},"func ","(","*","serviceKeyR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*serviceKeyR) NewStruct() *serviceKeyR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-servicel"},"type serviceL"),(0,o.kt)("p",null,"serviceL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceL struct{}\n")),(0,o.kt)("h3",{id:"func-servicel-loadresourceserviceofferingannotations"},"func ","(","serviceL",")"," LoadResourceServiceOfferingAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceL) LoadResourceServiceOfferingAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeService interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceServiceOfferingAnnotations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-servicel-loadresourceserviceofferinglabels"},"func ","(","serviceL",")"," LoadResourceServiceOfferingLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceL) LoadResourceServiceOfferingLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeService interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceServiceOfferingLabels allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-servicel-loadservicebroker"},"func ","(","serviceL",")"," LoadServiceBroker"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceL) LoadServiceBroker(ctx context.Context, e boil.ContextExecutor, singular bool, maybeService interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadServiceBroker allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-servicel-loadserviceplans"},"func ","(","serviceL",")"," LoadServicePlans"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceL) LoadServicePlans(ctx context.Context, e boil.ContextExecutor, singular bool, maybeService interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadServicePlans allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-serviceofferingannotationl"},"type serviceOfferingAnnotationL"),(0,o.kt)("p",null,"serviceOfferingAnnotationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceOfferingAnnotationL struct{}\n")),(0,o.kt)("h3",{id:"func-serviceofferingannotationl-loadresource"},"func ","(","serviceOfferingAnnotationL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceOfferingAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceOfferingAnnotation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-serviceofferingannotationquery"},"type serviceOfferingAnnotationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceOfferingAnnotationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-serviceofferingannotations"},"func ServiceOfferingAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceOfferingAnnotations(mods ...qm.QueryMod) serviceOfferingAnnotationQuery\n")),(0,o.kt)("p",null,"ServiceOfferingAnnotations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-serviceofferingannotationquery-all"},"func ","(","serviceOfferingAnnotationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceOfferingAnnotationSlice, error)\n")),(0,o.kt)("p",null,"All returns all ServiceOfferingAnnotation records from the query","."),(0,o.kt)("h3",{id:"func-serviceofferingannotationquery-count"},"func ","(","serviceOfferingAnnotationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServiceOfferingAnnotation records in the query","."),(0,o.kt)("h3",{id:"func-serviceofferingannotationquery-delete"},"func ","(","serviceOfferingAnnotationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingAnnotationQuery) Delete(o *ServiceOfferingAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServiceOfferingAnnotation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-serviceofferingannotationquery-deleteall"},"func ","(","serviceOfferingAnnotationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-serviceofferingannotationquery-deleteallslice"},"func ","(","serviceOfferingAnnotationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingAnnotationQuery) DeleteAllSlice(o ServiceOfferingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-serviceofferingannotationquery-exists"},"func ","(","serviceOfferingAnnotationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-serviceofferingannotationquery-insert"},"func ","(","serviceOfferingAnnotationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingAnnotationQuery) Insert(o *ServiceOfferingAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-serviceofferingannotationquery-one"},"func ","(","serviceOfferingAnnotationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceOfferingAnnotation, error)\n")),(0,o.kt)("p",null,"One returns a single serviceOfferingAnnotation record from the query","."),(0,o.kt)("h3",{id:"func-serviceofferingannotationquery-reload"},"func ","(","serviceOfferingAnnotationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingAnnotationQuery) Reload(o *ServiceOfferingAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-serviceofferingannotationquery-reloadall"},"func ","(","serviceOfferingAnnotationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingAnnotationQuery) ReloadAll(o *ServiceOfferingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-serviceofferingannotationquery-removeresource"},"func ","(","serviceOfferingAnnotationQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingAnnotationQuery) RemoveResource(o *ServiceOfferingAnnotation, ctx context.Context, exec boil.ContextExecutor, related *Service) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-serviceofferingannotationquery-resource"},"func ","(","serviceOfferingAnnotationQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingAnnotationQuery) Resource(o *ServiceOfferingAnnotation, mods ...qm.QueryMod) serviceQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-serviceofferingannotationquery-setresource"},"func ","(","serviceOfferingAnnotationQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingAnnotationQuery) SetResource(o *ServiceOfferingAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Service) error\n")),(0,o.kt)("p",null,"SetResource of the serviceOfferingAnnotation to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceServiceOfferingAnnotations","."),(0,o.kt)("h3",{id:"func-serviceofferingannotationquery-update"},"func ","(","serviceOfferingAnnotationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingAnnotationQuery) Update(o *ServiceOfferingAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServiceOfferingAnnotation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-serviceofferingannotationquery-updateall"},"func ","(","serviceOfferingAnnotationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-serviceofferingannotationquery-updateallslice"},"func ","(","serviceOfferingAnnotationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingAnnotationQuery) UpdateAllSlice(o ServiceOfferingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-serviceofferingannotationquery-upsert"},"func ","(","serviceOfferingAnnotationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingAnnotationQuery) Upsert(o *ServiceOfferingAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-serviceofferingannotationr"},"type serviceOfferingAnnotationR"),(0,o.kt)("p",null,"serviceOfferingAnnotationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type serviceOfferingAnnotationR struct {\n    Resource *Service `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-serviceofferingannotationr-newstruct"},"func ","(","*","serviceOfferingAnnotationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*serviceOfferingAnnotationR) NewStruct() *serviceOfferingAnnotationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-serviceofferinglabell"},"type serviceOfferingLabelL"),(0,o.kt)("p",null,"serviceOfferingLabelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceOfferingLabelL struct{}\n")),(0,o.kt)("h3",{id:"func-serviceofferinglabell-loadresource"},"func ","(","serviceOfferingLabelL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (serviceOfferingLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceOfferingLabel interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-serviceofferinglabelquery"},"type serviceOfferingLabelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceOfferingLabelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-serviceofferinglabels"},"func ServiceOfferingLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceOfferingLabels(mods ...qm.QueryMod) serviceOfferingLabelQuery\n")),(0,o.kt)("p",null,"ServiceOfferingLabels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-serviceofferinglabelquery-all"},"func ","(","serviceOfferingLabelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceOfferingLabelSlice, error)\n")),(0,o.kt)("p",null,"All returns all ServiceOfferingLabel records from the query","."),(0,o.kt)("h3",{id:"func-serviceofferinglabelquery-count"},"func ","(","serviceOfferingLabelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServiceOfferingLabel records in the query","."),(0,o.kt)("h3",{id:"func-serviceofferinglabelquery-delete"},"func ","(","serviceOfferingLabelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingLabelQuery) Delete(o *ServiceOfferingLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServiceOfferingLabel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-serviceofferinglabelquery-deleteall"},"func ","(","serviceOfferingLabelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-serviceofferinglabelquery-deleteallslice"},"func ","(","serviceOfferingLabelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingLabelQuery) DeleteAllSlice(o ServiceOfferingLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-serviceofferinglabelquery-exists"},"func ","(","serviceOfferingLabelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-serviceofferinglabelquery-insert"},"func ","(","serviceOfferingLabelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingLabelQuery) Insert(o *ServiceOfferingLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-serviceofferinglabelquery-one"},"func ","(","serviceOfferingLabelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceOfferingLabel, error)\n")),(0,o.kt)("p",null,"One returns a single serviceOfferingLabel record from the query","."),(0,o.kt)("h3",{id:"func-serviceofferinglabelquery-reload"},"func ","(","serviceOfferingLabelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingLabelQuery) Reload(o *ServiceOfferingLabel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-serviceofferinglabelquery-reloadall"},"func ","(","serviceOfferingLabelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingLabelQuery) ReloadAll(o *ServiceOfferingLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-serviceofferinglabelquery-removeresource"},"func ","(","serviceOfferingLabelQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingLabelQuery) RemoveResource(o *ServiceOfferingLabel, ctx context.Context, exec boil.ContextExecutor, related *Service) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-serviceofferinglabelquery-resource"},"func ","(","serviceOfferingLabelQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingLabelQuery) Resource(o *ServiceOfferingLabel, mods ...qm.QueryMod) serviceQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-serviceofferinglabelquery-setresource"},"func ","(","serviceOfferingLabelQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingLabelQuery) SetResource(o *ServiceOfferingLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Service) error\n")),(0,o.kt)("p",null,"SetResource of the serviceOfferingLabel to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceServiceOfferingLabels","."),(0,o.kt)("h3",{id:"func-serviceofferinglabelquery-update"},"func ","(","serviceOfferingLabelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingLabelQuery) Update(o *ServiceOfferingLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServiceOfferingLabel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-serviceofferinglabelquery-updateall"},"func ","(","serviceOfferingLabelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-serviceofferinglabelquery-updateallslice"},"func ","(","serviceOfferingLabelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingLabelQuery) UpdateAllSlice(o ServiceOfferingLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-serviceofferinglabelquery-upsert"},"func ","(","serviceOfferingLabelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceOfferingLabelQuery) Upsert(o *ServiceOfferingLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-serviceofferinglabelr"},"type serviceOfferingLabelR"),(0,o.kt)("p",null,"serviceOfferingLabelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type serviceOfferingLabelR struct {\n    Resource *Service `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-serviceofferinglabelr-newstruct"},"func ","(","*","serviceOfferingLabelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*serviceOfferingLabelR) NewStruct() *serviceOfferingLabelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-serviceplanannotationl"},"type servicePlanAnnotationL"),(0,o.kt)("p",null,"servicePlanAnnotationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type servicePlanAnnotationL struct{}\n")),(0,o.kt)("h3",{id:"func-serviceplanannotationl-loadresource"},"func ","(","servicePlanAnnotationL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (servicePlanAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServicePlanAnnotation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-serviceplanannotationquery"},"type servicePlanAnnotationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type servicePlanAnnotationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-serviceplanannotations"},"func ServicePlanAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServicePlanAnnotations(mods ...qm.QueryMod) servicePlanAnnotationQuery\n")),(0,o.kt)("p",null,"ServicePlanAnnotations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-serviceplanannotationquery-all"},"func ","(","servicePlanAnnotationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServicePlanAnnotationSlice, error)\n")),(0,o.kt)("p",null,"All returns all ServicePlanAnnotation records from the query","."),(0,o.kt)("h3",{id:"func-serviceplanannotationquery-count"},"func ","(","servicePlanAnnotationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServicePlanAnnotation records in the query","."),(0,o.kt)("h3",{id:"func-serviceplanannotationquery-delete"},"func ","(","servicePlanAnnotationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanAnnotationQuery) Delete(o *ServicePlanAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServicePlanAnnotation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-serviceplanannotationquery-deleteall"},"func ","(","servicePlanAnnotationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-serviceplanannotationquery-deleteallslice"},"func ","(","servicePlanAnnotationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanAnnotationQuery) DeleteAllSlice(o ServicePlanAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-serviceplanannotationquery-exists"},"func ","(","servicePlanAnnotationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-serviceplanannotationquery-insert"},"func ","(","servicePlanAnnotationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanAnnotationQuery) Insert(o *ServicePlanAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-serviceplanannotationquery-one"},"func ","(","servicePlanAnnotationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServicePlanAnnotation, error)\n")),(0,o.kt)("p",null,"One returns a single servicePlanAnnotation record from the query","."),(0,o.kt)("h3",{id:"func-serviceplanannotationquery-reload"},"func ","(","servicePlanAnnotationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanAnnotationQuery) Reload(o *ServicePlanAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-serviceplanannotationquery-reloadall"},"func ","(","servicePlanAnnotationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanAnnotationQuery) ReloadAll(o *ServicePlanAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-serviceplanannotationquery-removeresource"},"func ","(","servicePlanAnnotationQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanAnnotationQuery) RemoveResource(o *ServicePlanAnnotation, ctx context.Context, exec boil.ContextExecutor, related *ServicePlan) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-serviceplanannotationquery-resource"},"func ","(","servicePlanAnnotationQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanAnnotationQuery) Resource(o *ServicePlanAnnotation, mods ...qm.QueryMod) servicePlanQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-serviceplanannotationquery-setresource"},"func ","(","servicePlanAnnotationQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanAnnotationQuery) SetResource(o *ServicePlanAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServicePlan) error\n")),(0,o.kt)("p",null,"SetResource of the servicePlanAnnotation to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceServicePlanAnnotations","."),(0,o.kt)("h3",{id:"func-serviceplanannotationquery-update"},"func ","(","servicePlanAnnotationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanAnnotationQuery) Update(o *ServicePlanAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServicePlanAnnotation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-serviceplanannotationquery-updateall"},"func ","(","servicePlanAnnotationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-serviceplanannotationquery-updateallslice"},"func ","(","servicePlanAnnotationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanAnnotationQuery) UpdateAllSlice(o ServicePlanAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-serviceplanannotationquery-upsert"},"func ","(","servicePlanAnnotationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanAnnotationQuery) Upsert(o *ServicePlanAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-serviceplanannotationr"},"type servicePlanAnnotationR"),(0,o.kt)("p",null,"servicePlanAnnotationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type servicePlanAnnotationR struct {\n    Resource *ServicePlan `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-serviceplanannotationr-newstruct"},"func ","(","*","servicePlanAnnotationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*servicePlanAnnotationR) NewStruct() *servicePlanAnnotationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-serviceplanl"},"type servicePlanL"),(0,o.kt)("p",null,"servicePlanL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type servicePlanL struct{}\n")),(0,o.kt)("h3",{id:"func-serviceplanl-loadresourceserviceplanannotations"},"func ","(","servicePlanL",")"," LoadResourceServicePlanAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (servicePlanL) LoadResourceServicePlanAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServicePlan interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceServicePlanAnnotations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-serviceplanl-loadresourceserviceplanlabels"},"func ","(","servicePlanL",")"," LoadResourceServicePlanLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (servicePlanL) LoadResourceServicePlanLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServicePlan interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceServicePlanLabels allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-serviceplanl-loadservice"},"func ","(","servicePlanL",")"," LoadService"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (servicePlanL) LoadService(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServicePlan interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadService allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-serviceplanl-loadserviceinstances"},"func ","(","servicePlanL",")"," LoadServiceInstances"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (servicePlanL) LoadServiceInstances(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServicePlan interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadServiceInstances allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-serviceplanl-loadserviceplanvisibilities"},"func ","(","servicePlanL",")"," LoadServicePlanVisibilities"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (servicePlanL) LoadServicePlanVisibilities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServicePlan interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadServicePlanVisibilities allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-serviceplanlabell"},"type servicePlanLabelL"),(0,o.kt)("p",null,"servicePlanLabelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type servicePlanLabelL struct{}\n")),(0,o.kt)("h3",{id:"func-serviceplanlabell-loadresource"},"func ","(","servicePlanLabelL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (servicePlanLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServicePlanLabel interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-serviceplanlabelquery"},"type servicePlanLabelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type servicePlanLabelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-serviceplanlabels"},"func ServicePlanLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServicePlanLabels(mods ...qm.QueryMod) servicePlanLabelQuery\n")),(0,o.kt)("p",null,"ServicePlanLabels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-serviceplanlabelquery-all"},"func ","(","servicePlanLabelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServicePlanLabelSlice, error)\n")),(0,o.kt)("p",null,"All returns all ServicePlanLabel records from the query","."),(0,o.kt)("h3",{id:"func-serviceplanlabelquery-count"},"func ","(","servicePlanLabelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServicePlanLabel records in the query","."),(0,o.kt)("h3",{id:"func-serviceplanlabelquery-delete"},"func ","(","servicePlanLabelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanLabelQuery) Delete(o *ServicePlanLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServicePlanLabel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-serviceplanlabelquery-deleteall"},"func ","(","servicePlanLabelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-serviceplanlabelquery-deleteallslice"},"func ","(","servicePlanLabelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanLabelQuery) DeleteAllSlice(o ServicePlanLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-serviceplanlabelquery-exists"},"func ","(","servicePlanLabelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-serviceplanlabelquery-insert"},"func ","(","servicePlanLabelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanLabelQuery) Insert(o *ServicePlanLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-serviceplanlabelquery-one"},"func ","(","servicePlanLabelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServicePlanLabel, error)\n")),(0,o.kt)("p",null,"One returns a single servicePlanLabel record from the query","."),(0,o.kt)("h3",{id:"func-serviceplanlabelquery-reload"},"func ","(","servicePlanLabelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanLabelQuery) Reload(o *ServicePlanLabel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-serviceplanlabelquery-reloadall"},"func ","(","servicePlanLabelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanLabelQuery) ReloadAll(o *ServicePlanLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-serviceplanlabelquery-removeresource"},"func ","(","servicePlanLabelQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanLabelQuery) RemoveResource(o *ServicePlanLabel, ctx context.Context, exec boil.ContextExecutor, related *ServicePlan) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-serviceplanlabelquery-resource"},"func ","(","servicePlanLabelQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanLabelQuery) Resource(o *ServicePlanLabel, mods ...qm.QueryMod) servicePlanQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-serviceplanlabelquery-setresource"},"func ","(","servicePlanLabelQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanLabelQuery) SetResource(o *ServicePlanLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServicePlan) error\n")),(0,o.kt)("p",null,"SetResource of the servicePlanLabel to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceServicePlanLabels","."),(0,o.kt)("h3",{id:"func-serviceplanlabelquery-update"},"func ","(","servicePlanLabelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanLabelQuery) Update(o *ServicePlanLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServicePlanLabel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-serviceplanlabelquery-updateall"},"func ","(","servicePlanLabelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-serviceplanlabelquery-updateallslice"},"func ","(","servicePlanLabelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanLabelQuery) UpdateAllSlice(o ServicePlanLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-serviceplanlabelquery-upsert"},"func ","(","servicePlanLabelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanLabelQuery) Upsert(o *ServicePlanLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-serviceplanlabelr"},"type servicePlanLabelR"),(0,o.kt)("p",null,"servicePlanLabelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type servicePlanLabelR struct {\n    Resource *ServicePlan `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-serviceplanlabelr-newstruct"},"func ","(","*","servicePlanLabelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*servicePlanLabelR) NewStruct() *servicePlanLabelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-serviceplanquery"},"type servicePlanQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type servicePlanQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-serviceplans"},"func ServicePlans"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServicePlans(mods ...qm.QueryMod) servicePlanQuery\n")),(0,o.kt)("p",null,"ServicePlans retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-serviceplanquery-addresourceserviceplanannotations"},"func ","(","servicePlanQuery",")"," AddResourceServicePlanAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) AddResourceServicePlanAnnotations(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServicePlanAnnotation) error\n")),(0,o.kt)("p",null,"AddResourceServicePlanAnnotations adds the given related objects to the existing relationships of the service","_","plan\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceServicePlanAnnotations","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-serviceplanquery-addresourceserviceplanlabels"},"func ","(","servicePlanQuery",")"," AddResourceServicePlanLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) AddResourceServicePlanLabels(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServicePlanLabel) error\n")),(0,o.kt)("p",null,"AddResourceServicePlanLabels adds the given related objects to the existing relationships of the service","_","plan\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceServicePlanLabels","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-serviceplanquery-addserviceinstances"},"func ","(","servicePlanQuery",")"," AddServiceInstances"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) AddServiceInstances(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceInstance) error\n")),(0,o.kt)("p",null,"AddServiceInstances adds the given related objects to the existing relationships of the service","_","plan\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ServiceInstances","."," Sets related",".","R",".","ServicePlan appropriately","."),(0,o.kt)("h3",{id:"func-serviceplanquery-addserviceplanvisibilities"},"func ","(","servicePlanQuery",")"," AddServicePlanVisibilities"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) AddServicePlanVisibilities(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServicePlanVisibility) error\n")),(0,o.kt)("p",null,"AddServicePlanVisibilities adds the given related objects to the existing relationships of the service","_","plan\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ServicePlanVisibilities","."," Sets related",".","R",".","ServicePlan appropriately","."),(0,o.kt)("h3",{id:"func-serviceplanquery-all"},"func ","(","servicePlanQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServicePlanSlice, error)\n")),(0,o.kt)("p",null,"All returns all ServicePlan records from the query","."),(0,o.kt)("h3",{id:"func-serviceplanquery-count"},"func ","(","servicePlanQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServicePlan records in the query","."),(0,o.kt)("h3",{id:"func-serviceplanquery-delete"},"func ","(","servicePlanQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) Delete(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServicePlan record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-serviceplanquery-deleteall"},"func ","(","servicePlanQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-serviceplanquery-deleteallslice"},"func ","(","servicePlanQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) DeleteAllSlice(o ServicePlanSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-serviceplanquery-exists"},"func ","(","servicePlanQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-serviceplanquery-insert"},"func ","(","servicePlanQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) Insert(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-serviceplanquery-one"},"func ","(","servicePlanQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServicePlan, error)\n")),(0,o.kt)("p",null,"One returns a single servicePlan record from the query","."),(0,o.kt)("h3",{id:"func-serviceplanquery-reload"},"func ","(","servicePlanQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) Reload(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-serviceplanquery-reloadall"},"func ","(","servicePlanQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) ReloadAll(o *ServicePlanSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-serviceplanquery-removeresourceserviceplanannotations"},"func ","(","servicePlanQuery",")"," RemoveResourceServicePlanAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) RemoveResourceServicePlanAnnotations(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor, related ...*ServicePlanAnnotation) error\n")),(0,o.kt)("p",null,"RemoveResourceServicePlanAnnotations relationships from objects passed in","."," Removes related items from R",".","ResourceServicePlanAnnotations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-serviceplanquery-removeresourceserviceplanlabels"},"func ","(","servicePlanQuery",")"," RemoveResourceServicePlanLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) RemoveResourceServicePlanLabels(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor, related ...*ServicePlanLabel) error\n")),(0,o.kt)("p",null,"RemoveResourceServicePlanLabels relationships from objects passed in","."," Removes related items from R",".","ResourceServicePlanLabels ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-serviceplanquery-removeserviceinstances"},"func ","(","servicePlanQuery",")"," RemoveServiceInstances"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) RemoveServiceInstances(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor, related ...*ServiceInstance) error\n")),(0,o.kt)("p",null,"RemoveServiceInstances relationships from objects passed in","."," Removes related items from R",".","ServiceInstances ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","ServicePlan","."),(0,o.kt)("h3",{id:"func-serviceplanquery-resourceserviceplanannotations"},"func ","(","servicePlanQuery",")"," ResourceServicePlanAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) ResourceServicePlanAnnotations(o *ServicePlan, mods ...qm.QueryMod) servicePlanAnnotationQuery\n")),(0,o.kt)("p",null,"ResourceServicePlanAnnotations retrieves all the service","_","plan","_","annotation's ServicePlanAnnotations with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-serviceplanquery-resourceserviceplanlabels"},"func ","(","servicePlanQuery",")"," ResourceServicePlanLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) ResourceServicePlanLabels(o *ServicePlan, mods ...qm.QueryMod) servicePlanLabelQuery\n")),(0,o.kt)("p",null,"ResourceServicePlanLabels retrieves all the service","_","plan","_","label's ServicePlanLabels with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-serviceplanquery-service"},"func ","(","servicePlanQuery",")"," Service"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) Service(o *ServicePlan, mods ...qm.QueryMod) serviceQuery\n")),(0,o.kt)("p",null,"Service pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-serviceplanquery-serviceinstances"},"func ","(","servicePlanQuery",")"," ServiceInstances"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) ServiceInstances(o *ServicePlan, mods ...qm.QueryMod) serviceInstanceQuery\n")),(0,o.kt)("p",null,"ServiceInstances retrieves all the service","_","instance's ServiceInstances with an executor","."),(0,o.kt)("h3",{id:"func-serviceplanquery-serviceplanvisibilities"},"func ","(","servicePlanQuery",")"," ServicePlanVisibilities"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) ServicePlanVisibilities(o *ServicePlan, mods ...qm.QueryMod) servicePlanVisibilityQuery\n")),(0,o.kt)("p",null,"ServicePlanVisibilities retrieves all the service","_","plan","_","visibility's ServicePlanVisibilities with an executor","."),(0,o.kt)("h3",{id:"func-serviceplanquery-setresourceserviceplanannotations"},"func ","(","servicePlanQuery",")"," SetResourceServicePlanAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) SetResourceServicePlanAnnotations(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServicePlanAnnotation) error\n")),(0,o.kt)("p",null,"SetResourceServicePlanAnnotations removes all previously related items of the service","_","plan replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceServicePlanAnnotations accordingly","."," Replaces o",".","R",".","ResourceServicePlanAnnotations with related","."," Sets related",".","R",".","Resource's ResourceServicePlanAnnotations accordingly","."),(0,o.kt)("h3",{id:"func-serviceplanquery-setresourceserviceplanlabels"},"func ","(","servicePlanQuery",")"," SetResourceServicePlanLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) SetResourceServicePlanLabels(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServicePlanLabel) error\n")),(0,o.kt)("p",null,"SetResourceServicePlanLabels removes all previously related items of the service","_","plan replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceServicePlanLabels accordingly","."," Replaces o",".","R",".","ResourceServicePlanLabels with related","."," Sets related",".","R",".","Resource's ResourceServicePlanLabels accordingly","."),(0,o.kt)("h3",{id:"func-serviceplanquery-setservice"},"func ","(","servicePlanQuery",")"," SetService"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) SetService(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Service) error\n")),(0,o.kt)("p",null,"SetService of the servicePlan to the related item","."," Sets o",".","R",".","Service to related","."," Adds o to related",".","R",".","ServicePlans","."),(0,o.kt)("h3",{id:"func-serviceplanquery-setserviceinstances"},"func ","(","servicePlanQuery",")"," SetServiceInstances"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) SetServiceInstances(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceInstance) error\n")),(0,o.kt)("p",null,"SetServiceInstances removes all previously related items of the service","_","plan replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","ServicePlan's ServiceInstances accordingly","."," Replaces o",".","R",".","ServiceInstances with related","."," Sets related",".","R",".","ServicePlan's ServiceInstances accordingly","."),(0,o.kt)("h3",{id:"func-serviceplanquery-update"},"func ","(","servicePlanQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) Update(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServicePlan","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-serviceplanquery-updateall"},"func ","(","servicePlanQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-serviceplanquery-updateallslice"},"func ","(","servicePlanQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) UpdateAllSlice(o ServicePlanSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-serviceplanquery-upsert"},"func ","(","servicePlanQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanQuery) Upsert(o *ServicePlan, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-serviceplanr"},"type servicePlanR"),(0,o.kt)("p",null,"servicePlanR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type servicePlanR struct {\n    Service                        *Service                   `boil:"Service" json:"Service" toml:"Service" yaml:"Service"`\n    ServiceInstances               ServiceInstanceSlice       `boil:"ServiceInstances" json:"ServiceInstances" toml:"ServiceInstances" yaml:"ServiceInstances"`\n    ResourceServicePlanAnnotations ServicePlanAnnotationSlice `boil:"ResourceServicePlanAnnotations" json:"ResourceServicePlanAnnotations" toml:"ResourceServicePlanAnnotations" yaml:"ResourceServicePlanAnnotations"`\n    ResourceServicePlanLabels      ServicePlanLabelSlice      `boil:"ResourceServicePlanLabels" json:"ResourceServicePlanLabels" toml:"ResourceServicePlanLabels" yaml:"ResourceServicePlanLabels"`\n    ServicePlanVisibilities        ServicePlanVisibilitySlice `boil:"ServicePlanVisibilities" json:"ServicePlanVisibilities" toml:"ServicePlanVisibilities" yaml:"ServicePlanVisibilities"`\n}\n')),(0,o.kt)("h3",{id:"func-serviceplanr-newstruct"},"func ","(","*","servicePlanR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*servicePlanR) NewStruct() *servicePlanR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-serviceplanvisibilityl"},"type servicePlanVisibilityL"),(0,o.kt)("p",null,"servicePlanVisibilityL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type servicePlanVisibilityL struct{}\n")),(0,o.kt)("h3",{id:"func-serviceplanvisibilityl-loadorganization"},"func ","(","servicePlanVisibilityL",")"," LoadOrganization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (servicePlanVisibilityL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServicePlanVisibility interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadOrganization allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-serviceplanvisibilityl-loadserviceplan"},"func ","(","servicePlanVisibilityL",")"," LoadServicePlan"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (servicePlanVisibilityL) LoadServicePlan(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServicePlanVisibility interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadServicePlan allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-serviceplanvisibilityquery"},"type servicePlanVisibilityQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type servicePlanVisibilityQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-serviceplanvisibilities"},"func ServicePlanVisibilities"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServicePlanVisibilities(mods ...qm.QueryMod) servicePlanVisibilityQuery\n")),(0,o.kt)("p",null,"ServicePlanVisibilities retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-serviceplanvisibilityquery-all"},"func ","(","servicePlanVisibilityQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanVisibilityQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServicePlanVisibilitySlice, error)\n")),(0,o.kt)("p",null,"All returns all ServicePlanVisibility records from the query","."),(0,o.kt)("h3",{id:"func-serviceplanvisibilityquery-count"},"func ","(","servicePlanVisibilityQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanVisibilityQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServicePlanVisibility records in the query","."),(0,o.kt)("h3",{id:"func-serviceplanvisibilityquery-delete"},"func ","(","servicePlanVisibilityQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanVisibilityQuery) Delete(o *ServicePlanVisibility, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServicePlanVisibility record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-serviceplanvisibilityquery-deleteall"},"func ","(","servicePlanVisibilityQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanVisibilityQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-serviceplanvisibilityquery-deleteallslice"},"func ","(","servicePlanVisibilityQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanVisibilityQuery) DeleteAllSlice(o ServicePlanVisibilitySlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-serviceplanvisibilityquery-exists"},"func ","(","servicePlanVisibilityQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanVisibilityQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-serviceplanvisibilityquery-insert"},"func ","(","servicePlanVisibilityQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanVisibilityQuery) Insert(o *ServicePlanVisibility, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-serviceplanvisibilityquery-one"},"func ","(","servicePlanVisibilityQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanVisibilityQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServicePlanVisibility, error)\n")),(0,o.kt)("p",null,"One returns a single servicePlanVisibility record from the query","."),(0,o.kt)("h3",{id:"func-serviceplanvisibilityquery-organization"},"func ","(","servicePlanVisibilityQuery",")"," Organization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanVisibilityQuery) Organization(o *ServicePlanVisibility, mods ...qm.QueryMod) organizationQuery\n")),(0,o.kt)("p",null,"Organization pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-serviceplanvisibilityquery-reload"},"func ","(","servicePlanVisibilityQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanVisibilityQuery) Reload(o *ServicePlanVisibility, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-serviceplanvisibilityquery-reloadall"},"func ","(","servicePlanVisibilityQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanVisibilityQuery) ReloadAll(o *ServicePlanVisibilitySlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-serviceplanvisibilityquery-serviceplan"},"func ","(","servicePlanVisibilityQuery",")"," ServicePlan"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanVisibilityQuery) ServicePlan(o *ServicePlanVisibility, mods ...qm.QueryMod) servicePlanQuery\n")),(0,o.kt)("p",null,"ServicePlan pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-serviceplanvisibilityquery-setorganization"},"func ","(","servicePlanVisibilityQuery",")"," SetOrganization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanVisibilityQuery) SetOrganization(o *ServicePlanVisibility, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error\n")),(0,o.kt)("p",null,"SetOrganization of the servicePlanVisibility to the related item","."," Sets o",".","R",".","Organization to related","."," Adds o to related",".","R",".","ServicePlanVisibilities","."),(0,o.kt)("h3",{id:"func-serviceplanvisibilityquery-setserviceplan"},"func ","(","servicePlanVisibilityQuery",")"," SetServicePlan"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanVisibilityQuery) SetServicePlan(o *ServicePlanVisibility, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServicePlan) error\n")),(0,o.kt)("p",null,"SetServicePlan of the servicePlanVisibility to the related item","."," Sets o",".","R",".","ServicePlan to related","."," Adds o to related",".","R",".","ServicePlanVisibilities","."),(0,o.kt)("h3",{id:"func-serviceplanvisibilityquery-update"},"func ","(","servicePlanVisibilityQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanVisibilityQuery) Update(o *ServicePlanVisibility, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServicePlanVisibility","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-serviceplanvisibilityquery-updateall"},"func ","(","servicePlanVisibilityQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanVisibilityQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-serviceplanvisibilityquery-updateallslice"},"func ","(","servicePlanVisibilityQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanVisibilityQuery) UpdateAllSlice(o ServicePlanVisibilitySlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-serviceplanvisibilityquery-upsert"},"func ","(","servicePlanVisibilityQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q servicePlanVisibilityQuery) Upsert(o *ServicePlanVisibility, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-serviceplanvisibilityr"},"type servicePlanVisibilityR"),(0,o.kt)("p",null,"servicePlanVisibilityR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type servicePlanVisibilityR struct {\n    Organization *Organization `boil:"Organization" json:"Organization" toml:"Organization" yaml:"Organization"`\n    ServicePlan  *ServicePlan  `boil:"ServicePlan" json:"ServicePlan" toml:"ServicePlan" yaml:"ServicePlan"`\n}\n')),(0,o.kt)("h3",{id:"func-serviceplanvisibilityr-newstruct"},"func ","(","*","servicePlanVisibilityR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*servicePlanVisibilityR) NewStruct() *servicePlanVisibilityR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-servicequery"},"type serviceQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-services"},"func Services"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func Services(mods ...qm.QueryMod) serviceQuery\n")),(0,o.kt)("p",null,"Services retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-servicequery-addresourceserviceofferingannotations"},"func ","(","serviceQuery",")"," AddResourceServiceOfferingAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) AddResourceServiceOfferingAnnotations(o *Service, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceOfferingAnnotation) error\n")),(0,o.kt)("p",null,"AddResourceServiceOfferingAnnotations adds the given related objects to the existing relationships of the service\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceServiceOfferingAnnotations","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-servicequery-addresourceserviceofferinglabels"},"func ","(","serviceQuery",")"," AddResourceServiceOfferingLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) AddResourceServiceOfferingLabels(o *Service, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceOfferingLabel) error\n")),(0,o.kt)("p",null,"AddResourceServiceOfferingLabels adds the given related objects to the existing relationships of the service\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceServiceOfferingLabels","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-servicequery-addserviceplans"},"func ","(","serviceQuery",")"," AddServicePlans"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) AddServicePlans(o *Service, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServicePlan) error\n")),(0,o.kt)("p",null,"AddServicePlans adds the given related objects to the existing relationships of the service\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ServicePlans","."," Sets related",".","R",".","Service appropriately","."),(0,o.kt)("h3",{id:"func-servicequery-all"},"func ","(","serviceQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceSlice, error)\n")),(0,o.kt)("p",null,"All returns all Service records from the query","."),(0,o.kt)("h3",{id:"func-servicequery-count"},"func ","(","serviceQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all Service records in the query","."),(0,o.kt)("h3",{id:"func-servicequery-delete"},"func ","(","serviceQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) Delete(o *Service, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single Service record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-servicequery-deleteall"},"func ","(","serviceQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-servicequery-deleteallslice"},"func ","(","serviceQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) DeleteAllSlice(o ServiceSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicequery-exists"},"func ","(","serviceQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-servicequery-insert"},"func ","(","serviceQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) Insert(o *Service, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-servicequery-one"},"func ","(","serviceQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Service, error)\n")),(0,o.kt)("p",null,"One returns a single service record from the query","."),(0,o.kt)("h3",{id:"func-servicequery-reload"},"func ","(","serviceQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) Reload(o *Service, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-servicequery-reloadall"},"func ","(","serviceQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) ReloadAll(o *ServiceSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-servicequery-removeresourceserviceofferingannotations"},"func ","(","serviceQuery",")"," RemoveResourceServiceOfferingAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) RemoveResourceServiceOfferingAnnotations(o *Service, ctx context.Context, exec boil.ContextExecutor, related ...*ServiceOfferingAnnotation) error\n")),(0,o.kt)("p",null,"RemoveResourceServiceOfferingAnnotations relationships from objects passed in","."," Removes related items from R",".","ResourceServiceOfferingAnnotations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-servicequery-removeresourceserviceofferinglabels"},"func ","(","serviceQuery",")"," RemoveResourceServiceOfferingLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) RemoveResourceServiceOfferingLabels(o *Service, ctx context.Context, exec boil.ContextExecutor, related ...*ServiceOfferingLabel) error\n")),(0,o.kt)("p",null,"RemoveResourceServiceOfferingLabels relationships from objects passed in","."," Removes related items from R",".","ResourceServiceOfferingLabels ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-servicequery-removeservicebroker"},"func ","(","serviceQuery",")"," RemoveServiceBroker"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) RemoveServiceBroker(o *Service, ctx context.Context, exec boil.ContextExecutor, related *ServiceBroker) error\n")),(0,o.kt)("p",null,"RemoveServiceBroker relationship","."," Sets o",".","R",".","ServiceBroker to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-servicequery-resourceserviceofferingannotations"},"func ","(","serviceQuery",")"," ResourceServiceOfferingAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) ResourceServiceOfferingAnnotations(o *Service, mods ...qm.QueryMod) serviceOfferingAnnotationQuery\n")),(0,o.kt)("p",null,"ResourceServiceOfferingAnnotations retrieves all the service","_","offering","_","annotation's ServiceOfferingAnnotations with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-servicequery-resourceserviceofferinglabels"},"func ","(","serviceQuery",")"," ResourceServiceOfferingLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) ResourceServiceOfferingLabels(o *Service, mods ...qm.QueryMod) serviceOfferingLabelQuery\n")),(0,o.kt)("p",null,"ResourceServiceOfferingLabels retrieves all the service","_","offering","_","label's ServiceOfferingLabels with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-servicequery-servicebroker"},"func ","(","serviceQuery",")"," ServiceBroker"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) ServiceBroker(o *Service, mods ...qm.QueryMod) serviceBrokerQuery\n")),(0,o.kt)("p",null,"ServiceBroker pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-servicequery-serviceplans"},"func ","(","serviceQuery",")"," ServicePlans"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) ServicePlans(o *Service, mods ...qm.QueryMod) servicePlanQuery\n")),(0,o.kt)("p",null,"ServicePlans retrieves all the service","_","plan's ServicePlans with an executor","."),(0,o.kt)("h3",{id:"func-servicequery-setresourceserviceofferingannotations"},"func ","(","serviceQuery",")"," SetResourceServiceOfferingAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) SetResourceServiceOfferingAnnotations(o *Service, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceOfferingAnnotation) error\n")),(0,o.kt)("p",null,"SetResourceServiceOfferingAnnotations removes all previously related items of the service replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceServiceOfferingAnnotations accordingly","."," Replaces o",".","R",".","ResourceServiceOfferingAnnotations with related","."," Sets related",".","R",".","Resource's ResourceServiceOfferingAnnotations accordingly","."),(0,o.kt)("h3",{id:"func-servicequery-setresourceserviceofferinglabels"},"func ","(","serviceQuery",")"," SetResourceServiceOfferingLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) SetResourceServiceOfferingLabels(o *Service, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceOfferingLabel) error\n")),(0,o.kt)("p",null,"SetResourceServiceOfferingLabels removes all previously related items of the service replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceServiceOfferingLabels accordingly","."," Replaces o",".","R",".","ResourceServiceOfferingLabels with related","."," Sets related",".","R",".","Resource's ResourceServiceOfferingLabels accordingly","."),(0,o.kt)("h3",{id:"func-servicequery-setservicebroker"},"func ","(","serviceQuery",")"," SetServiceBroker"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) SetServiceBroker(o *Service, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceBroker) error\n")),(0,o.kt)("p",null,"SetServiceBroker of the service to the related item","."," Sets o",".","R",".","ServiceBroker to related","."," Adds o to related",".","R",".","Services","."),(0,o.kt)("h3",{id:"func-servicequery-update"},"func ","(","serviceQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) Update(o *Service, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the Service","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-servicequery-updateall"},"func ","(","serviceQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-servicequery-updateallslice"},"func ","(","serviceQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) UpdateAllSlice(o ServiceSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-servicequery-upsert"},"func ","(","serviceQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceQuery) Upsert(o *Service, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-servicer"},"type serviceR"),(0,o.kt)("p",null,"serviceR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type serviceR struct {\n    ServiceBroker                      *ServiceBroker                 `boil:"ServiceBroker" json:"ServiceBroker" toml:"ServiceBroker" yaml:"ServiceBroker"`\n    ResourceServiceOfferingAnnotations ServiceOfferingAnnotationSlice `boil:"ResourceServiceOfferingAnnotations" json:"ResourceServiceOfferingAnnotations" toml:"ResourceServiceOfferingAnnotations" yaml:"ResourceServiceOfferingAnnotations"`\n    ResourceServiceOfferingLabels      ServiceOfferingLabelSlice      `boil:"ResourceServiceOfferingLabels" json:"ResourceServiceOfferingLabels" toml:"ResourceServiceOfferingLabels" yaml:"ResourceServiceOfferingLabels"`\n    ServicePlans                       ServicePlanSlice               `boil:"ServicePlans" json:"ServicePlans" toml:"ServicePlans" yaml:"ServicePlans"`\n}\n')),(0,o.kt)("h3",{id:"func-servicer-newstruct"},"func ","(","*","serviceR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*serviceR) NewStruct() *serviceR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-serviceusageeventl"},"type serviceUsageEventL"),(0,o.kt)("p",null,"serviceUsageEventL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceUsageEventL struct{}\n")),(0,o.kt)("h2",{id:"type-serviceusageeventquery"},"type serviceUsageEventQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceUsageEventQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-serviceusageevents"},"func ServiceUsageEvents"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ServiceUsageEvents(mods ...qm.QueryMod) serviceUsageEventQuery\n")),(0,o.kt)("p",null,"ServiceUsageEvents retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-serviceusageeventquery-all"},"func ","(","serviceUsageEventQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceUsageEventQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceUsageEventSlice, error)\n")),(0,o.kt)("p",null,"All returns all ServiceUsageEvent records from the query","."),(0,o.kt)("h3",{id:"func-serviceusageeventquery-count"},"func ","(","serviceUsageEventQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceUsageEventQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all ServiceUsageEvent records in the query","."),(0,o.kt)("h3",{id:"func-serviceusageeventquery-delete"},"func ","(","serviceUsageEventQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceUsageEventQuery) Delete(o *ServiceUsageEvent, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single ServiceUsageEvent record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-serviceusageeventquery-deleteall"},"func ","(","serviceUsageEventQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceUsageEventQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-serviceusageeventquery-deleteallslice"},"func ","(","serviceUsageEventQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceUsageEventQuery) DeleteAllSlice(o ServiceUsageEventSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-serviceusageeventquery-exists"},"func ","(","serviceUsageEventQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceUsageEventQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-serviceusageeventquery-insert"},"func ","(","serviceUsageEventQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceUsageEventQuery) Insert(o *ServiceUsageEvent, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-serviceusageeventquery-one"},"func ","(","serviceUsageEventQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceUsageEventQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceUsageEvent, error)\n")),(0,o.kt)("p",null,"One returns a single serviceUsageEvent record from the query","."),(0,o.kt)("h3",{id:"func-serviceusageeventquery-reload"},"func ","(","serviceUsageEventQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceUsageEventQuery) Reload(o *ServiceUsageEvent, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-serviceusageeventquery-reloadall"},"func ","(","serviceUsageEventQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceUsageEventQuery) ReloadAll(o *ServiceUsageEventSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-serviceusageeventquery-update"},"func ","(","serviceUsageEventQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceUsageEventQuery) Update(o *ServiceUsageEvent, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the ServiceUsageEvent","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-serviceusageeventquery-updateall"},"func ","(","serviceUsageEventQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceUsageEventQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-serviceusageeventquery-updateallslice"},"func ","(","serviceUsageEventQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceUsageEventQuery) UpdateAllSlice(o ServiceUsageEventSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-serviceusageeventquery-upsert"},"func ","(","serviceUsageEventQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q serviceUsageEventQuery) Upsert(o *ServiceUsageEvent, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-serviceusageeventr"},"type serviceUsageEventR"),(0,o.kt)("p",null,"serviceUsageEventR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type serviceUsageEventR struct {\n}\n")),(0,o.kt)("h3",{id:"func-serviceusageeventr-newstruct"},"func ","(","*","serviceUsageEventR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*serviceUsageEventR) NewStruct() *serviceUsageEventR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-sidecarl"},"type sidecarL"),(0,o.kt)("p",null,"sidecarL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type sidecarL struct{}\n")),(0,o.kt)("h3",{id:"func-sidecarl-loadapp"},"func ","(","sidecarL",")"," LoadApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (sidecarL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSidecar interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadApp allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-sidecarl-loadsidecarprocesstypes"},"func ","(","sidecarL",")"," LoadSidecarProcessTypes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (sidecarL) LoadSidecarProcessTypes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSidecar interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSidecarProcessTypes allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-sidecarprocesstypel"},"type sidecarProcessTypeL"),(0,o.kt)("p",null,"sidecarProcessTypeL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type sidecarProcessTypeL struct{}\n")),(0,o.kt)("h3",{id:"func-sidecarprocesstypel-loadsidecar"},"func ","(","sidecarProcessTypeL",")"," LoadSidecar"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (sidecarProcessTypeL) LoadSidecar(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSidecarProcessType interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSidecar allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-sidecarprocesstypequery"},"type sidecarProcessTypeQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type sidecarProcessTypeQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-sidecarprocesstypes"},"func SidecarProcessTypes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func SidecarProcessTypes(mods ...qm.QueryMod) sidecarProcessTypeQuery\n")),(0,o.kt)("p",null,"SidecarProcessTypes retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-sidecarprocesstypequery-all"},"func ","(","sidecarProcessTypeQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarProcessTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (SidecarProcessTypeSlice, error)\n")),(0,o.kt)("p",null,"All returns all SidecarProcessType records from the query","."),(0,o.kt)("h3",{id:"func-sidecarprocesstypequery-count"},"func ","(","sidecarProcessTypeQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarProcessTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all SidecarProcessType records in the query","."),(0,o.kt)("h3",{id:"func-sidecarprocesstypequery-delete"},"func ","(","sidecarProcessTypeQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarProcessTypeQuery) Delete(o *SidecarProcessType, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single SidecarProcessType record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-sidecarprocesstypequery-deleteall"},"func ","(","sidecarProcessTypeQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarProcessTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-sidecarprocesstypequery-deleteallslice"},"func ","(","sidecarProcessTypeQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarProcessTypeQuery) DeleteAllSlice(o SidecarProcessTypeSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-sidecarprocesstypequery-exists"},"func ","(","sidecarProcessTypeQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarProcessTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-sidecarprocesstypequery-insert"},"func ","(","sidecarProcessTypeQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarProcessTypeQuery) Insert(o *SidecarProcessType, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-sidecarprocesstypequery-one"},"func ","(","sidecarProcessTypeQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarProcessTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SidecarProcessType, error)\n")),(0,o.kt)("p",null,"One returns a single sidecarProcessType record from the query","."),(0,o.kt)("h3",{id:"func-sidecarprocesstypequery-reload"},"func ","(","sidecarProcessTypeQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarProcessTypeQuery) Reload(o *SidecarProcessType, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-sidecarprocesstypequery-reloadall"},"func ","(","sidecarProcessTypeQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarProcessTypeQuery) ReloadAll(o *SidecarProcessTypeSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-sidecarprocesstypequery-setsidecar"},"func ","(","sidecarProcessTypeQuery",")"," SetSidecar"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarProcessTypeQuery) SetSidecar(o *SidecarProcessType, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Sidecar) error\n")),(0,o.kt)("p",null,"SetSidecar of the sidecarProcessType to the related item","."," Sets o",".","R",".","Sidecar to related","."," Adds o to related",".","R",".","SidecarProcessTypes","."),(0,o.kt)("h3",{id:"func-sidecarprocesstypequery-sidecar"},"func ","(","sidecarProcessTypeQuery",")"," Sidecar"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarProcessTypeQuery) Sidecar(o *SidecarProcessType, mods ...qm.QueryMod) sidecarQuery\n")),(0,o.kt)("p",null,"Sidecar pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-sidecarprocesstypequery-update"},"func ","(","sidecarProcessTypeQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarProcessTypeQuery) Update(o *SidecarProcessType, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the SidecarProcessType","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-sidecarprocesstypequery-updateall"},"func ","(","sidecarProcessTypeQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarProcessTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-sidecarprocesstypequery-updateallslice"},"func ","(","sidecarProcessTypeQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarProcessTypeQuery) UpdateAllSlice(o SidecarProcessTypeSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-sidecarprocesstypequery-upsert"},"func ","(","sidecarProcessTypeQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarProcessTypeQuery) Upsert(o *SidecarProcessType, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-sidecarprocesstyper"},"type sidecarProcessTypeR"),(0,o.kt)("p",null,"sidecarProcessTypeR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type sidecarProcessTypeR struct {\n    Sidecar *Sidecar `boil:"Sidecar" json:"Sidecar" toml:"Sidecar" yaml:"Sidecar"`\n}\n')),(0,o.kt)("h3",{id:"func-sidecarprocesstyper-newstruct"},"func ","(","*","sidecarProcessTypeR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*sidecarProcessTypeR) NewStruct() *sidecarProcessTypeR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-sidecarquery"},"type sidecarQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type sidecarQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-sidecars"},"func Sidecars"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func Sidecars(mods ...qm.QueryMod) sidecarQuery\n")),(0,o.kt)("p",null,"Sidecars retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-sidecarquery-addsidecarprocesstypes"},"func ","(","sidecarQuery",")"," AddSidecarProcessTypes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarQuery) AddSidecarProcessTypes(o *Sidecar, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SidecarProcessType) error\n")),(0,o.kt)("p",null,"AddSidecarProcessTypes adds the given related objects to the existing relationships of the sidecar\\, optionally inserting them as new records","."," Appends related to o",".","R",".","SidecarProcessTypes","."," Sets related",".","R",".","Sidecar appropriately","."),(0,o.kt)("h3",{id:"func-sidecarquery-all"},"func ","(","sidecarQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarQuery) All(ctx context.Context, exec boil.ContextExecutor) (SidecarSlice, error)\n")),(0,o.kt)("p",null,"All returns all Sidecar records from the query","."),(0,o.kt)("h3",{id:"func-sidecarquery-app"},"func ","(","sidecarQuery",")"," App"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarQuery) App(o *Sidecar, mods ...qm.QueryMod) appQuery\n")),(0,o.kt)("p",null,"App pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-sidecarquery-count"},"func ","(","sidecarQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all Sidecar records in the query","."),(0,o.kt)("h3",{id:"func-sidecarquery-delete"},"func ","(","sidecarQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarQuery) Delete(o *Sidecar, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single Sidecar record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-sidecarquery-deleteall"},"func ","(","sidecarQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-sidecarquery-deleteallslice"},"func ","(","sidecarQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarQuery) DeleteAllSlice(o SidecarSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-sidecarquery-exists"},"func ","(","sidecarQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-sidecarquery-insert"},"func ","(","sidecarQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarQuery) Insert(o *Sidecar, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-sidecarquery-one"},"func ","(","sidecarQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Sidecar, error)\n")),(0,o.kt)("p",null,"One returns a single sidecar record from the query","."),(0,o.kt)("h3",{id:"func-sidecarquery-reload"},"func ","(","sidecarQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarQuery) Reload(o *Sidecar, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-sidecarquery-reloadall"},"func ","(","sidecarQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarQuery) ReloadAll(o *SidecarSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-sidecarquery-setapp"},"func ","(","sidecarQuery",")"," SetApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarQuery) SetApp(o *Sidecar, ctx context.Context, exec boil.ContextExecutor, insert bool, related *App) error\n")),(0,o.kt)("p",null,"SetApp of the sidecar to the related item","."," Sets o",".","R",".","App to related","."," Adds o to related",".","R",".","Sidecars","."),(0,o.kt)("h3",{id:"func-sidecarquery-sidecarprocesstypes"},"func ","(","sidecarQuery",")"," SidecarProcessTypes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarQuery) SidecarProcessTypes(o *Sidecar, mods ...qm.QueryMod) sidecarProcessTypeQuery\n")),(0,o.kt)("p",null,"SidecarProcessTypes retrieves all the sidecar","_","process","_","type's SidecarProcessTypes with an executor","."),(0,o.kt)("h3",{id:"func-sidecarquery-update"},"func ","(","sidecarQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarQuery) Update(o *Sidecar, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the Sidecar","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-sidecarquery-updateall"},"func ","(","sidecarQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-sidecarquery-updateallslice"},"func ","(","sidecarQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarQuery) UpdateAllSlice(o SidecarSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-sidecarquery-upsert"},"func ","(","sidecarQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q sidecarQuery) Upsert(o *Sidecar, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-sidecarr"},"type sidecarR"),(0,o.kt)("p",null,"sidecarR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type sidecarR struct {\n    App                 *App                    `boil:"App" json:"App" toml:"App" yaml:"App"`\n    SidecarProcessTypes SidecarProcessTypeSlice `boil:"SidecarProcessTypes" json:"SidecarProcessTypes" toml:"SidecarProcessTypes" yaml:"SidecarProcessTypes"`\n}\n')),(0,o.kt)("h3",{id:"func-sidecarr-newstruct"},"func ","(","*","sidecarR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*sidecarR) NewStruct() *sidecarR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-spaceannotationl"},"type spaceAnnotationL"),(0,o.kt)("p",null,"spaceAnnotationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type spaceAnnotationL struct{}\n")),(0,o.kt)("h3",{id:"func-spaceannotationl-loadresource"},"func ","(","spaceAnnotationL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spaceAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpaceAnnotation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-spaceannotationquery"},"type spaceAnnotationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type spaceAnnotationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-spaceannotations"},"func SpaceAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func SpaceAnnotations(mods ...qm.QueryMod) spaceAnnotationQuery\n")),(0,o.kt)("p",null,"SpaceAnnotations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-spaceannotationquery-all"},"func ","(","spaceAnnotationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpaceAnnotationSlice, error)\n")),(0,o.kt)("p",null,"All returns all SpaceAnnotation records from the query","."),(0,o.kt)("h3",{id:"func-spaceannotationquery-count"},"func ","(","spaceAnnotationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all SpaceAnnotation records in the query","."),(0,o.kt)("h3",{id:"func-spaceannotationquery-delete"},"func ","(","spaceAnnotationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceAnnotationQuery) Delete(o *SpaceAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single SpaceAnnotation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-spaceannotationquery-deleteall"},"func ","(","spaceAnnotationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-spaceannotationquery-deleteallslice"},"func ","(","spaceAnnotationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceAnnotationQuery) DeleteAllSlice(o SpaceAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-spaceannotationquery-exists"},"func ","(","spaceAnnotationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-spaceannotationquery-insert"},"func ","(","spaceAnnotationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceAnnotationQuery) Insert(o *SpaceAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-spaceannotationquery-one"},"func ","(","spaceAnnotationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SpaceAnnotation, error)\n")),(0,o.kt)("p",null,"One returns a single spaceAnnotation record from the query","."),(0,o.kt)("h3",{id:"func-spaceannotationquery-reload"},"func ","(","spaceAnnotationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceAnnotationQuery) Reload(o *SpaceAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-spaceannotationquery-reloadall"},"func ","(","spaceAnnotationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceAnnotationQuery) ReloadAll(o *SpaceAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-spaceannotationquery-removeresource"},"func ","(","spaceAnnotationQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceAnnotationQuery) RemoveResource(o *SpaceAnnotation, ctx context.Context, exec boil.ContextExecutor, related *Space) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-spaceannotationquery-resource"},"func ","(","spaceAnnotationQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceAnnotationQuery) Resource(o *SpaceAnnotation, mods ...qm.QueryMod) spaceQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-spaceannotationquery-setresource"},"func ","(","spaceAnnotationQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceAnnotationQuery) SetResource(o *SpaceAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Space) error\n")),(0,o.kt)("p",null,"SetResource of the spaceAnnotation to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceSpaceAnnotations","."),(0,o.kt)("h3",{id:"func-spaceannotationquery-update"},"func ","(","spaceAnnotationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceAnnotationQuery) Update(o *SpaceAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the SpaceAnnotation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-spaceannotationquery-updateall"},"func ","(","spaceAnnotationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-spaceannotationquery-updateallslice"},"func ","(","spaceAnnotationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceAnnotationQuery) UpdateAllSlice(o SpaceAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-spaceannotationquery-upsert"},"func ","(","spaceAnnotationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceAnnotationQuery) Upsert(o *SpaceAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-spaceannotationr"},"type spaceAnnotationR"),(0,o.kt)("p",null,"spaceAnnotationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type spaceAnnotationR struct {\n    Resource *Space `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-spaceannotationr-newstruct"},"func ","(","*","spaceAnnotationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*spaceAnnotationR) NewStruct() *spaceAnnotationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-spacel"},"type spaceL"),(0,o.kt)("p",null,"spaceL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type spaceL struct{}\n")),(0,o.kt)("h3",{id:"func-spacel-loadapps"},"func ","(","spaceL",")"," LoadApps"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spaceL) LoadApps(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadApps allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-spacel-loaddefaultspaceusers"},"func ","(","spaceL",")"," LoadDefaultSpaceUsers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spaceL) LoadDefaultSpaceUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadDefaultSpaceUsers allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-spacel-loadisolationsegment"},"func ","(","spaceL",")"," LoadIsolationSegment"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spaceL) LoadIsolationSegment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadIsolationSegment allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-spacel-loadorganization"},"func ","(","spaceL",")"," LoadOrganization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spaceL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadOrganization allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-spacel-loadresourcespaceannotations"},"func ","(","spaceL",")"," LoadResourceSpaceAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spaceL) LoadResourceSpaceAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceSpaceAnnotations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-spacel-loadresourcespacelabels"},"func ","(","spaceL",")"," LoadResourceSpaceLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spaceL) LoadResourceSpaceLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceSpaceLabels allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-spacel-loadroutes"},"func ","(","spaceL",")"," LoadRoutes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spaceL) LoadRoutes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadRoutes allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-spacel-loadsecuritygroupsspaces"},"func ","(","spaceL",")"," LoadSecurityGroupsSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spaceL) LoadSecurityGroupsSpaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSecurityGroupsSpaces allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-spacel-loadservicebrokers"},"func ","(","spaceL",")"," LoadServiceBrokers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spaceL) LoadServiceBrokers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadServiceBrokers allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-spacel-loadserviceinstances"},"func ","(","spaceL",")"," LoadServiceInstances"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spaceL) LoadServiceInstances(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadServiceInstances allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-spacel-loadsharedserviceinstances"},"func ","(","spaceL",")"," LoadSharedServiceInstances"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spaceL) LoadSharedServiceInstances(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSharedServiceInstances allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-spacel-loadspacequotadefinition"},"func ","(","spaceL",")"," LoadSpaceQuotaDefinition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spaceL) LoadSpaceQuotaDefinition(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSpaceQuotaDefinition allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-spacel-loadspacesapplicationsupporters"},"func ","(","spaceL",")"," LoadSpacesApplicationSupporters"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spaceL) LoadSpacesApplicationSupporters(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSpacesApplicationSupporters allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-spacel-loadspacesauditors"},"func ","(","spaceL",")"," LoadSpacesAuditors"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spaceL) LoadSpacesAuditors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSpacesAuditors allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-spacel-loadspacesdevelopers"},"func ","(","spaceL",")"," LoadSpacesDevelopers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spaceL) LoadSpacesDevelopers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSpacesDevelopers allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-spacel-loadspacesmanagers"},"func ","(","spaceL",")"," LoadSpacesManagers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spaceL) LoadSpacesManagers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSpacesManagers allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-spacel-loadstagingspacestagingsecuritygroupsspaces"},"func ","(","spaceL",")"," LoadStagingSpaceStagingSecurityGroupsSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spaceL) LoadStagingSpaceStagingSecurityGroupsSpaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadStagingSpaceStagingSecurityGroupsSpaces allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-spacelabell"},"type spaceLabelL"),(0,o.kt)("p",null,"spaceLabelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type spaceLabelL struct{}\n")),(0,o.kt)("h3",{id:"func-spacelabell-loadresource"},"func ","(","spaceLabelL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spaceLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpaceLabel interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-spacelabelquery"},"type spaceLabelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type spaceLabelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-spacelabels"},"func SpaceLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func SpaceLabels(mods ...qm.QueryMod) spaceLabelQuery\n")),(0,o.kt)("p",null,"SpaceLabels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-spacelabelquery-all"},"func ","(","spaceLabelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpaceLabelSlice, error)\n")),(0,o.kt)("p",null,"All returns all SpaceLabel records from the query","."),(0,o.kt)("h3",{id:"func-spacelabelquery-count"},"func ","(","spaceLabelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all SpaceLabel records in the query","."),(0,o.kt)("h3",{id:"func-spacelabelquery-delete"},"func ","(","spaceLabelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceLabelQuery) Delete(o *SpaceLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single SpaceLabel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-spacelabelquery-deleteall"},"func ","(","spaceLabelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-spacelabelquery-deleteallslice"},"func ","(","spaceLabelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceLabelQuery) DeleteAllSlice(o SpaceLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-spacelabelquery-exists"},"func ","(","spaceLabelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-spacelabelquery-insert"},"func ","(","spaceLabelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceLabelQuery) Insert(o *SpaceLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-spacelabelquery-one"},"func ","(","spaceLabelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SpaceLabel, error)\n")),(0,o.kt)("p",null,"One returns a single spaceLabel record from the query","."),(0,o.kt)("h3",{id:"func-spacelabelquery-reload"},"func ","(","spaceLabelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceLabelQuery) Reload(o *SpaceLabel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-spacelabelquery-reloadall"},"func ","(","spaceLabelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceLabelQuery) ReloadAll(o *SpaceLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-spacelabelquery-removeresource"},"func ","(","spaceLabelQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceLabelQuery) RemoveResource(o *SpaceLabel, ctx context.Context, exec boil.ContextExecutor, related *Space) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-spacelabelquery-resource"},"func ","(","spaceLabelQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceLabelQuery) Resource(o *SpaceLabel, mods ...qm.QueryMod) spaceQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-spacelabelquery-setresource"},"func ","(","spaceLabelQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceLabelQuery) SetResource(o *SpaceLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Space) error\n")),(0,o.kt)("p",null,"SetResource of the spaceLabel to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceSpaceLabels","."),(0,o.kt)("h3",{id:"func-spacelabelquery-update"},"func ","(","spaceLabelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceLabelQuery) Update(o *SpaceLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the SpaceLabel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-spacelabelquery-updateall"},"func ","(","spaceLabelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-spacelabelquery-updateallslice"},"func ","(","spaceLabelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceLabelQuery) UpdateAllSlice(o SpaceLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-spacelabelquery-upsert"},"func ","(","spaceLabelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceLabelQuery) Upsert(o *SpaceLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-spacelabelr"},"type spaceLabelR"),(0,o.kt)("p",null,"spaceLabelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type spaceLabelR struct {\n    Resource *Space `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-spacelabelr-newstruct"},"func ","(","*","spaceLabelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*spaceLabelR) NewStruct() *spaceLabelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-spacequery"},"type spaceQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type spaceQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-spaces"},"func Spaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func Spaces(mods ...qm.QueryMod) spaceQuery\n")),(0,o.kt)("p",null,"Spaces retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-spacequery-addapps"},"func ","(","spaceQuery",")"," AddApps"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) AddApps(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*App) error\n")),(0,o.kt)("p",null,"AddApps adds the given related objects to the existing relationships of the space\\, optionally inserting them as new records","."," Appends related to o",".","R",".","Apps","."," Sets related",".","R",".","Space appropriately","."),(0,o.kt)("h3",{id:"func-spacequery-adddefaultspaceusers"},"func ","(","spaceQuery",")"," AddDefaultSpaceUsers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) AddDefaultSpaceUsers(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error\n")),(0,o.kt)("p",null,"AddDefaultSpaceUsers adds the given related objects to the existing relationships of the space\\, optionally inserting them as new records","."," Appends related to o",".","R",".","DefaultSpaceUsers","."," Sets related",".","R",".","DefaultSpace appropriately","."),(0,o.kt)("h3",{id:"func-spacequery-addresourcespaceannotations"},"func ","(","spaceQuery",")"," AddResourceSpaceAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) AddResourceSpaceAnnotations(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpaceAnnotation) error\n")),(0,o.kt)("p",null,"AddResourceSpaceAnnotations adds the given related objects to the existing relationships of the space\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceSpaceAnnotations","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-spacequery-addresourcespacelabels"},"func ","(","spaceQuery",")"," AddResourceSpaceLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) AddResourceSpaceLabels(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpaceLabel) error\n")),(0,o.kt)("p",null,"AddResourceSpaceLabels adds the given related objects to the existing relationships of the space\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceSpaceLabels","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-spacequery-addroutes"},"func ","(","spaceQuery",")"," AddRoutes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) AddRoutes(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Route) error\n")),(0,o.kt)("p",null,"AddRoutes adds the given related objects to the existing relationships of the space\\, optionally inserting them as new records","."," Appends related to o",".","R",".","Routes","."," Sets related",".","R",".","Space appropriately","."),(0,o.kt)("h3",{id:"func-spacequery-addsecuritygroupsspaces"},"func ","(","spaceQuery",")"," AddSecurityGroupsSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) AddSecurityGroupsSpaces(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SecurityGroupsSpace) error\n")),(0,o.kt)("p",null,"AddSecurityGroupsSpaces adds the given related objects to the existing relationships of the space\\, optionally inserting them as new records","."," Appends related to o",".","R",".","SecurityGroupsSpaces","."," Sets related",".","R",".","Space appropriately","."),(0,o.kt)("h3",{id:"func-spacequery-addservicebrokers"},"func ","(","spaceQuery",")"," AddServiceBrokers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) AddServiceBrokers(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBroker) error\n")),(0,o.kt)("p",null,"AddServiceBrokers adds the given related objects to the existing relationships of the space\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ServiceBrokers","."," Sets related",".","R",".","Space appropriately","."),(0,o.kt)("h3",{id:"func-spacequery-addserviceinstances"},"func ","(","spaceQuery",")"," AddServiceInstances"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) AddServiceInstances(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceInstance) error\n")),(0,o.kt)("p",null,"AddServiceInstances adds the given related objects to the existing relationships of the space\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ServiceInstances","."," Sets related",".","R",".","Space appropriately","."),(0,o.kt)("h3",{id:"func-spacequery-addsharedserviceinstances"},"func ","(","spaceQuery",")"," AddSharedServiceInstances"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) AddSharedServiceInstances(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceInstance) error\n")),(0,o.kt)("p",null,"AddSharedServiceInstances adds the given related objects to the existing relationships of the space\\, optionally inserting them as new records","."," Appends related to o",".","R",".","SharedServiceInstances","."," Sets related",".","R",".","Spaces appropriately","."),(0,o.kt)("h3",{id:"func-spacequery-addspacesapplicationsupporters"},"func ","(","spaceQuery",")"," AddSpacesApplicationSupporters"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) AddSpacesApplicationSupporters(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpacesApplicationSupporter) error\n")),(0,o.kt)("p",null,"AddSpacesApplicationSupporters adds the given related objects to the existing relationships of the space\\, optionally inserting them as new records","."," Appends related to o",".","R",".","SpacesApplicationSupporters","."," Sets related",".","R",".","Space appropriately","."),(0,o.kt)("h3",{id:"func-spacequery-addspacesauditors"},"func ","(","spaceQuery",")"," AddSpacesAuditors"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) AddSpacesAuditors(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpacesAuditor) error\n")),(0,o.kt)("p",null,"AddSpacesAuditors adds the given related objects to the existing relationships of the space\\, optionally inserting them as new records","."," Appends related to o",".","R",".","SpacesAuditors","."," Sets related",".","R",".","Space appropriately","."),(0,o.kt)("h3",{id:"func-spacequery-addspacesdevelopers"},"func ","(","spaceQuery",")"," AddSpacesDevelopers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) AddSpacesDevelopers(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpacesDeveloper) error\n")),(0,o.kt)("p",null,"AddSpacesDevelopers adds the given related objects to the existing relationships of the space\\, optionally inserting them as new records","."," Appends related to o",".","R",".","SpacesDevelopers","."," Sets related",".","R",".","Space appropriately","."),(0,o.kt)("h3",{id:"func-spacequery-addspacesmanagers"},"func ","(","spaceQuery",")"," AddSpacesManagers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) AddSpacesManagers(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpacesManager) error\n")),(0,o.kt)("p",null,"AddSpacesManagers adds the given related objects to the existing relationships of the space\\, optionally inserting them as new records","."," Appends related to o",".","R",".","SpacesManagers","."," Sets related",".","R",".","Space appropriately","."),(0,o.kt)("h3",{id:"func-spacequery-addstagingspacestagingsecuritygroupsspaces"},"func ","(","spaceQuery",")"," AddStagingSpaceStagingSecurityGroupsSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) AddStagingSpaceStagingSecurityGroupsSpaces(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StagingSecurityGroupsSpace) error\n")),(0,o.kt)("p",null,"AddStagingSpaceStagingSecurityGroupsSpaces adds the given related objects to the existing relationships of the space\\, optionally inserting them as new records","."," Appends related to o",".","R",".","StagingSpaceStagingSecurityGroupsSpaces","."," Sets related",".","R",".","StagingSpace appropriately","."),(0,o.kt)("h3",{id:"func-spacequery-all"},"func ","(","spaceQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpaceSlice, error)\n")),(0,o.kt)("p",null,"All returns all Space records from the query","."),(0,o.kt)("h3",{id:"func-spacequery-apps"},"func ","(","spaceQuery",")"," Apps"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) Apps(o *Space, mods ...qm.QueryMod) appQuery\n")),(0,o.kt)("p",null,"Apps retrieves all the app's Apps with an executor","."),(0,o.kt)("h3",{id:"func-spacequery-count"},"func ","(","spaceQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all Space records in the query","."),(0,o.kt)("h3",{id:"func-spacequery-defaultspaceusers"},"func ","(","spaceQuery",")"," DefaultSpaceUsers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) DefaultSpaceUsers(o *Space, mods ...qm.QueryMod) userQuery\n")),(0,o.kt)("p",null,"DefaultSpaceUsers retrieves all the user's Users with an executor via default","_","space","_","id column","."),(0,o.kt)("h3",{id:"func-spacequery-delete"},"func ","(","spaceQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) Delete(o *Space, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single Space record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-spacequery-deleteall"},"func ","(","spaceQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-spacequery-deleteallslice"},"func ","(","spaceQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) DeleteAllSlice(o SpaceSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-spacequery-exists"},"func ","(","spaceQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-spacequery-insert"},"func ","(","spaceQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) Insert(o *Space, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-spacequery-isolationsegment"},"func ","(","spaceQuery",")"," IsolationSegment"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) IsolationSegment(o *Space, mods ...qm.QueryMod) isolationSegmentQuery\n")),(0,o.kt)("p",null,"IsolationSegment pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-spacequery-one"},"func ","(","spaceQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Space, error)\n")),(0,o.kt)("p",null,"One returns a single space record from the query","."),(0,o.kt)("h3",{id:"func-spacequery-organization"},"func ","(","spaceQuery",")"," Organization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) Organization(o *Space, mods ...qm.QueryMod) organizationQuery\n")),(0,o.kt)("p",null,"Organization pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-spacequery-reload"},"func ","(","spaceQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) Reload(o *Space, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-spacequery-reloadall"},"func ","(","spaceQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) ReloadAll(o *SpaceSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-spacequery-removeapps"},"func ","(","spaceQuery",")"," RemoveApps"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) RemoveApps(o *Space, ctx context.Context, exec boil.ContextExecutor, related ...*App) error\n")),(0,o.kt)("p",null,"RemoveApps relationships from objects passed in","."," Removes related items from R",".","Apps ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Space","."),(0,o.kt)("h3",{id:"func-spacequery-removedefaultspaceusers"},"func ","(","spaceQuery",")"," RemoveDefaultSpaceUsers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) RemoveDefaultSpaceUsers(o *Space, ctx context.Context, exec boil.ContextExecutor, related ...*User) error\n")),(0,o.kt)("p",null,"RemoveDefaultSpaceUsers relationships from objects passed in","."," Removes related items from R",".","DefaultSpaceUsers ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","DefaultSpace","."),(0,o.kt)("h3",{id:"func-spacequery-removeisolationsegment"},"func ","(","spaceQuery",")"," RemoveIsolationSegment"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) RemoveIsolationSegment(o *Space, ctx context.Context, exec boil.ContextExecutor, related *IsolationSegment) error\n")),(0,o.kt)("p",null,"RemoveIsolationSegment relationship","."," Sets o",".","R",".","IsolationSegment to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-spacequery-removeresourcespaceannotations"},"func ","(","spaceQuery",")"," RemoveResourceSpaceAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) RemoveResourceSpaceAnnotations(o *Space, ctx context.Context, exec boil.ContextExecutor, related ...*SpaceAnnotation) error\n")),(0,o.kt)("p",null,"RemoveResourceSpaceAnnotations relationships from objects passed in","."," Removes related items from R",".","ResourceSpaceAnnotations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-spacequery-removeresourcespacelabels"},"func ","(","spaceQuery",")"," RemoveResourceSpaceLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) RemoveResourceSpaceLabels(o *Space, ctx context.Context, exec boil.ContextExecutor, related ...*SpaceLabel) error\n")),(0,o.kt)("p",null,"RemoveResourceSpaceLabels relationships from objects passed in","."," Removes related items from R",".","ResourceSpaceLabels ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-spacequery-removeservicebrokers"},"func ","(","spaceQuery",")"," RemoveServiceBrokers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) RemoveServiceBrokers(o *Space, ctx context.Context, exec boil.ContextExecutor, related ...*ServiceBroker) error\n")),(0,o.kt)("p",null,"RemoveServiceBrokers relationships from objects passed in","."," Removes related items from R",".","ServiceBrokers ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Space","."),(0,o.kt)("h3",{id:"func-spacequery-removesharedserviceinstances"},"func ","(","spaceQuery",")"," RemoveSharedServiceInstances"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) RemoveSharedServiceInstances(o *Space, ctx context.Context, exec boil.ContextExecutor, related ...*ServiceInstance) error\n")),(0,o.kt)("p",null,"RemoveSharedServiceInstances relationships from objects passed in","."," Removes related items from R",".","SharedServiceInstances ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Spaces","."),(0,o.kt)("h3",{id:"func-spacequery-removespacequotadefinition"},"func ","(","spaceQuery",")"," RemoveSpaceQuotaDefinition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) RemoveSpaceQuotaDefinition(o *Space, ctx context.Context, exec boil.ContextExecutor, related *SpaceQuotaDefinition) error\n")),(0,o.kt)("p",null,"RemoveSpaceQuotaDefinition relationship","."," Sets o",".","R",".","SpaceQuotaDefinition to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-spacequery-resourcespaceannotations"},"func ","(","spaceQuery",")"," ResourceSpaceAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) ResourceSpaceAnnotations(o *Space, mods ...qm.QueryMod) spaceAnnotationQuery\n")),(0,o.kt)("p",null,"ResourceSpaceAnnotations retrieves all the space","_","annotation's SpaceAnnotations with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-spacequery-resourcespacelabels"},"func ","(","spaceQuery",")"," ResourceSpaceLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) ResourceSpaceLabels(o *Space, mods ...qm.QueryMod) spaceLabelQuery\n")),(0,o.kt)("p",null,"ResourceSpaceLabels retrieves all the space","_","label's SpaceLabels with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-spacequery-routes"},"func ","(","spaceQuery",")"," Routes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) Routes(o *Space, mods ...qm.QueryMod) routeQuery\n")),(0,o.kt)("p",null,"Routes retrieves all the route's Routes with an executor","."),(0,o.kt)("h3",{id:"func-spacequery-securitygroupsspaces"},"func ","(","spaceQuery",")"," SecurityGroupsSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) SecurityGroupsSpaces(o *Space, mods ...qm.QueryMod) securityGroupsSpaceQuery\n")),(0,o.kt)("p",null,"SecurityGroupsSpaces retrieves all the security","_","groups","_","space's SecurityGroupsSpaces with an executor","."),(0,o.kt)("h3",{id:"func-spacequery-servicebrokers"},"func ","(","spaceQuery",")"," ServiceBrokers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) ServiceBrokers(o *Space, mods ...qm.QueryMod) serviceBrokerQuery\n")),(0,o.kt)("p",null,"ServiceBrokers retrieves all the service","_","broker's ServiceBrokers with an executor","."),(0,o.kt)("h3",{id:"func-spacequery-serviceinstances"},"func ","(","spaceQuery",")"," ServiceInstances"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) ServiceInstances(o *Space, mods ...qm.QueryMod) serviceInstanceQuery\n")),(0,o.kt)("p",null,"ServiceInstances retrieves all the service","_","instance's ServiceInstances with an executor","."),(0,o.kt)("h3",{id:"func-spacequery-setapps"},"func ","(","spaceQuery",")"," SetApps"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) SetApps(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*App) error\n")),(0,o.kt)("p",null,"SetApps removes all previously related items of the space replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Space's Apps accordingly","."," Replaces o",".","R",".","Apps with related","."," Sets related",".","R",".","Space's Apps accordingly","."),(0,o.kt)("h3",{id:"func-spacequery-setdefaultspaceusers"},"func ","(","spaceQuery",")"," SetDefaultSpaceUsers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) SetDefaultSpaceUsers(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error\n")),(0,o.kt)("p",null,"SetDefaultSpaceUsers removes all previously related items of the space replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","DefaultSpace's DefaultSpaceUsers accordingly","."," Replaces o",".","R",".","DefaultSpaceUsers with related","."," Sets related",".","R",".","DefaultSpace's DefaultSpaceUsers accordingly","."),(0,o.kt)("h3",{id:"func-spacequery-setisolationsegment"},"func ","(","spaceQuery",")"," SetIsolationSegment"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) SetIsolationSegment(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related *IsolationSegment) error\n")),(0,o.kt)("p",null,"SetIsolationSegment of the space to the related item","."," Sets o",".","R",".","IsolationSegment to related","."," Adds o to related",".","R",".","Spaces","."),(0,o.kt)("h3",{id:"func-spacequery-setorganization"},"func ","(","spaceQuery",")"," SetOrganization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) SetOrganization(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error\n")),(0,o.kt)("p",null,"SetOrganization of the space to the related item","."," Sets o",".","R",".","Organization to related","."," Adds o to related",".","R",".","Spaces","."),(0,o.kt)("h3",{id:"func-spacequery-setresourcespaceannotations"},"func ","(","spaceQuery",")"," SetResourceSpaceAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) SetResourceSpaceAnnotations(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpaceAnnotation) error\n")),(0,o.kt)("p",null,"SetResourceSpaceAnnotations removes all previously related items of the space replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceSpaceAnnotations accordingly","."," Replaces o",".","R",".","ResourceSpaceAnnotations with related","."," Sets related",".","R",".","Resource's ResourceSpaceAnnotations accordingly","."),(0,o.kt)("h3",{id:"func-spacequery-setresourcespacelabels"},"func ","(","spaceQuery",")"," SetResourceSpaceLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) SetResourceSpaceLabels(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpaceLabel) error\n")),(0,o.kt)("p",null,"SetResourceSpaceLabels removes all previously related items of the space replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceSpaceLabels accordingly","."," Replaces o",".","R",".","ResourceSpaceLabels with related","."," Sets related",".","R",".","Resource's ResourceSpaceLabels accordingly","."),(0,o.kt)("h3",{id:"func-spacequery-setservicebrokers"},"func ","(","spaceQuery",")"," SetServiceBrokers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) SetServiceBrokers(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBroker) error\n")),(0,o.kt)("p",null,"SetServiceBrokers removes all previously related items of the space replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Space's ServiceBrokers accordingly","."," Replaces o",".","R",".","ServiceBrokers with related","."," Sets related",".","R",".","Space's ServiceBrokers accordingly","."),(0,o.kt)("h3",{id:"func-spacequery-setsharedserviceinstances"},"func ","(","spaceQuery",")"," SetSharedServiceInstances"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) SetSharedServiceInstances(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceInstance) error\n")),(0,o.kt)("p",null,"SetSharedServiceInstances removes all previously related items of the space replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Spaces's SharedServiceInstances accordingly","."," Replaces o",".","R",".","SharedServiceInstances with related","."," Sets related",".","R",".","Spaces's SharedServiceInstances accordingly","."),(0,o.kt)("h3",{id:"func-spacequery-setspacequotadefinition"},"func ","(","spaceQuery",")"," SetSpaceQuotaDefinition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) SetSpaceQuotaDefinition(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related *SpaceQuotaDefinition) error\n")),(0,o.kt)("p",null,"SetSpaceQuotaDefinition of the space to the related item","."," Sets o",".","R",".","SpaceQuotaDefinition to related","."," Adds o to related",".","R",".","Spaces","."),(0,o.kt)("h3",{id:"func-spacequery-sharedserviceinstances"},"func ","(","spaceQuery",")"," SharedServiceInstances"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) SharedServiceInstances(o *Space, mods ...qm.QueryMod) serviceInstanceQuery\n")),(0,o.kt)("p",null,"SharedServiceInstances retrieves all the service","_","instance's ServiceInstances with an executor via guid column","."),(0,o.kt)("h3",{id:"func-spacequery-spacequotadefinition"},"func ","(","spaceQuery",")"," SpaceQuotaDefinition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) SpaceQuotaDefinition(o *Space, mods ...qm.QueryMod) spaceQuotaDefinitionQuery\n")),(0,o.kt)("p",null,"SpaceQuotaDefinition pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-spacequery-spacesapplicationsupporters"},"func ","(","spaceQuery",")"," SpacesApplicationSupporters"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) SpacesApplicationSupporters(o *Space, mods ...qm.QueryMod) spacesApplicationSupporterQuery\n")),(0,o.kt)("p",null,"SpacesApplicationSupporters retrieves all the spaces","_","application","_","supporter's SpacesApplicationSupporters with an executor","."),(0,o.kt)("h3",{id:"func-spacequery-spacesauditors"},"func ","(","spaceQuery",")"," SpacesAuditors"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) SpacesAuditors(o *Space, mods ...qm.QueryMod) spacesAuditorQuery\n")),(0,o.kt)("p",null,"SpacesAuditors retrieves all the spaces","_","auditor's SpacesAuditors with an executor","."),(0,o.kt)("h3",{id:"func-spacequery-spacesdevelopers"},"func ","(","spaceQuery",")"," SpacesDevelopers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) SpacesDevelopers(o *Space, mods ...qm.QueryMod) spacesDeveloperQuery\n")),(0,o.kt)("p",null,"SpacesDevelopers retrieves all the spaces","_","developer's SpacesDevelopers with an executor","."),(0,o.kt)("h3",{id:"func-spacequery-spacesmanagers"},"func ","(","spaceQuery",")"," SpacesManagers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) SpacesManagers(o *Space, mods ...qm.QueryMod) spacesManagerQuery\n")),(0,o.kt)("p",null,"SpacesManagers retrieves all the spaces","_","manager's SpacesManagers with an executor","."),(0,o.kt)("h3",{id:"func-spacequery-stagingspacestagingsecuritygroupsspaces"},"func ","(","spaceQuery",")"," StagingSpaceStagingSecurityGroupsSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) StagingSpaceStagingSecurityGroupsSpaces(o *Space, mods ...qm.QueryMod) stagingSecurityGroupsSpaceQuery\n")),(0,o.kt)("p",null,"StagingSpaceStagingSecurityGroupsSpaces retrieves all the staging","_","security","_","groups","_","space's StagingSecurityGroupsSpaces with an executor via staging","_","space","_","id column","."),(0,o.kt)("h3",{id:"func-spacequery-update"},"func ","(","spaceQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) Update(o *Space, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the Space","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-spacequery-updateall"},"func ","(","spaceQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-spacequery-updateallslice"},"func ","(","spaceQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) UpdateAllSlice(o SpaceSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-spacequery-upsert"},"func ","(","spaceQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuery) Upsert(o *Space, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-spacequotadefinitionl"},"type spaceQuotaDefinitionL"),(0,o.kt)("p",null,"spaceQuotaDefinitionL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type spaceQuotaDefinitionL struct{}\n")),(0,o.kt)("h3",{id:"func-spacequotadefinitionl-loadorganization"},"func ","(","spaceQuotaDefinitionL",")"," LoadOrganization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spaceQuotaDefinitionL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpaceQuotaDefinition interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadOrganization allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-spacequotadefinitionl-loadspaces"},"func ","(","spaceQuotaDefinitionL",")"," LoadSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spaceQuotaDefinitionL) LoadSpaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpaceQuotaDefinition interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSpaces allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-spacequotadefinitionquery"},"type spaceQuotaDefinitionQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type spaceQuotaDefinitionQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-spacequotadefinitions"},"func SpaceQuotaDefinitions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func SpaceQuotaDefinitions(mods ...qm.QueryMod) spaceQuotaDefinitionQuery\n")),(0,o.kt)("p",null,"SpaceQuotaDefinitions retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-spacequotadefinitionquery-addspaces"},"func ","(","spaceQuotaDefinitionQuery",")"," AddSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuotaDefinitionQuery) AddSpaces(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Space) error\n")),(0,o.kt)("p",null,"AddSpaces adds the given related objects to the existing relationships of the space","_","quota","_","definition\\, optionally inserting them as new records","."," Appends related to o",".","R",".","Spaces","."," Sets related",".","R",".","SpaceQuotaDefinition appropriately","."),(0,o.kt)("h3",{id:"func-spacequotadefinitionquery-all"},"func ","(","spaceQuotaDefinitionQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuotaDefinitionQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpaceQuotaDefinitionSlice, error)\n")),(0,o.kt)("p",null,"All returns all SpaceQuotaDefinition records from the query","."),(0,o.kt)("h3",{id:"func-spacequotadefinitionquery-count"},"func ","(","spaceQuotaDefinitionQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuotaDefinitionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all SpaceQuotaDefinition records in the query","."),(0,o.kt)("h3",{id:"func-spacequotadefinitionquery-delete"},"func ","(","spaceQuotaDefinitionQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuotaDefinitionQuery) Delete(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single SpaceQuotaDefinition record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-spacequotadefinitionquery-deleteall"},"func ","(","spaceQuotaDefinitionQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuotaDefinitionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-spacequotadefinitionquery-deleteallslice"},"func ","(","spaceQuotaDefinitionQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuotaDefinitionQuery) DeleteAllSlice(o SpaceQuotaDefinitionSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-spacequotadefinitionquery-exists"},"func ","(","spaceQuotaDefinitionQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuotaDefinitionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-spacequotadefinitionquery-insert"},"func ","(","spaceQuotaDefinitionQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuotaDefinitionQuery) Insert(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-spacequotadefinitionquery-one"},"func ","(","spaceQuotaDefinitionQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuotaDefinitionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SpaceQuotaDefinition, error)\n")),(0,o.kt)("p",null,"One returns a single spaceQuotaDefinition record from the query","."),(0,o.kt)("h3",{id:"func-spacequotadefinitionquery-organization"},"func ","(","spaceQuotaDefinitionQuery",")"," Organization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuotaDefinitionQuery) Organization(o *SpaceQuotaDefinition, mods ...qm.QueryMod) organizationQuery\n")),(0,o.kt)("p",null,"Organization pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-spacequotadefinitionquery-reload"},"func ","(","spaceQuotaDefinitionQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuotaDefinitionQuery) Reload(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-spacequotadefinitionquery-reloadall"},"func ","(","spaceQuotaDefinitionQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuotaDefinitionQuery) ReloadAll(o *SpaceQuotaDefinitionSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-spacequotadefinitionquery-removespaces"},"func ","(","spaceQuotaDefinitionQuery",")"," RemoveSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuotaDefinitionQuery) RemoveSpaces(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, related ...*Space) error\n")),(0,o.kt)("p",null,"RemoveSpaces relationships from objects passed in","."," Removes related items from R",".","Spaces ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","SpaceQuotaDefinition","."),(0,o.kt)("h3",{id:"func-spacequotadefinitionquery-setorganization"},"func ","(","spaceQuotaDefinitionQuery",")"," SetOrganization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuotaDefinitionQuery) SetOrganization(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error\n")),(0,o.kt)("p",null,"SetOrganization of the spaceQuotaDefinition to the related item","."," Sets o",".","R",".","Organization to related","."," Adds o to related",".","R",".","SpaceQuotaDefinitions","."),(0,o.kt)("h3",{id:"func-spacequotadefinitionquery-setspaces"},"func ","(","spaceQuotaDefinitionQuery",")"," SetSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuotaDefinitionQuery) SetSpaces(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Space) error\n")),(0,o.kt)("p",null,"SetSpaces removes all previously related items of the space","_","quota","_","definition replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","SpaceQuotaDefinition's Spaces accordingly","."," Replaces o",".","R",".","Spaces with related","."," Sets related",".","R",".","SpaceQuotaDefinition's Spaces accordingly","."),(0,o.kt)("h3",{id:"func-spacequotadefinitionquery-spaces"},"func ","(","spaceQuotaDefinitionQuery",")"," Spaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuotaDefinitionQuery) Spaces(o *SpaceQuotaDefinition, mods ...qm.QueryMod) spaceQuery\n")),(0,o.kt)("p",null,"Spaces retrieves all the space's Spaces with an executor","."),(0,o.kt)("h3",{id:"func-spacequotadefinitionquery-update"},"func ","(","spaceQuotaDefinitionQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuotaDefinitionQuery) Update(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the SpaceQuotaDefinition","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-spacequotadefinitionquery-updateall"},"func ","(","spaceQuotaDefinitionQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuotaDefinitionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-spacequotadefinitionquery-updateallslice"},"func ","(","spaceQuotaDefinitionQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuotaDefinitionQuery) UpdateAllSlice(o SpaceQuotaDefinitionSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-spacequotadefinitionquery-upsert"},"func ","(","spaceQuotaDefinitionQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spaceQuotaDefinitionQuery) Upsert(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-spacequotadefinitionr"},"type spaceQuotaDefinitionR"),(0,o.kt)("p",null,"spaceQuotaDefinitionR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type spaceQuotaDefinitionR struct {\n    Organization *Organization `boil:"Organization" json:"Organization" toml:"Organization" yaml:"Organization"`\n    Spaces       SpaceSlice    `boil:"Spaces" json:"Spaces" toml:"Spaces" yaml:"Spaces"`\n}\n')),(0,o.kt)("h3",{id:"func-spacequotadefinitionr-newstruct"},"func ","(","*","spaceQuotaDefinitionR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*spaceQuotaDefinitionR) NewStruct() *spaceQuotaDefinitionR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-spacer"},"type spaceR"),(0,o.kt)("p",null,"spaceR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type spaceR struct {\n    SpaceQuotaDefinition                    *SpaceQuotaDefinition           `boil:"SpaceQuotaDefinition" json:"SpaceQuotaDefinition" toml:"SpaceQuotaDefinition" yaml:"SpaceQuotaDefinition"`\n    IsolationSegment                        *IsolationSegment               `boil:"IsolationSegment" json:"IsolationSegment" toml:"IsolationSegment" yaml:"IsolationSegment"`\n    Organization                            *Organization                   `boil:"Organization" json:"Organization" toml:"Organization" yaml:"Organization"`\n    Apps                                    AppSlice                        `boil:"Apps" json:"Apps" toml:"Apps" yaml:"Apps"`\n    Routes                                  RouteSlice                      `boil:"Routes" json:"Routes" toml:"Routes" yaml:"Routes"`\n    SecurityGroupsSpaces                    SecurityGroupsSpaceSlice        `boil:"SecurityGroupsSpaces" json:"SecurityGroupsSpaces" toml:"SecurityGroupsSpaces" yaml:"SecurityGroupsSpaces"`\n    ServiceBrokers                          ServiceBrokerSlice              `boil:"ServiceBrokers" json:"ServiceBrokers" toml:"ServiceBrokers" yaml:"ServiceBrokers"`\n    SharedServiceInstances                  ServiceInstanceSlice            `boil:"SharedServiceInstances" json:"SharedServiceInstances" toml:"SharedServiceInstances" yaml:"SharedServiceInstances"`\n    ServiceInstances                        ServiceInstanceSlice            `boil:"ServiceInstances" json:"ServiceInstances" toml:"ServiceInstances" yaml:"ServiceInstances"`\n    ResourceSpaceAnnotations                SpaceAnnotationSlice            `boil:"ResourceSpaceAnnotations" json:"ResourceSpaceAnnotations" toml:"ResourceSpaceAnnotations" yaml:"ResourceSpaceAnnotations"`\n    ResourceSpaceLabels                     SpaceLabelSlice                 `boil:"ResourceSpaceLabels" json:"ResourceSpaceLabels" toml:"ResourceSpaceLabels" yaml:"ResourceSpaceLabels"`\n    SpacesApplicationSupporters             SpacesApplicationSupporterSlice `boil:"SpacesApplicationSupporters" json:"SpacesApplicationSupporters" toml:"SpacesApplicationSupporters" yaml:"SpacesApplicationSupporters"`\n    SpacesAuditors                          SpacesAuditorSlice              `boil:"SpacesAuditors" json:"SpacesAuditors" toml:"SpacesAuditors" yaml:"SpacesAuditors"`\n    SpacesDevelopers                        SpacesDeveloperSlice            `boil:"SpacesDevelopers" json:"SpacesDevelopers" toml:"SpacesDevelopers" yaml:"SpacesDevelopers"`\n    SpacesManagers                          SpacesManagerSlice              `boil:"SpacesManagers" json:"SpacesManagers" toml:"SpacesManagers" yaml:"SpacesManagers"`\n    StagingSpaceStagingSecurityGroupsSpaces StagingSecurityGroupsSpaceSlice `boil:"StagingSpaceStagingSecurityGroupsSpaces" json:"StagingSpaceStagingSecurityGroupsSpaces" toml:"StagingSpaceStagingSecurityGroupsSpaces" yaml:"StagingSpaceStagingSecurityGroupsSpaces"`\n    DefaultSpaceUsers                       UserSlice                       `boil:"DefaultSpaceUsers" json:"DefaultSpaceUsers" toml:"DefaultSpaceUsers" yaml:"DefaultSpaceUsers"`\n}\n')),(0,o.kt)("h3",{id:"func-spacer-newstruct"},"func ","(","*","spaceR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*spaceR) NewStruct() *spaceR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-spacesapplicationsupporterl"},"type spacesApplicationSupporterL"),(0,o.kt)("p",null,"spacesApplicationSupporterL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type spacesApplicationSupporterL struct{}\n")),(0,o.kt)("h3",{id:"func-spacesapplicationsupporterl-loadspace"},"func ","(","spacesApplicationSupporterL",")"," LoadSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spacesApplicationSupporterL) LoadSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpacesApplicationSupporter interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSpace allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-spacesapplicationsupporterl-loaduser"},"func ","(","spacesApplicationSupporterL",")"," LoadUser"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spacesApplicationSupporterL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpacesApplicationSupporter interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadUser allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-spacesapplicationsupporterquery"},"type spacesApplicationSupporterQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type spacesApplicationSupporterQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-spacesapplicationsupporters"},"func SpacesApplicationSupporters"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func SpacesApplicationSupporters(mods ...qm.QueryMod) spacesApplicationSupporterQuery\n")),(0,o.kt)("p",null,"SpacesApplicationSupporters retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-spacesapplicationsupporterquery-all"},"func ","(","spacesApplicationSupporterQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesApplicationSupporterQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpacesApplicationSupporterSlice, error)\n")),(0,o.kt)("p",null,"All returns all SpacesApplicationSupporter records from the query","."),(0,o.kt)("h3",{id:"func-spacesapplicationsupporterquery-count"},"func ","(","spacesApplicationSupporterQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesApplicationSupporterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all SpacesApplicationSupporter records in the query","."),(0,o.kt)("h3",{id:"func-spacesapplicationsupporterquery-delete"},"func ","(","spacesApplicationSupporterQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesApplicationSupporterQuery) Delete(o *SpacesApplicationSupporter, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single SpacesApplicationSupporter record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-spacesapplicationsupporterquery-deleteall"},"func ","(","spacesApplicationSupporterQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesApplicationSupporterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-spacesapplicationsupporterquery-deleteallslice"},"func ","(","spacesApplicationSupporterQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesApplicationSupporterQuery) DeleteAllSlice(o SpacesApplicationSupporterSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-spacesapplicationsupporterquery-exists"},"func ","(","spacesApplicationSupporterQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesApplicationSupporterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-spacesapplicationsupporterquery-insert"},"func ","(","spacesApplicationSupporterQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesApplicationSupporterQuery) Insert(o *SpacesApplicationSupporter, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-spacesapplicationsupporterquery-one"},"func ","(","spacesApplicationSupporterQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesApplicationSupporterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SpacesApplicationSupporter, error)\n")),(0,o.kt)("p",null,"One returns a single spacesApplicationSupporter record from the query","."),(0,o.kt)("h3",{id:"func-spacesapplicationsupporterquery-reload"},"func ","(","spacesApplicationSupporterQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesApplicationSupporterQuery) Reload(o *SpacesApplicationSupporter, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-spacesapplicationsupporterquery-reloadall"},"func ","(","spacesApplicationSupporterQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesApplicationSupporterQuery) ReloadAll(o *SpacesApplicationSupporterSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-spacesapplicationsupporterquery-setspace"},"func ","(","spacesApplicationSupporterQuery",")"," SetSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesApplicationSupporterQuery) SetSpace(o *SpacesApplicationSupporter, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Space) error\n")),(0,o.kt)("p",null,"SetSpace of the spacesApplicationSupporter to the related item","."," Sets o",".","R",".","Space to related","."," Adds o to related",".","R",".","SpacesApplicationSupporters","."),(0,o.kt)("h3",{id:"func-spacesapplicationsupporterquery-setuser"},"func ","(","spacesApplicationSupporterQuery",")"," SetUser"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesApplicationSupporterQuery) SetUser(o *SpacesApplicationSupporter, ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error\n")),(0,o.kt)("p",null,"SetUser of the spacesApplicationSupporter to the related item","."," Sets o",".","R",".","User to related","."," Adds o to related",".","R",".","SpacesApplicationSupporters","."),(0,o.kt)("h3",{id:"func-spacesapplicationsupporterquery-space"},"func ","(","spacesApplicationSupporterQuery",")"," Space"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesApplicationSupporterQuery) Space(o *SpacesApplicationSupporter, mods ...qm.QueryMod) spaceQuery\n")),(0,o.kt)("p",null,"Space pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-spacesapplicationsupporterquery-update"},"func ","(","spacesApplicationSupporterQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesApplicationSupporterQuery) Update(o *SpacesApplicationSupporter, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the SpacesApplicationSupporter","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-spacesapplicationsupporterquery-updateall"},"func ","(","spacesApplicationSupporterQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesApplicationSupporterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-spacesapplicationsupporterquery-updateallslice"},"func ","(","spacesApplicationSupporterQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesApplicationSupporterQuery) UpdateAllSlice(o SpacesApplicationSupporterSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-spacesapplicationsupporterquery-upsert"},"func ","(","spacesApplicationSupporterQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesApplicationSupporterQuery) Upsert(o *SpacesApplicationSupporter, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h3",{id:"func-spacesapplicationsupporterquery-user"},"func ","(","spacesApplicationSupporterQuery",")"," User"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesApplicationSupporterQuery) User(o *SpacesApplicationSupporter, mods ...qm.QueryMod) userQuery\n")),(0,o.kt)("p",null,"User pointed to by the foreign key","."),(0,o.kt)("h2",{id:"type-spacesapplicationsupporterr"},"type spacesApplicationSupporterR"),(0,o.kt)("p",null,"spacesApplicationSupporterR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type spacesApplicationSupporterR struct {\n    Space *Space `boil:"Space" json:"Space" toml:"Space" yaml:"Space"`\n    User  *User  `boil:"User" json:"User" toml:"User" yaml:"User"`\n}\n')),(0,o.kt)("h3",{id:"func-spacesapplicationsupporterr-newstruct"},"func ","(","*","spacesApplicationSupporterR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*spacesApplicationSupporterR) NewStruct() *spacesApplicationSupporterR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-spacesauditorl"},"type spacesAuditorL"),(0,o.kt)("p",null,"spacesAuditorL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type spacesAuditorL struct{}\n")),(0,o.kt)("h3",{id:"func-spacesauditorl-loadspace"},"func ","(","spacesAuditorL",")"," LoadSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spacesAuditorL) LoadSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpacesAuditor interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSpace allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-spacesauditorl-loaduser"},"func ","(","spacesAuditorL",")"," LoadUser"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spacesAuditorL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpacesAuditor interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadUser allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-spacesauditorquery"},"type spacesAuditorQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type spacesAuditorQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-spacesauditors"},"func SpacesAuditors"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func SpacesAuditors(mods ...qm.QueryMod) spacesAuditorQuery\n")),(0,o.kt)("p",null,"SpacesAuditors retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-spacesauditorquery-all"},"func ","(","spacesAuditorQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesAuditorQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpacesAuditorSlice, error)\n")),(0,o.kt)("p",null,"All returns all SpacesAuditor records from the query","."),(0,o.kt)("h3",{id:"func-spacesauditorquery-count"},"func ","(","spacesAuditorQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesAuditorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all SpacesAuditor records in the query","."),(0,o.kt)("h3",{id:"func-spacesauditorquery-delete"},"func ","(","spacesAuditorQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesAuditorQuery) Delete(o *SpacesAuditor, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single SpacesAuditor record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-spacesauditorquery-deleteall"},"func ","(","spacesAuditorQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesAuditorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-spacesauditorquery-deleteallslice"},"func ","(","spacesAuditorQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesAuditorQuery) DeleteAllSlice(o SpacesAuditorSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-spacesauditorquery-exists"},"func ","(","spacesAuditorQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesAuditorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-spacesauditorquery-insert"},"func ","(","spacesAuditorQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesAuditorQuery) Insert(o *SpacesAuditor, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-spacesauditorquery-one"},"func ","(","spacesAuditorQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesAuditorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SpacesAuditor, error)\n")),(0,o.kt)("p",null,"One returns a single spacesAuditor record from the query","."),(0,o.kt)("h3",{id:"func-spacesauditorquery-reload"},"func ","(","spacesAuditorQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesAuditorQuery) Reload(o *SpacesAuditor, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-spacesauditorquery-reloadall"},"func ","(","spacesAuditorQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesAuditorQuery) ReloadAll(o *SpacesAuditorSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-spacesauditorquery-setspace"},"func ","(","spacesAuditorQuery",")"," SetSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesAuditorQuery) SetSpace(o *SpacesAuditor, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Space) error\n")),(0,o.kt)("p",null,"SetSpace of the spacesAuditor to the related item","."," Sets o",".","R",".","Space to related","."," Adds o to related",".","R",".","SpacesAuditors","."),(0,o.kt)("h3",{id:"func-spacesauditorquery-setuser"},"func ","(","spacesAuditorQuery",")"," SetUser"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesAuditorQuery) SetUser(o *SpacesAuditor, ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error\n")),(0,o.kt)("p",null,"SetUser of the spacesAuditor to the related item","."," Sets o",".","R",".","User to related","."," Adds o to related",".","R",".","SpacesAuditors","."),(0,o.kt)("h3",{id:"func-spacesauditorquery-space"},"func ","(","spacesAuditorQuery",")"," Space"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesAuditorQuery) Space(o *SpacesAuditor, mods ...qm.QueryMod) spaceQuery\n")),(0,o.kt)("p",null,"Space pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-spacesauditorquery-update"},"func ","(","spacesAuditorQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesAuditorQuery) Update(o *SpacesAuditor, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the SpacesAuditor","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-spacesauditorquery-updateall"},"func ","(","spacesAuditorQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesAuditorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-spacesauditorquery-updateallslice"},"func ","(","spacesAuditorQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesAuditorQuery) UpdateAllSlice(o SpacesAuditorSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-spacesauditorquery-upsert"},"func ","(","spacesAuditorQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesAuditorQuery) Upsert(o *SpacesAuditor, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h3",{id:"func-spacesauditorquery-user"},"func ","(","spacesAuditorQuery",")"," User"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesAuditorQuery) User(o *SpacesAuditor, mods ...qm.QueryMod) userQuery\n")),(0,o.kt)("p",null,"User pointed to by the foreign key","."),(0,o.kt)("h2",{id:"type-spacesauditorr"},"type spacesAuditorR"),(0,o.kt)("p",null,"spacesAuditorR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type spacesAuditorR struct {\n    Space *Space `boil:"Space" json:"Space" toml:"Space" yaml:"Space"`\n    User  *User  `boil:"User" json:"User" toml:"User" yaml:"User"`\n}\n')),(0,o.kt)("h3",{id:"func-spacesauditorr-newstruct"},"func ","(","*","spacesAuditorR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*spacesAuditorR) NewStruct() *spacesAuditorR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-spacesdeveloperl"},"type spacesDeveloperL"),(0,o.kt)("p",null,"spacesDeveloperL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type spacesDeveloperL struct{}\n")),(0,o.kt)("h3",{id:"func-spacesdeveloperl-loadspace"},"func ","(","spacesDeveloperL",")"," LoadSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spacesDeveloperL) LoadSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpacesDeveloper interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSpace allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-spacesdeveloperl-loaduser"},"func ","(","spacesDeveloperL",")"," LoadUser"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spacesDeveloperL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpacesDeveloper interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadUser allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-spacesdeveloperquery"},"type spacesDeveloperQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type spacesDeveloperQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-spacesdevelopers"},"func SpacesDevelopers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func SpacesDevelopers(mods ...qm.QueryMod) spacesDeveloperQuery\n")),(0,o.kt)("p",null,"SpacesDevelopers retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-spacesdeveloperquery-all"},"func ","(","spacesDeveloperQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesDeveloperQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpacesDeveloperSlice, error)\n")),(0,o.kt)("p",null,"All returns all SpacesDeveloper records from the query","."),(0,o.kt)("h3",{id:"func-spacesdeveloperquery-count"},"func ","(","spacesDeveloperQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesDeveloperQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all SpacesDeveloper records in the query","."),(0,o.kt)("h3",{id:"func-spacesdeveloperquery-delete"},"func ","(","spacesDeveloperQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesDeveloperQuery) Delete(o *SpacesDeveloper, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single SpacesDeveloper record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-spacesdeveloperquery-deleteall"},"func ","(","spacesDeveloperQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesDeveloperQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-spacesdeveloperquery-deleteallslice"},"func ","(","spacesDeveloperQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesDeveloperQuery) DeleteAllSlice(o SpacesDeveloperSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-spacesdeveloperquery-exists"},"func ","(","spacesDeveloperQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesDeveloperQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-spacesdeveloperquery-insert"},"func ","(","spacesDeveloperQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesDeveloperQuery) Insert(o *SpacesDeveloper, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-spacesdeveloperquery-one"},"func ","(","spacesDeveloperQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesDeveloperQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SpacesDeveloper, error)\n")),(0,o.kt)("p",null,"One returns a single spacesDeveloper record from the query","."),(0,o.kt)("h3",{id:"func-spacesdeveloperquery-reload"},"func ","(","spacesDeveloperQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesDeveloperQuery) Reload(o *SpacesDeveloper, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-spacesdeveloperquery-reloadall"},"func ","(","spacesDeveloperQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesDeveloperQuery) ReloadAll(o *SpacesDeveloperSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-spacesdeveloperquery-setspace"},"func ","(","spacesDeveloperQuery",")"," SetSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesDeveloperQuery) SetSpace(o *SpacesDeveloper, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Space) error\n")),(0,o.kt)("p",null,"SetSpace of the spacesDeveloper to the related item","."," Sets o",".","R",".","Space to related","."," Adds o to related",".","R",".","SpacesDevelopers","."),(0,o.kt)("h3",{id:"func-spacesdeveloperquery-setuser"},"func ","(","spacesDeveloperQuery",")"," SetUser"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesDeveloperQuery) SetUser(o *SpacesDeveloper, ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error\n")),(0,o.kt)("p",null,"SetUser of the spacesDeveloper to the related item","."," Sets o",".","R",".","User to related","."," Adds o to related",".","R",".","SpacesDevelopers","."),(0,o.kt)("h3",{id:"func-spacesdeveloperquery-space"},"func ","(","spacesDeveloperQuery",")"," Space"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesDeveloperQuery) Space(o *SpacesDeveloper, mods ...qm.QueryMod) spaceQuery\n")),(0,o.kt)("p",null,"Space pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-spacesdeveloperquery-update"},"func ","(","spacesDeveloperQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesDeveloperQuery) Update(o *SpacesDeveloper, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the SpacesDeveloper","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-spacesdeveloperquery-updateall"},"func ","(","spacesDeveloperQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesDeveloperQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-spacesdeveloperquery-updateallslice"},"func ","(","spacesDeveloperQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesDeveloperQuery) UpdateAllSlice(o SpacesDeveloperSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-spacesdeveloperquery-upsert"},"func ","(","spacesDeveloperQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesDeveloperQuery) Upsert(o *SpacesDeveloper, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h3",{id:"func-spacesdeveloperquery-user"},"func ","(","spacesDeveloperQuery",")"," User"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesDeveloperQuery) User(o *SpacesDeveloper, mods ...qm.QueryMod) userQuery\n")),(0,o.kt)("p",null,"User pointed to by the foreign key","."),(0,o.kt)("h2",{id:"type-spacesdeveloperr"},"type spacesDeveloperR"),(0,o.kt)("p",null,"spacesDeveloperR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type spacesDeveloperR struct {\n    Space *Space `boil:"Space" json:"Space" toml:"Space" yaml:"Space"`\n    User  *User  `boil:"User" json:"User" toml:"User" yaml:"User"`\n}\n')),(0,o.kt)("h3",{id:"func-spacesdeveloperr-newstruct"},"func ","(","*","spacesDeveloperR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*spacesDeveloperR) NewStruct() *spacesDeveloperR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-spacesmanagerl"},"type spacesManagerL"),(0,o.kt)("p",null,"spacesManagerL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type spacesManagerL struct{}\n")),(0,o.kt)("h3",{id:"func-spacesmanagerl-loadspace"},"func ","(","spacesManagerL",")"," LoadSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spacesManagerL) LoadSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpacesManager interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSpace allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-spacesmanagerl-loaduser"},"func ","(","spacesManagerL",")"," LoadUser"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (spacesManagerL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpacesManager interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadUser allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-spacesmanagerquery"},"type spacesManagerQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type spacesManagerQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-spacesmanagers"},"func SpacesManagers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func SpacesManagers(mods ...qm.QueryMod) spacesManagerQuery\n")),(0,o.kt)("p",null,"SpacesManagers retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-spacesmanagerquery-all"},"func ","(","spacesManagerQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesManagerQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpacesManagerSlice, error)\n")),(0,o.kt)("p",null,"All returns all SpacesManager records from the query","."),(0,o.kt)("h3",{id:"func-spacesmanagerquery-count"},"func ","(","spacesManagerQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesManagerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all SpacesManager records in the query","."),(0,o.kt)("h3",{id:"func-spacesmanagerquery-delete"},"func ","(","spacesManagerQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesManagerQuery) Delete(o *SpacesManager, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single SpacesManager record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-spacesmanagerquery-deleteall"},"func ","(","spacesManagerQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesManagerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-spacesmanagerquery-deleteallslice"},"func ","(","spacesManagerQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesManagerQuery) DeleteAllSlice(o SpacesManagerSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-spacesmanagerquery-exists"},"func ","(","spacesManagerQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesManagerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-spacesmanagerquery-insert"},"func ","(","spacesManagerQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesManagerQuery) Insert(o *SpacesManager, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-spacesmanagerquery-one"},"func ","(","spacesManagerQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesManagerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SpacesManager, error)\n")),(0,o.kt)("p",null,"One returns a single spacesManager record from the query","."),(0,o.kt)("h3",{id:"func-spacesmanagerquery-reload"},"func ","(","spacesManagerQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesManagerQuery) Reload(o *SpacesManager, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-spacesmanagerquery-reloadall"},"func ","(","spacesManagerQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesManagerQuery) ReloadAll(o *SpacesManagerSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-spacesmanagerquery-setspace"},"func ","(","spacesManagerQuery",")"," SetSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesManagerQuery) SetSpace(o *SpacesManager, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Space) error\n")),(0,o.kt)("p",null,"SetSpace of the spacesManager to the related item","."," Sets o",".","R",".","Space to related","."," Adds o to related",".","R",".","SpacesManagers","."),(0,o.kt)("h3",{id:"func-spacesmanagerquery-setuser"},"func ","(","spacesManagerQuery",")"," SetUser"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesManagerQuery) SetUser(o *SpacesManager, ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error\n")),(0,o.kt)("p",null,"SetUser of the spacesManager to the related item","."," Sets o",".","R",".","User to related","."," Adds o to related",".","R",".","SpacesManagers","."),(0,o.kt)("h3",{id:"func-spacesmanagerquery-space"},"func ","(","spacesManagerQuery",")"," Space"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesManagerQuery) Space(o *SpacesManager, mods ...qm.QueryMod) spaceQuery\n")),(0,o.kt)("p",null,"Space pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-spacesmanagerquery-update"},"func ","(","spacesManagerQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesManagerQuery) Update(o *SpacesManager, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the SpacesManager","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-spacesmanagerquery-updateall"},"func ","(","spacesManagerQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesManagerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-spacesmanagerquery-updateallslice"},"func ","(","spacesManagerQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesManagerQuery) UpdateAllSlice(o SpacesManagerSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-spacesmanagerquery-upsert"},"func ","(","spacesManagerQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesManagerQuery) Upsert(o *SpacesManager, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h3",{id:"func-spacesmanagerquery-user"},"func ","(","spacesManagerQuery",")"," User"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q spacesManagerQuery) User(o *SpacesManager, mods ...qm.QueryMod) userQuery\n")),(0,o.kt)("p",null,"User pointed to by the foreign key","."),(0,o.kt)("h2",{id:"type-spacesmanagerr"},"type spacesManagerR"),(0,o.kt)("p",null,"spacesManagerR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type spacesManagerR struct {\n    Space *Space `boil:"Space" json:"Space" toml:"Space" yaml:"Space"`\n    User  *User  `boil:"User" json:"User" toml:"User" yaml:"User"`\n}\n')),(0,o.kt)("h3",{id:"func-spacesmanagerr-newstruct"},"func ","(","*","spacesManagerR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*spacesManagerR) NewStruct() *spacesManagerR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-stackannotationl"},"type stackAnnotationL"),(0,o.kt)("p",null,"stackAnnotationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type stackAnnotationL struct{}\n")),(0,o.kt)("h3",{id:"func-stackannotationl-loadresource"},"func ","(","stackAnnotationL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (stackAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStackAnnotation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-stackannotationquery"},"type stackAnnotationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type stackAnnotationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-stackannotations"},"func StackAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func StackAnnotations(mods ...qm.QueryMod) stackAnnotationQuery\n")),(0,o.kt)("p",null,"StackAnnotations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-stackannotationquery-all"},"func ","(","stackAnnotationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (StackAnnotationSlice, error)\n")),(0,o.kt)("p",null,"All returns all StackAnnotation records from the query","."),(0,o.kt)("h3",{id:"func-stackannotationquery-count"},"func ","(","stackAnnotationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all StackAnnotation records in the query","."),(0,o.kt)("h3",{id:"func-stackannotationquery-delete"},"func ","(","stackAnnotationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackAnnotationQuery) Delete(o *StackAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single StackAnnotation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-stackannotationquery-deleteall"},"func ","(","stackAnnotationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-stackannotationquery-deleteallslice"},"func ","(","stackAnnotationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackAnnotationQuery) DeleteAllSlice(o StackAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-stackannotationquery-exists"},"func ","(","stackAnnotationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-stackannotationquery-insert"},"func ","(","stackAnnotationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackAnnotationQuery) Insert(o *StackAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-stackannotationquery-one"},"func ","(","stackAnnotationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StackAnnotation, error)\n")),(0,o.kt)("p",null,"One returns a single stackAnnotation record from the query","."),(0,o.kt)("h3",{id:"func-stackannotationquery-reload"},"func ","(","stackAnnotationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackAnnotationQuery) Reload(o *StackAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-stackannotationquery-reloadall"},"func ","(","stackAnnotationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackAnnotationQuery) ReloadAll(o *StackAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-stackannotationquery-removeresource"},"func ","(","stackAnnotationQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackAnnotationQuery) RemoveResource(o *StackAnnotation, ctx context.Context, exec boil.ContextExecutor, related *Stack) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-stackannotationquery-resource"},"func ","(","stackAnnotationQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackAnnotationQuery) Resource(o *StackAnnotation, mods ...qm.QueryMod) stackQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-stackannotationquery-setresource"},"func ","(","stackAnnotationQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackAnnotationQuery) SetResource(o *StackAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Stack) error\n")),(0,o.kt)("p",null,"SetResource of the stackAnnotation to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceStackAnnotations","."),(0,o.kt)("h3",{id:"func-stackannotationquery-update"},"func ","(","stackAnnotationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackAnnotationQuery) Update(o *StackAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the StackAnnotation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-stackannotationquery-updateall"},"func ","(","stackAnnotationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-stackannotationquery-updateallslice"},"func ","(","stackAnnotationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackAnnotationQuery) UpdateAllSlice(o StackAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-stackannotationquery-upsert"},"func ","(","stackAnnotationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackAnnotationQuery) Upsert(o *StackAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-stackannotationr"},"type stackAnnotationR"),(0,o.kt)("p",null,"stackAnnotationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type stackAnnotationR struct {\n    Resource *Stack `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-stackannotationr-newstruct"},"func ","(","*","stackAnnotationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*stackAnnotationR) NewStruct() *stackAnnotationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-stackl"},"type stackL"),(0,o.kt)("p",null,"stackL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type stackL struct{}\n")),(0,o.kt)("h3",{id:"func-stackl-loadresourcestackannotations"},"func ","(","stackL",")"," LoadResourceStackAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (stackL) LoadResourceStackAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStack interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceStackAnnotations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-stackl-loadresourcestacklabels"},"func ","(","stackL",")"," LoadResourceStackLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (stackL) LoadResourceStackLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStack interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceStackLabels allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-stacklabell"},"type stackLabelL"),(0,o.kt)("p",null,"stackLabelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type stackLabelL struct{}\n")),(0,o.kt)("h3",{id:"func-stacklabell-loadresource"},"func ","(","stackLabelL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (stackLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStackLabel interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-stacklabelquery"},"type stackLabelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type stackLabelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-stacklabels"},"func StackLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func StackLabels(mods ...qm.QueryMod) stackLabelQuery\n")),(0,o.kt)("p",null,"StackLabels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-stacklabelquery-all"},"func ","(","stackLabelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (StackLabelSlice, error)\n")),(0,o.kt)("p",null,"All returns all StackLabel records from the query","."),(0,o.kt)("h3",{id:"func-stacklabelquery-count"},"func ","(","stackLabelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all StackLabel records in the query","."),(0,o.kt)("h3",{id:"func-stacklabelquery-delete"},"func ","(","stackLabelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackLabelQuery) Delete(o *StackLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single StackLabel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-stacklabelquery-deleteall"},"func ","(","stackLabelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-stacklabelquery-deleteallslice"},"func ","(","stackLabelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackLabelQuery) DeleteAllSlice(o StackLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-stacklabelquery-exists"},"func ","(","stackLabelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-stacklabelquery-insert"},"func ","(","stackLabelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackLabelQuery) Insert(o *StackLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-stacklabelquery-one"},"func ","(","stackLabelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StackLabel, error)\n")),(0,o.kt)("p",null,"One returns a single stackLabel record from the query","."),(0,o.kt)("h3",{id:"func-stacklabelquery-reload"},"func ","(","stackLabelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackLabelQuery) Reload(o *StackLabel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-stacklabelquery-reloadall"},"func ","(","stackLabelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackLabelQuery) ReloadAll(o *StackLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-stacklabelquery-removeresource"},"func ","(","stackLabelQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackLabelQuery) RemoveResource(o *StackLabel, ctx context.Context, exec boil.ContextExecutor, related *Stack) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-stacklabelquery-resource"},"func ","(","stackLabelQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackLabelQuery) Resource(o *StackLabel, mods ...qm.QueryMod) stackQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-stacklabelquery-setresource"},"func ","(","stackLabelQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackLabelQuery) SetResource(o *StackLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Stack) error\n")),(0,o.kt)("p",null,"SetResource of the stackLabel to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceStackLabels","."),(0,o.kt)("h3",{id:"func-stacklabelquery-update"},"func ","(","stackLabelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackLabelQuery) Update(o *StackLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the StackLabel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-stacklabelquery-updateall"},"func ","(","stackLabelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-stacklabelquery-updateallslice"},"func ","(","stackLabelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackLabelQuery) UpdateAllSlice(o StackLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-stacklabelquery-upsert"},"func ","(","stackLabelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackLabelQuery) Upsert(o *StackLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-stacklabelr"},"type stackLabelR"),(0,o.kt)("p",null,"stackLabelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type stackLabelR struct {\n    Resource *Stack `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-stacklabelr-newstruct"},"func ","(","*","stackLabelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*stackLabelR) NewStruct() *stackLabelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-stackquery"},"type stackQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type stackQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-stacks"},"func Stacks"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func Stacks(mods ...qm.QueryMod) stackQuery\n")),(0,o.kt)("p",null,"Stacks retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-stackquery-addresourcestackannotations"},"func ","(","stackQuery",")"," AddResourceStackAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackQuery) AddResourceStackAnnotations(o *Stack, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StackAnnotation) error\n")),(0,o.kt)("p",null,"AddResourceStackAnnotations adds the given related objects to the existing relationships of the stack\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceStackAnnotations","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-stackquery-addresourcestacklabels"},"func ","(","stackQuery",")"," AddResourceStackLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackQuery) AddResourceStackLabels(o *Stack, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StackLabel) error\n")),(0,o.kt)("p",null,"AddResourceStackLabels adds the given related objects to the existing relationships of the stack\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceStackLabels","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-stackquery-all"},"func ","(","stackQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackQuery) All(ctx context.Context, exec boil.ContextExecutor) (StackSlice, error)\n")),(0,o.kt)("p",null,"All returns all Stack records from the query","."),(0,o.kt)("h3",{id:"func-stackquery-count"},"func ","(","stackQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all Stack records in the query","."),(0,o.kt)("h3",{id:"func-stackquery-delete"},"func ","(","stackQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackQuery) Delete(o *Stack, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single Stack record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-stackquery-deleteall"},"func ","(","stackQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-stackquery-deleteallslice"},"func ","(","stackQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackQuery) DeleteAllSlice(o StackSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-stackquery-exists"},"func ","(","stackQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-stackquery-insert"},"func ","(","stackQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackQuery) Insert(o *Stack, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-stackquery-one"},"func ","(","stackQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Stack, error)\n")),(0,o.kt)("p",null,"One returns a single stack record from the query","."),(0,o.kt)("h3",{id:"func-stackquery-reload"},"func ","(","stackQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackQuery) Reload(o *Stack, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-stackquery-reloadall"},"func ","(","stackQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackQuery) ReloadAll(o *StackSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-stackquery-removeresourcestackannotations"},"func ","(","stackQuery",")"," RemoveResourceStackAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackQuery) RemoveResourceStackAnnotations(o *Stack, ctx context.Context, exec boil.ContextExecutor, related ...*StackAnnotation) error\n")),(0,o.kt)("p",null,"RemoveResourceStackAnnotations relationships from objects passed in","."," Removes related items from R",".","ResourceStackAnnotations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-stackquery-removeresourcestacklabels"},"func ","(","stackQuery",")"," RemoveResourceStackLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackQuery) RemoveResourceStackLabels(o *Stack, ctx context.Context, exec boil.ContextExecutor, related ...*StackLabel) error\n")),(0,o.kt)("p",null,"RemoveResourceStackLabels relationships from objects passed in","."," Removes related items from R",".","ResourceStackLabels ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-stackquery-resourcestackannotations"},"func ","(","stackQuery",")"," ResourceStackAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackQuery) ResourceStackAnnotations(o *Stack, mods ...qm.QueryMod) stackAnnotationQuery\n")),(0,o.kt)("p",null,"ResourceStackAnnotations retrieves all the stack","_","annotation's StackAnnotations with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-stackquery-resourcestacklabels"},"func ","(","stackQuery",")"," ResourceStackLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackQuery) ResourceStackLabels(o *Stack, mods ...qm.QueryMod) stackLabelQuery\n")),(0,o.kt)("p",null,"ResourceStackLabels retrieves all the stack","_","label's StackLabels with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-stackquery-setresourcestackannotations"},"func ","(","stackQuery",")"," SetResourceStackAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackQuery) SetResourceStackAnnotations(o *Stack, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StackAnnotation) error\n")),(0,o.kt)("p",null,"SetResourceStackAnnotations removes all previously related items of the stack replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceStackAnnotations accordingly","."," Replaces o",".","R",".","ResourceStackAnnotations with related","."," Sets related",".","R",".","Resource's ResourceStackAnnotations accordingly","."),(0,o.kt)("h3",{id:"func-stackquery-setresourcestacklabels"},"func ","(","stackQuery",")"," SetResourceStackLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackQuery) SetResourceStackLabels(o *Stack, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StackLabel) error\n")),(0,o.kt)("p",null,"SetResourceStackLabels removes all previously related items of the stack replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceStackLabels accordingly","."," Replaces o",".","R",".","ResourceStackLabels with related","."," Sets related",".","R",".","Resource's ResourceStackLabels accordingly","."),(0,o.kt)("h3",{id:"func-stackquery-update"},"func ","(","stackQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackQuery) Update(o *Stack, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the Stack","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-stackquery-updateall"},"func ","(","stackQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-stackquery-updateallslice"},"func ","(","stackQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackQuery) UpdateAllSlice(o StackSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-stackquery-upsert"},"func ","(","stackQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stackQuery) Upsert(o *Stack, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-stackr"},"type stackR"),(0,o.kt)("p",null,"stackR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type stackR struct {\n    ResourceStackAnnotations StackAnnotationSlice `boil:"ResourceStackAnnotations" json:"ResourceStackAnnotations" toml:"ResourceStackAnnotations" yaml:"ResourceStackAnnotations"`\n    ResourceStackLabels      StackLabelSlice      `boil:"ResourceStackLabels" json:"ResourceStackLabels" toml:"ResourceStackLabels" yaml:"ResourceStackLabels"`\n}\n')),(0,o.kt)("h3",{id:"func-stackr-newstruct"},"func ","(","*","stackR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*stackR) NewStruct() *stackR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-stagingsecuritygroupsspacel"},"type stagingSecurityGroupsSpaceL"),(0,o.kt)("p",null,"stagingSecurityGroupsSpaceL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type stagingSecurityGroupsSpaceL struct{}\n")),(0,o.kt)("h3",{id:"func-stagingsecuritygroupsspacel-loadstagingsecuritygroup"},"func ","(","stagingSecurityGroupsSpaceL",")"," LoadStagingSecurityGroup"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (stagingSecurityGroupsSpaceL) LoadStagingSecurityGroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStagingSecurityGroupsSpace interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadStagingSecurityGroup allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-stagingsecuritygroupsspacel-loadstagingspace"},"func ","(","stagingSecurityGroupsSpaceL",")"," LoadStagingSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (stagingSecurityGroupsSpaceL) LoadStagingSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStagingSecurityGroupsSpace interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadStagingSpace allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-stagingsecuritygroupsspacequery"},"type stagingSecurityGroupsSpaceQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type stagingSecurityGroupsSpaceQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-stagingsecuritygroupsspaces"},"func StagingSecurityGroupsSpaces"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func StagingSecurityGroupsSpaces(mods ...qm.QueryMod) stagingSecurityGroupsSpaceQuery\n")),(0,o.kt)("p",null,"StagingSecurityGroupsSpaces retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-stagingsecuritygroupsspacequery-all"},"func ","(","stagingSecurityGroupsSpaceQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stagingSecurityGroupsSpaceQuery) All(ctx context.Context, exec boil.ContextExecutor) (StagingSecurityGroupsSpaceSlice, error)\n")),(0,o.kt)("p",null,"All returns all StagingSecurityGroupsSpace records from the query","."),(0,o.kt)("h3",{id:"func-stagingsecuritygroupsspacequery-count"},"func ","(","stagingSecurityGroupsSpaceQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stagingSecurityGroupsSpaceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all StagingSecurityGroupsSpace records in the query","."),(0,o.kt)("h3",{id:"func-stagingsecuritygroupsspacequery-delete"},"func ","(","stagingSecurityGroupsSpaceQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stagingSecurityGroupsSpaceQuery) Delete(o *StagingSecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single StagingSecurityGroupsSpace record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-stagingsecuritygroupsspacequery-deleteall"},"func ","(","stagingSecurityGroupsSpaceQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stagingSecurityGroupsSpaceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-stagingsecuritygroupsspacequery-deleteallslice"},"func ","(","stagingSecurityGroupsSpaceQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stagingSecurityGroupsSpaceQuery) DeleteAllSlice(o StagingSecurityGroupsSpaceSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-stagingsecuritygroupsspacequery-exists"},"func ","(","stagingSecurityGroupsSpaceQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stagingSecurityGroupsSpaceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-stagingsecuritygroupsspacequery-insert"},"func ","(","stagingSecurityGroupsSpaceQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stagingSecurityGroupsSpaceQuery) Insert(o *StagingSecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-stagingsecuritygroupsspacequery-one"},"func ","(","stagingSecurityGroupsSpaceQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stagingSecurityGroupsSpaceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StagingSecurityGroupsSpace, error)\n")),(0,o.kt)("p",null,"One returns a single stagingSecurityGroupsSpace record from the query","."),(0,o.kt)("h3",{id:"func-stagingsecuritygroupsspacequery-reload"},"func ","(","stagingSecurityGroupsSpaceQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stagingSecurityGroupsSpaceQuery) Reload(o *StagingSecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-stagingsecuritygroupsspacequery-reloadall"},"func ","(","stagingSecurityGroupsSpaceQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stagingSecurityGroupsSpaceQuery) ReloadAll(o *StagingSecurityGroupsSpaceSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-stagingsecuritygroupsspacequery-setstagingsecuritygroup"},"func ","(","stagingSecurityGroupsSpaceQuery",")"," SetStagingSecurityGroup"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stagingSecurityGroupsSpaceQuery) SetStagingSecurityGroup(o *StagingSecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, insert bool, related *SecurityGroup) error\n")),(0,o.kt)("p",null,"SetStagingSecurityGroup of the stagingSecurityGroupsSpace to the related item","."," Sets o",".","R",".","StagingSecurityGroup to related","."," Adds o to related",".","R",".","StagingSecurityGroupStagingSecurityGroupsSpaces","."),(0,o.kt)("h3",{id:"func-stagingsecuritygroupsspacequery-setstagingspace"},"func ","(","stagingSecurityGroupsSpaceQuery",")"," SetStagingSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stagingSecurityGroupsSpaceQuery) SetStagingSpace(o *StagingSecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Space) error\n")),(0,o.kt)("p",null,"SetStagingSpace of the stagingSecurityGroupsSpace to the related item","."," Sets o",".","R",".","StagingSpace to related","."," Adds o to related",".","R",".","StagingSpaceStagingSecurityGroupsSpaces","."),(0,o.kt)("h3",{id:"func-stagingsecuritygroupsspacequery-stagingsecuritygroup"},"func ","(","stagingSecurityGroupsSpaceQuery",")"," StagingSecurityGroup"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stagingSecurityGroupsSpaceQuery) StagingSecurityGroup(o *StagingSecurityGroupsSpace, mods ...qm.QueryMod) securityGroupQuery\n")),(0,o.kt)("p",null,"StagingSecurityGroup pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-stagingsecuritygroupsspacequery-stagingspace"},"func ","(","stagingSecurityGroupsSpaceQuery",")"," StagingSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stagingSecurityGroupsSpaceQuery) StagingSpace(o *StagingSecurityGroupsSpace, mods ...qm.QueryMod) spaceQuery\n")),(0,o.kt)("p",null,"StagingSpace pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-stagingsecuritygroupsspacequery-update"},"func ","(","stagingSecurityGroupsSpaceQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stagingSecurityGroupsSpaceQuery) Update(o *StagingSecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the StagingSecurityGroupsSpace","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-stagingsecuritygroupsspacequery-updateall"},"func ","(","stagingSecurityGroupsSpaceQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stagingSecurityGroupsSpaceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-stagingsecuritygroupsspacequery-updateallslice"},"func ","(","stagingSecurityGroupsSpaceQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stagingSecurityGroupsSpaceQuery) UpdateAllSlice(o StagingSecurityGroupsSpaceSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-stagingsecuritygroupsspacequery-upsert"},"func ","(","stagingSecurityGroupsSpaceQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q stagingSecurityGroupsSpaceQuery) Upsert(o *StagingSecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-stagingsecuritygroupsspacer"},"type stagingSecurityGroupsSpaceR"),(0,o.kt)("p",null,"stagingSecurityGroupsSpaceR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type stagingSecurityGroupsSpaceR struct {\n    StagingSecurityGroup *SecurityGroup `boil:"StagingSecurityGroup" json:"StagingSecurityGroup" toml:"StagingSecurityGroup" yaml:"StagingSecurityGroup"`\n    StagingSpace         *Space         `boil:"StagingSpace" json:"StagingSpace" toml:"StagingSpace" yaml:"StagingSpace"`\n}\n')),(0,o.kt)("h3",{id:"func-stagingsecuritygroupsspacer-newstruct"},"func ","(","*","stagingSecurityGroupsSpaceR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*stagingSecurityGroupsSpaceR) NewStruct() *stagingSecurityGroupsSpaceR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-taskannotationl"},"type taskAnnotationL"),(0,o.kt)("p",null,"taskAnnotationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type taskAnnotationL struct{}\n")),(0,o.kt)("h3",{id:"func-taskannotationl-loadresource"},"func ","(","taskAnnotationL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (taskAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTaskAnnotation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-taskannotationquery"},"type taskAnnotationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type taskAnnotationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-taskannotations"},"func TaskAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func TaskAnnotations(mods ...qm.QueryMod) taskAnnotationQuery\n")),(0,o.kt)("p",null,"TaskAnnotations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-taskannotationquery-all"},"func ","(","taskAnnotationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (TaskAnnotationSlice, error)\n")),(0,o.kt)("p",null,"All returns all TaskAnnotation records from the query","."),(0,o.kt)("h3",{id:"func-taskannotationquery-count"},"func ","(","taskAnnotationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all TaskAnnotation records in the query","."),(0,o.kt)("h3",{id:"func-taskannotationquery-delete"},"func ","(","taskAnnotationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskAnnotationQuery) Delete(o *TaskAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single TaskAnnotation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-taskannotationquery-deleteall"},"func ","(","taskAnnotationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-taskannotationquery-deleteallslice"},"func ","(","taskAnnotationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskAnnotationQuery) DeleteAllSlice(o TaskAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-taskannotationquery-exists"},"func ","(","taskAnnotationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-taskannotationquery-insert"},"func ","(","taskAnnotationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskAnnotationQuery) Insert(o *TaskAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-taskannotationquery-one"},"func ","(","taskAnnotationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TaskAnnotation, error)\n")),(0,o.kt)("p",null,"One returns a single taskAnnotation record from the query","."),(0,o.kt)("h3",{id:"func-taskannotationquery-reload"},"func ","(","taskAnnotationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskAnnotationQuery) Reload(o *TaskAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-taskannotationquery-reloadall"},"func ","(","taskAnnotationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskAnnotationQuery) ReloadAll(o *TaskAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-taskannotationquery-removeresource"},"func ","(","taskAnnotationQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskAnnotationQuery) RemoveResource(o *TaskAnnotation, ctx context.Context, exec boil.ContextExecutor, related *Task) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-taskannotationquery-resource"},"func ","(","taskAnnotationQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskAnnotationQuery) Resource(o *TaskAnnotation, mods ...qm.QueryMod) taskQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-taskannotationquery-setresource"},"func ","(","taskAnnotationQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskAnnotationQuery) SetResource(o *TaskAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Task) error\n")),(0,o.kt)("p",null,"SetResource of the taskAnnotation to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceTaskAnnotations","."),(0,o.kt)("h3",{id:"func-taskannotationquery-update"},"func ","(","taskAnnotationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskAnnotationQuery) Update(o *TaskAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the TaskAnnotation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-taskannotationquery-updateall"},"func ","(","taskAnnotationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-taskannotationquery-updateallslice"},"func ","(","taskAnnotationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskAnnotationQuery) UpdateAllSlice(o TaskAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-taskannotationquery-upsert"},"func ","(","taskAnnotationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskAnnotationQuery) Upsert(o *TaskAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-taskannotationr"},"type taskAnnotationR"),(0,o.kt)("p",null,"taskAnnotationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type taskAnnotationR struct {\n    Resource *Task `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-taskannotationr-newstruct"},"func ","(","*","taskAnnotationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*taskAnnotationR) NewStruct() *taskAnnotationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-taskl"},"type taskL"),(0,o.kt)("p",null,"taskL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type taskL struct{}\n")),(0,o.kt)("h3",{id:"func-taskl-loadapp"},"func ","(","taskL",")"," LoadApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (taskL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTask interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadApp allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-taskl-loadresourcetaskannotations"},"func ","(","taskL",")"," LoadResourceTaskAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (taskL) LoadResourceTaskAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTask interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceTaskAnnotations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-taskl-loadresourcetasklabels"},"func ","(","taskL",")"," LoadResourceTaskLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (taskL) LoadResourceTaskLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTask interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceTaskLabels allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-tasklabell"},"type taskLabelL"),(0,o.kt)("p",null,"taskLabelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type taskLabelL struct{}\n")),(0,o.kt)("h3",{id:"func-tasklabell-loadresource"},"func ","(","taskLabelL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (taskLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTaskLabel interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-tasklabelquery"},"type taskLabelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type taskLabelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-tasklabels"},"func TaskLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func TaskLabels(mods ...qm.QueryMod) taskLabelQuery\n")),(0,o.kt)("p",null,"TaskLabels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-tasklabelquery-all"},"func ","(","taskLabelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (TaskLabelSlice, error)\n")),(0,o.kt)("p",null,"All returns all TaskLabel records from the query","."),(0,o.kt)("h3",{id:"func-tasklabelquery-count"},"func ","(","taskLabelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all TaskLabel records in the query","."),(0,o.kt)("h3",{id:"func-tasklabelquery-delete"},"func ","(","taskLabelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskLabelQuery) Delete(o *TaskLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single TaskLabel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-tasklabelquery-deleteall"},"func ","(","taskLabelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-tasklabelquery-deleteallslice"},"func ","(","taskLabelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskLabelQuery) DeleteAllSlice(o TaskLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-tasklabelquery-exists"},"func ","(","taskLabelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-tasklabelquery-insert"},"func ","(","taskLabelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskLabelQuery) Insert(o *TaskLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-tasklabelquery-one"},"func ","(","taskLabelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TaskLabel, error)\n")),(0,o.kt)("p",null,"One returns a single taskLabel record from the query","."),(0,o.kt)("h3",{id:"func-tasklabelquery-reload"},"func ","(","taskLabelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskLabelQuery) Reload(o *TaskLabel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-tasklabelquery-reloadall"},"func ","(","taskLabelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskLabelQuery) ReloadAll(o *TaskLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-tasklabelquery-removeresource"},"func ","(","taskLabelQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskLabelQuery) RemoveResource(o *TaskLabel, ctx context.Context, exec boil.ContextExecutor, related *Task) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-tasklabelquery-resource"},"func ","(","taskLabelQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskLabelQuery) Resource(o *TaskLabel, mods ...qm.QueryMod) taskQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-tasklabelquery-setresource"},"func ","(","taskLabelQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskLabelQuery) SetResource(o *TaskLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Task) error\n")),(0,o.kt)("p",null,"SetResource of the taskLabel to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceTaskLabels","."),(0,o.kt)("h3",{id:"func-tasklabelquery-update"},"func ","(","taskLabelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskLabelQuery) Update(o *TaskLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the TaskLabel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-tasklabelquery-updateall"},"func ","(","taskLabelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-tasklabelquery-updateallslice"},"func ","(","taskLabelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskLabelQuery) UpdateAllSlice(o TaskLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-tasklabelquery-upsert"},"func ","(","taskLabelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskLabelQuery) Upsert(o *TaskLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-tasklabelr"},"type taskLabelR"),(0,o.kt)("p",null,"taskLabelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type taskLabelR struct {\n    Resource *Task `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-tasklabelr-newstruct"},"func ","(","*","taskLabelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*taskLabelR) NewStruct() *taskLabelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-taskquery"},"type taskQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type taskQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-tasks"},"func Tasks"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func Tasks(mods ...qm.QueryMod) taskQuery\n")),(0,o.kt)("p",null,"Tasks retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-taskquery-addresourcetaskannotations"},"func ","(","taskQuery",")"," AddResourceTaskAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskQuery) AddResourceTaskAnnotations(o *Task, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaskAnnotation) error\n")),(0,o.kt)("p",null,"AddResourceTaskAnnotations adds the given related objects to the existing relationships of the task\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceTaskAnnotations","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-taskquery-addresourcetasklabels"},"func ","(","taskQuery",")"," AddResourceTaskLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskQuery) AddResourceTaskLabels(o *Task, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaskLabel) error\n")),(0,o.kt)("p",null,"AddResourceTaskLabels adds the given related objects to the existing relationships of the task\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceTaskLabels","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-taskquery-all"},"func ","(","taskQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskQuery) All(ctx context.Context, exec boil.ContextExecutor) (TaskSlice, error)\n")),(0,o.kt)("p",null,"All returns all Task records from the query","."),(0,o.kt)("h3",{id:"func-taskquery-app"},"func ","(","taskQuery",")"," App"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskQuery) App(o *Task, mods ...qm.QueryMod) appQuery\n")),(0,o.kt)("p",null,"App pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-taskquery-count"},"func ","(","taskQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all Task records in the query","."),(0,o.kt)("h3",{id:"func-taskquery-delete"},"func ","(","taskQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskQuery) Delete(o *Task, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single Task record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-taskquery-deleteall"},"func ","(","taskQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-taskquery-deleteallslice"},"func ","(","taskQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskQuery) DeleteAllSlice(o TaskSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-taskquery-exists"},"func ","(","taskQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-taskquery-insert"},"func ","(","taskQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskQuery) Insert(o *Task, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-taskquery-one"},"func ","(","taskQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Task, error)\n")),(0,o.kt)("p",null,"One returns a single task record from the query","."),(0,o.kt)("h3",{id:"func-taskquery-reload"},"func ","(","taskQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskQuery) Reload(o *Task, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-taskquery-reloadall"},"func ","(","taskQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskQuery) ReloadAll(o *TaskSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-taskquery-removeresourcetaskannotations"},"func ","(","taskQuery",")"," RemoveResourceTaskAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskQuery) RemoveResourceTaskAnnotations(o *Task, ctx context.Context, exec boil.ContextExecutor, related ...*TaskAnnotation) error\n")),(0,o.kt)("p",null,"RemoveResourceTaskAnnotations relationships from objects passed in","."," Removes related items from R",".","ResourceTaskAnnotations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-taskquery-removeresourcetasklabels"},"func ","(","taskQuery",")"," RemoveResourceTaskLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskQuery) RemoveResourceTaskLabels(o *Task, ctx context.Context, exec boil.ContextExecutor, related ...*TaskLabel) error\n")),(0,o.kt)("p",null,"RemoveResourceTaskLabels relationships from objects passed in","."," Removes related items from R",".","ResourceTaskLabels ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-taskquery-resourcetaskannotations"},"func ","(","taskQuery",")"," ResourceTaskAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskQuery) ResourceTaskAnnotations(o *Task, mods ...qm.QueryMod) taskAnnotationQuery\n")),(0,o.kt)("p",null,"ResourceTaskAnnotations retrieves all the task","_","annotation's TaskAnnotations with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-taskquery-resourcetasklabels"},"func ","(","taskQuery",")"," ResourceTaskLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskQuery) ResourceTaskLabels(o *Task, mods ...qm.QueryMod) taskLabelQuery\n")),(0,o.kt)("p",null,"ResourceTaskLabels retrieves all the task","_","label's TaskLabels with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-taskquery-setapp"},"func ","(","taskQuery",")"," SetApp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskQuery) SetApp(o *Task, ctx context.Context, exec boil.ContextExecutor, insert bool, related *App) error\n")),(0,o.kt)("p",null,"SetApp of the task to the related item","."," Sets o",".","R",".","App to related","."," Adds o to related",".","R",".","Tasks","."),(0,o.kt)("h3",{id:"func-taskquery-setresourcetaskannotations"},"func ","(","taskQuery",")"," SetResourceTaskAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskQuery) SetResourceTaskAnnotations(o *Task, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaskAnnotation) error\n")),(0,o.kt)("p",null,"SetResourceTaskAnnotations removes all previously related items of the task replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceTaskAnnotations accordingly","."," Replaces o",".","R",".","ResourceTaskAnnotations with related","."," Sets related",".","R",".","Resource's ResourceTaskAnnotations accordingly","."),(0,o.kt)("h3",{id:"func-taskquery-setresourcetasklabels"},"func ","(","taskQuery",")"," SetResourceTaskLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskQuery) SetResourceTaskLabels(o *Task, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TaskLabel) error\n")),(0,o.kt)("p",null,"SetResourceTaskLabels removes all previously related items of the task replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceTaskLabels accordingly","."," Replaces o",".","R",".","ResourceTaskLabels with related","."," Sets related",".","R",".","Resource's ResourceTaskLabels accordingly","."),(0,o.kt)("h3",{id:"func-taskquery-update"},"func ","(","taskQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskQuery) Update(o *Task, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the Task","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-taskquery-updateall"},"func ","(","taskQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-taskquery-updateallslice"},"func ","(","taskQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskQuery) UpdateAllSlice(o TaskSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-taskquery-upsert"},"func ","(","taskQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q taskQuery) Upsert(o *Task, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-taskr"},"type taskR"),(0,o.kt)("p",null,"taskR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type taskR struct {\n    App                     *App                `boil:"App" json:"App" toml:"App" yaml:"App"`\n    ResourceTaskAnnotations TaskAnnotationSlice `boil:"ResourceTaskAnnotations" json:"ResourceTaskAnnotations" toml:"ResourceTaskAnnotations" yaml:"ResourceTaskAnnotations"`\n    ResourceTaskLabels      TaskLabelSlice      `boil:"ResourceTaskLabels" json:"ResourceTaskLabels" toml:"ResourceTaskLabels" yaml:"ResourceTaskLabels"`\n}\n')),(0,o.kt)("h3",{id:"func-taskr-newstruct"},"func ","(","*","taskR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*taskR) NewStruct() *taskR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-updatecache"},"type updateCache"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type updateCache struct {\n    query        string\n    valueMapping []uint64\n}\n")),(0,o.kt)("h2",{id:"type-userannotationl"},"type userAnnotationL"),(0,o.kt)("p",null,"userAnnotationL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type userAnnotationL struct{}\n")),(0,o.kt)("h3",{id:"func-userannotationl-loadresource"},"func ","(","userAnnotationL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (userAnnotationL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserAnnotation interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-userannotationquery"},"type userAnnotationQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type userAnnotationQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-userannotations"},"func UserAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func UserAnnotations(mods ...qm.QueryMod) userAnnotationQuery\n")),(0,o.kt)("p",null,"UserAnnotations retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-userannotationquery-all"},"func ","(","userAnnotationQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userAnnotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserAnnotationSlice, error)\n")),(0,o.kt)("p",null,"All returns all UserAnnotation records from the query","."),(0,o.kt)("h3",{id:"func-userannotationquery-count"},"func ","(","userAnnotationQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userAnnotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all UserAnnotation records in the query","."),(0,o.kt)("h3",{id:"func-userannotationquery-delete"},"func ","(","userAnnotationQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userAnnotationQuery) Delete(o *UserAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single UserAnnotation record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-userannotationquery-deleteall"},"func ","(","userAnnotationQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userAnnotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-userannotationquery-deleteallslice"},"func ","(","userAnnotationQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userAnnotationQuery) DeleteAllSlice(o UserAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-userannotationquery-exists"},"func ","(","userAnnotationQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userAnnotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-userannotationquery-insert"},"func ","(","userAnnotationQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userAnnotationQuery) Insert(o *UserAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-userannotationquery-one"},"func ","(","userAnnotationQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userAnnotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserAnnotation, error)\n")),(0,o.kt)("p",null,"One returns a single userAnnotation record from the query","."),(0,o.kt)("h3",{id:"func-userannotationquery-reload"},"func ","(","userAnnotationQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userAnnotationQuery) Reload(o *UserAnnotation, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-userannotationquery-reloadall"},"func ","(","userAnnotationQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userAnnotationQuery) ReloadAll(o *UserAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-userannotationquery-removeresource"},"func ","(","userAnnotationQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userAnnotationQuery) RemoveResource(o *UserAnnotation, ctx context.Context, exec boil.ContextExecutor, related *User) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-userannotationquery-resource"},"func ","(","userAnnotationQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userAnnotationQuery) Resource(o *UserAnnotation, mods ...qm.QueryMod) userQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-userannotationquery-setresource"},"func ","(","userAnnotationQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userAnnotationQuery) SetResource(o *UserAnnotation, ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error\n")),(0,o.kt)("p",null,"SetResource of the userAnnotation to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceUserAnnotations","."),(0,o.kt)("h3",{id:"func-userannotationquery-update"},"func ","(","userAnnotationQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userAnnotationQuery) Update(o *UserAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the UserAnnotation","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-userannotationquery-updateall"},"func ","(","userAnnotationQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userAnnotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-userannotationquery-updateallslice"},"func ","(","userAnnotationQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userAnnotationQuery) UpdateAllSlice(o UserAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-userannotationquery-upsert"},"func ","(","userAnnotationQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userAnnotationQuery) Upsert(o *UserAnnotation, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-userannotationr"},"type userAnnotationR"),(0,o.kt)("p",null,"userAnnotationR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type userAnnotationR struct {\n    Resource *User `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-userannotationr-newstruct"},"func ","(","*","userAnnotationR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*userAnnotationR) NewStruct() *userAnnotationR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-userl"},"type userL"),(0,o.kt)("p",null,"userL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type userL struct{}\n")),(0,o.kt)("h3",{id:"func-userl-loaddefaultspace"},"func ","(","userL",")"," LoadDefaultSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (userL) LoadDefaultSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadDefaultSpace allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h3",{id:"func-userl-loadorganizationsauditors"},"func ","(","userL",")"," LoadOrganizationsAuditors"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (userL) LoadOrganizationsAuditors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadOrganizationsAuditors allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-userl-loadorganizationsbillingmanagers"},"func ","(","userL",")"," LoadOrganizationsBillingManagers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (userL) LoadOrganizationsBillingManagers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadOrganizationsBillingManagers allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-userl-loadorganizationsmanagers"},"func ","(","userL",")"," LoadOrganizationsManagers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (userL) LoadOrganizationsManagers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadOrganizationsManagers allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-userl-loadorganizationsusers"},"func ","(","userL",")"," LoadOrganizationsUsers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (userL) LoadOrganizationsUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadOrganizationsUsers allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-userl-loadresourceuserannotations"},"func ","(","userL",")"," LoadResourceUserAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (userL) LoadResourceUserAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceUserAnnotations allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-userl-loadresourceuserlabels"},"func ","(","userL",")"," LoadResourceUserLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (userL) LoadResourceUserLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResourceUserLabels allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-userl-loadspacesapplicationsupporters"},"func ","(","userL",")"," LoadSpacesApplicationSupporters"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (userL) LoadSpacesApplicationSupporters(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSpacesApplicationSupporters allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-userl-loadspacesauditors"},"func ","(","userL",")"," LoadSpacesAuditors"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (userL) LoadSpacesAuditors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSpacesAuditors allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-userl-loadspacesdevelopers"},"func ","(","userL",")"," LoadSpacesDevelopers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (userL) LoadSpacesDevelopers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSpacesDevelopers allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h3",{id:"func-userl-loadspacesmanagers"},"func ","(","userL",")"," LoadSpacesManagers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (userL) LoadSpacesManagers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadSpacesManagers allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for a 1","-","M or N","-","M relationship","."),(0,o.kt)("h2",{id:"type-userlabell"},"type userLabelL"),(0,o.kt)("p",null,"userLabelL is where Load methods for each relationship are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type userLabelL struct{}\n")),(0,o.kt)("h3",{id:"func-userlabell-loadresource"},"func ","(","userLabelL",")"," LoadResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (userLabelL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserLabel interface{}, mods queries.Applicator) error\n")),(0,o.kt)("p",null,"LoadResource allows an eager lookup of values\\, cached into the loaded structs of the objects","."," This is for an N","-","1 relationship","."),(0,o.kt)("h2",{id:"type-userlabelquery"},"type userLabelQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type userLabelQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-userlabels"},"func UserLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func UserLabels(mods ...qm.QueryMod) userLabelQuery\n")),(0,o.kt)("p",null,"UserLabels retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-userlabelquery-all"},"func ","(","userLabelQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userLabelQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserLabelSlice, error)\n")),(0,o.kt)("p",null,"All returns all UserLabel records from the query","."),(0,o.kt)("h3",{id:"func-userlabelquery-count"},"func ","(","userLabelQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userLabelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all UserLabel records in the query","."),(0,o.kt)("h3",{id:"func-userlabelquery-delete"},"func ","(","userLabelQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userLabelQuery) Delete(o *UserLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single UserLabel record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-userlabelquery-deleteall"},"func ","(","userLabelQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userLabelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-userlabelquery-deleteallslice"},"func ","(","userLabelQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userLabelQuery) DeleteAllSlice(o UserLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-userlabelquery-exists"},"func ","(","userLabelQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userLabelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-userlabelquery-insert"},"func ","(","userLabelQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userLabelQuery) Insert(o *UserLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-userlabelquery-one"},"func ","(","userLabelQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userLabelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserLabel, error)\n")),(0,o.kt)("p",null,"One returns a single userLabel record from the query","."),(0,o.kt)("h3",{id:"func-userlabelquery-reload"},"func ","(","userLabelQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userLabelQuery) Reload(o *UserLabel, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-userlabelquery-reloadall"},"func ","(","userLabelQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userLabelQuery) ReloadAll(o *UserLabelSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-userlabelquery-removeresource"},"func ","(","userLabelQuery",")"," RemoveResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userLabelQuery) RemoveResource(o *UserLabel, ctx context.Context, exec boil.ContextExecutor, related *User) error\n")),(0,o.kt)("p",null,"RemoveResource relationship","."," Sets o",".","R",".","Resource to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-userlabelquery-resource"},"func ","(","userLabelQuery",")"," Resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userLabelQuery) Resource(o *UserLabel, mods ...qm.QueryMod) userQuery\n")),(0,o.kt)("p",null,"Resource pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-userlabelquery-setresource"},"func ","(","userLabelQuery",")"," SetResource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userLabelQuery) SetResource(o *UserLabel, ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error\n")),(0,o.kt)("p",null,"SetResource of the userLabel to the related item","."," Sets o",".","R",".","Resource to related","."," Adds o to related",".","R",".","ResourceUserLabels","."),(0,o.kt)("h3",{id:"func-userlabelquery-update"},"func ","(","userLabelQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userLabelQuery) Update(o *UserLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the UserLabel","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-userlabelquery-updateall"},"func ","(","userLabelQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userLabelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-userlabelquery-updateallslice"},"func ","(","userLabelQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userLabelQuery) UpdateAllSlice(o UserLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-userlabelquery-upsert"},"func ","(","userLabelQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userLabelQuery) Upsert(o *UserLabel, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-userlabelr"},"type userLabelR"),(0,o.kt)("p",null,"userLabelR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type userLabelR struct {\n    Resource *User `boil:"Resource" json:"Resource" toml:"Resource" yaml:"Resource"`\n}\n')),(0,o.kt)("h3",{id:"func-userlabelr-newstruct"},"func ","(","*","userLabelR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*userLabelR) NewStruct() *userLabelR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-userquery"},"type userQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type userQuery struct {\n    *queries.Query\n}\n")),(0,o.kt)("h3",{id:"func-users"},"func Users"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func Users(mods ...qm.QueryMod) userQuery\n")),(0,o.kt)("p",null,"Users retrieves all the records using an executor","."),(0,o.kt)("h3",{id:"func-userquery-addorganizationsauditors"},"func ","(","userQuery",")"," AddOrganizationsAuditors"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) AddOrganizationsAuditors(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationsAuditor) error\n")),(0,o.kt)("p",null,"AddOrganizationsAuditors adds the given related objects to the existing relationships of the user\\, optionally inserting them as new records","."," Appends related to o",".","R",".","OrganizationsAuditors","."," Sets related",".","R",".","User appropriately","."),(0,o.kt)("h3",{id:"func-userquery-addorganizationsbillingmanagers"},"func ","(","userQuery",")"," AddOrganizationsBillingManagers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) AddOrganizationsBillingManagers(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationsBillingManager) error\n")),(0,o.kt)("p",null,"AddOrganizationsBillingManagers adds the given related objects to the existing relationships of the user\\, optionally inserting them as new records","."," Appends related to o",".","R",".","OrganizationsBillingManagers","."," Sets related",".","R",".","User appropriately","."),(0,o.kt)("h3",{id:"func-userquery-addorganizationsmanagers"},"func ","(","userQuery",")"," AddOrganizationsManagers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) AddOrganizationsManagers(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationsManager) error\n")),(0,o.kt)("p",null,"AddOrganizationsManagers adds the given related objects to the existing relationships of the user\\, optionally inserting them as new records","."," Appends related to o",".","R",".","OrganizationsManagers","."," Sets related",".","R",".","User appropriately","."),(0,o.kt)("h3",{id:"func-userquery-addorganizationsusers"},"func ","(","userQuery",")"," AddOrganizationsUsers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) AddOrganizationsUsers(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationsUser) error\n")),(0,o.kt)("p",null,"AddOrganizationsUsers adds the given related objects to the existing relationships of the user\\, optionally inserting them as new records","."," Appends related to o",".","R",".","OrganizationsUsers","."," Sets related",".","R",".","User appropriately","."),(0,o.kt)("h3",{id:"func-userquery-addresourceuserannotations"},"func ","(","userQuery",")"," AddResourceUserAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) AddResourceUserAnnotations(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserAnnotation) error\n")),(0,o.kt)("p",null,"AddResourceUserAnnotations adds the given related objects to the existing relationships of the user\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceUserAnnotations","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-userquery-addresourceuserlabels"},"func ","(","userQuery",")"," AddResourceUserLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) AddResourceUserLabels(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserLabel) error\n")),(0,o.kt)("p",null,"AddResourceUserLabels adds the given related objects to the existing relationships of the user\\, optionally inserting them as new records","."," Appends related to o",".","R",".","ResourceUserLabels","."," Sets related",".","R",".","Resource appropriately","."),(0,o.kt)("h3",{id:"func-userquery-addspacesapplicationsupporters"},"func ","(","userQuery",")"," AddSpacesApplicationSupporters"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) AddSpacesApplicationSupporters(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpacesApplicationSupporter) error\n")),(0,o.kt)("p",null,"AddSpacesApplicationSupporters adds the given related objects to the existing relationships of the user\\, optionally inserting them as new records","."," Appends related to o",".","R",".","SpacesApplicationSupporters","."," Sets related",".","R",".","User appropriately","."),(0,o.kt)("h3",{id:"func-userquery-addspacesauditors"},"func ","(","userQuery",")"," AddSpacesAuditors"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) AddSpacesAuditors(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpacesAuditor) error\n")),(0,o.kt)("p",null,"AddSpacesAuditors adds the given related objects to the existing relationships of the user\\, optionally inserting them as new records","."," Appends related to o",".","R",".","SpacesAuditors","."," Sets related",".","R",".","User appropriately","."),(0,o.kt)("h3",{id:"func-userquery-addspacesdevelopers"},"func ","(","userQuery",")"," AddSpacesDevelopers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) AddSpacesDevelopers(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpacesDeveloper) error\n")),(0,o.kt)("p",null,"AddSpacesDevelopers adds the given related objects to the existing relationships of the user\\, optionally inserting them as new records","."," Appends related to o",".","R",".","SpacesDevelopers","."," Sets related",".","R",".","User appropriately","."),(0,o.kt)("h3",{id:"func-userquery-addspacesmanagers"},"func ","(","userQuery",")"," AddSpacesManagers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) AddSpacesManagers(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpacesManager) error\n")),(0,o.kt)("p",null,"AddSpacesManagers adds the given related objects to the existing relationships of the user\\, optionally inserting them as new records","."," Appends related to o",".","R",".","SpacesManagers","."," Sets related",".","R",".","User appropriately","."),(0,o.kt)("h3",{id:"func-userquery-all"},"func ","(","userQuery",")"," All"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserSlice, error)\n")),(0,o.kt)("p",null,"All returns all User records from the query","."),(0,o.kt)("h3",{id:"func-userquery-count"},"func ","(","userQuery",")"," Count"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Count returns the count of all User records in the query","."),(0,o.kt)("h3",{id:"func-userquery-defaultspace"},"func ","(","userQuery",")"," DefaultSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) DefaultSpace(o *User, mods ...qm.QueryMod) spaceQuery\n")),(0,o.kt)("p",null,"DefaultSpace pointed to by the foreign key","."),(0,o.kt)("h3",{id:"func-userquery-delete"},"func ","(","userQuery",")"," Delete"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) Delete(o *User, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"Delete deletes a single User record with an executor","."," Delete will match against the primary key column to find the record to delete","."),(0,o.kt)("h3",{id:"func-userquery-deleteall"},"func ","(","userQuery",")"," DeleteAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all matching rows","."),(0,o.kt)("h3",{id:"func-userquery-deleteallslice"},"func ","(","userQuery",")"," DeleteAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) DeleteAllSlice(o UserSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)\n")),(0,o.kt)("p",null,"DeleteAll deletes all rows in the slice\\, using an executor","."),(0,o.kt)("h3",{id:"func-userquery-exists"},"func ","(","userQuery",")"," Exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n")),(0,o.kt)("p",null,"Exists checks if the row exists in the table","."),(0,o.kt)("h3",{id:"func-userquery-insert"},"func ","(","userQuery",")"," Insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) Insert(o *User, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n")),(0,o.kt)("p",null,"Insert a single record using an executor","."," See boil",".","Columns",".","InsertColumnSet documentation to understand column list inference for inserts","."),(0,o.kt)("h3",{id:"func-userquery-one"},"func ","(","userQuery",")"," One"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) One(ctx context.Context, exec boil.ContextExecutor) (*User, error)\n")),(0,o.kt)("p",null,"One returns a single user record from the query","."),(0,o.kt)("h3",{id:"func-userquery-organizationsauditors"},"func ","(","userQuery",")"," OrganizationsAuditors"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) OrganizationsAuditors(o *User, mods ...qm.QueryMod) organizationsAuditorQuery\n")),(0,o.kt)("p",null,"OrganizationsAuditors retrieves all the organizations","_","auditor's OrganizationsAuditors with an executor","."),(0,o.kt)("h3",{id:"func-userquery-organizationsbillingmanagers"},"func ","(","userQuery",")"," OrganizationsBillingManagers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) OrganizationsBillingManagers(o *User, mods ...qm.QueryMod) organizationsBillingManagerQuery\n")),(0,o.kt)("p",null,"OrganizationsBillingManagers retrieves all the organizations","_","billing","_","manager's OrganizationsBillingManagers with an executor","."),(0,o.kt)("h3",{id:"func-userquery-organizationsmanagers"},"func ","(","userQuery",")"," OrganizationsManagers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) OrganizationsManagers(o *User, mods ...qm.QueryMod) organizationsManagerQuery\n")),(0,o.kt)("p",null,"OrganizationsManagers retrieves all the organizations","_","manager's OrganizationsManagers with an executor","."),(0,o.kt)("h3",{id:"func-userquery-organizationsusers"},"func ","(","userQuery",")"," OrganizationsUsers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) OrganizationsUsers(o *User, mods ...qm.QueryMod) organizationsUserQuery\n")),(0,o.kt)("p",null,"OrganizationsUsers retrieves all the organizations","_","user's OrganizationsUsers with an executor","."),(0,o.kt)("h3",{id:"func-userquery-reload"},"func ","(","userQuery",")"," Reload"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) Reload(o *User, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"Reload refetches the object from the database using the primary keys with an executor","."),(0,o.kt)("h3",{id:"func-userquery-reloadall"},"func ","(","userQuery",")"," ReloadAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) ReloadAll(o *UserSlice, ctx context.Context, exec boil.ContextExecutor) error\n")),(0,o.kt)("p",null,"ReloadAll refetches every row with matching primary key column values and overwrites the original object slice with the newly updated slice","."),(0,o.kt)("h3",{id:"func-userquery-removedefaultspace"},"func ","(","userQuery",")"," RemoveDefaultSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) RemoveDefaultSpace(o *User, ctx context.Context, exec boil.ContextExecutor, related *Space) error\n")),(0,o.kt)("p",null,"RemoveDefaultSpace relationship","."," Sets o",".","R",".","DefaultSpace to nil","."," Removes o from all passed in related items' relationships struct ","(","Optional",")","."),(0,o.kt)("h3",{id:"func-userquery-removeresourceuserannotations"},"func ","(","userQuery",")"," RemoveResourceUserAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) RemoveResourceUserAnnotations(o *User, ctx context.Context, exec boil.ContextExecutor, related ...*UserAnnotation) error\n")),(0,o.kt)("p",null,"RemoveResourceUserAnnotations relationships from objects passed in","."," Removes related items from R",".","ResourceUserAnnotations ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-userquery-removeresourceuserlabels"},"func ","(","userQuery",")"," RemoveResourceUserLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) RemoveResourceUserLabels(o *User, ctx context.Context, exec boil.ContextExecutor, related ...*UserLabel) error\n")),(0,o.kt)("p",null,"RemoveResourceUserLabels relationships from objects passed in","."," Removes related items from R",".","ResourceUserLabels ","(","uses pointer comparison\\, removal does not keep order",")"," Sets related",".","R",".","Resource","."),(0,o.kt)("h3",{id:"func-userquery-resourceuserannotations"},"func ","(","userQuery",")"," ResourceUserAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) ResourceUserAnnotations(o *User, mods ...qm.QueryMod) userAnnotationQuery\n")),(0,o.kt)("p",null,"ResourceUserAnnotations retrieves all the user","_","annotation's UserAnnotations with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-userquery-resourceuserlabels"},"func ","(","userQuery",")"," ResourceUserLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) ResourceUserLabels(o *User, mods ...qm.QueryMod) userLabelQuery\n")),(0,o.kt)("p",null,"ResourceUserLabels retrieves all the user","_","label's UserLabels with an executor via resource","_","guid column","."),(0,o.kt)("h3",{id:"func-userquery-setdefaultspace"},"func ","(","userQuery",")"," SetDefaultSpace"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) SetDefaultSpace(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Space) error\n")),(0,o.kt)("p",null,"SetDefaultSpace of the user to the related item","."," Sets o",".","R",".","DefaultSpace to related","."," Adds o to related",".","R",".","DefaultSpaceUsers","."),(0,o.kt)("h3",{id:"func-userquery-setresourceuserannotations"},"func ","(","userQuery",")"," SetResourceUserAnnotations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) SetResourceUserAnnotations(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserAnnotation) error\n")),(0,o.kt)("p",null,"SetResourceUserAnnotations removes all previously related items of the user replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceUserAnnotations accordingly","."," Replaces o",".","R",".","ResourceUserAnnotations with related","."," Sets related",".","R",".","Resource's ResourceUserAnnotations accordingly","."),(0,o.kt)("h3",{id:"func-userquery-setresourceuserlabels"},"func ","(","userQuery",")"," SetResourceUserLabels"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) SetResourceUserLabels(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserLabel) error\n")),(0,o.kt)("p",null,"SetResourceUserLabels removes all previously related items of the user replacing them completely with the passed in related items\\, optionally inserting them as new records","."," Sets o",".","R",".","Resource's ResourceUserLabels accordingly","."," Replaces o",".","R",".","ResourceUserLabels with related","."," Sets related",".","R",".","Resource's ResourceUserLabels accordingly","."),(0,o.kt)("h3",{id:"func-userquery-spacesapplicationsupporters"},"func ","(","userQuery",")"," SpacesApplicationSupporters"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) SpacesApplicationSupporters(o *User, mods ...qm.QueryMod) spacesApplicationSupporterQuery\n")),(0,o.kt)("p",null,"SpacesApplicationSupporters retrieves all the spaces","_","application","_","supporter's SpacesApplicationSupporters with an executor","."),(0,o.kt)("h3",{id:"func-userquery-spacesauditors"},"func ","(","userQuery",")"," SpacesAuditors"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) SpacesAuditors(o *User, mods ...qm.QueryMod) spacesAuditorQuery\n")),(0,o.kt)("p",null,"SpacesAuditors retrieves all the spaces","_","auditor's SpacesAuditors with an executor","."),(0,o.kt)("h3",{id:"func-userquery-spacesdevelopers"},"func ","(","userQuery",")"," SpacesDevelopers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) SpacesDevelopers(o *User, mods ...qm.QueryMod) spacesDeveloperQuery\n")),(0,o.kt)("p",null,"SpacesDevelopers retrieves all the spaces","_","developer's SpacesDevelopers with an executor","."),(0,o.kt)("h3",{id:"func-userquery-spacesmanagers"},"func ","(","userQuery",")"," SpacesManagers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) SpacesManagers(o *User, mods ...qm.QueryMod) spacesManagerQuery\n")),(0,o.kt)("p",null,"SpacesManagers retrieves all the spaces","_","manager's SpacesManagers with an executor","."),(0,o.kt)("h3",{id:"func-userquery-update"},"func ","(","userQuery",")"," Update"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) Update(o *User, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n")),(0,o.kt)("p",null,"Update uses an executor to update the User","."," See boil",".","Columns",".","UpdateColumnSet documentation to understand column list inference for updates","."," Update does not automatically update the record in case of default values","."," Use ",".","Reload","(",")"," to refresh the records","."),(0,o.kt)("h3",{id:"func-userquery-updateall"},"func ","(","userQuery",")"," UpdateAll"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values","."),(0,o.kt)("h3",{id:"func-userquery-updateallslice"},"func ","(","userQuery",")"," UpdateAllSlice"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) UpdateAllSlice(o UserSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n")),(0,o.kt)("p",null,"UpdateAll updates all rows with the specified column values\\, using an executor","."),(0,o.kt)("h3",{id:"func-userquery-upsert"},"func ","(","userQuery",")"," Upsert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q userQuery) Upsert(o *User, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error\n")),(0,o.kt)("p",null,"Upsert attempts an insert using an executor\\, and does an update or ignore on conflict","."," See boil",".","Columns documentation for how to properly use updateColumns and insertColumns","."),(0,o.kt)("h2",{id:"type-userr"},"type userR"),(0,o.kt)("p",null,"userR is where relationships are stored","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type userR struct {\n    DefaultSpace                 *Space                           `boil:"DefaultSpace" json:"DefaultSpace" toml:"DefaultSpace" yaml:"DefaultSpace"`\n    OrganizationsAuditors        OrganizationsAuditorSlice        `boil:"OrganizationsAuditors" json:"OrganizationsAuditors" toml:"OrganizationsAuditors" yaml:"OrganizationsAuditors"`\n    OrganizationsBillingManagers OrganizationsBillingManagerSlice `boil:"OrganizationsBillingManagers" json:"OrganizationsBillingManagers" toml:"OrganizationsBillingManagers" yaml:"OrganizationsBillingManagers"`\n    OrganizationsManagers        OrganizationsManagerSlice        `boil:"OrganizationsManagers" json:"OrganizationsManagers" toml:"OrganizationsManagers" yaml:"OrganizationsManagers"`\n    OrganizationsUsers           OrganizationsUserSlice           `boil:"OrganizationsUsers" json:"OrganizationsUsers" toml:"OrganizationsUsers" yaml:"OrganizationsUsers"`\n    SpacesApplicationSupporters  SpacesApplicationSupporterSlice  `boil:"SpacesApplicationSupporters" json:"SpacesApplicationSupporters" toml:"SpacesApplicationSupporters" yaml:"SpacesApplicationSupporters"`\n    SpacesAuditors               SpacesAuditorSlice               `boil:"SpacesAuditors" json:"SpacesAuditors" toml:"SpacesAuditors" yaml:"SpacesAuditors"`\n    SpacesDevelopers             SpacesDeveloperSlice             `boil:"SpacesDevelopers" json:"SpacesDevelopers" toml:"SpacesDevelopers" yaml:"SpacesDevelopers"`\n    SpacesManagers               SpacesManagerSlice               `boil:"SpacesManagers" json:"SpacesManagers" toml:"SpacesManagers" yaml:"SpacesManagers"`\n    ResourceUserAnnotations      UserAnnotationSlice              `boil:"ResourceUserAnnotations" json:"ResourceUserAnnotations" toml:"ResourceUserAnnotations" yaml:"ResourceUserAnnotations"`\n    ResourceUserLabels           UserLabelSlice                   `boil:"ResourceUserLabels" json:"ResourceUserLabels" toml:"ResourceUserLabels" yaml:"ResourceUserLabels"`\n}\n')),(0,o.kt)("h3",{id:"func-userr-newstruct"},"func ","(","*","userR",")"," NewStruct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (*userR) NewStruct() *userR\n")),(0,o.kt)("p",null,"NewStruct creates a new relationship struct"),(0,o.kt)("h2",{id:"type-wherehelperbool"},"type whereHelperbool"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type whereHelperbool struct{ field string }\n")),(0,o.kt)("h3",{id:"func-wherehelperbool-eq"},"func ","(","whereHelperbool",")"," EQ"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelperbool) EQ(x bool) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelperbool-gt"},"func ","(","whereHelperbool",")"," GT"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelperbool) GT(x bool) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelperbool-gte"},"func ","(","whereHelperbool",")"," GTE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelperbool) GTE(x bool) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelperbool-lt"},"func ","(","whereHelperbool",")"," LT"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelperbool) LT(x bool) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelperbool-lte"},"func ","(","whereHelperbool",")"," LTE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelperbool) LTE(x bool) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelperbool-neq"},"func ","(","whereHelperbool",")"," NEQ"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelperbool) NEQ(x bool) qm.QueryMod\n")),(0,o.kt)("h2",{id:"type-wherehelperint"},"type whereHelperint"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type whereHelperint struct{ field string }\n")),(0,o.kt)("h3",{id:"func-wherehelperint-eq"},"func ","(","whereHelperint",")"," EQ"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelperint) EQ(x int) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelperint-gt"},"func ","(","whereHelperint",")"," GT"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelperint) GT(x int) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelperint-gte"},"func ","(","whereHelperint",")"," GTE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelperint) GTE(x int) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelperint-in"},"func ","(","whereHelperint",")"," IN"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelperint) IN(slice []int) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelperint-lt"},"func ","(","whereHelperint",")"," LT"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelperint) LT(x int) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelperint-lte"},"func ","(","whereHelperint",")"," LTE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelperint) LTE(x int) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelperint-neq"},"func ","(","whereHelperint",")"," NEQ"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelperint) NEQ(x int) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelperint-nin"},"func ","(","whereHelperint",")"," NIN"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelperint) NIN(slice []int) qm.QueryMod\n")),(0,o.kt)("h2",{id:"type-wherehelpernull_bool"},"type whereHelpernull","_","Bool"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type whereHelpernull_Bool struct{ field string }\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_bool-eq"},"func ","(","whereHelpernull","_","Bool",")"," EQ"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_bool-gt"},"func ","(","whereHelpernull","_","Bool",")"," GT"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_bool-gte"},"func ","(","whereHelpernull","_","Bool",")"," GTE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_bool-isnotnull"},"func ","(","whereHelpernull","_","Bool",")"," IsNotNull"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_bool-isnull"},"func ","(","whereHelpernull","_","Bool",")"," IsNull"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_Bool) IsNull() qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_bool-lt"},"func ","(","whereHelpernull","_","Bool",")"," LT"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_bool-lte"},"func ","(","whereHelpernull","_","Bool",")"," LTE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_bool-neq"},"func ","(","whereHelpernull","_","Bool",")"," NEQ"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod\n")),(0,o.kt)("h2",{id:"type-wherehelpernull_int"},"type whereHelpernull","_","Int"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type whereHelpernull_Int struct{ field string }\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_int-eq"},"func ","(","whereHelpernull","_","Int",")"," EQ"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_int-gt"},"func ","(","whereHelpernull","_","Int",")"," GT"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_int-gte"},"func ","(","whereHelpernull","_","Int",")"," GTE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_int-isnotnull"},"func ","(","whereHelpernull","_","Int",")"," IsNotNull"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_Int) IsNotNull() qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_int-isnull"},"func ","(","whereHelpernull","_","Int",")"," IsNull"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_Int) IsNull() qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_int-lt"},"func ","(","whereHelpernull","_","Int",")"," LT"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_int-lte"},"func ","(","whereHelpernull","_","Int",")"," LTE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_int-neq"},"func ","(","whereHelpernull","_","Int",")"," NEQ"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod\n")),(0,o.kt)("h2",{id:"type-wherehelpernull_string"},"type whereHelpernull","_","String"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type whereHelpernull_String struct{ field string }\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_string-eq"},"func ","(","whereHelpernull","_","String",")"," EQ"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_string-gt"},"func ","(","whereHelpernull","_","String",")"," GT"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_String) GT(x null.String) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_string-gte"},"func ","(","whereHelpernull","_","String",")"," GTE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_string-isnotnull"},"func ","(","whereHelpernull","_","String",")"," IsNotNull"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_String) IsNotNull() qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_string-isnull"},"func ","(","whereHelpernull","_","String",")"," IsNull"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_String) IsNull() qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_string-lt"},"func ","(","whereHelpernull","_","String",")"," LT"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_String) LT(x null.String) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_string-lte"},"func ","(","whereHelpernull","_","String",")"," LTE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_string-neq"},"func ","(","whereHelpernull","_","String",")"," NEQ"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod\n")),(0,o.kt)("h2",{id:"type-wherehelpernull_time"},"type whereHelpernull","_","Time"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type whereHelpernull_Time struct{ field string }\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_time-eq"},"func ","(","whereHelpernull","_","Time",")"," EQ"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_time-gt"},"func ","(","whereHelpernull","_","Time",")"," GT"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_time-gte"},"func ","(","whereHelpernull","_","Time",")"," GTE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_time-isnotnull"},"func ","(","whereHelpernull","_","Time",")"," IsNotNull"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_Time) IsNotNull() qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_time-isnull"},"func ","(","whereHelpernull","_","Time",")"," IsNull"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_Time) IsNull() qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_time-lt"},"func ","(","whereHelpernull","_","Time",")"," LT"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_time-lte"},"func ","(","whereHelpernull","_","Time",")"," LTE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpernull_time-neq"},"func ","(","whereHelpernull","_","Time",")"," NEQ"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod\n")),(0,o.kt)("h2",{id:"type-wherehelperstring"},"type whereHelperstring"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type whereHelperstring struct{ field string }\n")),(0,o.kt)("h3",{id:"func-wherehelperstring-eq"},"func ","(","whereHelperstring",")"," EQ"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelperstring) EQ(x string) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelperstring-gt"},"func ","(","whereHelperstring",")"," GT"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelperstring) GT(x string) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelperstring-gte"},"func ","(","whereHelperstring",")"," GTE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelperstring) GTE(x string) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelperstring-in"},"func ","(","whereHelperstring",")"," IN"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelperstring) IN(slice []string) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelperstring-lt"},"func ","(","whereHelperstring",")"," LT"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelperstring) LT(x string) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelperstring-lte"},"func ","(","whereHelperstring",")"," LTE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelperstring) LTE(x string) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelperstring-neq"},"func ","(","whereHelperstring",")"," NEQ"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelperstring) NEQ(x string) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelperstring-nin"},"func ","(","whereHelperstring",")"," NIN"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelperstring) NIN(slice []string) qm.QueryMod\n")),(0,o.kt)("h2",{id:"type-wherehelpertime_time"},"type whereHelpertime","_","Time"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type whereHelpertime_Time struct{ field string }\n")),(0,o.kt)("h3",{id:"func-wherehelpertime_time-eq"},"func ","(","whereHelpertime","_","Time",")"," EQ"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpertime_time-gt"},"func ","(","whereHelpertime","_","Time",")"," GT"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpertime_time-gte"},"func ","(","whereHelpertime","_","Time",")"," GTE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpertime_time-lt"},"func ","(","whereHelpertime","_","Time",")"," LT"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpertime_time-lte"},"func ","(","whereHelpertime","_","Time",")"," LTE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-wherehelpertime_time-neq"},"func ","(","whereHelpertime","_","Time",")"," NEQ"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod\n")),(0,o.kt)("p",null,"Generated by ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/princjef/gomarkdoc"},"gomarkdoc")))}d.isMDXComponent=!0}}]);