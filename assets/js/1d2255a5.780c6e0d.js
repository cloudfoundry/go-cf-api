"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7314],{3905:function(e,r,c){c.d(r,{Zo:function(){return k},kt:function(){return d}});var o=c(7294);function a(e,r,c){return r in e?Object.defineProperty(e,r,{value:c,enumerable:!0,configurable:!0,writable:!0}):e[r]=c,e}function n(e,r){var c=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),c.push.apply(c,o)}return c}function t(e){for(var r=1;r<arguments.length;r++){var c=null!=arguments[r]?arguments[r]:{};r%2?n(Object(c),!0).forEach((function(r){a(e,r,c[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(c)):n(Object(c)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(c,r))}))}return e}function l(e,r){if(null==e)return{};var c,o,a=function(e,r){if(null==e)return{};var c,o,a={},n=Object.keys(e);for(o=0;o<n.length;o++)c=n[o],r.indexOf(c)>=0||(a[c]=e[c]);return a}(e,r);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(o=0;o<n.length;o++)c=n[o],r.indexOf(c)>=0||Object.prototype.propertyIsEnumerable.call(e,c)&&(a[c]=e[c])}return a}var i=o.createContext({}),s=function(e){var r=o.useContext(i),c=r;return e&&(c="function"==typeof e?e(r):t(t({},r),e)),c},k=function(e){var r=s(e.components);return o.createElement(i.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},u=o.forwardRef((function(e,r){var c=e.components,a=e.mdxType,n=e.originalType,i=e.parentName,k=l(e,["components","mdxType","originalType","parentName"]),u=s(c),d=a,m=u["".concat(i,".").concat(d)]||u[d]||p[d]||n;return c?o.createElement(m,t(t({ref:r},k),{},{components:c})):o.createElement(m,t({ref:r},k))}));function d(e,r){var c=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var n=c.length,t=new Array(n);t[0]=u;var l={};for(var i in r)hasOwnProperty.call(r,i)&&(l[i]=r[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,t[1]=l;for(var s=2;s<n;s++)t[s]=c[s];return o.createElement.apply(null,t)}return o.createElement.apply(null,c)}u.displayName="MDXCreateElement"},7343:function(e,r,c){c.r(r),c.d(r,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return s},toc:function(){return k},default:function(){return u}});var o=c(7462),a=c(3366),n=(c(7294),c(3905)),t=["components"],l={},i=void 0,s={unversionedId:"Packages/internal/apicommon/v3/permissions/mocks",id:"Packages/internal/apicommon/v3/permissions/mocks",isDocsHomePage:!1,title:"mocks",description:"`go",source:"@site/godocs/Packages/internal/apicommon/v3/permissions/mocks.md",sourceDirName:"Packages/internal/apicommon/v3/permissions",slug:"/Packages/internal/apicommon/v3/permissions/mocks",permalink:"/go-cf-api/godocs/Packages/internal/apicommon/v3/permissions/mocks",editUrl:"https://github.com/cloudfoundry/go-cf-api/edit/main/docs/godocs/Packages/internal/apicommon/v3/permissions/mocks.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"permissions",permalink:"/go-cf-api/godocs/Packages/internal/apicommon/v3/permissions"},next:{title:"ratelimiter",permalink:"/go-cf-api/godocs/Packages/internal/apicommon/v3/ratelimiter"}},k=[{value:"Index",id:"index",children:[]},{value:"type MockAllowedSpaceIDs",id:"type-mockallowedspaceids",children:[{value:"func NewMockAllowedSpaceIDs",id:"func-newmockallowedspaceids",children:[]},{value:"func (*MockAllowedSpaceIDs) Contains",id:"func-mockallowedspaceids-contains",children:[]},{value:"func (*MockAllowedSpaceIDs) EXPECT",id:"func-mockallowedspaceids-expect",children:[]},{value:"func (*MockAllowedSpaceIDs) With",id:"func-mockallowedspaceids-with",children:[]}]},{value:"type MockAllowedSpaceIDsMockRecorder",id:"type-mockallowedspaceidsmockrecorder",children:[{value:"func (*MockAllowedSpaceIDsMockRecorder) Contains",id:"func-mockallowedspaceidsmockrecorder-contains",children:[]},{value:"func (*MockAllowedSpaceIDsMockRecorder) With",id:"func-mockallowedspaceidsmockrecorder-with",children:[]}]},{value:"type MockQuerier",id:"type-mockquerier",children:[{value:"func NewMockQuerier",id:"func-newmockquerier",children:[]},{value:"func (*MockQuerier) AllowedSpaceIDsForUser",id:"func-mockquerier-allowedspaceidsforuser",children:[]},{value:"func (*MockQuerier) EXPECT",id:"func-mockquerier-expect",children:[]}]},{value:"type MockQuerierMockRecorder",id:"type-mockqueriermockrecorder",children:[{value:"func (*MockQuerierMockRecorder) AllowedSpaceIDsForUser",id:"func-mockqueriermockrecorder-allowedspaceidsforuser",children:[]}]}],p={toc:k};function u(e){var r=e.components,c=(0,a.Z)(e,t);return(0,n.kt)("wrapper",(0,o.Z)({},p,c,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"mock_permissions"},"mock","_","permissions"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'import "github.com/cloudfoundry/go-cf-api/internal/apicommon/v3/permissions/mocks"\n')),(0,n.kt)("p",null,"Package mock","_","permissions is a generated GoMock package","."),(0,n.kt)("p",null,"Package mock","_","permissions is a generated GoMock package","."),(0,n.kt)("h2",{id:"index"},"Index"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#type-mockallowedspaceids"},"type MockAllowedSpaceIDs"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#func-newmockallowedspaceids"},"func NewMockAllowedSpaceIDs(ctrl ",(0,n.kt)("em",{parentName:"a"},"gomock.Controller) "),"MockAllowedSpaceIDs")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#func-mockallowedspaceids-contains"},"func (m *MockAllowedSpaceIDs) Contains(column string) qm.QueryMod")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#func-mockallowedspaceids-expect"},"func (m ",(0,n.kt)("em",{parentName:"a"},"MockAllowedSpaceIDs) EXPECT() "),"MockAllowedSpaceIDsMockRecorder")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#func-mockallowedspaceids-with"},"func (m *MockAllowedSpaceIDs) With() []qm.QueryMod")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#type-mockallowedspaceidsmockrecorder"},"type MockAllowedSpaceIDsMockRecorder"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#func-mockallowedspaceidsmockrecorder-contains"},"func (mr ",(0,n.kt)("em",{parentName:"a"},"MockAllowedSpaceIDsMockRecorder) Contains(column interface{}) "),"gomock.Call")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#func-mockallowedspaceidsmockrecorder-with"},"func (mr ",(0,n.kt)("em",{parentName:"a"},"MockAllowedSpaceIDsMockRecorder) With() "),"gomock.Call")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#type-mockquerier"},"type MockQuerier"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#func-newmockquerier"},"func NewMockQuerier(ctrl ",(0,n.kt)("em",{parentName:"a"},"gomock.Controller) "),"MockQuerier")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#func-mockquerier-allowedspaceidsforuser"},"func (m *MockQuerier) AllowedSpaceIDsForUser(userGUID string, roles ...permissions.Role) (permissions.AllowedSpaceIDs, error)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#func-mockquerier-expect"},"func (m ",(0,n.kt)("em",{parentName:"a"},"MockQuerier) EXPECT() "),"MockQuerierMockRecorder")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#type-mockqueriermockrecorder"},"type MockQuerierMockRecorder"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#func-mockqueriermockrecorder-allowedspaceidsforuser"},"func (mr ",(0,n.kt)("em",{parentName:"a"},"MockQuerierMockRecorder) AllowedSpaceIDsForUser(userGUID interface{}, roles ...interface{}) "),"gomock.Call"))))),(0,n.kt)("h2",{id:"type-mockallowedspaceids"},"type MockAllowedSpaceIDs"),(0,n.kt)("p",null,"MockAllowedSpaceIDs is a mock of AllowedSpaceIDs interface","."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"type MockAllowedSpaceIDs struct {\n    ctrl     *gomock.Controller\n    recorder *MockAllowedSpaceIDsMockRecorder\n}\n")),(0,n.kt)("h3",{id:"func-newmockallowedspaceids"},"func NewMockAllowedSpaceIDs"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"func NewMockAllowedSpaceIDs(ctrl *gomock.Controller) *MockAllowedSpaceIDs\n")),(0,n.kt)("p",null,"NewMockAllowedSpaceIDs creates a new mock instance","."),(0,n.kt)("h3",{id:"func-mockallowedspaceids-contains"},"func ","(","*","MockAllowedSpaceIDs",")"," Contains"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"func (m *MockAllowedSpaceIDs) Contains(column string) qm.QueryMod\n")),(0,n.kt)("p",null,"Contains mocks base method","."),(0,n.kt)("h3",{id:"func-mockallowedspaceids-expect"},"func ","(","*","MockAllowedSpaceIDs",")"," EXPECT"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"func (m *MockAllowedSpaceIDs) EXPECT() *MockAllowedSpaceIDsMockRecorder\n")),(0,n.kt)("p",null,"EXPECT returns an object that allows the caller to indicate expected use","."),(0,n.kt)("h3",{id:"func-mockallowedspaceids-with"},"func ","(","*","MockAllowedSpaceIDs",")"," With"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"func (m *MockAllowedSpaceIDs) With() []qm.QueryMod\n")),(0,n.kt)("p",null,"With mocks base method","."),(0,n.kt)("h2",{id:"type-mockallowedspaceidsmockrecorder"},"type MockAllowedSpaceIDsMockRecorder"),(0,n.kt)("p",null,"MockAllowedSpaceIDsMockRecorder is the mock recorder for MockAllowedSpaceIDs","."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"type MockAllowedSpaceIDsMockRecorder struct {\n    mock *MockAllowedSpaceIDs\n}\n")),(0,n.kt)("h3",{id:"func-mockallowedspaceidsmockrecorder-contains"},"func ","(","*","MockAllowedSpaceIDsMockRecorder",")"," Contains"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"func (mr *MockAllowedSpaceIDsMockRecorder) Contains(column interface{}) *gomock.Call\n")),(0,n.kt)("p",null,"Contains indicates an expected call of Contains","."),(0,n.kt)("h3",{id:"func-mockallowedspaceidsmockrecorder-with"},"func ","(","*","MockAllowedSpaceIDsMockRecorder",")"," With"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"func (mr *MockAllowedSpaceIDsMockRecorder) With() *gomock.Call\n")),(0,n.kt)("p",null,"With indicates an expected call of With","."),(0,n.kt)("h2",{id:"type-mockquerier"},"type MockQuerier"),(0,n.kt)("p",null,"MockQuerier is a mock of Querier interface","."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"type MockQuerier struct {\n    ctrl     *gomock.Controller\n    recorder *MockQuerierMockRecorder\n}\n")),(0,n.kt)("h3",{id:"func-newmockquerier"},"func NewMockQuerier"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier\n")),(0,n.kt)("p",null,"NewMockQuerier creates a new mock instance","."),(0,n.kt)("h3",{id:"func-mockquerier-allowedspaceidsforuser"},"func ","(","*","MockQuerier",")"," AllowedSpaceIDsForUser"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"func (m *MockQuerier) AllowedSpaceIDsForUser(userGUID string, roles ...permissions.Role) (permissions.AllowedSpaceIDs, error)\n")),(0,n.kt)("p",null,"AllowedSpaceIDsForUser mocks base method","."),(0,n.kt)("h3",{id:"func-mockquerier-expect"},"func ","(","*","MockQuerier",")"," EXPECT"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder\n")),(0,n.kt)("p",null,"EXPECT returns an object that allows the caller to indicate expected use","."),(0,n.kt)("h2",{id:"type-mockqueriermockrecorder"},"type MockQuerierMockRecorder"),(0,n.kt)("p",null,"MockQuerierMockRecorder is the mock recorder for MockQuerier","."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"type MockQuerierMockRecorder struct {\n    mock *MockQuerier\n}\n")),(0,n.kt)("h3",{id:"func-mockqueriermockrecorder-allowedspaceidsforuser"},"func ","(","*","MockQuerierMockRecorder",")"," AllowedSpaceIDsForUser"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},"func (mr *MockQuerierMockRecorder) AllowedSpaceIDsForUser(userGUID interface{}, roles ...interface{}) *gomock.Call\n")),(0,n.kt)("p",null,"AllowedSpaceIDsForUser indicates an expected call of AllowedSpaceIDsForUser","."),(0,n.kt)("p",null,"Generated by ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/princjef/gomarkdoc"},"gomarkdoc")))}u.isMDXComponent=!0}}]);