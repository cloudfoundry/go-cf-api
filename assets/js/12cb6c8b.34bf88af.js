"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6141],{3905:function(e,r,a){a.d(r,{Zo:function(){return c},kt:function(){return m}});var n=a(7294);function t(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function o(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?o(Object(a),!0).forEach((function(r){t(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function i(e,r){if(null==e)return{};var a,n,t=function(e,r){if(null==e)return{};var a,n,t={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],r.indexOf(a)>=0||(t[a]=e[a]);return t}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var s=n.createContext({}),p=function(e){var r=n.useContext(s),a=r;return e&&(a="function"==typeof e?e(r):l(l({},r),e)),a},c=function(e){var r=p(e.components);return n.createElement(s.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var a=e.components,t=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(a),m=t,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return a?n.createElement(g,l(l({ref:r},c),{},{components:a})):n.createElement(g,l({ref:r},c))}));function m(e,r){var a=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var o=a.length,l=new Array(o);l[0]=d;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:t,l[1]=i;for(var p=2;p<o;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},7215:function(e,r,a){a.r(r),a.d(r,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var n=a(7462),t=a(3366),o=(a(7294),a(3905)),l=["components"],i={},s=void 0,p={unversionedId:"Packages/internal/apicommon/v3/permissions",id:"Packages/internal/apicommon/v3/permissions",isDocsHomePage:!1,title:"permissions",description:"`go",source:"@site/godocs/Packages/internal/apicommon/v3/permissions.md",sourceDirName:"Packages/internal/apicommon/v3",slug:"/Packages/internal/apicommon/v3/permissions",permalink:"/go-cf-api/godocs/Packages/internal/apicommon/v3/permissions",editUrl:"https://github.com/cloudfoundry/go-cf-api/edit/main/docs/godocs/Packages/internal/apicommon/v3/permissions.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"pagination",permalink:"/go-cf-api/godocs/Packages/internal/apicommon/v3/pagination"},next:{title:"mocks",permalink:"/go-cf-api/godocs/Packages/internal/apicommon/v3/permissions/mocks"}},c=[{value:"Index",id:"index",children:[]},{value:"Variables",id:"variables",children:[]},{value:"type AllowedSpaceIDs",id:"type-allowedspaceids",children:[]},{value:"type Querier",id:"type-querier",children:[]},{value:"type Role",id:"type-role",children:[]},{value:"type allowedSpaceIDs",id:"type-allowedspaceids-1",children:[{value:"func (*allowedSpaceIDs) Contains",id:"func-allowedspaceids-contains",children:[]},{value:"func (*allowedSpaceIDs) With",id:"func-allowedspaceids-with",children:[]}]},{value:"type querier",id:"type-querier-1",children:[{value:"func NewQuerier",id:"func-newquerier",children:[]},{value:"func (*querier) AllowedSpaceIDsForUser",id:"func-querier-allowedspaceidsforuser",children:[]}]}],u={toc:c};function d(e){var r=e.components,a=(0,t.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},u,a,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"permissions"},"permissions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'import "github.com/cloudfoundry/go-cf-api/internal/apicommon/v3/permissions"\n')),(0,o.kt)("h2",{id:"index"},"Index"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#variables"},"Variables")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-allowedspaceids"},"type AllowedSpaceIDs")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-querier"},"type Querier")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-role"},"type Role")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-allowedspaceids"},"type allowedSpaceIDs"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-allowedspaceids-contains"},"func (ws *allowedSpaceIDs) Contains(column string) qm.QueryMod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-allowedspaceids-with"},"func (ws *allowedSpaceIDs) With() []qm.QueryMod")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-querier"},"type querier"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-newquerier"},"func NewQuerier() *querier")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-querier-allowedspaceidsforuser"},"func (q *querier) AllowedSpaceIDsForUser(userGUID string, roles ...Role) (AllowedSpaceIDs, error)"))))),(0,o.kt)("h2",{id:"variables"},"Variables"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    // The UNION requires that all the tables have the same schema so just pick one to use the column names from\n    spaceIDColumn        = models.Quote(models.SpacesDeveloperColumns.SpaceID)\n    userIDColumn         = models.Quote(models.SpacesDeveloperColumns.UserID)\n    organizationIDColumn = models.Quote(models.OrganizationsManagerColumns.OrganizationID)\n    orgRolesColumns      = fmt.Sprintf("%s, %s",\n        models.Quote(models.OrganizationsManagerColumns.OrganizationID),\n        models.Quote(models.OrganizationsManagerColumns.UserID))\n    orgRolesTable        = models.Quote("org_roles")\n    allowedSpaceIDsTable = models.Quote("allowed_space_ids")\n\n    AllSpaceRoles = []Role{SpaceDeveloper, SpaceSupporter, SpaceManager, SpaceAuditor}\n    AllOrgRoles   = []Role{OrgManager, OrgBillingManager, OrgAuditor}\n)\n')),(0,o.kt)("h2",{id:"type-allowedspaceids"},"type AllowedSpaceIDs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AllowedSpaceIDs interface {\n    With() []qm.QueryMod\n    Contains(column string) qm.QueryMod\n}\n")),(0,o.kt)("h2",{id:"type-querier"},"type Querier"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type Querier interface {\n    AllowedSpaceIDsForUser(userGUID string, roles ...Role) (AllowedSpaceIDs, error)\n}\n")),(0,o.kt)("h2",{id:"type-role"},"type Role"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type Role string\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'const (\n    SpaceDeveloper    Role = "SpaceDeveloper"\n    SpaceSupporter    Role = "SpaceSupporter"\n    SpaceManager      Role = "SpaceManager"\n    SpaceAuditor      Role = "SpaceAuditor"\n    OrgAuditor        Role = "OrgAuditor"\n    OrgBillingManager Role = "OrgBillingManager"\n    OrgManager        Role = "OrgManager"\n)\n')),(0,o.kt)("h2",{id:"type-allowedspaceids-1"},"type allowedSpaceIDs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type allowedSpaceIDs struct {\n    userGUID               string\n    tableName              string\n    tableExpression        *models.Subquery\n    orgRolesTableName      string\n    orgRowsTableExpression *models.Subquery\n}\n")),(0,o.kt)("h3",{id:"func-allowedspaceids-contains"},"func ","(","*","allowedSpaceIDs",")"," Contains"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (ws *allowedSpaceIDs) Contains(column string) qm.QueryMod\n")),(0,o.kt)("h3",{id:"func-allowedspaceids-with"},"func ","(","*","allowedSpaceIDs",")"," With"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (ws *allowedSpaceIDs) With() []qm.QueryMod\n")),(0,o.kt)("h2",{id:"type-querier-1"},"type querier"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type querier struct{}\n")),(0,o.kt)("h3",{id:"func-newquerier"},"func NewQuerier"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func NewQuerier() *querier\n")),(0,o.kt)("h3",{id:"func-querier-allowedspaceidsforuser"},"func ","(","*","querier",")"," AllowedSpaceIDsForUser"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (q *querier) AllowedSpaceIDsForUser(userGUID string, roles ...Role) (AllowedSpaceIDs, error)\n")),(0,o.kt)("p",null,"Generated by ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/princjef/gomarkdoc"},"gomarkdoc")))}d.isMDXComponent=!0}}]);