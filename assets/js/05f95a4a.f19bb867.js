"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1839],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var g=r.createContext({}),c=function(e){var n=r.useContext(g),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(g.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},s=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,g=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),s=c(t),d=a,f=s["".concat(g,".").concat(d)]||s[d]||p[d]||o;return t?r.createElement(f,l(l({ref:n},u),{},{components:t})):r.createElement(f,l({ref:n},u))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=s;var i={};for(var g in n)hasOwnProperty.call(n,g)&&(i[g]=n[g]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}s.displayName="MDXCreateElement"},2920:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return g},metadata:function(){return c},toc:function(){return u},default:function(){return s}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),l=["components"],i={},g=void 0,c={unversionedId:"Packages/internal/logging",id:"Packages/internal/logging",isDocsHomePage:!1,title:"logging",description:"`go",source:"@site/godocs/Packages/internal/logging.md",sourceDirName:"Packages/internal",slug:"/Packages/internal/logging",permalink:"/go-cf-api/godocs/Packages/internal/logging",editUrl:"https://github.com/cloudfoundry/go-cf-api/edit/main/docs/godocs/Packages/internal/logging.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"helpers",permalink:"/go-cf-api/godocs/Packages/internal/helpers"},next:{title:"tags",permalink:"/go-cf-api/godocs/Packages/internal/logging/tags"}},u=[{value:"Index",id:"index",children:[]},{value:"Constants",id:"constants",children:[]},{value:"Variables",id:"variables",children:[]},{value:"func FromContext",id:"func-fromcontext",children:[]},{value:"func NewEchoZapLogger",id:"func-newechozaplogger",children:[]},{value:"func NewTimingMiddleware",id:"func-newtimingmiddleware",children:[]},{value:"func NewVcapRequestID",id:"func-newvcaprequestid",children:[]},{value:"func Setup",id:"func-setup",children:[]},{value:"func buildRequestID",id:"func-buildrequestid",children:[]},{value:"type BoilLogger",id:"type-boillogger",children:[{value:"func NewBoilLogger",id:"func-newboillogger",children:[]},{value:"func (*BoilLogger) Write",id:"func-boillogger-write",children:[]},{value:"func (*BoilLogger) getLogger",id:"func-boillogger-getlogger",children:[]}]}],p={toc:u};function s(e){var n=e.components,t=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"logging"},"logging"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'import "github.com/cloudfoundry/go-cf-api/internal/logging"\n')),(0,o.kt)("h2",{id:"index"},"Index"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#constants"},"Constants")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#variables"},"Variables")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-fromcontext"},"func FromContext(c echo.Context) *zap.Logger")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-newechozaplogger"},"func NewEchoZapLogger(baseLogger *zap.Logger) echo.MiddlewareFunc")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-newtimingmiddleware"},"func NewTimingMiddleware() echo.MiddlewareFunc")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-newvcaprequestid"},"func NewVcapRequestID() echo.MiddlewareFunc")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-setup"},"func Setup(config *config.CfAPIConfig) error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-buildrequestid"},"func buildRequestID(vcapRequestID string) string")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-boillogger"},"type BoilLogger"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-newboillogger"},"func NewBoilLogger(redactParams bool, logger ",(0,o.kt)("em",{parentName:"a"},"zap.Logger) "),"BoilLogger")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-boillogger-write"},"func (b *BoilLogger) Write(data []byte) (n int, err error)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-boillogger-getlogger"},"func (b ",(0,o.kt)("em",{parentName:"a"},"BoilLogger) getLogger() "),"zap.Logger"))))),(0,o.kt)("h2",{id:"constants"},"Constants"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'const (\n    RemoteIPField  = "remote_ip"\n    TimeField      = "time"\n    HostField      = "host"\n    RequestField   = "request"\n    UserAgentField = "user_agent"\n    StatusField    = "status"\n    SizeField      = "size"\n    RequestIDField = "request_id"\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'const (\n    HeaderVcapRequestID = "X-Vcap-Request-Id"\n    MaxSizeLimit        = 255\n)\n')),(0,o.kt)("h2",{id:"variables"},"Variables"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var vcapRequestIDBadCharRegexp = regexp.MustCompile(`[^\\w-]`) // shorthand for [a-zA-Z0-9_]\n")),(0,o.kt)("h2",{id:"func-fromcontext"},"func FromContext"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func FromContext(c echo.Context) *zap.Logger\n")),(0,o.kt)("h2",{id:"func-newechozaplogger"},"func NewEchoZapLogger"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func NewEchoZapLogger(baseLogger *zap.Logger) echo.MiddlewareFunc\n")),(0,o.kt)("p",null,'ZapLogger is a middleware and zap to provide an "access log" like logging for each request',"."),(0,o.kt)("h2",{id:"func-newtimingmiddleware"},"func NewTimingMiddleware"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func NewTimingMiddleware() echo.MiddlewareFunc\n")),(0,o.kt)("h2",{id:"func-newvcaprequestid"},"func NewVcapRequestID"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func NewVcapRequestID() echo.MiddlewareFunc\n")),(0,o.kt)("h2",{id:"func-setup"},"func Setup"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func Setup(config *config.CfAPIConfig) error\n")),(0,o.kt)("h2",{id:"func-buildrequestid"},"func buildRequestID"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func buildRequestID(vcapRequestID string) string\n")),(0,o.kt)("h2",{id:"type-boillogger"},"type BoilLogger"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BoilLogger struct {\n    RedactParams  bool\n    query, params string\n    logger        *zap.Logger\n}\n")),(0,o.kt)("h3",{id:"func-newboillogger"},"func NewBoilLogger"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func NewBoilLogger(redactParams bool, logger *zap.Logger) *BoilLogger\n")),(0,o.kt)("h3",{id:"func-boillogger-write"},"func ","(","*","BoilLogger",")"," Write"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (b *BoilLogger) Write(data []byte) (n int, err error)\n")),(0,o.kt)("h3",{id:"func-boillogger-getlogger"},"func ","(","*","BoilLogger",")"," getLogger"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (b *BoilLogger) getLogger() *zap.Logger\n")),(0,o.kt)("p",null,"Generated by ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/princjef/gomarkdoc"},"gomarkdoc")))}s.isMDXComponent=!0}}]);