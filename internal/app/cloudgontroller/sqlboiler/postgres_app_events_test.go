// +build integration postgres
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAppEvents(t *testing.T) {
	t.Parallel()

	query := AppEvents()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAppEventsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppEvent{}
	if err = randomize.Struct(seed, o, appEventDBTypes, true, appEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AppEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAppEventsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppEvent{}
	if err = randomize.Struct(seed, o, appEventDBTypes, true, appEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AppEvents().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AppEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAppEventsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppEvent{}
	if err = randomize.Struct(seed, o, appEventDBTypes, true, appEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AppEventSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AppEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAppEventsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppEvent{}
	if err = randomize.Struct(seed, o, appEventDBTypes, true, appEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AppEventExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AppEvent exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AppEventExists to return true, but got false.")
	}
}

func testAppEventsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppEvent{}
	if err = randomize.Struct(seed, o, appEventDBTypes, true, appEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	appEventFound, err := FindAppEvent(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if appEventFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAppEventsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppEvent{}
	if err = randomize.Struct(seed, o, appEventDBTypes, true, appEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AppEvents().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAppEventsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppEvent{}
	if err = randomize.Struct(seed, o, appEventDBTypes, true, appEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AppEvents().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAppEventsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	appEventOne := &AppEvent{}
	appEventTwo := &AppEvent{}
	if err = randomize.Struct(seed, appEventOne, appEventDBTypes, false, appEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppEvent struct: %s", err)
	}
	if err = randomize.Struct(seed, appEventTwo, appEventDBTypes, false, appEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = appEventOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = appEventTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AppEvents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAppEventsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	appEventOne := &AppEvent{}
	appEventTwo := &AppEvent{}
	if err = randomize.Struct(seed, appEventOne, appEventDBTypes, false, appEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppEvent struct: %s", err)
	}
	if err = randomize.Struct(seed, appEventTwo, appEventDBTypes, false, appEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = appEventOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = appEventTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AppEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func appEventBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AppEvent) error {
	*o = AppEvent{}
	return nil
}

func appEventAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AppEvent) error {
	*o = AppEvent{}
	return nil
}

func appEventAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AppEvent) error {
	*o = AppEvent{}
	return nil
}

func appEventBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AppEvent) error {
	*o = AppEvent{}
	return nil
}

func appEventAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AppEvent) error {
	*o = AppEvent{}
	return nil
}

func appEventBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AppEvent) error {
	*o = AppEvent{}
	return nil
}

func appEventAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AppEvent) error {
	*o = AppEvent{}
	return nil
}

func appEventBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AppEvent) error {
	*o = AppEvent{}
	return nil
}

func appEventAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AppEvent) error {
	*o = AppEvent{}
	return nil
}

func testAppEventsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AppEvent{}
	o := &AppEvent{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, appEventDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AppEvent object: %s", err)
	}

	AddAppEventHook(boil.BeforeInsertHook, appEventBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	appEventBeforeInsertHooks = []AppEventHook{}

	AddAppEventHook(boil.AfterInsertHook, appEventAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	appEventAfterInsertHooks = []AppEventHook{}

	AddAppEventHook(boil.AfterSelectHook, appEventAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	appEventAfterSelectHooks = []AppEventHook{}

	AddAppEventHook(boil.BeforeUpdateHook, appEventBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	appEventBeforeUpdateHooks = []AppEventHook{}

	AddAppEventHook(boil.AfterUpdateHook, appEventAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	appEventAfterUpdateHooks = []AppEventHook{}

	AddAppEventHook(boil.BeforeDeleteHook, appEventBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	appEventBeforeDeleteHooks = []AppEventHook{}

	AddAppEventHook(boil.AfterDeleteHook, appEventAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	appEventAfterDeleteHooks = []AppEventHook{}

	AddAppEventHook(boil.BeforeUpsertHook, appEventBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	appEventBeforeUpsertHooks = []AppEventHook{}

	AddAppEventHook(boil.AfterUpsertHook, appEventAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	appEventAfterUpsertHooks = []AppEventHook{}
}

func testAppEventsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppEvent{}
	if err = randomize.Struct(seed, o, appEventDBTypes, true, appEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AppEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAppEventsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppEvent{}
	if err = randomize.Struct(seed, o, appEventDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AppEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(appEventColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AppEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAppEventToOneProcessUsingApp(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AppEvent
	var foreign Process

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, appEventDBTypes, false, appEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppEvent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, processDBTypes, false, processColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AppID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.App().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AppEventSlice{&local}
	if err = local.L.LoadApp(ctx, tx, false, (*[]*AppEvent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.App == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.App = nil
	if err = local.L.LoadApp(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.App == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAppEventToOneSetOpProcessUsingApp(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AppEvent
	var b, c Process

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appEventDBTypes, false, strmangle.SetComplement(appEventPrimaryKeyColumns, appEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, processDBTypes, false, strmangle.SetComplement(processPrimaryKeyColumns, processColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, processDBTypes, false, strmangle.SetComplement(processPrimaryKeyColumns, processColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Process{&b, &c} {
		err = a.SetApp(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.App != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AppAppEvents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AppID != x.ID {
			t.Error("foreign key was wrong value", a.AppID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AppID))
		reflect.Indirect(reflect.ValueOf(&a.AppID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AppID != x.ID {
			t.Error("foreign key was wrong value", a.AppID, x.ID)
		}
	}
}

func testAppEventsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppEvent{}
	if err = randomize.Struct(seed, o, appEventDBTypes, true, appEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAppEventsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppEvent{}
	if err = randomize.Struct(seed, o, appEventDBTypes, true, appEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AppEventSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAppEventsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppEvent{}
	if err = randomize.Struct(seed, o, appEventDBTypes, true, appEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AppEvents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	appEventDBTypes = map[string]string{`ID`: `integer`, `GUID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `AppID`: `integer`, `InstanceGUID`: `text`, `InstanceIndex`: `integer`, `ExitStatus`: `integer`, `Timestamp`: `timestamp without time zone`, `ExitDescription`: `text`}
	_               = bytes.MinRead
)

func testAppEventsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(appEventPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(appEventAllColumns) == len(appEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AppEvent{}
	if err = randomize.Struct(seed, o, appEventDBTypes, true, appEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AppEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, appEventDBTypes, true, appEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AppEvent struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAppEventsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(appEventAllColumns) == len(appEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AppEvent{}
	if err = randomize.Struct(seed, o, appEventDBTypes, true, appEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AppEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, appEventDBTypes, true, appEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AppEvent struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(appEventAllColumns, appEventPrimaryKeyColumns) {
		fields = appEventAllColumns
	} else {
		fields = strmangle.SetComplement(
			appEventAllColumns,
			appEventPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AppEventSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAppEventsUpsert(t *testing.T) {
	t.Parallel()

	if len(appEventAllColumns) == len(appEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AppEvent{}
	if err = randomize.Struct(seed, &o, appEventDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AppEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AppEvent: %s", err)
	}

	count, err := AppEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, appEventDBTypes, false, appEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AppEvent struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AppEvent: %s", err)
	}

	count, err = AppEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
