// +build psql,db
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testApps(t *testing.T) {
	t.Parallel()

	query := Apps()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAppsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &App{}
	if err = randomize.Struct(seed, o, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Apps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAppsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &App{}
	if err = randomize.Struct(seed, o, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Apps().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Apps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAppsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &App{}
	if err = randomize.Struct(seed, o, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AppSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Apps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAppsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &App{}
	if err = randomize.Struct(seed, o, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AppExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if App exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AppExists to return true, but got false.")
	}
}

func testAppsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &App{}
	if err = randomize.Struct(seed, o, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	appFound, err := FindApp(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if appFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAppsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &App{}
	if err = randomize.Struct(seed, o, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Apps().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAppsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &App{}
	if err = randomize.Struct(seed, o, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Apps().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAppsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	appOne := &App{}
	appTwo := &App{}
	if err = randomize.Struct(seed, appOne, appDBTypes, false, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}
	if err = randomize.Struct(seed, appTwo, appDBTypes, false, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = appOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = appTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Apps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAppsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	appOne := &App{}
	appTwo := &App{}
	if err = randomize.Struct(seed, appOne, appDBTypes, false, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}
	if err = randomize.Struct(seed, appTwo, appDBTypes, false, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = appOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = appTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Apps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func appBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *App) error {
	*o = App{}
	return nil
}

func appAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *App) error {
	*o = App{}
	return nil
}

func appAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *App) error {
	*o = App{}
	return nil
}

func appBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *App) error {
	*o = App{}
	return nil
}

func appAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *App) error {
	*o = App{}
	return nil
}

func appBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *App) error {
	*o = App{}
	return nil
}

func appAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *App) error {
	*o = App{}
	return nil
}

func appBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *App) error {
	*o = App{}
	return nil
}

func appAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *App) error {
	*o = App{}
	return nil
}

func testAppsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &App{}
	o := &App{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, appDBTypes, false); err != nil {
		t.Errorf("Unable to randomize App object: %s", err)
	}

	AddAppHook(boil.BeforeInsertHook, appBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	appBeforeInsertHooks = []AppHook{}

	AddAppHook(boil.AfterInsertHook, appAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	appAfterInsertHooks = []AppHook{}

	AddAppHook(boil.AfterSelectHook, appAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	appAfterSelectHooks = []AppHook{}

	AddAppHook(boil.BeforeUpdateHook, appBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	appBeforeUpdateHooks = []AppHook{}

	AddAppHook(boil.AfterUpdateHook, appAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	appAfterUpdateHooks = []AppHook{}

	AddAppHook(boil.BeforeDeleteHook, appBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	appBeforeDeleteHooks = []AppHook{}

	AddAppHook(boil.AfterDeleteHook, appAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	appAfterDeleteHooks = []AppHook{}

	AddAppHook(boil.BeforeUpsertHook, appBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	appBeforeUpsertHooks = []AppHook{}

	AddAppHook(boil.AfterUpsertHook, appAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	appAfterUpsertHooks = []AppHook{}
}

func testAppsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &App{}
	if err = randomize.Struct(seed, o, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Apps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAppsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &App{}
	if err = randomize.Struct(seed, o, appDBTypes, true); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(appColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Apps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAppToManyResourceAppAnnotations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c AppAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, appAnnotationDBTypes, false, appAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, appAnnotationDBTypes, false, appAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceAppAnnotations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AppSlice{&a}
	if err = a.L.LoadResourceAppAnnotations(ctx, tx, false, (*[]*App)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceAppAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceAppAnnotations = nil
	if err = a.L.LoadResourceAppAnnotations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceAppAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAppToManyResourceAppLabels(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c AppLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, appLabelDBTypes, false, appLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, appLabelDBTypes, false, appLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceAppLabels().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AppSlice{&a}
	if err = a.L.LoadResourceAppLabels(ctx, tx, false, (*[]*App)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceAppLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceAppLabels = nil
	if err = a.L.LoadResourceAppLabels(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceAppLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAppToManyBuilds(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c Build

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, buildDBTypes, false, buildColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, buildDBTypes, false, buildColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.AppGUID, a.GUID)
	queries.Assign(&c.AppGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Builds().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.AppGUID, b.AppGUID) {
			bFound = true
		}
		if queries.Equal(v.AppGUID, c.AppGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AppSlice{&a}
	if err = a.L.LoadBuilds(ctx, tx, false, (*[]*App)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Builds); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Builds = nil
	if err = a.L.LoadBuilds(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Builds); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAppToManyDeployments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c Deployment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, deploymentDBTypes, false, deploymentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, deploymentDBTypes, false, deploymentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.AppGUID, a.GUID)
	queries.Assign(&c.AppGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Deployments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.AppGUID, b.AppGUID) {
			bFound = true
		}
		if queries.Equal(v.AppGUID, c.AppGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AppSlice{&a}
	if err = a.L.LoadDeployments(ctx, tx, false, (*[]*App)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Deployments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Deployments = nil
	if err = a.L.LoadDeployments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Deployments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAppToManyDroplets(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c Droplet

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dropletDBTypes, false, dropletColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dropletDBTypes, false, dropletColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.AppGUID, a.GUID)
	queries.Assign(&c.AppGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Droplets().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.AppGUID, b.AppGUID) {
			bFound = true
		}
		if queries.Equal(v.AppGUID, c.AppGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AppSlice{&a}
	if err = a.L.LoadDroplets(ctx, tx, false, (*[]*App)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Droplets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Droplets = nil
	if err = a.L.LoadDroplets(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Droplets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAppToManyKpackLifecycleData(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c KpackLifecycleDatum

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, kpackLifecycleDatumDBTypes, false, kpackLifecycleDatumColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, kpackLifecycleDatumDBTypes, false, kpackLifecycleDatumColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.AppGUID, a.GUID)
	queries.Assign(&c.AppGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.KpackLifecycleData().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.AppGUID, b.AppGUID) {
			bFound = true
		}
		if queries.Equal(v.AppGUID, c.AppGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AppSlice{&a}
	if err = a.L.LoadKpackLifecycleData(ctx, tx, false, (*[]*App)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.KpackLifecycleData); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.KpackLifecycleData = nil
	if err = a.L.LoadKpackLifecycleData(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.KpackLifecycleData); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAppToManyPackages(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c Package

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, packageDBTypes, false, packageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, packageDBTypes, false, packageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.AppGUID, a.GUID)
	queries.Assign(&c.AppGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Packages().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.AppGUID, b.AppGUID) {
			bFound = true
		}
		if queries.Equal(v.AppGUID, c.AppGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AppSlice{&a}
	if err = a.L.LoadPackages(ctx, tx, false, (*[]*App)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Packages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Packages = nil
	if err = a.L.LoadPackages(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Packages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAppToManyProcesses(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c Process

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, processDBTypes, false, processColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, processDBTypes, false, processColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.AppGUID, a.GUID)
	queries.Assign(&c.AppGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Processes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.AppGUID, b.AppGUID) {
			bFound = true
		}
		if queries.Equal(v.AppGUID, c.AppGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AppSlice{&a}
	if err = a.L.LoadProcesses(ctx, tx, false, (*[]*App)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Processes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Processes = nil
	if err = a.L.LoadProcesses(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Processes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAppToManyRevisions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c Revision

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, revisionDBTypes, false, revisionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, revisionDBTypes, false, revisionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.AppGUID, a.GUID)
	queries.Assign(&c.AppGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Revisions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.AppGUID, b.AppGUID) {
			bFound = true
		}
		if queries.Equal(v.AppGUID, c.AppGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AppSlice{&a}
	if err = a.L.LoadRevisions(ctx, tx, false, (*[]*App)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Revisions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Revisions = nil
	if err = a.L.LoadRevisions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Revisions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAppToManyRouteMappings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c RouteMapping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, routeMappingDBTypes, false, routeMappingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, routeMappingDBTypes, false, routeMappingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.AppGUID = a.GUID
	c.AppGUID = a.GUID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RouteMappings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.AppGUID == b.AppGUID {
			bFound = true
		}
		if v.AppGUID == c.AppGUID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AppSlice{&a}
	if err = a.L.LoadRouteMappings(ctx, tx, false, (*[]*App)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RouteMappings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RouteMappings = nil
	if err = a.L.LoadRouteMappings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RouteMappings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAppToManyServiceBindings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c ServiceBinding

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serviceBindingDBTypes, false, serviceBindingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceBindingDBTypes, false, serviceBindingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.AppGUID = a.GUID
	c.AppGUID = a.GUID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ServiceBindings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.AppGUID == b.AppGUID {
			bFound = true
		}
		if v.AppGUID == c.AppGUID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AppSlice{&a}
	if err = a.L.LoadServiceBindings(ctx, tx, false, (*[]*App)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ServiceBindings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ServiceBindings = nil
	if err = a.L.LoadServiceBindings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ServiceBindings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAppToManySidecars(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c Sidecar

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, sidecarDBTypes, false, sidecarColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sidecarDBTypes, false, sidecarColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.AppGUID = a.GUID
	c.AppGUID = a.GUID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Sidecars().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.AppGUID == b.AppGUID {
			bFound = true
		}
		if v.AppGUID == c.AppGUID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AppSlice{&a}
	if err = a.L.LoadSidecars(ctx, tx, false, (*[]*App)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Sidecars); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Sidecars = nil
	if err = a.L.LoadSidecars(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Sidecars); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAppToManyTasks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c Task

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, taskDBTypes, false, taskColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, taskDBTypes, false, taskColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.AppGUID = a.GUID
	c.AppGUID = a.GUID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Tasks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.AppGUID == b.AppGUID {
			bFound = true
		}
		if v.AppGUID == c.AppGUID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AppSlice{&a}
	if err = a.L.LoadTasks(ctx, tx, false, (*[]*App)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Tasks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Tasks = nil
	if err = a.L.LoadTasks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Tasks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAppToManyAddOpResourceAppAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e AppAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AppAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appAnnotationDBTypes, false, strmangle.SetComplement(appAnnotationPrimaryKeyColumns, appAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AppAnnotation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceAppAnnotations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceAppAnnotations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceAppAnnotations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceAppAnnotations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAppToManySetOpResourceAppAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e AppAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AppAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appAnnotationDBTypes, false, strmangle.SetComplement(appAnnotationPrimaryKeyColumns, appAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceAppAnnotations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceAppAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceAppAnnotations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceAppAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceAppAnnotations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceAppAnnotations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAppToManyRemoveOpResourceAppAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e AppAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AppAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appAnnotationDBTypes, false, strmangle.SetComplement(appAnnotationPrimaryKeyColumns, appAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceAppAnnotations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceAppAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceAppAnnotations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceAppAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceAppAnnotations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceAppAnnotations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceAppAnnotations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAppToManyAddOpResourceAppLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e AppLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AppLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appLabelDBTypes, false, strmangle.SetComplement(appLabelPrimaryKeyColumns, appLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AppLabel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceAppLabels(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceAppLabels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceAppLabels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceAppLabels().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAppToManySetOpResourceAppLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e AppLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AppLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appLabelDBTypes, false, strmangle.SetComplement(appLabelPrimaryKeyColumns, appLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceAppLabels(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceAppLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceAppLabels(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceAppLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceAppLabels[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceAppLabels[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAppToManyRemoveOpResourceAppLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e AppLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AppLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appLabelDBTypes, false, strmangle.SetComplement(appLabelPrimaryKeyColumns, appLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceAppLabels(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceAppLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceAppLabels(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceAppLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceAppLabels) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceAppLabels[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceAppLabels[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAppToManyAddOpBuilds(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e Build

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Build{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, buildDBTypes, false, strmangle.SetComplement(buildPrimaryKeyColumns, buildColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Build{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddBuilds(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.AppGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.AppGUID)
		}
		if !queries.Equal(a.GUID, second.AppGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.AppGUID)
		}

		if first.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Builds[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Builds[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Builds().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAppToManySetOpBuilds(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e Build

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Build{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, buildDBTypes, false, strmangle.SetComplement(buildPrimaryKeyColumns, buildColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetBuilds(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Builds().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetBuilds(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Builds().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AppGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AppGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.AppGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.AppGUID)
	}
	if !queries.Equal(a.GUID, e.AppGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.AppGUID)
	}

	if b.R.App != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.App != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.App != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.App != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Builds[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Builds[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAppToManyRemoveOpBuilds(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e Build

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Build{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, buildDBTypes, false, strmangle.SetComplement(buildPrimaryKeyColumns, buildColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddBuilds(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Builds().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveBuilds(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Builds().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AppGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AppGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.App != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.App != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.App != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.App != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Builds) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Builds[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Builds[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAppToManyAddOpDeployments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e Deployment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Deployment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, deploymentDBTypes, false, strmangle.SetComplement(deploymentPrimaryKeyColumns, deploymentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Deployment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDeployments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.AppGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.AppGUID)
		}
		if !queries.Equal(a.GUID, second.AppGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.AppGUID)
		}

		if first.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Deployments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Deployments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Deployments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAppToManySetOpDeployments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e Deployment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Deployment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, deploymentDBTypes, false, strmangle.SetComplement(deploymentPrimaryKeyColumns, deploymentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetDeployments(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Deployments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetDeployments(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Deployments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AppGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AppGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.AppGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.AppGUID)
	}
	if !queries.Equal(a.GUID, e.AppGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.AppGUID)
	}

	if b.R.App != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.App != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.App != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.App != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Deployments[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Deployments[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAppToManyRemoveOpDeployments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e Deployment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Deployment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, deploymentDBTypes, false, strmangle.SetComplement(deploymentPrimaryKeyColumns, deploymentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddDeployments(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Deployments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveDeployments(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Deployments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AppGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AppGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.App != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.App != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.App != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.App != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Deployments) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Deployments[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Deployments[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAppToManyAddOpDroplets(t *testing.T) {
	t.Skip("Uniqueness constraints in our DB schema prevent this from ever passing")

}

func testAppToManySetOpDroplets(t *testing.T) {
	t.Skip("Uniqueness constraints in our DB schema prevent this from ever passing")

}

func testAppToManyRemoveOpDroplets(t *testing.T) {
	t.Skip("Uniqueness constraints in our DB schema prevent this from ever passing")

}

func testAppToManyAddOpKpackLifecycleData(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e KpackLifecycleDatum

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*KpackLifecycleDatum{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, kpackLifecycleDatumDBTypes, false, strmangle.SetComplement(kpackLifecycleDatumPrimaryKeyColumns, kpackLifecycleDatumColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*KpackLifecycleDatum{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddKpackLifecycleData(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.AppGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.AppGUID)
		}
		if !queries.Equal(a.GUID, second.AppGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.AppGUID)
		}

		if first.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.KpackLifecycleData[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.KpackLifecycleData[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.KpackLifecycleData().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAppToManySetOpKpackLifecycleData(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e KpackLifecycleDatum

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*KpackLifecycleDatum{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, kpackLifecycleDatumDBTypes, false, strmangle.SetComplement(kpackLifecycleDatumPrimaryKeyColumns, kpackLifecycleDatumColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetKpackLifecycleData(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.KpackLifecycleData().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetKpackLifecycleData(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.KpackLifecycleData().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AppGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AppGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.AppGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.AppGUID)
	}
	if !queries.Equal(a.GUID, e.AppGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.AppGUID)
	}

	if b.R.App != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.App != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.App != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.App != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.KpackLifecycleData[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.KpackLifecycleData[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAppToManyRemoveOpKpackLifecycleData(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e KpackLifecycleDatum

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*KpackLifecycleDatum{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, kpackLifecycleDatumDBTypes, false, strmangle.SetComplement(kpackLifecycleDatumPrimaryKeyColumns, kpackLifecycleDatumColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddKpackLifecycleData(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.KpackLifecycleData().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveKpackLifecycleData(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.KpackLifecycleData().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AppGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AppGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.App != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.App != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.App != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.App != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.KpackLifecycleData) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.KpackLifecycleData[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.KpackLifecycleData[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAppToManyAddOpPackages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e Package

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Package{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, packageDBTypes, false, strmangle.SetComplement(packagePrimaryKeyColumns, packageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Package{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPackages(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.AppGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.AppGUID)
		}
		if !queries.Equal(a.GUID, second.AppGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.AppGUID)
		}

		if first.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Packages[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Packages[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Packages().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAppToManySetOpPackages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e Package

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Package{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, packageDBTypes, false, strmangle.SetComplement(packagePrimaryKeyColumns, packageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPackages(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Packages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPackages(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Packages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AppGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AppGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.AppGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.AppGUID)
	}
	if !queries.Equal(a.GUID, e.AppGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.AppGUID)
	}

	if b.R.App != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.App != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.App != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.App != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Packages[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Packages[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAppToManyRemoveOpPackages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e Package

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Package{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, packageDBTypes, false, strmangle.SetComplement(packagePrimaryKeyColumns, packageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPackages(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Packages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePackages(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Packages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AppGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AppGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.App != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.App != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.App != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.App != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Packages) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Packages[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Packages[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAppToManyAddOpProcesses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e Process

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Process{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, processDBTypes, false, strmangle.SetComplement(processPrimaryKeyColumns, processColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Process{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProcesses(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.AppGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.AppGUID)
		}
		if !queries.Equal(a.GUID, second.AppGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.AppGUID)
		}

		if first.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Processes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Processes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Processes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAppToManySetOpProcesses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e Process

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Process{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, processDBTypes, false, strmangle.SetComplement(processPrimaryKeyColumns, processColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetProcesses(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Processes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetProcesses(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Processes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AppGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AppGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.AppGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.AppGUID)
	}
	if !queries.Equal(a.GUID, e.AppGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.AppGUID)
	}

	if b.R.App != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.App != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.App != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.App != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Processes[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Processes[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAppToManyRemoveOpProcesses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e Process

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Process{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, processDBTypes, false, strmangle.SetComplement(processPrimaryKeyColumns, processColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddProcesses(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Processes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveProcesses(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Processes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AppGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AppGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.App != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.App != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.App != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.App != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Processes) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Processes[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Processes[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAppToManyAddOpRevisions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e Revision

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Revision{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, revisionDBTypes, false, strmangle.SetComplement(revisionPrimaryKeyColumns, revisionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Revision{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRevisions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.AppGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.AppGUID)
		}
		if !queries.Equal(a.GUID, second.AppGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.AppGUID)
		}

		if first.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Revisions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Revisions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Revisions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAppToManySetOpRevisions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e Revision

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Revision{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, revisionDBTypes, false, strmangle.SetComplement(revisionPrimaryKeyColumns, revisionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetRevisions(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Revisions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetRevisions(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Revisions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AppGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AppGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.AppGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.AppGUID)
	}
	if !queries.Equal(a.GUID, e.AppGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.AppGUID)
	}

	if b.R.App != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.App != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.App != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.App != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Revisions[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Revisions[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAppToManyRemoveOpRevisions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e Revision

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Revision{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, revisionDBTypes, false, strmangle.SetComplement(revisionPrimaryKeyColumns, revisionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddRevisions(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Revisions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveRevisions(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Revisions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AppGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AppGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.App != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.App != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.App != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.App != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Revisions) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Revisions[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Revisions[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAppToManyAddOpRouteMappings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e RouteMapping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RouteMapping{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, routeMappingDBTypes, false, strmangle.SetComplement(routeMappingPrimaryKeyColumns, routeMappingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RouteMapping{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRouteMappings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.GUID != first.AppGUID {
			t.Error("foreign key was wrong value", a.GUID, first.AppGUID)
		}
		if a.GUID != second.AppGUID {
			t.Error("foreign key was wrong value", a.GUID, second.AppGUID)
		}

		if first.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RouteMappings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RouteMappings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RouteMappings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAppToManyAddOpServiceBindings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e ServiceBinding

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBinding{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBindingDBTypes, false, strmangle.SetComplement(serviceBindingPrimaryKeyColumns, serviceBindingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServiceBinding{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddServiceBindings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.GUID != first.AppGUID {
			t.Error("foreign key was wrong value", a.GUID, first.AppGUID)
		}
		if a.GUID != second.AppGUID {
			t.Error("foreign key was wrong value", a.GUID, second.AppGUID)
		}

		if first.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ServiceBindings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ServiceBindings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ServiceBindings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAppToManyAddOpSidecars(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e Sidecar

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Sidecar{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sidecarDBTypes, false, strmangle.SetComplement(sidecarPrimaryKeyColumns, sidecarColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Sidecar{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSidecars(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.GUID != first.AppGUID {
			t.Error("foreign key was wrong value", a.GUID, first.AppGUID)
		}
		if a.GUID != second.AppGUID {
			t.Error("foreign key was wrong value", a.GUID, second.AppGUID)
		}

		if first.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Sidecars[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Sidecars[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Sidecars().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAppToManyAddOpTasks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c, d, e Task

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Task{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Task{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTasks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.GUID != first.AppGUID {
			t.Error("foreign key was wrong value", a.GUID, first.AppGUID)
		}
		if a.GUID != second.AppGUID {
			t.Error("foreign key was wrong value", a.GUID, second.AppGUID)
		}

		if first.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Tasks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Tasks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Tasks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAppToOneSpaceUsingSpace(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local App
	var foreign Space

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, spaceDBTypes, false, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SpaceGUID, foreign.GUID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Space().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.GUID, foreign.GUID) {
		t.Errorf("want: %v, got %v", foreign.GUID, check.GUID)
	}

	slice := AppSlice{&local}
	if err = local.L.LoadSpace(ctx, tx, false, (*[]*App)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Space == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Space = nil
	if err = local.L.LoadSpace(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Space == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAppToOneSetOpSpaceUsingSpace(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b, c Space

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Space{&b, &c} {
		err = a.SetSpace(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Space != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Apps[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SpaceGUID, x.GUID) {
			t.Error("foreign key was wrong value", a.SpaceGUID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SpaceGUID))
		reflect.Indirect(reflect.ValueOf(&a.SpaceGUID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SpaceGUID, x.GUID) {
			t.Error("foreign key was wrong value", a.SpaceGUID, x.GUID)
		}
	}
}

func testAppToOneRemoveOpSpaceUsingSpace(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a App
	var b Space

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSpace(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSpace(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Space().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Space != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SpaceGUID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Apps) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAppsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &App{}
	if err = randomize.Struct(seed, o, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAppsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &App{}
	if err = randomize.Struct(seed, o, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AppSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAppsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &App{}
	if err = randomize.Struct(seed, o, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Apps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	appDBTypes = map[string]string{`ID`: `integer`, `GUID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `SpaceGUID`: `text`, `Name`: `USER-DEFINED`, `DropletGUID`: `text`, `DesiredState`: `text`, `EncryptedEnvironmentVariables`: `text`, `Salt`: `text`, `MaxTaskSequenceID`: `integer`, `BuildpackCacheSha256Checksum`: `text`, `EnableSSH`: `boolean`, `EncryptionKeyLabel`: `character varying`, `EncryptionIterations`: `integer`, `RevisionsEnabled`: `boolean`}
	_          = bytes.MinRead
)

func testAppsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(appPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(appAllColumns) == len(appPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &App{}
	if err = randomize.Struct(seed, o, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Apps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, appDBTypes, true, appPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAppsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(appAllColumns) == len(appPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &App{}
	if err = randomize.Struct(seed, o, appDBTypes, true, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Apps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, appDBTypes, true, appPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(appAllColumns, appPrimaryKeyColumns) {
		fields = appAllColumns
	} else {
		fields = strmangle.SetComplement(
			appAllColumns,
			appPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AppSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAppsUpsert(t *testing.T) {
	t.Parallel()

	if len(appAllColumns) == len(appPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := App{}
	if err = randomize.Struct(seed, &o, appDBTypes, true); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert App: %s", err)
	}

	count, err := Apps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, appDBTypes, false, appPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert App: %s", err)
	}

	count, err = Apps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
