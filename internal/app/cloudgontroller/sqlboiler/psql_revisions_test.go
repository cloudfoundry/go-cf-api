// +build psql,db
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRevisions(t *testing.T) {
	t.Parallel()

	query := Revisions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRevisionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Revision{}
	if err = randomize.Struct(seed, o, revisionDBTypes, true, revisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Revisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRevisionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Revision{}
	if err = randomize.Struct(seed, o, revisionDBTypes, true, revisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Revisions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Revisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRevisionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Revision{}
	if err = randomize.Struct(seed, o, revisionDBTypes, true, revisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RevisionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Revisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRevisionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Revision{}
	if err = randomize.Struct(seed, o, revisionDBTypes, true, revisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RevisionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Revision exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RevisionExists to return true, but got false.")
	}
}

func testRevisionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Revision{}
	if err = randomize.Struct(seed, o, revisionDBTypes, true, revisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	revisionFound, err := FindRevision(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if revisionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRevisionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Revision{}
	if err = randomize.Struct(seed, o, revisionDBTypes, true, revisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Revisions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRevisionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Revision{}
	if err = randomize.Struct(seed, o, revisionDBTypes, true, revisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Revisions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRevisionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	revisionOne := &Revision{}
	revisionTwo := &Revision{}
	if err = randomize.Struct(seed, revisionOne, revisionDBTypes, false, revisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}
	if err = randomize.Struct(seed, revisionTwo, revisionDBTypes, false, revisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = revisionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = revisionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Revisions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRevisionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	revisionOne := &Revision{}
	revisionTwo := &Revision{}
	if err = randomize.Struct(seed, revisionOne, revisionDBTypes, false, revisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}
	if err = randomize.Struct(seed, revisionTwo, revisionDBTypes, false, revisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = revisionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = revisionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Revisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func revisionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Revision) error {
	*o = Revision{}
	return nil
}

func revisionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Revision) error {
	*o = Revision{}
	return nil
}

func revisionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Revision) error {
	*o = Revision{}
	return nil
}

func revisionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Revision) error {
	*o = Revision{}
	return nil
}

func revisionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Revision) error {
	*o = Revision{}
	return nil
}

func revisionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Revision) error {
	*o = Revision{}
	return nil
}

func revisionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Revision) error {
	*o = Revision{}
	return nil
}

func revisionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Revision) error {
	*o = Revision{}
	return nil
}

func revisionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Revision) error {
	*o = Revision{}
	return nil
}

func testRevisionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Revision{}
	o := &Revision{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, revisionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Revision object: %s", err)
	}

	AddRevisionHook(boil.BeforeInsertHook, revisionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	revisionBeforeInsertHooks = []RevisionHook{}

	AddRevisionHook(boil.AfterInsertHook, revisionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	revisionAfterInsertHooks = []RevisionHook{}

	AddRevisionHook(boil.AfterSelectHook, revisionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	revisionAfterSelectHooks = []RevisionHook{}

	AddRevisionHook(boil.BeforeUpdateHook, revisionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	revisionBeforeUpdateHooks = []RevisionHook{}

	AddRevisionHook(boil.AfterUpdateHook, revisionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	revisionAfterUpdateHooks = []RevisionHook{}

	AddRevisionHook(boil.BeforeDeleteHook, revisionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	revisionBeforeDeleteHooks = []RevisionHook{}

	AddRevisionHook(boil.AfterDeleteHook, revisionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	revisionAfterDeleteHooks = []RevisionHook{}

	AddRevisionHook(boil.BeforeUpsertHook, revisionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	revisionBeforeUpsertHooks = []RevisionHook{}

	AddRevisionHook(boil.AfterUpsertHook, revisionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	revisionAfterUpsertHooks = []RevisionHook{}
}

func testRevisionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Revision{}
	if err = randomize.Struct(seed, o, revisionDBTypes, true, revisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Revisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRevisionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Revision{}
	if err = randomize.Struct(seed, o, revisionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(revisionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Revisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRevisionToManyResourceRevisionAnnotations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Revision
	var b, c RevisionAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, revisionDBTypes, true, revisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, revisionAnnotationDBTypes, false, revisionAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, revisionAnnotationDBTypes, false, revisionAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceRevisionAnnotations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RevisionSlice{&a}
	if err = a.L.LoadResourceRevisionAnnotations(ctx, tx, false, (*[]*Revision)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceRevisionAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceRevisionAnnotations = nil
	if err = a.L.LoadResourceRevisionAnnotations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceRevisionAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRevisionToManyResourceRevisionLabels(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Revision
	var b, c RevisionLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, revisionDBTypes, true, revisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, revisionLabelDBTypes, false, revisionLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, revisionLabelDBTypes, false, revisionLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceRevisionLabels().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RevisionSlice{&a}
	if err = a.L.LoadResourceRevisionLabels(ctx, tx, false, (*[]*Revision)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceRevisionLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceRevisionLabels = nil
	if err = a.L.LoadResourceRevisionLabels(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceRevisionLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRevisionToManyRevisionProcessCommands(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Revision
	var b, c RevisionProcessCommand

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, revisionDBTypes, true, revisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, revisionProcessCommandDBTypes, false, revisionProcessCommandColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, revisionProcessCommandDBTypes, false, revisionProcessCommandColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.RevisionGUID = a.GUID
	c.RevisionGUID = a.GUID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RevisionProcessCommands().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.RevisionGUID == b.RevisionGUID {
			bFound = true
		}
		if v.RevisionGUID == c.RevisionGUID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RevisionSlice{&a}
	if err = a.L.LoadRevisionProcessCommands(ctx, tx, false, (*[]*Revision)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RevisionProcessCommands); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RevisionProcessCommands = nil
	if err = a.L.LoadRevisionProcessCommands(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RevisionProcessCommands); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRevisionToManyRevisionSidecars(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Revision
	var b, c RevisionSidecar

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, revisionDBTypes, true, revisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, revisionSidecarDBTypes, false, revisionSidecarColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, revisionSidecarDBTypes, false, revisionSidecarColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.RevisionGUID = a.GUID
	c.RevisionGUID = a.GUID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RevisionSidecars().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.RevisionGUID == b.RevisionGUID {
			bFound = true
		}
		if v.RevisionGUID == c.RevisionGUID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RevisionSlice{&a}
	if err = a.L.LoadRevisionSidecars(ctx, tx, false, (*[]*Revision)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RevisionSidecars); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RevisionSidecars = nil
	if err = a.L.LoadRevisionSidecars(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RevisionSidecars); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRevisionToManyAddOpResourceRevisionAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Revision
	var b, c, d, e RevisionAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, revisionDBTypes, false, strmangle.SetComplement(revisionPrimaryKeyColumns, revisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RevisionAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, revisionAnnotationDBTypes, false, strmangle.SetComplement(revisionAnnotationPrimaryKeyColumns, revisionAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RevisionAnnotation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceRevisionAnnotations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceRevisionAnnotations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceRevisionAnnotations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceRevisionAnnotations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRevisionToManySetOpResourceRevisionAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Revision
	var b, c, d, e RevisionAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, revisionDBTypes, false, strmangle.SetComplement(revisionPrimaryKeyColumns, revisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RevisionAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, revisionAnnotationDBTypes, false, strmangle.SetComplement(revisionAnnotationPrimaryKeyColumns, revisionAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceRevisionAnnotations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceRevisionAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceRevisionAnnotations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceRevisionAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceRevisionAnnotations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceRevisionAnnotations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRevisionToManyRemoveOpResourceRevisionAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Revision
	var b, c, d, e RevisionAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, revisionDBTypes, false, strmangle.SetComplement(revisionPrimaryKeyColumns, revisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RevisionAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, revisionAnnotationDBTypes, false, strmangle.SetComplement(revisionAnnotationPrimaryKeyColumns, revisionAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceRevisionAnnotations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceRevisionAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceRevisionAnnotations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceRevisionAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceRevisionAnnotations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceRevisionAnnotations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceRevisionAnnotations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRevisionToManyAddOpResourceRevisionLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Revision
	var b, c, d, e RevisionLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, revisionDBTypes, false, strmangle.SetComplement(revisionPrimaryKeyColumns, revisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RevisionLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, revisionLabelDBTypes, false, strmangle.SetComplement(revisionLabelPrimaryKeyColumns, revisionLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RevisionLabel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceRevisionLabels(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceRevisionLabels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceRevisionLabels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceRevisionLabels().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRevisionToManySetOpResourceRevisionLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Revision
	var b, c, d, e RevisionLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, revisionDBTypes, false, strmangle.SetComplement(revisionPrimaryKeyColumns, revisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RevisionLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, revisionLabelDBTypes, false, strmangle.SetComplement(revisionLabelPrimaryKeyColumns, revisionLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceRevisionLabels(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceRevisionLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceRevisionLabels(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceRevisionLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceRevisionLabels[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceRevisionLabels[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRevisionToManyRemoveOpResourceRevisionLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Revision
	var b, c, d, e RevisionLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, revisionDBTypes, false, strmangle.SetComplement(revisionPrimaryKeyColumns, revisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RevisionLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, revisionLabelDBTypes, false, strmangle.SetComplement(revisionLabelPrimaryKeyColumns, revisionLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceRevisionLabels(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceRevisionLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceRevisionLabels(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceRevisionLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceRevisionLabels) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceRevisionLabels[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceRevisionLabels[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRevisionToManyAddOpRevisionProcessCommands(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Revision
	var b, c, d, e RevisionProcessCommand

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, revisionDBTypes, false, strmangle.SetComplement(revisionPrimaryKeyColumns, revisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RevisionProcessCommand{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, revisionProcessCommandDBTypes, false, strmangle.SetComplement(revisionProcessCommandPrimaryKeyColumns, revisionProcessCommandColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RevisionProcessCommand{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRevisionProcessCommands(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.GUID != first.RevisionGUID {
			t.Error("foreign key was wrong value", a.GUID, first.RevisionGUID)
		}
		if a.GUID != second.RevisionGUID {
			t.Error("foreign key was wrong value", a.GUID, second.RevisionGUID)
		}

		if first.R.Revision != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Revision != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RevisionProcessCommands[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RevisionProcessCommands[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RevisionProcessCommands().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRevisionToManyAddOpRevisionSidecars(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Revision
	var b, c, d, e RevisionSidecar

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, revisionDBTypes, false, strmangle.SetComplement(revisionPrimaryKeyColumns, revisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RevisionSidecar{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, revisionSidecarDBTypes, false, strmangle.SetComplement(revisionSidecarPrimaryKeyColumns, revisionSidecarColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RevisionSidecar{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRevisionSidecars(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.GUID != first.RevisionGUID {
			t.Error("foreign key was wrong value", a.GUID, first.RevisionGUID)
		}
		if a.GUID != second.RevisionGUID {
			t.Error("foreign key was wrong value", a.GUID, second.RevisionGUID)
		}

		if first.R.Revision != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Revision != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RevisionSidecars[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RevisionSidecars[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RevisionSidecars().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRevisionToOneAppUsingApp(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Revision
	var foreign App

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, revisionDBTypes, true, revisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, appDBTypes, false, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.AppGUID, foreign.GUID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.App().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.GUID, foreign.GUID) {
		t.Errorf("want: %v, got %v", foreign.GUID, check.GUID)
	}

	slice := RevisionSlice{&local}
	if err = local.L.LoadApp(ctx, tx, false, (*[]*Revision)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.App == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.App = nil
	if err = local.L.LoadApp(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.App == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRevisionToOneSetOpAppUsingApp(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Revision
	var b, c App

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, revisionDBTypes, false, strmangle.SetComplement(revisionPrimaryKeyColumns, revisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*App{&b, &c} {
		err = a.SetApp(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.App != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Revisions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.AppGUID, x.GUID) {
			t.Error("foreign key was wrong value", a.AppGUID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AppGUID))
		reflect.Indirect(reflect.ValueOf(&a.AppGUID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.AppGUID, x.GUID) {
			t.Error("foreign key was wrong value", a.AppGUID, x.GUID)
		}
	}
}

func testRevisionToOneRemoveOpAppUsingApp(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Revision
	var b App

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, revisionDBTypes, false, strmangle.SetComplement(revisionPrimaryKeyColumns, revisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetApp(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveApp(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.App().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.App != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.AppGUID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Revisions) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRevisionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Revision{}
	if err = randomize.Struct(seed, o, revisionDBTypes, true, revisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRevisionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Revision{}
	if err = randomize.Struct(seed, o, revisionDBTypes, true, revisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RevisionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRevisionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Revision{}
	if err = randomize.Struct(seed, o, revisionDBTypes, true, revisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Revisions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	revisionDBTypes = map[string]string{`ID`: `integer`, `GUID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `AppGUID`: `character varying`, `Version`: `integer`, `DropletGUID`: `character varying`, `EncryptedEnvironmentVariables`: `text`, `Salt`: `character varying`, `EncryptionKeyLabel`: `character varying`, `EncryptionIterations`: `integer`, `Description`: `text`}
	_               = bytes.MinRead
)

func testRevisionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(revisionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(revisionAllColumns) == len(revisionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Revision{}
	if err = randomize.Struct(seed, o, revisionDBTypes, true, revisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Revisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, revisionDBTypes, true, revisionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRevisionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(revisionAllColumns) == len(revisionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Revision{}
	if err = randomize.Struct(seed, o, revisionDBTypes, true, revisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Revisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, revisionDBTypes, true, revisionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(revisionAllColumns, revisionPrimaryKeyColumns) {
		fields = revisionAllColumns
	} else {
		fields = strmangle.SetComplement(
			revisionAllColumns,
			revisionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RevisionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRevisionsUpsert(t *testing.T) {
	t.Parallel()

	if len(revisionAllColumns) == len(revisionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Revision{}
	if err = randomize.Struct(seed, &o, revisionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Revision: %s", err)
	}

	count, err := Revisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, revisionDBTypes, false, revisionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Revision struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Revision: %s", err)
	}

	count, err = Revisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
