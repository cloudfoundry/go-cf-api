// +build mysql_integration
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testEncryptionKeySentinels(t *testing.T) {
	t.Parallel()

	query := EncryptionKeySentinels()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testEncryptionKeySentinelsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EncryptionKeySentinel{}
	if err = randomize.Struct(seed, o, encryptionKeySentinelDBTypes, true, encryptionKeySentinelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EncryptionKeySentinel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EncryptionKeySentinels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEncryptionKeySentinelsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EncryptionKeySentinel{}
	if err = randomize.Struct(seed, o, encryptionKeySentinelDBTypes, true, encryptionKeySentinelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EncryptionKeySentinel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := EncryptionKeySentinels().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EncryptionKeySentinels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEncryptionKeySentinelsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EncryptionKeySentinel{}
	if err = randomize.Struct(seed, o, encryptionKeySentinelDBTypes, true, encryptionKeySentinelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EncryptionKeySentinel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EncryptionKeySentinelSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EncryptionKeySentinels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEncryptionKeySentinelsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EncryptionKeySentinel{}
	if err = randomize.Struct(seed, o, encryptionKeySentinelDBTypes, true, encryptionKeySentinelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EncryptionKeySentinel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := EncryptionKeySentinelExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if EncryptionKeySentinel exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EncryptionKeySentinelExists to return true, but got false.")
	}
}

func testEncryptionKeySentinelsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EncryptionKeySentinel{}
	if err = randomize.Struct(seed, o, encryptionKeySentinelDBTypes, true, encryptionKeySentinelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EncryptionKeySentinel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	encryptionKeySentinelFound, err := FindEncryptionKeySentinel(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if encryptionKeySentinelFound == nil {
		t.Error("want a record, got nil")
	}
}

func testEncryptionKeySentinelsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EncryptionKeySentinel{}
	if err = randomize.Struct(seed, o, encryptionKeySentinelDBTypes, true, encryptionKeySentinelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EncryptionKeySentinel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = EncryptionKeySentinels().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testEncryptionKeySentinelsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EncryptionKeySentinel{}
	if err = randomize.Struct(seed, o, encryptionKeySentinelDBTypes, true, encryptionKeySentinelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EncryptionKeySentinel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := EncryptionKeySentinels().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEncryptionKeySentinelsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	encryptionKeySentinelOne := &EncryptionKeySentinel{}
	encryptionKeySentinelTwo := &EncryptionKeySentinel{}
	if err = randomize.Struct(seed, encryptionKeySentinelOne, encryptionKeySentinelDBTypes, false, encryptionKeySentinelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EncryptionKeySentinel struct: %s", err)
	}
	if err = randomize.Struct(seed, encryptionKeySentinelTwo, encryptionKeySentinelDBTypes, false, encryptionKeySentinelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EncryptionKeySentinel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = encryptionKeySentinelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = encryptionKeySentinelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EncryptionKeySentinels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEncryptionKeySentinelsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	encryptionKeySentinelOne := &EncryptionKeySentinel{}
	encryptionKeySentinelTwo := &EncryptionKeySentinel{}
	if err = randomize.Struct(seed, encryptionKeySentinelOne, encryptionKeySentinelDBTypes, false, encryptionKeySentinelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EncryptionKeySentinel struct: %s", err)
	}
	if err = randomize.Struct(seed, encryptionKeySentinelTwo, encryptionKeySentinelDBTypes, false, encryptionKeySentinelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EncryptionKeySentinel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = encryptionKeySentinelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = encryptionKeySentinelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EncryptionKeySentinels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func encryptionKeySentinelBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *EncryptionKeySentinel) error {
	*o = EncryptionKeySentinel{}
	return nil
}

func encryptionKeySentinelAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *EncryptionKeySentinel) error {
	*o = EncryptionKeySentinel{}
	return nil
}

func encryptionKeySentinelAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *EncryptionKeySentinel) error {
	*o = EncryptionKeySentinel{}
	return nil
}

func encryptionKeySentinelBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *EncryptionKeySentinel) error {
	*o = EncryptionKeySentinel{}
	return nil
}

func encryptionKeySentinelAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *EncryptionKeySentinel) error {
	*o = EncryptionKeySentinel{}
	return nil
}

func encryptionKeySentinelBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *EncryptionKeySentinel) error {
	*o = EncryptionKeySentinel{}
	return nil
}

func encryptionKeySentinelAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *EncryptionKeySentinel) error {
	*o = EncryptionKeySentinel{}
	return nil
}

func encryptionKeySentinelBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *EncryptionKeySentinel) error {
	*o = EncryptionKeySentinel{}
	return nil
}

func encryptionKeySentinelAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *EncryptionKeySentinel) error {
	*o = EncryptionKeySentinel{}
	return nil
}

func testEncryptionKeySentinelsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &EncryptionKeySentinel{}
	o := &EncryptionKeySentinel{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, encryptionKeySentinelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize EncryptionKeySentinel object: %s", err)
	}

	AddEncryptionKeySentinelHook(boil.BeforeInsertHook, encryptionKeySentinelBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	encryptionKeySentinelBeforeInsertHooks = []EncryptionKeySentinelHook{}

	AddEncryptionKeySentinelHook(boil.AfterInsertHook, encryptionKeySentinelAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	encryptionKeySentinelAfterInsertHooks = []EncryptionKeySentinelHook{}

	AddEncryptionKeySentinelHook(boil.AfterSelectHook, encryptionKeySentinelAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	encryptionKeySentinelAfterSelectHooks = []EncryptionKeySentinelHook{}

	AddEncryptionKeySentinelHook(boil.BeforeUpdateHook, encryptionKeySentinelBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	encryptionKeySentinelBeforeUpdateHooks = []EncryptionKeySentinelHook{}

	AddEncryptionKeySentinelHook(boil.AfterUpdateHook, encryptionKeySentinelAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	encryptionKeySentinelAfterUpdateHooks = []EncryptionKeySentinelHook{}

	AddEncryptionKeySentinelHook(boil.BeforeDeleteHook, encryptionKeySentinelBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	encryptionKeySentinelBeforeDeleteHooks = []EncryptionKeySentinelHook{}

	AddEncryptionKeySentinelHook(boil.AfterDeleteHook, encryptionKeySentinelAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	encryptionKeySentinelAfterDeleteHooks = []EncryptionKeySentinelHook{}

	AddEncryptionKeySentinelHook(boil.BeforeUpsertHook, encryptionKeySentinelBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	encryptionKeySentinelBeforeUpsertHooks = []EncryptionKeySentinelHook{}

	AddEncryptionKeySentinelHook(boil.AfterUpsertHook, encryptionKeySentinelAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	encryptionKeySentinelAfterUpsertHooks = []EncryptionKeySentinelHook{}
}

func testEncryptionKeySentinelsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EncryptionKeySentinel{}
	if err = randomize.Struct(seed, o, encryptionKeySentinelDBTypes, true, encryptionKeySentinelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EncryptionKeySentinel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EncryptionKeySentinels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEncryptionKeySentinelsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EncryptionKeySentinel{}
	if err = randomize.Struct(seed, o, encryptionKeySentinelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EncryptionKeySentinel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(encryptionKeySentinelColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := EncryptionKeySentinels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEncryptionKeySentinelsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EncryptionKeySentinel{}
	if err = randomize.Struct(seed, o, encryptionKeySentinelDBTypes, true, encryptionKeySentinelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EncryptionKeySentinel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEncryptionKeySentinelsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EncryptionKeySentinel{}
	if err = randomize.Struct(seed, o, encryptionKeySentinelDBTypes, true, encryptionKeySentinelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EncryptionKeySentinel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EncryptionKeySentinelSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEncryptionKeySentinelsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EncryptionKeySentinel{}
	if err = randomize.Struct(seed, o, encryptionKeySentinelDBTypes, true, encryptionKeySentinelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EncryptionKeySentinel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EncryptionKeySentinels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	encryptionKeySentinelDBTypes = map[string]string{`ID`: `int`, `GUID`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `ExpectedValue`: `varchar`, `EncryptedValue`: `varchar`, `EncryptionKeyLabel`: `varchar`, `Salt`: `varchar`, `EncryptionIterations`: `int`}
	_                            = bytes.MinRead
)

func testEncryptionKeySentinelsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(encryptionKeySentinelPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(encryptionKeySentinelAllColumns) == len(encryptionKeySentinelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EncryptionKeySentinel{}
	if err = randomize.Struct(seed, o, encryptionKeySentinelDBTypes, true, encryptionKeySentinelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EncryptionKeySentinel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EncryptionKeySentinels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, encryptionKeySentinelDBTypes, true, encryptionKeySentinelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EncryptionKeySentinel struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testEncryptionKeySentinelsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(encryptionKeySentinelAllColumns) == len(encryptionKeySentinelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EncryptionKeySentinel{}
	if err = randomize.Struct(seed, o, encryptionKeySentinelDBTypes, true, encryptionKeySentinelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EncryptionKeySentinel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EncryptionKeySentinels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, encryptionKeySentinelDBTypes, true, encryptionKeySentinelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EncryptionKeySentinel struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(encryptionKeySentinelAllColumns, encryptionKeySentinelPrimaryKeyColumns) {
		fields = encryptionKeySentinelAllColumns
	} else {
		fields = strmangle.SetComplement(
			encryptionKeySentinelAllColumns,
			encryptionKeySentinelPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := EncryptionKeySentinelSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testEncryptionKeySentinelsUpsert(t *testing.T) {
	t.Parallel()

	if len(encryptionKeySentinelAllColumns) == len(encryptionKeySentinelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLEncryptionKeySentinelUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := EncryptionKeySentinel{}
	if err = randomize.Struct(seed, &o, encryptionKeySentinelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize EncryptionKeySentinel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EncryptionKeySentinel: %s", err)
	}

	count, err := EncryptionKeySentinels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, encryptionKeySentinelDBTypes, false, encryptionKeySentinelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EncryptionKeySentinel struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EncryptionKeySentinel: %s", err)
	}

	count, err = EncryptionKeySentinels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
