// +build psql,db
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testServiceBrokerUpdateRequests(t *testing.T) {
	t.Parallel()

	query := ServiceBrokerUpdateRequests()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testServiceBrokerUpdateRequestsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBrokerUpdateRequest{}
	if err = randomize.Struct(seed, o, serviceBrokerUpdateRequestDBTypes, true, serviceBrokerUpdateRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServiceBrokerUpdateRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServiceBrokerUpdateRequestsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBrokerUpdateRequest{}
	if err = randomize.Struct(seed, o, serviceBrokerUpdateRequestDBTypes, true, serviceBrokerUpdateRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ServiceBrokerUpdateRequests().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServiceBrokerUpdateRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServiceBrokerUpdateRequestsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBrokerUpdateRequest{}
	if err = randomize.Struct(seed, o, serviceBrokerUpdateRequestDBTypes, true, serviceBrokerUpdateRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServiceBrokerUpdateRequestSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServiceBrokerUpdateRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServiceBrokerUpdateRequestsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBrokerUpdateRequest{}
	if err = randomize.Struct(seed, o, serviceBrokerUpdateRequestDBTypes, true, serviceBrokerUpdateRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ServiceBrokerUpdateRequestExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ServiceBrokerUpdateRequest exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ServiceBrokerUpdateRequestExists to return true, but got false.")
	}
}

func testServiceBrokerUpdateRequestsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBrokerUpdateRequest{}
	if err = randomize.Struct(seed, o, serviceBrokerUpdateRequestDBTypes, true, serviceBrokerUpdateRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	serviceBrokerUpdateRequestFound, err := FindServiceBrokerUpdateRequest(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if serviceBrokerUpdateRequestFound == nil {
		t.Error("want a record, got nil")
	}
}

func testServiceBrokerUpdateRequestsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBrokerUpdateRequest{}
	if err = randomize.Struct(seed, o, serviceBrokerUpdateRequestDBTypes, true, serviceBrokerUpdateRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ServiceBrokerUpdateRequests().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testServiceBrokerUpdateRequestsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBrokerUpdateRequest{}
	if err = randomize.Struct(seed, o, serviceBrokerUpdateRequestDBTypes, true, serviceBrokerUpdateRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ServiceBrokerUpdateRequests().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testServiceBrokerUpdateRequestsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	serviceBrokerUpdateRequestOne := &ServiceBrokerUpdateRequest{}
	serviceBrokerUpdateRequestTwo := &ServiceBrokerUpdateRequest{}
	if err = randomize.Struct(seed, serviceBrokerUpdateRequestOne, serviceBrokerUpdateRequestDBTypes, false, serviceBrokerUpdateRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}
	if err = randomize.Struct(seed, serviceBrokerUpdateRequestTwo, serviceBrokerUpdateRequestDBTypes, false, serviceBrokerUpdateRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serviceBrokerUpdateRequestOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serviceBrokerUpdateRequestTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServiceBrokerUpdateRequests().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testServiceBrokerUpdateRequestsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	serviceBrokerUpdateRequestOne := &ServiceBrokerUpdateRequest{}
	serviceBrokerUpdateRequestTwo := &ServiceBrokerUpdateRequest{}
	if err = randomize.Struct(seed, serviceBrokerUpdateRequestOne, serviceBrokerUpdateRequestDBTypes, false, serviceBrokerUpdateRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}
	if err = randomize.Struct(seed, serviceBrokerUpdateRequestTwo, serviceBrokerUpdateRequestDBTypes, false, serviceBrokerUpdateRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serviceBrokerUpdateRequestOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serviceBrokerUpdateRequestTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServiceBrokerUpdateRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func serviceBrokerUpdateRequestBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBrokerUpdateRequest) error {
	*o = ServiceBrokerUpdateRequest{}
	return nil
}

func serviceBrokerUpdateRequestAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBrokerUpdateRequest) error {
	*o = ServiceBrokerUpdateRequest{}
	return nil
}

func serviceBrokerUpdateRequestAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBrokerUpdateRequest) error {
	*o = ServiceBrokerUpdateRequest{}
	return nil
}

func serviceBrokerUpdateRequestBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBrokerUpdateRequest) error {
	*o = ServiceBrokerUpdateRequest{}
	return nil
}

func serviceBrokerUpdateRequestAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBrokerUpdateRequest) error {
	*o = ServiceBrokerUpdateRequest{}
	return nil
}

func serviceBrokerUpdateRequestBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBrokerUpdateRequest) error {
	*o = ServiceBrokerUpdateRequest{}
	return nil
}

func serviceBrokerUpdateRequestAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBrokerUpdateRequest) error {
	*o = ServiceBrokerUpdateRequest{}
	return nil
}

func serviceBrokerUpdateRequestBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBrokerUpdateRequest) error {
	*o = ServiceBrokerUpdateRequest{}
	return nil
}

func serviceBrokerUpdateRequestAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBrokerUpdateRequest) error {
	*o = ServiceBrokerUpdateRequest{}
	return nil
}

func testServiceBrokerUpdateRequestsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ServiceBrokerUpdateRequest{}
	o := &ServiceBrokerUpdateRequest{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, serviceBrokerUpdateRequestDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest object: %s", err)
	}

	AddServiceBrokerUpdateRequestHook(boil.BeforeInsertHook, serviceBrokerUpdateRequestBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	serviceBrokerUpdateRequestBeforeInsertHooks = []ServiceBrokerUpdateRequestHook{}

	AddServiceBrokerUpdateRequestHook(boil.AfterInsertHook, serviceBrokerUpdateRequestAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	serviceBrokerUpdateRequestAfterInsertHooks = []ServiceBrokerUpdateRequestHook{}

	AddServiceBrokerUpdateRequestHook(boil.AfterSelectHook, serviceBrokerUpdateRequestAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	serviceBrokerUpdateRequestAfterSelectHooks = []ServiceBrokerUpdateRequestHook{}

	AddServiceBrokerUpdateRequestHook(boil.BeforeUpdateHook, serviceBrokerUpdateRequestBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	serviceBrokerUpdateRequestBeforeUpdateHooks = []ServiceBrokerUpdateRequestHook{}

	AddServiceBrokerUpdateRequestHook(boil.AfterUpdateHook, serviceBrokerUpdateRequestAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	serviceBrokerUpdateRequestAfterUpdateHooks = []ServiceBrokerUpdateRequestHook{}

	AddServiceBrokerUpdateRequestHook(boil.BeforeDeleteHook, serviceBrokerUpdateRequestBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	serviceBrokerUpdateRequestBeforeDeleteHooks = []ServiceBrokerUpdateRequestHook{}

	AddServiceBrokerUpdateRequestHook(boil.AfterDeleteHook, serviceBrokerUpdateRequestAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	serviceBrokerUpdateRequestAfterDeleteHooks = []ServiceBrokerUpdateRequestHook{}

	AddServiceBrokerUpdateRequestHook(boil.BeforeUpsertHook, serviceBrokerUpdateRequestBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	serviceBrokerUpdateRequestBeforeUpsertHooks = []ServiceBrokerUpdateRequestHook{}

	AddServiceBrokerUpdateRequestHook(boil.AfterUpsertHook, serviceBrokerUpdateRequestAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	serviceBrokerUpdateRequestAfterUpsertHooks = []ServiceBrokerUpdateRequestHook{}
}

func testServiceBrokerUpdateRequestsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBrokerUpdateRequest{}
	if err = randomize.Struct(seed, o, serviceBrokerUpdateRequestDBTypes, true, serviceBrokerUpdateRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServiceBrokerUpdateRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServiceBrokerUpdateRequestsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBrokerUpdateRequest{}
	if err = randomize.Struct(seed, o, serviceBrokerUpdateRequestDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(serviceBrokerUpdateRequestColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ServiceBrokerUpdateRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServiceBrokerUpdateRequestToManyResourceServiceBrokerUpdateRequestAnnotations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBrokerUpdateRequest
	var b, c ServiceBrokerUpdateRequestAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerUpdateRequestDBTypes, true, serviceBrokerUpdateRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serviceBrokerUpdateRequestAnnotationDBTypes, false, serviceBrokerUpdateRequestAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceBrokerUpdateRequestAnnotationDBTypes, false, serviceBrokerUpdateRequestAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceServiceBrokerUpdateRequestAnnotations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ServiceBrokerUpdateRequestSlice{&a}
	if err = a.L.LoadResourceServiceBrokerUpdateRequestAnnotations(ctx, tx, false, (*[]*ServiceBrokerUpdateRequest)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceServiceBrokerUpdateRequestAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceServiceBrokerUpdateRequestAnnotations = nil
	if err = a.L.LoadResourceServiceBrokerUpdateRequestAnnotations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceServiceBrokerUpdateRequestAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testServiceBrokerUpdateRequestToManyResourceServiceBrokerUpdateRequestLabels(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBrokerUpdateRequest
	var b, c ServiceBrokerUpdateRequestLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerUpdateRequestDBTypes, true, serviceBrokerUpdateRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serviceBrokerUpdateRequestLabelDBTypes, false, serviceBrokerUpdateRequestLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceBrokerUpdateRequestLabelDBTypes, false, serviceBrokerUpdateRequestLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceServiceBrokerUpdateRequestLabels().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ServiceBrokerUpdateRequestSlice{&a}
	if err = a.L.LoadResourceServiceBrokerUpdateRequestLabels(ctx, tx, false, (*[]*ServiceBrokerUpdateRequest)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceServiceBrokerUpdateRequestLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceServiceBrokerUpdateRequestLabels = nil
	if err = a.L.LoadResourceServiceBrokerUpdateRequestLabels(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceServiceBrokerUpdateRequestLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testServiceBrokerUpdateRequestToManyAddOpResourceServiceBrokerUpdateRequestAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBrokerUpdateRequest
	var b, c, d, e ServiceBrokerUpdateRequestAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerUpdateRequestDBTypes, false, strmangle.SetComplement(serviceBrokerUpdateRequestPrimaryKeyColumns, serviceBrokerUpdateRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBrokerUpdateRequestAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBrokerUpdateRequestAnnotationDBTypes, false, strmangle.SetComplement(serviceBrokerUpdateRequestAnnotationPrimaryKeyColumns, serviceBrokerUpdateRequestAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServiceBrokerUpdateRequestAnnotation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceServiceBrokerUpdateRequestAnnotations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceServiceBrokerUpdateRequestAnnotations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceServiceBrokerUpdateRequestAnnotations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceServiceBrokerUpdateRequestAnnotations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testServiceBrokerUpdateRequestToManySetOpResourceServiceBrokerUpdateRequestAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBrokerUpdateRequest
	var b, c, d, e ServiceBrokerUpdateRequestAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerUpdateRequestDBTypes, false, strmangle.SetComplement(serviceBrokerUpdateRequestPrimaryKeyColumns, serviceBrokerUpdateRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBrokerUpdateRequestAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBrokerUpdateRequestAnnotationDBTypes, false, strmangle.SetComplement(serviceBrokerUpdateRequestAnnotationPrimaryKeyColumns, serviceBrokerUpdateRequestAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceServiceBrokerUpdateRequestAnnotations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceServiceBrokerUpdateRequestAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceServiceBrokerUpdateRequestAnnotations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceServiceBrokerUpdateRequestAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceServiceBrokerUpdateRequestAnnotations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceServiceBrokerUpdateRequestAnnotations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testServiceBrokerUpdateRequestToManyRemoveOpResourceServiceBrokerUpdateRequestAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBrokerUpdateRequest
	var b, c, d, e ServiceBrokerUpdateRequestAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerUpdateRequestDBTypes, false, strmangle.SetComplement(serviceBrokerUpdateRequestPrimaryKeyColumns, serviceBrokerUpdateRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBrokerUpdateRequestAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBrokerUpdateRequestAnnotationDBTypes, false, strmangle.SetComplement(serviceBrokerUpdateRequestAnnotationPrimaryKeyColumns, serviceBrokerUpdateRequestAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceServiceBrokerUpdateRequestAnnotations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceServiceBrokerUpdateRequestAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceServiceBrokerUpdateRequestAnnotations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceServiceBrokerUpdateRequestAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceServiceBrokerUpdateRequestAnnotations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceServiceBrokerUpdateRequestAnnotations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceServiceBrokerUpdateRequestAnnotations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testServiceBrokerUpdateRequestToManyAddOpResourceServiceBrokerUpdateRequestLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBrokerUpdateRequest
	var b, c, d, e ServiceBrokerUpdateRequestLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerUpdateRequestDBTypes, false, strmangle.SetComplement(serviceBrokerUpdateRequestPrimaryKeyColumns, serviceBrokerUpdateRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBrokerUpdateRequestLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBrokerUpdateRequestLabelDBTypes, false, strmangle.SetComplement(serviceBrokerUpdateRequestLabelPrimaryKeyColumns, serviceBrokerUpdateRequestLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServiceBrokerUpdateRequestLabel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceServiceBrokerUpdateRequestLabels(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceServiceBrokerUpdateRequestLabels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceServiceBrokerUpdateRequestLabels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceServiceBrokerUpdateRequestLabels().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testServiceBrokerUpdateRequestToManySetOpResourceServiceBrokerUpdateRequestLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBrokerUpdateRequest
	var b, c, d, e ServiceBrokerUpdateRequestLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerUpdateRequestDBTypes, false, strmangle.SetComplement(serviceBrokerUpdateRequestPrimaryKeyColumns, serviceBrokerUpdateRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBrokerUpdateRequestLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBrokerUpdateRequestLabelDBTypes, false, strmangle.SetComplement(serviceBrokerUpdateRequestLabelPrimaryKeyColumns, serviceBrokerUpdateRequestLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceServiceBrokerUpdateRequestLabels(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceServiceBrokerUpdateRequestLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceServiceBrokerUpdateRequestLabels(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceServiceBrokerUpdateRequestLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceServiceBrokerUpdateRequestLabels[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceServiceBrokerUpdateRequestLabels[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testServiceBrokerUpdateRequestToManyRemoveOpResourceServiceBrokerUpdateRequestLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBrokerUpdateRequest
	var b, c, d, e ServiceBrokerUpdateRequestLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerUpdateRequestDBTypes, false, strmangle.SetComplement(serviceBrokerUpdateRequestPrimaryKeyColumns, serviceBrokerUpdateRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBrokerUpdateRequestLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBrokerUpdateRequestLabelDBTypes, false, strmangle.SetComplement(serviceBrokerUpdateRequestLabelPrimaryKeyColumns, serviceBrokerUpdateRequestLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceServiceBrokerUpdateRequestLabels(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceServiceBrokerUpdateRequestLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceServiceBrokerUpdateRequestLabels(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceServiceBrokerUpdateRequestLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceServiceBrokerUpdateRequestLabels) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceServiceBrokerUpdateRequestLabels[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceServiceBrokerUpdateRequestLabels[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testServiceBrokerUpdateRequestToOneServiceBrokerUsingFKServiceBroker(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ServiceBrokerUpdateRequest
	var foreign ServiceBroker

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, serviceBrokerUpdateRequestDBTypes, true, serviceBrokerUpdateRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, serviceBrokerDBTypes, false, serviceBrokerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.FKServiceBrokersID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FKServiceBroker().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ServiceBrokerUpdateRequestSlice{&local}
	if err = local.L.LoadFKServiceBroker(ctx, tx, false, (*[]*ServiceBrokerUpdateRequest)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FKServiceBroker == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FKServiceBroker = nil
	if err = local.L.LoadFKServiceBroker(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FKServiceBroker == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testServiceBrokerUpdateRequestToOneSetOpServiceBrokerUsingFKServiceBroker(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBrokerUpdateRequest
	var b, c ServiceBroker

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerUpdateRequestDBTypes, false, strmangle.SetComplement(serviceBrokerUpdateRequestPrimaryKeyColumns, serviceBrokerUpdateRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serviceBrokerDBTypes, false, strmangle.SetComplement(serviceBrokerPrimaryKeyColumns, serviceBrokerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceBrokerDBTypes, false, strmangle.SetComplement(serviceBrokerPrimaryKeyColumns, serviceBrokerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ServiceBroker{&b, &c} {
		err = a.SetFKServiceBroker(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FKServiceBroker != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FKServiceBrokerServiceBrokerUpdateRequests[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.FKServiceBrokersID, x.ID) {
			t.Error("foreign key was wrong value", a.FKServiceBrokersID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FKServiceBrokersID))
		reflect.Indirect(reflect.ValueOf(&a.FKServiceBrokersID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.FKServiceBrokersID, x.ID) {
			t.Error("foreign key was wrong value", a.FKServiceBrokersID, x.ID)
		}
	}
}

func testServiceBrokerUpdateRequestToOneRemoveOpServiceBrokerUsingFKServiceBroker(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBrokerUpdateRequest
	var b ServiceBroker

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerUpdateRequestDBTypes, false, strmangle.SetComplement(serviceBrokerUpdateRequestPrimaryKeyColumns, serviceBrokerUpdateRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serviceBrokerDBTypes, false, strmangle.SetComplement(serviceBrokerPrimaryKeyColumns, serviceBrokerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetFKServiceBroker(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveFKServiceBroker(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.FKServiceBroker().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.FKServiceBroker != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.FKServiceBrokersID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.FKServiceBrokerServiceBrokerUpdateRequests) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testServiceBrokerUpdateRequestsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBrokerUpdateRequest{}
	if err = randomize.Struct(seed, o, serviceBrokerUpdateRequestDBTypes, true, serviceBrokerUpdateRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServiceBrokerUpdateRequestsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBrokerUpdateRequest{}
	if err = randomize.Struct(seed, o, serviceBrokerUpdateRequestDBTypes, true, serviceBrokerUpdateRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServiceBrokerUpdateRequestSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServiceBrokerUpdateRequestsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBrokerUpdateRequest{}
	if err = randomize.Struct(seed, o, serviceBrokerUpdateRequestDBTypes, true, serviceBrokerUpdateRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServiceBrokerUpdateRequests().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	serviceBrokerUpdateRequestDBTypes = map[string]string{`ID`: `integer`, `GUID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `Name`: `character varying`, `BrokerURL`: `character varying`, `Authentication`: `character varying`, `Salt`: `character varying`, `EncryptionKeyLabel`: `character varying`, `EncryptionIterations`: `integer`, `ServiceBrokerID`: `integer`, `FKServiceBrokersID`: `integer`}
	_                                 = bytes.MinRead
)

func testServiceBrokerUpdateRequestsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(serviceBrokerUpdateRequestPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(serviceBrokerUpdateRequestAllColumns) == len(serviceBrokerUpdateRequestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBrokerUpdateRequest{}
	if err = randomize.Struct(seed, o, serviceBrokerUpdateRequestDBTypes, true, serviceBrokerUpdateRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServiceBrokerUpdateRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serviceBrokerUpdateRequestDBTypes, true, serviceBrokerUpdateRequestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testServiceBrokerUpdateRequestsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(serviceBrokerUpdateRequestAllColumns) == len(serviceBrokerUpdateRequestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBrokerUpdateRequest{}
	if err = randomize.Struct(seed, o, serviceBrokerUpdateRequestDBTypes, true, serviceBrokerUpdateRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServiceBrokerUpdateRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serviceBrokerUpdateRequestDBTypes, true, serviceBrokerUpdateRequestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(serviceBrokerUpdateRequestAllColumns, serviceBrokerUpdateRequestPrimaryKeyColumns) {
		fields = serviceBrokerUpdateRequestAllColumns
	} else {
		fields = strmangle.SetComplement(
			serviceBrokerUpdateRequestAllColumns,
			serviceBrokerUpdateRequestPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ServiceBrokerUpdateRequestSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testServiceBrokerUpdateRequestsUpsert(t *testing.T) {
	t.Parallel()

	if len(serviceBrokerUpdateRequestAllColumns) == len(serviceBrokerUpdateRequestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ServiceBrokerUpdateRequest{}
	if err = randomize.Struct(seed, &o, serviceBrokerUpdateRequestDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServiceBrokerUpdateRequest: %s", err)
	}

	count, err := ServiceBrokerUpdateRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, serviceBrokerUpdateRequestDBTypes, false, serviceBrokerUpdateRequestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServiceBrokerUpdateRequest struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServiceBrokerUpdateRequest: %s", err)
	}

	count, err = ServiceBrokerUpdateRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
