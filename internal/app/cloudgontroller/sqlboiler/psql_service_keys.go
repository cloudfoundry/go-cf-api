// +build psql
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ServiceKey is an object representing the database table.
type ServiceKey struct {
	ID                   int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	GUID                 string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	CreatedAt            time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt            null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Name                 string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Salt                 null.String `boil:"salt" json:"salt,omitempty" toml:"salt" yaml:"salt,omitempty"`
	Credentials          string      `boil:"credentials" json:"credentials" toml:"credentials" yaml:"credentials"`
	ServiceInstanceID    int         `boil:"service_instance_id" json:"service_instance_id" toml:"service_instance_id" yaml:"service_instance_id"`
	EncryptionKeyLabel   null.String `boil:"encryption_key_label" json:"encryption_key_label,omitempty" toml:"encryption_key_label" yaml:"encryption_key_label,omitempty"`
	EncryptionIterations int         `boil:"encryption_iterations" json:"encryption_iterations" toml:"encryption_iterations" yaml:"encryption_iterations"`

	R *serviceKeyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L serviceKeyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ServiceKeyColumns = struct {
	ID                   string
	GUID                 string
	CreatedAt            string
	UpdatedAt            string
	Name                 string
	Salt                 string
	Credentials          string
	ServiceInstanceID    string
	EncryptionKeyLabel   string
	EncryptionIterations string
}{
	ID:                   "id",
	GUID:                 "guid",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
	Name:                 "name",
	Salt:                 "salt",
	Credentials:          "credentials",
	ServiceInstanceID:    "service_instance_id",
	EncryptionKeyLabel:   "encryption_key_label",
	EncryptionIterations: "encryption_iterations",
}

var ServiceKeyTableColumns = struct {
	ID                   string
	GUID                 string
	CreatedAt            string
	UpdatedAt            string
	Name                 string
	Salt                 string
	Credentials          string
	ServiceInstanceID    string
	EncryptionKeyLabel   string
	EncryptionIterations string
}{
	ID:                   "service_keys.id",
	GUID:                 "service_keys.guid",
	CreatedAt:            "service_keys.created_at",
	UpdatedAt:            "service_keys.updated_at",
	Name:                 "service_keys.name",
	Salt:                 "service_keys.salt",
	Credentials:          "service_keys.credentials",
	ServiceInstanceID:    "service_keys.service_instance_id",
	EncryptionKeyLabel:   "service_keys.encryption_key_label",
	EncryptionIterations: "service_keys.encryption_iterations",
}

// Generated where

var ServiceKeyWhere = struct {
	ID                   whereHelperint
	GUID                 whereHelperstring
	CreatedAt            whereHelpertime_Time
	UpdatedAt            whereHelpernull_Time
	Name                 whereHelperstring
	Salt                 whereHelpernull_String
	Credentials          whereHelperstring
	ServiceInstanceID    whereHelperint
	EncryptionKeyLabel   whereHelpernull_String
	EncryptionIterations whereHelperint
}{
	ID:                   whereHelperint{field: "\"service_keys\".\"id\""},
	GUID:                 whereHelperstring{field: "\"service_keys\".\"guid\""},
	CreatedAt:            whereHelpertime_Time{field: "\"service_keys\".\"created_at\""},
	UpdatedAt:            whereHelpernull_Time{field: "\"service_keys\".\"updated_at\""},
	Name:                 whereHelperstring{field: "\"service_keys\".\"name\""},
	Salt:                 whereHelpernull_String{field: "\"service_keys\".\"salt\""},
	Credentials:          whereHelperstring{field: "\"service_keys\".\"credentials\""},
	ServiceInstanceID:    whereHelperint{field: "\"service_keys\".\"service_instance_id\""},
	EncryptionKeyLabel:   whereHelpernull_String{field: "\"service_keys\".\"encryption_key_label\""},
	EncryptionIterations: whereHelperint{field: "\"service_keys\".\"encryption_iterations\""},
}

// ServiceKeyRels is where relationship names are stored.
var ServiceKeyRels = struct {
	ServiceInstance               string
	ServiceKeyOperation           string
	ResourceServiceKeyAnnotations string
	ResourceServiceKeyLabels      string
}{
	ServiceInstance:               "ServiceInstance",
	ServiceKeyOperation:           "ServiceKeyOperation",
	ResourceServiceKeyAnnotations: "ResourceServiceKeyAnnotations",
	ResourceServiceKeyLabels:      "ResourceServiceKeyLabels",
}

// serviceKeyR is where relationships are stored.
type serviceKeyR struct {
	ServiceInstance               *ServiceInstance          `boil:"ServiceInstance" json:"ServiceInstance" toml:"ServiceInstance" yaml:"ServiceInstance"`
	ServiceKeyOperation           *ServiceKeyOperation      `boil:"ServiceKeyOperation" json:"ServiceKeyOperation" toml:"ServiceKeyOperation" yaml:"ServiceKeyOperation"`
	ResourceServiceKeyAnnotations ServiceKeyAnnotationSlice `boil:"ResourceServiceKeyAnnotations" json:"ResourceServiceKeyAnnotations" toml:"ResourceServiceKeyAnnotations" yaml:"ResourceServiceKeyAnnotations"`
	ResourceServiceKeyLabels      ServiceKeyLabelSlice      `boil:"ResourceServiceKeyLabels" json:"ResourceServiceKeyLabels" toml:"ResourceServiceKeyLabels" yaml:"ResourceServiceKeyLabels"`
}

// NewStruct creates a new relationship struct
func (*serviceKeyR) NewStruct() *serviceKeyR {
	return &serviceKeyR{}
}

// serviceKeyL is where Load methods for each relationship are stored.
type serviceKeyL struct{}

var (
	serviceKeyAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "salt", "credentials", "service_instance_id", "encryption_key_label", "encryption_iterations"}
	serviceKeyColumnsWithoutDefault = []string{"guid", "updated_at", "name", "salt", "credentials", "service_instance_id", "encryption_key_label"}
	serviceKeyColumnsWithDefault    = []string{"id", "created_at", "encryption_iterations"}
	serviceKeyPrimaryKeyColumns     = []string{"id"}
)

type (
	// ServiceKeySlice is an alias for a slice of pointers to ServiceKey.
	// This should almost always be used instead of []ServiceKey.
	ServiceKeySlice []*ServiceKey

	ServiceKeyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	serviceKeyType                 = reflect.TypeOf(&ServiceKey{})
	serviceKeyMapping              = queries.MakeStructMapping(serviceKeyType)
	serviceKeyPrimaryKeyMapping, _ = queries.BindMapping(serviceKeyType, serviceKeyMapping, serviceKeyPrimaryKeyColumns)
	serviceKeyInsertCacheMut       sync.RWMutex
	serviceKeyInsertCache          = make(map[string]insertCache)
	serviceKeyUpdateCacheMut       sync.RWMutex
	serviceKeyUpdateCache          = make(map[string]updateCache)
	serviceKeyUpsertCacheMut       sync.RWMutex
	serviceKeyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

type ServiceKeyFinisher interface {
	One(ctx context.Context, exec boil.ContextExecutor) (*ServiceKey, error)
	Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	All(ctx context.Context, exec boil.ContextExecutor) (ServiceKeySlice, error)
	Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)
}

// One returns a single serviceKey record from the query.
func (q ServiceKeyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceKey, error) {
	o := &ServiceKey{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for service_keys")
	}

	return o, nil
}

// All returns all ServiceKey records from the query.
func (q ServiceKeyQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceKeySlice, error) {
	var o []*ServiceKey

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ServiceKey slice")
	}

	return o, nil
}

// Count returns the count of all ServiceKey records in the query.
func (q ServiceKeyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count service_keys rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q ServiceKeyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if service_keys exists")
	}

	return count > 0, nil
}

// ServiceInstance pointed to by the foreign key.
func (q ServiceKeyQuery) ServiceInstance(o *ServiceKey, mods ...qm.QueryMod) ServiceInstanceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ServiceInstanceID),
	}

	queryMods = append(queryMods, mods...)

	query := ServiceInstances(queryMods...)
	queries.SetFrom(query.Query, "\"service_instances\"")

	return query
}

// ServiceKeyOperation pointed to by the foreign key.
func (q ServiceKeyQuery) ServiceKeyOperation(o *ServiceKey, mods ...qm.QueryMod) ServiceKeyOperationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"service_key_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := ServiceKeyOperations(queryMods...)
	queries.SetFrom(query.Query, "\"service_key_operations\"")

	return query
}

// ResourceServiceKeyAnnotations retrieves all the service_key_annotation's ServiceKeyAnnotations with an executor via resource_guid column.
func (q ServiceKeyQuery) ResourceServiceKeyAnnotations(o *ServiceKey, mods ...qm.QueryMod) ServiceKeyAnnotationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"service_key_annotations\".\"resource_guid\"=?", o.GUID),
	)

	query := ServiceKeyAnnotations(queryMods...)
	queries.SetFrom(query.Query, "\"service_key_annotations\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"service_key_annotations\".*"})
	}

	return query
}

// ResourceServiceKeyLabels retrieves all the service_key_label's ServiceKeyLabels with an executor via resource_guid column.
func (q ServiceKeyQuery) ResourceServiceKeyLabels(o *ServiceKey, mods ...qm.QueryMod) ServiceKeyLabelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"service_key_labels\".\"resource_guid\"=?", o.GUID),
	)

	query := ServiceKeyLabels(queryMods...)
	queries.SetFrom(query.Query, "\"service_key_labels\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"service_key_labels\".*"})
	}

	return query
}

// LoadServiceInstance allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (serviceKeyL) LoadServiceInstance(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceKey interface{}, mods queries.Applicator) error {
	var slice []*ServiceKey
	var object *ServiceKey

	if singular {
		object = maybeServiceKey.(*ServiceKey)
	} else {
		slice = *maybeServiceKey.(*[]*ServiceKey)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serviceKeyR{}
		}
		args = append(args, object.ServiceInstanceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serviceKeyR{}
			}

			for _, a := range args {
				if a == obj.ServiceInstanceID {
					continue Outer
				}
			}

			args = append(args, obj.ServiceInstanceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`service_instances`),
		qm.WhereIn(`service_instances.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ServiceInstance")
	}

	var resultSlice []*ServiceInstance
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ServiceInstance")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for service_instances")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for service_instances")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServiceInstance = foreign
		if foreign.R == nil {
			foreign.R = &serviceInstanceR{}
		}
		foreign.R.ServiceKeys = append(foreign.R.ServiceKeys, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServiceInstanceID == foreign.ID {
				local.R.ServiceInstance = foreign
				if foreign.R == nil {
					foreign.R = &serviceInstanceR{}
				}
				foreign.R.ServiceKeys = append(foreign.R.ServiceKeys, local)
				break
			}
		}
	}

	return nil
}

// LoadServiceKeyOperation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (serviceKeyL) LoadServiceKeyOperation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceKey interface{}, mods queries.Applicator) error {
	var slice []*ServiceKey
	var object *ServiceKey

	if singular {
		object = maybeServiceKey.(*ServiceKey)
	} else {
		slice = *maybeServiceKey.(*[]*ServiceKey)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serviceKeyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serviceKeyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`service_key_operations`),
		qm.WhereIn(`service_key_operations.service_key_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ServiceKeyOperation")
	}

	var resultSlice []*ServiceKeyOperation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ServiceKeyOperation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for service_key_operations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for service_key_operations")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServiceKeyOperation = foreign
		if foreign.R == nil {
			foreign.R = &serviceKeyOperationR{}
		}
		foreign.R.ServiceKey = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.ServiceKeyID) {
				local.R.ServiceKeyOperation = foreign
				if foreign.R == nil {
					foreign.R = &serviceKeyOperationR{}
				}
				foreign.R.ServiceKey = local
				break
			}
		}
	}

	return nil
}

// LoadResourceServiceKeyAnnotations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (serviceKeyL) LoadResourceServiceKeyAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceKey interface{}, mods queries.Applicator) error {
	var slice []*ServiceKey
	var object *ServiceKey

	if singular {
		object = maybeServiceKey.(*ServiceKey)
	} else {
		slice = *maybeServiceKey.(*[]*ServiceKey)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serviceKeyR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serviceKeyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`service_key_annotations`),
		qm.WhereIn(`service_key_annotations.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load service_key_annotations")
	}

	var resultSlice []*ServiceKeyAnnotation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice service_key_annotations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on service_key_annotations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for service_key_annotations")
	}

	if singular {
		object.R.ResourceServiceKeyAnnotations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &serviceKeyAnnotationR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceServiceKeyAnnotations = append(local.R.ResourceServiceKeyAnnotations, foreign)
				if foreign.R == nil {
					foreign.R = &serviceKeyAnnotationR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// LoadResourceServiceKeyLabels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (serviceKeyL) LoadResourceServiceKeyLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceKey interface{}, mods queries.Applicator) error {
	var slice []*ServiceKey
	var object *ServiceKey

	if singular {
		object = maybeServiceKey.(*ServiceKey)
	} else {
		slice = *maybeServiceKey.(*[]*ServiceKey)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serviceKeyR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serviceKeyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`service_key_labels`),
		qm.WhereIn(`service_key_labels.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load service_key_labels")
	}

	var resultSlice []*ServiceKeyLabel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice service_key_labels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on service_key_labels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for service_key_labels")
	}

	if singular {
		object.R.ResourceServiceKeyLabels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &serviceKeyLabelR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceServiceKeyLabels = append(local.R.ResourceServiceKeyLabels, foreign)
				if foreign.R == nil {
					foreign.R = &serviceKeyLabelR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// SetServiceInstance of the serviceKey to the related item.
// Sets o.R.ServiceInstance to related.
// Adds o to related.R.ServiceKeys.
func (q ServiceKeyQuery) SetServiceInstance(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceInstance) error {
	var err error
	if insert {
		if err = ServiceInstances().Insert(related, ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"service_keys\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"service_instance_id"}),
		strmangle.WhereClause("\"", "\"", 2, serviceKeyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServiceInstanceID = related.ID
	if o.R == nil {
		o.R = &serviceKeyR{
			ServiceInstance: related,
		}
	} else {
		o.R.ServiceInstance = related
	}

	if related.R == nil {
		related.R = &serviceInstanceR{
			ServiceKeys: ServiceKeySlice{o},
		}
	} else {
		related.R.ServiceKeys = append(related.R.ServiceKeys, o)
	}

	return nil
}

// SetServiceKeyOperation of the serviceKey to the related item.
// Sets o.R.ServiceKeyOperation to related.
// Adds o to related.R.ServiceKey.
func (q ServiceKeyQuery) SetServiceKeyOperation(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceKeyOperation) error {
	var err error

	if insert {
		queries.Assign(&related.ServiceKeyID, o.ID)

		if err = ServiceKeyOperations().Insert(related, ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"service_key_operations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"service_key_id"}),
			strmangle.WhereClause("\"", "\"", 2, serviceKeyOperationPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.ServiceKeyID, o.ID)
	}

	if o.R == nil {
		o.R = &serviceKeyR{
			ServiceKeyOperation: related,
		}
	} else {
		o.R.ServiceKeyOperation = related
	}

	if related.R == nil {
		related.R = &serviceKeyOperationR{
			ServiceKey: o,
		}
	} else {
		related.R.ServiceKey = o
	}
	return nil
}

// RemoveServiceKeyOperation relationship.
// Sets o.R.ServiceKeyOperation to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (q ServiceKeyQuery) RemoveServiceKeyOperation(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, related *ServiceKeyOperation) error {
	var err error

	queries.SetScanner(&related.ServiceKeyID, nil)
	if _, err = ServiceKeyOperations().Update(related, ctx, exec, boil.Whitelist("service_key_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ServiceKeyOperation = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.ServiceKey = nil
	return nil
}

// AddResourceServiceKeyAnnotations adds the given related objects to the existing relationships
// of the service_key, optionally inserting them as new records.
// Appends related to o.R.ResourceServiceKeyAnnotations.
// Sets related.R.Resource appropriately.
func (q ServiceKeyQuery) AddResourceServiceKeyAnnotations(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceKeyAnnotation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = ServiceKeyAnnotations().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"service_key_annotations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"resource_guid"}),
				strmangle.WhereClause("\"", "\"", 2, serviceKeyAnnotationPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &serviceKeyR{
			ResourceServiceKeyAnnotations: related,
		}
	} else {
		o.R.ResourceServiceKeyAnnotations = append(o.R.ResourceServiceKeyAnnotations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &serviceKeyAnnotationR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceServiceKeyAnnotations removes all previously related items of the
// service_key replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceServiceKeyAnnotations accordingly.
// Replaces o.R.ResourceServiceKeyAnnotations with related.
// Sets related.R.Resource's ResourceServiceKeyAnnotations accordingly.
func (q ServiceKeyQuery) SetResourceServiceKeyAnnotations(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceKeyAnnotation) error {
	query := "update \"service_key_annotations\" set \"resource_guid\" = null where \"resource_guid\" = $1"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceServiceKeyAnnotations {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceServiceKeyAnnotations = nil
	}
	return q.AddResourceServiceKeyAnnotations(o, ctx, exec, insert, related...)
}

// RemoveResourceServiceKeyAnnotations relationships from objects passed in.
// Removes related items from R.ResourceServiceKeyAnnotations (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (q ServiceKeyQuery) RemoveResourceServiceKeyAnnotations(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, related ...*ServiceKeyAnnotation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = ServiceKeyAnnotations().Update(rel, ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceServiceKeyAnnotations {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceServiceKeyAnnotations)
			if ln > 1 && i < ln-1 {
				o.R.ResourceServiceKeyAnnotations[i] = o.R.ResourceServiceKeyAnnotations[ln-1]
			}
			o.R.ResourceServiceKeyAnnotations = o.R.ResourceServiceKeyAnnotations[:ln-1]
			break
		}
	}

	return nil
}

// AddResourceServiceKeyLabels adds the given related objects to the existing relationships
// of the service_key, optionally inserting them as new records.
// Appends related to o.R.ResourceServiceKeyLabels.
// Sets related.R.Resource appropriately.
func (q ServiceKeyQuery) AddResourceServiceKeyLabels(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceKeyLabel) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = ServiceKeyLabels().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"service_key_labels\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"resource_guid"}),
				strmangle.WhereClause("\"", "\"", 2, serviceKeyLabelPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &serviceKeyR{
			ResourceServiceKeyLabels: related,
		}
	} else {
		o.R.ResourceServiceKeyLabels = append(o.R.ResourceServiceKeyLabels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &serviceKeyLabelR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceServiceKeyLabels removes all previously related items of the
// service_key replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceServiceKeyLabels accordingly.
// Replaces o.R.ResourceServiceKeyLabels with related.
// Sets related.R.Resource's ResourceServiceKeyLabels accordingly.
func (q ServiceKeyQuery) SetResourceServiceKeyLabels(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceKeyLabel) error {
	query := "update \"service_key_labels\" set \"resource_guid\" = null where \"resource_guid\" = $1"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceServiceKeyLabels {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceServiceKeyLabels = nil
	}
	return q.AddResourceServiceKeyLabels(o, ctx, exec, insert, related...)
}

// RemoveResourceServiceKeyLabels relationships from objects passed in.
// Removes related items from R.ResourceServiceKeyLabels (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (q ServiceKeyQuery) RemoveResourceServiceKeyLabels(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, related ...*ServiceKeyLabel) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = ServiceKeyLabels().Update(rel, ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceServiceKeyLabels {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceServiceKeyLabels)
			if ln > 1 && i < ln-1 {
				o.R.ResourceServiceKeyLabels[i] = o.R.ResourceServiceKeyLabels[ln-1]
			}
			o.R.ResourceServiceKeyLabels = o.R.ResourceServiceKeyLabels[:ln-1]
			break
		}
	}

	return nil
}

// ServiceKeys retrieves all the records using an executor.
func ServiceKeys(mods ...qm.QueryMod) ServiceKeyQuery {
	mods = append(mods, qm.From("\"service_keys\""))
	return ServiceKeyQuery{NewQuery(mods...)}
}

type ServiceKeyFinder interface {
	FindServiceKey(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceKey, error)
}

// FindServiceKey retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindServiceKey(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceKey, error) {
	serviceKeyObj := &ServiceKey{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"service_keys\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, serviceKeyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from service_keys")
	}

	return serviceKeyObj, nil
}

type ServiceKeyInserter interface {
	Insert(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (q ServiceKeyQuery) Insert(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no service_keys provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(serviceKeyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	serviceKeyInsertCacheMut.RLock()
	cache, cached := serviceKeyInsertCache[key]
	serviceKeyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			serviceKeyAllColumns,
			serviceKeyColumnsWithDefault,
			serviceKeyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(serviceKeyType, serviceKeyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(serviceKeyType, serviceKeyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"service_keys\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"service_keys\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into service_keys")
	}

	if !cached {
		serviceKeyInsertCacheMut.Lock()
		serviceKeyInsertCache[key] = cache
		serviceKeyInsertCacheMut.Unlock()
	}

	return nil
}

type ServiceKeyUpdater interface {
	Update(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)
	UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
	UpdateAllSlice(o ServiceKeySlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
}

// Update uses an executor to update the ServiceKey.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (q ServiceKeyQuery) Update(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	serviceKeyUpdateCacheMut.RLock()
	cache, cached := serviceKeyUpdateCache[key]
	serviceKeyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			serviceKeyAllColumns,
			serviceKeyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update service_keys, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"service_keys\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, serviceKeyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(serviceKeyType, serviceKeyMapping, append(wl, serviceKeyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update service_keys row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for service_keys")
	}

	if !cached {
		serviceKeyUpdateCacheMut.Lock()
		serviceKeyUpdateCache[key] = cache
		serviceKeyUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q ServiceKeyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for service_keys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for service_keys")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (q ServiceKeyQuery) UpdateAllSlice(o ServiceKeySlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serviceKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"service_keys\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, serviceKeyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in serviceKey slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all serviceKey")
	}
	return rowsAff, nil
}

type ServiceKeyDeleter interface {
	Delete(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAllSlice(o ServiceKeySlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)
}

// Delete deletes a single ServiceKey record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (q ServiceKeyQuery) Delete(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ServiceKey provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), serviceKeyPrimaryKeyMapping)
	sql := "DELETE FROM \"service_keys\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from service_keys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for service_keys")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ServiceKeyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no serviceKeyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from service_keys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for service_keys")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (q ServiceKeyQuery) DeleteAllSlice(o ServiceKeySlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serviceKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"service_keys\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serviceKeyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from serviceKey slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for service_keys")
	}

	return rowsAff, nil
}

type ServiceKeyReloader interface {
	Reload(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor) error
	ReloadAll(o *ServiceKeySlice, ctx context.Context, exec boil.ContextExecutor) error
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (q ServiceKeyQuery) Reload(o *ServiceKey, ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindServiceKey(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (q ServiceKeyQuery) ReloadAll(o *ServiceKeySlice, ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ServiceKeySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serviceKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"service_keys\".* FROM \"service_keys\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serviceKeyPrimaryKeyColumns, len(*o))

	query := queries.Raw(sql, args...)

	err := query.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ServiceKeySlice")
	}

	*o = slice

	return nil
}

// ServiceKeyExists checks if the ServiceKey row exists.
func ServiceKeyExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"service_keys\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if service_keys exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ServiceKey) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no service_keys provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(serviceKeyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	serviceKeyUpsertCacheMut.RLock()
	cache, cached := serviceKeyUpsertCache[key]
	serviceKeyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			serviceKeyAllColumns,
			serviceKeyColumnsWithDefault,
			serviceKeyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			serviceKeyAllColumns,
			serviceKeyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert service_keys, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(serviceKeyPrimaryKeyColumns))
			copy(conflict, serviceKeyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"service_keys\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(serviceKeyType, serviceKeyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(serviceKeyType, serviceKeyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert service_keys")
	}

	if !cached {
		serviceKeyUpsertCacheMut.Lock()
		serviceKeyUpsertCache[key] = cache
		serviceKeyUpsertCacheMut.Unlock()
	}

	return nil
}
