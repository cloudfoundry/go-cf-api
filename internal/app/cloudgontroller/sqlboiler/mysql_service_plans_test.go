// +build mysql
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testServicePlans(t *testing.T) {
	t.Parallel()

	query := ServicePlans()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testServicePlansDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlan{}
	if err = randomize.Struct(seed, o, servicePlanDBTypes, true, servicePlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServicePlans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServicePlansQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlan{}
	if err = randomize.Struct(seed, o, servicePlanDBTypes, true, servicePlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ServicePlans().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServicePlans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServicePlansSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlan{}
	if err = randomize.Struct(seed, o, servicePlanDBTypes, true, servicePlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServicePlanSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServicePlans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServicePlansExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlan{}
	if err = randomize.Struct(seed, o, servicePlanDBTypes, true, servicePlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ServicePlanExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ServicePlan exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ServicePlanExists to return true, but got false.")
	}
}

func testServicePlansFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlan{}
	if err = randomize.Struct(seed, o, servicePlanDBTypes, true, servicePlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	servicePlanFound, err := FindServicePlan(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if servicePlanFound == nil {
		t.Error("want a record, got nil")
	}
}

func testServicePlansBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlan{}
	if err = randomize.Struct(seed, o, servicePlanDBTypes, true, servicePlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ServicePlans().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testServicePlansOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlan{}
	if err = randomize.Struct(seed, o, servicePlanDBTypes, true, servicePlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ServicePlans().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testServicePlansAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	servicePlanOne := &ServicePlan{}
	servicePlanTwo := &ServicePlan{}
	if err = randomize.Struct(seed, servicePlanOne, servicePlanDBTypes, false, servicePlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}
	if err = randomize.Struct(seed, servicePlanTwo, servicePlanDBTypes, false, servicePlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = servicePlanOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = servicePlanTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServicePlans().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testServicePlansCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	servicePlanOne := &ServicePlan{}
	servicePlanTwo := &ServicePlan{}
	if err = randomize.Struct(seed, servicePlanOne, servicePlanDBTypes, false, servicePlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}
	if err = randomize.Struct(seed, servicePlanTwo, servicePlanDBTypes, false, servicePlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = servicePlanOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = servicePlanTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServicePlans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func servicePlanBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServicePlan) error {
	*o = ServicePlan{}
	return nil
}

func servicePlanAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServicePlan) error {
	*o = ServicePlan{}
	return nil
}

func servicePlanAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ServicePlan) error {
	*o = ServicePlan{}
	return nil
}

func servicePlanBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServicePlan) error {
	*o = ServicePlan{}
	return nil
}

func servicePlanAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServicePlan) error {
	*o = ServicePlan{}
	return nil
}

func servicePlanBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServicePlan) error {
	*o = ServicePlan{}
	return nil
}

func servicePlanAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServicePlan) error {
	*o = ServicePlan{}
	return nil
}

func servicePlanBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServicePlan) error {
	*o = ServicePlan{}
	return nil
}

func servicePlanAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServicePlan) error {
	*o = ServicePlan{}
	return nil
}

func testServicePlansHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ServicePlan{}
	o := &ServicePlan{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, servicePlanDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ServicePlan object: %s", err)
	}

	AddServicePlanHook(boil.BeforeInsertHook, servicePlanBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	servicePlanBeforeInsertHooks = []ServicePlanHook{}

	AddServicePlanHook(boil.AfterInsertHook, servicePlanAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	servicePlanAfterInsertHooks = []ServicePlanHook{}

	AddServicePlanHook(boil.AfterSelectHook, servicePlanAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	servicePlanAfterSelectHooks = []ServicePlanHook{}

	AddServicePlanHook(boil.BeforeUpdateHook, servicePlanBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	servicePlanBeforeUpdateHooks = []ServicePlanHook{}

	AddServicePlanHook(boil.AfterUpdateHook, servicePlanAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	servicePlanAfterUpdateHooks = []ServicePlanHook{}

	AddServicePlanHook(boil.BeforeDeleteHook, servicePlanBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	servicePlanBeforeDeleteHooks = []ServicePlanHook{}

	AddServicePlanHook(boil.AfterDeleteHook, servicePlanAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	servicePlanAfterDeleteHooks = []ServicePlanHook{}

	AddServicePlanHook(boil.BeforeUpsertHook, servicePlanBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	servicePlanBeforeUpsertHooks = []ServicePlanHook{}

	AddServicePlanHook(boil.AfterUpsertHook, servicePlanAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	servicePlanAfterUpsertHooks = []ServicePlanHook{}
}

func testServicePlansInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlan{}
	if err = randomize.Struct(seed, o, servicePlanDBTypes, true, servicePlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServicePlans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServicePlansInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlan{}
	if err = randomize.Struct(seed, o, servicePlanDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(servicePlanColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ServicePlans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServicePlanToManyServiceInstances(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServicePlan
	var b, c ServiceInstance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, servicePlanDBTypes, true, servicePlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serviceInstanceDBTypes, false, serviceInstanceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceInstanceDBTypes, false, serviceInstanceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ServicePlanID, a.ID)
	queries.Assign(&c.ServicePlanID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ServiceInstances().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ServicePlanID, b.ServicePlanID) {
			bFound = true
		}
		if queries.Equal(v.ServicePlanID, c.ServicePlanID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ServicePlanSlice{&a}
	if err = a.L.LoadServiceInstances(ctx, tx, false, (*[]*ServicePlan)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ServiceInstances); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ServiceInstances = nil
	if err = a.L.LoadServiceInstances(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ServiceInstances); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testServicePlanToManyResourceServicePlanAnnotations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServicePlan
	var b, c ServicePlanAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, servicePlanDBTypes, true, servicePlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, servicePlanAnnotationDBTypes, false, servicePlanAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, servicePlanAnnotationDBTypes, false, servicePlanAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceServicePlanAnnotations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ServicePlanSlice{&a}
	if err = a.L.LoadResourceServicePlanAnnotations(ctx, tx, false, (*[]*ServicePlan)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceServicePlanAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceServicePlanAnnotations = nil
	if err = a.L.LoadResourceServicePlanAnnotations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceServicePlanAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testServicePlanToManyResourceServicePlanLabels(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServicePlan
	var b, c ServicePlanLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, servicePlanDBTypes, true, servicePlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, servicePlanLabelDBTypes, false, servicePlanLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, servicePlanLabelDBTypes, false, servicePlanLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceServicePlanLabels().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ServicePlanSlice{&a}
	if err = a.L.LoadResourceServicePlanLabels(ctx, tx, false, (*[]*ServicePlan)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceServicePlanLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceServicePlanLabels = nil
	if err = a.L.LoadResourceServicePlanLabels(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceServicePlanLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testServicePlanToManyServicePlanVisibilities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServicePlan
	var b, c ServicePlanVisibility

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, servicePlanDBTypes, true, servicePlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, servicePlanVisibilityDBTypes, false, servicePlanVisibilityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, servicePlanVisibilityDBTypes, false, servicePlanVisibilityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ServicePlanID = a.ID
	c.ServicePlanID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ServicePlanVisibilities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ServicePlanID == b.ServicePlanID {
			bFound = true
		}
		if v.ServicePlanID == c.ServicePlanID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ServicePlanSlice{&a}
	if err = a.L.LoadServicePlanVisibilities(ctx, tx, false, (*[]*ServicePlan)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ServicePlanVisibilities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ServicePlanVisibilities = nil
	if err = a.L.LoadServicePlanVisibilities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ServicePlanVisibilities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testServicePlanToManyAddOpServiceInstances(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServicePlan
	var b, c, d, e ServiceInstance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, servicePlanDBTypes, false, strmangle.SetComplement(servicePlanPrimaryKeyColumns, servicePlanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceInstance{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServiceInstance{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddServiceInstances(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ServicePlanID) {
			t.Error("foreign key was wrong value", a.ID, first.ServicePlanID)
		}
		if !queries.Equal(a.ID, second.ServicePlanID) {
			t.Error("foreign key was wrong value", a.ID, second.ServicePlanID)
		}

		if first.R.ServicePlan != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ServicePlan != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ServiceInstances[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ServiceInstances[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ServiceInstances().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testServicePlanToManySetOpServiceInstances(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServicePlan
	var b, c, d, e ServiceInstance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, servicePlanDBTypes, false, strmangle.SetComplement(servicePlanPrimaryKeyColumns, servicePlanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceInstance{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetServiceInstances(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ServiceInstances().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetServiceInstances(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ServiceInstances().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ServicePlanID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ServicePlanID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ServicePlanID) {
		t.Error("foreign key was wrong value", a.ID, d.ServicePlanID)
	}
	if !queries.Equal(a.ID, e.ServicePlanID) {
		t.Error("foreign key was wrong value", a.ID, e.ServicePlanID)
	}

	if b.R.ServicePlan != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ServicePlan != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ServicePlan != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ServicePlan != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ServiceInstances[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ServiceInstances[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testServicePlanToManyRemoveOpServiceInstances(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServicePlan
	var b, c, d, e ServiceInstance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, servicePlanDBTypes, false, strmangle.SetComplement(servicePlanPrimaryKeyColumns, servicePlanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceInstance{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddServiceInstances(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ServiceInstances().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveServiceInstances(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ServiceInstances().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ServicePlanID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ServicePlanID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ServicePlan != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ServicePlan != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ServicePlan != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ServicePlan != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ServiceInstances) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ServiceInstances[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ServiceInstances[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testServicePlanToManyAddOpResourceServicePlanAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServicePlan
	var b, c, d, e ServicePlanAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, servicePlanDBTypes, false, strmangle.SetComplement(servicePlanPrimaryKeyColumns, servicePlanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServicePlanAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, servicePlanAnnotationDBTypes, false, strmangle.SetComplement(servicePlanAnnotationPrimaryKeyColumns, servicePlanAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServicePlanAnnotation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceServicePlanAnnotations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceServicePlanAnnotations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceServicePlanAnnotations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceServicePlanAnnotations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testServicePlanToManySetOpResourceServicePlanAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServicePlan
	var b, c, d, e ServicePlanAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, servicePlanDBTypes, false, strmangle.SetComplement(servicePlanPrimaryKeyColumns, servicePlanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServicePlanAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, servicePlanAnnotationDBTypes, false, strmangle.SetComplement(servicePlanAnnotationPrimaryKeyColumns, servicePlanAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceServicePlanAnnotations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceServicePlanAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceServicePlanAnnotations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceServicePlanAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceServicePlanAnnotations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceServicePlanAnnotations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testServicePlanToManyRemoveOpResourceServicePlanAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServicePlan
	var b, c, d, e ServicePlanAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, servicePlanDBTypes, false, strmangle.SetComplement(servicePlanPrimaryKeyColumns, servicePlanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServicePlanAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, servicePlanAnnotationDBTypes, false, strmangle.SetComplement(servicePlanAnnotationPrimaryKeyColumns, servicePlanAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceServicePlanAnnotations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceServicePlanAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceServicePlanAnnotations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceServicePlanAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceServicePlanAnnotations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceServicePlanAnnotations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceServicePlanAnnotations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testServicePlanToManyAddOpResourceServicePlanLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServicePlan
	var b, c, d, e ServicePlanLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, servicePlanDBTypes, false, strmangle.SetComplement(servicePlanPrimaryKeyColumns, servicePlanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServicePlanLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, servicePlanLabelDBTypes, false, strmangle.SetComplement(servicePlanLabelPrimaryKeyColumns, servicePlanLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServicePlanLabel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceServicePlanLabels(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceServicePlanLabels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceServicePlanLabels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceServicePlanLabels().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testServicePlanToManySetOpResourceServicePlanLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServicePlan
	var b, c, d, e ServicePlanLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, servicePlanDBTypes, false, strmangle.SetComplement(servicePlanPrimaryKeyColumns, servicePlanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServicePlanLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, servicePlanLabelDBTypes, false, strmangle.SetComplement(servicePlanLabelPrimaryKeyColumns, servicePlanLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceServicePlanLabels(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceServicePlanLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceServicePlanLabels(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceServicePlanLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceServicePlanLabels[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceServicePlanLabels[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testServicePlanToManyRemoveOpResourceServicePlanLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServicePlan
	var b, c, d, e ServicePlanLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, servicePlanDBTypes, false, strmangle.SetComplement(servicePlanPrimaryKeyColumns, servicePlanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServicePlanLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, servicePlanLabelDBTypes, false, strmangle.SetComplement(servicePlanLabelPrimaryKeyColumns, servicePlanLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceServicePlanLabels(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceServicePlanLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceServicePlanLabels(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceServicePlanLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceServicePlanLabels) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceServicePlanLabels[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceServicePlanLabels[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testServicePlanToManyAddOpServicePlanVisibilities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServicePlan
	var b, c, d, e ServicePlanVisibility

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, servicePlanDBTypes, false, strmangle.SetComplement(servicePlanPrimaryKeyColumns, servicePlanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServicePlanVisibility{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, servicePlanVisibilityDBTypes, false, strmangle.SetComplement(servicePlanVisibilityPrimaryKeyColumns, servicePlanVisibilityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServicePlanVisibility{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddServicePlanVisibilities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ServicePlanID {
			t.Error("foreign key was wrong value", a.ID, first.ServicePlanID)
		}
		if a.ID != second.ServicePlanID {
			t.Error("foreign key was wrong value", a.ID, second.ServicePlanID)
		}

		if first.R.ServicePlan != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ServicePlan != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ServicePlanVisibilities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ServicePlanVisibilities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ServicePlanVisibilities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testServicePlanToOneServiceUsingService(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ServicePlan
	var foreign Service

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, servicePlanDBTypes, false, servicePlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, serviceDBTypes, false, serviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Service struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ServiceID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Service().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ServicePlanSlice{&local}
	if err = local.L.LoadService(ctx, tx, false, (*[]*ServicePlan)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Service == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Service = nil
	if err = local.L.LoadService(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Service == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testServicePlanToOneSetOpServiceUsingService(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServicePlan
	var b, c Service

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, servicePlanDBTypes, false, strmangle.SetComplement(servicePlanPrimaryKeyColumns, servicePlanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serviceDBTypes, false, strmangle.SetComplement(servicePrimaryKeyColumns, serviceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceDBTypes, false, strmangle.SetComplement(servicePrimaryKeyColumns, serviceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Service{&b, &c} {
		err = a.SetService(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Service != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ServicePlans[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ServiceID != x.ID {
			t.Error("foreign key was wrong value", a.ServiceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ServiceID))
		reflect.Indirect(reflect.ValueOf(&a.ServiceID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ServiceID != x.ID {
			t.Error("foreign key was wrong value", a.ServiceID, x.ID)
		}
	}
}

func testServicePlansReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlan{}
	if err = randomize.Struct(seed, o, servicePlanDBTypes, true, servicePlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServicePlansReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlan{}
	if err = randomize.Struct(seed, o, servicePlanDBTypes, true, servicePlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServicePlanSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServicePlansSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlan{}
	if err = randomize.Struct(seed, o, servicePlanDBTypes, true, servicePlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServicePlans().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	servicePlanDBTypes = map[string]string{`ID`: `int`, `GUID`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `Name`: `varchar`, `Description`: `text`, `Free`: `tinyint`, `ServiceID`: `int`, `Extra`: `mediumtext`, `UniqueID`: `varchar`, `Public`: `tinyint`, `Active`: `tinyint`, `Bindable`: `tinyint`, `CreateInstanceSchema`: `text`, `UpdateInstanceSchema`: `text`, `CreateBindingSchema`: `text`, `PlanUpdateable`: `tinyint`, `MaximumPollingDuration`: `int`, `MaintenanceInfo`: `text`}
	_                  = bytes.MinRead
)

func testServicePlansUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(servicePlanPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(servicePlanAllColumns) == len(servicePlanPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlan{}
	if err = randomize.Struct(seed, o, servicePlanDBTypes, true, servicePlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServicePlans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, servicePlanDBTypes, true, servicePlanPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testServicePlansSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(servicePlanAllColumns) == len(servicePlanPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlan{}
	if err = randomize.Struct(seed, o, servicePlanDBTypes, true, servicePlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServicePlans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, servicePlanDBTypes, true, servicePlanPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(servicePlanAllColumns, servicePlanPrimaryKeyColumns) {
		fields = servicePlanAllColumns
	} else {
		fields = strmangle.SetComplement(
			servicePlanAllColumns,
			servicePlanPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ServicePlanSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testServicePlansUpsert(t *testing.T) {
	t.Parallel()

	if len(servicePlanAllColumns) == len(servicePlanPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLServicePlanUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ServicePlan{}
	if err = randomize.Struct(seed, &o, servicePlanDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServicePlan: %s", err)
	}

	count, err := ServicePlans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, servicePlanDBTypes, false, servicePlanPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServicePlan: %s", err)
	}

	count, err = ServicePlans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
