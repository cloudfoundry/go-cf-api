// +build integration,postgres
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDelayedJobs(t *testing.T) {
	t.Parallel()

	query := DelayedJobs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDelayedJobsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DelayedJob{}
	if err = randomize.Struct(seed, o, delayedJobDBTypes, true, delayedJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DelayedJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DelayedJobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDelayedJobsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DelayedJob{}
	if err = randomize.Struct(seed, o, delayedJobDBTypes, true, delayedJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DelayedJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DelayedJobs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DelayedJobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDelayedJobsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DelayedJob{}
	if err = randomize.Struct(seed, o, delayedJobDBTypes, true, delayedJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DelayedJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DelayedJobSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DelayedJobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDelayedJobsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DelayedJob{}
	if err = randomize.Struct(seed, o, delayedJobDBTypes, true, delayedJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DelayedJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DelayedJobExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DelayedJob exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DelayedJobExists to return true, but got false.")
	}
}

func testDelayedJobsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DelayedJob{}
	if err = randomize.Struct(seed, o, delayedJobDBTypes, true, delayedJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DelayedJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	delayedJobFound, err := FindDelayedJob(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if delayedJobFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDelayedJobsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DelayedJob{}
	if err = randomize.Struct(seed, o, delayedJobDBTypes, true, delayedJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DelayedJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DelayedJobs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDelayedJobsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DelayedJob{}
	if err = randomize.Struct(seed, o, delayedJobDBTypes, true, delayedJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DelayedJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DelayedJobs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDelayedJobsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	delayedJobOne := &DelayedJob{}
	delayedJobTwo := &DelayedJob{}
	if err = randomize.Struct(seed, delayedJobOne, delayedJobDBTypes, false, delayedJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DelayedJob struct: %s", err)
	}
	if err = randomize.Struct(seed, delayedJobTwo, delayedJobDBTypes, false, delayedJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DelayedJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = delayedJobOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = delayedJobTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DelayedJobs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDelayedJobsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	delayedJobOne := &DelayedJob{}
	delayedJobTwo := &DelayedJob{}
	if err = randomize.Struct(seed, delayedJobOne, delayedJobDBTypes, false, delayedJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DelayedJob struct: %s", err)
	}
	if err = randomize.Struct(seed, delayedJobTwo, delayedJobDBTypes, false, delayedJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DelayedJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = delayedJobOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = delayedJobTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DelayedJobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func delayedJobBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DelayedJob) error {
	*o = DelayedJob{}
	return nil
}

func delayedJobAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DelayedJob) error {
	*o = DelayedJob{}
	return nil
}

func delayedJobAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DelayedJob) error {
	*o = DelayedJob{}
	return nil
}

func delayedJobBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DelayedJob) error {
	*o = DelayedJob{}
	return nil
}

func delayedJobAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DelayedJob) error {
	*o = DelayedJob{}
	return nil
}

func delayedJobBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DelayedJob) error {
	*o = DelayedJob{}
	return nil
}

func delayedJobAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DelayedJob) error {
	*o = DelayedJob{}
	return nil
}

func delayedJobBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DelayedJob) error {
	*o = DelayedJob{}
	return nil
}

func delayedJobAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DelayedJob) error {
	*o = DelayedJob{}
	return nil
}

func testDelayedJobsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DelayedJob{}
	o := &DelayedJob{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, delayedJobDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DelayedJob object: %s", err)
	}

	AddDelayedJobHook(boil.BeforeInsertHook, delayedJobBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	delayedJobBeforeInsertHooks = []DelayedJobHook{}

	AddDelayedJobHook(boil.AfterInsertHook, delayedJobAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	delayedJobAfterInsertHooks = []DelayedJobHook{}

	AddDelayedJobHook(boil.AfterSelectHook, delayedJobAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	delayedJobAfterSelectHooks = []DelayedJobHook{}

	AddDelayedJobHook(boil.BeforeUpdateHook, delayedJobBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	delayedJobBeforeUpdateHooks = []DelayedJobHook{}

	AddDelayedJobHook(boil.AfterUpdateHook, delayedJobAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	delayedJobAfterUpdateHooks = []DelayedJobHook{}

	AddDelayedJobHook(boil.BeforeDeleteHook, delayedJobBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	delayedJobBeforeDeleteHooks = []DelayedJobHook{}

	AddDelayedJobHook(boil.AfterDeleteHook, delayedJobAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	delayedJobAfterDeleteHooks = []DelayedJobHook{}

	AddDelayedJobHook(boil.BeforeUpsertHook, delayedJobBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	delayedJobBeforeUpsertHooks = []DelayedJobHook{}

	AddDelayedJobHook(boil.AfterUpsertHook, delayedJobAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	delayedJobAfterUpsertHooks = []DelayedJobHook{}
}

func testDelayedJobsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DelayedJob{}
	if err = randomize.Struct(seed, o, delayedJobDBTypes, true, delayedJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DelayedJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DelayedJobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDelayedJobsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DelayedJob{}
	if err = randomize.Struct(seed, o, delayedJobDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DelayedJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(delayedJobColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DelayedJobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDelayedJobsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DelayedJob{}
	if err = randomize.Struct(seed, o, delayedJobDBTypes, true, delayedJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DelayedJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDelayedJobsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DelayedJob{}
	if err = randomize.Struct(seed, o, delayedJobDBTypes, true, delayedJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DelayedJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DelayedJobSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDelayedJobsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DelayedJob{}
	if err = randomize.Struct(seed, o, delayedJobDBTypes, true, delayedJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DelayedJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DelayedJobs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	delayedJobDBTypes = map[string]string{`ID`: `integer`, `GUID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `Priority`: `integer`, `Attempts`: `integer`, `Handler`: `text`, `LastError`: `text`, `RunAt`: `timestamp without time zone`, `LockedAt`: `timestamp without time zone`, `FailedAt`: `timestamp without time zone`, `LockedBy`: `text`, `Queue`: `text`, `CFAPIError`: `text`}
	_                 = bytes.MinRead
)

func testDelayedJobsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(delayedJobPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(delayedJobAllColumns) == len(delayedJobPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DelayedJob{}
	if err = randomize.Struct(seed, o, delayedJobDBTypes, true, delayedJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DelayedJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DelayedJobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, delayedJobDBTypes, true, delayedJobPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DelayedJob struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDelayedJobsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(delayedJobAllColumns) == len(delayedJobPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DelayedJob{}
	if err = randomize.Struct(seed, o, delayedJobDBTypes, true, delayedJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DelayedJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DelayedJobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, delayedJobDBTypes, true, delayedJobPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DelayedJob struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(delayedJobAllColumns, delayedJobPrimaryKeyColumns) {
		fields = delayedJobAllColumns
	} else {
		fields = strmangle.SetComplement(
			delayedJobAllColumns,
			delayedJobPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DelayedJobSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDelayedJobsUpsert(t *testing.T) {
	t.Parallel()

	if len(delayedJobAllColumns) == len(delayedJobPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DelayedJob{}
	if err = randomize.Struct(seed, &o, delayedJobDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DelayedJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DelayedJob: %s", err)
	}

	count, err := DelayedJobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, delayedJobDBTypes, false, delayedJobPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DelayedJob struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DelayedJob: %s", err)
	}

	count, err = DelayedJobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
