// +build integration postgres
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOrganizationAnnotations(t *testing.T) {
	t.Parallel()

	query := OrganizationAnnotations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOrganizationAnnotationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAnnotation{}
	if err = randomize.Struct(seed, o, organizationAnnotationDBTypes, true, organizationAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrganizationAnnotations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrganizationAnnotationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAnnotation{}
	if err = randomize.Struct(seed, o, organizationAnnotationDBTypes, true, organizationAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OrganizationAnnotations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrganizationAnnotations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrganizationAnnotationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAnnotation{}
	if err = randomize.Struct(seed, o, organizationAnnotationDBTypes, true, organizationAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrganizationAnnotationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrganizationAnnotations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrganizationAnnotationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAnnotation{}
	if err = randomize.Struct(seed, o, organizationAnnotationDBTypes, true, organizationAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OrganizationAnnotationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OrganizationAnnotation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OrganizationAnnotationExists to return true, but got false.")
	}
}

func testOrganizationAnnotationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAnnotation{}
	if err = randomize.Struct(seed, o, organizationAnnotationDBTypes, true, organizationAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	organizationAnnotationFound, err := FindOrganizationAnnotation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if organizationAnnotationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOrganizationAnnotationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAnnotation{}
	if err = randomize.Struct(seed, o, organizationAnnotationDBTypes, true, organizationAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OrganizationAnnotations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOrganizationAnnotationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAnnotation{}
	if err = randomize.Struct(seed, o, organizationAnnotationDBTypes, true, organizationAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OrganizationAnnotations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOrganizationAnnotationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	organizationAnnotationOne := &OrganizationAnnotation{}
	organizationAnnotationTwo := &OrganizationAnnotation{}
	if err = randomize.Struct(seed, organizationAnnotationOne, organizationAnnotationDBTypes, false, organizationAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAnnotation struct: %s", err)
	}
	if err = randomize.Struct(seed, organizationAnnotationTwo, organizationAnnotationDBTypes, false, organizationAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = organizationAnnotationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = organizationAnnotationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrganizationAnnotations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOrganizationAnnotationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	organizationAnnotationOne := &OrganizationAnnotation{}
	organizationAnnotationTwo := &OrganizationAnnotation{}
	if err = randomize.Struct(seed, organizationAnnotationOne, organizationAnnotationDBTypes, false, organizationAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAnnotation struct: %s", err)
	}
	if err = randomize.Struct(seed, organizationAnnotationTwo, organizationAnnotationDBTypes, false, organizationAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = organizationAnnotationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = organizationAnnotationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrganizationAnnotations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func organizationAnnotationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrganizationAnnotation) error {
	*o = OrganizationAnnotation{}
	return nil
}

func organizationAnnotationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrganizationAnnotation) error {
	*o = OrganizationAnnotation{}
	return nil
}

func organizationAnnotationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *OrganizationAnnotation) error {
	*o = OrganizationAnnotation{}
	return nil
}

func organizationAnnotationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrganizationAnnotation) error {
	*o = OrganizationAnnotation{}
	return nil
}

func organizationAnnotationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrganizationAnnotation) error {
	*o = OrganizationAnnotation{}
	return nil
}

func organizationAnnotationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrganizationAnnotation) error {
	*o = OrganizationAnnotation{}
	return nil
}

func organizationAnnotationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrganizationAnnotation) error {
	*o = OrganizationAnnotation{}
	return nil
}

func organizationAnnotationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrganizationAnnotation) error {
	*o = OrganizationAnnotation{}
	return nil
}

func organizationAnnotationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrganizationAnnotation) error {
	*o = OrganizationAnnotation{}
	return nil
}

func testOrganizationAnnotationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &OrganizationAnnotation{}
	o := &OrganizationAnnotation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, organizationAnnotationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OrganizationAnnotation object: %s", err)
	}

	AddOrganizationAnnotationHook(boil.BeforeInsertHook, organizationAnnotationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	organizationAnnotationBeforeInsertHooks = []OrganizationAnnotationHook{}

	AddOrganizationAnnotationHook(boil.AfterInsertHook, organizationAnnotationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	organizationAnnotationAfterInsertHooks = []OrganizationAnnotationHook{}

	AddOrganizationAnnotationHook(boil.AfterSelectHook, organizationAnnotationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	organizationAnnotationAfterSelectHooks = []OrganizationAnnotationHook{}

	AddOrganizationAnnotationHook(boil.BeforeUpdateHook, organizationAnnotationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	organizationAnnotationBeforeUpdateHooks = []OrganizationAnnotationHook{}

	AddOrganizationAnnotationHook(boil.AfterUpdateHook, organizationAnnotationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	organizationAnnotationAfterUpdateHooks = []OrganizationAnnotationHook{}

	AddOrganizationAnnotationHook(boil.BeforeDeleteHook, organizationAnnotationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	organizationAnnotationBeforeDeleteHooks = []OrganizationAnnotationHook{}

	AddOrganizationAnnotationHook(boil.AfterDeleteHook, organizationAnnotationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	organizationAnnotationAfterDeleteHooks = []OrganizationAnnotationHook{}

	AddOrganizationAnnotationHook(boil.BeforeUpsertHook, organizationAnnotationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	organizationAnnotationBeforeUpsertHooks = []OrganizationAnnotationHook{}

	AddOrganizationAnnotationHook(boil.AfterUpsertHook, organizationAnnotationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	organizationAnnotationAfterUpsertHooks = []OrganizationAnnotationHook{}
}

func testOrganizationAnnotationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAnnotation{}
	if err = randomize.Struct(seed, o, organizationAnnotationDBTypes, true, organizationAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrganizationAnnotations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrganizationAnnotationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAnnotation{}
	if err = randomize.Struct(seed, o, organizationAnnotationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrganizationAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(organizationAnnotationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OrganizationAnnotations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrganizationAnnotationToOneOrganizationUsingResource(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrganizationAnnotation
	var foreign Organization

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, organizationAnnotationDBTypes, true, organizationAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAnnotation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, organizationDBTypes, false, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ResourceGUID, foreign.GUID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Resource().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.GUID, foreign.GUID) {
		t.Errorf("want: %v, got %v", foreign.GUID, check.GUID)
	}

	slice := OrganizationAnnotationSlice{&local}
	if err = local.L.LoadResource(ctx, tx, false, (*[]*OrganizationAnnotation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Resource == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Resource = nil
	if err = local.L.LoadResource(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Resource == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrganizationAnnotationToOneSetOpOrganizationUsingResource(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrganizationAnnotation
	var b, c Organization

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationAnnotationDBTypes, false, strmangle.SetComplement(organizationAnnotationPrimaryKeyColumns, organizationAnnotationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Organization{&b, &c} {
		err = a.SetResource(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Resource != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ResourceOrganizationAnnotations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ResourceGUID, x.GUID) {
			t.Error("foreign key was wrong value", a.ResourceGUID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ResourceGUID))
		reflect.Indirect(reflect.ValueOf(&a.ResourceGUID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ResourceGUID, x.GUID) {
			t.Error("foreign key was wrong value", a.ResourceGUID, x.GUID)
		}
	}
}

func testOrganizationAnnotationToOneRemoveOpOrganizationUsingResource(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrganizationAnnotation
	var b Organization

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationAnnotationDBTypes, false, strmangle.SetComplement(organizationAnnotationPrimaryKeyColumns, organizationAnnotationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetResource(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveResource(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Resource().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Resource != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ResourceGUID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ResourceOrganizationAnnotations) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOrganizationAnnotationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAnnotation{}
	if err = randomize.Struct(seed, o, organizationAnnotationDBTypes, true, organizationAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrganizationAnnotationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAnnotation{}
	if err = randomize.Struct(seed, o, organizationAnnotationDBTypes, true, organizationAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrganizationAnnotationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrganizationAnnotationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAnnotation{}
	if err = randomize.Struct(seed, o, organizationAnnotationDBTypes, true, organizationAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrganizationAnnotations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	organizationAnnotationDBTypes = map[string]string{`ID`: `integer`, `GUID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `ResourceGUID`: `character varying`, `KeyPrefix`: `character varying`, `Key`: `character varying`, `Value`: `character varying`}
	_                             = bytes.MinRead
)

func testOrganizationAnnotationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(organizationAnnotationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(organizationAnnotationAllColumns) == len(organizationAnnotationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAnnotation{}
	if err = randomize.Struct(seed, o, organizationAnnotationDBTypes, true, organizationAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrganizationAnnotations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, organizationAnnotationDBTypes, true, organizationAnnotationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrganizationAnnotation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOrganizationAnnotationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(organizationAnnotationAllColumns) == len(organizationAnnotationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAnnotation{}
	if err = randomize.Struct(seed, o, organizationAnnotationDBTypes, true, organizationAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrganizationAnnotations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, organizationAnnotationDBTypes, true, organizationAnnotationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrganizationAnnotation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(organizationAnnotationAllColumns, organizationAnnotationPrimaryKeyColumns) {
		fields = organizationAnnotationAllColumns
	} else {
		fields = strmangle.SetComplement(
			organizationAnnotationAllColumns,
			organizationAnnotationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OrganizationAnnotationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOrganizationAnnotationsUpsert(t *testing.T) {
	t.Parallel()

	if len(organizationAnnotationAllColumns) == len(organizationAnnotationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OrganizationAnnotation{}
	if err = randomize.Struct(seed, &o, organizationAnnotationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrganizationAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrganizationAnnotation: %s", err)
	}

	count, err := OrganizationAnnotations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, organizationAnnotationDBTypes, false, organizationAnnotationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrganizationAnnotation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrganizationAnnotation: %s", err)
	}

	count, err = OrganizationAnnotations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
