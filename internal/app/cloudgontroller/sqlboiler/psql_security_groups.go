// +build psql
//go:generate mockgen -source=$GOFILE -destination=mocks/security_groups.go
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SecurityGroup is an object representing the database table.
type SecurityGroup struct {
	ID             int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	GUID           string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	CreatedAt      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Name           string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Rules          null.String `boil:"rules" json:"rules,omitempty" toml:"rules" yaml:"rules,omitempty"`
	StagingDefault null.Bool   `boil:"staging_default" json:"staging_default,omitempty" toml:"staging_default" yaml:"staging_default,omitempty"`
	RunningDefault null.Bool   `boil:"running_default" json:"running_default,omitempty" toml:"running_default" yaml:"running_default,omitempty"`

	R *securityGroupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L securityGroupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SecurityGroupColumns = struct {
	ID             string
	GUID           string
	CreatedAt      string
	UpdatedAt      string
	Name           string
	Rules          string
	StagingDefault string
	RunningDefault string
}{
	ID:             "id",
	GUID:           "guid",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	Name:           "name",
	Rules:          "rules",
	StagingDefault: "staging_default",
	RunningDefault: "running_default",
}

var SecurityGroupTableColumns = struct {
	ID             string
	GUID           string
	CreatedAt      string
	UpdatedAt      string
	Name           string
	Rules          string
	StagingDefault string
	RunningDefault string
}{
	ID:             "security_groups.id",
	GUID:           "security_groups.guid",
	CreatedAt:      "security_groups.created_at",
	UpdatedAt:      "security_groups.updated_at",
	Name:           "security_groups.name",
	Rules:          "security_groups.rules",
	StagingDefault: "security_groups.staging_default",
	RunningDefault: "security_groups.running_default",
}

// Generated where

var SecurityGroupWhere = struct {
	ID             whereHelperint
	GUID           whereHelperstring
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpernull_Time
	Name           whereHelperstring
	Rules          whereHelpernull_String
	StagingDefault whereHelpernull_Bool
	RunningDefault whereHelpernull_Bool
}{
	ID:             whereHelperint{field: "\"security_groups\".\"id\""},
	GUID:           whereHelperstring{field: "\"security_groups\".\"guid\""},
	CreatedAt:      whereHelpertime_Time{field: "\"security_groups\".\"created_at\""},
	UpdatedAt:      whereHelpernull_Time{field: "\"security_groups\".\"updated_at\""},
	Name:           whereHelperstring{field: "\"security_groups\".\"name\""},
	Rules:          whereHelpernull_String{field: "\"security_groups\".\"rules\""},
	StagingDefault: whereHelpernull_Bool{field: "\"security_groups\".\"staging_default\""},
	RunningDefault: whereHelpernull_Bool{field: "\"security_groups\".\"running_default\""},
}

// SecurityGroupRels is where relationship names are stored.
var SecurityGroupRels = struct {
	SecurityGroupsSpaces                            string
	StagingSecurityGroupStagingSecurityGroupsSpaces string
}{
	SecurityGroupsSpaces:                            "SecurityGroupsSpaces",
	StagingSecurityGroupStagingSecurityGroupsSpaces: "StagingSecurityGroupStagingSecurityGroupsSpaces",
}

// securityGroupR is where relationships are stored.
type securityGroupR struct {
	SecurityGroupsSpaces                            SecurityGroupsSpaceSlice        `boil:"SecurityGroupsSpaces" json:"SecurityGroupsSpaces" toml:"SecurityGroupsSpaces" yaml:"SecurityGroupsSpaces"`
	StagingSecurityGroupStagingSecurityGroupsSpaces StagingSecurityGroupsSpaceSlice `boil:"StagingSecurityGroupStagingSecurityGroupsSpaces" json:"StagingSecurityGroupStagingSecurityGroupsSpaces" toml:"StagingSecurityGroupStagingSecurityGroupsSpaces" yaml:"StagingSecurityGroupStagingSecurityGroupsSpaces"`
}

// NewStruct creates a new relationship struct
func (*securityGroupR) NewStruct() *securityGroupR {
	return &securityGroupR{}
}

// securityGroupL is where Load methods for each relationship are stored.
type securityGroupL struct{}

var (
	securityGroupAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "rules", "staging_default", "running_default"}
	securityGroupColumnsWithoutDefault = []string{"guid", "updated_at", "name", "rules"}
	securityGroupColumnsWithDefault    = []string{"id", "created_at", "staging_default", "running_default"}
	securityGroupPrimaryKeyColumns     = []string{"id"}
)

type (
	// SecurityGroupSlice is an alias for a slice of pointers to SecurityGroup.
	// This should almost always be used instead of []SecurityGroup.
	SecurityGroupSlice []*SecurityGroup

	securityGroupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	securityGroupType                 = reflect.TypeOf(&SecurityGroup{})
	securityGroupMapping              = queries.MakeStructMapping(securityGroupType)
	securityGroupPrimaryKeyMapping, _ = queries.BindMapping(securityGroupType, securityGroupMapping, securityGroupPrimaryKeyColumns)
	securityGroupInsertCacheMut       sync.RWMutex
	securityGroupInsertCache          = make(map[string]insertCache)
	securityGroupUpdateCacheMut       sync.RWMutex
	securityGroupUpdateCache          = make(map[string]updateCache)
	securityGroupUpsertCacheMut       sync.RWMutex
	securityGroupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

type SecurityGroupFinisher interface {
	One(ctx context.Context, exec boil.ContextExecutor) (*SecurityGroup, error)
	Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	All(ctx context.Context, exec boil.ContextExecutor) (SecurityGroupSlice, error)
	Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)
}

// One returns a single securityGroup record from the query.
func (q securityGroupQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SecurityGroup, error) {
	o := &SecurityGroup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for security_groups")
	}

	return o, nil
}

// All returns all SecurityGroup records from the query.
func (q securityGroupQuery) All(ctx context.Context, exec boil.ContextExecutor) (SecurityGroupSlice, error) {
	var o []*SecurityGroup

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SecurityGroup slice")
	}

	return o, nil
}

// Count returns the count of all SecurityGroup records in the query.
func (q securityGroupQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count security_groups rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q securityGroupQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if security_groups exists")
	}

	return count > 0, nil
}

// SecurityGroupsSpaces retrieves all the security_groups_space's SecurityGroupsSpaces with an executor.
func (q securityGroupQuery) SecurityGroupsSpaces(o *SecurityGroup, mods ...qm.QueryMod) securityGroupsSpaceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"security_groups_spaces\".\"security_group_id\"=?", o.ID),
	)

	query := SecurityGroupsSpaces(queryMods...)
	queries.SetFrom(query.Query, "\"security_groups_spaces\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"security_groups_spaces\".*"})
	}

	return query
}

// StagingSecurityGroupStagingSecurityGroupsSpaces retrieves all the staging_security_groups_space's StagingSecurityGroupsSpaces with an executor via staging_security_group_id column.
func (q securityGroupQuery) StagingSecurityGroupStagingSecurityGroupsSpaces(o *SecurityGroup, mods ...qm.QueryMod) stagingSecurityGroupsSpaceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"staging_security_groups_spaces\".\"staging_security_group_id\"=?", o.ID),
	)

	query := StagingSecurityGroupsSpaces(queryMods...)
	queries.SetFrom(query.Query, "\"staging_security_groups_spaces\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"staging_security_groups_spaces\".*"})
	}

	return query
}

// LoadSecurityGroupsSpaces allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (securityGroupL) LoadSecurityGroupsSpaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSecurityGroup interface{}, mods queries.Applicator) error {
	var slice []*SecurityGroup
	var object *SecurityGroup

	if singular {
		object = maybeSecurityGroup.(*SecurityGroup)
	} else {
		slice = *maybeSecurityGroup.(*[]*SecurityGroup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &securityGroupR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &securityGroupR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`security_groups_spaces`),
		qm.WhereIn(`security_groups_spaces.security_group_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load security_groups_spaces")
	}

	var resultSlice []*SecurityGroupsSpace
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice security_groups_spaces")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on security_groups_spaces")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for security_groups_spaces")
	}

	if singular {
		object.R.SecurityGroupsSpaces = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &securityGroupsSpaceR{}
			}
			foreign.R.SecurityGroup = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SecurityGroupID {
				local.R.SecurityGroupsSpaces = append(local.R.SecurityGroupsSpaces, foreign)
				if foreign.R == nil {
					foreign.R = &securityGroupsSpaceR{}
				}
				foreign.R.SecurityGroup = local
				break
			}
		}
	}

	return nil
}

// LoadStagingSecurityGroupStagingSecurityGroupsSpaces allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (securityGroupL) LoadStagingSecurityGroupStagingSecurityGroupsSpaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSecurityGroup interface{}, mods queries.Applicator) error {
	var slice []*SecurityGroup
	var object *SecurityGroup

	if singular {
		object = maybeSecurityGroup.(*SecurityGroup)
	} else {
		slice = *maybeSecurityGroup.(*[]*SecurityGroup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &securityGroupR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &securityGroupR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`staging_security_groups_spaces`),
		qm.WhereIn(`staging_security_groups_spaces.staging_security_group_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load staging_security_groups_spaces")
	}

	var resultSlice []*StagingSecurityGroupsSpace
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice staging_security_groups_spaces")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on staging_security_groups_spaces")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for staging_security_groups_spaces")
	}

	if singular {
		object.R.StagingSecurityGroupStagingSecurityGroupsSpaces = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &stagingSecurityGroupsSpaceR{}
			}
			foreign.R.StagingSecurityGroup = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.StagingSecurityGroupID {
				local.R.StagingSecurityGroupStagingSecurityGroupsSpaces = append(local.R.StagingSecurityGroupStagingSecurityGroupsSpaces, foreign)
				if foreign.R == nil {
					foreign.R = &stagingSecurityGroupsSpaceR{}
				}
				foreign.R.StagingSecurityGroup = local
				break
			}
		}
	}

	return nil
}

// AddSecurityGroupsSpaces adds the given related objects to the existing relationships
// of the security_group, optionally inserting them as new records.
// Appends related to o.R.SecurityGroupsSpaces.
// Sets related.R.SecurityGroup appropriately.
func (q securityGroupQuery) AddSecurityGroupsSpaces(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SecurityGroupsSpace) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SecurityGroupID = o.ID
			if err = SecurityGroupsSpaces().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"security_groups_spaces\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"security_group_id"}),
				strmangle.WhereClause("\"", "\"", 2, securityGroupsSpacePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.SecurityGroupsSpacesPK}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SecurityGroupID = o.ID
		}
	}

	if o.R == nil {
		o.R = &securityGroupR{
			SecurityGroupsSpaces: related,
		}
	} else {
		o.R.SecurityGroupsSpaces = append(o.R.SecurityGroupsSpaces, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &securityGroupsSpaceR{
				SecurityGroup: o,
			}
		} else {
			rel.R.SecurityGroup = o
		}
	}
	return nil
}

// AddStagingSecurityGroupStagingSecurityGroupsSpaces adds the given related objects to the existing relationships
// of the security_group, optionally inserting them as new records.
// Appends related to o.R.StagingSecurityGroupStagingSecurityGroupsSpaces.
// Sets related.R.StagingSecurityGroup appropriately.
func (q securityGroupQuery) AddStagingSecurityGroupStagingSecurityGroupsSpaces(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StagingSecurityGroupsSpace) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StagingSecurityGroupID = o.ID
			if err = StagingSecurityGroupsSpaces().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"staging_security_groups_spaces\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"staging_security_group_id"}),
				strmangle.WhereClause("\"", "\"", 2, stagingSecurityGroupsSpacePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.StagingSecurityGroupsSpacesPK}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StagingSecurityGroupID = o.ID
		}
	}

	if o.R == nil {
		o.R = &securityGroupR{
			StagingSecurityGroupStagingSecurityGroupsSpaces: related,
		}
	} else {
		o.R.StagingSecurityGroupStagingSecurityGroupsSpaces = append(o.R.StagingSecurityGroupStagingSecurityGroupsSpaces, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &stagingSecurityGroupsSpaceR{
				StagingSecurityGroup: o,
			}
		} else {
			rel.R.StagingSecurityGroup = o
		}
	}
	return nil
}

// SecurityGroups retrieves all the records using an executor.
func SecurityGroups(mods ...qm.QueryMod) securityGroupQuery {
	mods = append(mods, qm.From("\"security_groups\""))
	return securityGroupQuery{NewQuery(mods...)}
}

type SecurityGroupFinder interface {
	FindSecurityGroup(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SecurityGroup, error)
}

// FindSecurityGroup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSecurityGroup(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SecurityGroup, error) {
	securityGroupObj := &SecurityGroup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"security_groups\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, securityGroupObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from security_groups")
	}

	return securityGroupObj, nil
}

type SecurityGroupInserter interface {
	Insert(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (q securityGroupQuery) Insert(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no security_groups provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(securityGroupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	securityGroupInsertCacheMut.RLock()
	cache, cached := securityGroupInsertCache[key]
	securityGroupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			securityGroupAllColumns,
			securityGroupColumnsWithDefault,
			securityGroupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(securityGroupType, securityGroupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(securityGroupType, securityGroupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"security_groups\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"security_groups\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into security_groups")
	}

	if !cached {
		securityGroupInsertCacheMut.Lock()
		securityGroupInsertCache[key] = cache
		securityGroupInsertCacheMut.Unlock()
	}

	return nil
}

type SecurityGroupUpdater interface {
	Update(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)
	UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
	UpdateAllSlice(o SecurityGroupSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
}

// Update uses an executor to update the SecurityGroup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (q securityGroupQuery) Update(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	securityGroupUpdateCacheMut.RLock()
	cache, cached := securityGroupUpdateCache[key]
	securityGroupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			securityGroupAllColumns,
			securityGroupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update security_groups, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"security_groups\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, securityGroupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(securityGroupType, securityGroupMapping, append(wl, securityGroupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update security_groups row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for security_groups")
	}

	if !cached {
		securityGroupUpdateCacheMut.Lock()
		securityGroupUpdateCache[key] = cache
		securityGroupUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q securityGroupQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for security_groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for security_groups")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (q securityGroupQuery) UpdateAllSlice(o SecurityGroupSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), securityGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"security_groups\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, securityGroupPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in securityGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all securityGroup")
	}
	return rowsAff, nil
}

type SecurityGroupDeleter interface {
	Delete(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAllSlice(o SecurityGroupSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)
}

// Delete deletes a single SecurityGroup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (q securityGroupQuery) Delete(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SecurityGroup provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), securityGroupPrimaryKeyMapping)
	sql := "DELETE FROM \"security_groups\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from security_groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for security_groups")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q securityGroupQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no securityGroupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from security_groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for security_groups")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (q securityGroupQuery) DeleteAllSlice(o SecurityGroupSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), securityGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"security_groups\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, securityGroupPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from securityGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for security_groups")
	}

	return rowsAff, nil
}

type SecurityGroupReloader interface {
	Reload(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor) error
	ReloadAll(o *SecurityGroupSlice, ctx context.Context, exec boil.ContextExecutor) error
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (q securityGroupQuery) Reload(o *SecurityGroup, ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSecurityGroup(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (q securityGroupQuery) ReloadAll(o *SecurityGroupSlice, ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SecurityGroupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), securityGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"security_groups\".* FROM \"security_groups\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, securityGroupPrimaryKeyColumns, len(*o))

	query := queries.Raw(sql, args...)

	err := query.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SecurityGroupSlice")
	}

	*o = slice

	return nil
}

// SecurityGroupExists checks if the SecurityGroup row exists.
func SecurityGroupExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"security_groups\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if security_groups exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SecurityGroup) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no security_groups provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(securityGroupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	securityGroupUpsertCacheMut.RLock()
	cache, cached := securityGroupUpsertCache[key]
	securityGroupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			securityGroupAllColumns,
			securityGroupColumnsWithDefault,
			securityGroupColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			securityGroupAllColumns,
			securityGroupPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert security_groups, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(securityGroupPrimaryKeyColumns))
			copy(conflict, securityGroupPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"security_groups\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(securityGroupType, securityGroupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(securityGroupType, securityGroupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert security_groups")
	}

	if !cached {
		securityGroupUpsertCacheMut.Lock()
		securityGroupUpsertCache[key] = cache
		securityGroupUpsertCacheMut.Unlock()
	}

	return nil
}
