// +build psql_integration
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSpaces(t *testing.T) {
	t.Parallel()

	query := Spaces()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSpacesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Space{}
	if err = randomize.Struct(seed, o, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Spaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSpacesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Space{}
	if err = randomize.Struct(seed, o, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Spaces().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Spaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSpacesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Space{}
	if err = randomize.Struct(seed, o, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SpaceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Spaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSpacesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Space{}
	if err = randomize.Struct(seed, o, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SpaceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Space exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SpaceExists to return true, but got false.")
	}
}

func testSpacesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Space{}
	if err = randomize.Struct(seed, o, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	spaceFound, err := FindSpace(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if spaceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSpacesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Space{}
	if err = randomize.Struct(seed, o, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Spaces().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSpacesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Space{}
	if err = randomize.Struct(seed, o, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Spaces().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSpacesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	spaceOne := &Space{}
	spaceTwo := &Space{}
	if err = randomize.Struct(seed, spaceOne, spaceDBTypes, false, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}
	if err = randomize.Struct(seed, spaceTwo, spaceDBTypes, false, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = spaceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = spaceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Spaces().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSpacesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	spaceOne := &Space{}
	spaceTwo := &Space{}
	if err = randomize.Struct(seed, spaceOne, spaceDBTypes, false, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}
	if err = randomize.Struct(seed, spaceTwo, spaceDBTypes, false, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = spaceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = spaceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Spaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func spaceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Space) error {
	*o = Space{}
	return nil
}

func spaceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Space) error {
	*o = Space{}
	return nil
}

func spaceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Space) error {
	*o = Space{}
	return nil
}

func spaceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Space) error {
	*o = Space{}
	return nil
}

func spaceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Space) error {
	*o = Space{}
	return nil
}

func spaceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Space) error {
	*o = Space{}
	return nil
}

func spaceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Space) error {
	*o = Space{}
	return nil
}

func spaceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Space) error {
	*o = Space{}
	return nil
}

func spaceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Space) error {
	*o = Space{}
	return nil
}

func testSpacesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Space{}
	o := &Space{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, spaceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Space object: %s", err)
	}

	AddSpaceHook(boil.BeforeInsertHook, spaceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	spaceBeforeInsertHooks = []SpaceHook{}

	AddSpaceHook(boil.AfterInsertHook, spaceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	spaceAfterInsertHooks = []SpaceHook{}

	AddSpaceHook(boil.AfterSelectHook, spaceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	spaceAfterSelectHooks = []SpaceHook{}

	AddSpaceHook(boil.BeforeUpdateHook, spaceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	spaceBeforeUpdateHooks = []SpaceHook{}

	AddSpaceHook(boil.AfterUpdateHook, spaceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	spaceAfterUpdateHooks = []SpaceHook{}

	AddSpaceHook(boil.BeforeDeleteHook, spaceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	spaceBeforeDeleteHooks = []SpaceHook{}

	AddSpaceHook(boil.AfterDeleteHook, spaceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	spaceAfterDeleteHooks = []SpaceHook{}

	AddSpaceHook(boil.BeforeUpsertHook, spaceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	spaceBeforeUpsertHooks = []SpaceHook{}

	AddSpaceHook(boil.AfterUpsertHook, spaceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	spaceAfterUpsertHooks = []SpaceHook{}
}

func testSpacesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Space{}
	if err = randomize.Struct(seed, o, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Spaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSpacesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Space{}
	if err = randomize.Struct(seed, o, spaceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(spaceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Spaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSpaceToManyApps(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c App

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, appDBTypes, false, appColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, appDBTypes, false, appColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SpaceGUID, a.GUID)
	queries.Assign(&c.SpaceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Apps().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SpaceGUID, b.SpaceGUID) {
			bFound = true
		}
		if queries.Equal(v.SpaceGUID, c.SpaceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SpaceSlice{&a}
	if err = a.L.LoadApps(ctx, tx, false, (*[]*Space)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Apps); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Apps = nil
	if err = a.L.LoadApps(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Apps); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSpaceToManyRoutes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c Route

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, routeDBTypes, false, routeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, routeDBTypes, false, routeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SpaceID = a.ID
	c.SpaceID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Routes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SpaceID == b.SpaceID {
			bFound = true
		}
		if v.SpaceID == c.SpaceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SpaceSlice{&a}
	if err = a.L.LoadRoutes(ctx, tx, false, (*[]*Space)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Routes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Routes = nil
	if err = a.L.LoadRoutes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Routes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSpaceToManySecurityGroupsSpaces(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c SecurityGroupsSpace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, securityGroupsSpaceDBTypes, false, securityGroupsSpaceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, securityGroupsSpaceDBTypes, false, securityGroupsSpaceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SpaceID = a.ID
	c.SpaceID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SecurityGroupsSpaces().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SpaceID == b.SpaceID {
			bFound = true
		}
		if v.SpaceID == c.SpaceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SpaceSlice{&a}
	if err = a.L.LoadSecurityGroupsSpaces(ctx, tx, false, (*[]*Space)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SecurityGroupsSpaces); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SecurityGroupsSpaces = nil
	if err = a.L.LoadSecurityGroupsSpaces(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SecurityGroupsSpaces); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSpaceToManyServiceBrokers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c ServiceBroker

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serviceBrokerDBTypes, false, serviceBrokerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceBrokerDBTypes, false, serviceBrokerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SpaceID, a.ID)
	queries.Assign(&c.SpaceID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ServiceBrokers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SpaceID, b.SpaceID) {
			bFound = true
		}
		if queries.Equal(v.SpaceID, c.SpaceID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SpaceSlice{&a}
	if err = a.L.LoadServiceBrokers(ctx, tx, false, (*[]*Space)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ServiceBrokers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ServiceBrokers = nil
	if err = a.L.LoadServiceBrokers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ServiceBrokers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSpaceToManySharedServiceInstances(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c ServiceInstance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serviceInstanceDBTypes, false, serviceInstanceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceInstanceDBTypes, false, serviceInstanceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"service_instance_shares\" (\"target_space_guid\", \"service_instance_guid\") values ($1, $2)", a.GUID, b.GUID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"service_instance_shares\" (\"target_space_guid\", \"service_instance_guid\") values ($1, $2)", a.GUID, c.GUID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.SharedServiceInstances().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GUID == b.GUID {
			bFound = true
		}
		if v.GUID == c.GUID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SpaceSlice{&a}
	if err = a.L.LoadSharedServiceInstances(ctx, tx, false, (*[]*Space)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SharedServiceInstances); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SharedServiceInstances = nil
	if err = a.L.LoadSharedServiceInstances(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SharedServiceInstances); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSpaceToManyServiceInstances(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c ServiceInstance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serviceInstanceDBTypes, false, serviceInstanceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceInstanceDBTypes, false, serviceInstanceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SpaceID = a.ID
	c.SpaceID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ServiceInstances().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SpaceID == b.SpaceID {
			bFound = true
		}
		if v.SpaceID == c.SpaceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SpaceSlice{&a}
	if err = a.L.LoadServiceInstances(ctx, tx, false, (*[]*Space)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ServiceInstances); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ServiceInstances = nil
	if err = a.L.LoadServiceInstances(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ServiceInstances); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSpaceToManyResourceSpaceAnnotations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c SpaceAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, spaceAnnotationDBTypes, false, spaceAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, spaceAnnotationDBTypes, false, spaceAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceSpaceAnnotations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SpaceSlice{&a}
	if err = a.L.LoadResourceSpaceAnnotations(ctx, tx, false, (*[]*Space)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceSpaceAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceSpaceAnnotations = nil
	if err = a.L.LoadResourceSpaceAnnotations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceSpaceAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSpaceToManyResourceSpaceLabels(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c SpaceLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, spaceLabelDBTypes, false, spaceLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, spaceLabelDBTypes, false, spaceLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceSpaceLabels().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SpaceSlice{&a}
	if err = a.L.LoadResourceSpaceLabels(ctx, tx, false, (*[]*Space)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceSpaceLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceSpaceLabels = nil
	if err = a.L.LoadResourceSpaceLabels(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceSpaceLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSpaceToManySpacesApplicationSupporters(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c SpacesApplicationSupporter

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, spacesApplicationSupporterDBTypes, false, spacesApplicationSupporterColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, spacesApplicationSupporterDBTypes, false, spacesApplicationSupporterColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SpaceID = a.ID
	c.SpaceID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SpacesApplicationSupporters().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SpaceID == b.SpaceID {
			bFound = true
		}
		if v.SpaceID == c.SpaceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SpaceSlice{&a}
	if err = a.L.LoadSpacesApplicationSupporters(ctx, tx, false, (*[]*Space)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SpacesApplicationSupporters); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SpacesApplicationSupporters = nil
	if err = a.L.LoadSpacesApplicationSupporters(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SpacesApplicationSupporters); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSpaceToManySpacesAuditors(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c SpacesAuditor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, spacesAuditorDBTypes, false, spacesAuditorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, spacesAuditorDBTypes, false, spacesAuditorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SpaceID = a.ID
	c.SpaceID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SpacesAuditors().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SpaceID == b.SpaceID {
			bFound = true
		}
		if v.SpaceID == c.SpaceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SpaceSlice{&a}
	if err = a.L.LoadSpacesAuditors(ctx, tx, false, (*[]*Space)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SpacesAuditors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SpacesAuditors = nil
	if err = a.L.LoadSpacesAuditors(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SpacesAuditors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSpaceToManySpacesDevelopers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c SpacesDeveloper

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, spacesDeveloperDBTypes, false, spacesDeveloperColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, spacesDeveloperDBTypes, false, spacesDeveloperColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SpaceID = a.ID
	c.SpaceID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SpacesDevelopers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SpaceID == b.SpaceID {
			bFound = true
		}
		if v.SpaceID == c.SpaceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SpaceSlice{&a}
	if err = a.L.LoadSpacesDevelopers(ctx, tx, false, (*[]*Space)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SpacesDevelopers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SpacesDevelopers = nil
	if err = a.L.LoadSpacesDevelopers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SpacesDevelopers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSpaceToManySpacesManagers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c SpacesManager

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, spacesManagerDBTypes, false, spacesManagerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, spacesManagerDBTypes, false, spacesManagerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SpaceID = a.ID
	c.SpaceID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SpacesManagers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SpaceID == b.SpaceID {
			bFound = true
		}
		if v.SpaceID == c.SpaceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SpaceSlice{&a}
	if err = a.L.LoadSpacesManagers(ctx, tx, false, (*[]*Space)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SpacesManagers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SpacesManagers = nil
	if err = a.L.LoadSpacesManagers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SpacesManagers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSpaceToManyStagingSpaceStagingSecurityGroupsSpaces(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c StagingSecurityGroupsSpace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, stagingSecurityGroupsSpaceDBTypes, false, stagingSecurityGroupsSpaceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, stagingSecurityGroupsSpaceDBTypes, false, stagingSecurityGroupsSpaceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.StagingSpaceID = a.ID
	c.StagingSpaceID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.StagingSpaceStagingSecurityGroupsSpaces().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.StagingSpaceID == b.StagingSpaceID {
			bFound = true
		}
		if v.StagingSpaceID == c.StagingSpaceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SpaceSlice{&a}
	if err = a.L.LoadStagingSpaceStagingSecurityGroupsSpaces(ctx, tx, false, (*[]*Space)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.StagingSpaceStagingSecurityGroupsSpaces); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.StagingSpaceStagingSecurityGroupsSpaces = nil
	if err = a.L.LoadStagingSpaceStagingSecurityGroupsSpaces(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.StagingSpaceStagingSecurityGroupsSpaces); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSpaceToManyDefaultSpaceUsers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.DefaultSpaceID, a.ID)
	queries.Assign(&c.DefaultSpaceID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DefaultSpaceUsers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.DefaultSpaceID, b.DefaultSpaceID) {
			bFound = true
		}
		if queries.Equal(v.DefaultSpaceID, c.DefaultSpaceID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SpaceSlice{&a}
	if err = a.L.LoadDefaultSpaceUsers(ctx, tx, false, (*[]*Space)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DefaultSpaceUsers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DefaultSpaceUsers = nil
	if err = a.L.LoadDefaultSpaceUsers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DefaultSpaceUsers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSpaceToManyAddOpApps(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e App

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*App{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*App{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddApps(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.SpaceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.SpaceGUID)
		}
		if !queries.Equal(a.GUID, second.SpaceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.SpaceGUID)
		}

		if first.R.Space != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Space != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Apps[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Apps[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Apps().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSpaceToManySetOpApps(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e App

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*App{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetApps(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Apps().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetApps(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Apps().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SpaceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SpaceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.SpaceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.SpaceGUID)
	}
	if !queries.Equal(a.GUID, e.SpaceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.SpaceGUID)
	}

	if b.R.Space != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Space != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Space != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Space != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Apps[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Apps[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSpaceToManyRemoveOpApps(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e App

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*App{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddApps(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Apps().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveApps(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Apps().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SpaceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SpaceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Space != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Space != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Space != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Space != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Apps) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Apps[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Apps[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSpaceToManyAddOpRoutes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e Route

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Route{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, routeDBTypes, false, strmangle.SetComplement(routePrimaryKeyColumns, routeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Route{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRoutes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SpaceID {
			t.Error("foreign key was wrong value", a.ID, first.SpaceID)
		}
		if a.ID != second.SpaceID {
			t.Error("foreign key was wrong value", a.ID, second.SpaceID)
		}

		if first.R.Space != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Space != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Routes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Routes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Routes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSpaceToManyAddOpSecurityGroupsSpaces(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e SecurityGroupsSpace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SecurityGroupsSpace{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, securityGroupsSpaceDBTypes, false, strmangle.SetComplement(securityGroupsSpacePrimaryKeyColumns, securityGroupsSpaceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SecurityGroupsSpace{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSecurityGroupsSpaces(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SpaceID {
			t.Error("foreign key was wrong value", a.ID, first.SpaceID)
		}
		if a.ID != second.SpaceID {
			t.Error("foreign key was wrong value", a.ID, second.SpaceID)
		}

		if first.R.Space != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Space != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SecurityGroupsSpaces[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SecurityGroupsSpaces[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SecurityGroupsSpaces().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSpaceToManyAddOpServiceBrokers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e ServiceBroker

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBroker{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBrokerDBTypes, false, strmangle.SetComplement(serviceBrokerPrimaryKeyColumns, serviceBrokerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServiceBroker{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddServiceBrokers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SpaceID) {
			t.Error("foreign key was wrong value", a.ID, first.SpaceID)
		}
		if !queries.Equal(a.ID, second.SpaceID) {
			t.Error("foreign key was wrong value", a.ID, second.SpaceID)
		}

		if first.R.Space != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Space != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ServiceBrokers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ServiceBrokers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ServiceBrokers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSpaceToManySetOpServiceBrokers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e ServiceBroker

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBroker{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBrokerDBTypes, false, strmangle.SetComplement(serviceBrokerPrimaryKeyColumns, serviceBrokerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetServiceBrokers(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ServiceBrokers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetServiceBrokers(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ServiceBrokers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SpaceID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SpaceID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SpaceID) {
		t.Error("foreign key was wrong value", a.ID, d.SpaceID)
	}
	if !queries.Equal(a.ID, e.SpaceID) {
		t.Error("foreign key was wrong value", a.ID, e.SpaceID)
	}

	if b.R.Space != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Space != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Space != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Space != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ServiceBrokers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ServiceBrokers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSpaceToManyRemoveOpServiceBrokers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e ServiceBroker

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBroker{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBrokerDBTypes, false, strmangle.SetComplement(serviceBrokerPrimaryKeyColumns, serviceBrokerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddServiceBrokers(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ServiceBrokers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveServiceBrokers(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ServiceBrokers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SpaceID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SpaceID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Space != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Space != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Space != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Space != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ServiceBrokers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ServiceBrokers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ServiceBrokers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSpaceToManyAddOpSharedServiceInstances(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e ServiceInstance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceInstance{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServiceInstance{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSharedServiceInstances(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Spaces[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Spaces[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.SharedServiceInstances[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SharedServiceInstances[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SharedServiceInstances().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSpaceToManySetOpSharedServiceInstances(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e ServiceInstance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceInstance{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSharedServiceInstances(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SharedServiceInstances().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSharedServiceInstances(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SharedServiceInstances().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Spaces) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Spaces) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Spaces[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Spaces[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.SharedServiceInstances[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.SharedServiceInstances[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSpaceToManyRemoveOpSharedServiceInstances(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e ServiceInstance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceInstance{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSharedServiceInstances(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SharedServiceInstances().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSharedServiceInstances(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SharedServiceInstances().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Spaces) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Spaces) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Spaces[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Spaces[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.SharedServiceInstances) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.SharedServiceInstances[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.SharedServiceInstances[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSpaceToManyAddOpServiceInstances(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e ServiceInstance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceInstance{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServiceInstance{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddServiceInstances(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SpaceID {
			t.Error("foreign key was wrong value", a.ID, first.SpaceID)
		}
		if a.ID != second.SpaceID {
			t.Error("foreign key was wrong value", a.ID, second.SpaceID)
		}

		if first.R.Space != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Space != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ServiceInstances[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ServiceInstances[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ServiceInstances().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSpaceToManyAddOpResourceSpaceAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e SpaceAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SpaceAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, spaceAnnotationDBTypes, false, strmangle.SetComplement(spaceAnnotationPrimaryKeyColumns, spaceAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SpaceAnnotation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceSpaceAnnotations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceSpaceAnnotations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceSpaceAnnotations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceSpaceAnnotations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSpaceToManySetOpResourceSpaceAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e SpaceAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SpaceAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, spaceAnnotationDBTypes, false, strmangle.SetComplement(spaceAnnotationPrimaryKeyColumns, spaceAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceSpaceAnnotations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceSpaceAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceSpaceAnnotations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceSpaceAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceSpaceAnnotations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceSpaceAnnotations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSpaceToManyRemoveOpResourceSpaceAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e SpaceAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SpaceAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, spaceAnnotationDBTypes, false, strmangle.SetComplement(spaceAnnotationPrimaryKeyColumns, spaceAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceSpaceAnnotations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceSpaceAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceSpaceAnnotations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceSpaceAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceSpaceAnnotations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceSpaceAnnotations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceSpaceAnnotations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSpaceToManyAddOpResourceSpaceLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e SpaceLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SpaceLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, spaceLabelDBTypes, false, strmangle.SetComplement(spaceLabelPrimaryKeyColumns, spaceLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SpaceLabel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceSpaceLabels(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceSpaceLabels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceSpaceLabels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceSpaceLabels().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSpaceToManySetOpResourceSpaceLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e SpaceLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SpaceLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, spaceLabelDBTypes, false, strmangle.SetComplement(spaceLabelPrimaryKeyColumns, spaceLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceSpaceLabels(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceSpaceLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceSpaceLabels(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceSpaceLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceSpaceLabels[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceSpaceLabels[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSpaceToManyRemoveOpResourceSpaceLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e SpaceLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SpaceLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, spaceLabelDBTypes, false, strmangle.SetComplement(spaceLabelPrimaryKeyColumns, spaceLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceSpaceLabels(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceSpaceLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceSpaceLabels(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceSpaceLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceSpaceLabels) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceSpaceLabels[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceSpaceLabels[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSpaceToManyAddOpSpacesApplicationSupporters(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e SpacesApplicationSupporter

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SpacesApplicationSupporter{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, spacesApplicationSupporterDBTypes, false, strmangle.SetComplement(spacesApplicationSupporterPrimaryKeyColumns, spacesApplicationSupporterColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SpacesApplicationSupporter{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSpacesApplicationSupporters(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SpaceID {
			t.Error("foreign key was wrong value", a.ID, first.SpaceID)
		}
		if a.ID != second.SpaceID {
			t.Error("foreign key was wrong value", a.ID, second.SpaceID)
		}

		if first.R.Space != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Space != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SpacesApplicationSupporters[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SpacesApplicationSupporters[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SpacesApplicationSupporters().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSpaceToManyAddOpSpacesAuditors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e SpacesAuditor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SpacesAuditor{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, spacesAuditorDBTypes, false, strmangle.SetComplement(spacesAuditorPrimaryKeyColumns, spacesAuditorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SpacesAuditor{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSpacesAuditors(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SpaceID {
			t.Error("foreign key was wrong value", a.ID, first.SpaceID)
		}
		if a.ID != second.SpaceID {
			t.Error("foreign key was wrong value", a.ID, second.SpaceID)
		}

		if first.R.Space != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Space != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SpacesAuditors[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SpacesAuditors[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SpacesAuditors().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSpaceToManyAddOpSpacesDevelopers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e SpacesDeveloper

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SpacesDeveloper{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, spacesDeveloperDBTypes, false, strmangle.SetComplement(spacesDeveloperPrimaryKeyColumns, spacesDeveloperColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SpacesDeveloper{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSpacesDevelopers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SpaceID {
			t.Error("foreign key was wrong value", a.ID, first.SpaceID)
		}
		if a.ID != second.SpaceID {
			t.Error("foreign key was wrong value", a.ID, second.SpaceID)
		}

		if first.R.Space != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Space != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SpacesDevelopers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SpacesDevelopers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SpacesDevelopers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSpaceToManyAddOpSpacesManagers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e SpacesManager

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SpacesManager{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, spacesManagerDBTypes, false, strmangle.SetComplement(spacesManagerPrimaryKeyColumns, spacesManagerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SpacesManager{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSpacesManagers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SpaceID {
			t.Error("foreign key was wrong value", a.ID, first.SpaceID)
		}
		if a.ID != second.SpaceID {
			t.Error("foreign key was wrong value", a.ID, second.SpaceID)
		}

		if first.R.Space != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Space != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SpacesManagers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SpacesManagers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SpacesManagers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSpaceToManyAddOpStagingSpaceStagingSecurityGroupsSpaces(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e StagingSecurityGroupsSpace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*StagingSecurityGroupsSpace{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, stagingSecurityGroupsSpaceDBTypes, false, strmangle.SetComplement(stagingSecurityGroupsSpacePrimaryKeyColumns, stagingSecurityGroupsSpaceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*StagingSecurityGroupsSpace{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddStagingSpaceStagingSecurityGroupsSpaces(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.StagingSpaceID {
			t.Error("foreign key was wrong value", a.ID, first.StagingSpaceID)
		}
		if a.ID != second.StagingSpaceID {
			t.Error("foreign key was wrong value", a.ID, second.StagingSpaceID)
		}

		if first.R.StagingSpace != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.StagingSpace != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.StagingSpaceStagingSecurityGroupsSpaces[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.StagingSpaceStagingSecurityGroupsSpaces[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.StagingSpaceStagingSecurityGroupsSpaces().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSpaceToManyAddOpDefaultSpaceUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*User{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDefaultSpaceUsers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.DefaultSpaceID) {
			t.Error("foreign key was wrong value", a.ID, first.DefaultSpaceID)
		}
		if !queries.Equal(a.ID, second.DefaultSpaceID) {
			t.Error("foreign key was wrong value", a.ID, second.DefaultSpaceID)
		}

		if first.R.DefaultSpace != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.DefaultSpace != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DefaultSpaceUsers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DefaultSpaceUsers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DefaultSpaceUsers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSpaceToManySetOpDefaultSpaceUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetDefaultSpaceUsers(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DefaultSpaceUsers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetDefaultSpaceUsers(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DefaultSpaceUsers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DefaultSpaceID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DefaultSpaceID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.DefaultSpaceID) {
		t.Error("foreign key was wrong value", a.ID, d.DefaultSpaceID)
	}
	if !queries.Equal(a.ID, e.DefaultSpaceID) {
		t.Error("foreign key was wrong value", a.ID, e.DefaultSpaceID)
	}

	if b.R.DefaultSpace != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.DefaultSpace != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.DefaultSpace != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.DefaultSpace != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.DefaultSpaceUsers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.DefaultSpaceUsers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSpaceToManyRemoveOpDefaultSpaceUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddDefaultSpaceUsers(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DefaultSpaceUsers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveDefaultSpaceUsers(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DefaultSpaceUsers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DefaultSpaceID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DefaultSpaceID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.DefaultSpace != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.DefaultSpace != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.DefaultSpace != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.DefaultSpace != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.DefaultSpaceUsers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.DefaultSpaceUsers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.DefaultSpaceUsers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSpaceToOneSpaceQuotaDefinitionUsingSpaceQuotaDefinition(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Space
	var foreign SpaceQuotaDefinition

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, spaceQuotaDefinitionDBTypes, false, spaceQuotaDefinitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpaceQuotaDefinition struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SpaceQuotaDefinitionID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SpaceQuotaDefinition().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SpaceSlice{&local}
	if err = local.L.LoadSpaceQuotaDefinition(ctx, tx, false, (*[]*Space)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SpaceQuotaDefinition == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SpaceQuotaDefinition = nil
	if err = local.L.LoadSpaceQuotaDefinition(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SpaceQuotaDefinition == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSpaceToOneIsolationSegmentUsingIsolationSegment(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Space
	var foreign IsolationSegment

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, isolationSegmentDBTypes, false, isolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.IsolationSegmentGUID, foreign.GUID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IsolationSegment().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.GUID, foreign.GUID) {
		t.Errorf("want: %v, got %v", foreign.GUID, check.GUID)
	}

	slice := SpaceSlice{&local}
	if err = local.L.LoadIsolationSegment(ctx, tx, false, (*[]*Space)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IsolationSegment == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IsolationSegment = nil
	if err = local.L.LoadIsolationSegment(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IsolationSegment == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSpaceToOneOrganizationUsingOrganization(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Space
	var foreign Organization

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, spaceDBTypes, false, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, organizationDBTypes, false, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.OrganizationID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Organization().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SpaceSlice{&local}
	if err = local.L.LoadOrganization(ctx, tx, false, (*[]*Space)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Organization == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Organization = nil
	if err = local.L.LoadOrganization(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Organization == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSpaceToOneSetOpSpaceQuotaDefinitionUsingSpaceQuotaDefinition(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c SpaceQuotaDefinition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, spaceQuotaDefinitionDBTypes, false, strmangle.SetComplement(spaceQuotaDefinitionPrimaryKeyColumns, spaceQuotaDefinitionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, spaceQuotaDefinitionDBTypes, false, strmangle.SetComplement(spaceQuotaDefinitionPrimaryKeyColumns, spaceQuotaDefinitionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SpaceQuotaDefinition{&b, &c} {
		err = a.SetSpaceQuotaDefinition(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SpaceQuotaDefinition != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Spaces[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SpaceQuotaDefinitionID, x.ID) {
			t.Error("foreign key was wrong value", a.SpaceQuotaDefinitionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SpaceQuotaDefinitionID))
		reflect.Indirect(reflect.ValueOf(&a.SpaceQuotaDefinitionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SpaceQuotaDefinitionID, x.ID) {
			t.Error("foreign key was wrong value", a.SpaceQuotaDefinitionID, x.ID)
		}
	}
}

func testSpaceToOneRemoveOpSpaceQuotaDefinitionUsingSpaceQuotaDefinition(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b SpaceQuotaDefinition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, spaceQuotaDefinitionDBTypes, false, strmangle.SetComplement(spaceQuotaDefinitionPrimaryKeyColumns, spaceQuotaDefinitionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSpaceQuotaDefinition(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSpaceQuotaDefinition(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.SpaceQuotaDefinition().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.SpaceQuotaDefinition != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SpaceQuotaDefinitionID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Spaces) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSpaceToOneSetOpIsolationSegmentUsingIsolationSegment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c IsolationSegment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, isolationSegmentDBTypes, false, strmangle.SetComplement(isolationSegmentPrimaryKeyColumns, isolationSegmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, isolationSegmentDBTypes, false, strmangle.SetComplement(isolationSegmentPrimaryKeyColumns, isolationSegmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*IsolationSegment{&b, &c} {
		err = a.SetIsolationSegment(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IsolationSegment != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Spaces[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.IsolationSegmentGUID, x.GUID) {
			t.Error("foreign key was wrong value", a.IsolationSegmentGUID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IsolationSegmentGUID))
		reflect.Indirect(reflect.ValueOf(&a.IsolationSegmentGUID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.IsolationSegmentGUID, x.GUID) {
			t.Error("foreign key was wrong value", a.IsolationSegmentGUID, x.GUID)
		}
	}
}

func testSpaceToOneRemoveOpIsolationSegmentUsingIsolationSegment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b IsolationSegment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, isolationSegmentDBTypes, false, strmangle.SetComplement(isolationSegmentPrimaryKeyColumns, isolationSegmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetIsolationSegment(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveIsolationSegment(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.IsolationSegment().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.IsolationSegment != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.IsolationSegmentGUID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Spaces) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSpaceToOneSetOpOrganizationUsingOrganization(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Space
	var b, c Organization

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Organization{&b, &c} {
		err = a.SetOrganization(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Organization != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Spaces[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.OrganizationID != x.ID {
			t.Error("foreign key was wrong value", a.OrganizationID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrganizationID))
		reflect.Indirect(reflect.ValueOf(&a.OrganizationID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.OrganizationID != x.ID {
			t.Error("foreign key was wrong value", a.OrganizationID, x.ID)
		}
	}
}

func testSpacesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Space{}
	if err = randomize.Struct(seed, o, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSpacesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Space{}
	if err = randomize.Struct(seed, o, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SpaceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSpacesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Space{}
	if err = randomize.Struct(seed, o, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Spaces().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	spaceDBTypes = map[string]string{`ID`: `integer`, `GUID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `Name`: `USER-DEFINED`, `OrganizationID`: `integer`, `SpaceQuotaDefinitionID`: `integer`, `AllowSSH`: `boolean`, `IsolationSegmentGUID`: `text`}
	_            = bytes.MinRead
)

func testSpacesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(spacePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(spaceAllColumns) == len(spacePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Space{}
	if err = randomize.Struct(seed, o, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Spaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, spaceDBTypes, true, spacePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSpacesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(spaceAllColumns) == len(spacePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Space{}
	if err = randomize.Struct(seed, o, spaceDBTypes, true, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Spaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, spaceDBTypes, true, spacePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(spaceAllColumns, spacePrimaryKeyColumns) {
		fields = spaceAllColumns
	} else {
		fields = strmangle.SetComplement(
			spaceAllColumns,
			spacePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SpaceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSpacesUpsert(t *testing.T) {
	t.Parallel()

	if len(spaceAllColumns) == len(spacePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Space{}
	if err = randomize.Struct(seed, &o, spaceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Space: %s", err)
	}

	count, err := Spaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, spaceDBTypes, false, spacePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Space: %s", err)
	}

	count, err = Spaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
