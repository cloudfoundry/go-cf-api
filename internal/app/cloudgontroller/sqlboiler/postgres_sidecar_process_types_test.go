// +build integration postgres
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSidecarProcessTypes(t *testing.T) {
	t.Parallel()

	query := SidecarProcessTypes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSidecarProcessTypesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SidecarProcessType{}
	if err = randomize.Struct(seed, o, sidecarProcessTypeDBTypes, true, sidecarProcessTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SidecarProcessType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SidecarProcessTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSidecarProcessTypesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SidecarProcessType{}
	if err = randomize.Struct(seed, o, sidecarProcessTypeDBTypes, true, sidecarProcessTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SidecarProcessType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SidecarProcessTypes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SidecarProcessTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSidecarProcessTypesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SidecarProcessType{}
	if err = randomize.Struct(seed, o, sidecarProcessTypeDBTypes, true, sidecarProcessTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SidecarProcessType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SidecarProcessTypeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SidecarProcessTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSidecarProcessTypesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SidecarProcessType{}
	if err = randomize.Struct(seed, o, sidecarProcessTypeDBTypes, true, sidecarProcessTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SidecarProcessType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SidecarProcessTypeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SidecarProcessType exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SidecarProcessTypeExists to return true, but got false.")
	}
}

func testSidecarProcessTypesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SidecarProcessType{}
	if err = randomize.Struct(seed, o, sidecarProcessTypeDBTypes, true, sidecarProcessTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SidecarProcessType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	sidecarProcessTypeFound, err := FindSidecarProcessType(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if sidecarProcessTypeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSidecarProcessTypesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SidecarProcessType{}
	if err = randomize.Struct(seed, o, sidecarProcessTypeDBTypes, true, sidecarProcessTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SidecarProcessType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SidecarProcessTypes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSidecarProcessTypesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SidecarProcessType{}
	if err = randomize.Struct(seed, o, sidecarProcessTypeDBTypes, true, sidecarProcessTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SidecarProcessType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SidecarProcessTypes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSidecarProcessTypesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sidecarProcessTypeOne := &SidecarProcessType{}
	sidecarProcessTypeTwo := &SidecarProcessType{}
	if err = randomize.Struct(seed, sidecarProcessTypeOne, sidecarProcessTypeDBTypes, false, sidecarProcessTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SidecarProcessType struct: %s", err)
	}
	if err = randomize.Struct(seed, sidecarProcessTypeTwo, sidecarProcessTypeDBTypes, false, sidecarProcessTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SidecarProcessType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sidecarProcessTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sidecarProcessTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SidecarProcessTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSidecarProcessTypesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	sidecarProcessTypeOne := &SidecarProcessType{}
	sidecarProcessTypeTwo := &SidecarProcessType{}
	if err = randomize.Struct(seed, sidecarProcessTypeOne, sidecarProcessTypeDBTypes, false, sidecarProcessTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SidecarProcessType struct: %s", err)
	}
	if err = randomize.Struct(seed, sidecarProcessTypeTwo, sidecarProcessTypeDBTypes, false, sidecarProcessTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SidecarProcessType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sidecarProcessTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sidecarProcessTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SidecarProcessTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func sidecarProcessTypeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SidecarProcessType) error {
	*o = SidecarProcessType{}
	return nil
}

func sidecarProcessTypeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SidecarProcessType) error {
	*o = SidecarProcessType{}
	return nil
}

func sidecarProcessTypeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SidecarProcessType) error {
	*o = SidecarProcessType{}
	return nil
}

func sidecarProcessTypeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SidecarProcessType) error {
	*o = SidecarProcessType{}
	return nil
}

func sidecarProcessTypeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SidecarProcessType) error {
	*o = SidecarProcessType{}
	return nil
}

func sidecarProcessTypeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SidecarProcessType) error {
	*o = SidecarProcessType{}
	return nil
}

func sidecarProcessTypeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SidecarProcessType) error {
	*o = SidecarProcessType{}
	return nil
}

func sidecarProcessTypeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SidecarProcessType) error {
	*o = SidecarProcessType{}
	return nil
}

func sidecarProcessTypeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SidecarProcessType) error {
	*o = SidecarProcessType{}
	return nil
}

func testSidecarProcessTypesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SidecarProcessType{}
	o := &SidecarProcessType{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, sidecarProcessTypeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SidecarProcessType object: %s", err)
	}

	AddSidecarProcessTypeHook(boil.BeforeInsertHook, sidecarProcessTypeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	sidecarProcessTypeBeforeInsertHooks = []SidecarProcessTypeHook{}

	AddSidecarProcessTypeHook(boil.AfterInsertHook, sidecarProcessTypeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	sidecarProcessTypeAfterInsertHooks = []SidecarProcessTypeHook{}

	AddSidecarProcessTypeHook(boil.AfterSelectHook, sidecarProcessTypeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	sidecarProcessTypeAfterSelectHooks = []SidecarProcessTypeHook{}

	AddSidecarProcessTypeHook(boil.BeforeUpdateHook, sidecarProcessTypeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	sidecarProcessTypeBeforeUpdateHooks = []SidecarProcessTypeHook{}

	AddSidecarProcessTypeHook(boil.AfterUpdateHook, sidecarProcessTypeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	sidecarProcessTypeAfterUpdateHooks = []SidecarProcessTypeHook{}

	AddSidecarProcessTypeHook(boil.BeforeDeleteHook, sidecarProcessTypeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	sidecarProcessTypeBeforeDeleteHooks = []SidecarProcessTypeHook{}

	AddSidecarProcessTypeHook(boil.AfterDeleteHook, sidecarProcessTypeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	sidecarProcessTypeAfterDeleteHooks = []SidecarProcessTypeHook{}

	AddSidecarProcessTypeHook(boil.BeforeUpsertHook, sidecarProcessTypeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	sidecarProcessTypeBeforeUpsertHooks = []SidecarProcessTypeHook{}

	AddSidecarProcessTypeHook(boil.AfterUpsertHook, sidecarProcessTypeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	sidecarProcessTypeAfterUpsertHooks = []SidecarProcessTypeHook{}
}

func testSidecarProcessTypesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SidecarProcessType{}
	if err = randomize.Struct(seed, o, sidecarProcessTypeDBTypes, true, sidecarProcessTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SidecarProcessType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SidecarProcessTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSidecarProcessTypesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SidecarProcessType{}
	if err = randomize.Struct(seed, o, sidecarProcessTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SidecarProcessType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(sidecarProcessTypeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SidecarProcessTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSidecarProcessTypeToOneSidecarUsingSidecar(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SidecarProcessType
	var foreign Sidecar

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sidecarProcessTypeDBTypes, false, sidecarProcessTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SidecarProcessType struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, sidecarDBTypes, false, sidecarColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sidecar struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SidecarGUID = foreign.GUID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Sidecar().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.GUID != foreign.GUID {
		t.Errorf("want: %v, got %v", foreign.GUID, check.GUID)
	}

	slice := SidecarProcessTypeSlice{&local}
	if err = local.L.LoadSidecar(ctx, tx, false, (*[]*SidecarProcessType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sidecar == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Sidecar = nil
	if err = local.L.LoadSidecar(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sidecar == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSidecarProcessTypeToOneSetOpSidecarUsingSidecar(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SidecarProcessType
	var b, c Sidecar

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sidecarProcessTypeDBTypes, false, strmangle.SetComplement(sidecarProcessTypePrimaryKeyColumns, sidecarProcessTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sidecarDBTypes, false, strmangle.SetComplement(sidecarPrimaryKeyColumns, sidecarColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sidecarDBTypes, false, strmangle.SetComplement(sidecarPrimaryKeyColumns, sidecarColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Sidecar{&b, &c} {
		err = a.SetSidecar(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Sidecar != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SidecarProcessTypes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SidecarGUID != x.GUID {
			t.Error("foreign key was wrong value", a.SidecarGUID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SidecarGUID))
		reflect.Indirect(reflect.ValueOf(&a.SidecarGUID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SidecarGUID != x.GUID {
			t.Error("foreign key was wrong value", a.SidecarGUID, x.GUID)
		}
	}
}

func testSidecarProcessTypesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SidecarProcessType{}
	if err = randomize.Struct(seed, o, sidecarProcessTypeDBTypes, true, sidecarProcessTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SidecarProcessType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSidecarProcessTypesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SidecarProcessType{}
	if err = randomize.Struct(seed, o, sidecarProcessTypeDBTypes, true, sidecarProcessTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SidecarProcessType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SidecarProcessTypeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSidecarProcessTypesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SidecarProcessType{}
	if err = randomize.Struct(seed, o, sidecarProcessTypeDBTypes, true, sidecarProcessTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SidecarProcessType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SidecarProcessTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	sidecarProcessTypeDBTypes = map[string]string{`ID`: `integer`, `GUID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `Type`: `character varying`, `SidecarGUID`: `character varying`, `AppGUID`: `character varying`}
	_                         = bytes.MinRead
)

func testSidecarProcessTypesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(sidecarProcessTypePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(sidecarProcessTypeAllColumns) == len(sidecarProcessTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SidecarProcessType{}
	if err = randomize.Struct(seed, o, sidecarProcessTypeDBTypes, true, sidecarProcessTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SidecarProcessType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SidecarProcessTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sidecarProcessTypeDBTypes, true, sidecarProcessTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SidecarProcessType struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSidecarProcessTypesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(sidecarProcessTypeAllColumns) == len(sidecarProcessTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SidecarProcessType{}
	if err = randomize.Struct(seed, o, sidecarProcessTypeDBTypes, true, sidecarProcessTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SidecarProcessType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SidecarProcessTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sidecarProcessTypeDBTypes, true, sidecarProcessTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SidecarProcessType struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(sidecarProcessTypeAllColumns, sidecarProcessTypePrimaryKeyColumns) {
		fields = sidecarProcessTypeAllColumns
	} else {
		fields = strmangle.SetComplement(
			sidecarProcessTypeAllColumns,
			sidecarProcessTypePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SidecarProcessTypeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSidecarProcessTypesUpsert(t *testing.T) {
	t.Parallel()

	if len(sidecarProcessTypeAllColumns) == len(sidecarProcessTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SidecarProcessType{}
	if err = randomize.Struct(seed, &o, sidecarProcessTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SidecarProcessType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SidecarProcessType: %s", err)
	}

	count, err := SidecarProcessTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, sidecarProcessTypeDBTypes, false, sidecarProcessTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SidecarProcessType struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SidecarProcessType: %s", err)
	}

	count, err = SidecarProcessTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
