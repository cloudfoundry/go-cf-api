// +build psql_integration
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRouteLabels(t *testing.T) {
	t.Parallel()

	query := RouteLabels()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRouteLabelsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RouteLabel{}
	if err = randomize.Struct(seed, o, routeLabelDBTypes, true, routeLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RouteLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRouteLabelsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RouteLabel{}
	if err = randomize.Struct(seed, o, routeLabelDBTypes, true, routeLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RouteLabels().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RouteLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRouteLabelsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RouteLabel{}
	if err = randomize.Struct(seed, o, routeLabelDBTypes, true, routeLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RouteLabelSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RouteLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRouteLabelsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RouteLabel{}
	if err = randomize.Struct(seed, o, routeLabelDBTypes, true, routeLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RouteLabelExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RouteLabel exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RouteLabelExists to return true, but got false.")
	}
}

func testRouteLabelsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RouteLabel{}
	if err = randomize.Struct(seed, o, routeLabelDBTypes, true, routeLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	routeLabelFound, err := FindRouteLabel(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if routeLabelFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRouteLabelsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RouteLabel{}
	if err = randomize.Struct(seed, o, routeLabelDBTypes, true, routeLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RouteLabels().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRouteLabelsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RouteLabel{}
	if err = randomize.Struct(seed, o, routeLabelDBTypes, true, routeLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RouteLabels().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRouteLabelsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	routeLabelOne := &RouteLabel{}
	routeLabelTwo := &RouteLabel{}
	if err = randomize.Struct(seed, routeLabelOne, routeLabelDBTypes, false, routeLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteLabel struct: %s", err)
	}
	if err = randomize.Struct(seed, routeLabelTwo, routeLabelDBTypes, false, routeLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = routeLabelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = routeLabelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RouteLabels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRouteLabelsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	routeLabelOne := &RouteLabel{}
	routeLabelTwo := &RouteLabel{}
	if err = randomize.Struct(seed, routeLabelOne, routeLabelDBTypes, false, routeLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteLabel struct: %s", err)
	}
	if err = randomize.Struct(seed, routeLabelTwo, routeLabelDBTypes, false, routeLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = routeLabelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = routeLabelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RouteLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func routeLabelBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RouteLabel) error {
	*o = RouteLabel{}
	return nil
}

func routeLabelAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RouteLabel) error {
	*o = RouteLabel{}
	return nil
}

func routeLabelAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RouteLabel) error {
	*o = RouteLabel{}
	return nil
}

func routeLabelBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RouteLabel) error {
	*o = RouteLabel{}
	return nil
}

func routeLabelAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RouteLabel) error {
	*o = RouteLabel{}
	return nil
}

func routeLabelBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RouteLabel) error {
	*o = RouteLabel{}
	return nil
}

func routeLabelAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RouteLabel) error {
	*o = RouteLabel{}
	return nil
}

func routeLabelBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RouteLabel) error {
	*o = RouteLabel{}
	return nil
}

func routeLabelAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RouteLabel) error {
	*o = RouteLabel{}
	return nil
}

func testRouteLabelsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RouteLabel{}
	o := &RouteLabel{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, routeLabelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RouteLabel object: %s", err)
	}

	AddRouteLabelHook(boil.BeforeInsertHook, routeLabelBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	routeLabelBeforeInsertHooks = []RouteLabelHook{}

	AddRouteLabelHook(boil.AfterInsertHook, routeLabelAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	routeLabelAfterInsertHooks = []RouteLabelHook{}

	AddRouteLabelHook(boil.AfterSelectHook, routeLabelAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	routeLabelAfterSelectHooks = []RouteLabelHook{}

	AddRouteLabelHook(boil.BeforeUpdateHook, routeLabelBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	routeLabelBeforeUpdateHooks = []RouteLabelHook{}

	AddRouteLabelHook(boil.AfterUpdateHook, routeLabelAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	routeLabelAfterUpdateHooks = []RouteLabelHook{}

	AddRouteLabelHook(boil.BeforeDeleteHook, routeLabelBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	routeLabelBeforeDeleteHooks = []RouteLabelHook{}

	AddRouteLabelHook(boil.AfterDeleteHook, routeLabelAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	routeLabelAfterDeleteHooks = []RouteLabelHook{}

	AddRouteLabelHook(boil.BeforeUpsertHook, routeLabelBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	routeLabelBeforeUpsertHooks = []RouteLabelHook{}

	AddRouteLabelHook(boil.AfterUpsertHook, routeLabelAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	routeLabelAfterUpsertHooks = []RouteLabelHook{}
}

func testRouteLabelsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RouteLabel{}
	if err = randomize.Struct(seed, o, routeLabelDBTypes, true, routeLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RouteLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRouteLabelsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RouteLabel{}
	if err = randomize.Struct(seed, o, routeLabelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RouteLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(routeLabelColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RouteLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRouteLabelToOneRouteUsingResource(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RouteLabel
	var foreign Route

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, routeLabelDBTypes, true, routeLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteLabel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, routeDBTypes, false, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ResourceGUID, foreign.GUID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Resource().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.GUID, foreign.GUID) {
		t.Errorf("want: %v, got %v", foreign.GUID, check.GUID)
	}

	slice := RouteLabelSlice{&local}
	if err = local.L.LoadResource(ctx, tx, false, (*[]*RouteLabel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Resource == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Resource = nil
	if err = local.L.LoadResource(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Resource == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRouteLabelToOneSetOpRouteUsingResource(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RouteLabel
	var b, c Route

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeLabelDBTypes, false, strmangle.SetComplement(routeLabelPrimaryKeyColumns, routeLabelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, routeDBTypes, false, strmangle.SetComplement(routePrimaryKeyColumns, routeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, routeDBTypes, false, strmangle.SetComplement(routePrimaryKeyColumns, routeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Route{&b, &c} {
		err = a.SetResource(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Resource != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ResourceRouteLabels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ResourceGUID, x.GUID) {
			t.Error("foreign key was wrong value", a.ResourceGUID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ResourceGUID))
		reflect.Indirect(reflect.ValueOf(&a.ResourceGUID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ResourceGUID, x.GUID) {
			t.Error("foreign key was wrong value", a.ResourceGUID, x.GUID)
		}
	}
}

func testRouteLabelToOneRemoveOpRouteUsingResource(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RouteLabel
	var b Route

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeLabelDBTypes, false, strmangle.SetComplement(routeLabelPrimaryKeyColumns, routeLabelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, routeDBTypes, false, strmangle.SetComplement(routePrimaryKeyColumns, routeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetResource(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveResource(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Resource().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Resource != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ResourceGUID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ResourceRouteLabels) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRouteLabelsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RouteLabel{}
	if err = randomize.Struct(seed, o, routeLabelDBTypes, true, routeLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRouteLabelsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RouteLabel{}
	if err = randomize.Struct(seed, o, routeLabelDBTypes, true, routeLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RouteLabelSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRouteLabelsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RouteLabel{}
	if err = randomize.Struct(seed, o, routeLabelDBTypes, true, routeLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RouteLabels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	routeLabelDBTypes = map[string]string{`ID`: `integer`, `GUID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `ResourceGUID`: `character varying`, `KeyPrefix`: `character varying`, `KeyName`: `character varying`, `Value`: `character varying`}
	_                 = bytes.MinRead
)

func testRouteLabelsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(routeLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(routeLabelAllColumns) == len(routeLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RouteLabel{}
	if err = randomize.Struct(seed, o, routeLabelDBTypes, true, routeLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RouteLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, routeLabelDBTypes, true, routeLabelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RouteLabel struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRouteLabelsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(routeLabelAllColumns) == len(routeLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RouteLabel{}
	if err = randomize.Struct(seed, o, routeLabelDBTypes, true, routeLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RouteLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, routeLabelDBTypes, true, routeLabelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RouteLabel struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(routeLabelAllColumns, routeLabelPrimaryKeyColumns) {
		fields = routeLabelAllColumns
	} else {
		fields = strmangle.SetComplement(
			routeLabelAllColumns,
			routeLabelPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RouteLabelSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRouteLabelsUpsert(t *testing.T) {
	t.Parallel()

	if len(routeLabelAllColumns) == len(routeLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RouteLabel{}
	if err = randomize.Struct(seed, &o, routeLabelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RouteLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RouteLabel: %s", err)
	}

	count, err := RouteLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, routeLabelDBTypes, false, routeLabelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RouteLabel struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RouteLabel: %s", err)
	}

	count, err = RouteLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
