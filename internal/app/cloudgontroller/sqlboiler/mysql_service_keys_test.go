// +build mysql
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testServiceKeys(t *testing.T) {
	t.Parallel()

	query := ServiceKeys()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testServiceKeysDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceKey{}
	if err = randomize.Struct(seed, o, serviceKeyDBTypes, true, serviceKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServiceKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServiceKeysQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceKey{}
	if err = randomize.Struct(seed, o, serviceKeyDBTypes, true, serviceKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ServiceKeys().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServiceKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServiceKeysSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceKey{}
	if err = randomize.Struct(seed, o, serviceKeyDBTypes, true, serviceKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServiceKeySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServiceKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServiceKeysExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceKey{}
	if err = randomize.Struct(seed, o, serviceKeyDBTypes, true, serviceKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ServiceKeyExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ServiceKey exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ServiceKeyExists to return true, but got false.")
	}
}

func testServiceKeysFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceKey{}
	if err = randomize.Struct(seed, o, serviceKeyDBTypes, true, serviceKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	serviceKeyFound, err := FindServiceKey(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if serviceKeyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testServiceKeysBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceKey{}
	if err = randomize.Struct(seed, o, serviceKeyDBTypes, true, serviceKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ServiceKeys().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testServiceKeysOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceKey{}
	if err = randomize.Struct(seed, o, serviceKeyDBTypes, true, serviceKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ServiceKeys().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testServiceKeysAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	serviceKeyOne := &ServiceKey{}
	serviceKeyTwo := &ServiceKey{}
	if err = randomize.Struct(seed, serviceKeyOne, serviceKeyDBTypes, false, serviceKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}
	if err = randomize.Struct(seed, serviceKeyTwo, serviceKeyDBTypes, false, serviceKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serviceKeyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serviceKeyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServiceKeys().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testServiceKeysCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	serviceKeyOne := &ServiceKey{}
	serviceKeyTwo := &ServiceKey{}
	if err = randomize.Struct(seed, serviceKeyOne, serviceKeyDBTypes, false, serviceKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}
	if err = randomize.Struct(seed, serviceKeyTwo, serviceKeyDBTypes, false, serviceKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serviceKeyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serviceKeyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServiceKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func serviceKeyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServiceKey) error {
	*o = ServiceKey{}
	return nil
}

func serviceKeyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServiceKey) error {
	*o = ServiceKey{}
	return nil
}

func serviceKeyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ServiceKey) error {
	*o = ServiceKey{}
	return nil
}

func serviceKeyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServiceKey) error {
	*o = ServiceKey{}
	return nil
}

func serviceKeyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServiceKey) error {
	*o = ServiceKey{}
	return nil
}

func serviceKeyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServiceKey) error {
	*o = ServiceKey{}
	return nil
}

func serviceKeyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServiceKey) error {
	*o = ServiceKey{}
	return nil
}

func serviceKeyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServiceKey) error {
	*o = ServiceKey{}
	return nil
}

func serviceKeyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServiceKey) error {
	*o = ServiceKey{}
	return nil
}

func testServiceKeysHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ServiceKey{}
	o := &ServiceKey{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, serviceKeyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ServiceKey object: %s", err)
	}

	AddServiceKeyHook(boil.BeforeInsertHook, serviceKeyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	serviceKeyBeforeInsertHooks = []ServiceKeyHook{}

	AddServiceKeyHook(boil.AfterInsertHook, serviceKeyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	serviceKeyAfterInsertHooks = []ServiceKeyHook{}

	AddServiceKeyHook(boil.AfterSelectHook, serviceKeyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	serviceKeyAfterSelectHooks = []ServiceKeyHook{}

	AddServiceKeyHook(boil.BeforeUpdateHook, serviceKeyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	serviceKeyBeforeUpdateHooks = []ServiceKeyHook{}

	AddServiceKeyHook(boil.AfterUpdateHook, serviceKeyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	serviceKeyAfterUpdateHooks = []ServiceKeyHook{}

	AddServiceKeyHook(boil.BeforeDeleteHook, serviceKeyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	serviceKeyBeforeDeleteHooks = []ServiceKeyHook{}

	AddServiceKeyHook(boil.AfterDeleteHook, serviceKeyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	serviceKeyAfterDeleteHooks = []ServiceKeyHook{}

	AddServiceKeyHook(boil.BeforeUpsertHook, serviceKeyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	serviceKeyBeforeUpsertHooks = []ServiceKeyHook{}

	AddServiceKeyHook(boil.AfterUpsertHook, serviceKeyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	serviceKeyAfterUpsertHooks = []ServiceKeyHook{}
}

func testServiceKeysInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceKey{}
	if err = randomize.Struct(seed, o, serviceKeyDBTypes, true, serviceKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServiceKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServiceKeysInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceKey{}
	if err = randomize.Struct(seed, o, serviceKeyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(serviceKeyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ServiceKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServiceKeyOneToOneServiceKeyOperationUsingServiceKeyOperation(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign ServiceKeyOperation
	var local ServiceKey

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, serviceKeyOperationDBTypes, true, serviceKeyOperationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceKeyOperation struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, serviceKeyDBTypes, true, serviceKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&foreign.ServiceKeyID, local.ID)
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ServiceKeyOperation().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ServiceKeyID, foreign.ServiceKeyID) {
		t.Errorf("want: %v, got %v", foreign.ServiceKeyID, check.ServiceKeyID)
	}

	slice := ServiceKeySlice{&local}
	if err = local.L.LoadServiceKeyOperation(ctx, tx, false, (*[]*ServiceKey)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServiceKeyOperation == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ServiceKeyOperation = nil
	if err = local.L.LoadServiceKeyOperation(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServiceKeyOperation == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testServiceKeyOneToOneSetOpServiceKeyOperationUsingServiceKeyOperation(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceKey
	var b, c ServiceKeyOperation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceKeyDBTypes, false, strmangle.SetComplement(serviceKeyPrimaryKeyColumns, serviceKeyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serviceKeyOperationDBTypes, false, strmangle.SetComplement(serviceKeyOperationPrimaryKeyColumns, serviceKeyOperationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceKeyOperationDBTypes, false, strmangle.SetComplement(serviceKeyOperationPrimaryKeyColumns, serviceKeyOperationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ServiceKeyOperation{&b, &c} {
		err = a.SetServiceKeyOperation(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ServiceKeyOperation != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.ServiceKey != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if !queries.Equal(a.ID, x.ServiceKeyID) {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.ServiceKeyID))
		reflect.Indirect(reflect.ValueOf(&x.ServiceKeyID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ID, x.ServiceKeyID) {
			t.Error("foreign key was wrong value", a.ID, x.ServiceKeyID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testServiceKeyOneToOneRemoveOpServiceKeyOperationUsingServiceKeyOperation(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceKey
	var b ServiceKeyOperation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceKeyDBTypes, false, strmangle.SetComplement(serviceKeyPrimaryKeyColumns, serviceKeyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serviceKeyOperationDBTypes, false, strmangle.SetComplement(serviceKeyOperationPrimaryKeyColumns, serviceKeyOperationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetServiceKeyOperation(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveServiceKeyOperation(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ServiceKeyOperation().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ServiceKeyOperation != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(b.ServiceKeyID) {
		t.Error("foreign key column should be nil")
	}

	if b.R.ServiceKey != nil {
		t.Error("failed to remove a from b's relationships")
	}
}

func testServiceKeyToManyResourceServiceKeyAnnotations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceKey
	var b, c ServiceKeyAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceKeyDBTypes, true, serviceKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serviceKeyAnnotationDBTypes, false, serviceKeyAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceKeyAnnotationDBTypes, false, serviceKeyAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceServiceKeyAnnotations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ServiceKeySlice{&a}
	if err = a.L.LoadResourceServiceKeyAnnotations(ctx, tx, false, (*[]*ServiceKey)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceServiceKeyAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceServiceKeyAnnotations = nil
	if err = a.L.LoadResourceServiceKeyAnnotations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceServiceKeyAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testServiceKeyToManyResourceServiceKeyLabels(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceKey
	var b, c ServiceKeyLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceKeyDBTypes, true, serviceKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serviceKeyLabelDBTypes, false, serviceKeyLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceKeyLabelDBTypes, false, serviceKeyLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceServiceKeyLabels().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ServiceKeySlice{&a}
	if err = a.L.LoadResourceServiceKeyLabels(ctx, tx, false, (*[]*ServiceKey)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceServiceKeyLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceServiceKeyLabels = nil
	if err = a.L.LoadResourceServiceKeyLabels(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceServiceKeyLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testServiceKeyToManyAddOpResourceServiceKeyAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceKey
	var b, c, d, e ServiceKeyAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceKeyDBTypes, false, strmangle.SetComplement(serviceKeyPrimaryKeyColumns, serviceKeyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceKeyAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceKeyAnnotationDBTypes, false, strmangle.SetComplement(serviceKeyAnnotationPrimaryKeyColumns, serviceKeyAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServiceKeyAnnotation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceServiceKeyAnnotations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceServiceKeyAnnotations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceServiceKeyAnnotations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceServiceKeyAnnotations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testServiceKeyToManySetOpResourceServiceKeyAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceKey
	var b, c, d, e ServiceKeyAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceKeyDBTypes, false, strmangle.SetComplement(serviceKeyPrimaryKeyColumns, serviceKeyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceKeyAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceKeyAnnotationDBTypes, false, strmangle.SetComplement(serviceKeyAnnotationPrimaryKeyColumns, serviceKeyAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceServiceKeyAnnotations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceServiceKeyAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceServiceKeyAnnotations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceServiceKeyAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceServiceKeyAnnotations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceServiceKeyAnnotations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testServiceKeyToManyRemoveOpResourceServiceKeyAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceKey
	var b, c, d, e ServiceKeyAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceKeyDBTypes, false, strmangle.SetComplement(serviceKeyPrimaryKeyColumns, serviceKeyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceKeyAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceKeyAnnotationDBTypes, false, strmangle.SetComplement(serviceKeyAnnotationPrimaryKeyColumns, serviceKeyAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceServiceKeyAnnotations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceServiceKeyAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceServiceKeyAnnotations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceServiceKeyAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceServiceKeyAnnotations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceServiceKeyAnnotations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceServiceKeyAnnotations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testServiceKeyToManyAddOpResourceServiceKeyLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceKey
	var b, c, d, e ServiceKeyLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceKeyDBTypes, false, strmangle.SetComplement(serviceKeyPrimaryKeyColumns, serviceKeyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceKeyLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceKeyLabelDBTypes, false, strmangle.SetComplement(serviceKeyLabelPrimaryKeyColumns, serviceKeyLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServiceKeyLabel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceServiceKeyLabels(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceServiceKeyLabels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceServiceKeyLabels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceServiceKeyLabels().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testServiceKeyToManySetOpResourceServiceKeyLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceKey
	var b, c, d, e ServiceKeyLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceKeyDBTypes, false, strmangle.SetComplement(serviceKeyPrimaryKeyColumns, serviceKeyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceKeyLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceKeyLabelDBTypes, false, strmangle.SetComplement(serviceKeyLabelPrimaryKeyColumns, serviceKeyLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceServiceKeyLabels(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceServiceKeyLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceServiceKeyLabels(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceServiceKeyLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceServiceKeyLabels[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceServiceKeyLabels[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testServiceKeyToManyRemoveOpResourceServiceKeyLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceKey
	var b, c, d, e ServiceKeyLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceKeyDBTypes, false, strmangle.SetComplement(serviceKeyPrimaryKeyColumns, serviceKeyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceKeyLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceKeyLabelDBTypes, false, strmangle.SetComplement(serviceKeyLabelPrimaryKeyColumns, serviceKeyLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceServiceKeyLabels(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceServiceKeyLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceServiceKeyLabels(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceServiceKeyLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceServiceKeyLabels) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceServiceKeyLabels[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceServiceKeyLabels[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testServiceKeyToOneServiceInstanceUsingServiceInstance(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ServiceKey
	var foreign ServiceInstance

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, serviceKeyDBTypes, false, serviceKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, serviceInstanceDBTypes, false, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ServiceInstanceID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ServiceInstance().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ServiceKeySlice{&local}
	if err = local.L.LoadServiceInstance(ctx, tx, false, (*[]*ServiceKey)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServiceInstance == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ServiceInstance = nil
	if err = local.L.LoadServiceInstance(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServiceInstance == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testServiceKeyToOneSetOpServiceInstanceUsingServiceInstance(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceKey
	var b, c ServiceInstance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceKeyDBTypes, false, strmangle.SetComplement(serviceKeyPrimaryKeyColumns, serviceKeyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ServiceInstance{&b, &c} {
		err = a.SetServiceInstance(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ServiceInstance != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ServiceKeys[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ServiceInstanceID != x.ID {
			t.Error("foreign key was wrong value", a.ServiceInstanceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ServiceInstanceID))
		reflect.Indirect(reflect.ValueOf(&a.ServiceInstanceID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ServiceInstanceID != x.ID {
			t.Error("foreign key was wrong value", a.ServiceInstanceID, x.ID)
		}
	}
}

func testServiceKeysReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceKey{}
	if err = randomize.Struct(seed, o, serviceKeyDBTypes, true, serviceKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServiceKeysReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceKey{}
	if err = randomize.Struct(seed, o, serviceKeyDBTypes, true, serviceKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServiceKeySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServiceKeysSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceKey{}
	if err = randomize.Struct(seed, o, serviceKeyDBTypes, true, serviceKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServiceKeys().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	serviceKeyDBTypes = map[string]string{`ID`: `int`, `GUID`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `Name`: `varchar`, `Salt`: `varchar`, `Credentials`: `text`, `ServiceInstanceID`: `int`, `EncryptionKeyLabel`: `varchar`, `EncryptionIterations`: `int`}
	_                 = bytes.MinRead
)

func testServiceKeysUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(serviceKeyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(serviceKeyAllColumns) == len(serviceKeyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServiceKey{}
	if err = randomize.Struct(seed, o, serviceKeyDBTypes, true, serviceKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServiceKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serviceKeyDBTypes, true, serviceKeyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testServiceKeysSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(serviceKeyAllColumns) == len(serviceKeyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServiceKey{}
	if err = randomize.Struct(seed, o, serviceKeyDBTypes, true, serviceKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServiceKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serviceKeyDBTypes, true, serviceKeyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(serviceKeyAllColumns, serviceKeyPrimaryKeyColumns) {
		fields = serviceKeyAllColumns
	} else {
		fields = strmangle.SetComplement(
			serviceKeyAllColumns,
			serviceKeyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ServiceKeySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testServiceKeysUpsert(t *testing.T) {
	t.Parallel()

	if len(serviceKeyAllColumns) == len(serviceKeyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLServiceKeyUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ServiceKey{}
	if err = randomize.Struct(seed, &o, serviceKeyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServiceKey: %s", err)
	}

	count, err := ServiceKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, serviceKeyDBTypes, false, serviceKeyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServiceKey struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServiceKey: %s", err)
	}

	count, err = ServiceKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
