// +build psql
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Route is an object representing the database table.
type Route struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	GUID      string    `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Host      string    `boil:"host" json:"host" toml:"host" yaml:"host"`
	DomainID  int       `boil:"domain_id" json:"domain_id" toml:"domain_id" yaml:"domain_id"`
	SpaceID   int       `boil:"space_id" json:"space_id" toml:"space_id" yaml:"space_id"`
	Path      string    `boil:"path" json:"path" toml:"path" yaml:"path"`
	Port      int       `boil:"port" json:"port" toml:"port" yaml:"port"`
	VipOffset null.Int  `boil:"vip_offset" json:"vip_offset,omitempty" toml:"vip_offset" yaml:"vip_offset,omitempty"`

	R *routeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L routeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RouteColumns = struct {
	ID        string
	GUID      string
	CreatedAt string
	UpdatedAt string
	Host      string
	DomainID  string
	SpaceID   string
	Path      string
	Port      string
	VipOffset string
}{
	ID:        "id",
	GUID:      "guid",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	Host:      "host",
	DomainID:  "domain_id",
	SpaceID:   "space_id",
	Path:      "path",
	Port:      "port",
	VipOffset: "vip_offset",
}

var RouteTableColumns = struct {
	ID        string
	GUID      string
	CreatedAt string
	UpdatedAt string
	Host      string
	DomainID  string
	SpaceID   string
	Path      string
	Port      string
	VipOffset string
}{
	ID:        "routes.id",
	GUID:      "routes.guid",
	CreatedAt: "routes.created_at",
	UpdatedAt: "routes.updated_at",
	Host:      "routes.host",
	DomainID:  "routes.domain_id",
	SpaceID:   "routes.space_id",
	Path:      "routes.path",
	Port:      "routes.port",
	VipOffset: "routes.vip_offset",
}

// Generated where

var RouteWhere = struct {
	ID        whereHelperint
	GUID      whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpernull_Time
	Host      whereHelperstring
	DomainID  whereHelperint
	SpaceID   whereHelperint
	Path      whereHelperstring
	Port      whereHelperint
	VipOffset whereHelpernull_Int
}{
	ID:        whereHelperint{field: "\"routes\".\"id\""},
	GUID:      whereHelperstring{field: "\"routes\".\"guid\""},
	CreatedAt: whereHelpertime_Time{field: "\"routes\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"routes\".\"updated_at\""},
	Host:      whereHelperstring{field: "\"routes\".\"host\""},
	DomainID:  whereHelperint{field: "\"routes\".\"domain_id\""},
	SpaceID:   whereHelperint{field: "\"routes\".\"space_id\""},
	Path:      whereHelperstring{field: "\"routes\".\"path\""},
	Port:      whereHelperint{field: "\"routes\".\"port\""},
	VipOffset: whereHelpernull_Int{field: "\"routes\".\"vip_offset\""},
}

// RouteRels is where relationship names are stored.
var RouteRels = struct {
	Domain                   string
	Space                    string
	ResourceRouteAnnotations string
	RouteBindings            string
	ResourceRouteLabels      string
	RouteMappings            string
}{
	Domain:                   "Domain",
	Space:                    "Space",
	ResourceRouteAnnotations: "ResourceRouteAnnotations",
	RouteBindings:            "RouteBindings",
	ResourceRouteLabels:      "ResourceRouteLabels",
	RouteMappings:            "RouteMappings",
}

// routeR is where relationships are stored.
type routeR struct {
	Domain                   *Domain              `boil:"Domain" json:"Domain" toml:"Domain" yaml:"Domain"`
	Space                    *Space               `boil:"Space" json:"Space" toml:"Space" yaml:"Space"`
	ResourceRouteAnnotations RouteAnnotationSlice `boil:"ResourceRouteAnnotations" json:"ResourceRouteAnnotations" toml:"ResourceRouteAnnotations" yaml:"ResourceRouteAnnotations"`
	RouteBindings            RouteBindingSlice    `boil:"RouteBindings" json:"RouteBindings" toml:"RouteBindings" yaml:"RouteBindings"`
	ResourceRouteLabels      RouteLabelSlice      `boil:"ResourceRouteLabels" json:"ResourceRouteLabels" toml:"ResourceRouteLabels" yaml:"ResourceRouteLabels"`
	RouteMappings            RouteMappingSlice    `boil:"RouteMappings" json:"RouteMappings" toml:"RouteMappings" yaml:"RouteMappings"`
}

// NewStruct creates a new relationship struct
func (*routeR) NewStruct() *routeR {
	return &routeR{}
}

// routeL is where Load methods for each relationship are stored.
type routeL struct{}

var (
	routeAllColumns            = []string{"id", "guid", "created_at", "updated_at", "host", "domain_id", "space_id", "path", "port", "vip_offset"}
	routeColumnsWithoutDefault = []string{"guid", "updated_at", "domain_id", "space_id", "vip_offset"}
	routeColumnsWithDefault    = []string{"id", "created_at", "host", "path", "port"}
	routePrimaryKeyColumns     = []string{"id"}
)

type (
	// RouteSlice is an alias for a slice of pointers to Route.
	// This should almost always be used instead of []Route.
	RouteSlice []*Route

	RouteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	routeType                 = reflect.TypeOf(&Route{})
	routeMapping              = queries.MakeStructMapping(routeType)
	routePrimaryKeyMapping, _ = queries.BindMapping(routeType, routeMapping, routePrimaryKeyColumns)
	routeInsertCacheMut       sync.RWMutex
	routeInsertCache          = make(map[string]insertCache)
	routeUpdateCacheMut       sync.RWMutex
	routeUpdateCache          = make(map[string]updateCache)
	routeUpsertCacheMut       sync.RWMutex
	routeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

type RouteFinisher interface {
	One(ctx context.Context, exec boil.ContextExecutor) (*Route, error)
	Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	All(ctx context.Context, exec boil.ContextExecutor) (RouteSlice, error)
	Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)
}

// One returns a single route record from the query.
func (q RouteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Route, error) {
	o := &Route{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for routes")
	}

	return o, nil
}

// All returns all Route records from the query.
func (q RouteQuery) All(ctx context.Context, exec boil.ContextExecutor) (RouteSlice, error) {
	var o []*Route

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Route slice")
	}

	return o, nil
}

// Count returns the count of all Route records in the query.
func (q RouteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count routes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q RouteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if routes exists")
	}

	return count > 0, nil
}

// Domain pointed to by the foreign key.
func (q RouteQuery) Domain(o *Route, mods ...qm.QueryMod) DomainQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DomainID),
	}

	queryMods = append(queryMods, mods...)

	query := Domains(queryMods...)
	queries.SetFrom(query.Query, "\"domains\"")

	return query
}

// Space pointed to by the foreign key.
func (q RouteQuery) Space(o *Route, mods ...qm.QueryMod) SpaceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SpaceID),
	}

	queryMods = append(queryMods, mods...)

	query := Spaces(queryMods...)
	queries.SetFrom(query.Query, "\"spaces\"")

	return query
}

// ResourceRouteAnnotations retrieves all the route_annotation's RouteAnnotations with an executor via resource_guid column.
func (q RouteQuery) ResourceRouteAnnotations(o *Route, mods ...qm.QueryMod) RouteAnnotationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"route_annotations\".\"resource_guid\"=?", o.GUID),
	)

	query := RouteAnnotations(queryMods...)
	queries.SetFrom(query.Query, "\"route_annotations\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"route_annotations\".*"})
	}

	return query
}

// RouteBindings retrieves all the route_binding's RouteBindings with an executor.
func (q RouteQuery) RouteBindings(o *Route, mods ...qm.QueryMod) RouteBindingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"route_bindings\".\"route_id\"=?", o.ID),
	)

	query := RouteBindings(queryMods...)
	queries.SetFrom(query.Query, "\"route_bindings\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"route_bindings\".*"})
	}

	return query
}

// ResourceRouteLabels retrieves all the route_label's RouteLabels with an executor via resource_guid column.
func (q RouteQuery) ResourceRouteLabels(o *Route, mods ...qm.QueryMod) RouteLabelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"route_labels\".\"resource_guid\"=?", o.GUID),
	)

	query := RouteLabels(queryMods...)
	queries.SetFrom(query.Query, "\"route_labels\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"route_labels\".*"})
	}

	return query
}

// RouteMappings retrieves all the route_mapping's RouteMappings with an executor.
func (q RouteQuery) RouteMappings(o *Route, mods ...qm.QueryMod) RouteMappingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"route_mappings\".\"route_guid\"=?", o.GUID),
	)

	query := RouteMappings(queryMods...)
	queries.SetFrom(query.Query, "\"route_mappings\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"route_mappings\".*"})
	}

	return query
}

// LoadDomain allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (routeL) LoadDomain(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoute interface{}, mods queries.Applicator) error {
	var slice []*Route
	var object *Route

	if singular {
		object = maybeRoute.(*Route)
	} else {
		slice = *maybeRoute.(*[]*Route)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &routeR{}
		}
		args = append(args, object.DomainID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &routeR{}
			}

			for _, a := range args {
				if a == obj.DomainID {
					continue Outer
				}
			}

			args = append(args, obj.DomainID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`domains`),
		qm.WhereIn(`domains.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Domain")
	}

	var resultSlice []*Domain
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Domain")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for domains")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for domains")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Domain = foreign
		if foreign.R == nil {
			foreign.R = &domainR{}
		}
		foreign.R.Routes = append(foreign.R.Routes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DomainID == foreign.ID {
				local.R.Domain = foreign
				if foreign.R == nil {
					foreign.R = &domainR{}
				}
				foreign.R.Routes = append(foreign.R.Routes, local)
				break
			}
		}
	}

	return nil
}

// LoadSpace allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (routeL) LoadSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoute interface{}, mods queries.Applicator) error {
	var slice []*Route
	var object *Route

	if singular {
		object = maybeRoute.(*Route)
	} else {
		slice = *maybeRoute.(*[]*Route)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &routeR{}
		}
		args = append(args, object.SpaceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &routeR{}
			}

			for _, a := range args {
				if a == obj.SpaceID {
					continue Outer
				}
			}

			args = append(args, obj.SpaceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`spaces`),
		qm.WhereIn(`spaces.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Space")
	}

	var resultSlice []*Space
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Space")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for spaces")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for spaces")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Space = foreign
		if foreign.R == nil {
			foreign.R = &spaceR{}
		}
		foreign.R.Routes = append(foreign.R.Routes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SpaceID == foreign.ID {
				local.R.Space = foreign
				if foreign.R == nil {
					foreign.R = &spaceR{}
				}
				foreign.R.Routes = append(foreign.R.Routes, local)
				break
			}
		}
	}

	return nil
}

// LoadResourceRouteAnnotations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (routeL) LoadResourceRouteAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoute interface{}, mods queries.Applicator) error {
	var slice []*Route
	var object *Route

	if singular {
		object = maybeRoute.(*Route)
	} else {
		slice = *maybeRoute.(*[]*Route)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &routeR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &routeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`route_annotations`),
		qm.WhereIn(`route_annotations.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load route_annotations")
	}

	var resultSlice []*RouteAnnotation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice route_annotations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on route_annotations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for route_annotations")
	}

	if singular {
		object.R.ResourceRouteAnnotations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &routeAnnotationR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceRouteAnnotations = append(local.R.ResourceRouteAnnotations, foreign)
				if foreign.R == nil {
					foreign.R = &routeAnnotationR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// LoadRouteBindings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (routeL) LoadRouteBindings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoute interface{}, mods queries.Applicator) error {
	var slice []*Route
	var object *Route

	if singular {
		object = maybeRoute.(*Route)
	} else {
		slice = *maybeRoute.(*[]*Route)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &routeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &routeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`route_bindings`),
		qm.WhereIn(`route_bindings.route_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load route_bindings")
	}

	var resultSlice []*RouteBinding
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice route_bindings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on route_bindings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for route_bindings")
	}

	if singular {
		object.R.RouteBindings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &routeBindingR{}
			}
			foreign.R.Route = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RouteID) {
				local.R.RouteBindings = append(local.R.RouteBindings, foreign)
				if foreign.R == nil {
					foreign.R = &routeBindingR{}
				}
				foreign.R.Route = local
				break
			}
		}
	}

	return nil
}

// LoadResourceRouteLabels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (routeL) LoadResourceRouteLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoute interface{}, mods queries.Applicator) error {
	var slice []*Route
	var object *Route

	if singular {
		object = maybeRoute.(*Route)
	} else {
		slice = *maybeRoute.(*[]*Route)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &routeR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &routeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`route_labels`),
		qm.WhereIn(`route_labels.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load route_labels")
	}

	var resultSlice []*RouteLabel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice route_labels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on route_labels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for route_labels")
	}

	if singular {
		object.R.ResourceRouteLabels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &routeLabelR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceRouteLabels = append(local.R.ResourceRouteLabels, foreign)
				if foreign.R == nil {
					foreign.R = &routeLabelR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// LoadRouteMappings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (routeL) LoadRouteMappings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoute interface{}, mods queries.Applicator) error {
	var slice []*Route
	var object *Route

	if singular {
		object = maybeRoute.(*Route)
	} else {
		slice = *maybeRoute.(*[]*Route)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &routeR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &routeR{}
			}

			for _, a := range args {
				if a == obj.GUID {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`route_mappings`),
		qm.WhereIn(`route_mappings.route_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load route_mappings")
	}

	var resultSlice []*RouteMapping
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice route_mappings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on route_mappings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for route_mappings")
	}

	if singular {
		object.R.RouteMappings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &routeMappingR{}
			}
			foreign.R.Route = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.GUID == foreign.RouteGUID {
				local.R.RouteMappings = append(local.R.RouteMappings, foreign)
				if foreign.R == nil {
					foreign.R = &routeMappingR{}
				}
				foreign.R.Route = local
				break
			}
		}
	}

	return nil
}

// SetDomain of the route to the related item.
// Sets o.R.Domain to related.
// Adds o to related.R.Routes.
func (q RouteQuery) SetDomain(o *Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Domain) error {
	var err error
	if insert {
		if err = Domains().Insert(related, ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"routes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"domain_id"}),
		strmangle.WhereClause("\"", "\"", 2, routePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DomainID = related.ID
	if o.R == nil {
		o.R = &routeR{
			Domain: related,
		}
	} else {
		o.R.Domain = related
	}

	if related.R == nil {
		related.R = &domainR{
			Routes: RouteSlice{o},
		}
	} else {
		related.R.Routes = append(related.R.Routes, o)
	}

	return nil
}

// SetSpace of the route to the related item.
// Sets o.R.Space to related.
// Adds o to related.R.Routes.
func (q RouteQuery) SetSpace(o *Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Space) error {
	var err error
	if insert {
		if err = Spaces().Insert(related, ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"routes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"space_id"}),
		strmangle.WhereClause("\"", "\"", 2, routePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SpaceID = related.ID
	if o.R == nil {
		o.R = &routeR{
			Space: related,
		}
	} else {
		o.R.Space = related
	}

	if related.R == nil {
		related.R = &spaceR{
			Routes: RouteSlice{o},
		}
	} else {
		related.R.Routes = append(related.R.Routes, o)
	}

	return nil
}

// AddResourceRouteAnnotations adds the given related objects to the existing relationships
// of the route, optionally inserting them as new records.
// Appends related to o.R.ResourceRouteAnnotations.
// Sets related.R.Resource appropriately.
func (q RouteQuery) AddResourceRouteAnnotations(o *Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteAnnotation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = RouteAnnotations().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"route_annotations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"resource_guid"}),
				strmangle.WhereClause("\"", "\"", 2, routeAnnotationPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &routeR{
			ResourceRouteAnnotations: related,
		}
	} else {
		o.R.ResourceRouteAnnotations = append(o.R.ResourceRouteAnnotations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &routeAnnotationR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceRouteAnnotations removes all previously related items of the
// route replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceRouteAnnotations accordingly.
// Replaces o.R.ResourceRouteAnnotations with related.
// Sets related.R.Resource's ResourceRouteAnnotations accordingly.
func (q RouteQuery) SetResourceRouteAnnotations(o *Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteAnnotation) error {
	query := "update \"route_annotations\" set \"resource_guid\" = null where \"resource_guid\" = $1"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceRouteAnnotations {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceRouteAnnotations = nil
	}
	return q.AddResourceRouteAnnotations(o, ctx, exec, insert, related...)
}

// RemoveResourceRouteAnnotations relationships from objects passed in.
// Removes related items from R.ResourceRouteAnnotations (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (q RouteQuery) RemoveResourceRouteAnnotations(o *Route, ctx context.Context, exec boil.ContextExecutor, related ...*RouteAnnotation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = RouteAnnotations().Update(rel, ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceRouteAnnotations {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceRouteAnnotations)
			if ln > 1 && i < ln-1 {
				o.R.ResourceRouteAnnotations[i] = o.R.ResourceRouteAnnotations[ln-1]
			}
			o.R.ResourceRouteAnnotations = o.R.ResourceRouteAnnotations[:ln-1]
			break
		}
	}

	return nil
}

// AddRouteBindings adds the given related objects to the existing relationships
// of the route, optionally inserting them as new records.
// Appends related to o.R.RouteBindings.
// Sets related.R.Route appropriately.
func (q RouteQuery) AddRouteBindings(o *Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteBinding) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RouteID, o.ID)
			if err = RouteBindings().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"route_bindings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"route_id"}),
				strmangle.WhereClause("\"", "\"", 2, routeBindingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RouteID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &routeR{
			RouteBindings: related,
		}
	} else {
		o.R.RouteBindings = append(o.R.RouteBindings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &routeBindingR{
				Route: o,
			}
		} else {
			rel.R.Route = o
		}
	}
	return nil
}

// SetRouteBindings removes all previously related items of the
// route replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Route's RouteBindings accordingly.
// Replaces o.R.RouteBindings with related.
// Sets related.R.Route's RouteBindings accordingly.
func (q RouteQuery) SetRouteBindings(o *Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteBinding) error {
	query := "update \"route_bindings\" set \"route_id\" = null where \"route_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RouteBindings {
			queries.SetScanner(&rel.RouteID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Route = nil
		}

		o.R.RouteBindings = nil
	}
	return q.AddRouteBindings(o, ctx, exec, insert, related...)
}

// RemoveRouteBindings relationships from objects passed in.
// Removes related items from R.RouteBindings (uses pointer comparison, removal does not keep order)
// Sets related.R.Route.
func (q RouteQuery) RemoveRouteBindings(o *Route, ctx context.Context, exec boil.ContextExecutor, related ...*RouteBinding) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RouteID, nil)
		if rel.R != nil {
			rel.R.Route = nil
		}
		if _, err = RouteBindings().Update(rel, ctx, exec, boil.Whitelist("route_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RouteBindings {
			if rel != ri {
				continue
			}

			ln := len(o.R.RouteBindings)
			if ln > 1 && i < ln-1 {
				o.R.RouteBindings[i] = o.R.RouteBindings[ln-1]
			}
			o.R.RouteBindings = o.R.RouteBindings[:ln-1]
			break
		}
	}

	return nil
}

// AddResourceRouteLabels adds the given related objects to the existing relationships
// of the route, optionally inserting them as new records.
// Appends related to o.R.ResourceRouteLabels.
// Sets related.R.Resource appropriately.
func (q RouteQuery) AddResourceRouteLabels(o *Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteLabel) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = RouteLabels().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"route_labels\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"resource_guid"}),
				strmangle.WhereClause("\"", "\"", 2, routeLabelPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &routeR{
			ResourceRouteLabels: related,
		}
	} else {
		o.R.ResourceRouteLabels = append(o.R.ResourceRouteLabels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &routeLabelR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceRouteLabels removes all previously related items of the
// route replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceRouteLabels accordingly.
// Replaces o.R.ResourceRouteLabels with related.
// Sets related.R.Resource's ResourceRouteLabels accordingly.
func (q RouteQuery) SetResourceRouteLabels(o *Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteLabel) error {
	query := "update \"route_labels\" set \"resource_guid\" = null where \"resource_guid\" = $1"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceRouteLabels {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceRouteLabels = nil
	}
	return q.AddResourceRouteLabels(o, ctx, exec, insert, related...)
}

// RemoveResourceRouteLabels relationships from objects passed in.
// Removes related items from R.ResourceRouteLabels (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (q RouteQuery) RemoveResourceRouteLabels(o *Route, ctx context.Context, exec boil.ContextExecutor, related ...*RouteLabel) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = RouteLabels().Update(rel, ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceRouteLabels {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceRouteLabels)
			if ln > 1 && i < ln-1 {
				o.R.ResourceRouteLabels[i] = o.R.ResourceRouteLabels[ln-1]
			}
			o.R.ResourceRouteLabels = o.R.ResourceRouteLabels[:ln-1]
			break
		}
	}

	return nil
}

// AddRouteMappings adds the given related objects to the existing relationships
// of the route, optionally inserting them as new records.
// Appends related to o.R.RouteMappings.
// Sets related.R.Route appropriately.
func (q RouteQuery) AddRouteMappings(o *Route, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteMapping) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RouteGUID = o.GUID
			if err = RouteMappings().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"route_mappings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"route_guid"}),
				strmangle.WhereClause("\"", "\"", 2, routeMappingPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RouteGUID = o.GUID
		}
	}

	if o.R == nil {
		o.R = &routeR{
			RouteMappings: related,
		}
	} else {
		o.R.RouteMappings = append(o.R.RouteMappings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &routeMappingR{
				Route: o,
			}
		} else {
			rel.R.Route = o
		}
	}
	return nil
}

// Routes retrieves all the records using an executor.
func Routes(mods ...qm.QueryMod) RouteQuery {
	mods = append(mods, qm.From("\"routes\""))
	return RouteQuery{NewQuery(mods...)}
}

type RouteFinder interface {
	FindRoute(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Route, error)
}

// FindRoute retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoute(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Route, error) {
	routeObj := &Route{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"routes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, routeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from routes")
	}

	return routeObj, nil
}

type RouteInserter interface {
	Insert(o *Route, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (q RouteQuery) Insert(o *Route, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no routes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(routeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	routeInsertCacheMut.RLock()
	cache, cached := routeInsertCache[key]
	routeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			routeAllColumns,
			routeColumnsWithDefault,
			routeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(routeType, routeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(routeType, routeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"routes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"routes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into routes")
	}

	if !cached {
		routeInsertCacheMut.Lock()
		routeInsertCache[key] = cache
		routeInsertCacheMut.Unlock()
	}

	return nil
}

type RouteUpdater interface {
	Update(o *Route, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)
	UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
	UpdateAllSlice(o RouteSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
}

// Update uses an executor to update the Route.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (q RouteQuery) Update(o *Route, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	routeUpdateCacheMut.RLock()
	cache, cached := routeUpdateCache[key]
	routeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			routeAllColumns,
			routePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update routes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"routes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, routePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(routeType, routeMapping, append(wl, routePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update routes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for routes")
	}

	if !cached {
		routeUpdateCacheMut.Lock()
		routeUpdateCache[key] = cache
		routeUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q RouteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for routes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for routes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (q RouteQuery) UpdateAllSlice(o RouteSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), routePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"routes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, routePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in route slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all route")
	}
	return rowsAff, nil
}

type RouteDeleter interface {
	Delete(o *Route, ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAllSlice(o RouteSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)
}

// Delete deletes a single Route record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (q RouteQuery) Delete(o *Route, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Route provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), routePrimaryKeyMapping)
	sql := "DELETE FROM \"routes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from routes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for routes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q RouteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no routeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from routes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for routes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (q RouteQuery) DeleteAllSlice(o RouteSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), routePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"routes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, routePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from route slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for routes")
	}

	return rowsAff, nil
}

type RouteReloader interface {
	Reload(o *Route, ctx context.Context, exec boil.ContextExecutor) error
	ReloadAll(o *RouteSlice, ctx context.Context, exec boil.ContextExecutor) error
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (q RouteQuery) Reload(o *Route, ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRoute(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (q RouteQuery) ReloadAll(o *RouteSlice, ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RouteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), routePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"routes\".* FROM \"routes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, routePrimaryKeyColumns, len(*o))

	query := queries.Raw(sql, args...)

	err := query.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RouteSlice")
	}

	*o = slice

	return nil
}

// RouteExists checks if the Route row exists.
func RouteExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"routes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if routes exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Route) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no routes provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(routeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	routeUpsertCacheMut.RLock()
	cache, cached := routeUpsertCache[key]
	routeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			routeAllColumns,
			routeColumnsWithDefault,
			routeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			routeAllColumns,
			routePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert routes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(routePrimaryKeyColumns))
			copy(conflict, routePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"routes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(routeType, routeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(routeType, routeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert routes")
	}

	if !cached {
		routeUpsertCacheMut.Lock()
		routeUpsertCache[key] = cache
		routeUpsertCacheMut.Unlock()
	}

	return nil
}
