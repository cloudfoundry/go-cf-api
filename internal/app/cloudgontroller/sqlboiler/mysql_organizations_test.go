// +build mysql_integration
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOrganizations(t *testing.T) {
	t.Parallel()

	query := Organizations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOrganizationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Organization{}
	if err = randomize.Struct(seed, o, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Organizations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrganizationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Organization{}
	if err = randomize.Struct(seed, o, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Organizations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Organizations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrganizationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Organization{}
	if err = randomize.Struct(seed, o, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrganizationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Organizations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrganizationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Organization{}
	if err = randomize.Struct(seed, o, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OrganizationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Organization exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OrganizationExists to return true, but got false.")
	}
}

func testOrganizationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Organization{}
	if err = randomize.Struct(seed, o, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	organizationFound, err := FindOrganization(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if organizationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOrganizationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Organization{}
	if err = randomize.Struct(seed, o, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Organizations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOrganizationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Organization{}
	if err = randomize.Struct(seed, o, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Organizations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOrganizationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	organizationOne := &Organization{}
	organizationTwo := &Organization{}
	if err = randomize.Struct(seed, organizationOne, organizationDBTypes, false, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}
	if err = randomize.Struct(seed, organizationTwo, organizationDBTypes, false, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = organizationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = organizationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Organizations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOrganizationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	organizationOne := &Organization{}
	organizationTwo := &Organization{}
	if err = randomize.Struct(seed, organizationOne, organizationDBTypes, false, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}
	if err = randomize.Struct(seed, organizationTwo, organizationDBTypes, false, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = organizationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = organizationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Organizations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func organizationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Organization) error {
	*o = Organization{}
	return nil
}

func organizationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Organization) error {
	*o = Organization{}
	return nil
}

func organizationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Organization) error {
	*o = Organization{}
	return nil
}

func organizationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Organization) error {
	*o = Organization{}
	return nil
}

func organizationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Organization) error {
	*o = Organization{}
	return nil
}

func organizationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Organization) error {
	*o = Organization{}
	return nil
}

func organizationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Organization) error {
	*o = Organization{}
	return nil
}

func organizationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Organization) error {
	*o = Organization{}
	return nil
}

func organizationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Organization) error {
	*o = Organization{}
	return nil
}

func testOrganizationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Organization{}
	o := &Organization{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, organizationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Organization object: %s", err)
	}

	AddOrganizationHook(boil.BeforeInsertHook, organizationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	organizationBeforeInsertHooks = []OrganizationHook{}

	AddOrganizationHook(boil.AfterInsertHook, organizationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	organizationAfterInsertHooks = []OrganizationHook{}

	AddOrganizationHook(boil.AfterSelectHook, organizationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	organizationAfterSelectHooks = []OrganizationHook{}

	AddOrganizationHook(boil.BeforeUpdateHook, organizationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	organizationBeforeUpdateHooks = []OrganizationHook{}

	AddOrganizationHook(boil.AfterUpdateHook, organizationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	organizationAfterUpdateHooks = []OrganizationHook{}

	AddOrganizationHook(boil.BeforeDeleteHook, organizationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	organizationBeforeDeleteHooks = []OrganizationHook{}

	AddOrganizationHook(boil.AfterDeleteHook, organizationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	organizationAfterDeleteHooks = []OrganizationHook{}

	AddOrganizationHook(boil.BeforeUpsertHook, organizationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	organizationBeforeUpsertHooks = []OrganizationHook{}

	AddOrganizationHook(boil.AfterUpsertHook, organizationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	organizationAfterUpsertHooks = []OrganizationHook{}
}

func testOrganizationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Organization{}
	if err = randomize.Struct(seed, o, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Organizations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrganizationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Organization{}
	if err = randomize.Struct(seed, o, organizationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(organizationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Organizations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrganizationToManyOwningOrganizationDomains(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c Domain

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, domainDBTypes, false, domainColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, domainDBTypes, false, domainColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.OwningOrganizationID, a.ID)
	queries.Assign(&c.OwningOrganizationID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OwningOrganizationDomains().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.OwningOrganizationID, b.OwningOrganizationID) {
			bFound = true
		}
		if queries.Equal(v.OwningOrganizationID, c.OwningOrganizationID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrganizationSlice{&a}
	if err = a.L.LoadOwningOrganizationDomains(ctx, tx, false, (*[]*Organization)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OwningOrganizationDomains); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OwningOrganizationDomains = nil
	if err = a.L.LoadOwningOrganizationDomains(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OwningOrganizationDomains); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrganizationToManyResourceOrganizationAnnotations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c OrganizationAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, organizationAnnotationDBTypes, false, organizationAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, organizationAnnotationDBTypes, false, organizationAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceOrganizationAnnotations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrganizationSlice{&a}
	if err = a.L.LoadResourceOrganizationAnnotations(ctx, tx, false, (*[]*Organization)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceOrganizationAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceOrganizationAnnotations = nil
	if err = a.L.LoadResourceOrganizationAnnotations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceOrganizationAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrganizationToManyResourceOrganizationLabels(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c OrganizationLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, organizationLabelDBTypes, false, organizationLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, organizationLabelDBTypes, false, organizationLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceOrganizationLabels().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrganizationSlice{&a}
	if err = a.L.LoadResourceOrganizationLabels(ctx, tx, false, (*[]*Organization)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceOrganizationLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceOrganizationLabels = nil
	if err = a.L.LoadResourceOrganizationLabels(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceOrganizationLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrganizationToManyOrganizationsAuditors(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c OrganizationsAuditor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, organizationsAuditorDBTypes, false, organizationsAuditorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, organizationsAuditorDBTypes, false, organizationsAuditorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.OrganizationID = a.ID
	c.OrganizationID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrganizationsAuditors().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.OrganizationID == b.OrganizationID {
			bFound = true
		}
		if v.OrganizationID == c.OrganizationID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrganizationSlice{&a}
	if err = a.L.LoadOrganizationsAuditors(ctx, tx, false, (*[]*Organization)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrganizationsAuditors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrganizationsAuditors = nil
	if err = a.L.LoadOrganizationsAuditors(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrganizationsAuditors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrganizationToManyOrganizationsBillingManagers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c OrganizationsBillingManager

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, organizationsBillingManagerDBTypes, false, organizationsBillingManagerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, organizationsBillingManagerDBTypes, false, organizationsBillingManagerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.OrganizationID = a.ID
	c.OrganizationID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrganizationsBillingManagers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.OrganizationID == b.OrganizationID {
			bFound = true
		}
		if v.OrganizationID == c.OrganizationID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrganizationSlice{&a}
	if err = a.L.LoadOrganizationsBillingManagers(ctx, tx, false, (*[]*Organization)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrganizationsBillingManagers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrganizationsBillingManagers = nil
	if err = a.L.LoadOrganizationsBillingManagers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrganizationsBillingManagers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrganizationToManyIsolationSegments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c IsolationSegment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, isolationSegmentDBTypes, false, isolationSegmentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, isolationSegmentDBTypes, false, isolationSegmentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into `organizations_isolation_segments` (`organization_guid`, `isolation_segment_guid`) values (?, ?)", a.GUID, b.GUID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into `organizations_isolation_segments` (`organization_guid`, `isolation_segment_guid`) values (?, ?)", a.GUID, c.GUID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.IsolationSegments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GUID == b.GUID {
			bFound = true
		}
		if v.GUID == c.GUID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrganizationSlice{&a}
	if err = a.L.LoadIsolationSegments(ctx, tx, false, (*[]*Organization)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IsolationSegments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.IsolationSegments = nil
	if err = a.L.LoadIsolationSegments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IsolationSegments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrganizationToManyOrganizationsManagers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c OrganizationsManager

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, organizationsManagerDBTypes, false, organizationsManagerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, organizationsManagerDBTypes, false, organizationsManagerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.OrganizationID = a.ID
	c.OrganizationID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrganizationsManagers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.OrganizationID == b.OrganizationID {
			bFound = true
		}
		if v.OrganizationID == c.OrganizationID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrganizationSlice{&a}
	if err = a.L.LoadOrganizationsManagers(ctx, tx, false, (*[]*Organization)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrganizationsManagers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrganizationsManagers = nil
	if err = a.L.LoadOrganizationsManagers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrganizationsManagers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrganizationToManyOrganizationsPrivateDomains(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c OrganizationsPrivateDomain

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, organizationsPrivateDomainDBTypes, false, organizationsPrivateDomainColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, organizationsPrivateDomainDBTypes, false, organizationsPrivateDomainColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.OrganizationID = a.ID
	c.OrganizationID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrganizationsPrivateDomains().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.OrganizationID == b.OrganizationID {
			bFound = true
		}
		if v.OrganizationID == c.OrganizationID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrganizationSlice{&a}
	if err = a.L.LoadOrganizationsPrivateDomains(ctx, tx, false, (*[]*Organization)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrganizationsPrivateDomains); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrganizationsPrivateDomains = nil
	if err = a.L.LoadOrganizationsPrivateDomains(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrganizationsPrivateDomains); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrganizationToManyOrganizationsUsers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c OrganizationsUser

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, organizationsUserDBTypes, false, organizationsUserColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, organizationsUserDBTypes, false, organizationsUserColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.OrganizationID = a.ID
	c.OrganizationID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrganizationsUsers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.OrganizationID == b.OrganizationID {
			bFound = true
		}
		if v.OrganizationID == c.OrganizationID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrganizationSlice{&a}
	if err = a.L.LoadOrganizationsUsers(ctx, tx, false, (*[]*Organization)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrganizationsUsers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrganizationsUsers = nil
	if err = a.L.LoadOrganizationsUsers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrganizationsUsers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrganizationToManyServicePlanVisibilities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c ServicePlanVisibility

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, servicePlanVisibilityDBTypes, false, servicePlanVisibilityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, servicePlanVisibilityDBTypes, false, servicePlanVisibilityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.OrganizationID = a.ID
	c.OrganizationID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ServicePlanVisibilities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.OrganizationID == b.OrganizationID {
			bFound = true
		}
		if v.OrganizationID == c.OrganizationID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrganizationSlice{&a}
	if err = a.L.LoadServicePlanVisibilities(ctx, tx, false, (*[]*Organization)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ServicePlanVisibilities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ServicePlanVisibilities = nil
	if err = a.L.LoadServicePlanVisibilities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ServicePlanVisibilities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrganizationToManySpaceQuotaDefinitions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c SpaceQuotaDefinition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, spaceQuotaDefinitionDBTypes, false, spaceQuotaDefinitionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, spaceQuotaDefinitionDBTypes, false, spaceQuotaDefinitionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.OrganizationID = a.ID
	c.OrganizationID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SpaceQuotaDefinitions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.OrganizationID == b.OrganizationID {
			bFound = true
		}
		if v.OrganizationID == c.OrganizationID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrganizationSlice{&a}
	if err = a.L.LoadSpaceQuotaDefinitions(ctx, tx, false, (*[]*Organization)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SpaceQuotaDefinitions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SpaceQuotaDefinitions = nil
	if err = a.L.LoadSpaceQuotaDefinitions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SpaceQuotaDefinitions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrganizationToManySpaces(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c Space

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, spaceDBTypes, false, spaceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, spaceDBTypes, false, spaceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.OrganizationID = a.ID
	c.OrganizationID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Spaces().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.OrganizationID == b.OrganizationID {
			bFound = true
		}
		if v.OrganizationID == c.OrganizationID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrganizationSlice{&a}
	if err = a.L.LoadSpaces(ctx, tx, false, (*[]*Organization)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Spaces); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Spaces = nil
	if err = a.L.LoadSpaces(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Spaces); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrganizationToManyAddOpOwningOrganizationDomains(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c, d, e Domain

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Domain{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, domainDBTypes, false, strmangle.SetComplement(domainPrimaryKeyColumns, domainColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Domain{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOwningOrganizationDomains(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.OwningOrganizationID) {
			t.Error("foreign key was wrong value", a.ID, first.OwningOrganizationID)
		}
		if !queries.Equal(a.ID, second.OwningOrganizationID) {
			t.Error("foreign key was wrong value", a.ID, second.OwningOrganizationID)
		}

		if first.R.OwningOrganization != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.OwningOrganization != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OwningOrganizationDomains[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OwningOrganizationDomains[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OwningOrganizationDomains().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOrganizationToManySetOpOwningOrganizationDomains(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c, d, e Domain

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Domain{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, domainDBTypes, false, strmangle.SetComplement(domainPrimaryKeyColumns, domainColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOwningOrganizationDomains(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OwningOrganizationDomains().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOwningOrganizationDomains(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OwningOrganizationDomains().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OwningOrganizationID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OwningOrganizationID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.OwningOrganizationID) {
		t.Error("foreign key was wrong value", a.ID, d.OwningOrganizationID)
	}
	if !queries.Equal(a.ID, e.OwningOrganizationID) {
		t.Error("foreign key was wrong value", a.ID, e.OwningOrganizationID)
	}

	if b.R.OwningOrganization != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OwningOrganization != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OwningOrganization != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.OwningOrganization != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OwningOrganizationDomains[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OwningOrganizationDomains[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOrganizationToManyRemoveOpOwningOrganizationDomains(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c, d, e Domain

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Domain{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, domainDBTypes, false, strmangle.SetComplement(domainPrimaryKeyColumns, domainColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOwningOrganizationDomains(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OwningOrganizationDomains().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOwningOrganizationDomains(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OwningOrganizationDomains().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OwningOrganizationID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OwningOrganizationID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.OwningOrganization != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OwningOrganization != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OwningOrganization != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.OwningOrganization != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OwningOrganizationDomains) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OwningOrganizationDomains[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OwningOrganizationDomains[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOrganizationToManyAddOpResourceOrganizationAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c, d, e OrganizationAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrganizationAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, organizationAnnotationDBTypes, false, strmangle.SetComplement(organizationAnnotationPrimaryKeyColumns, organizationAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrganizationAnnotation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceOrganizationAnnotations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceOrganizationAnnotations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceOrganizationAnnotations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceOrganizationAnnotations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOrganizationToManySetOpResourceOrganizationAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c, d, e OrganizationAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrganizationAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, organizationAnnotationDBTypes, false, strmangle.SetComplement(organizationAnnotationPrimaryKeyColumns, organizationAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceOrganizationAnnotations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceOrganizationAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceOrganizationAnnotations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceOrganizationAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceOrganizationAnnotations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceOrganizationAnnotations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOrganizationToManyRemoveOpResourceOrganizationAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c, d, e OrganizationAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrganizationAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, organizationAnnotationDBTypes, false, strmangle.SetComplement(organizationAnnotationPrimaryKeyColumns, organizationAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceOrganizationAnnotations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceOrganizationAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceOrganizationAnnotations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceOrganizationAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceOrganizationAnnotations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceOrganizationAnnotations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceOrganizationAnnotations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOrganizationToManyAddOpResourceOrganizationLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c, d, e OrganizationLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrganizationLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, organizationLabelDBTypes, false, strmangle.SetComplement(organizationLabelPrimaryKeyColumns, organizationLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrganizationLabel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceOrganizationLabels(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceOrganizationLabels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceOrganizationLabels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceOrganizationLabels().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOrganizationToManySetOpResourceOrganizationLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c, d, e OrganizationLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrganizationLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, organizationLabelDBTypes, false, strmangle.SetComplement(organizationLabelPrimaryKeyColumns, organizationLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceOrganizationLabels(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceOrganizationLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceOrganizationLabels(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceOrganizationLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceOrganizationLabels[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceOrganizationLabels[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOrganizationToManyRemoveOpResourceOrganizationLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c, d, e OrganizationLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrganizationLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, organizationLabelDBTypes, false, strmangle.SetComplement(organizationLabelPrimaryKeyColumns, organizationLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceOrganizationLabels(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceOrganizationLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceOrganizationLabels(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceOrganizationLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceOrganizationLabels) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceOrganizationLabels[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceOrganizationLabels[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOrganizationToManyAddOpOrganizationsAuditors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c, d, e OrganizationsAuditor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrganizationsAuditor{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, organizationsAuditorDBTypes, false, strmangle.SetComplement(organizationsAuditorPrimaryKeyColumns, organizationsAuditorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrganizationsAuditor{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrganizationsAuditors(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.OrganizationID {
			t.Error("foreign key was wrong value", a.ID, first.OrganizationID)
		}
		if a.ID != second.OrganizationID {
			t.Error("foreign key was wrong value", a.ID, second.OrganizationID)
		}

		if first.R.Organization != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Organization != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrganizationsAuditors[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrganizationsAuditors[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrganizationsAuditors().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testOrganizationToManyAddOpOrganizationsBillingManagers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c, d, e OrganizationsBillingManager

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrganizationsBillingManager{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, organizationsBillingManagerDBTypes, false, strmangle.SetComplement(organizationsBillingManagerPrimaryKeyColumns, organizationsBillingManagerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrganizationsBillingManager{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrganizationsBillingManagers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.OrganizationID {
			t.Error("foreign key was wrong value", a.ID, first.OrganizationID)
		}
		if a.ID != second.OrganizationID {
			t.Error("foreign key was wrong value", a.ID, second.OrganizationID)
		}

		if first.R.Organization != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Organization != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrganizationsBillingManagers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrganizationsBillingManagers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrganizationsBillingManagers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testOrganizationToManyAddOpIsolationSegments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c, d, e IsolationSegment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*IsolationSegment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, isolationSegmentDBTypes, false, strmangle.SetComplement(isolationSegmentPrimaryKeyColumns, isolationSegmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*IsolationSegment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIsolationSegments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Organizations[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Organizations[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.IsolationSegments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.IsolationSegments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.IsolationSegments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOrganizationToManySetOpIsolationSegments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c, d, e IsolationSegment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*IsolationSegment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, isolationSegmentDBTypes, false, strmangle.SetComplement(isolationSegmentPrimaryKeyColumns, isolationSegmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetIsolationSegments(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.IsolationSegments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetIsolationSegments(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.IsolationSegments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Organizations) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Organizations) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Organizations[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Organizations[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.IsolationSegments[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.IsolationSegments[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOrganizationToManyRemoveOpIsolationSegments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c, d, e IsolationSegment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*IsolationSegment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, isolationSegmentDBTypes, false, strmangle.SetComplement(isolationSegmentPrimaryKeyColumns, isolationSegmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddIsolationSegments(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.IsolationSegments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveIsolationSegments(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.IsolationSegments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Organizations) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Organizations) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Organizations[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Organizations[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.IsolationSegments) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.IsolationSegments[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.IsolationSegments[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOrganizationToManyAddOpOrganizationsManagers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c, d, e OrganizationsManager

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrganizationsManager{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, organizationsManagerDBTypes, false, strmangle.SetComplement(organizationsManagerPrimaryKeyColumns, organizationsManagerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrganizationsManager{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrganizationsManagers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.OrganizationID {
			t.Error("foreign key was wrong value", a.ID, first.OrganizationID)
		}
		if a.ID != second.OrganizationID {
			t.Error("foreign key was wrong value", a.ID, second.OrganizationID)
		}

		if first.R.Organization != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Organization != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrganizationsManagers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrganizationsManagers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrganizationsManagers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testOrganizationToManyAddOpOrganizationsPrivateDomains(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c, d, e OrganizationsPrivateDomain

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrganizationsPrivateDomain{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, organizationsPrivateDomainDBTypes, false, strmangle.SetComplement(organizationsPrivateDomainPrimaryKeyColumns, organizationsPrivateDomainColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrganizationsPrivateDomain{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrganizationsPrivateDomains(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.OrganizationID {
			t.Error("foreign key was wrong value", a.ID, first.OrganizationID)
		}
		if a.ID != second.OrganizationID {
			t.Error("foreign key was wrong value", a.ID, second.OrganizationID)
		}

		if first.R.Organization != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Organization != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrganizationsPrivateDomains[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrganizationsPrivateDomains[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrganizationsPrivateDomains().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testOrganizationToManyAddOpOrganizationsUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c, d, e OrganizationsUser

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrganizationsUser{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, organizationsUserDBTypes, false, strmangle.SetComplement(organizationsUserPrimaryKeyColumns, organizationsUserColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrganizationsUser{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrganizationsUsers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.OrganizationID {
			t.Error("foreign key was wrong value", a.ID, first.OrganizationID)
		}
		if a.ID != second.OrganizationID {
			t.Error("foreign key was wrong value", a.ID, second.OrganizationID)
		}

		if first.R.Organization != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Organization != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrganizationsUsers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrganizationsUsers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrganizationsUsers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testOrganizationToManyAddOpServicePlanVisibilities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c, d, e ServicePlanVisibility

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServicePlanVisibility{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, servicePlanVisibilityDBTypes, false, strmangle.SetComplement(servicePlanVisibilityPrimaryKeyColumns, servicePlanVisibilityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServicePlanVisibility{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddServicePlanVisibilities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.OrganizationID {
			t.Error("foreign key was wrong value", a.ID, first.OrganizationID)
		}
		if a.ID != second.OrganizationID {
			t.Error("foreign key was wrong value", a.ID, second.OrganizationID)
		}

		if first.R.Organization != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Organization != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ServicePlanVisibilities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ServicePlanVisibilities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ServicePlanVisibilities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testOrganizationToManyAddOpSpaceQuotaDefinitions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c, d, e SpaceQuotaDefinition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SpaceQuotaDefinition{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, spaceQuotaDefinitionDBTypes, false, strmangle.SetComplement(spaceQuotaDefinitionPrimaryKeyColumns, spaceQuotaDefinitionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SpaceQuotaDefinition{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSpaceQuotaDefinitions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.OrganizationID {
			t.Error("foreign key was wrong value", a.ID, first.OrganizationID)
		}
		if a.ID != second.OrganizationID {
			t.Error("foreign key was wrong value", a.ID, second.OrganizationID)
		}

		if first.R.Organization != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Organization != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SpaceQuotaDefinitions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SpaceQuotaDefinitions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SpaceQuotaDefinitions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testOrganizationToManyAddOpSpaces(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c, d, e Space

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Space{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Space{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSpaces(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.OrganizationID {
			t.Error("foreign key was wrong value", a.ID, first.OrganizationID)
		}
		if a.ID != second.OrganizationID {
			t.Error("foreign key was wrong value", a.ID, second.OrganizationID)
		}

		if first.R.Organization != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Organization != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Spaces[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Spaces[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Spaces().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testOrganizationToOneQuotaDefinitionUsingQuotaDefinition(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Organization
	var foreign QuotaDefinition

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, organizationDBTypes, false, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, quotaDefinitionDBTypes, false, quotaDefinitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuotaDefinition struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.QuotaDefinitionID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.QuotaDefinition().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OrganizationSlice{&local}
	if err = local.L.LoadQuotaDefinition(ctx, tx, false, (*[]*Organization)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.QuotaDefinition == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.QuotaDefinition = nil
	if err = local.L.LoadQuotaDefinition(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.QuotaDefinition == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrganizationToOneSetOpQuotaDefinitionUsingQuotaDefinition(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Organization
	var b, c QuotaDefinition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, quotaDefinitionDBTypes, false, strmangle.SetComplement(quotaDefinitionPrimaryKeyColumns, quotaDefinitionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, quotaDefinitionDBTypes, false, strmangle.SetComplement(quotaDefinitionPrimaryKeyColumns, quotaDefinitionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*QuotaDefinition{&b, &c} {
		err = a.SetQuotaDefinition(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.QuotaDefinition != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Organizations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.QuotaDefinitionID != x.ID {
			t.Error("foreign key was wrong value", a.QuotaDefinitionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.QuotaDefinitionID))
		reflect.Indirect(reflect.ValueOf(&a.QuotaDefinitionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.QuotaDefinitionID != x.ID {
			t.Error("foreign key was wrong value", a.QuotaDefinitionID, x.ID)
		}
	}
}

func testOrganizationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Organization{}
	if err = randomize.Struct(seed, o, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrganizationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Organization{}
	if err = randomize.Struct(seed, o, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrganizationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrganizationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Organization{}
	if err = randomize.Struct(seed, o, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Organizations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	organizationDBTypes = map[string]string{`ID`: `int`, `GUID`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `Name`: `varchar`, `BillingEnabled`: `tinyint`, `QuotaDefinitionID`: `int`, `Status`: `varchar`, `DefaultIsolationSegmentGUID`: `varchar`}
	_                   = bytes.MinRead
)

func testOrganizationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(organizationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(organizationAllColumns) == len(organizationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Organization{}
	if err = randomize.Struct(seed, o, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Organizations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, organizationDBTypes, true, organizationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOrganizationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(organizationAllColumns) == len(organizationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Organization{}
	if err = randomize.Struct(seed, o, organizationDBTypes, true, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Organizations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, organizationDBTypes, true, organizationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(organizationAllColumns, organizationPrimaryKeyColumns) {
		fields = organizationAllColumns
	} else {
		fields = strmangle.SetComplement(
			organizationAllColumns,
			organizationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OrganizationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOrganizationsUpsert(t *testing.T) {
	t.Parallel()

	if len(organizationAllColumns) == len(organizationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLOrganizationUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Organization{}
	if err = randomize.Struct(seed, &o, organizationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Organization: %s", err)
	}

	count, err := Organizations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, organizationDBTypes, false, organizationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Organization: %s", err)
	}

	count, err = Organizations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
