// +build mysql
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Droplet is an object representing the database table.
type Droplet struct {
	ID                             int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	GUID                           string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	CreatedAt                      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                      null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DropletHash                    null.String `boil:"droplet_hash" json:"droplet_hash,omitempty" toml:"droplet_hash" yaml:"droplet_hash,omitempty"`
	ExecutionMetadata              null.String `boil:"execution_metadata" json:"execution_metadata,omitempty" toml:"execution_metadata" yaml:"execution_metadata,omitempty"`
	State                          string      `boil:"state" json:"state" toml:"state" yaml:"state"`
	ProcessTypes                   null.String `boil:"process_types" json:"process_types,omitempty" toml:"process_types" yaml:"process_types,omitempty"`
	ErrorID                        null.String `boil:"error_id" json:"error_id,omitempty" toml:"error_id" yaml:"error_id,omitempty"`
	ErrorDescription               null.String `boil:"error_description" json:"error_description,omitempty" toml:"error_description" yaml:"error_description,omitempty"`
	EncryptedEnvironmentVariables  null.String `boil:"encrypted_environment_variables" json:"encrypted_environment_variables,omitempty" toml:"encrypted_environment_variables" yaml:"encrypted_environment_variables,omitempty"`
	Salt                           null.String `boil:"salt" json:"salt,omitempty" toml:"salt" yaml:"salt,omitempty"`
	StagingMemoryInMB              null.Int    `boil:"staging_memory_in_mb" json:"staging_memory_in_mb,omitempty" toml:"staging_memory_in_mb" yaml:"staging_memory_in_mb,omitempty"`
	StagingDiskInMB                null.Int    `boil:"staging_disk_in_mb" json:"staging_disk_in_mb,omitempty" toml:"staging_disk_in_mb" yaml:"staging_disk_in_mb,omitempty"`
	BuildpackReceiptBuildpack      null.String `boil:"buildpack_receipt_buildpack" json:"buildpack_receipt_buildpack,omitempty" toml:"buildpack_receipt_buildpack" yaml:"buildpack_receipt_buildpack,omitempty"`
	BuildpackReceiptBuildpackGUID  null.String `boil:"buildpack_receipt_buildpack_guid" json:"buildpack_receipt_buildpack_guid,omitempty" toml:"buildpack_receipt_buildpack_guid" yaml:"buildpack_receipt_buildpack_guid,omitempty"`
	BuildpackReceiptDetectOutput   null.String `boil:"buildpack_receipt_detect_output" json:"buildpack_receipt_detect_output,omitempty" toml:"buildpack_receipt_detect_output" yaml:"buildpack_receipt_detect_output,omitempty"`
	DockerReceiptImage             null.String `boil:"docker_receipt_image" json:"docker_receipt_image,omitempty" toml:"docker_receipt_image" yaml:"docker_receipt_image,omitempty"`
	PackageGUID                    null.String `boil:"package_guid" json:"package_guid,omitempty" toml:"package_guid" yaml:"package_guid,omitempty"`
	AppGUID                        null.String `boil:"app_guid" json:"app_guid,omitempty" toml:"app_guid" yaml:"app_guid,omitempty"`
	Sha256Checksum                 null.String `boil:"sha256_checksum" json:"sha256_checksum,omitempty" toml:"sha256_checksum" yaml:"sha256_checksum,omitempty"`
	BuildGUID                      null.String `boil:"build_guid" json:"build_guid,omitempty" toml:"build_guid" yaml:"build_guid,omitempty"`
	DockerReceiptUsername          null.String `boil:"docker_receipt_username" json:"docker_receipt_username,omitempty" toml:"docker_receipt_username" yaml:"docker_receipt_username,omitempty"`
	DockerReceiptPasswordSalt      null.String `boil:"docker_receipt_password_salt" json:"docker_receipt_password_salt,omitempty" toml:"docker_receipt_password_salt" yaml:"docker_receipt_password_salt,omitempty"`
	EncryptedDockerReceiptPassword null.String `boil:"encrypted_docker_receipt_password" json:"encrypted_docker_receipt_password,omitempty" toml:"encrypted_docker_receipt_password" yaml:"encrypted_docker_receipt_password,omitempty"`
	EncryptionKeyLabel             null.String `boil:"encryption_key_label" json:"encryption_key_label,omitempty" toml:"encryption_key_label" yaml:"encryption_key_label,omitempty"`
	EncryptionIterations           int         `boil:"encryption_iterations" json:"encryption_iterations" toml:"encryption_iterations" yaml:"encryption_iterations"`
	Sidecars                       null.String `boil:"sidecars" json:"sidecars,omitempty" toml:"sidecars" yaml:"sidecars,omitempty"`

	R *dropletR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dropletL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DropletColumns = struct {
	ID                             string
	GUID                           string
	CreatedAt                      string
	UpdatedAt                      string
	DropletHash                    string
	ExecutionMetadata              string
	State                          string
	ProcessTypes                   string
	ErrorID                        string
	ErrorDescription               string
	EncryptedEnvironmentVariables  string
	Salt                           string
	StagingMemoryInMB              string
	StagingDiskInMB                string
	BuildpackReceiptBuildpack      string
	BuildpackReceiptBuildpackGUID  string
	BuildpackReceiptDetectOutput   string
	DockerReceiptImage             string
	PackageGUID                    string
	AppGUID                        string
	Sha256Checksum                 string
	BuildGUID                      string
	DockerReceiptUsername          string
	DockerReceiptPasswordSalt      string
	EncryptedDockerReceiptPassword string
	EncryptionKeyLabel             string
	EncryptionIterations           string
	Sidecars                       string
}{
	ID:                             "id",
	GUID:                           "guid",
	CreatedAt:                      "created_at",
	UpdatedAt:                      "updated_at",
	DropletHash:                    "droplet_hash",
	ExecutionMetadata:              "execution_metadata",
	State:                          "state",
	ProcessTypes:                   "process_types",
	ErrorID:                        "error_id",
	ErrorDescription:               "error_description",
	EncryptedEnvironmentVariables:  "encrypted_environment_variables",
	Salt:                           "salt",
	StagingMemoryInMB:              "staging_memory_in_mb",
	StagingDiskInMB:                "staging_disk_in_mb",
	BuildpackReceiptBuildpack:      "buildpack_receipt_buildpack",
	BuildpackReceiptBuildpackGUID:  "buildpack_receipt_buildpack_guid",
	BuildpackReceiptDetectOutput:   "buildpack_receipt_detect_output",
	DockerReceiptImage:             "docker_receipt_image",
	PackageGUID:                    "package_guid",
	AppGUID:                        "app_guid",
	Sha256Checksum:                 "sha256_checksum",
	BuildGUID:                      "build_guid",
	DockerReceiptUsername:          "docker_receipt_username",
	DockerReceiptPasswordSalt:      "docker_receipt_password_salt",
	EncryptedDockerReceiptPassword: "encrypted_docker_receipt_password",
	EncryptionKeyLabel:             "encryption_key_label",
	EncryptionIterations:           "encryption_iterations",
	Sidecars:                       "sidecars",
}

var DropletTableColumns = struct {
	ID                             string
	GUID                           string
	CreatedAt                      string
	UpdatedAt                      string
	DropletHash                    string
	ExecutionMetadata              string
	State                          string
	ProcessTypes                   string
	ErrorID                        string
	ErrorDescription               string
	EncryptedEnvironmentVariables  string
	Salt                           string
	StagingMemoryInMB              string
	StagingDiskInMB                string
	BuildpackReceiptBuildpack      string
	BuildpackReceiptBuildpackGUID  string
	BuildpackReceiptDetectOutput   string
	DockerReceiptImage             string
	PackageGUID                    string
	AppGUID                        string
	Sha256Checksum                 string
	BuildGUID                      string
	DockerReceiptUsername          string
	DockerReceiptPasswordSalt      string
	EncryptedDockerReceiptPassword string
	EncryptionKeyLabel             string
	EncryptionIterations           string
	Sidecars                       string
}{
	ID:                             "droplets.id",
	GUID:                           "droplets.guid",
	CreatedAt:                      "droplets.created_at",
	UpdatedAt:                      "droplets.updated_at",
	DropletHash:                    "droplets.droplet_hash",
	ExecutionMetadata:              "droplets.execution_metadata",
	State:                          "droplets.state",
	ProcessTypes:                   "droplets.process_types",
	ErrorID:                        "droplets.error_id",
	ErrorDescription:               "droplets.error_description",
	EncryptedEnvironmentVariables:  "droplets.encrypted_environment_variables",
	Salt:                           "droplets.salt",
	StagingMemoryInMB:              "droplets.staging_memory_in_mb",
	StagingDiskInMB:                "droplets.staging_disk_in_mb",
	BuildpackReceiptBuildpack:      "droplets.buildpack_receipt_buildpack",
	BuildpackReceiptBuildpackGUID:  "droplets.buildpack_receipt_buildpack_guid",
	BuildpackReceiptDetectOutput:   "droplets.buildpack_receipt_detect_output",
	DockerReceiptImage:             "droplets.docker_receipt_image",
	PackageGUID:                    "droplets.package_guid",
	AppGUID:                        "droplets.app_guid",
	Sha256Checksum:                 "droplets.sha256_checksum",
	BuildGUID:                      "droplets.build_guid",
	DockerReceiptUsername:          "droplets.docker_receipt_username",
	DockerReceiptPasswordSalt:      "droplets.docker_receipt_password_salt",
	EncryptedDockerReceiptPassword: "droplets.encrypted_docker_receipt_password",
	EncryptionKeyLabel:             "droplets.encryption_key_label",
	EncryptionIterations:           "droplets.encryption_iterations",
	Sidecars:                       "droplets.sidecars",
}

// Generated where

var DropletWhere = struct {
	ID                             whereHelperint
	GUID                           whereHelperstring
	CreatedAt                      whereHelpertime_Time
	UpdatedAt                      whereHelpernull_Time
	DropletHash                    whereHelpernull_String
	ExecutionMetadata              whereHelpernull_String
	State                          whereHelperstring
	ProcessTypes                   whereHelpernull_String
	ErrorID                        whereHelpernull_String
	ErrorDescription               whereHelpernull_String
	EncryptedEnvironmentVariables  whereHelpernull_String
	Salt                           whereHelpernull_String
	StagingMemoryInMB              whereHelpernull_Int
	StagingDiskInMB                whereHelpernull_Int
	BuildpackReceiptBuildpack      whereHelpernull_String
	BuildpackReceiptBuildpackGUID  whereHelpernull_String
	BuildpackReceiptDetectOutput   whereHelpernull_String
	DockerReceiptImage             whereHelpernull_String
	PackageGUID                    whereHelpernull_String
	AppGUID                        whereHelpernull_String
	Sha256Checksum                 whereHelpernull_String
	BuildGUID                      whereHelpernull_String
	DockerReceiptUsername          whereHelpernull_String
	DockerReceiptPasswordSalt      whereHelpernull_String
	EncryptedDockerReceiptPassword whereHelpernull_String
	EncryptionKeyLabel             whereHelpernull_String
	EncryptionIterations           whereHelperint
	Sidecars                       whereHelpernull_String
}{
	ID:                             whereHelperint{field: "`droplets`.`id`"},
	GUID:                           whereHelperstring{field: "`droplets`.`guid`"},
	CreatedAt:                      whereHelpertime_Time{field: "`droplets`.`created_at`"},
	UpdatedAt:                      whereHelpernull_Time{field: "`droplets`.`updated_at`"},
	DropletHash:                    whereHelpernull_String{field: "`droplets`.`droplet_hash`"},
	ExecutionMetadata:              whereHelpernull_String{field: "`droplets`.`execution_metadata`"},
	State:                          whereHelperstring{field: "`droplets`.`state`"},
	ProcessTypes:                   whereHelpernull_String{field: "`droplets`.`process_types`"},
	ErrorID:                        whereHelpernull_String{field: "`droplets`.`error_id`"},
	ErrorDescription:               whereHelpernull_String{field: "`droplets`.`error_description`"},
	EncryptedEnvironmentVariables:  whereHelpernull_String{field: "`droplets`.`encrypted_environment_variables`"},
	Salt:                           whereHelpernull_String{field: "`droplets`.`salt`"},
	StagingMemoryInMB:              whereHelpernull_Int{field: "`droplets`.`staging_memory_in_mb`"},
	StagingDiskInMB:                whereHelpernull_Int{field: "`droplets`.`staging_disk_in_mb`"},
	BuildpackReceiptBuildpack:      whereHelpernull_String{field: "`droplets`.`buildpack_receipt_buildpack`"},
	BuildpackReceiptBuildpackGUID:  whereHelpernull_String{field: "`droplets`.`buildpack_receipt_buildpack_guid`"},
	BuildpackReceiptDetectOutput:   whereHelpernull_String{field: "`droplets`.`buildpack_receipt_detect_output`"},
	DockerReceiptImage:             whereHelpernull_String{field: "`droplets`.`docker_receipt_image`"},
	PackageGUID:                    whereHelpernull_String{field: "`droplets`.`package_guid`"},
	AppGUID:                        whereHelpernull_String{field: "`droplets`.`app_guid`"},
	Sha256Checksum:                 whereHelpernull_String{field: "`droplets`.`sha256_checksum`"},
	BuildGUID:                      whereHelpernull_String{field: "`droplets`.`build_guid`"},
	DockerReceiptUsername:          whereHelpernull_String{field: "`droplets`.`docker_receipt_username`"},
	DockerReceiptPasswordSalt:      whereHelpernull_String{field: "`droplets`.`docker_receipt_password_salt`"},
	EncryptedDockerReceiptPassword: whereHelpernull_String{field: "`droplets`.`encrypted_docker_receipt_password`"},
	EncryptionKeyLabel:             whereHelpernull_String{field: "`droplets`.`encryption_key_label`"},
	EncryptionIterations:           whereHelperint{field: "`droplets`.`encryption_iterations`"},
	Sidecars:                       whereHelpernull_String{field: "`droplets`.`sidecars`"},
}

// DropletRels is where relationship names are stored.
var DropletRels = struct {
	App                        string
	ResourceDropletAnnotations string
	ResourceDropletLabels      string
}{
	App:                        "App",
	ResourceDropletAnnotations: "ResourceDropletAnnotations",
	ResourceDropletLabels:      "ResourceDropletLabels",
}

// dropletR is where relationships are stored.
type dropletR struct {
	App                        *App                   `boil:"App" json:"App" toml:"App" yaml:"App"`
	ResourceDropletAnnotations DropletAnnotationSlice `boil:"ResourceDropletAnnotations" json:"ResourceDropletAnnotations" toml:"ResourceDropletAnnotations" yaml:"ResourceDropletAnnotations"`
	ResourceDropletLabels      DropletLabelSlice      `boil:"ResourceDropletLabels" json:"ResourceDropletLabels" toml:"ResourceDropletLabels" yaml:"ResourceDropletLabels"`
}

// NewStruct creates a new relationship struct
func (*dropletR) NewStruct() *dropletR {
	return &dropletR{}
}

// dropletL is where Load methods for each relationship are stored.
type dropletL struct{}

var (
	dropletAllColumns            = []string{"id", "guid", "created_at", "updated_at", "droplet_hash", "execution_metadata", "state", "process_types", "error_id", "error_description", "encrypted_environment_variables", "salt", "staging_memory_in_mb", "staging_disk_in_mb", "buildpack_receipt_buildpack", "buildpack_receipt_buildpack_guid", "buildpack_receipt_detect_output", "docker_receipt_image", "package_guid", "app_guid", "sha256_checksum", "build_guid", "docker_receipt_username", "docker_receipt_password_salt", "encrypted_docker_receipt_password", "encryption_key_label", "encryption_iterations", "sidecars"}
	dropletColumnsWithoutDefault = []string{"guid", "updated_at", "droplet_hash", "execution_metadata", "state", "process_types", "error_id", "error_description", "encrypted_environment_variables", "salt", "staging_memory_in_mb", "staging_disk_in_mb", "buildpack_receipt_buildpack", "buildpack_receipt_buildpack_guid", "buildpack_receipt_detect_output", "docker_receipt_image", "package_guid", "app_guid", "sha256_checksum", "build_guid", "docker_receipt_username", "docker_receipt_password_salt", "encrypted_docker_receipt_password", "encryption_key_label", "sidecars"}
	dropletColumnsWithDefault    = []string{"id", "created_at", "encryption_iterations"}
	dropletPrimaryKeyColumns     = []string{"id"}
)

type (
	// DropletSlice is an alias for a slice of pointers to Droplet.
	// This should almost always be used instead of []Droplet.
	DropletSlice []*Droplet

	DropletQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dropletType                 = reflect.TypeOf(&Droplet{})
	dropletMapping              = queries.MakeStructMapping(dropletType)
	dropletPrimaryKeyMapping, _ = queries.BindMapping(dropletType, dropletMapping, dropletPrimaryKeyColumns)
	dropletInsertCacheMut       sync.RWMutex
	dropletInsertCache          = make(map[string]insertCache)
	dropletUpdateCacheMut       sync.RWMutex
	dropletUpdateCache          = make(map[string]updateCache)
	dropletUpsertCacheMut       sync.RWMutex
	dropletUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

type DropletFinisher interface {
	One(ctx context.Context, exec boil.ContextExecutor) (*Droplet, error)
	Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	All(ctx context.Context, exec boil.ContextExecutor) (DropletSlice, error)
	Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)
}

// One returns a single droplet record from the query.
func (q DropletQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Droplet, error) {
	o := &Droplet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for droplets")
	}

	return o, nil
}

// All returns all Droplet records from the query.
func (q DropletQuery) All(ctx context.Context, exec boil.ContextExecutor) (DropletSlice, error) {
	var o []*Droplet

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Droplet slice")
	}

	return o, nil
}

// Count returns the count of all Droplet records in the query.
func (q DropletQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count droplets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q DropletQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if droplets exists")
	}

	return count > 0, nil
}

// App pointed to by the foreign key.
func (q DropletQuery) App(o *Droplet, mods ...qm.QueryMod) AppQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`guid` = ?", o.AppGUID),
	}

	queryMods = append(queryMods, mods...)

	query := Apps(queryMods...)
	queries.SetFrom(query.Query, "`apps`")

	return query
}

// ResourceDropletAnnotations retrieves all the droplet_annotation's DropletAnnotations with an executor via resource_guid column.
func (q DropletQuery) ResourceDropletAnnotations(o *Droplet, mods ...qm.QueryMod) DropletAnnotationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`droplet_annotations`.`resource_guid`=?", o.GUID),
	)

	query := DropletAnnotations(queryMods...)
	queries.SetFrom(query.Query, "`droplet_annotations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`droplet_annotations`.*"})
	}

	return query
}

// ResourceDropletLabels retrieves all the droplet_label's DropletLabels with an executor via resource_guid column.
func (q DropletQuery) ResourceDropletLabels(o *Droplet, mods ...qm.QueryMod) DropletLabelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`droplet_labels`.`resource_guid`=?", o.GUID),
	)

	query := DropletLabels(queryMods...)
	queries.SetFrom(query.Query, "`droplet_labels`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`droplet_labels`.*"})
	}

	return query
}

// LoadApp allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dropletL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDroplet interface{}, mods queries.Applicator) error {
	var slice []*Droplet
	var object *Droplet

	if singular {
		object = maybeDroplet.(*Droplet)
	} else {
		slice = *maybeDroplet.(*[]*Droplet)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dropletR{}
		}
		if !queries.IsNil(object.AppGUID) {
			args = append(args, object.AppGUID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dropletR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AppGUID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AppGUID) {
				args = append(args, obj.AppGUID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`apps`),
		qm.WhereIn(`apps.guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load App")
	}

	var resultSlice []*App
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice App")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for apps")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for apps")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.App = foreign
		if foreign.R == nil {
			foreign.R = &appR{}
		}
		foreign.R.Droplets = append(foreign.R.Droplets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AppGUID, foreign.GUID) {
				local.R.App = foreign
				if foreign.R == nil {
					foreign.R = &appR{}
				}
				foreign.R.Droplets = append(foreign.R.Droplets, local)
				break
			}
		}
	}

	return nil
}

// LoadResourceDropletAnnotations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dropletL) LoadResourceDropletAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDroplet interface{}, mods queries.Applicator) error {
	var slice []*Droplet
	var object *Droplet

	if singular {
		object = maybeDroplet.(*Droplet)
	} else {
		slice = *maybeDroplet.(*[]*Droplet)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dropletR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dropletR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`droplet_annotations`),
		qm.WhereIn(`droplet_annotations.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load droplet_annotations")
	}

	var resultSlice []*DropletAnnotation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice droplet_annotations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on droplet_annotations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for droplet_annotations")
	}

	if singular {
		object.R.ResourceDropletAnnotations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dropletAnnotationR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceDropletAnnotations = append(local.R.ResourceDropletAnnotations, foreign)
				if foreign.R == nil {
					foreign.R = &dropletAnnotationR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// LoadResourceDropletLabels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dropletL) LoadResourceDropletLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDroplet interface{}, mods queries.Applicator) error {
	var slice []*Droplet
	var object *Droplet

	if singular {
		object = maybeDroplet.(*Droplet)
	} else {
		slice = *maybeDroplet.(*[]*Droplet)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dropletR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dropletR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`droplet_labels`),
		qm.WhereIn(`droplet_labels.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load droplet_labels")
	}

	var resultSlice []*DropletLabel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice droplet_labels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on droplet_labels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for droplet_labels")
	}

	if singular {
		object.R.ResourceDropletLabels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dropletLabelR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceDropletLabels = append(local.R.ResourceDropletLabels, foreign)
				if foreign.R == nil {
					foreign.R = &dropletLabelR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// SetApp of the droplet to the related item.
// Sets o.R.App to related.
// Adds o to related.R.Droplets.
func (q DropletQuery) SetApp(o *Droplet, ctx context.Context, exec boil.ContextExecutor, insert bool, related *App) error {
	var err error
	if insert {
		if err = Apps().Insert(related, ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `droplets` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"app_guid"}),
		strmangle.WhereClause("`", "`", 0, dropletPrimaryKeyColumns),
	)
	values := []interface{}{related.GUID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AppGUID, related.GUID)
	if o.R == nil {
		o.R = &dropletR{
			App: related,
		}
	} else {
		o.R.App = related
	}

	if related.R == nil {
		related.R = &appR{
			Droplets: DropletSlice{o},
		}
	} else {
		related.R.Droplets = append(related.R.Droplets, o)
	}

	return nil
}

// RemoveApp relationship.
// Sets o.R.App to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (q DropletQuery) RemoveApp(o *Droplet, ctx context.Context, exec boil.ContextExecutor, related *App) error {
	var err error

	queries.SetScanner(&o.AppGUID, nil)
	if _, err = q.Update(o, ctx, exec, boil.Whitelist("app_guid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.App = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Droplets {
		if queries.Equal(o.AppGUID, ri.AppGUID) {
			continue
		}

		ln := len(related.R.Droplets)
		if ln > 1 && i < ln-1 {
			related.R.Droplets[i] = related.R.Droplets[ln-1]
		}
		related.R.Droplets = related.R.Droplets[:ln-1]
		break
	}
	return nil
}

// AddResourceDropletAnnotations adds the given related objects to the existing relationships
// of the droplet, optionally inserting them as new records.
// Appends related to o.R.ResourceDropletAnnotations.
// Sets related.R.Resource appropriately.
func (q DropletQuery) AddResourceDropletAnnotations(o *Droplet, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DropletAnnotation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = DropletAnnotations().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `droplet_annotations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"resource_guid"}),
				strmangle.WhereClause("`", "`", 0, dropletAnnotationPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &dropletR{
			ResourceDropletAnnotations: related,
		}
	} else {
		o.R.ResourceDropletAnnotations = append(o.R.ResourceDropletAnnotations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dropletAnnotationR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceDropletAnnotations removes all previously related items of the
// droplet replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceDropletAnnotations accordingly.
// Replaces o.R.ResourceDropletAnnotations with related.
// Sets related.R.Resource's ResourceDropletAnnotations accordingly.
func (q DropletQuery) SetResourceDropletAnnotations(o *Droplet, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DropletAnnotation) error {
	query := "update `droplet_annotations` set `resource_guid` = null where `resource_guid` = ?"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceDropletAnnotations {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceDropletAnnotations = nil
	}
	return q.AddResourceDropletAnnotations(o, ctx, exec, insert, related...)
}

// RemoveResourceDropletAnnotations relationships from objects passed in.
// Removes related items from R.ResourceDropletAnnotations (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (q DropletQuery) RemoveResourceDropletAnnotations(o *Droplet, ctx context.Context, exec boil.ContextExecutor, related ...*DropletAnnotation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = DropletAnnotations().Update(rel, ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceDropletAnnotations {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceDropletAnnotations)
			if ln > 1 && i < ln-1 {
				o.R.ResourceDropletAnnotations[i] = o.R.ResourceDropletAnnotations[ln-1]
			}
			o.R.ResourceDropletAnnotations = o.R.ResourceDropletAnnotations[:ln-1]
			break
		}
	}

	return nil
}

// AddResourceDropletLabels adds the given related objects to the existing relationships
// of the droplet, optionally inserting them as new records.
// Appends related to o.R.ResourceDropletLabels.
// Sets related.R.Resource appropriately.
func (q DropletQuery) AddResourceDropletLabels(o *Droplet, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DropletLabel) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = DropletLabels().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `droplet_labels` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"resource_guid"}),
				strmangle.WhereClause("`", "`", 0, dropletLabelPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &dropletR{
			ResourceDropletLabels: related,
		}
	} else {
		o.R.ResourceDropletLabels = append(o.R.ResourceDropletLabels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dropletLabelR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceDropletLabels removes all previously related items of the
// droplet replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceDropletLabels accordingly.
// Replaces o.R.ResourceDropletLabels with related.
// Sets related.R.Resource's ResourceDropletLabels accordingly.
func (q DropletQuery) SetResourceDropletLabels(o *Droplet, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DropletLabel) error {
	query := "update `droplet_labels` set `resource_guid` = null where `resource_guid` = ?"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceDropletLabels {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceDropletLabels = nil
	}
	return q.AddResourceDropletLabels(o, ctx, exec, insert, related...)
}

// RemoveResourceDropletLabels relationships from objects passed in.
// Removes related items from R.ResourceDropletLabels (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (q DropletQuery) RemoveResourceDropletLabels(o *Droplet, ctx context.Context, exec boil.ContextExecutor, related ...*DropletLabel) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = DropletLabels().Update(rel, ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceDropletLabels {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceDropletLabels)
			if ln > 1 && i < ln-1 {
				o.R.ResourceDropletLabels[i] = o.R.ResourceDropletLabels[ln-1]
			}
			o.R.ResourceDropletLabels = o.R.ResourceDropletLabels[:ln-1]
			break
		}
	}

	return nil
}

// Droplets retrieves all the records using an executor.
func Droplets(mods ...qm.QueryMod) DropletQuery {
	mods = append(mods, qm.From("`droplets`"))
	return DropletQuery{NewQuery(mods...)}
}

type DropletFinder interface {
	FindDroplet(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Droplet, error)
}

// FindDroplet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDroplet(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Droplet, error) {
	dropletObj := &Droplet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `droplets` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, dropletObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from droplets")
	}

	return dropletObj, nil
}

type DropletInserter interface {
	Insert(o *Droplet, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (q DropletQuery) Insert(o *Droplet, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no droplets provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(dropletColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dropletInsertCacheMut.RLock()
	cache, cached := dropletInsertCache[key]
	dropletInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dropletAllColumns,
			dropletColumnsWithDefault,
			dropletColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dropletType, dropletMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dropletType, dropletMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `droplets` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `droplets` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `droplets` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dropletPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into droplets")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dropletMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for droplets")
	}

CacheNoHooks:
	if !cached {
		dropletInsertCacheMut.Lock()
		dropletInsertCache[key] = cache
		dropletInsertCacheMut.Unlock()
	}

	return nil
}

type DropletUpdater interface {
	Update(o *Droplet, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)
	UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
	UpdateAllSlice(o DropletSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
}

// Update uses an executor to update the Droplet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (q DropletQuery) Update(o *Droplet, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	dropletUpdateCacheMut.RLock()
	cache, cached := dropletUpdateCache[key]
	dropletUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dropletAllColumns,
			dropletPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update droplets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `droplets` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dropletPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dropletType, dropletMapping, append(wl, dropletPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update droplets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for droplets")
	}

	if !cached {
		dropletUpdateCacheMut.Lock()
		dropletUpdateCache[key] = cache
		dropletUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q DropletQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for droplets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for droplets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (q DropletQuery) UpdateAllSlice(o DropletSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dropletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `droplets` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dropletPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in droplet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all droplet")
	}
	return rowsAff, nil
}

type DropletDeleter interface {
	Delete(o *Droplet, ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAllSlice(o DropletSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)
}

// Delete deletes a single Droplet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (q DropletQuery) Delete(o *Droplet, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Droplet provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dropletPrimaryKeyMapping)
	sql := "DELETE FROM `droplets` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from droplets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for droplets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q DropletQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dropletQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from droplets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for droplets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (q DropletQuery) DeleteAllSlice(o DropletSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dropletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `droplets` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dropletPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from droplet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for droplets")
	}

	return rowsAff, nil
}

type DropletReloader interface {
	Reload(o *Droplet, ctx context.Context, exec boil.ContextExecutor) error
	ReloadAll(o *DropletSlice, ctx context.Context, exec boil.ContextExecutor) error
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (q DropletQuery) Reload(o *Droplet, ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDroplet(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (q DropletQuery) ReloadAll(o *DropletSlice, ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DropletSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dropletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `droplets`.* FROM `droplets` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dropletPrimaryKeyColumns, len(*o))

	query := queries.Raw(sql, args...)

	err := query.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DropletSlice")
	}

	*o = slice

	return nil
}

// DropletExists checks if the Droplet row exists.
func DropletExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `droplets` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if droplets exists")
	}

	return exists, nil
}

var mySQLDropletUniqueColumns = []string{
	"id",
	"guid",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Droplet) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no droplets provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(dropletColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDropletUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dropletUpsertCacheMut.RLock()
	cache, cached := dropletUpsertCache[key]
	dropletUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dropletAllColumns,
			dropletColumnsWithDefault,
			dropletColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dropletAllColumns,
			dropletPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert droplets, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`droplets`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `droplets` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dropletType, dropletMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dropletType, dropletMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for droplets")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dropletMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dropletType, dropletMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for droplets")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for droplets")
	}

CacheNoHooks:
	if !cached {
		dropletUpsertCacheMut.Lock()
		dropletUpsertCache[key] = cache
		dropletUpsertCacheMut.Unlock()
	}

	return nil
}
