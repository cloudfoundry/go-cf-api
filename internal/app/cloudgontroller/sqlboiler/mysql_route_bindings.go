// +build mysql
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RouteBinding is an object representing the database table.
type RouteBinding struct {
	ID                int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	GUID              string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	CreatedAt         time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	RouteID           null.Int    `boil:"route_id" json:"route_id,omitempty" toml:"route_id" yaml:"route_id,omitempty"`
	ServiceInstanceID null.Int    `boil:"service_instance_id" json:"service_instance_id,omitempty" toml:"service_instance_id" yaml:"service_instance_id,omitempty"`
	RouteServiceURL   null.String `boil:"route_service_url" json:"route_service_url,omitempty" toml:"route_service_url" yaml:"route_service_url,omitempty"`

	R *routeBindingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L routeBindingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RouteBindingColumns = struct {
	ID                string
	GUID              string
	CreatedAt         string
	UpdatedAt         string
	RouteID           string
	ServiceInstanceID string
	RouteServiceURL   string
}{
	ID:                "id",
	GUID:              "guid",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	RouteID:           "route_id",
	ServiceInstanceID: "service_instance_id",
	RouteServiceURL:   "route_service_url",
}

var RouteBindingTableColumns = struct {
	ID                string
	GUID              string
	CreatedAt         string
	UpdatedAt         string
	RouteID           string
	ServiceInstanceID string
	RouteServiceURL   string
}{
	ID:                "route_bindings.id",
	GUID:              "route_bindings.guid",
	CreatedAt:         "route_bindings.created_at",
	UpdatedAt:         "route_bindings.updated_at",
	RouteID:           "route_bindings.route_id",
	ServiceInstanceID: "route_bindings.service_instance_id",
	RouteServiceURL:   "route_bindings.route_service_url",
}

// Generated where

var RouteBindingWhere = struct {
	ID                whereHelperint
	GUID              whereHelperstring
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpernull_Time
	RouteID           whereHelpernull_Int
	ServiceInstanceID whereHelpernull_Int
	RouteServiceURL   whereHelpernull_String
}{
	ID:                whereHelperint{field: "`route_bindings`.`id`"},
	GUID:              whereHelperstring{field: "`route_bindings`.`guid`"},
	CreatedAt:         whereHelpertime_Time{field: "`route_bindings`.`created_at`"},
	UpdatedAt:         whereHelpernull_Time{field: "`route_bindings`.`updated_at`"},
	RouteID:           whereHelpernull_Int{field: "`route_bindings`.`route_id`"},
	ServiceInstanceID: whereHelpernull_Int{field: "`route_bindings`.`service_instance_id`"},
	RouteServiceURL:   whereHelpernull_String{field: "`route_bindings`.`route_service_url`"},
}

// RouteBindingRels is where relationship names are stored.
var RouteBindingRels = struct {
	Route                           string
	ServiceInstance                 string
	RouteBindingOperation           string
	ResourceRouteBindingAnnotations string
	ResourceRouteBindingLabels      string
}{
	Route:                           "Route",
	ServiceInstance:                 "ServiceInstance",
	RouteBindingOperation:           "RouteBindingOperation",
	ResourceRouteBindingAnnotations: "ResourceRouteBindingAnnotations",
	ResourceRouteBindingLabels:      "ResourceRouteBindingLabels",
}

// routeBindingR is where relationships are stored.
type routeBindingR struct {
	Route                           *Route                      `boil:"Route" json:"Route" toml:"Route" yaml:"Route"`
	ServiceInstance                 *ServiceInstance            `boil:"ServiceInstance" json:"ServiceInstance" toml:"ServiceInstance" yaml:"ServiceInstance"`
	RouteBindingOperation           *RouteBindingOperation      `boil:"RouteBindingOperation" json:"RouteBindingOperation" toml:"RouteBindingOperation" yaml:"RouteBindingOperation"`
	ResourceRouteBindingAnnotations RouteBindingAnnotationSlice `boil:"ResourceRouteBindingAnnotations" json:"ResourceRouteBindingAnnotations" toml:"ResourceRouteBindingAnnotations" yaml:"ResourceRouteBindingAnnotations"`
	ResourceRouteBindingLabels      RouteBindingLabelSlice      `boil:"ResourceRouteBindingLabels" json:"ResourceRouteBindingLabels" toml:"ResourceRouteBindingLabels" yaml:"ResourceRouteBindingLabels"`
}

// NewStruct creates a new relationship struct
func (*routeBindingR) NewStruct() *routeBindingR {
	return &routeBindingR{}
}

// routeBindingL is where Load methods for each relationship are stored.
type routeBindingL struct{}

var (
	routeBindingAllColumns            = []string{"id", "guid", "created_at", "updated_at", "route_id", "service_instance_id", "route_service_url"}
	routeBindingColumnsWithoutDefault = []string{"guid", "updated_at", "route_id", "service_instance_id", "route_service_url"}
	routeBindingColumnsWithDefault    = []string{"id", "created_at"}
	routeBindingPrimaryKeyColumns     = []string{"id"}
)

type (
	// RouteBindingSlice is an alias for a slice of pointers to RouteBinding.
	// This should almost always be used instead of []RouteBinding.
	RouteBindingSlice []*RouteBinding

	RouteBindingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	routeBindingType                 = reflect.TypeOf(&RouteBinding{})
	routeBindingMapping              = queries.MakeStructMapping(routeBindingType)
	routeBindingPrimaryKeyMapping, _ = queries.BindMapping(routeBindingType, routeBindingMapping, routeBindingPrimaryKeyColumns)
	routeBindingInsertCacheMut       sync.RWMutex
	routeBindingInsertCache          = make(map[string]insertCache)
	routeBindingUpdateCacheMut       sync.RWMutex
	routeBindingUpdateCache          = make(map[string]updateCache)
	routeBindingUpsertCacheMut       sync.RWMutex
	routeBindingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

type RouteBindingFinisher interface {
	One(ctx context.Context, exec boil.ContextExecutor) (*RouteBinding, error)
	Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	All(ctx context.Context, exec boil.ContextExecutor) (RouteBindingSlice, error)
	Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)
}

// One returns a single routeBinding record from the query.
func (q RouteBindingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RouteBinding, error) {
	o := &RouteBinding{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for route_bindings")
	}

	return o, nil
}

// All returns all RouteBinding records from the query.
func (q RouteBindingQuery) All(ctx context.Context, exec boil.ContextExecutor) (RouteBindingSlice, error) {
	var o []*RouteBinding

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RouteBinding slice")
	}

	return o, nil
}

// Count returns the count of all RouteBinding records in the query.
func (q RouteBindingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count route_bindings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q RouteBindingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if route_bindings exists")
	}

	return count > 0, nil
}

// Route pointed to by the foreign key.
func (q RouteBindingQuery) Route(o *RouteBinding, mods ...qm.QueryMod) RouteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.RouteID),
	}

	queryMods = append(queryMods, mods...)

	query := Routes(queryMods...)
	queries.SetFrom(query.Query, "`routes`")

	return query
}

// ServiceInstance pointed to by the foreign key.
func (q RouteBindingQuery) ServiceInstance(o *RouteBinding, mods ...qm.QueryMod) ServiceInstanceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ServiceInstanceID),
	}

	queryMods = append(queryMods, mods...)

	query := ServiceInstances(queryMods...)
	queries.SetFrom(query.Query, "`service_instances`")

	return query
}

// RouteBindingOperation pointed to by the foreign key.
func (q RouteBindingQuery) RouteBindingOperation(o *RouteBinding, mods ...qm.QueryMod) RouteBindingOperationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`route_binding_id` = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := RouteBindingOperations(queryMods...)
	queries.SetFrom(query.Query, "`route_binding_operations`")

	return query
}

// ResourceRouteBindingAnnotations retrieves all the route_binding_annotation's RouteBindingAnnotations with an executor via resource_guid column.
func (q RouteBindingQuery) ResourceRouteBindingAnnotations(o *RouteBinding, mods ...qm.QueryMod) RouteBindingAnnotationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`route_binding_annotations`.`resource_guid`=?", o.GUID),
	)

	query := RouteBindingAnnotations(queryMods...)
	queries.SetFrom(query.Query, "`route_binding_annotations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`route_binding_annotations`.*"})
	}

	return query
}

// ResourceRouteBindingLabels retrieves all the route_binding_label's RouteBindingLabels with an executor via resource_guid column.
func (q RouteBindingQuery) ResourceRouteBindingLabels(o *RouteBinding, mods ...qm.QueryMod) RouteBindingLabelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`route_binding_labels`.`resource_guid`=?", o.GUID),
	)

	query := RouteBindingLabels(queryMods...)
	queries.SetFrom(query.Query, "`route_binding_labels`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`route_binding_labels`.*"})
	}

	return query
}

// LoadRoute allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (routeBindingL) LoadRoute(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteBinding interface{}, mods queries.Applicator) error {
	var slice []*RouteBinding
	var object *RouteBinding

	if singular {
		object = maybeRouteBinding.(*RouteBinding)
	} else {
		slice = *maybeRouteBinding.(*[]*RouteBinding)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &routeBindingR{}
		}
		if !queries.IsNil(object.RouteID) {
			args = append(args, object.RouteID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &routeBindingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RouteID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RouteID) {
				args = append(args, obj.RouteID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`routes`),
		qm.WhereIn(`routes.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Route")
	}

	var resultSlice []*Route
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Route")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for routes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for routes")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Route = foreign
		if foreign.R == nil {
			foreign.R = &routeR{}
		}
		foreign.R.RouteBindings = append(foreign.R.RouteBindings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RouteID, foreign.ID) {
				local.R.Route = foreign
				if foreign.R == nil {
					foreign.R = &routeR{}
				}
				foreign.R.RouteBindings = append(foreign.R.RouteBindings, local)
				break
			}
		}
	}

	return nil
}

// LoadServiceInstance allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (routeBindingL) LoadServiceInstance(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteBinding interface{}, mods queries.Applicator) error {
	var slice []*RouteBinding
	var object *RouteBinding

	if singular {
		object = maybeRouteBinding.(*RouteBinding)
	} else {
		slice = *maybeRouteBinding.(*[]*RouteBinding)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &routeBindingR{}
		}
		if !queries.IsNil(object.ServiceInstanceID) {
			args = append(args, object.ServiceInstanceID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &routeBindingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ServiceInstanceID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ServiceInstanceID) {
				args = append(args, obj.ServiceInstanceID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`service_instances`),
		qm.WhereIn(`service_instances.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ServiceInstance")
	}

	var resultSlice []*ServiceInstance
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ServiceInstance")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for service_instances")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for service_instances")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServiceInstance = foreign
		if foreign.R == nil {
			foreign.R = &serviceInstanceR{}
		}
		foreign.R.RouteBindings = append(foreign.R.RouteBindings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ServiceInstanceID, foreign.ID) {
				local.R.ServiceInstance = foreign
				if foreign.R == nil {
					foreign.R = &serviceInstanceR{}
				}
				foreign.R.RouteBindings = append(foreign.R.RouteBindings, local)
				break
			}
		}
	}

	return nil
}

// LoadRouteBindingOperation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (routeBindingL) LoadRouteBindingOperation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteBinding interface{}, mods queries.Applicator) error {
	var slice []*RouteBinding
	var object *RouteBinding

	if singular {
		object = maybeRouteBinding.(*RouteBinding)
	} else {
		slice = *maybeRouteBinding.(*[]*RouteBinding)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &routeBindingR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &routeBindingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`route_binding_operations`),
		qm.WhereIn(`route_binding_operations.route_binding_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RouteBindingOperation")
	}

	var resultSlice []*RouteBindingOperation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RouteBindingOperation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for route_binding_operations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for route_binding_operations")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RouteBindingOperation = foreign
		if foreign.R == nil {
			foreign.R = &routeBindingOperationR{}
		}
		foreign.R.RouteBinding = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.RouteBindingID) {
				local.R.RouteBindingOperation = foreign
				if foreign.R == nil {
					foreign.R = &routeBindingOperationR{}
				}
				foreign.R.RouteBinding = local
				break
			}
		}
	}

	return nil
}

// LoadResourceRouteBindingAnnotations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (routeBindingL) LoadResourceRouteBindingAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteBinding interface{}, mods queries.Applicator) error {
	var slice []*RouteBinding
	var object *RouteBinding

	if singular {
		object = maybeRouteBinding.(*RouteBinding)
	} else {
		slice = *maybeRouteBinding.(*[]*RouteBinding)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &routeBindingR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &routeBindingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`route_binding_annotations`),
		qm.WhereIn(`route_binding_annotations.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load route_binding_annotations")
	}

	var resultSlice []*RouteBindingAnnotation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice route_binding_annotations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on route_binding_annotations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for route_binding_annotations")
	}

	if singular {
		object.R.ResourceRouteBindingAnnotations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &routeBindingAnnotationR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceRouteBindingAnnotations = append(local.R.ResourceRouteBindingAnnotations, foreign)
				if foreign.R == nil {
					foreign.R = &routeBindingAnnotationR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// LoadResourceRouteBindingLabels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (routeBindingL) LoadResourceRouteBindingLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRouteBinding interface{}, mods queries.Applicator) error {
	var slice []*RouteBinding
	var object *RouteBinding

	if singular {
		object = maybeRouteBinding.(*RouteBinding)
	} else {
		slice = *maybeRouteBinding.(*[]*RouteBinding)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &routeBindingR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &routeBindingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`route_binding_labels`),
		qm.WhereIn(`route_binding_labels.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load route_binding_labels")
	}

	var resultSlice []*RouteBindingLabel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice route_binding_labels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on route_binding_labels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for route_binding_labels")
	}

	if singular {
		object.R.ResourceRouteBindingLabels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &routeBindingLabelR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceRouteBindingLabels = append(local.R.ResourceRouteBindingLabels, foreign)
				if foreign.R == nil {
					foreign.R = &routeBindingLabelR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// SetRoute of the routeBinding to the related item.
// Sets o.R.Route to related.
// Adds o to related.R.RouteBindings.
func (q RouteBindingQuery) SetRoute(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Route) error {
	var err error
	if insert {
		if err = Routes().Insert(related, ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `route_bindings` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"route_id"}),
		strmangle.WhereClause("`", "`", 0, routeBindingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RouteID, related.ID)
	if o.R == nil {
		o.R = &routeBindingR{
			Route: related,
		}
	} else {
		o.R.Route = related
	}

	if related.R == nil {
		related.R = &routeR{
			RouteBindings: RouteBindingSlice{o},
		}
	} else {
		related.R.RouteBindings = append(related.R.RouteBindings, o)
	}

	return nil
}

// RemoveRoute relationship.
// Sets o.R.Route to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (q RouteBindingQuery) RemoveRoute(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, related *Route) error {
	var err error

	queries.SetScanner(&o.RouteID, nil)
	if _, err = q.Update(o, ctx, exec, boil.Whitelist("route_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Route = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RouteBindings {
		if queries.Equal(o.RouteID, ri.RouteID) {
			continue
		}

		ln := len(related.R.RouteBindings)
		if ln > 1 && i < ln-1 {
			related.R.RouteBindings[i] = related.R.RouteBindings[ln-1]
		}
		related.R.RouteBindings = related.R.RouteBindings[:ln-1]
		break
	}
	return nil
}

// SetServiceInstance of the routeBinding to the related item.
// Sets o.R.ServiceInstance to related.
// Adds o to related.R.RouteBindings.
func (q RouteBindingQuery) SetServiceInstance(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServiceInstance) error {
	var err error
	if insert {
		if err = ServiceInstances().Insert(related, ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `route_bindings` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"service_instance_id"}),
		strmangle.WhereClause("`", "`", 0, routeBindingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ServiceInstanceID, related.ID)
	if o.R == nil {
		o.R = &routeBindingR{
			ServiceInstance: related,
		}
	} else {
		o.R.ServiceInstance = related
	}

	if related.R == nil {
		related.R = &serviceInstanceR{
			RouteBindings: RouteBindingSlice{o},
		}
	} else {
		related.R.RouteBindings = append(related.R.RouteBindings, o)
	}

	return nil
}

// RemoveServiceInstance relationship.
// Sets o.R.ServiceInstance to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (q RouteBindingQuery) RemoveServiceInstance(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, related *ServiceInstance) error {
	var err error

	queries.SetScanner(&o.ServiceInstanceID, nil)
	if _, err = q.Update(o, ctx, exec, boil.Whitelist("service_instance_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ServiceInstance = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RouteBindings {
		if queries.Equal(o.ServiceInstanceID, ri.ServiceInstanceID) {
			continue
		}

		ln := len(related.R.RouteBindings)
		if ln > 1 && i < ln-1 {
			related.R.RouteBindings[i] = related.R.RouteBindings[ln-1]
		}
		related.R.RouteBindings = related.R.RouteBindings[:ln-1]
		break
	}
	return nil
}

// SetRouteBindingOperation of the routeBinding to the related item.
// Sets o.R.RouteBindingOperation to related.
// Adds o to related.R.RouteBinding.
func (q RouteBindingQuery) SetRouteBindingOperation(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related *RouteBindingOperation) error {
	var err error

	if insert {
		queries.Assign(&related.RouteBindingID, o.ID)

		if err = RouteBindingOperations().Insert(related, ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `route_binding_operations` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"route_binding_id"}),
			strmangle.WhereClause("`", "`", 0, routeBindingOperationPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.RouteBindingID, o.ID)
	}

	if o.R == nil {
		o.R = &routeBindingR{
			RouteBindingOperation: related,
		}
	} else {
		o.R.RouteBindingOperation = related
	}

	if related.R == nil {
		related.R = &routeBindingOperationR{
			RouteBinding: o,
		}
	} else {
		related.R.RouteBinding = o
	}
	return nil
}

// RemoveRouteBindingOperation relationship.
// Sets o.R.RouteBindingOperation to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (q RouteBindingQuery) RemoveRouteBindingOperation(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, related *RouteBindingOperation) error {
	var err error

	queries.SetScanner(&related.RouteBindingID, nil)
	if _, err = RouteBindingOperations().Update(related, ctx, exec, boil.Whitelist("route_binding_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.RouteBindingOperation = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.RouteBinding = nil
	return nil
}

// AddResourceRouteBindingAnnotations adds the given related objects to the existing relationships
// of the route_binding, optionally inserting them as new records.
// Appends related to o.R.ResourceRouteBindingAnnotations.
// Sets related.R.Resource appropriately.
func (q RouteBindingQuery) AddResourceRouteBindingAnnotations(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteBindingAnnotation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = RouteBindingAnnotations().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `route_binding_annotations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"resource_guid"}),
				strmangle.WhereClause("`", "`", 0, routeBindingAnnotationPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &routeBindingR{
			ResourceRouteBindingAnnotations: related,
		}
	} else {
		o.R.ResourceRouteBindingAnnotations = append(o.R.ResourceRouteBindingAnnotations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &routeBindingAnnotationR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceRouteBindingAnnotations removes all previously related items of the
// route_binding replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceRouteBindingAnnotations accordingly.
// Replaces o.R.ResourceRouteBindingAnnotations with related.
// Sets related.R.Resource's ResourceRouteBindingAnnotations accordingly.
func (q RouteBindingQuery) SetResourceRouteBindingAnnotations(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteBindingAnnotation) error {
	query := "update `route_binding_annotations` set `resource_guid` = null where `resource_guid` = ?"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceRouteBindingAnnotations {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceRouteBindingAnnotations = nil
	}
	return q.AddResourceRouteBindingAnnotations(o, ctx, exec, insert, related...)
}

// RemoveResourceRouteBindingAnnotations relationships from objects passed in.
// Removes related items from R.ResourceRouteBindingAnnotations (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (q RouteBindingQuery) RemoveResourceRouteBindingAnnotations(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, related ...*RouteBindingAnnotation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = RouteBindingAnnotations().Update(rel, ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceRouteBindingAnnotations {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceRouteBindingAnnotations)
			if ln > 1 && i < ln-1 {
				o.R.ResourceRouteBindingAnnotations[i] = o.R.ResourceRouteBindingAnnotations[ln-1]
			}
			o.R.ResourceRouteBindingAnnotations = o.R.ResourceRouteBindingAnnotations[:ln-1]
			break
		}
	}

	return nil
}

// AddResourceRouteBindingLabels adds the given related objects to the existing relationships
// of the route_binding, optionally inserting them as new records.
// Appends related to o.R.ResourceRouteBindingLabels.
// Sets related.R.Resource appropriately.
func (q RouteBindingQuery) AddResourceRouteBindingLabels(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteBindingLabel) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = RouteBindingLabels().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `route_binding_labels` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"resource_guid"}),
				strmangle.WhereClause("`", "`", 0, routeBindingLabelPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &routeBindingR{
			ResourceRouteBindingLabels: related,
		}
	} else {
		o.R.ResourceRouteBindingLabels = append(o.R.ResourceRouteBindingLabels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &routeBindingLabelR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceRouteBindingLabels removes all previously related items of the
// route_binding replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceRouteBindingLabels accordingly.
// Replaces o.R.ResourceRouteBindingLabels with related.
// Sets related.R.Resource's ResourceRouteBindingLabels accordingly.
func (q RouteBindingQuery) SetResourceRouteBindingLabels(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RouteBindingLabel) error {
	query := "update `route_binding_labels` set `resource_guid` = null where `resource_guid` = ?"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceRouteBindingLabels {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceRouteBindingLabels = nil
	}
	return q.AddResourceRouteBindingLabels(o, ctx, exec, insert, related...)
}

// RemoveResourceRouteBindingLabels relationships from objects passed in.
// Removes related items from R.ResourceRouteBindingLabels (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (q RouteBindingQuery) RemoveResourceRouteBindingLabels(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, related ...*RouteBindingLabel) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = RouteBindingLabels().Update(rel, ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceRouteBindingLabels {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceRouteBindingLabels)
			if ln > 1 && i < ln-1 {
				o.R.ResourceRouteBindingLabels[i] = o.R.ResourceRouteBindingLabels[ln-1]
			}
			o.R.ResourceRouteBindingLabels = o.R.ResourceRouteBindingLabels[:ln-1]
			break
		}
	}

	return nil
}

// RouteBindings retrieves all the records using an executor.
func RouteBindings(mods ...qm.QueryMod) RouteBindingQuery {
	mods = append(mods, qm.From("`route_bindings`"))
	return RouteBindingQuery{NewQuery(mods...)}
}

type RouteBindingFinder interface {
	FindRouteBinding(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RouteBinding, error)
}

// FindRouteBinding retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRouteBinding(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RouteBinding, error) {
	routeBindingObj := &RouteBinding{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `route_bindings` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, routeBindingObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from route_bindings")
	}

	return routeBindingObj, nil
}

type RouteBindingInserter interface {
	Insert(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (q RouteBindingQuery) Insert(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no route_bindings provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(routeBindingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	routeBindingInsertCacheMut.RLock()
	cache, cached := routeBindingInsertCache[key]
	routeBindingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			routeBindingAllColumns,
			routeBindingColumnsWithDefault,
			routeBindingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(routeBindingType, routeBindingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(routeBindingType, routeBindingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `route_bindings` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `route_bindings` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `route_bindings` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, routeBindingPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into route_bindings")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == routeBindingMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for route_bindings")
	}

CacheNoHooks:
	if !cached {
		routeBindingInsertCacheMut.Lock()
		routeBindingInsertCache[key] = cache
		routeBindingInsertCacheMut.Unlock()
	}

	return nil
}

type RouteBindingUpdater interface {
	Update(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)
	UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
	UpdateAllSlice(o RouteBindingSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
}

// Update uses an executor to update the RouteBinding.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (q RouteBindingQuery) Update(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	routeBindingUpdateCacheMut.RLock()
	cache, cached := routeBindingUpdateCache[key]
	routeBindingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			routeBindingAllColumns,
			routeBindingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update route_bindings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `route_bindings` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, routeBindingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(routeBindingType, routeBindingMapping, append(wl, routeBindingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update route_bindings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for route_bindings")
	}

	if !cached {
		routeBindingUpdateCacheMut.Lock()
		routeBindingUpdateCache[key] = cache
		routeBindingUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q RouteBindingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for route_bindings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for route_bindings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (q RouteBindingQuery) UpdateAllSlice(o RouteBindingSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), routeBindingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `route_bindings` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, routeBindingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in routeBinding slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all routeBinding")
	}
	return rowsAff, nil
}

type RouteBindingDeleter interface {
	Delete(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAllSlice(o RouteBindingSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)
}

// Delete deletes a single RouteBinding record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (q RouteBindingQuery) Delete(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RouteBinding provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), routeBindingPrimaryKeyMapping)
	sql := "DELETE FROM `route_bindings` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from route_bindings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for route_bindings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q RouteBindingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no routeBindingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from route_bindings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for route_bindings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (q RouteBindingQuery) DeleteAllSlice(o RouteBindingSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), routeBindingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `route_bindings` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, routeBindingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from routeBinding slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for route_bindings")
	}

	return rowsAff, nil
}

type RouteBindingReloader interface {
	Reload(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor) error
	ReloadAll(o *RouteBindingSlice, ctx context.Context, exec boil.ContextExecutor) error
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (q RouteBindingQuery) Reload(o *RouteBinding, ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRouteBinding(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (q RouteBindingQuery) ReloadAll(o *RouteBindingSlice, ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RouteBindingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), routeBindingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `route_bindings`.* FROM `route_bindings` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, routeBindingPrimaryKeyColumns, len(*o))

	query := queries.Raw(sql, args...)

	err := query.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RouteBindingSlice")
	}

	*o = slice

	return nil
}

// RouteBindingExists checks if the RouteBinding row exists.
func RouteBindingExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `route_bindings` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if route_bindings exists")
	}

	return exists, nil
}

var mySQLRouteBindingUniqueColumns = []string{
	"id",
	"guid",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RouteBinding) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no route_bindings provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(routeBindingColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRouteBindingUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	routeBindingUpsertCacheMut.RLock()
	cache, cached := routeBindingUpsertCache[key]
	routeBindingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			routeBindingAllColumns,
			routeBindingColumnsWithDefault,
			routeBindingColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			routeBindingAllColumns,
			routeBindingPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert route_bindings, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`route_bindings`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `route_bindings` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(routeBindingType, routeBindingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(routeBindingType, routeBindingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for route_bindings")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == routeBindingMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(routeBindingType, routeBindingMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for route_bindings")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for route_bindings")
	}

CacheNoHooks:
	if !cached {
		routeBindingUpsertCacheMut.Lock()
		routeBindingUpsertCache[key] = cache
		routeBindingUpsertCacheMut.Unlock()
	}

	return nil
}
