// +build mysql,db
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testServiceBindings(t *testing.T) {
	t.Parallel()

	query := ServiceBindings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testServiceBindingsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBinding{}
	if err = randomize.Struct(seed, o, serviceBindingDBTypes, true, serviceBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServiceBindings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServiceBindingsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBinding{}
	if err = randomize.Struct(seed, o, serviceBindingDBTypes, true, serviceBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ServiceBindings().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServiceBindings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServiceBindingsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBinding{}
	if err = randomize.Struct(seed, o, serviceBindingDBTypes, true, serviceBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServiceBindingSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServiceBindings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServiceBindingsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBinding{}
	if err = randomize.Struct(seed, o, serviceBindingDBTypes, true, serviceBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ServiceBindingExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ServiceBinding exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ServiceBindingExists to return true, but got false.")
	}
}

func testServiceBindingsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBinding{}
	if err = randomize.Struct(seed, o, serviceBindingDBTypes, true, serviceBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	serviceBindingFound, err := FindServiceBinding(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if serviceBindingFound == nil {
		t.Error("want a record, got nil")
	}
}

func testServiceBindingsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBinding{}
	if err = randomize.Struct(seed, o, serviceBindingDBTypes, true, serviceBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ServiceBindings().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testServiceBindingsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBinding{}
	if err = randomize.Struct(seed, o, serviceBindingDBTypes, true, serviceBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ServiceBindings().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testServiceBindingsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	serviceBindingOne := &ServiceBinding{}
	serviceBindingTwo := &ServiceBinding{}
	if err = randomize.Struct(seed, serviceBindingOne, serviceBindingDBTypes, false, serviceBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}
	if err = randomize.Struct(seed, serviceBindingTwo, serviceBindingDBTypes, false, serviceBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serviceBindingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serviceBindingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServiceBindings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testServiceBindingsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	serviceBindingOne := &ServiceBinding{}
	serviceBindingTwo := &ServiceBinding{}
	if err = randomize.Struct(seed, serviceBindingOne, serviceBindingDBTypes, false, serviceBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}
	if err = randomize.Struct(seed, serviceBindingTwo, serviceBindingDBTypes, false, serviceBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serviceBindingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serviceBindingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServiceBindings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func serviceBindingBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBinding) error {
	*o = ServiceBinding{}
	return nil
}

func serviceBindingAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBinding) error {
	*o = ServiceBinding{}
	return nil
}

func serviceBindingAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBinding) error {
	*o = ServiceBinding{}
	return nil
}

func serviceBindingBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBinding) error {
	*o = ServiceBinding{}
	return nil
}

func serviceBindingAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBinding) error {
	*o = ServiceBinding{}
	return nil
}

func serviceBindingBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBinding) error {
	*o = ServiceBinding{}
	return nil
}

func serviceBindingAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBinding) error {
	*o = ServiceBinding{}
	return nil
}

func serviceBindingBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBinding) error {
	*o = ServiceBinding{}
	return nil
}

func serviceBindingAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBinding) error {
	*o = ServiceBinding{}
	return nil
}

func testServiceBindingsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ServiceBinding{}
	o := &ServiceBinding{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, serviceBindingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ServiceBinding object: %s", err)
	}

	AddServiceBindingHook(boil.BeforeInsertHook, serviceBindingBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	serviceBindingBeforeInsertHooks = []ServiceBindingHook{}

	AddServiceBindingHook(boil.AfterInsertHook, serviceBindingAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	serviceBindingAfterInsertHooks = []ServiceBindingHook{}

	AddServiceBindingHook(boil.AfterSelectHook, serviceBindingAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	serviceBindingAfterSelectHooks = []ServiceBindingHook{}

	AddServiceBindingHook(boil.BeforeUpdateHook, serviceBindingBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	serviceBindingBeforeUpdateHooks = []ServiceBindingHook{}

	AddServiceBindingHook(boil.AfterUpdateHook, serviceBindingAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	serviceBindingAfterUpdateHooks = []ServiceBindingHook{}

	AddServiceBindingHook(boil.BeforeDeleteHook, serviceBindingBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	serviceBindingBeforeDeleteHooks = []ServiceBindingHook{}

	AddServiceBindingHook(boil.AfterDeleteHook, serviceBindingAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	serviceBindingAfterDeleteHooks = []ServiceBindingHook{}

	AddServiceBindingHook(boil.BeforeUpsertHook, serviceBindingBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	serviceBindingBeforeUpsertHooks = []ServiceBindingHook{}

	AddServiceBindingHook(boil.AfterUpsertHook, serviceBindingAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	serviceBindingAfterUpsertHooks = []ServiceBindingHook{}
}

func testServiceBindingsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBinding{}
	if err = randomize.Struct(seed, o, serviceBindingDBTypes, true, serviceBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServiceBindings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServiceBindingsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBinding{}
	if err = randomize.Struct(seed, o, serviceBindingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(serviceBindingColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ServiceBindings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServiceBindingOneToOneServiceBindingOperationUsingServiceBindingOperation(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign ServiceBindingOperation
	var local ServiceBinding

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, serviceBindingOperationDBTypes, true, serviceBindingOperationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBindingOperation struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, serviceBindingDBTypes, true, serviceBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&foreign.ServiceBindingID, local.ID)
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ServiceBindingOperation().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ServiceBindingID, foreign.ServiceBindingID) {
		t.Errorf("want: %v, got %v", foreign.ServiceBindingID, check.ServiceBindingID)
	}

	slice := ServiceBindingSlice{&local}
	if err = local.L.LoadServiceBindingOperation(ctx, tx, false, (*[]*ServiceBinding)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServiceBindingOperation == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ServiceBindingOperation = nil
	if err = local.L.LoadServiceBindingOperation(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServiceBindingOperation == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testServiceBindingOneToOneSetOpServiceBindingOperationUsingServiceBindingOperation(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBinding
	var b, c ServiceBindingOperation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBindingDBTypes, false, strmangle.SetComplement(serviceBindingPrimaryKeyColumns, serviceBindingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serviceBindingOperationDBTypes, false, strmangle.SetComplement(serviceBindingOperationPrimaryKeyColumns, serviceBindingOperationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceBindingOperationDBTypes, false, strmangle.SetComplement(serviceBindingOperationPrimaryKeyColumns, serviceBindingOperationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ServiceBindingOperation{&b, &c} {
		err = a.SetServiceBindingOperation(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ServiceBindingOperation != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.ServiceBinding != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if !queries.Equal(a.ID, x.ServiceBindingID) {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.ServiceBindingID))
		reflect.Indirect(reflect.ValueOf(&x.ServiceBindingID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ID, x.ServiceBindingID) {
			t.Error("foreign key was wrong value", a.ID, x.ServiceBindingID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testServiceBindingOneToOneRemoveOpServiceBindingOperationUsingServiceBindingOperation(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBinding
	var b ServiceBindingOperation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBindingDBTypes, false, strmangle.SetComplement(serviceBindingPrimaryKeyColumns, serviceBindingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serviceBindingOperationDBTypes, false, strmangle.SetComplement(serviceBindingOperationPrimaryKeyColumns, serviceBindingOperationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetServiceBindingOperation(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveServiceBindingOperation(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ServiceBindingOperation().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ServiceBindingOperation != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(b.ServiceBindingID) {
		t.Error("foreign key column should be nil")
	}

	if b.R.ServiceBinding != nil {
		t.Error("failed to remove a from b's relationships")
	}
}

func testServiceBindingToManyResourceServiceBindingAnnotations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBinding
	var b, c ServiceBindingAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBindingDBTypes, true, serviceBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serviceBindingAnnotationDBTypes, false, serviceBindingAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceBindingAnnotationDBTypes, false, serviceBindingAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceServiceBindingAnnotations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ServiceBindingSlice{&a}
	if err = a.L.LoadResourceServiceBindingAnnotations(ctx, tx, false, (*[]*ServiceBinding)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceServiceBindingAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceServiceBindingAnnotations = nil
	if err = a.L.LoadResourceServiceBindingAnnotations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceServiceBindingAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testServiceBindingToManyResourceServiceBindingLabels(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBinding
	var b, c ServiceBindingLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBindingDBTypes, true, serviceBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serviceBindingLabelDBTypes, false, serviceBindingLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceBindingLabelDBTypes, false, serviceBindingLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceServiceBindingLabels().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ServiceBindingSlice{&a}
	if err = a.L.LoadResourceServiceBindingLabels(ctx, tx, false, (*[]*ServiceBinding)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceServiceBindingLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceServiceBindingLabels = nil
	if err = a.L.LoadResourceServiceBindingLabels(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceServiceBindingLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testServiceBindingToManyAddOpResourceServiceBindingAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBinding
	var b, c, d, e ServiceBindingAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBindingDBTypes, false, strmangle.SetComplement(serviceBindingPrimaryKeyColumns, serviceBindingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBindingAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBindingAnnotationDBTypes, false, strmangle.SetComplement(serviceBindingAnnotationPrimaryKeyColumns, serviceBindingAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServiceBindingAnnotation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceServiceBindingAnnotations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceServiceBindingAnnotations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceServiceBindingAnnotations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceServiceBindingAnnotations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testServiceBindingToManySetOpResourceServiceBindingAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBinding
	var b, c, d, e ServiceBindingAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBindingDBTypes, false, strmangle.SetComplement(serviceBindingPrimaryKeyColumns, serviceBindingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBindingAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBindingAnnotationDBTypes, false, strmangle.SetComplement(serviceBindingAnnotationPrimaryKeyColumns, serviceBindingAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceServiceBindingAnnotations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceServiceBindingAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceServiceBindingAnnotations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceServiceBindingAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceServiceBindingAnnotations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceServiceBindingAnnotations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testServiceBindingToManyRemoveOpResourceServiceBindingAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBinding
	var b, c, d, e ServiceBindingAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBindingDBTypes, false, strmangle.SetComplement(serviceBindingPrimaryKeyColumns, serviceBindingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBindingAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBindingAnnotationDBTypes, false, strmangle.SetComplement(serviceBindingAnnotationPrimaryKeyColumns, serviceBindingAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceServiceBindingAnnotations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceServiceBindingAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceServiceBindingAnnotations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceServiceBindingAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceServiceBindingAnnotations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceServiceBindingAnnotations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceServiceBindingAnnotations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testServiceBindingToManyAddOpResourceServiceBindingLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBinding
	var b, c, d, e ServiceBindingLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBindingDBTypes, false, strmangle.SetComplement(serviceBindingPrimaryKeyColumns, serviceBindingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBindingLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBindingLabelDBTypes, false, strmangle.SetComplement(serviceBindingLabelPrimaryKeyColumns, serviceBindingLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServiceBindingLabel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceServiceBindingLabels(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceServiceBindingLabels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceServiceBindingLabels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceServiceBindingLabels().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testServiceBindingToManySetOpResourceServiceBindingLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBinding
	var b, c, d, e ServiceBindingLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBindingDBTypes, false, strmangle.SetComplement(serviceBindingPrimaryKeyColumns, serviceBindingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBindingLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBindingLabelDBTypes, false, strmangle.SetComplement(serviceBindingLabelPrimaryKeyColumns, serviceBindingLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceServiceBindingLabels(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceServiceBindingLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceServiceBindingLabels(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceServiceBindingLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceServiceBindingLabels[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceServiceBindingLabels[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testServiceBindingToManyRemoveOpResourceServiceBindingLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBinding
	var b, c, d, e ServiceBindingLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBindingDBTypes, false, strmangle.SetComplement(serviceBindingPrimaryKeyColumns, serviceBindingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBindingLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBindingLabelDBTypes, false, strmangle.SetComplement(serviceBindingLabelPrimaryKeyColumns, serviceBindingLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceServiceBindingLabels(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceServiceBindingLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceServiceBindingLabels(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceServiceBindingLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceServiceBindingLabels) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceServiceBindingLabels[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceServiceBindingLabels[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testServiceBindingToOneAppUsingApp(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ServiceBinding
	var foreign App

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, serviceBindingDBTypes, false, serviceBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, appDBTypes, false, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AppGUID = foreign.GUID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.App().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.GUID != foreign.GUID {
		t.Errorf("want: %v, got %v", foreign.GUID, check.GUID)
	}

	slice := ServiceBindingSlice{&local}
	if err = local.L.LoadApp(ctx, tx, false, (*[]*ServiceBinding)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.App == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.App = nil
	if err = local.L.LoadApp(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.App == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testServiceBindingToOneServiceInstanceUsingServiceInstance(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ServiceBinding
	var foreign ServiceInstance

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, serviceBindingDBTypes, false, serviceBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, serviceInstanceDBTypes, false, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ServiceInstanceGUID = foreign.GUID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ServiceInstance().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.GUID != foreign.GUID {
		t.Errorf("want: %v, got %v", foreign.GUID, check.GUID)
	}

	slice := ServiceBindingSlice{&local}
	if err = local.L.LoadServiceInstance(ctx, tx, false, (*[]*ServiceBinding)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServiceInstance == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ServiceInstance = nil
	if err = local.L.LoadServiceInstance(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServiceInstance == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testServiceBindingToOneSetOpAppUsingApp(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBinding
	var b, c App

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBindingDBTypes, false, strmangle.SetComplement(serviceBindingPrimaryKeyColumns, serviceBindingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*App{&b, &c} {
		err = a.SetApp(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.App != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ServiceBindings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AppGUID != x.GUID {
			t.Error("foreign key was wrong value", a.AppGUID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AppGUID))
		reflect.Indirect(reflect.ValueOf(&a.AppGUID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AppGUID != x.GUID {
			t.Error("foreign key was wrong value", a.AppGUID, x.GUID)
		}
	}
}
func testServiceBindingToOneSetOpServiceInstanceUsingServiceInstance(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBinding
	var b, c ServiceInstance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBindingDBTypes, false, strmangle.SetComplement(serviceBindingPrimaryKeyColumns, serviceBindingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ServiceInstance{&b, &c} {
		err = a.SetServiceInstance(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ServiceInstance != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ServiceBindings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ServiceInstanceGUID != x.GUID {
			t.Error("foreign key was wrong value", a.ServiceInstanceGUID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ServiceInstanceGUID))
		reflect.Indirect(reflect.ValueOf(&a.ServiceInstanceGUID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ServiceInstanceGUID != x.GUID {
			t.Error("foreign key was wrong value", a.ServiceInstanceGUID, x.GUID)
		}
	}
}

func testServiceBindingsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBinding{}
	if err = randomize.Struct(seed, o, serviceBindingDBTypes, true, serviceBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServiceBindingsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBinding{}
	if err = randomize.Struct(seed, o, serviceBindingDBTypes, true, serviceBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServiceBindingSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServiceBindingsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBinding{}
	if err = randomize.Struct(seed, o, serviceBindingDBTypes, true, serviceBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServiceBindings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	serviceBindingDBTypes = map[string]string{`ID`: `int`, `GUID`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `Credentials`: `text`, `Salt`: `varchar`, `SyslogDrainURL`: `text`, `VolumeMounts`: `text`, `VolumeMountsSalt`: `varchar`, `AppGUID`: `varchar`, `ServiceInstanceGUID`: `varchar`, `Type`: `varchar`, `Name`: `varchar`, `EncryptionKeyLabel`: `varchar`, `EncryptionIterations`: `int`}
	_                     = bytes.MinRead
)

func testServiceBindingsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(serviceBindingPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(serviceBindingAllColumns) == len(serviceBindingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBinding{}
	if err = randomize.Struct(seed, o, serviceBindingDBTypes, true, serviceBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServiceBindings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serviceBindingDBTypes, true, serviceBindingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testServiceBindingsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(serviceBindingAllColumns) == len(serviceBindingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBinding{}
	if err = randomize.Struct(seed, o, serviceBindingDBTypes, true, serviceBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServiceBindings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serviceBindingDBTypes, true, serviceBindingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(serviceBindingAllColumns, serviceBindingPrimaryKeyColumns) {
		fields = serviceBindingAllColumns
	} else {
		fields = strmangle.SetComplement(
			serviceBindingAllColumns,
			serviceBindingPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ServiceBindingSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testServiceBindingsUpsert(t *testing.T) {
	t.Parallel()

	if len(serviceBindingAllColumns) == len(serviceBindingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLServiceBindingUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ServiceBinding{}
	if err = randomize.Struct(seed, &o, serviceBindingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServiceBinding: %s", err)
	}

	count, err := ServiceBindings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, serviceBindingDBTypes, false, serviceBindingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServiceBinding struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServiceBinding: %s", err)
	}

	count, err = ServiceBindings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
