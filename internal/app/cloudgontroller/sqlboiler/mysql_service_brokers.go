// +build mysql
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ServiceBroker is an object representing the database table.
type ServiceBroker struct {
	ID                   int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	GUID                 string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	CreatedAt            time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt            null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Name                 string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	BrokerURL            string      `boil:"broker_url" json:"broker_url" toml:"broker_url" yaml:"broker_url"`
	AuthPassword         string      `boil:"auth_password" json:"auth_password" toml:"auth_password" yaml:"auth_password"`
	Salt                 null.String `boil:"salt" json:"salt,omitempty" toml:"salt" yaml:"salt,omitempty"`
	AuthUsername         null.String `boil:"auth_username" json:"auth_username,omitempty" toml:"auth_username" yaml:"auth_username,omitempty"`
	SpaceID              null.Int    `boil:"space_id" json:"space_id,omitempty" toml:"space_id" yaml:"space_id,omitempty"`
	EncryptionKeyLabel   null.String `boil:"encryption_key_label" json:"encryption_key_label,omitempty" toml:"encryption_key_label" yaml:"encryption_key_label,omitempty"`
	EncryptionIterations int         `boil:"encryption_iterations" json:"encryption_iterations" toml:"encryption_iterations" yaml:"encryption_iterations"`
	State                string      `boil:"state" json:"state" toml:"state" yaml:"state"`

	R *serviceBrokerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L serviceBrokerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ServiceBrokerColumns = struct {
	ID                   string
	GUID                 string
	CreatedAt            string
	UpdatedAt            string
	Name                 string
	BrokerURL            string
	AuthPassword         string
	Salt                 string
	AuthUsername         string
	SpaceID              string
	EncryptionKeyLabel   string
	EncryptionIterations string
	State                string
}{
	ID:                   "id",
	GUID:                 "guid",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
	Name:                 "name",
	BrokerURL:            "broker_url",
	AuthPassword:         "auth_password",
	Salt:                 "salt",
	AuthUsername:         "auth_username",
	SpaceID:              "space_id",
	EncryptionKeyLabel:   "encryption_key_label",
	EncryptionIterations: "encryption_iterations",
	State:                "state",
}

var ServiceBrokerTableColumns = struct {
	ID                   string
	GUID                 string
	CreatedAt            string
	UpdatedAt            string
	Name                 string
	BrokerURL            string
	AuthPassword         string
	Salt                 string
	AuthUsername         string
	SpaceID              string
	EncryptionKeyLabel   string
	EncryptionIterations string
	State                string
}{
	ID:                   "service_brokers.id",
	GUID:                 "service_brokers.guid",
	CreatedAt:            "service_brokers.created_at",
	UpdatedAt:            "service_brokers.updated_at",
	Name:                 "service_brokers.name",
	BrokerURL:            "service_brokers.broker_url",
	AuthPassword:         "service_brokers.auth_password",
	Salt:                 "service_brokers.salt",
	AuthUsername:         "service_brokers.auth_username",
	SpaceID:              "service_brokers.space_id",
	EncryptionKeyLabel:   "service_brokers.encryption_key_label",
	EncryptionIterations: "service_brokers.encryption_iterations",
	State:                "service_brokers.state",
}

// Generated where

var ServiceBrokerWhere = struct {
	ID                   whereHelperint
	GUID                 whereHelperstring
	CreatedAt            whereHelpertime_Time
	UpdatedAt            whereHelpernull_Time
	Name                 whereHelperstring
	BrokerURL            whereHelperstring
	AuthPassword         whereHelperstring
	Salt                 whereHelpernull_String
	AuthUsername         whereHelpernull_String
	SpaceID              whereHelpernull_Int
	EncryptionKeyLabel   whereHelpernull_String
	EncryptionIterations whereHelperint
	State                whereHelperstring
}{
	ID:                   whereHelperint{field: "`service_brokers`.`id`"},
	GUID:                 whereHelperstring{field: "`service_brokers`.`guid`"},
	CreatedAt:            whereHelpertime_Time{field: "`service_brokers`.`created_at`"},
	UpdatedAt:            whereHelpernull_Time{field: "`service_brokers`.`updated_at`"},
	Name:                 whereHelperstring{field: "`service_brokers`.`name`"},
	BrokerURL:            whereHelperstring{field: "`service_brokers`.`broker_url`"},
	AuthPassword:         whereHelperstring{field: "`service_brokers`.`auth_password`"},
	Salt:                 whereHelpernull_String{field: "`service_brokers`.`salt`"},
	AuthUsername:         whereHelpernull_String{field: "`service_brokers`.`auth_username`"},
	SpaceID:              whereHelpernull_Int{field: "`service_brokers`.`space_id`"},
	EncryptionKeyLabel:   whereHelpernull_String{field: "`service_brokers`.`encryption_key_label`"},
	EncryptionIterations: whereHelperint{field: "`service_brokers`.`encryption_iterations`"},
	State:                whereHelperstring{field: "`service_brokers`.`state`"},
}

// ServiceBrokerRels is where relationship names are stored.
var ServiceBrokerRels = struct {
	Space                                      string
	ResourceServiceBrokerAnnotations           string
	ResourceServiceBrokerLabels                string
	FKServiceBrokerServiceBrokerUpdateRequests string
	Services                                   string
}{
	Space:                            "Space",
	ResourceServiceBrokerAnnotations: "ResourceServiceBrokerAnnotations",
	ResourceServiceBrokerLabels:      "ResourceServiceBrokerLabels",
	FKServiceBrokerServiceBrokerUpdateRequests: "FKServiceBrokerServiceBrokerUpdateRequests",
	Services: "Services",
}

// serviceBrokerR is where relationships are stored.
type serviceBrokerR struct {
	Space                                      *Space                          `boil:"Space" json:"Space" toml:"Space" yaml:"Space"`
	ResourceServiceBrokerAnnotations           ServiceBrokerAnnotationSlice    `boil:"ResourceServiceBrokerAnnotations" json:"ResourceServiceBrokerAnnotations" toml:"ResourceServiceBrokerAnnotations" yaml:"ResourceServiceBrokerAnnotations"`
	ResourceServiceBrokerLabels                ServiceBrokerLabelSlice         `boil:"ResourceServiceBrokerLabels" json:"ResourceServiceBrokerLabels" toml:"ResourceServiceBrokerLabels" yaml:"ResourceServiceBrokerLabels"`
	FKServiceBrokerServiceBrokerUpdateRequests ServiceBrokerUpdateRequestSlice `boil:"FKServiceBrokerServiceBrokerUpdateRequests" json:"FKServiceBrokerServiceBrokerUpdateRequests" toml:"FKServiceBrokerServiceBrokerUpdateRequests" yaml:"FKServiceBrokerServiceBrokerUpdateRequests"`
	Services                                   ServiceSlice                    `boil:"Services" json:"Services" toml:"Services" yaml:"Services"`
}

// NewStruct creates a new relationship struct
func (*serviceBrokerR) NewStruct() *serviceBrokerR {
	return &serviceBrokerR{}
}

// serviceBrokerL is where Load methods for each relationship are stored.
type serviceBrokerL struct{}

var (
	serviceBrokerAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "broker_url", "auth_password", "salt", "auth_username", "space_id", "encryption_key_label", "encryption_iterations", "state"}
	serviceBrokerColumnsWithoutDefault = []string{"guid", "updated_at", "name", "broker_url", "auth_password", "salt", "auth_username", "space_id", "encryption_key_label", "state"}
	serviceBrokerColumnsWithDefault    = []string{"id", "created_at", "encryption_iterations"}
	serviceBrokerPrimaryKeyColumns     = []string{"id"}
)

type (
	// ServiceBrokerSlice is an alias for a slice of pointers to ServiceBroker.
	// This should almost always be used instead of []ServiceBroker.
	ServiceBrokerSlice []*ServiceBroker

	serviceBrokerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	serviceBrokerType                 = reflect.TypeOf(&ServiceBroker{})
	serviceBrokerMapping              = queries.MakeStructMapping(serviceBrokerType)
	serviceBrokerPrimaryKeyMapping, _ = queries.BindMapping(serviceBrokerType, serviceBrokerMapping, serviceBrokerPrimaryKeyColumns)
	serviceBrokerInsertCacheMut       sync.RWMutex
	serviceBrokerInsertCache          = make(map[string]insertCache)
	serviceBrokerUpdateCacheMut       sync.RWMutex
	serviceBrokerUpdateCache          = make(map[string]updateCache)
	serviceBrokerUpsertCacheMut       sync.RWMutex
	serviceBrokerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

type ServiceBrokerFinisher interface {
	One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBroker, error)
	Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	All(ctx context.Context, exec boil.ContextExecutor) (ServiceBrokerSlice, error)
	Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)
}

// One returns a single serviceBroker record from the query.
func (q serviceBrokerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceBroker, error) {
	o := &ServiceBroker{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for service_brokers")
	}

	return o, nil
}

// All returns all ServiceBroker records from the query.
func (q serviceBrokerQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceBrokerSlice, error) {
	var o []*ServiceBroker

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ServiceBroker slice")
	}

	return o, nil
}

// Count returns the count of all ServiceBroker records in the query.
func (q serviceBrokerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count service_brokers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q serviceBrokerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if service_brokers exists")
	}

	return count > 0, nil
}

// Space pointed to by the foreign key.
func (q serviceBrokerQuery) Space(o *ServiceBroker, mods ...qm.QueryMod) spaceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.SpaceID),
	}

	queryMods = append(queryMods, mods...)

	query := Spaces(queryMods...)
	queries.SetFrom(query.Query, "`spaces`")

	return query
}

// ResourceServiceBrokerAnnotations retrieves all the service_broker_annotation's ServiceBrokerAnnotations with an executor via resource_guid column.
func (q serviceBrokerQuery) ResourceServiceBrokerAnnotations(o *ServiceBroker, mods ...qm.QueryMod) serviceBrokerAnnotationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`service_broker_annotations`.`resource_guid`=?", o.GUID),
	)

	query := ServiceBrokerAnnotations(queryMods...)
	queries.SetFrom(query.Query, "`service_broker_annotations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`service_broker_annotations`.*"})
	}

	return query
}

// ResourceServiceBrokerLabels retrieves all the service_broker_label's ServiceBrokerLabels with an executor via resource_guid column.
func (q serviceBrokerQuery) ResourceServiceBrokerLabels(o *ServiceBroker, mods ...qm.QueryMod) serviceBrokerLabelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`service_broker_labels`.`resource_guid`=?", o.GUID),
	)

	query := ServiceBrokerLabels(queryMods...)
	queries.SetFrom(query.Query, "`service_broker_labels`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`service_broker_labels`.*"})
	}

	return query
}

// FKServiceBrokerServiceBrokerUpdateRequests retrieves all the service_broker_update_request's ServiceBrokerUpdateRequests with an executor via fk_service_brokers_id column.
func (q serviceBrokerQuery) FKServiceBrokerServiceBrokerUpdateRequests(o *ServiceBroker, mods ...qm.QueryMod) serviceBrokerUpdateRequestQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`service_broker_update_requests`.`fk_service_brokers_id`=?", o.ID),
	)

	query := ServiceBrokerUpdateRequests(queryMods...)
	queries.SetFrom(query.Query, "`service_broker_update_requests`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`service_broker_update_requests`.*"})
	}

	return query
}

// Services retrieves all the service's Services with an executor.
func (q serviceBrokerQuery) Services(o *ServiceBroker, mods ...qm.QueryMod) serviceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`services`.`service_broker_id`=?", o.ID),
	)

	query := Services(queryMods...)
	queries.SetFrom(query.Query, "`services`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`services`.*"})
	}

	return query
}

// LoadSpace allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (serviceBrokerL) LoadSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBroker interface{}, mods queries.Applicator) error {
	var slice []*ServiceBroker
	var object *ServiceBroker

	if singular {
		object = maybeServiceBroker.(*ServiceBroker)
	} else {
		slice = *maybeServiceBroker.(*[]*ServiceBroker)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serviceBrokerR{}
		}
		if !queries.IsNil(object.SpaceID) {
			args = append(args, object.SpaceID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serviceBrokerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SpaceID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SpaceID) {
				args = append(args, obj.SpaceID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`spaces`),
		qm.WhereIn(`spaces.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Space")
	}

	var resultSlice []*Space
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Space")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for spaces")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for spaces")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Space = foreign
		if foreign.R == nil {
			foreign.R = &spaceR{}
		}
		foreign.R.ServiceBrokers = append(foreign.R.ServiceBrokers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SpaceID, foreign.ID) {
				local.R.Space = foreign
				if foreign.R == nil {
					foreign.R = &spaceR{}
				}
				foreign.R.ServiceBrokers = append(foreign.R.ServiceBrokers, local)
				break
			}
		}
	}

	return nil
}

// LoadResourceServiceBrokerAnnotations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (serviceBrokerL) LoadResourceServiceBrokerAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBroker interface{}, mods queries.Applicator) error {
	var slice []*ServiceBroker
	var object *ServiceBroker

	if singular {
		object = maybeServiceBroker.(*ServiceBroker)
	} else {
		slice = *maybeServiceBroker.(*[]*ServiceBroker)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serviceBrokerR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serviceBrokerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`service_broker_annotations`),
		qm.WhereIn(`service_broker_annotations.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load service_broker_annotations")
	}

	var resultSlice []*ServiceBrokerAnnotation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice service_broker_annotations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on service_broker_annotations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for service_broker_annotations")
	}

	if singular {
		object.R.ResourceServiceBrokerAnnotations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &serviceBrokerAnnotationR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceServiceBrokerAnnotations = append(local.R.ResourceServiceBrokerAnnotations, foreign)
				if foreign.R == nil {
					foreign.R = &serviceBrokerAnnotationR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// LoadResourceServiceBrokerLabels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (serviceBrokerL) LoadResourceServiceBrokerLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBroker interface{}, mods queries.Applicator) error {
	var slice []*ServiceBroker
	var object *ServiceBroker

	if singular {
		object = maybeServiceBroker.(*ServiceBroker)
	} else {
		slice = *maybeServiceBroker.(*[]*ServiceBroker)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serviceBrokerR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serviceBrokerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`service_broker_labels`),
		qm.WhereIn(`service_broker_labels.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load service_broker_labels")
	}

	var resultSlice []*ServiceBrokerLabel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice service_broker_labels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on service_broker_labels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for service_broker_labels")
	}

	if singular {
		object.R.ResourceServiceBrokerLabels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &serviceBrokerLabelR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceServiceBrokerLabels = append(local.R.ResourceServiceBrokerLabels, foreign)
				if foreign.R == nil {
					foreign.R = &serviceBrokerLabelR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// LoadFKServiceBrokerServiceBrokerUpdateRequests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (serviceBrokerL) LoadFKServiceBrokerServiceBrokerUpdateRequests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBroker interface{}, mods queries.Applicator) error {
	var slice []*ServiceBroker
	var object *ServiceBroker

	if singular {
		object = maybeServiceBroker.(*ServiceBroker)
	} else {
		slice = *maybeServiceBroker.(*[]*ServiceBroker)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serviceBrokerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serviceBrokerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`service_broker_update_requests`),
		qm.WhereIn(`service_broker_update_requests.fk_service_brokers_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load service_broker_update_requests")
	}

	var resultSlice []*ServiceBrokerUpdateRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice service_broker_update_requests")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on service_broker_update_requests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for service_broker_update_requests")
	}

	if singular {
		object.R.FKServiceBrokerServiceBrokerUpdateRequests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &serviceBrokerUpdateRequestR{}
			}
			foreign.R.FKServiceBroker = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.FKServiceBrokersID) {
				local.R.FKServiceBrokerServiceBrokerUpdateRequests = append(local.R.FKServiceBrokerServiceBrokerUpdateRequests, foreign)
				if foreign.R == nil {
					foreign.R = &serviceBrokerUpdateRequestR{}
				}
				foreign.R.FKServiceBroker = local
				break
			}
		}
	}

	return nil
}

// LoadServices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (serviceBrokerL) LoadServices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServiceBroker interface{}, mods queries.Applicator) error {
	var slice []*ServiceBroker
	var object *ServiceBroker

	if singular {
		object = maybeServiceBroker.(*ServiceBroker)
	} else {
		slice = *maybeServiceBroker.(*[]*ServiceBroker)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serviceBrokerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serviceBrokerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`services`),
		qm.WhereIn(`services.service_broker_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load services")
	}

	var resultSlice []*Service
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice services")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on services")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for services")
	}

	if singular {
		object.R.Services = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &serviceR{}
			}
			foreign.R.ServiceBroker = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ServiceBrokerID) {
				local.R.Services = append(local.R.Services, foreign)
				if foreign.R == nil {
					foreign.R = &serviceR{}
				}
				foreign.R.ServiceBroker = local
				break
			}
		}
	}

	return nil
}

// SetSpace of the serviceBroker to the related item.
// Sets o.R.Space to related.
// Adds o to related.R.ServiceBrokers.
func (q serviceBrokerQuery) SetSpace(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Space) error {
	var err error
	if insert {
		if err = Spaces().Insert(related, ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `service_brokers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"space_id"}),
		strmangle.WhereClause("`", "`", 0, serviceBrokerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SpaceID, related.ID)
	if o.R == nil {
		o.R = &serviceBrokerR{
			Space: related,
		}
	} else {
		o.R.Space = related
	}

	if related.R == nil {
		related.R = &spaceR{
			ServiceBrokers: ServiceBrokerSlice{o},
		}
	} else {
		related.R.ServiceBrokers = append(related.R.ServiceBrokers, o)
	}

	return nil
}

// RemoveSpace relationship.
// Sets o.R.Space to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (q serviceBrokerQuery) RemoveSpace(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, related *Space) error {
	var err error

	queries.SetScanner(&o.SpaceID, nil)
	if _, err = q.Update(o, ctx, exec, boil.Whitelist("space_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Space = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ServiceBrokers {
		if queries.Equal(o.SpaceID, ri.SpaceID) {
			continue
		}

		ln := len(related.R.ServiceBrokers)
		if ln > 1 && i < ln-1 {
			related.R.ServiceBrokers[i] = related.R.ServiceBrokers[ln-1]
		}
		related.R.ServiceBrokers = related.R.ServiceBrokers[:ln-1]
		break
	}
	return nil
}

// AddResourceServiceBrokerAnnotations adds the given related objects to the existing relationships
// of the service_broker, optionally inserting them as new records.
// Appends related to o.R.ResourceServiceBrokerAnnotations.
// Sets related.R.Resource appropriately.
func (q serviceBrokerQuery) AddResourceServiceBrokerAnnotations(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBrokerAnnotation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = ServiceBrokerAnnotations().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `service_broker_annotations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"resource_guid"}),
				strmangle.WhereClause("`", "`", 0, serviceBrokerAnnotationPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &serviceBrokerR{
			ResourceServiceBrokerAnnotations: related,
		}
	} else {
		o.R.ResourceServiceBrokerAnnotations = append(o.R.ResourceServiceBrokerAnnotations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &serviceBrokerAnnotationR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceServiceBrokerAnnotations removes all previously related items of the
// service_broker replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceServiceBrokerAnnotations accordingly.
// Replaces o.R.ResourceServiceBrokerAnnotations with related.
// Sets related.R.Resource's ResourceServiceBrokerAnnotations accordingly.
func (q serviceBrokerQuery) SetResourceServiceBrokerAnnotations(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBrokerAnnotation) error {
	query := "update `service_broker_annotations` set `resource_guid` = null where `resource_guid` = ?"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceServiceBrokerAnnotations {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceServiceBrokerAnnotations = nil
	}
	return q.AddResourceServiceBrokerAnnotations(o, ctx, exec, insert, related...)
}

// RemoveResourceServiceBrokerAnnotations relationships from objects passed in.
// Removes related items from R.ResourceServiceBrokerAnnotations (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (q serviceBrokerQuery) RemoveResourceServiceBrokerAnnotations(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, related ...*ServiceBrokerAnnotation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = ServiceBrokerAnnotations().Update(rel, ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceServiceBrokerAnnotations {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceServiceBrokerAnnotations)
			if ln > 1 && i < ln-1 {
				o.R.ResourceServiceBrokerAnnotations[i] = o.R.ResourceServiceBrokerAnnotations[ln-1]
			}
			o.R.ResourceServiceBrokerAnnotations = o.R.ResourceServiceBrokerAnnotations[:ln-1]
			break
		}
	}

	return nil
}

// AddResourceServiceBrokerLabels adds the given related objects to the existing relationships
// of the service_broker, optionally inserting them as new records.
// Appends related to o.R.ResourceServiceBrokerLabels.
// Sets related.R.Resource appropriately.
func (q serviceBrokerQuery) AddResourceServiceBrokerLabels(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBrokerLabel) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = ServiceBrokerLabels().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `service_broker_labels` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"resource_guid"}),
				strmangle.WhereClause("`", "`", 0, serviceBrokerLabelPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &serviceBrokerR{
			ResourceServiceBrokerLabels: related,
		}
	} else {
		o.R.ResourceServiceBrokerLabels = append(o.R.ResourceServiceBrokerLabels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &serviceBrokerLabelR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceServiceBrokerLabels removes all previously related items of the
// service_broker replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceServiceBrokerLabels accordingly.
// Replaces o.R.ResourceServiceBrokerLabels with related.
// Sets related.R.Resource's ResourceServiceBrokerLabels accordingly.
func (q serviceBrokerQuery) SetResourceServiceBrokerLabels(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBrokerLabel) error {
	query := "update `service_broker_labels` set `resource_guid` = null where `resource_guid` = ?"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceServiceBrokerLabels {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceServiceBrokerLabels = nil
	}
	return q.AddResourceServiceBrokerLabels(o, ctx, exec, insert, related...)
}

// RemoveResourceServiceBrokerLabels relationships from objects passed in.
// Removes related items from R.ResourceServiceBrokerLabels (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (q serviceBrokerQuery) RemoveResourceServiceBrokerLabels(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, related ...*ServiceBrokerLabel) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = ServiceBrokerLabels().Update(rel, ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceServiceBrokerLabels {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceServiceBrokerLabels)
			if ln > 1 && i < ln-1 {
				o.R.ResourceServiceBrokerLabels[i] = o.R.ResourceServiceBrokerLabels[ln-1]
			}
			o.R.ResourceServiceBrokerLabels = o.R.ResourceServiceBrokerLabels[:ln-1]
			break
		}
	}

	return nil
}

// AddFKServiceBrokerServiceBrokerUpdateRequests adds the given related objects to the existing relationships
// of the service_broker, optionally inserting them as new records.
// Appends related to o.R.FKServiceBrokerServiceBrokerUpdateRequests.
// Sets related.R.FKServiceBroker appropriately.
func (q serviceBrokerQuery) AddFKServiceBrokerServiceBrokerUpdateRequests(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBrokerUpdateRequest) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.FKServiceBrokersID, o.ID)
			if err = ServiceBrokerUpdateRequests().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `service_broker_update_requests` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"fk_service_brokers_id"}),
				strmangle.WhereClause("`", "`", 0, serviceBrokerUpdateRequestPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.FKServiceBrokersID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &serviceBrokerR{
			FKServiceBrokerServiceBrokerUpdateRequests: related,
		}
	} else {
		o.R.FKServiceBrokerServiceBrokerUpdateRequests = append(o.R.FKServiceBrokerServiceBrokerUpdateRequests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &serviceBrokerUpdateRequestR{
				FKServiceBroker: o,
			}
		} else {
			rel.R.FKServiceBroker = o
		}
	}
	return nil
}

// SetFKServiceBrokerServiceBrokerUpdateRequests removes all previously related items of the
// service_broker replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.FKServiceBroker's FKServiceBrokerServiceBrokerUpdateRequests accordingly.
// Replaces o.R.FKServiceBrokerServiceBrokerUpdateRequests with related.
// Sets related.R.FKServiceBroker's FKServiceBrokerServiceBrokerUpdateRequests accordingly.
func (q serviceBrokerQuery) SetFKServiceBrokerServiceBrokerUpdateRequests(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBrokerUpdateRequest) error {
	query := "update `service_broker_update_requests` set `fk_service_brokers_id` = null where `fk_service_brokers_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.FKServiceBrokerServiceBrokerUpdateRequests {
			queries.SetScanner(&rel.FKServiceBrokersID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.FKServiceBroker = nil
		}

		o.R.FKServiceBrokerServiceBrokerUpdateRequests = nil
	}
	return q.AddFKServiceBrokerServiceBrokerUpdateRequests(o, ctx, exec, insert, related...)
}

// RemoveFKServiceBrokerServiceBrokerUpdateRequests relationships from objects passed in.
// Removes related items from R.FKServiceBrokerServiceBrokerUpdateRequests (uses pointer comparison, removal does not keep order)
// Sets related.R.FKServiceBroker.
func (q serviceBrokerQuery) RemoveFKServiceBrokerServiceBrokerUpdateRequests(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, related ...*ServiceBrokerUpdateRequest) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.FKServiceBrokersID, nil)
		if rel.R != nil {
			rel.R.FKServiceBroker = nil
		}
		if _, err = ServiceBrokerUpdateRequests().Update(rel, ctx, exec, boil.Whitelist("fk_service_brokers_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.FKServiceBrokerServiceBrokerUpdateRequests {
			if rel != ri {
				continue
			}

			ln := len(o.R.FKServiceBrokerServiceBrokerUpdateRequests)
			if ln > 1 && i < ln-1 {
				o.R.FKServiceBrokerServiceBrokerUpdateRequests[i] = o.R.FKServiceBrokerServiceBrokerUpdateRequests[ln-1]
			}
			o.R.FKServiceBrokerServiceBrokerUpdateRequests = o.R.FKServiceBrokerServiceBrokerUpdateRequests[:ln-1]
			break
		}
	}

	return nil
}

// AddServices adds the given related objects to the existing relationships
// of the service_broker, optionally inserting them as new records.
// Appends related to o.R.Services.
// Sets related.R.ServiceBroker appropriately.
func (q serviceBrokerQuery) AddServices(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Service) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ServiceBrokerID, o.ID)
			if err = Services().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `services` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"service_broker_id"}),
				strmangle.WhereClause("`", "`", 0, servicePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ServiceBrokerID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &serviceBrokerR{
			Services: related,
		}
	} else {
		o.R.Services = append(o.R.Services, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &serviceR{
				ServiceBroker: o,
			}
		} else {
			rel.R.ServiceBroker = o
		}
	}
	return nil
}

// SetServices removes all previously related items of the
// service_broker replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ServiceBroker's Services accordingly.
// Replaces o.R.Services with related.
// Sets related.R.ServiceBroker's Services accordingly.
func (q serviceBrokerQuery) SetServices(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Service) error {
	query := "update `services` set `service_broker_id` = null where `service_broker_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Services {
			queries.SetScanner(&rel.ServiceBrokerID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ServiceBroker = nil
		}

		o.R.Services = nil
	}
	return q.AddServices(o, ctx, exec, insert, related...)
}

// RemoveServices relationships from objects passed in.
// Removes related items from R.Services (uses pointer comparison, removal does not keep order)
// Sets related.R.ServiceBroker.
func (q serviceBrokerQuery) RemoveServices(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, related ...*Service) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ServiceBrokerID, nil)
		if rel.R != nil {
			rel.R.ServiceBroker = nil
		}
		if _, err = Services().Update(rel, ctx, exec, boil.Whitelist("service_broker_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Services {
			if rel != ri {
				continue
			}

			ln := len(o.R.Services)
			if ln > 1 && i < ln-1 {
				o.R.Services[i] = o.R.Services[ln-1]
			}
			o.R.Services = o.R.Services[:ln-1]
			break
		}
	}

	return nil
}

// ServiceBrokers retrieves all the records using an executor.
func ServiceBrokers(mods ...qm.QueryMod) serviceBrokerQuery {
	mods = append(mods, qm.From("`service_brokers`"))
	return serviceBrokerQuery{NewQuery(mods...)}
}

type ServiceBrokerFinder interface {
	FindServiceBroker(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBroker, error)
}

// FindServiceBroker retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindServiceBroker(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceBroker, error) {
	serviceBrokerObj := &ServiceBroker{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `service_brokers` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, serviceBrokerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from service_brokers")
	}

	return serviceBrokerObj, nil
}

type ServiceBrokerInserter interface {
	Insert(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (q serviceBrokerQuery) Insert(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no service_brokers provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(serviceBrokerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	serviceBrokerInsertCacheMut.RLock()
	cache, cached := serviceBrokerInsertCache[key]
	serviceBrokerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			serviceBrokerAllColumns,
			serviceBrokerColumnsWithDefault,
			serviceBrokerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(serviceBrokerType, serviceBrokerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(serviceBrokerType, serviceBrokerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `service_brokers` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `service_brokers` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `service_brokers` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, serviceBrokerPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into service_brokers")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == serviceBrokerMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for service_brokers")
	}

CacheNoHooks:
	if !cached {
		serviceBrokerInsertCacheMut.Lock()
		serviceBrokerInsertCache[key] = cache
		serviceBrokerInsertCacheMut.Unlock()
	}

	return nil
}

type ServiceBrokerUpdater interface {
	Update(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)
	UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
	UpdateAllSlice(o ServiceBrokerSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
}

// Update uses an executor to update the ServiceBroker.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (q serviceBrokerQuery) Update(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	serviceBrokerUpdateCacheMut.RLock()
	cache, cached := serviceBrokerUpdateCache[key]
	serviceBrokerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			serviceBrokerAllColumns,
			serviceBrokerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update service_brokers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `service_brokers` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, serviceBrokerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(serviceBrokerType, serviceBrokerMapping, append(wl, serviceBrokerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update service_brokers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for service_brokers")
	}

	if !cached {
		serviceBrokerUpdateCacheMut.Lock()
		serviceBrokerUpdateCache[key] = cache
		serviceBrokerUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q serviceBrokerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for service_brokers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for service_brokers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (q serviceBrokerQuery) UpdateAllSlice(o ServiceBrokerSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serviceBrokerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `service_brokers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, serviceBrokerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in serviceBroker slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all serviceBroker")
	}
	return rowsAff, nil
}

type ServiceBrokerUpserter interface {
	Upsert(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error
}

var mySQLServiceBrokerUniqueColumns = []string{
	"id",
	"guid",
	"name",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (q serviceBrokerQuery) Upsert(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no service_brokers provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(serviceBrokerColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLServiceBrokerUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	serviceBrokerUpsertCacheMut.RLock()
	cache, cached := serviceBrokerUpsertCache[key]
	serviceBrokerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			serviceBrokerAllColumns,
			serviceBrokerColumnsWithDefault,
			serviceBrokerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			serviceBrokerAllColumns,
			serviceBrokerPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert service_brokers, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`service_brokers`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `service_brokers` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(serviceBrokerType, serviceBrokerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(serviceBrokerType, serviceBrokerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for service_brokers")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == serviceBrokerMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(serviceBrokerType, serviceBrokerMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for service_brokers")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for service_brokers")
	}

CacheNoHooks:
	if !cached {
		serviceBrokerUpsertCacheMut.Lock()
		serviceBrokerUpsertCache[key] = cache
		serviceBrokerUpsertCacheMut.Unlock()
	}

	return nil
}

type ServiceBrokerDeleter interface {
	Delete(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAllSlice(o ServiceBrokerSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)
}

// Delete deletes a single ServiceBroker record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (q serviceBrokerQuery) Delete(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ServiceBroker provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), serviceBrokerPrimaryKeyMapping)
	sql := "DELETE FROM `service_brokers` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from service_brokers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for service_brokers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q serviceBrokerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no serviceBrokerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from service_brokers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for service_brokers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (q serviceBrokerQuery) DeleteAllSlice(o ServiceBrokerSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serviceBrokerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `service_brokers` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, serviceBrokerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from serviceBroker slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for service_brokers")
	}

	return rowsAff, nil
}

type ServiceBrokerReloader interface {
	Reload(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor) error
	ReloadAll(o *ServiceBrokerSlice, ctx context.Context, exec boil.ContextExecutor) error
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (q serviceBrokerQuery) Reload(o *ServiceBroker, ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindServiceBroker(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (q serviceBrokerQuery) ReloadAll(o *ServiceBrokerSlice, ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ServiceBrokerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serviceBrokerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `service_brokers`.* FROM `service_brokers` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, serviceBrokerPrimaryKeyColumns, len(*o))

	query := queries.Raw(sql, args...)

	err := query.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ServiceBrokerSlice")
	}

	*o = slice

	return nil
}

// ServiceBrokerExists checks if the ServiceBroker row exists.
func ServiceBrokerExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `service_brokers` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if service_brokers exists")
	}

	return exists, nil
}
