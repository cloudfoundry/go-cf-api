// +build mysql,db
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRouteBindings(t *testing.T) {
	t.Parallel()

	query := RouteBindings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRouteBindingsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RouteBinding{}
	if err = randomize.Struct(seed, o, routeBindingDBTypes, true, routeBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RouteBindings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRouteBindingsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RouteBinding{}
	if err = randomize.Struct(seed, o, routeBindingDBTypes, true, routeBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RouteBindings().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RouteBindings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRouteBindingsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RouteBinding{}
	if err = randomize.Struct(seed, o, routeBindingDBTypes, true, routeBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RouteBindingSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RouteBindings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRouteBindingsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RouteBinding{}
	if err = randomize.Struct(seed, o, routeBindingDBTypes, true, routeBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RouteBindingExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RouteBinding exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RouteBindingExists to return true, but got false.")
	}
}

func testRouteBindingsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RouteBinding{}
	if err = randomize.Struct(seed, o, routeBindingDBTypes, true, routeBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	routeBindingFound, err := FindRouteBinding(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if routeBindingFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRouteBindingsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RouteBinding{}
	if err = randomize.Struct(seed, o, routeBindingDBTypes, true, routeBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RouteBindings().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRouteBindingsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RouteBinding{}
	if err = randomize.Struct(seed, o, routeBindingDBTypes, true, routeBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RouteBindings().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRouteBindingsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	routeBindingOne := &RouteBinding{}
	routeBindingTwo := &RouteBinding{}
	if err = randomize.Struct(seed, routeBindingOne, routeBindingDBTypes, false, routeBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}
	if err = randomize.Struct(seed, routeBindingTwo, routeBindingDBTypes, false, routeBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = routeBindingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = routeBindingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RouteBindings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRouteBindingsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	routeBindingOne := &RouteBinding{}
	routeBindingTwo := &RouteBinding{}
	if err = randomize.Struct(seed, routeBindingOne, routeBindingDBTypes, false, routeBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}
	if err = randomize.Struct(seed, routeBindingTwo, routeBindingDBTypes, false, routeBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = routeBindingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = routeBindingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RouteBindings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func routeBindingBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RouteBinding) error {
	*o = RouteBinding{}
	return nil
}

func routeBindingAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RouteBinding) error {
	*o = RouteBinding{}
	return nil
}

func routeBindingAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RouteBinding) error {
	*o = RouteBinding{}
	return nil
}

func routeBindingBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RouteBinding) error {
	*o = RouteBinding{}
	return nil
}

func routeBindingAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RouteBinding) error {
	*o = RouteBinding{}
	return nil
}

func routeBindingBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RouteBinding) error {
	*o = RouteBinding{}
	return nil
}

func routeBindingAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RouteBinding) error {
	*o = RouteBinding{}
	return nil
}

func routeBindingBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RouteBinding) error {
	*o = RouteBinding{}
	return nil
}

func routeBindingAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RouteBinding) error {
	*o = RouteBinding{}
	return nil
}

func testRouteBindingsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RouteBinding{}
	o := &RouteBinding{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, routeBindingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RouteBinding object: %s", err)
	}

	AddRouteBindingHook(boil.BeforeInsertHook, routeBindingBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	routeBindingBeforeInsertHooks = []RouteBindingHook{}

	AddRouteBindingHook(boil.AfterInsertHook, routeBindingAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	routeBindingAfterInsertHooks = []RouteBindingHook{}

	AddRouteBindingHook(boil.AfterSelectHook, routeBindingAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	routeBindingAfterSelectHooks = []RouteBindingHook{}

	AddRouteBindingHook(boil.BeforeUpdateHook, routeBindingBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	routeBindingBeforeUpdateHooks = []RouteBindingHook{}

	AddRouteBindingHook(boil.AfterUpdateHook, routeBindingAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	routeBindingAfterUpdateHooks = []RouteBindingHook{}

	AddRouteBindingHook(boil.BeforeDeleteHook, routeBindingBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	routeBindingBeforeDeleteHooks = []RouteBindingHook{}

	AddRouteBindingHook(boil.AfterDeleteHook, routeBindingAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	routeBindingAfterDeleteHooks = []RouteBindingHook{}

	AddRouteBindingHook(boil.BeforeUpsertHook, routeBindingBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	routeBindingBeforeUpsertHooks = []RouteBindingHook{}

	AddRouteBindingHook(boil.AfterUpsertHook, routeBindingAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	routeBindingAfterUpsertHooks = []RouteBindingHook{}
}

func testRouteBindingsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RouteBinding{}
	if err = randomize.Struct(seed, o, routeBindingDBTypes, true, routeBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RouteBindings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRouteBindingsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RouteBinding{}
	if err = randomize.Struct(seed, o, routeBindingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(routeBindingColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RouteBindings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRouteBindingOneToOneRouteBindingOperationUsingRouteBindingOperation(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign RouteBindingOperation
	var local RouteBinding

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, routeBindingOperationDBTypes, true, routeBindingOperationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteBindingOperation struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, routeBindingDBTypes, true, routeBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&foreign.RouteBindingID, local.ID)
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.RouteBindingOperation().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.RouteBindingID, foreign.RouteBindingID) {
		t.Errorf("want: %v, got %v", foreign.RouteBindingID, check.RouteBindingID)
	}

	slice := RouteBindingSlice{&local}
	if err = local.L.LoadRouteBindingOperation(ctx, tx, false, (*[]*RouteBinding)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RouteBindingOperation == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RouteBindingOperation = nil
	if err = local.L.LoadRouteBindingOperation(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RouteBindingOperation == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRouteBindingOneToOneSetOpRouteBindingOperationUsingRouteBindingOperation(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RouteBinding
	var b, c RouteBindingOperation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeBindingDBTypes, false, strmangle.SetComplement(routeBindingPrimaryKeyColumns, routeBindingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, routeBindingOperationDBTypes, false, strmangle.SetComplement(routeBindingOperationPrimaryKeyColumns, routeBindingOperationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, routeBindingOperationDBTypes, false, strmangle.SetComplement(routeBindingOperationPrimaryKeyColumns, routeBindingOperationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RouteBindingOperation{&b, &c} {
		err = a.SetRouteBindingOperation(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RouteBindingOperation != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.RouteBinding != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if !queries.Equal(a.ID, x.RouteBindingID) {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.RouteBindingID))
		reflect.Indirect(reflect.ValueOf(&x.RouteBindingID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ID, x.RouteBindingID) {
			t.Error("foreign key was wrong value", a.ID, x.RouteBindingID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testRouteBindingOneToOneRemoveOpRouteBindingOperationUsingRouteBindingOperation(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RouteBinding
	var b RouteBindingOperation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeBindingDBTypes, false, strmangle.SetComplement(routeBindingPrimaryKeyColumns, routeBindingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, routeBindingOperationDBTypes, false, strmangle.SetComplement(routeBindingOperationPrimaryKeyColumns, routeBindingOperationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetRouteBindingOperation(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveRouteBindingOperation(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.RouteBindingOperation().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.RouteBindingOperation != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(b.RouteBindingID) {
		t.Error("foreign key column should be nil")
	}

	if b.R.RouteBinding != nil {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRouteBindingToManyResourceRouteBindingAnnotations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RouteBinding
	var b, c RouteBindingAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeBindingDBTypes, true, routeBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, routeBindingAnnotationDBTypes, false, routeBindingAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, routeBindingAnnotationDBTypes, false, routeBindingAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceRouteBindingAnnotations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RouteBindingSlice{&a}
	if err = a.L.LoadResourceRouteBindingAnnotations(ctx, tx, false, (*[]*RouteBinding)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceRouteBindingAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceRouteBindingAnnotations = nil
	if err = a.L.LoadResourceRouteBindingAnnotations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceRouteBindingAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRouteBindingToManyResourceRouteBindingLabels(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RouteBinding
	var b, c RouteBindingLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeBindingDBTypes, true, routeBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, routeBindingLabelDBTypes, false, routeBindingLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, routeBindingLabelDBTypes, false, routeBindingLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceRouteBindingLabels().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RouteBindingSlice{&a}
	if err = a.L.LoadResourceRouteBindingLabels(ctx, tx, false, (*[]*RouteBinding)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceRouteBindingLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceRouteBindingLabels = nil
	if err = a.L.LoadResourceRouteBindingLabels(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceRouteBindingLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRouteBindingToManyAddOpResourceRouteBindingAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RouteBinding
	var b, c, d, e RouteBindingAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeBindingDBTypes, false, strmangle.SetComplement(routeBindingPrimaryKeyColumns, routeBindingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RouteBindingAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, routeBindingAnnotationDBTypes, false, strmangle.SetComplement(routeBindingAnnotationPrimaryKeyColumns, routeBindingAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RouteBindingAnnotation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceRouteBindingAnnotations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceRouteBindingAnnotations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceRouteBindingAnnotations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceRouteBindingAnnotations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRouteBindingToManySetOpResourceRouteBindingAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RouteBinding
	var b, c, d, e RouteBindingAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeBindingDBTypes, false, strmangle.SetComplement(routeBindingPrimaryKeyColumns, routeBindingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RouteBindingAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, routeBindingAnnotationDBTypes, false, strmangle.SetComplement(routeBindingAnnotationPrimaryKeyColumns, routeBindingAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceRouteBindingAnnotations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceRouteBindingAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceRouteBindingAnnotations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceRouteBindingAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceRouteBindingAnnotations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceRouteBindingAnnotations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRouteBindingToManyRemoveOpResourceRouteBindingAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RouteBinding
	var b, c, d, e RouteBindingAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeBindingDBTypes, false, strmangle.SetComplement(routeBindingPrimaryKeyColumns, routeBindingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RouteBindingAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, routeBindingAnnotationDBTypes, false, strmangle.SetComplement(routeBindingAnnotationPrimaryKeyColumns, routeBindingAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceRouteBindingAnnotations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceRouteBindingAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceRouteBindingAnnotations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceRouteBindingAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceRouteBindingAnnotations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceRouteBindingAnnotations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceRouteBindingAnnotations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRouteBindingToManyAddOpResourceRouteBindingLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RouteBinding
	var b, c, d, e RouteBindingLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeBindingDBTypes, false, strmangle.SetComplement(routeBindingPrimaryKeyColumns, routeBindingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RouteBindingLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, routeBindingLabelDBTypes, false, strmangle.SetComplement(routeBindingLabelPrimaryKeyColumns, routeBindingLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RouteBindingLabel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceRouteBindingLabels(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceRouteBindingLabels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceRouteBindingLabels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceRouteBindingLabels().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRouteBindingToManySetOpResourceRouteBindingLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RouteBinding
	var b, c, d, e RouteBindingLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeBindingDBTypes, false, strmangle.SetComplement(routeBindingPrimaryKeyColumns, routeBindingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RouteBindingLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, routeBindingLabelDBTypes, false, strmangle.SetComplement(routeBindingLabelPrimaryKeyColumns, routeBindingLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceRouteBindingLabels(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceRouteBindingLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceRouteBindingLabels(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceRouteBindingLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceRouteBindingLabels[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceRouteBindingLabels[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRouteBindingToManyRemoveOpResourceRouteBindingLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RouteBinding
	var b, c, d, e RouteBindingLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeBindingDBTypes, false, strmangle.SetComplement(routeBindingPrimaryKeyColumns, routeBindingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RouteBindingLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, routeBindingLabelDBTypes, false, strmangle.SetComplement(routeBindingLabelPrimaryKeyColumns, routeBindingLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceRouteBindingLabels(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceRouteBindingLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceRouteBindingLabels(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceRouteBindingLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceRouteBindingLabels) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceRouteBindingLabels[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceRouteBindingLabels[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRouteBindingToOneRouteUsingRoute(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RouteBinding
	var foreign Route

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, routeBindingDBTypes, true, routeBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, routeDBTypes, false, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.RouteID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Route().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RouteBindingSlice{&local}
	if err = local.L.LoadRoute(ctx, tx, false, (*[]*RouteBinding)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Route == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Route = nil
	if err = local.L.LoadRoute(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Route == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRouteBindingToOneServiceInstanceUsingServiceInstance(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RouteBinding
	var foreign ServiceInstance

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, routeBindingDBTypes, true, routeBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, serviceInstanceDBTypes, false, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ServiceInstanceID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ServiceInstance().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RouteBindingSlice{&local}
	if err = local.L.LoadServiceInstance(ctx, tx, false, (*[]*RouteBinding)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServiceInstance == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ServiceInstance = nil
	if err = local.L.LoadServiceInstance(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServiceInstance == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRouteBindingToOneSetOpRouteUsingRoute(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RouteBinding
	var b, c Route

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeBindingDBTypes, false, strmangle.SetComplement(routeBindingPrimaryKeyColumns, routeBindingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, routeDBTypes, false, strmangle.SetComplement(routePrimaryKeyColumns, routeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, routeDBTypes, false, strmangle.SetComplement(routePrimaryKeyColumns, routeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Route{&b, &c} {
		err = a.SetRoute(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Route != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RouteBindings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.RouteID, x.ID) {
			t.Error("foreign key was wrong value", a.RouteID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RouteID))
		reflect.Indirect(reflect.ValueOf(&a.RouteID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.RouteID, x.ID) {
			t.Error("foreign key was wrong value", a.RouteID, x.ID)
		}
	}
}

func testRouteBindingToOneRemoveOpRouteUsingRoute(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RouteBinding
	var b Route

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeBindingDBTypes, false, strmangle.SetComplement(routeBindingPrimaryKeyColumns, routeBindingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, routeDBTypes, false, strmangle.SetComplement(routePrimaryKeyColumns, routeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetRoute(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveRoute(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Route().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Route != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.RouteID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.RouteBindings) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRouteBindingToOneSetOpServiceInstanceUsingServiceInstance(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RouteBinding
	var b, c ServiceInstance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeBindingDBTypes, false, strmangle.SetComplement(routeBindingPrimaryKeyColumns, routeBindingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ServiceInstance{&b, &c} {
		err = a.SetServiceInstance(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ServiceInstance != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RouteBindings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ServiceInstanceID, x.ID) {
			t.Error("foreign key was wrong value", a.ServiceInstanceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ServiceInstanceID))
		reflect.Indirect(reflect.ValueOf(&a.ServiceInstanceID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ServiceInstanceID, x.ID) {
			t.Error("foreign key was wrong value", a.ServiceInstanceID, x.ID)
		}
	}
}

func testRouteBindingToOneRemoveOpServiceInstanceUsingServiceInstance(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RouteBinding
	var b ServiceInstance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeBindingDBTypes, false, strmangle.SetComplement(routeBindingPrimaryKeyColumns, routeBindingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetServiceInstance(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveServiceInstance(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ServiceInstance().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ServiceInstance != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ServiceInstanceID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.RouteBindings) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRouteBindingsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RouteBinding{}
	if err = randomize.Struct(seed, o, routeBindingDBTypes, true, routeBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRouteBindingsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RouteBinding{}
	if err = randomize.Struct(seed, o, routeBindingDBTypes, true, routeBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RouteBindingSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRouteBindingsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RouteBinding{}
	if err = randomize.Struct(seed, o, routeBindingDBTypes, true, routeBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RouteBindings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	routeBindingDBTypes = map[string]string{`ID`: `int`, `GUID`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `RouteID`: `int`, `ServiceInstanceID`: `int`, `RouteServiceURL`: `varchar`}
	_                   = bytes.MinRead
)

func testRouteBindingsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(routeBindingPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(routeBindingAllColumns) == len(routeBindingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RouteBinding{}
	if err = randomize.Struct(seed, o, routeBindingDBTypes, true, routeBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RouteBindings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, routeBindingDBTypes, true, routeBindingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRouteBindingsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(routeBindingAllColumns) == len(routeBindingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RouteBinding{}
	if err = randomize.Struct(seed, o, routeBindingDBTypes, true, routeBindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RouteBindings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, routeBindingDBTypes, true, routeBindingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(routeBindingAllColumns, routeBindingPrimaryKeyColumns) {
		fields = routeBindingAllColumns
	} else {
		fields = strmangle.SetComplement(
			routeBindingAllColumns,
			routeBindingPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RouteBindingSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRouteBindingsUpsert(t *testing.T) {
	t.Parallel()

	if len(routeBindingAllColumns) == len(routeBindingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLRouteBindingUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RouteBinding{}
	if err = randomize.Struct(seed, &o, routeBindingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RouteBinding: %s", err)
	}

	count, err := RouteBindings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, routeBindingDBTypes, false, routeBindingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RouteBinding struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RouteBinding: %s", err)
	}

	count, err = RouteBindings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
