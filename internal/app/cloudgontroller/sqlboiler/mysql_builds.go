// +build mysql
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Build is an object representing the database table.
type Build struct {
	ID                 int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	GUID               string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	CreatedAt          time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	State              null.String `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`
	PackageGUID        null.String `boil:"package_guid" json:"package_guid,omitempty" toml:"package_guid" yaml:"package_guid,omitempty"`
	ErrorDescription   null.String `boil:"error_description" json:"error_description,omitempty" toml:"error_description" yaml:"error_description,omitempty"`
	AppGUID            null.String `boil:"app_guid" json:"app_guid,omitempty" toml:"app_guid" yaml:"app_guid,omitempty"`
	ErrorID            null.String `boil:"error_id" json:"error_id,omitempty" toml:"error_id" yaml:"error_id,omitempty"`
	CreatedByUserGUID  null.String `boil:"created_by_user_guid" json:"created_by_user_guid,omitempty" toml:"created_by_user_guid" yaml:"created_by_user_guid,omitempty"`
	CreatedByUserName  null.String `boil:"created_by_user_name" json:"created_by_user_name,omitempty" toml:"created_by_user_name" yaml:"created_by_user_name,omitempty"`
	CreatedByUserEmail null.String `boil:"created_by_user_email" json:"created_by_user_email,omitempty" toml:"created_by_user_email" yaml:"created_by_user_email,omitempty"`
	StagingMemoryInMB  null.Int    `boil:"staging_memory_in_mb" json:"staging_memory_in_mb,omitempty" toml:"staging_memory_in_mb" yaml:"staging_memory_in_mb,omitempty"`
	StagingDiskInMB    null.Int    `boil:"staging_disk_in_mb" json:"staging_disk_in_mb,omitempty" toml:"staging_disk_in_mb" yaml:"staging_disk_in_mb,omitempty"`

	R *buildR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L buildL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BuildColumns = struct {
	ID                 string
	GUID               string
	CreatedAt          string
	UpdatedAt          string
	State              string
	PackageGUID        string
	ErrorDescription   string
	AppGUID            string
	ErrorID            string
	CreatedByUserGUID  string
	CreatedByUserName  string
	CreatedByUserEmail string
	StagingMemoryInMB  string
	StagingDiskInMB    string
}{
	ID:                 "id",
	GUID:               "guid",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	State:              "state",
	PackageGUID:        "package_guid",
	ErrorDescription:   "error_description",
	AppGUID:            "app_guid",
	ErrorID:            "error_id",
	CreatedByUserGUID:  "created_by_user_guid",
	CreatedByUserName:  "created_by_user_name",
	CreatedByUserEmail: "created_by_user_email",
	StagingMemoryInMB:  "staging_memory_in_mb",
	StagingDiskInMB:    "staging_disk_in_mb",
}

var BuildTableColumns = struct {
	ID                 string
	GUID               string
	CreatedAt          string
	UpdatedAt          string
	State              string
	PackageGUID        string
	ErrorDescription   string
	AppGUID            string
	ErrorID            string
	CreatedByUserGUID  string
	CreatedByUserName  string
	CreatedByUserEmail string
	StagingMemoryInMB  string
	StagingDiskInMB    string
}{
	ID:                 "builds.id",
	GUID:               "builds.guid",
	CreatedAt:          "builds.created_at",
	UpdatedAt:          "builds.updated_at",
	State:              "builds.state",
	PackageGUID:        "builds.package_guid",
	ErrorDescription:   "builds.error_description",
	AppGUID:            "builds.app_guid",
	ErrorID:            "builds.error_id",
	CreatedByUserGUID:  "builds.created_by_user_guid",
	CreatedByUserName:  "builds.created_by_user_name",
	CreatedByUserEmail: "builds.created_by_user_email",
	StagingMemoryInMB:  "builds.staging_memory_in_mb",
	StagingDiskInMB:    "builds.staging_disk_in_mb",
}

// Generated where

var BuildWhere = struct {
	ID                 whereHelperint
	GUID               whereHelperstring
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpernull_Time
	State              whereHelpernull_String
	PackageGUID        whereHelpernull_String
	ErrorDescription   whereHelpernull_String
	AppGUID            whereHelpernull_String
	ErrorID            whereHelpernull_String
	CreatedByUserGUID  whereHelpernull_String
	CreatedByUserName  whereHelpernull_String
	CreatedByUserEmail whereHelpernull_String
	StagingMemoryInMB  whereHelpernull_Int
	StagingDiskInMB    whereHelpernull_Int
}{
	ID:                 whereHelperint{field: "`builds`.`id`"},
	GUID:               whereHelperstring{field: "`builds`.`guid`"},
	CreatedAt:          whereHelpertime_Time{field: "`builds`.`created_at`"},
	UpdatedAt:          whereHelpernull_Time{field: "`builds`.`updated_at`"},
	State:              whereHelpernull_String{field: "`builds`.`state`"},
	PackageGUID:        whereHelpernull_String{field: "`builds`.`package_guid`"},
	ErrorDescription:   whereHelpernull_String{field: "`builds`.`error_description`"},
	AppGUID:            whereHelpernull_String{field: "`builds`.`app_guid`"},
	ErrorID:            whereHelpernull_String{field: "`builds`.`error_id`"},
	CreatedByUserGUID:  whereHelpernull_String{field: "`builds`.`created_by_user_guid`"},
	CreatedByUserName:  whereHelpernull_String{field: "`builds`.`created_by_user_name`"},
	CreatedByUserEmail: whereHelpernull_String{field: "`builds`.`created_by_user_email`"},
	StagingMemoryInMB:  whereHelpernull_Int{field: "`builds`.`staging_memory_in_mb`"},
	StagingDiskInMB:    whereHelpernull_Int{field: "`builds`.`staging_disk_in_mb`"},
}

// BuildRels is where relationship names are stored.
var BuildRels = struct {
	App                      string
	ResourceBuildAnnotations string
	ResourceBuildLabels      string
	KpackLifecycleData       string
}{
	App:                      "App",
	ResourceBuildAnnotations: "ResourceBuildAnnotations",
	ResourceBuildLabels:      "ResourceBuildLabels",
	KpackLifecycleData:       "KpackLifecycleData",
}

// buildR is where relationships are stored.
type buildR struct {
	App                      *App                     `boil:"App" json:"App" toml:"App" yaml:"App"`
	ResourceBuildAnnotations BuildAnnotationSlice     `boil:"ResourceBuildAnnotations" json:"ResourceBuildAnnotations" toml:"ResourceBuildAnnotations" yaml:"ResourceBuildAnnotations"`
	ResourceBuildLabels      BuildLabelSlice          `boil:"ResourceBuildLabels" json:"ResourceBuildLabels" toml:"ResourceBuildLabels" yaml:"ResourceBuildLabels"`
	KpackLifecycleData       KpackLifecycleDatumSlice `boil:"KpackLifecycleData" json:"KpackLifecycleData" toml:"KpackLifecycleData" yaml:"KpackLifecycleData"`
}

// NewStruct creates a new relationship struct
func (*buildR) NewStruct() *buildR {
	return &buildR{}
}

// buildL is where Load methods for each relationship are stored.
type buildL struct{}

var (
	buildAllColumns            = []string{"id", "guid", "created_at", "updated_at", "state", "package_guid", "error_description", "app_guid", "error_id", "created_by_user_guid", "created_by_user_name", "created_by_user_email", "staging_memory_in_mb", "staging_disk_in_mb"}
	buildColumnsWithoutDefault = []string{"guid", "updated_at", "state", "package_guid", "error_description", "app_guid", "error_id", "created_by_user_guid", "created_by_user_name", "created_by_user_email", "staging_memory_in_mb", "staging_disk_in_mb"}
	buildColumnsWithDefault    = []string{"id", "created_at"}
	buildPrimaryKeyColumns     = []string{"id"}
)

type (
	// BuildSlice is an alias for a slice of pointers to Build.
	// This should almost always be used instead of []Build.
	BuildSlice []*Build

	buildQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	buildType                 = reflect.TypeOf(&Build{})
	buildMapping              = queries.MakeStructMapping(buildType)
	buildPrimaryKeyMapping, _ = queries.BindMapping(buildType, buildMapping, buildPrimaryKeyColumns)
	buildInsertCacheMut       sync.RWMutex
	buildInsertCache          = make(map[string]insertCache)
	buildUpdateCacheMut       sync.RWMutex
	buildUpdateCache          = make(map[string]updateCache)
	buildUpsertCacheMut       sync.RWMutex
	buildUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

type BuildFinisher interface {
	One(ctx context.Context, exec boil.ContextExecutor) (*Build, error)
	Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	All(ctx context.Context, exec boil.ContextExecutor) (BuildSlice, error)
	Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)
}

// One returns a single build record from the query.
func (q buildQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Build, error) {
	o := &Build{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for builds")
	}

	return o, nil
}

// All returns all Build records from the query.
func (q buildQuery) All(ctx context.Context, exec boil.ContextExecutor) (BuildSlice, error) {
	var o []*Build

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Build slice")
	}

	return o, nil
}

// Count returns the count of all Build records in the query.
func (q buildQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count builds rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q buildQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if builds exists")
	}

	return count > 0, nil
}

// App pointed to by the foreign key.
func (q buildQuery) App(o *Build, mods ...qm.QueryMod) appQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`guid` = ?", o.AppGUID),
	}

	queryMods = append(queryMods, mods...)

	query := Apps(queryMods...)
	queries.SetFrom(query.Query, "`apps`")

	return query
}

// ResourceBuildAnnotations retrieves all the build_annotation's BuildAnnotations with an executor via resource_guid column.
func (q buildQuery) ResourceBuildAnnotations(o *Build, mods ...qm.QueryMod) buildAnnotationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`build_annotations`.`resource_guid`=?", o.GUID),
	)

	query := BuildAnnotations(queryMods...)
	queries.SetFrom(query.Query, "`build_annotations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`build_annotations`.*"})
	}

	return query
}

// ResourceBuildLabels retrieves all the build_label's BuildLabels with an executor via resource_guid column.
func (q buildQuery) ResourceBuildLabels(o *Build, mods ...qm.QueryMod) buildLabelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`build_labels`.`resource_guid`=?", o.GUID),
	)

	query := BuildLabels(queryMods...)
	queries.SetFrom(query.Query, "`build_labels`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`build_labels`.*"})
	}

	return query
}

// KpackLifecycleData retrieves all the kpack_lifecycle_datum's KpackLifecycleData with an executor.
func (q buildQuery) KpackLifecycleData(o *Build, mods ...qm.QueryMod) kpackLifecycleDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`kpack_lifecycle_data`.`build_guid`=?", o.GUID),
	)

	query := KpackLifecycleData(queryMods...)
	queries.SetFrom(query.Query, "`kpack_lifecycle_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`kpack_lifecycle_data`.*"})
	}

	return query
}

// LoadApp allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (buildL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuild interface{}, mods queries.Applicator) error {
	var slice []*Build
	var object *Build

	if singular {
		object = maybeBuild.(*Build)
	} else {
		slice = *maybeBuild.(*[]*Build)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &buildR{}
		}
		if !queries.IsNil(object.AppGUID) {
			args = append(args, object.AppGUID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &buildR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AppGUID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AppGUID) {
				args = append(args, obj.AppGUID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`apps`),
		qm.WhereIn(`apps.guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load App")
	}

	var resultSlice []*App
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice App")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for apps")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for apps")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.App = foreign
		if foreign.R == nil {
			foreign.R = &appR{}
		}
		foreign.R.Builds = append(foreign.R.Builds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AppGUID, foreign.GUID) {
				local.R.App = foreign
				if foreign.R == nil {
					foreign.R = &appR{}
				}
				foreign.R.Builds = append(foreign.R.Builds, local)
				break
			}
		}
	}

	return nil
}

// LoadResourceBuildAnnotations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (buildL) LoadResourceBuildAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuild interface{}, mods queries.Applicator) error {
	var slice []*Build
	var object *Build

	if singular {
		object = maybeBuild.(*Build)
	} else {
		slice = *maybeBuild.(*[]*Build)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &buildR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &buildR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`build_annotations`),
		qm.WhereIn(`build_annotations.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load build_annotations")
	}

	var resultSlice []*BuildAnnotation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice build_annotations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on build_annotations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for build_annotations")
	}

	if singular {
		object.R.ResourceBuildAnnotations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &buildAnnotationR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceBuildAnnotations = append(local.R.ResourceBuildAnnotations, foreign)
				if foreign.R == nil {
					foreign.R = &buildAnnotationR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// LoadResourceBuildLabels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (buildL) LoadResourceBuildLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuild interface{}, mods queries.Applicator) error {
	var slice []*Build
	var object *Build

	if singular {
		object = maybeBuild.(*Build)
	} else {
		slice = *maybeBuild.(*[]*Build)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &buildR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &buildR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`build_labels`),
		qm.WhereIn(`build_labels.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load build_labels")
	}

	var resultSlice []*BuildLabel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice build_labels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on build_labels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for build_labels")
	}

	if singular {
		object.R.ResourceBuildLabels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &buildLabelR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceBuildLabels = append(local.R.ResourceBuildLabels, foreign)
				if foreign.R == nil {
					foreign.R = &buildLabelR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// LoadKpackLifecycleData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (buildL) LoadKpackLifecycleData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuild interface{}, mods queries.Applicator) error {
	var slice []*Build
	var object *Build

	if singular {
		object = maybeBuild.(*Build)
	} else {
		slice = *maybeBuild.(*[]*Build)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &buildR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &buildR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`kpack_lifecycle_data`),
		qm.WhereIn(`kpack_lifecycle_data.build_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load kpack_lifecycle_data")
	}

	var resultSlice []*KpackLifecycleDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice kpack_lifecycle_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on kpack_lifecycle_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for kpack_lifecycle_data")
	}

	if singular {
		object.R.KpackLifecycleData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &kpackLifecycleDatumR{}
			}
			foreign.R.Build = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.BuildGUID) {
				local.R.KpackLifecycleData = append(local.R.KpackLifecycleData, foreign)
				if foreign.R == nil {
					foreign.R = &kpackLifecycleDatumR{}
				}
				foreign.R.Build = local
				break
			}
		}
	}

	return nil
}

// SetApp of the build to the related item.
// Sets o.R.App to related.
// Adds o to related.R.Builds.
func (q buildQuery) SetApp(o *Build, ctx context.Context, exec boil.ContextExecutor, insert bool, related *App) error {
	var err error
	if insert {
		if err = Apps().Insert(related, ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `builds` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"app_guid"}),
		strmangle.WhereClause("`", "`", 0, buildPrimaryKeyColumns),
	)
	values := []interface{}{related.GUID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AppGUID, related.GUID)
	if o.R == nil {
		o.R = &buildR{
			App: related,
		}
	} else {
		o.R.App = related
	}

	if related.R == nil {
		related.R = &appR{
			Builds: BuildSlice{o},
		}
	} else {
		related.R.Builds = append(related.R.Builds, o)
	}

	return nil
}

// RemoveApp relationship.
// Sets o.R.App to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (q buildQuery) RemoveApp(o *Build, ctx context.Context, exec boil.ContextExecutor, related *App) error {
	var err error

	queries.SetScanner(&o.AppGUID, nil)
	if _, err = q.Update(o, ctx, exec, boil.Whitelist("app_guid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.App = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Builds {
		if queries.Equal(o.AppGUID, ri.AppGUID) {
			continue
		}

		ln := len(related.R.Builds)
		if ln > 1 && i < ln-1 {
			related.R.Builds[i] = related.R.Builds[ln-1]
		}
		related.R.Builds = related.R.Builds[:ln-1]
		break
	}
	return nil
}

// AddResourceBuildAnnotations adds the given related objects to the existing relationships
// of the build, optionally inserting them as new records.
// Appends related to o.R.ResourceBuildAnnotations.
// Sets related.R.Resource appropriately.
func (q buildQuery) AddResourceBuildAnnotations(o *Build, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BuildAnnotation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = BuildAnnotations().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `build_annotations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"resource_guid"}),
				strmangle.WhereClause("`", "`", 0, buildAnnotationPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &buildR{
			ResourceBuildAnnotations: related,
		}
	} else {
		o.R.ResourceBuildAnnotations = append(o.R.ResourceBuildAnnotations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &buildAnnotationR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceBuildAnnotations removes all previously related items of the
// build replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceBuildAnnotations accordingly.
// Replaces o.R.ResourceBuildAnnotations with related.
// Sets related.R.Resource's ResourceBuildAnnotations accordingly.
func (q buildQuery) SetResourceBuildAnnotations(o *Build, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BuildAnnotation) error {
	query := "update `build_annotations` set `resource_guid` = null where `resource_guid` = ?"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceBuildAnnotations {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceBuildAnnotations = nil
	}
	return q.AddResourceBuildAnnotations(o, ctx, exec, insert, related...)
}

// RemoveResourceBuildAnnotations relationships from objects passed in.
// Removes related items from R.ResourceBuildAnnotations (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (q buildQuery) RemoveResourceBuildAnnotations(o *Build, ctx context.Context, exec boil.ContextExecutor, related ...*BuildAnnotation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = BuildAnnotations().Update(rel, ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceBuildAnnotations {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceBuildAnnotations)
			if ln > 1 && i < ln-1 {
				o.R.ResourceBuildAnnotations[i] = o.R.ResourceBuildAnnotations[ln-1]
			}
			o.R.ResourceBuildAnnotations = o.R.ResourceBuildAnnotations[:ln-1]
			break
		}
	}

	return nil
}

// AddResourceBuildLabels adds the given related objects to the existing relationships
// of the build, optionally inserting them as new records.
// Appends related to o.R.ResourceBuildLabels.
// Sets related.R.Resource appropriately.
func (q buildQuery) AddResourceBuildLabels(o *Build, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BuildLabel) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = BuildLabels().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `build_labels` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"resource_guid"}),
				strmangle.WhereClause("`", "`", 0, buildLabelPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &buildR{
			ResourceBuildLabels: related,
		}
	} else {
		o.R.ResourceBuildLabels = append(o.R.ResourceBuildLabels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &buildLabelR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceBuildLabels removes all previously related items of the
// build replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceBuildLabels accordingly.
// Replaces o.R.ResourceBuildLabels with related.
// Sets related.R.Resource's ResourceBuildLabels accordingly.
func (q buildQuery) SetResourceBuildLabels(o *Build, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BuildLabel) error {
	query := "update `build_labels` set `resource_guid` = null where `resource_guid` = ?"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceBuildLabels {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceBuildLabels = nil
	}
	return q.AddResourceBuildLabels(o, ctx, exec, insert, related...)
}

// RemoveResourceBuildLabels relationships from objects passed in.
// Removes related items from R.ResourceBuildLabels (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (q buildQuery) RemoveResourceBuildLabels(o *Build, ctx context.Context, exec boil.ContextExecutor, related ...*BuildLabel) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = BuildLabels().Update(rel, ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceBuildLabels {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceBuildLabels)
			if ln > 1 && i < ln-1 {
				o.R.ResourceBuildLabels[i] = o.R.ResourceBuildLabels[ln-1]
			}
			o.R.ResourceBuildLabels = o.R.ResourceBuildLabels[:ln-1]
			break
		}
	}

	return nil
}

// AddKpackLifecycleData adds the given related objects to the existing relationships
// of the build, optionally inserting them as new records.
// Appends related to o.R.KpackLifecycleData.
// Sets related.R.Build appropriately.
func (q buildQuery) AddKpackLifecycleData(o *Build, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*KpackLifecycleDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BuildGUID, o.GUID)
			if err = KpackLifecycleData().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `kpack_lifecycle_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"build_guid"}),
				strmangle.WhereClause("`", "`", 0, kpackLifecycleDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BuildGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &buildR{
			KpackLifecycleData: related,
		}
	} else {
		o.R.KpackLifecycleData = append(o.R.KpackLifecycleData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &kpackLifecycleDatumR{
				Build: o,
			}
		} else {
			rel.R.Build = o
		}
	}
	return nil
}

// SetKpackLifecycleData removes all previously related items of the
// build replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Build's KpackLifecycleData accordingly.
// Replaces o.R.KpackLifecycleData with related.
// Sets related.R.Build's KpackLifecycleData accordingly.
func (q buildQuery) SetKpackLifecycleData(o *Build, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*KpackLifecycleDatum) error {
	query := "update `kpack_lifecycle_data` set `build_guid` = null where `build_guid` = ?"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.KpackLifecycleData {
			queries.SetScanner(&rel.BuildGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Build = nil
		}

		o.R.KpackLifecycleData = nil
	}
	return q.AddKpackLifecycleData(o, ctx, exec, insert, related...)
}

// RemoveKpackLifecycleData relationships from objects passed in.
// Removes related items from R.KpackLifecycleData (uses pointer comparison, removal does not keep order)
// Sets related.R.Build.
func (q buildQuery) RemoveKpackLifecycleData(o *Build, ctx context.Context, exec boil.ContextExecutor, related ...*KpackLifecycleDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BuildGUID, nil)
		if rel.R != nil {
			rel.R.Build = nil
		}
		if _, err = KpackLifecycleData().Update(rel, ctx, exec, boil.Whitelist("build_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.KpackLifecycleData {
			if rel != ri {
				continue
			}

			ln := len(o.R.KpackLifecycleData)
			if ln > 1 && i < ln-1 {
				o.R.KpackLifecycleData[i] = o.R.KpackLifecycleData[ln-1]
			}
			o.R.KpackLifecycleData = o.R.KpackLifecycleData[:ln-1]
			break
		}
	}

	return nil
}

// Builds retrieves all the records using an executor.
func Builds(mods ...qm.QueryMod) buildQuery {
	mods = append(mods, qm.From("`builds`"))
	return buildQuery{NewQuery(mods...)}
}

type BuildFinder interface {
	FindBuild(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Build, error)
}

// FindBuild retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBuild(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Build, error) {
	buildObj := &Build{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `builds` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, buildObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from builds")
	}

	return buildObj, nil
}

type BuildInserter interface {
	Insert(o *Build, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (q buildQuery) Insert(o *Build, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no builds provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(buildColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	buildInsertCacheMut.RLock()
	cache, cached := buildInsertCache[key]
	buildInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			buildAllColumns,
			buildColumnsWithDefault,
			buildColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(buildType, buildMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(buildType, buildMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `builds` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `builds` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `builds` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, buildPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into builds")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == buildMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for builds")
	}

CacheNoHooks:
	if !cached {
		buildInsertCacheMut.Lock()
		buildInsertCache[key] = cache
		buildInsertCacheMut.Unlock()
	}

	return nil
}

type BuildUpdater interface {
	Update(o *Build, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)
	UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
	UpdateAllSlice(o BuildSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
}

// Update uses an executor to update the Build.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (q buildQuery) Update(o *Build, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	buildUpdateCacheMut.RLock()
	cache, cached := buildUpdateCache[key]
	buildUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			buildAllColumns,
			buildPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update builds, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `builds` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, buildPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(buildType, buildMapping, append(wl, buildPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update builds row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for builds")
	}

	if !cached {
		buildUpdateCacheMut.Lock()
		buildUpdateCache[key] = cache
		buildUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q buildQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for builds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for builds")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (q buildQuery) UpdateAllSlice(o BuildSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), buildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `builds` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, buildPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in build slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all build")
	}
	return rowsAff, nil
}

type BuildUpserter interface {
	Upsert(o *Build, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error
}

var mySQLBuildUniqueColumns = []string{
	"id",
	"guid",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (q buildQuery) Upsert(o *Build, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no builds provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(buildColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBuildUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	buildUpsertCacheMut.RLock()
	cache, cached := buildUpsertCache[key]
	buildUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			buildAllColumns,
			buildColumnsWithDefault,
			buildColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			buildAllColumns,
			buildPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert builds, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`builds`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `builds` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(buildType, buildMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(buildType, buildMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for builds")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == buildMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(buildType, buildMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for builds")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for builds")
	}

CacheNoHooks:
	if !cached {
		buildUpsertCacheMut.Lock()
		buildUpsertCache[key] = cache
		buildUpsertCacheMut.Unlock()
	}

	return nil
}

type BuildDeleter interface {
	Delete(o *Build, ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAllSlice(o BuildSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)
}

// Delete deletes a single Build record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (q buildQuery) Delete(o *Build, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Build provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), buildPrimaryKeyMapping)
	sql := "DELETE FROM `builds` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from builds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for builds")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q buildQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no buildQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from builds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for builds")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (q buildQuery) DeleteAllSlice(o BuildSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), buildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `builds` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, buildPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from build slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for builds")
	}

	return rowsAff, nil
}

type BuildReloader interface {
	Reload(o *Build, ctx context.Context, exec boil.ContextExecutor) error
	ReloadAll(o *BuildSlice, ctx context.Context, exec boil.ContextExecutor) error
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (q buildQuery) Reload(o *Build, ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBuild(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (q buildQuery) ReloadAll(o *BuildSlice, ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BuildSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), buildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `builds`.* FROM `builds` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, buildPrimaryKeyColumns, len(*o))

	query := queries.Raw(sql, args...)

	err := query.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BuildSlice")
	}

	*o = slice

	return nil
}

// BuildExists checks if the Build row exists.
func BuildExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `builds` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if builds exists")
	}

	return exists, nil
}
