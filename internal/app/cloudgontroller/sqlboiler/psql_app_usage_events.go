// +build psql
//go:generate mockgen -source=$GOFILE -destination=mocks/app_usage_events.go
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AppUsageEvent is an object representing the database table.
type AppUsageEvent struct {
	ID                            int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	GUID                          string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	CreatedAt                     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	InstanceCount                 int         `boil:"instance_count" json:"instance_count" toml:"instance_count" yaml:"instance_count"`
	MemoryInMBPerInstance         int         `boil:"memory_in_mb_per_instance" json:"memory_in_mb_per_instance" toml:"memory_in_mb_per_instance" yaml:"memory_in_mb_per_instance"`
	State                         string      `boil:"state" json:"state" toml:"state" yaml:"state"`
	AppGUID                       string      `boil:"app_guid" json:"app_guid" toml:"app_guid" yaml:"app_guid"`
	AppName                       string      `boil:"app_name" json:"app_name" toml:"app_name" yaml:"app_name"`
	SpaceGUID                     string      `boil:"space_guid" json:"space_guid" toml:"space_guid" yaml:"space_guid"`
	SpaceName                     string      `boil:"space_name" json:"space_name" toml:"space_name" yaml:"space_name"`
	OrgGUID                       string      `boil:"org_guid" json:"org_guid" toml:"org_guid" yaml:"org_guid"`
	BuildpackGUID                 null.String `boil:"buildpack_guid" json:"buildpack_guid,omitempty" toml:"buildpack_guid" yaml:"buildpack_guid,omitempty"`
	BuildpackName                 null.String `boil:"buildpack_name" json:"buildpack_name,omitempty" toml:"buildpack_name" yaml:"buildpack_name,omitempty"`
	PackageState                  null.String `boil:"package_state" json:"package_state,omitempty" toml:"package_state" yaml:"package_state,omitempty"`
	ParentAppName                 null.String `boil:"parent_app_name" json:"parent_app_name,omitempty" toml:"parent_app_name" yaml:"parent_app_name,omitempty"`
	ParentAppGUID                 null.String `boil:"parent_app_guid" json:"parent_app_guid,omitempty" toml:"parent_app_guid" yaml:"parent_app_guid,omitempty"`
	ProcessType                   null.String `boil:"process_type" json:"process_type,omitempty" toml:"process_type" yaml:"process_type,omitempty"`
	TaskGUID                      null.String `boil:"task_guid" json:"task_guid,omitempty" toml:"task_guid" yaml:"task_guid,omitempty"`
	TaskName                      null.String `boil:"task_name" json:"task_name,omitempty" toml:"task_name" yaml:"task_name,omitempty"`
	PackageGUID                   null.String `boil:"package_guid" json:"package_guid,omitempty" toml:"package_guid" yaml:"package_guid,omitempty"`
	PreviousState                 null.String `boil:"previous_state" json:"previous_state,omitempty" toml:"previous_state" yaml:"previous_state,omitempty"`
	PreviousPackageState          null.String `boil:"previous_package_state" json:"previous_package_state,omitempty" toml:"previous_package_state" yaml:"previous_package_state,omitempty"`
	PreviousMemoryInMBPerInstance null.Int    `boil:"previous_memory_in_mb_per_instance" json:"previous_memory_in_mb_per_instance,omitempty" toml:"previous_memory_in_mb_per_instance" yaml:"previous_memory_in_mb_per_instance,omitempty"`
	PreviousInstanceCount         null.Int    `boil:"previous_instance_count" json:"previous_instance_count,omitempty" toml:"previous_instance_count" yaml:"previous_instance_count,omitempty"`

	R *appUsageEventR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L appUsageEventL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AppUsageEventColumns = struct {
	ID                            string
	GUID                          string
	CreatedAt                     string
	InstanceCount                 string
	MemoryInMBPerInstance         string
	State                         string
	AppGUID                       string
	AppName                       string
	SpaceGUID                     string
	SpaceName                     string
	OrgGUID                       string
	BuildpackGUID                 string
	BuildpackName                 string
	PackageState                  string
	ParentAppName                 string
	ParentAppGUID                 string
	ProcessType                   string
	TaskGUID                      string
	TaskName                      string
	PackageGUID                   string
	PreviousState                 string
	PreviousPackageState          string
	PreviousMemoryInMBPerInstance string
	PreviousInstanceCount         string
}{
	ID:                            "id",
	GUID:                          "guid",
	CreatedAt:                     "created_at",
	InstanceCount:                 "instance_count",
	MemoryInMBPerInstance:         "memory_in_mb_per_instance",
	State:                         "state",
	AppGUID:                       "app_guid",
	AppName:                       "app_name",
	SpaceGUID:                     "space_guid",
	SpaceName:                     "space_name",
	OrgGUID:                       "org_guid",
	BuildpackGUID:                 "buildpack_guid",
	BuildpackName:                 "buildpack_name",
	PackageState:                  "package_state",
	ParentAppName:                 "parent_app_name",
	ParentAppGUID:                 "parent_app_guid",
	ProcessType:                   "process_type",
	TaskGUID:                      "task_guid",
	TaskName:                      "task_name",
	PackageGUID:                   "package_guid",
	PreviousState:                 "previous_state",
	PreviousPackageState:          "previous_package_state",
	PreviousMemoryInMBPerInstance: "previous_memory_in_mb_per_instance",
	PreviousInstanceCount:         "previous_instance_count",
}

var AppUsageEventTableColumns = struct {
	ID                            string
	GUID                          string
	CreatedAt                     string
	InstanceCount                 string
	MemoryInMBPerInstance         string
	State                         string
	AppGUID                       string
	AppName                       string
	SpaceGUID                     string
	SpaceName                     string
	OrgGUID                       string
	BuildpackGUID                 string
	BuildpackName                 string
	PackageState                  string
	ParentAppName                 string
	ParentAppGUID                 string
	ProcessType                   string
	TaskGUID                      string
	TaskName                      string
	PackageGUID                   string
	PreviousState                 string
	PreviousPackageState          string
	PreviousMemoryInMBPerInstance string
	PreviousInstanceCount         string
}{
	ID:                            "app_usage_events.id",
	GUID:                          "app_usage_events.guid",
	CreatedAt:                     "app_usage_events.created_at",
	InstanceCount:                 "app_usage_events.instance_count",
	MemoryInMBPerInstance:         "app_usage_events.memory_in_mb_per_instance",
	State:                         "app_usage_events.state",
	AppGUID:                       "app_usage_events.app_guid",
	AppName:                       "app_usage_events.app_name",
	SpaceGUID:                     "app_usage_events.space_guid",
	SpaceName:                     "app_usage_events.space_name",
	OrgGUID:                       "app_usage_events.org_guid",
	BuildpackGUID:                 "app_usage_events.buildpack_guid",
	BuildpackName:                 "app_usage_events.buildpack_name",
	PackageState:                  "app_usage_events.package_state",
	ParentAppName:                 "app_usage_events.parent_app_name",
	ParentAppGUID:                 "app_usage_events.parent_app_guid",
	ProcessType:                   "app_usage_events.process_type",
	TaskGUID:                      "app_usage_events.task_guid",
	TaskName:                      "app_usage_events.task_name",
	PackageGUID:                   "app_usage_events.package_guid",
	PreviousState:                 "app_usage_events.previous_state",
	PreviousPackageState:          "app_usage_events.previous_package_state",
	PreviousMemoryInMBPerInstance: "app_usage_events.previous_memory_in_mb_per_instance",
	PreviousInstanceCount:         "app_usage_events.previous_instance_count",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AppUsageEventWhere = struct {
	ID                            whereHelperint
	GUID                          whereHelperstring
	CreatedAt                     whereHelpertime_Time
	InstanceCount                 whereHelperint
	MemoryInMBPerInstance         whereHelperint
	State                         whereHelperstring
	AppGUID                       whereHelperstring
	AppName                       whereHelperstring
	SpaceGUID                     whereHelperstring
	SpaceName                     whereHelperstring
	OrgGUID                       whereHelperstring
	BuildpackGUID                 whereHelpernull_String
	BuildpackName                 whereHelpernull_String
	PackageState                  whereHelpernull_String
	ParentAppName                 whereHelpernull_String
	ParentAppGUID                 whereHelpernull_String
	ProcessType                   whereHelpernull_String
	TaskGUID                      whereHelpernull_String
	TaskName                      whereHelpernull_String
	PackageGUID                   whereHelpernull_String
	PreviousState                 whereHelpernull_String
	PreviousPackageState          whereHelpernull_String
	PreviousMemoryInMBPerInstance whereHelpernull_Int
	PreviousInstanceCount         whereHelpernull_Int
}{
	ID:                            whereHelperint{field: "\"app_usage_events\".\"id\""},
	GUID:                          whereHelperstring{field: "\"app_usage_events\".\"guid\""},
	CreatedAt:                     whereHelpertime_Time{field: "\"app_usage_events\".\"created_at\""},
	InstanceCount:                 whereHelperint{field: "\"app_usage_events\".\"instance_count\""},
	MemoryInMBPerInstance:         whereHelperint{field: "\"app_usage_events\".\"memory_in_mb_per_instance\""},
	State:                         whereHelperstring{field: "\"app_usage_events\".\"state\""},
	AppGUID:                       whereHelperstring{field: "\"app_usage_events\".\"app_guid\""},
	AppName:                       whereHelperstring{field: "\"app_usage_events\".\"app_name\""},
	SpaceGUID:                     whereHelperstring{field: "\"app_usage_events\".\"space_guid\""},
	SpaceName:                     whereHelperstring{field: "\"app_usage_events\".\"space_name\""},
	OrgGUID:                       whereHelperstring{field: "\"app_usage_events\".\"org_guid\""},
	BuildpackGUID:                 whereHelpernull_String{field: "\"app_usage_events\".\"buildpack_guid\""},
	BuildpackName:                 whereHelpernull_String{field: "\"app_usage_events\".\"buildpack_name\""},
	PackageState:                  whereHelpernull_String{field: "\"app_usage_events\".\"package_state\""},
	ParentAppName:                 whereHelpernull_String{field: "\"app_usage_events\".\"parent_app_name\""},
	ParentAppGUID:                 whereHelpernull_String{field: "\"app_usage_events\".\"parent_app_guid\""},
	ProcessType:                   whereHelpernull_String{field: "\"app_usage_events\".\"process_type\""},
	TaskGUID:                      whereHelpernull_String{field: "\"app_usage_events\".\"task_guid\""},
	TaskName:                      whereHelpernull_String{field: "\"app_usage_events\".\"task_name\""},
	PackageGUID:                   whereHelpernull_String{field: "\"app_usage_events\".\"package_guid\""},
	PreviousState:                 whereHelpernull_String{field: "\"app_usage_events\".\"previous_state\""},
	PreviousPackageState:          whereHelpernull_String{field: "\"app_usage_events\".\"previous_package_state\""},
	PreviousMemoryInMBPerInstance: whereHelpernull_Int{field: "\"app_usage_events\".\"previous_memory_in_mb_per_instance\""},
	PreviousInstanceCount:         whereHelpernull_Int{field: "\"app_usage_events\".\"previous_instance_count\""},
}

// AppUsageEventRels is where relationship names are stored.
var AppUsageEventRels = struct {
}{}

// appUsageEventR is where relationships are stored.
type appUsageEventR struct {
}

// NewStruct creates a new relationship struct
func (*appUsageEventR) NewStruct() *appUsageEventR {
	return &appUsageEventR{}
}

// appUsageEventL is where Load methods for each relationship are stored.
type appUsageEventL struct{}

var (
	appUsageEventAllColumns            = []string{"id", "guid", "created_at", "instance_count", "memory_in_mb_per_instance", "state", "app_guid", "app_name", "space_guid", "space_name", "org_guid", "buildpack_guid", "buildpack_name", "package_state", "parent_app_name", "parent_app_guid", "process_type", "task_guid", "task_name", "package_guid", "previous_state", "previous_package_state", "previous_memory_in_mb_per_instance", "previous_instance_count"}
	appUsageEventColumnsWithoutDefault = []string{"guid", "created_at", "instance_count", "memory_in_mb_per_instance", "state", "app_guid", "app_name", "space_guid", "space_name", "org_guid", "buildpack_guid", "buildpack_name", "package_state", "parent_app_name", "parent_app_guid", "process_type", "task_guid", "task_name", "package_guid", "previous_state", "previous_package_state", "previous_memory_in_mb_per_instance", "previous_instance_count"}
	appUsageEventColumnsWithDefault    = []string{"id"}
	appUsageEventPrimaryKeyColumns     = []string{"id"}
)

type (
	// AppUsageEventSlice is an alias for a slice of pointers to AppUsageEvent.
	// This should almost always be used instead of []AppUsageEvent.
	AppUsageEventSlice []*AppUsageEvent

	appUsageEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	appUsageEventType                 = reflect.TypeOf(&AppUsageEvent{})
	appUsageEventMapping              = queries.MakeStructMapping(appUsageEventType)
	appUsageEventPrimaryKeyMapping, _ = queries.BindMapping(appUsageEventType, appUsageEventMapping, appUsageEventPrimaryKeyColumns)
	appUsageEventInsertCacheMut       sync.RWMutex
	appUsageEventInsertCache          = make(map[string]insertCache)
	appUsageEventUpdateCacheMut       sync.RWMutex
	appUsageEventUpdateCache          = make(map[string]updateCache)
	appUsageEventUpsertCacheMut       sync.RWMutex
	appUsageEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

type AppUsageEventFinisher interface {
	One(ctx context.Context, exec boil.ContextExecutor) (*AppUsageEvent, error)
	Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	All(ctx context.Context, exec boil.ContextExecutor) (AppUsageEventSlice, error)
	Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)
}

// One returns a single appUsageEvent record from the query.
func (q appUsageEventQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AppUsageEvent, error) {
	o := &AppUsageEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for app_usage_events")
	}

	return o, nil
}

// All returns all AppUsageEvent records from the query.
func (q appUsageEventQuery) All(ctx context.Context, exec boil.ContextExecutor) (AppUsageEventSlice, error) {
	var o []*AppUsageEvent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AppUsageEvent slice")
	}

	return o, nil
}

// Count returns the count of all AppUsageEvent records in the query.
func (q appUsageEventQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count app_usage_events rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q appUsageEventQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if app_usage_events exists")
	}

	return count > 0, nil
}

// AppUsageEvents retrieves all the records using an executor.
func AppUsageEvents(mods ...qm.QueryMod) appUsageEventQuery {
	mods = append(mods, qm.From("\"app_usage_events\""))
	return appUsageEventQuery{NewQuery(mods...)}
}

type AppUsageEventFinder interface {
	FindAppUsageEvent(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AppUsageEvent, error)
}

// FindAppUsageEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAppUsageEvent(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AppUsageEvent, error) {
	appUsageEventObj := &AppUsageEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"app_usage_events\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, appUsageEventObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from app_usage_events")
	}

	return appUsageEventObj, nil
}

type AppUsageEventInserter interface {
	Insert(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (q appUsageEventQuery) Insert(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no app_usage_events provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(appUsageEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	appUsageEventInsertCacheMut.RLock()
	cache, cached := appUsageEventInsertCache[key]
	appUsageEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			appUsageEventAllColumns,
			appUsageEventColumnsWithDefault,
			appUsageEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(appUsageEventType, appUsageEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(appUsageEventType, appUsageEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"app_usage_events\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"app_usage_events\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into app_usage_events")
	}

	if !cached {
		appUsageEventInsertCacheMut.Lock()
		appUsageEventInsertCache[key] = cache
		appUsageEventInsertCacheMut.Unlock()
	}

	return nil
}

type AppUsageEventUpdater interface {
	Update(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)
	UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
	UpdateAllSlice(o AppUsageEventSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
}

// Update uses an executor to update the AppUsageEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (q appUsageEventQuery) Update(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	appUsageEventUpdateCacheMut.RLock()
	cache, cached := appUsageEventUpdateCache[key]
	appUsageEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			appUsageEventAllColumns,
			appUsageEventPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update app_usage_events, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"app_usage_events\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, appUsageEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(appUsageEventType, appUsageEventMapping, append(wl, appUsageEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update app_usage_events row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for app_usage_events")
	}

	if !cached {
		appUsageEventUpdateCacheMut.Lock()
		appUsageEventUpdateCache[key] = cache
		appUsageEventUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q appUsageEventQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for app_usage_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for app_usage_events")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (q appUsageEventQuery) UpdateAllSlice(o AppUsageEventSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appUsageEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"app_usage_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, appUsageEventPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in appUsageEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all appUsageEvent")
	}
	return rowsAff, nil
}

type AppUsageEventUpserter interface {
	Upsert(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (q appUsageEventQuery) Upsert(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no app_usage_events provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(appUsageEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	appUsageEventUpsertCacheMut.RLock()
	cache, cached := appUsageEventUpsertCache[key]
	appUsageEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			appUsageEventAllColumns,
			appUsageEventColumnsWithDefault,
			appUsageEventColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			appUsageEventAllColumns,
			appUsageEventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert app_usage_events, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(appUsageEventPrimaryKeyColumns))
			copy(conflict, appUsageEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"app_usage_events\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(appUsageEventType, appUsageEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(appUsageEventType, appUsageEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert app_usage_events")
	}

	if !cached {
		appUsageEventUpsertCacheMut.Lock()
		appUsageEventUpsertCache[key] = cache
		appUsageEventUpsertCacheMut.Unlock()
	}

	return nil
}

type AppUsageEventDeleter interface {
	Delete(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAllSlice(o AppUsageEventSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)
}

// Delete deletes a single AppUsageEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (q appUsageEventQuery) Delete(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AppUsageEvent provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), appUsageEventPrimaryKeyMapping)
	sql := "DELETE FROM \"app_usage_events\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from app_usage_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for app_usage_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q appUsageEventQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no appUsageEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from app_usage_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for app_usage_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (q appUsageEventQuery) DeleteAllSlice(o AppUsageEventSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appUsageEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"app_usage_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, appUsageEventPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from appUsageEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for app_usage_events")
	}

	return rowsAff, nil
}

type AppUsageEventReloader interface {
	Reload(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor) error
	ReloadAll(o *AppUsageEventSlice, ctx context.Context, exec boil.ContextExecutor) error
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (q appUsageEventQuery) Reload(o *AppUsageEvent, ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAppUsageEvent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (q appUsageEventQuery) ReloadAll(o *AppUsageEventSlice, ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AppUsageEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appUsageEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"app_usage_events\".* FROM \"app_usage_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, appUsageEventPrimaryKeyColumns, len(*o))

	query := queries.Raw(sql, args...)

	err := query.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AppUsageEventSlice")
	}

	*o = slice

	return nil
}

// AppUsageEventExists checks if the AppUsageEvent row exists.
func AppUsageEventExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"app_usage_events\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if app_usage_events exists")
	}

	return exists, nil
}
