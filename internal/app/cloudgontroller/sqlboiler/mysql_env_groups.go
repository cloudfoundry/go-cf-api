// +build mysql
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

type EnvGroupUpserter interface {
	Upsert(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error
}

var mySQLEnvGroupUniqueColumns = []string{
	"id",
	"guid",
	"name",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (q envGroupQuery) Upsert(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no env_groups provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(envGroupColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLEnvGroupUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	envGroupUpsertCacheMut.RLock()
	cache, cached := envGroupUpsertCache[key]
	envGroupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			envGroupAllColumns,
			envGroupColumnsWithDefault,
			envGroupColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			envGroupAllColumns,
			envGroupPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert env_groups, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`env_groups`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `env_groups` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(envGroupType, envGroupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(envGroupType, envGroupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for env_groups")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == envGroupMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(envGroupType, envGroupMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for env_groups")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for env_groups")
	}

CacheNoHooks:
	if !cached {
		envGroupUpsertCacheMut.Lock()
		envGroupUpsertCache[key] = cache
		envGroupUpsertCacheMut.Unlock()
	}

	return nil
}

// EnvGroup is an object representing the database table.
type EnvGroup struct {
	ID                   int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	GUID                 string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	CreatedAt            time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt            null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Name                 string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	EnvironmentJSON      null.String `boil:"environment_json" json:"environment_json,omitempty" toml:"environment_json" yaml:"environment_json,omitempty"`
	Salt                 null.String `boil:"salt" json:"salt,omitempty" toml:"salt" yaml:"salt,omitempty"`
	EncryptionKeyLabel   null.String `boil:"encryption_key_label" json:"encryption_key_label,omitempty" toml:"encryption_key_label" yaml:"encryption_key_label,omitempty"`
	EncryptionIterations int         `boil:"encryption_iterations" json:"encryption_iterations" toml:"encryption_iterations" yaml:"encryption_iterations"`

	R *envGroupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L envGroupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EnvGroupColumns = struct {
	ID                   string
	GUID                 string
	CreatedAt            string
	UpdatedAt            string
	Name                 string
	EnvironmentJSON      string
	Salt                 string
	EncryptionKeyLabel   string
	EncryptionIterations string
}{
	ID:                   "id",
	GUID:                 "guid",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
	Name:                 "name",
	EnvironmentJSON:      "environment_json",
	Salt:                 "salt",
	EncryptionKeyLabel:   "encryption_key_label",
	EncryptionIterations: "encryption_iterations",
}

var EnvGroupTableColumns = struct {
	ID                   string
	GUID                 string
	CreatedAt            string
	UpdatedAt            string
	Name                 string
	EnvironmentJSON      string
	Salt                 string
	EncryptionKeyLabel   string
	EncryptionIterations string
}{
	ID:                   "env_groups.id",
	GUID:                 "env_groups.guid",
	CreatedAt:            "env_groups.created_at",
	UpdatedAt:            "env_groups.updated_at",
	Name:                 "env_groups.name",
	EnvironmentJSON:      "env_groups.environment_json",
	Salt:                 "env_groups.salt",
	EncryptionKeyLabel:   "env_groups.encryption_key_label",
	EncryptionIterations: "env_groups.encryption_iterations",
}

// Generated where

var EnvGroupWhere = struct {
	ID                   whereHelperint
	GUID                 whereHelperstring
	CreatedAt            whereHelpertime_Time
	UpdatedAt            whereHelpernull_Time
	Name                 whereHelperstring
	EnvironmentJSON      whereHelpernull_String
	Salt                 whereHelpernull_String
	EncryptionKeyLabel   whereHelpernull_String
	EncryptionIterations whereHelperint
}{
	ID:                   whereHelperint{field: "`env_groups`.`id`"},
	GUID:                 whereHelperstring{field: "`env_groups`.`guid`"},
	CreatedAt:            whereHelpertime_Time{field: "`env_groups`.`created_at`"},
	UpdatedAt:            whereHelpernull_Time{field: "`env_groups`.`updated_at`"},
	Name:                 whereHelperstring{field: "`env_groups`.`name`"},
	EnvironmentJSON:      whereHelpernull_String{field: "`env_groups`.`environment_json`"},
	Salt:                 whereHelpernull_String{field: "`env_groups`.`salt`"},
	EncryptionKeyLabel:   whereHelpernull_String{field: "`env_groups`.`encryption_key_label`"},
	EncryptionIterations: whereHelperint{field: "`env_groups`.`encryption_iterations`"},
}

// EnvGroupRels is where relationship names are stored.
var EnvGroupRels = struct {
}{}

// envGroupR is where relationships are stored.
type envGroupR struct {
}

// NewStruct creates a new relationship struct
func (*envGroupR) NewStruct() *envGroupR {
	return &envGroupR{}
}

// envGroupL is where Load methods for each relationship are stored.
type envGroupL struct{}

var (
	envGroupAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "environment_json", "salt", "encryption_key_label", "encryption_iterations"}
	envGroupColumnsWithoutDefault = []string{"guid", "updated_at", "name", "environment_json", "salt", "encryption_key_label"}
	envGroupColumnsWithDefault    = []string{"id", "created_at", "encryption_iterations"}
	envGroupPrimaryKeyColumns     = []string{"id"}
)

type (
	// EnvGroupSlice is an alias for a slice of pointers to EnvGroup.
	// This should almost always be used instead of []EnvGroup.
	EnvGroupSlice []*EnvGroup

	envGroupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	envGroupType                 = reflect.TypeOf(&EnvGroup{})
	envGroupMapping              = queries.MakeStructMapping(envGroupType)
	envGroupPrimaryKeyMapping, _ = queries.BindMapping(envGroupType, envGroupMapping, envGroupPrimaryKeyColumns)
	envGroupInsertCacheMut       sync.RWMutex
	envGroupInsertCache          = make(map[string]insertCache)
	envGroupUpdateCacheMut       sync.RWMutex
	envGroupUpdateCache          = make(map[string]updateCache)
	envGroupUpsertCacheMut       sync.RWMutex
	envGroupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

type EnvGroupFinisher interface {
	One(ctx context.Context, exec boil.ContextExecutor) (*EnvGroup, error)
	Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	All(ctx context.Context, exec boil.ContextExecutor) (EnvGroupSlice, error)
	Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)
}

// One returns a single envGroup record from the query.
func (q envGroupQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EnvGroup, error) {
	o := &EnvGroup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for env_groups")
	}

	return o, nil
}

// All returns all EnvGroup records from the query.
func (q envGroupQuery) All(ctx context.Context, exec boil.ContextExecutor) (EnvGroupSlice, error) {
	var o []*EnvGroup

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EnvGroup slice")
	}

	return o, nil
}

// Count returns the count of all EnvGroup records in the query.
func (q envGroupQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count env_groups rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q envGroupQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if env_groups exists")
	}

	return count > 0, nil
}

// EnvGroups retrieves all the records using an executor.
func EnvGroups(mods ...qm.QueryMod) envGroupQuery {
	mods = append(mods, qm.From("`env_groups`"))
	return envGroupQuery{NewQuery(mods...)}
}

type EnvGroupFinder interface {
	FindEnvGroup(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*EnvGroup, error)
}

// FindEnvGroup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEnvGroup(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*EnvGroup, error) {
	envGroupObj := &EnvGroup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `env_groups` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, envGroupObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from env_groups")
	}

	return envGroupObj, nil
}

type EnvGroupInserter interface {
	Insert(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (q envGroupQuery) Insert(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no env_groups provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(envGroupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	envGroupInsertCacheMut.RLock()
	cache, cached := envGroupInsertCache[key]
	envGroupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			envGroupAllColumns,
			envGroupColumnsWithDefault,
			envGroupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(envGroupType, envGroupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(envGroupType, envGroupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `env_groups` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `env_groups` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `env_groups` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, envGroupPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into env_groups")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == envGroupMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for env_groups")
	}

CacheNoHooks:
	if !cached {
		envGroupInsertCacheMut.Lock()
		envGroupInsertCache[key] = cache
		envGroupInsertCacheMut.Unlock()
	}

	return nil
}

type EnvGroupUpdater interface {
	Update(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)
	UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
	UpdateAllSlice(o EnvGroupSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
}

// Update uses an executor to update the EnvGroup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (q envGroupQuery) Update(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	envGroupUpdateCacheMut.RLock()
	cache, cached := envGroupUpdateCache[key]
	envGroupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			envGroupAllColumns,
			envGroupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update env_groups, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `env_groups` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, envGroupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(envGroupType, envGroupMapping, append(wl, envGroupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update env_groups row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for env_groups")
	}

	if !cached {
		envGroupUpdateCacheMut.Lock()
		envGroupUpdateCache[key] = cache
		envGroupUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q envGroupQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for env_groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for env_groups")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (q envGroupQuery) UpdateAllSlice(o EnvGroupSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), envGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `env_groups` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, envGroupPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in envGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all envGroup")
	}
	return rowsAff, nil
}

type EnvGroupDeleter interface {
	Delete(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAllSlice(o EnvGroupSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)
}

// Delete deletes a single EnvGroup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (q envGroupQuery) Delete(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EnvGroup provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), envGroupPrimaryKeyMapping)
	sql := "DELETE FROM `env_groups` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from env_groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for env_groups")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q envGroupQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no envGroupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from env_groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for env_groups")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (q envGroupQuery) DeleteAllSlice(o EnvGroupSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), envGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `env_groups` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, envGroupPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from envGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for env_groups")
	}

	return rowsAff, nil
}

type EnvGroupReloader interface {
	Reload(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor) error
	ReloadAll(o *EnvGroupSlice, ctx context.Context, exec boil.ContextExecutor) error
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (q envGroupQuery) Reload(o *EnvGroup, ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEnvGroup(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (q envGroupQuery) ReloadAll(o *EnvGroupSlice, ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EnvGroupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), envGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `env_groups`.* FROM `env_groups` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, envGroupPrimaryKeyColumns, len(*o))

	query := queries.Raw(sql, args...)

	err := query.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EnvGroupSlice")
	}

	*o = slice

	return nil
}

// EnvGroupExists checks if the EnvGroup row exists.
func EnvGroupExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `env_groups` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if env_groups exists")
	}

	return exists, nil
}
