// +build psql
//go:generate mockgen -source=$GOFILE -destination=mocks/deployments.go
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Deployment is an object representing the database table.
type Deployment struct {
	ID                              int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	GUID                            string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	CreatedAt                       time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                       null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	State                           null.String `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`
	AppGUID                         null.String `boil:"app_guid" json:"app_guid,omitempty" toml:"app_guid" yaml:"app_guid,omitempty"`
	DropletGUID                     null.String `boil:"droplet_guid" json:"droplet_guid,omitempty" toml:"droplet_guid" yaml:"droplet_guid,omitempty"`
	DeployingWebProcessGUID         null.String `boil:"deploying_web_process_guid" json:"deploying_web_process_guid,omitempty" toml:"deploying_web_process_guid" yaml:"deploying_web_process_guid,omitempty"`
	PreviousDropletGUID             null.String `boil:"previous_droplet_guid" json:"previous_droplet_guid,omitempty" toml:"previous_droplet_guid" yaml:"previous_droplet_guid,omitempty"`
	OriginalWebProcessInstanceCount int         `boil:"original_web_process_instance_count" json:"original_web_process_instance_count" toml:"original_web_process_instance_count" yaml:"original_web_process_instance_count"`
	RevisionGUID                    null.String `boil:"revision_guid" json:"revision_guid,omitempty" toml:"revision_guid" yaml:"revision_guid,omitempty"`
	RevisionVersion                 null.Int    `boil:"revision_version" json:"revision_version,omitempty" toml:"revision_version" yaml:"revision_version,omitempty"`
	LastHealthyAt                   time.Time   `boil:"last_healthy_at" json:"last_healthy_at" toml:"last_healthy_at" yaml:"last_healthy_at"`
	StatusValue                     null.String `boil:"status_value" json:"status_value,omitempty" toml:"status_value" yaml:"status_value,omitempty"`
	StatusReason                    null.String `boil:"status_reason" json:"status_reason,omitempty" toml:"status_reason" yaml:"status_reason,omitempty"`
	Strategy                        string      `boil:"strategy" json:"strategy" toml:"strategy" yaml:"strategy"`

	R *deploymentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deploymentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeploymentColumns = struct {
	ID                              string
	GUID                            string
	CreatedAt                       string
	UpdatedAt                       string
	State                           string
	AppGUID                         string
	DropletGUID                     string
	DeployingWebProcessGUID         string
	PreviousDropletGUID             string
	OriginalWebProcessInstanceCount string
	RevisionGUID                    string
	RevisionVersion                 string
	LastHealthyAt                   string
	StatusValue                     string
	StatusReason                    string
	Strategy                        string
}{
	ID:                              "id",
	GUID:                            "guid",
	CreatedAt:                       "created_at",
	UpdatedAt:                       "updated_at",
	State:                           "state",
	AppGUID:                         "app_guid",
	DropletGUID:                     "droplet_guid",
	DeployingWebProcessGUID:         "deploying_web_process_guid",
	PreviousDropletGUID:             "previous_droplet_guid",
	OriginalWebProcessInstanceCount: "original_web_process_instance_count",
	RevisionGUID:                    "revision_guid",
	RevisionVersion:                 "revision_version",
	LastHealthyAt:                   "last_healthy_at",
	StatusValue:                     "status_value",
	StatusReason:                    "status_reason",
	Strategy:                        "strategy",
}

var DeploymentTableColumns = struct {
	ID                              string
	GUID                            string
	CreatedAt                       string
	UpdatedAt                       string
	State                           string
	AppGUID                         string
	DropletGUID                     string
	DeployingWebProcessGUID         string
	PreviousDropletGUID             string
	OriginalWebProcessInstanceCount string
	RevisionGUID                    string
	RevisionVersion                 string
	LastHealthyAt                   string
	StatusValue                     string
	StatusReason                    string
	Strategy                        string
}{
	ID:                              "deployments.id",
	GUID:                            "deployments.guid",
	CreatedAt:                       "deployments.created_at",
	UpdatedAt:                       "deployments.updated_at",
	State:                           "deployments.state",
	AppGUID:                         "deployments.app_guid",
	DropletGUID:                     "deployments.droplet_guid",
	DeployingWebProcessGUID:         "deployments.deploying_web_process_guid",
	PreviousDropletGUID:             "deployments.previous_droplet_guid",
	OriginalWebProcessInstanceCount: "deployments.original_web_process_instance_count",
	RevisionGUID:                    "deployments.revision_guid",
	RevisionVersion:                 "deployments.revision_version",
	LastHealthyAt:                   "deployments.last_healthy_at",
	StatusValue:                     "deployments.status_value",
	StatusReason:                    "deployments.status_reason",
	Strategy:                        "deployments.strategy",
}

// Generated where

var DeploymentWhere = struct {
	ID                              whereHelperint
	GUID                            whereHelperstring
	CreatedAt                       whereHelpertime_Time
	UpdatedAt                       whereHelpernull_Time
	State                           whereHelpernull_String
	AppGUID                         whereHelpernull_String
	DropletGUID                     whereHelpernull_String
	DeployingWebProcessGUID         whereHelpernull_String
	PreviousDropletGUID             whereHelpernull_String
	OriginalWebProcessInstanceCount whereHelperint
	RevisionGUID                    whereHelpernull_String
	RevisionVersion                 whereHelpernull_Int
	LastHealthyAt                   whereHelpertime_Time
	StatusValue                     whereHelpernull_String
	StatusReason                    whereHelpernull_String
	Strategy                        whereHelperstring
}{
	ID:                              whereHelperint{field: "\"deployments\".\"id\""},
	GUID:                            whereHelperstring{field: "\"deployments\".\"guid\""},
	CreatedAt:                       whereHelpertime_Time{field: "\"deployments\".\"created_at\""},
	UpdatedAt:                       whereHelpernull_Time{field: "\"deployments\".\"updated_at\""},
	State:                           whereHelpernull_String{field: "\"deployments\".\"state\""},
	AppGUID:                         whereHelpernull_String{field: "\"deployments\".\"app_guid\""},
	DropletGUID:                     whereHelpernull_String{field: "\"deployments\".\"droplet_guid\""},
	DeployingWebProcessGUID:         whereHelpernull_String{field: "\"deployments\".\"deploying_web_process_guid\""},
	PreviousDropletGUID:             whereHelpernull_String{field: "\"deployments\".\"previous_droplet_guid\""},
	OriginalWebProcessInstanceCount: whereHelperint{field: "\"deployments\".\"original_web_process_instance_count\""},
	RevisionGUID:                    whereHelpernull_String{field: "\"deployments\".\"revision_guid\""},
	RevisionVersion:                 whereHelpernull_Int{field: "\"deployments\".\"revision_version\""},
	LastHealthyAt:                   whereHelpertime_Time{field: "\"deployments\".\"last_healthy_at\""},
	StatusValue:                     whereHelpernull_String{field: "\"deployments\".\"status_value\""},
	StatusReason:                    whereHelpernull_String{field: "\"deployments\".\"status_reason\""},
	Strategy:                        whereHelperstring{field: "\"deployments\".\"strategy\""},
}

// DeploymentRels is where relationship names are stored.
var DeploymentRels = struct {
	App                           string
	ResourceDeploymentAnnotations string
	ResourceDeploymentLabels      string
	DeploymentProcesses           string
}{
	App:                           "App",
	ResourceDeploymentAnnotations: "ResourceDeploymentAnnotations",
	ResourceDeploymentLabels:      "ResourceDeploymentLabels",
	DeploymentProcesses:           "DeploymentProcesses",
}

// deploymentR is where relationships are stored.
type deploymentR struct {
	App                           *App                      `boil:"App" json:"App" toml:"App" yaml:"App"`
	ResourceDeploymentAnnotations DeploymentAnnotationSlice `boil:"ResourceDeploymentAnnotations" json:"ResourceDeploymentAnnotations" toml:"ResourceDeploymentAnnotations" yaml:"ResourceDeploymentAnnotations"`
	ResourceDeploymentLabels      DeploymentLabelSlice      `boil:"ResourceDeploymentLabels" json:"ResourceDeploymentLabels" toml:"ResourceDeploymentLabels" yaml:"ResourceDeploymentLabels"`
	DeploymentProcesses           DeploymentProcessSlice    `boil:"DeploymentProcesses" json:"DeploymentProcesses" toml:"DeploymentProcesses" yaml:"DeploymentProcesses"`
}

// NewStruct creates a new relationship struct
func (*deploymentR) NewStruct() *deploymentR {
	return &deploymentR{}
}

// deploymentL is where Load methods for each relationship are stored.
type deploymentL struct{}

var (
	deploymentAllColumns            = []string{"id", "guid", "created_at", "updated_at", "state", "app_guid", "droplet_guid", "deploying_web_process_guid", "previous_droplet_guid", "original_web_process_instance_count", "revision_guid", "revision_version", "last_healthy_at", "status_value", "status_reason", "strategy"}
	deploymentColumnsWithoutDefault = []string{"guid", "updated_at", "state", "app_guid", "droplet_guid", "deploying_web_process_guid", "previous_droplet_guid", "original_web_process_instance_count", "revision_guid", "revision_version", "status_value", "status_reason"}
	deploymentColumnsWithDefault    = []string{"id", "created_at", "last_healthy_at", "strategy"}
	deploymentPrimaryKeyColumns     = []string{"id"}
)

type (
	// DeploymentSlice is an alias for a slice of pointers to Deployment.
	// This should almost always be used instead of []Deployment.
	DeploymentSlice []*Deployment

	DeploymentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deploymentType                 = reflect.TypeOf(&Deployment{})
	deploymentMapping              = queries.MakeStructMapping(deploymentType)
	deploymentPrimaryKeyMapping, _ = queries.BindMapping(deploymentType, deploymentMapping, deploymentPrimaryKeyColumns)
	deploymentInsertCacheMut       sync.RWMutex
	deploymentInsertCache          = make(map[string]insertCache)
	deploymentUpdateCacheMut       sync.RWMutex
	deploymentUpdateCache          = make(map[string]updateCache)
	deploymentUpsertCacheMut       sync.RWMutex
	deploymentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

type DeploymentFinisher interface {
	One(ctx context.Context, exec boil.ContextExecutor) (*Deployment, error)
	Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	All(ctx context.Context, exec boil.ContextExecutor) (DeploymentSlice, error)
	Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)
}

// One returns a single deployment record from the query.
func (q DeploymentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Deployment, error) {
	o := &Deployment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for deployments")
	}

	return o, nil
}

// All returns all Deployment records from the query.
func (q DeploymentQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeploymentSlice, error) {
	var o []*Deployment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Deployment slice")
	}

	return o, nil
}

// Count returns the count of all Deployment records in the query.
func (q DeploymentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count deployments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q DeploymentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if deployments exists")
	}

	return count > 0, nil
}

// App pointed to by the foreign key.
func (q DeploymentQuery) App(o *Deployment, mods ...qm.QueryMod) AppQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"guid\" = ?", o.AppGUID),
	}

	queryMods = append(queryMods, mods...)

	query := Apps(queryMods...)
	queries.SetFrom(query.Query, "\"apps\"")

	return query
}

// ResourceDeploymentAnnotations retrieves all the deployment_annotation's DeploymentAnnotations with an executor via resource_guid column.
func (q DeploymentQuery) ResourceDeploymentAnnotations(o *Deployment, mods ...qm.QueryMod) DeploymentAnnotationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"deployment_annotations\".\"resource_guid\"=?", o.GUID),
	)

	query := DeploymentAnnotations(queryMods...)
	queries.SetFrom(query.Query, "\"deployment_annotations\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"deployment_annotations\".*"})
	}

	return query
}

// ResourceDeploymentLabels retrieves all the deployment_label's DeploymentLabels with an executor via resource_guid column.
func (q DeploymentQuery) ResourceDeploymentLabels(o *Deployment, mods ...qm.QueryMod) DeploymentLabelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"deployment_labels\".\"resource_guid\"=?", o.GUID),
	)

	query := DeploymentLabels(queryMods...)
	queries.SetFrom(query.Query, "\"deployment_labels\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"deployment_labels\".*"})
	}

	return query
}

// DeploymentProcesses retrieves all the deployment_process's DeploymentProcesses with an executor.
func (q DeploymentQuery) DeploymentProcesses(o *Deployment, mods ...qm.QueryMod) DeploymentProcessQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"deployment_processes\".\"deployment_guid\"=?", o.GUID),
	)

	query := DeploymentProcesses(queryMods...)
	queries.SetFrom(query.Query, "\"deployment_processes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"deployment_processes\".*"})
	}

	return query
}

// LoadApp allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deploymentL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeployment interface{}, mods queries.Applicator) error {
	var slice []*Deployment
	var object *Deployment

	if singular {
		object = maybeDeployment.(*Deployment)
	} else {
		slice = *maybeDeployment.(*[]*Deployment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deploymentR{}
		}
		if !queries.IsNil(object.AppGUID) {
			args = append(args, object.AppGUID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deploymentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AppGUID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AppGUID) {
				args = append(args, obj.AppGUID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`apps`),
		qm.WhereIn(`apps.guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load App")
	}

	var resultSlice []*App
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice App")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for apps")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for apps")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.App = foreign
		if foreign.R == nil {
			foreign.R = &appR{}
		}
		foreign.R.Deployments = append(foreign.R.Deployments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AppGUID, foreign.GUID) {
				local.R.App = foreign
				if foreign.R == nil {
					foreign.R = &appR{}
				}
				foreign.R.Deployments = append(foreign.R.Deployments, local)
				break
			}
		}
	}

	return nil
}

// LoadResourceDeploymentAnnotations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (deploymentL) LoadResourceDeploymentAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeployment interface{}, mods queries.Applicator) error {
	var slice []*Deployment
	var object *Deployment

	if singular {
		object = maybeDeployment.(*Deployment)
	} else {
		slice = *maybeDeployment.(*[]*Deployment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deploymentR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deploymentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`deployment_annotations`),
		qm.WhereIn(`deployment_annotations.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load deployment_annotations")
	}

	var resultSlice []*DeploymentAnnotation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice deployment_annotations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on deployment_annotations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for deployment_annotations")
	}

	if singular {
		object.R.ResourceDeploymentAnnotations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deploymentAnnotationR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceDeploymentAnnotations = append(local.R.ResourceDeploymentAnnotations, foreign)
				if foreign.R == nil {
					foreign.R = &deploymentAnnotationR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// LoadResourceDeploymentLabels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (deploymentL) LoadResourceDeploymentLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeployment interface{}, mods queries.Applicator) error {
	var slice []*Deployment
	var object *Deployment

	if singular {
		object = maybeDeployment.(*Deployment)
	} else {
		slice = *maybeDeployment.(*[]*Deployment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deploymentR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deploymentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`deployment_labels`),
		qm.WhereIn(`deployment_labels.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load deployment_labels")
	}

	var resultSlice []*DeploymentLabel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice deployment_labels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on deployment_labels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for deployment_labels")
	}

	if singular {
		object.R.ResourceDeploymentLabels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deploymentLabelR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceDeploymentLabels = append(local.R.ResourceDeploymentLabels, foreign)
				if foreign.R == nil {
					foreign.R = &deploymentLabelR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// LoadDeploymentProcesses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (deploymentL) LoadDeploymentProcesses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeployment interface{}, mods queries.Applicator) error {
	var slice []*Deployment
	var object *Deployment

	if singular {
		object = maybeDeployment.(*Deployment)
	} else {
		slice = *maybeDeployment.(*[]*Deployment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deploymentR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deploymentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`deployment_processes`),
		qm.WhereIn(`deployment_processes.deployment_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load deployment_processes")
	}

	var resultSlice []*DeploymentProcess
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice deployment_processes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on deployment_processes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for deployment_processes")
	}

	if singular {
		object.R.DeploymentProcesses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deploymentProcessR{}
			}
			foreign.R.Deployment = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.DeploymentGUID) {
				local.R.DeploymentProcesses = append(local.R.DeploymentProcesses, foreign)
				if foreign.R == nil {
					foreign.R = &deploymentProcessR{}
				}
				foreign.R.Deployment = local
				break
			}
		}
	}

	return nil
}

// SetApp of the deployment to the related item.
// Sets o.R.App to related.
// Adds o to related.R.Deployments.
func (q DeploymentQuery) SetApp(o *Deployment, ctx context.Context, exec boil.ContextExecutor, insert bool, related *App) error {
	var err error
	if insert {
		if err = Apps().Insert(related, ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"deployments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"app_guid"}),
		strmangle.WhereClause("\"", "\"", 2, deploymentPrimaryKeyColumns),
	)
	values := []interface{}{related.GUID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AppGUID, related.GUID)
	if o.R == nil {
		o.R = &deploymentR{
			App: related,
		}
	} else {
		o.R.App = related
	}

	if related.R == nil {
		related.R = &appR{
			Deployments: DeploymentSlice{o},
		}
	} else {
		related.R.Deployments = append(related.R.Deployments, o)
	}

	return nil
}

// RemoveApp relationship.
// Sets o.R.App to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (q DeploymentQuery) RemoveApp(o *Deployment, ctx context.Context, exec boil.ContextExecutor, related *App) error {
	var err error

	queries.SetScanner(&o.AppGUID, nil)
	if _, err = q.Update(o, ctx, exec, boil.Whitelist("app_guid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.App = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Deployments {
		if queries.Equal(o.AppGUID, ri.AppGUID) {
			continue
		}

		ln := len(related.R.Deployments)
		if ln > 1 && i < ln-1 {
			related.R.Deployments[i] = related.R.Deployments[ln-1]
		}
		related.R.Deployments = related.R.Deployments[:ln-1]
		break
	}
	return nil
}

// AddResourceDeploymentAnnotations adds the given related objects to the existing relationships
// of the deployment, optionally inserting them as new records.
// Appends related to o.R.ResourceDeploymentAnnotations.
// Sets related.R.Resource appropriately.
func (q DeploymentQuery) AddResourceDeploymentAnnotations(o *Deployment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DeploymentAnnotation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = DeploymentAnnotations().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"deployment_annotations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"resource_guid"}),
				strmangle.WhereClause("\"", "\"", 2, deploymentAnnotationPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &deploymentR{
			ResourceDeploymentAnnotations: related,
		}
	} else {
		o.R.ResourceDeploymentAnnotations = append(o.R.ResourceDeploymentAnnotations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deploymentAnnotationR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceDeploymentAnnotations removes all previously related items of the
// deployment replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceDeploymentAnnotations accordingly.
// Replaces o.R.ResourceDeploymentAnnotations with related.
// Sets related.R.Resource's ResourceDeploymentAnnotations accordingly.
func (q DeploymentQuery) SetResourceDeploymentAnnotations(o *Deployment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DeploymentAnnotation) error {
	query := "update \"deployment_annotations\" set \"resource_guid\" = null where \"resource_guid\" = $1"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceDeploymentAnnotations {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceDeploymentAnnotations = nil
	}
	return q.AddResourceDeploymentAnnotations(o, ctx, exec, insert, related...)
}

// RemoveResourceDeploymentAnnotations relationships from objects passed in.
// Removes related items from R.ResourceDeploymentAnnotations (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (q DeploymentQuery) RemoveResourceDeploymentAnnotations(o *Deployment, ctx context.Context, exec boil.ContextExecutor, related ...*DeploymentAnnotation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = DeploymentAnnotations().Update(rel, ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceDeploymentAnnotations {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceDeploymentAnnotations)
			if ln > 1 && i < ln-1 {
				o.R.ResourceDeploymentAnnotations[i] = o.R.ResourceDeploymentAnnotations[ln-1]
			}
			o.R.ResourceDeploymentAnnotations = o.R.ResourceDeploymentAnnotations[:ln-1]
			break
		}
	}

	return nil
}

// AddResourceDeploymentLabels adds the given related objects to the existing relationships
// of the deployment, optionally inserting them as new records.
// Appends related to o.R.ResourceDeploymentLabels.
// Sets related.R.Resource appropriately.
func (q DeploymentQuery) AddResourceDeploymentLabels(o *Deployment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DeploymentLabel) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = DeploymentLabels().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"deployment_labels\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"resource_guid"}),
				strmangle.WhereClause("\"", "\"", 2, deploymentLabelPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &deploymentR{
			ResourceDeploymentLabels: related,
		}
	} else {
		o.R.ResourceDeploymentLabels = append(o.R.ResourceDeploymentLabels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deploymentLabelR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceDeploymentLabels removes all previously related items of the
// deployment replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceDeploymentLabels accordingly.
// Replaces o.R.ResourceDeploymentLabels with related.
// Sets related.R.Resource's ResourceDeploymentLabels accordingly.
func (q DeploymentQuery) SetResourceDeploymentLabels(o *Deployment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DeploymentLabel) error {
	query := "update \"deployment_labels\" set \"resource_guid\" = null where \"resource_guid\" = $1"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceDeploymentLabels {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceDeploymentLabels = nil
	}
	return q.AddResourceDeploymentLabels(o, ctx, exec, insert, related...)
}

// RemoveResourceDeploymentLabels relationships from objects passed in.
// Removes related items from R.ResourceDeploymentLabels (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (q DeploymentQuery) RemoveResourceDeploymentLabels(o *Deployment, ctx context.Context, exec boil.ContextExecutor, related ...*DeploymentLabel) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = DeploymentLabels().Update(rel, ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceDeploymentLabels {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceDeploymentLabels)
			if ln > 1 && i < ln-1 {
				o.R.ResourceDeploymentLabels[i] = o.R.ResourceDeploymentLabels[ln-1]
			}
			o.R.ResourceDeploymentLabels = o.R.ResourceDeploymentLabels[:ln-1]
			break
		}
	}

	return nil
}

// AddDeploymentProcesses adds the given related objects to the existing relationships
// of the deployment, optionally inserting them as new records.
// Appends related to o.R.DeploymentProcesses.
// Sets related.R.Deployment appropriately.
func (q DeploymentQuery) AddDeploymentProcesses(o *Deployment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DeploymentProcess) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DeploymentGUID, o.GUID)
			if err = DeploymentProcesses().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"deployment_processes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"deployment_guid"}),
				strmangle.WhereClause("\"", "\"", 2, deploymentProcessPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DeploymentGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &deploymentR{
			DeploymentProcesses: related,
		}
	} else {
		o.R.DeploymentProcesses = append(o.R.DeploymentProcesses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deploymentProcessR{
				Deployment: o,
			}
		} else {
			rel.R.Deployment = o
		}
	}
	return nil
}

// SetDeploymentProcesses removes all previously related items of the
// deployment replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Deployment's DeploymentProcesses accordingly.
// Replaces o.R.DeploymentProcesses with related.
// Sets related.R.Deployment's DeploymentProcesses accordingly.
func (q DeploymentQuery) SetDeploymentProcesses(o *Deployment, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DeploymentProcess) error {
	query := "update \"deployment_processes\" set \"deployment_guid\" = null where \"deployment_guid\" = $1"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DeploymentProcesses {
			queries.SetScanner(&rel.DeploymentGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Deployment = nil
		}

		o.R.DeploymentProcesses = nil
	}
	return q.AddDeploymentProcesses(o, ctx, exec, insert, related...)
}

// RemoveDeploymentProcesses relationships from objects passed in.
// Removes related items from R.DeploymentProcesses (uses pointer comparison, removal does not keep order)
// Sets related.R.Deployment.
func (q DeploymentQuery) RemoveDeploymentProcesses(o *Deployment, ctx context.Context, exec boil.ContextExecutor, related ...*DeploymentProcess) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DeploymentGUID, nil)
		if rel.R != nil {
			rel.R.Deployment = nil
		}
		if _, err = DeploymentProcesses().Update(rel, ctx, exec, boil.Whitelist("deployment_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DeploymentProcesses {
			if rel != ri {
				continue
			}

			ln := len(o.R.DeploymentProcesses)
			if ln > 1 && i < ln-1 {
				o.R.DeploymentProcesses[i] = o.R.DeploymentProcesses[ln-1]
			}
			o.R.DeploymentProcesses = o.R.DeploymentProcesses[:ln-1]
			break
		}
	}

	return nil
}

// Deployments retrieves all the records using an executor.
func Deployments(mods ...qm.QueryMod) DeploymentQuery {
	mods = append(mods, qm.From("\"deployments\""))
	return DeploymentQuery{NewQuery(mods...)}
}

type DeploymentFinder interface {
	FindDeployment(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Deployment, error)
}

// FindDeployment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeployment(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Deployment, error) {
	deploymentObj := &Deployment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"deployments\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, deploymentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from deployments")
	}

	return deploymentObj, nil
}

type DeploymentInserter interface {
	Insert(o *Deployment, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (q DeploymentQuery) Insert(o *Deployment, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no deployments provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(deploymentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deploymentInsertCacheMut.RLock()
	cache, cached := deploymentInsertCache[key]
	deploymentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deploymentAllColumns,
			deploymentColumnsWithDefault,
			deploymentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(deploymentType, deploymentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deploymentType, deploymentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"deployments\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"deployments\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into deployments")
	}

	if !cached {
		deploymentInsertCacheMut.Lock()
		deploymentInsertCache[key] = cache
		deploymentInsertCacheMut.Unlock()
	}

	return nil
}

type DeploymentUpdater interface {
	Update(o *Deployment, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)
	UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
	UpdateAllSlice(o DeploymentSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
}

// Update uses an executor to update the Deployment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (q DeploymentQuery) Update(o *Deployment, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	deploymentUpdateCacheMut.RLock()
	cache, cached := deploymentUpdateCache[key]
	deploymentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deploymentAllColumns,
			deploymentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update deployments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"deployments\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, deploymentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deploymentType, deploymentMapping, append(wl, deploymentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update deployments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for deployments")
	}

	if !cached {
		deploymentUpdateCacheMut.Lock()
		deploymentUpdateCache[key] = cache
		deploymentUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q DeploymentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for deployments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for deployments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (q DeploymentQuery) UpdateAllSlice(o DeploymentSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deploymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"deployments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, deploymentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in deployment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all deployment")
	}
	return rowsAff, nil
}

type DeploymentDeleter interface {
	Delete(o *Deployment, ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAllSlice(o DeploymentSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)
}

// Delete deletes a single Deployment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (q DeploymentQuery) Delete(o *Deployment, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Deployment provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), deploymentPrimaryKeyMapping)
	sql := "DELETE FROM \"deployments\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from deployments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for deployments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q DeploymentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no deploymentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from deployments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for deployments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (q DeploymentQuery) DeleteAllSlice(o DeploymentSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deploymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"deployments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deploymentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from deployment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for deployments")
	}

	return rowsAff, nil
}

type DeploymentReloader interface {
	Reload(o *Deployment, ctx context.Context, exec boil.ContextExecutor) error
	ReloadAll(o *DeploymentSlice, ctx context.Context, exec boil.ContextExecutor) error
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (q DeploymentQuery) Reload(o *Deployment, ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeployment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (q DeploymentQuery) ReloadAll(o *DeploymentSlice, ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeploymentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deploymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"deployments\".* FROM \"deployments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deploymentPrimaryKeyColumns, len(*o))

	query := queries.Raw(sql, args...)

	err := query.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DeploymentSlice")
	}

	*o = slice

	return nil
}

// DeploymentExists checks if the Deployment row exists.
func DeploymentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"deployments\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if deployments exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Deployment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no deployments provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(deploymentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deploymentUpsertCacheMut.RLock()
	cache, cached := deploymentUpsertCache[key]
	deploymentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			deploymentAllColumns,
			deploymentColumnsWithDefault,
			deploymentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			deploymentAllColumns,
			deploymentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert deployments, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(deploymentPrimaryKeyColumns))
			copy(conflict, deploymentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"deployments\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(deploymentType, deploymentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deploymentType, deploymentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert deployments")
	}

	if !cached {
		deploymentUpsertCacheMut.Lock()
		deploymentUpsertCache[key] = cache
		deploymentUpsertCacheMut.Unlock()
	}

	return nil
}
