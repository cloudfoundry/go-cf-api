// +build psql,db
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testServiceBrokers(t *testing.T) {
	t.Parallel()

	query := ServiceBrokers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testServiceBrokersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBroker{}
	if err = randomize.Struct(seed, o, serviceBrokerDBTypes, true, serviceBrokerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServiceBrokers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServiceBrokersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBroker{}
	if err = randomize.Struct(seed, o, serviceBrokerDBTypes, true, serviceBrokerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ServiceBrokers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServiceBrokers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServiceBrokersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBroker{}
	if err = randomize.Struct(seed, o, serviceBrokerDBTypes, true, serviceBrokerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServiceBrokerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServiceBrokers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServiceBrokersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBroker{}
	if err = randomize.Struct(seed, o, serviceBrokerDBTypes, true, serviceBrokerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ServiceBrokerExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ServiceBroker exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ServiceBrokerExists to return true, but got false.")
	}
}

func testServiceBrokersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBroker{}
	if err = randomize.Struct(seed, o, serviceBrokerDBTypes, true, serviceBrokerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	serviceBrokerFound, err := FindServiceBroker(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if serviceBrokerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testServiceBrokersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBroker{}
	if err = randomize.Struct(seed, o, serviceBrokerDBTypes, true, serviceBrokerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ServiceBrokers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testServiceBrokersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBroker{}
	if err = randomize.Struct(seed, o, serviceBrokerDBTypes, true, serviceBrokerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ServiceBrokers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testServiceBrokersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	serviceBrokerOne := &ServiceBroker{}
	serviceBrokerTwo := &ServiceBroker{}
	if err = randomize.Struct(seed, serviceBrokerOne, serviceBrokerDBTypes, false, serviceBrokerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}
	if err = randomize.Struct(seed, serviceBrokerTwo, serviceBrokerDBTypes, false, serviceBrokerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serviceBrokerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serviceBrokerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServiceBrokers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testServiceBrokersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	serviceBrokerOne := &ServiceBroker{}
	serviceBrokerTwo := &ServiceBroker{}
	if err = randomize.Struct(seed, serviceBrokerOne, serviceBrokerDBTypes, false, serviceBrokerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}
	if err = randomize.Struct(seed, serviceBrokerTwo, serviceBrokerDBTypes, false, serviceBrokerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serviceBrokerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serviceBrokerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServiceBrokers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func serviceBrokerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBroker) error {
	*o = ServiceBroker{}
	return nil
}

func serviceBrokerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBroker) error {
	*o = ServiceBroker{}
	return nil
}

func serviceBrokerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBroker) error {
	*o = ServiceBroker{}
	return nil
}

func serviceBrokerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBroker) error {
	*o = ServiceBroker{}
	return nil
}

func serviceBrokerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBroker) error {
	*o = ServiceBroker{}
	return nil
}

func serviceBrokerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBroker) error {
	*o = ServiceBroker{}
	return nil
}

func serviceBrokerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBroker) error {
	*o = ServiceBroker{}
	return nil
}

func serviceBrokerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBroker) error {
	*o = ServiceBroker{}
	return nil
}

func serviceBrokerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServiceBroker) error {
	*o = ServiceBroker{}
	return nil
}

func testServiceBrokersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ServiceBroker{}
	o := &ServiceBroker{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, serviceBrokerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ServiceBroker object: %s", err)
	}

	AddServiceBrokerHook(boil.BeforeInsertHook, serviceBrokerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	serviceBrokerBeforeInsertHooks = []ServiceBrokerHook{}

	AddServiceBrokerHook(boil.AfterInsertHook, serviceBrokerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	serviceBrokerAfterInsertHooks = []ServiceBrokerHook{}

	AddServiceBrokerHook(boil.AfterSelectHook, serviceBrokerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	serviceBrokerAfterSelectHooks = []ServiceBrokerHook{}

	AddServiceBrokerHook(boil.BeforeUpdateHook, serviceBrokerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	serviceBrokerBeforeUpdateHooks = []ServiceBrokerHook{}

	AddServiceBrokerHook(boil.AfterUpdateHook, serviceBrokerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	serviceBrokerAfterUpdateHooks = []ServiceBrokerHook{}

	AddServiceBrokerHook(boil.BeforeDeleteHook, serviceBrokerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	serviceBrokerBeforeDeleteHooks = []ServiceBrokerHook{}

	AddServiceBrokerHook(boil.AfterDeleteHook, serviceBrokerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	serviceBrokerAfterDeleteHooks = []ServiceBrokerHook{}

	AddServiceBrokerHook(boil.BeforeUpsertHook, serviceBrokerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	serviceBrokerBeforeUpsertHooks = []ServiceBrokerHook{}

	AddServiceBrokerHook(boil.AfterUpsertHook, serviceBrokerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	serviceBrokerAfterUpsertHooks = []ServiceBrokerHook{}
}

func testServiceBrokersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBroker{}
	if err = randomize.Struct(seed, o, serviceBrokerDBTypes, true, serviceBrokerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServiceBrokers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServiceBrokersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBroker{}
	if err = randomize.Struct(seed, o, serviceBrokerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(serviceBrokerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ServiceBrokers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServiceBrokerToManyResourceServiceBrokerAnnotations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBroker
	var b, c ServiceBrokerAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerDBTypes, true, serviceBrokerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serviceBrokerAnnotationDBTypes, false, serviceBrokerAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceBrokerAnnotationDBTypes, false, serviceBrokerAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceServiceBrokerAnnotations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ServiceBrokerSlice{&a}
	if err = a.L.LoadResourceServiceBrokerAnnotations(ctx, tx, false, (*[]*ServiceBroker)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceServiceBrokerAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceServiceBrokerAnnotations = nil
	if err = a.L.LoadResourceServiceBrokerAnnotations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceServiceBrokerAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testServiceBrokerToManyResourceServiceBrokerLabels(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBroker
	var b, c ServiceBrokerLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerDBTypes, true, serviceBrokerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serviceBrokerLabelDBTypes, false, serviceBrokerLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceBrokerLabelDBTypes, false, serviceBrokerLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceServiceBrokerLabels().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ServiceBrokerSlice{&a}
	if err = a.L.LoadResourceServiceBrokerLabels(ctx, tx, false, (*[]*ServiceBroker)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceServiceBrokerLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceServiceBrokerLabels = nil
	if err = a.L.LoadResourceServiceBrokerLabels(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceServiceBrokerLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testServiceBrokerToManyFKServiceBrokerServiceBrokerUpdateRequests(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBroker
	var b, c ServiceBrokerUpdateRequest

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerDBTypes, true, serviceBrokerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serviceBrokerUpdateRequestDBTypes, false, serviceBrokerUpdateRequestColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceBrokerUpdateRequestDBTypes, false, serviceBrokerUpdateRequestColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.FKServiceBrokersID, a.ID)
	queries.Assign(&c.FKServiceBrokersID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FKServiceBrokerServiceBrokerUpdateRequests().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.FKServiceBrokersID, b.FKServiceBrokersID) {
			bFound = true
		}
		if queries.Equal(v.FKServiceBrokersID, c.FKServiceBrokersID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ServiceBrokerSlice{&a}
	if err = a.L.LoadFKServiceBrokerServiceBrokerUpdateRequests(ctx, tx, false, (*[]*ServiceBroker)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FKServiceBrokerServiceBrokerUpdateRequests); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FKServiceBrokerServiceBrokerUpdateRequests = nil
	if err = a.L.LoadFKServiceBrokerServiceBrokerUpdateRequests(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FKServiceBrokerServiceBrokerUpdateRequests); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testServiceBrokerToManyServices(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBroker
	var b, c Service

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerDBTypes, true, serviceBrokerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serviceDBTypes, false, serviceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceDBTypes, false, serviceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ServiceBrokerID, a.ID)
	queries.Assign(&c.ServiceBrokerID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Services().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ServiceBrokerID, b.ServiceBrokerID) {
			bFound = true
		}
		if queries.Equal(v.ServiceBrokerID, c.ServiceBrokerID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ServiceBrokerSlice{&a}
	if err = a.L.LoadServices(ctx, tx, false, (*[]*ServiceBroker)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Services); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Services = nil
	if err = a.L.LoadServices(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Services); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testServiceBrokerToManyAddOpResourceServiceBrokerAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBroker
	var b, c, d, e ServiceBrokerAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerDBTypes, false, strmangle.SetComplement(serviceBrokerPrimaryKeyColumns, serviceBrokerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBrokerAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBrokerAnnotationDBTypes, false, strmangle.SetComplement(serviceBrokerAnnotationPrimaryKeyColumns, serviceBrokerAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServiceBrokerAnnotation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceServiceBrokerAnnotations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceServiceBrokerAnnotations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceServiceBrokerAnnotations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceServiceBrokerAnnotations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testServiceBrokerToManySetOpResourceServiceBrokerAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBroker
	var b, c, d, e ServiceBrokerAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerDBTypes, false, strmangle.SetComplement(serviceBrokerPrimaryKeyColumns, serviceBrokerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBrokerAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBrokerAnnotationDBTypes, false, strmangle.SetComplement(serviceBrokerAnnotationPrimaryKeyColumns, serviceBrokerAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceServiceBrokerAnnotations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceServiceBrokerAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceServiceBrokerAnnotations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceServiceBrokerAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceServiceBrokerAnnotations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceServiceBrokerAnnotations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testServiceBrokerToManyRemoveOpResourceServiceBrokerAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBroker
	var b, c, d, e ServiceBrokerAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerDBTypes, false, strmangle.SetComplement(serviceBrokerPrimaryKeyColumns, serviceBrokerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBrokerAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBrokerAnnotationDBTypes, false, strmangle.SetComplement(serviceBrokerAnnotationPrimaryKeyColumns, serviceBrokerAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceServiceBrokerAnnotations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceServiceBrokerAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceServiceBrokerAnnotations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceServiceBrokerAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceServiceBrokerAnnotations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceServiceBrokerAnnotations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceServiceBrokerAnnotations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testServiceBrokerToManyAddOpResourceServiceBrokerLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBroker
	var b, c, d, e ServiceBrokerLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerDBTypes, false, strmangle.SetComplement(serviceBrokerPrimaryKeyColumns, serviceBrokerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBrokerLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBrokerLabelDBTypes, false, strmangle.SetComplement(serviceBrokerLabelPrimaryKeyColumns, serviceBrokerLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServiceBrokerLabel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceServiceBrokerLabels(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceServiceBrokerLabels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceServiceBrokerLabels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceServiceBrokerLabels().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testServiceBrokerToManySetOpResourceServiceBrokerLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBroker
	var b, c, d, e ServiceBrokerLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerDBTypes, false, strmangle.SetComplement(serviceBrokerPrimaryKeyColumns, serviceBrokerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBrokerLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBrokerLabelDBTypes, false, strmangle.SetComplement(serviceBrokerLabelPrimaryKeyColumns, serviceBrokerLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceServiceBrokerLabels(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceServiceBrokerLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceServiceBrokerLabels(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceServiceBrokerLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceServiceBrokerLabels[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceServiceBrokerLabels[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testServiceBrokerToManyRemoveOpResourceServiceBrokerLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBroker
	var b, c, d, e ServiceBrokerLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerDBTypes, false, strmangle.SetComplement(serviceBrokerPrimaryKeyColumns, serviceBrokerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBrokerLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBrokerLabelDBTypes, false, strmangle.SetComplement(serviceBrokerLabelPrimaryKeyColumns, serviceBrokerLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceServiceBrokerLabels(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceServiceBrokerLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceServiceBrokerLabels(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceServiceBrokerLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceServiceBrokerLabels) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceServiceBrokerLabels[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceServiceBrokerLabels[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testServiceBrokerToManyAddOpFKServiceBrokerServiceBrokerUpdateRequests(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBroker
	var b, c, d, e ServiceBrokerUpdateRequest

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerDBTypes, false, strmangle.SetComplement(serviceBrokerPrimaryKeyColumns, serviceBrokerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBrokerUpdateRequest{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBrokerUpdateRequestDBTypes, false, strmangle.SetComplement(serviceBrokerUpdateRequestPrimaryKeyColumns, serviceBrokerUpdateRequestColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServiceBrokerUpdateRequest{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFKServiceBrokerServiceBrokerUpdateRequests(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.FKServiceBrokersID) {
			t.Error("foreign key was wrong value", a.ID, first.FKServiceBrokersID)
		}
		if !queries.Equal(a.ID, second.FKServiceBrokersID) {
			t.Error("foreign key was wrong value", a.ID, second.FKServiceBrokersID)
		}

		if first.R.FKServiceBroker != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.FKServiceBroker != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FKServiceBrokerServiceBrokerUpdateRequests[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FKServiceBrokerServiceBrokerUpdateRequests[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FKServiceBrokerServiceBrokerUpdateRequests().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testServiceBrokerToManySetOpFKServiceBrokerServiceBrokerUpdateRequests(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBroker
	var b, c, d, e ServiceBrokerUpdateRequest

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerDBTypes, false, strmangle.SetComplement(serviceBrokerPrimaryKeyColumns, serviceBrokerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBrokerUpdateRequest{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBrokerUpdateRequestDBTypes, false, strmangle.SetComplement(serviceBrokerUpdateRequestPrimaryKeyColumns, serviceBrokerUpdateRequestColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetFKServiceBrokerServiceBrokerUpdateRequests(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FKServiceBrokerServiceBrokerUpdateRequests().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetFKServiceBrokerServiceBrokerUpdateRequests(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FKServiceBrokerServiceBrokerUpdateRequests().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FKServiceBrokersID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FKServiceBrokersID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.FKServiceBrokersID) {
		t.Error("foreign key was wrong value", a.ID, d.FKServiceBrokersID)
	}
	if !queries.Equal(a.ID, e.FKServiceBrokersID) {
		t.Error("foreign key was wrong value", a.ID, e.FKServiceBrokersID)
	}

	if b.R.FKServiceBroker != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FKServiceBroker != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FKServiceBroker != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.FKServiceBroker != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.FKServiceBrokerServiceBrokerUpdateRequests[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.FKServiceBrokerServiceBrokerUpdateRequests[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testServiceBrokerToManyRemoveOpFKServiceBrokerServiceBrokerUpdateRequests(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBroker
	var b, c, d, e ServiceBrokerUpdateRequest

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerDBTypes, false, strmangle.SetComplement(serviceBrokerPrimaryKeyColumns, serviceBrokerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBrokerUpdateRequest{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBrokerUpdateRequestDBTypes, false, strmangle.SetComplement(serviceBrokerUpdateRequestPrimaryKeyColumns, serviceBrokerUpdateRequestColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddFKServiceBrokerServiceBrokerUpdateRequests(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FKServiceBrokerServiceBrokerUpdateRequests().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveFKServiceBrokerServiceBrokerUpdateRequests(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FKServiceBrokerServiceBrokerUpdateRequests().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FKServiceBrokersID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FKServiceBrokersID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.FKServiceBroker != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FKServiceBroker != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FKServiceBroker != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.FKServiceBroker != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.FKServiceBrokerServiceBrokerUpdateRequests) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.FKServiceBrokerServiceBrokerUpdateRequests[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.FKServiceBrokerServiceBrokerUpdateRequests[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testServiceBrokerToManyAddOpServices(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBroker
	var b, c, d, e Service

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerDBTypes, false, strmangle.SetComplement(serviceBrokerPrimaryKeyColumns, serviceBrokerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Service{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceDBTypes, false, strmangle.SetComplement(servicePrimaryKeyColumns, serviceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Service{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddServices(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ServiceBrokerID) {
			t.Error("foreign key was wrong value", a.ID, first.ServiceBrokerID)
		}
		if !queries.Equal(a.ID, second.ServiceBrokerID) {
			t.Error("foreign key was wrong value", a.ID, second.ServiceBrokerID)
		}

		if first.R.ServiceBroker != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ServiceBroker != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Services[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Services[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Services().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testServiceBrokerToManySetOpServices(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBroker
	var b, c, d, e Service

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerDBTypes, false, strmangle.SetComplement(serviceBrokerPrimaryKeyColumns, serviceBrokerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Service{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceDBTypes, false, strmangle.SetComplement(servicePrimaryKeyColumns, serviceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetServices(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Services().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetServices(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Services().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ServiceBrokerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ServiceBrokerID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ServiceBrokerID) {
		t.Error("foreign key was wrong value", a.ID, d.ServiceBrokerID)
	}
	if !queries.Equal(a.ID, e.ServiceBrokerID) {
		t.Error("foreign key was wrong value", a.ID, e.ServiceBrokerID)
	}

	if b.R.ServiceBroker != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ServiceBroker != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ServiceBroker != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ServiceBroker != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Services[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Services[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testServiceBrokerToManyRemoveOpServices(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBroker
	var b, c, d, e Service

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerDBTypes, false, strmangle.SetComplement(serviceBrokerPrimaryKeyColumns, serviceBrokerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Service{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceDBTypes, false, strmangle.SetComplement(servicePrimaryKeyColumns, serviceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddServices(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Services().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveServices(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Services().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ServiceBrokerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ServiceBrokerID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ServiceBroker != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ServiceBroker != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ServiceBroker != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ServiceBroker != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Services) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Services[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Services[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testServiceBrokerToOneSpaceUsingSpace(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ServiceBroker
	var foreign Space

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, serviceBrokerDBTypes, true, serviceBrokerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, spaceDBTypes, false, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SpaceID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Space().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ServiceBrokerSlice{&local}
	if err = local.L.LoadSpace(ctx, tx, false, (*[]*ServiceBroker)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Space == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Space = nil
	if err = local.L.LoadSpace(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Space == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testServiceBrokerToOneSetOpSpaceUsingSpace(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBroker
	var b, c Space

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerDBTypes, false, strmangle.SetComplement(serviceBrokerPrimaryKeyColumns, serviceBrokerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Space{&b, &c} {
		err = a.SetSpace(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Space != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ServiceBrokers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SpaceID, x.ID) {
			t.Error("foreign key was wrong value", a.SpaceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SpaceID))
		reflect.Indirect(reflect.ValueOf(&a.SpaceID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SpaceID, x.ID) {
			t.Error("foreign key was wrong value", a.SpaceID, x.ID)
		}
	}
}

func testServiceBrokerToOneRemoveOpSpaceUsingSpace(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceBroker
	var b Space

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceBrokerDBTypes, false, strmangle.SetComplement(serviceBrokerPrimaryKeyColumns, serviceBrokerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSpace(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSpace(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Space().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Space != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SpaceID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ServiceBrokers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testServiceBrokersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBroker{}
	if err = randomize.Struct(seed, o, serviceBrokerDBTypes, true, serviceBrokerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServiceBrokersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBroker{}
	if err = randomize.Struct(seed, o, serviceBrokerDBTypes, true, serviceBrokerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServiceBrokerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServiceBrokersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBroker{}
	if err = randomize.Struct(seed, o, serviceBrokerDBTypes, true, serviceBrokerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServiceBrokers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	serviceBrokerDBTypes = map[string]string{`ID`: `integer`, `GUID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `Name`: `text`, `BrokerURL`: `text`, `AuthPassword`: `text`, `Salt`: `text`, `AuthUsername`: `text`, `SpaceID`: `integer`, `EncryptionKeyLabel`: `character varying`, `EncryptionIterations`: `integer`, `State`: `character varying`}
	_                    = bytes.MinRead
)

func testServiceBrokersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(serviceBrokerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(serviceBrokerAllColumns) == len(serviceBrokerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBroker{}
	if err = randomize.Struct(seed, o, serviceBrokerDBTypes, true, serviceBrokerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServiceBrokers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serviceBrokerDBTypes, true, serviceBrokerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testServiceBrokersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(serviceBrokerAllColumns) == len(serviceBrokerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServiceBroker{}
	if err = randomize.Struct(seed, o, serviceBrokerDBTypes, true, serviceBrokerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServiceBrokers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serviceBrokerDBTypes, true, serviceBrokerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(serviceBrokerAllColumns, serviceBrokerPrimaryKeyColumns) {
		fields = serviceBrokerAllColumns
	} else {
		fields = strmangle.SetComplement(
			serviceBrokerAllColumns,
			serviceBrokerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ServiceBrokerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testServiceBrokersUpsert(t *testing.T) {
	t.Parallel()

	if len(serviceBrokerAllColumns) == len(serviceBrokerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ServiceBroker{}
	if err = randomize.Struct(seed, &o, serviceBrokerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServiceBroker: %s", err)
	}

	count, err := ServiceBrokers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, serviceBrokerDBTypes, false, serviceBrokerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServiceBroker struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServiceBroker: %s", err)
	}

	count, err = ServiceBrokers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
