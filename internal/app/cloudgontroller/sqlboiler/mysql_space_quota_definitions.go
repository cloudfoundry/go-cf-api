// +build mysql
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SpaceQuotaDefinition is an object representing the database table.
type SpaceQuotaDefinition struct {
	ID                      int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	GUID                    string    `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	CreatedAt               time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt               null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Name                    string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	NonBasicServicesAllowed bool      `boil:"non_basic_services_allowed" json:"non_basic_services_allowed" toml:"non_basic_services_allowed" yaml:"non_basic_services_allowed"`
	TotalServices           int       `boil:"total_services" json:"total_services" toml:"total_services" yaml:"total_services"`
	MemoryLimit             int       `boil:"memory_limit" json:"memory_limit" toml:"memory_limit" yaml:"memory_limit"`
	TotalRoutes             int       `boil:"total_routes" json:"total_routes" toml:"total_routes" yaml:"total_routes"`
	InstanceMemoryLimit     int       `boil:"instance_memory_limit" json:"instance_memory_limit" toml:"instance_memory_limit" yaml:"instance_memory_limit"`
	OrganizationID          int       `boil:"organization_id" json:"organization_id" toml:"organization_id" yaml:"organization_id"`
	AppInstanceLimit        null.Int  `boil:"app_instance_limit" json:"app_instance_limit,omitempty" toml:"app_instance_limit" yaml:"app_instance_limit,omitempty"`
	AppTaskLimit            null.Int  `boil:"app_task_limit" json:"app_task_limit,omitempty" toml:"app_task_limit" yaml:"app_task_limit,omitempty"`
	TotalServiceKeys        int       `boil:"total_service_keys" json:"total_service_keys" toml:"total_service_keys" yaml:"total_service_keys"`
	TotalReservedRoutePorts null.Int  `boil:"total_reserved_route_ports" json:"total_reserved_route_ports,omitempty" toml:"total_reserved_route_ports" yaml:"total_reserved_route_ports,omitempty"`

	R *spaceQuotaDefinitionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L spaceQuotaDefinitionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SpaceQuotaDefinitionColumns = struct {
	ID                      string
	GUID                    string
	CreatedAt               string
	UpdatedAt               string
	Name                    string
	NonBasicServicesAllowed string
	TotalServices           string
	MemoryLimit             string
	TotalRoutes             string
	InstanceMemoryLimit     string
	OrganizationID          string
	AppInstanceLimit        string
	AppTaskLimit            string
	TotalServiceKeys        string
	TotalReservedRoutePorts string
}{
	ID:                      "id",
	GUID:                    "guid",
	CreatedAt:               "created_at",
	UpdatedAt:               "updated_at",
	Name:                    "name",
	NonBasicServicesAllowed: "non_basic_services_allowed",
	TotalServices:           "total_services",
	MemoryLimit:             "memory_limit",
	TotalRoutes:             "total_routes",
	InstanceMemoryLimit:     "instance_memory_limit",
	OrganizationID:          "organization_id",
	AppInstanceLimit:        "app_instance_limit",
	AppTaskLimit:            "app_task_limit",
	TotalServiceKeys:        "total_service_keys",
	TotalReservedRoutePorts: "total_reserved_route_ports",
}

var SpaceQuotaDefinitionTableColumns = struct {
	ID                      string
	GUID                    string
	CreatedAt               string
	UpdatedAt               string
	Name                    string
	NonBasicServicesAllowed string
	TotalServices           string
	MemoryLimit             string
	TotalRoutes             string
	InstanceMemoryLimit     string
	OrganizationID          string
	AppInstanceLimit        string
	AppTaskLimit            string
	TotalServiceKeys        string
	TotalReservedRoutePorts string
}{
	ID:                      "space_quota_definitions.id",
	GUID:                    "space_quota_definitions.guid",
	CreatedAt:               "space_quota_definitions.created_at",
	UpdatedAt:               "space_quota_definitions.updated_at",
	Name:                    "space_quota_definitions.name",
	NonBasicServicesAllowed: "space_quota_definitions.non_basic_services_allowed",
	TotalServices:           "space_quota_definitions.total_services",
	MemoryLimit:             "space_quota_definitions.memory_limit",
	TotalRoutes:             "space_quota_definitions.total_routes",
	InstanceMemoryLimit:     "space_quota_definitions.instance_memory_limit",
	OrganizationID:          "space_quota_definitions.organization_id",
	AppInstanceLimit:        "space_quota_definitions.app_instance_limit",
	AppTaskLimit:            "space_quota_definitions.app_task_limit",
	TotalServiceKeys:        "space_quota_definitions.total_service_keys",
	TotalReservedRoutePorts: "space_quota_definitions.total_reserved_route_ports",
}

// Generated where

var SpaceQuotaDefinitionWhere = struct {
	ID                      whereHelperint
	GUID                    whereHelperstring
	CreatedAt               whereHelpertime_Time
	UpdatedAt               whereHelpernull_Time
	Name                    whereHelperstring
	NonBasicServicesAllowed whereHelperbool
	TotalServices           whereHelperint
	MemoryLimit             whereHelperint
	TotalRoutes             whereHelperint
	InstanceMemoryLimit     whereHelperint
	OrganizationID          whereHelperint
	AppInstanceLimit        whereHelpernull_Int
	AppTaskLimit            whereHelpernull_Int
	TotalServiceKeys        whereHelperint
	TotalReservedRoutePorts whereHelpernull_Int
}{
	ID:                      whereHelperint{field: "`space_quota_definitions`.`id`"},
	GUID:                    whereHelperstring{field: "`space_quota_definitions`.`guid`"},
	CreatedAt:               whereHelpertime_Time{field: "`space_quota_definitions`.`created_at`"},
	UpdatedAt:               whereHelpernull_Time{field: "`space_quota_definitions`.`updated_at`"},
	Name:                    whereHelperstring{field: "`space_quota_definitions`.`name`"},
	NonBasicServicesAllowed: whereHelperbool{field: "`space_quota_definitions`.`non_basic_services_allowed`"},
	TotalServices:           whereHelperint{field: "`space_quota_definitions`.`total_services`"},
	MemoryLimit:             whereHelperint{field: "`space_quota_definitions`.`memory_limit`"},
	TotalRoutes:             whereHelperint{field: "`space_quota_definitions`.`total_routes`"},
	InstanceMemoryLimit:     whereHelperint{field: "`space_quota_definitions`.`instance_memory_limit`"},
	OrganizationID:          whereHelperint{field: "`space_quota_definitions`.`organization_id`"},
	AppInstanceLimit:        whereHelpernull_Int{field: "`space_quota_definitions`.`app_instance_limit`"},
	AppTaskLimit:            whereHelpernull_Int{field: "`space_quota_definitions`.`app_task_limit`"},
	TotalServiceKeys:        whereHelperint{field: "`space_quota_definitions`.`total_service_keys`"},
	TotalReservedRoutePorts: whereHelpernull_Int{field: "`space_quota_definitions`.`total_reserved_route_ports`"},
}

// SpaceQuotaDefinitionRels is where relationship names are stored.
var SpaceQuotaDefinitionRels = struct {
	Organization string
	Spaces       string
}{
	Organization: "Organization",
	Spaces:       "Spaces",
}

// spaceQuotaDefinitionR is where relationships are stored.
type spaceQuotaDefinitionR struct {
	Organization *Organization `boil:"Organization" json:"Organization" toml:"Organization" yaml:"Organization"`
	Spaces       SpaceSlice    `boil:"Spaces" json:"Spaces" toml:"Spaces" yaml:"Spaces"`
}

// NewStruct creates a new relationship struct
func (*spaceQuotaDefinitionR) NewStruct() *spaceQuotaDefinitionR {
	return &spaceQuotaDefinitionR{}
}

// spaceQuotaDefinitionL is where Load methods for each relationship are stored.
type spaceQuotaDefinitionL struct{}

var (
	spaceQuotaDefinitionAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "non_basic_services_allowed", "total_services", "memory_limit", "total_routes", "instance_memory_limit", "organization_id", "app_instance_limit", "app_task_limit", "total_service_keys", "total_reserved_route_ports"}
	spaceQuotaDefinitionColumnsWithoutDefault = []string{"guid", "updated_at", "name", "non_basic_services_allowed", "total_services", "memory_limit", "total_routes", "organization_id"}
	spaceQuotaDefinitionColumnsWithDefault    = []string{"id", "created_at", "instance_memory_limit", "app_instance_limit", "app_task_limit", "total_service_keys", "total_reserved_route_ports"}
	spaceQuotaDefinitionPrimaryKeyColumns     = []string{"id"}
)

type (
	// SpaceQuotaDefinitionSlice is an alias for a slice of pointers to SpaceQuotaDefinition.
	// This should almost always be used instead of []SpaceQuotaDefinition.
	SpaceQuotaDefinitionSlice []*SpaceQuotaDefinition

	SpaceQuotaDefinitionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	spaceQuotaDefinitionType                 = reflect.TypeOf(&SpaceQuotaDefinition{})
	spaceQuotaDefinitionMapping              = queries.MakeStructMapping(spaceQuotaDefinitionType)
	spaceQuotaDefinitionPrimaryKeyMapping, _ = queries.BindMapping(spaceQuotaDefinitionType, spaceQuotaDefinitionMapping, spaceQuotaDefinitionPrimaryKeyColumns)
	spaceQuotaDefinitionInsertCacheMut       sync.RWMutex
	spaceQuotaDefinitionInsertCache          = make(map[string]insertCache)
	spaceQuotaDefinitionUpdateCacheMut       sync.RWMutex
	spaceQuotaDefinitionUpdateCache          = make(map[string]updateCache)
	spaceQuotaDefinitionUpsertCacheMut       sync.RWMutex
	spaceQuotaDefinitionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

type SpaceQuotaDefinitionFinisher interface {
	One(ctx context.Context, exec boil.ContextExecutor) (*SpaceQuotaDefinition, error)
	Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	All(ctx context.Context, exec boil.ContextExecutor) (SpaceQuotaDefinitionSlice, error)
	Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)
}

// One returns a single spaceQuotaDefinition record from the query.
func (q SpaceQuotaDefinitionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SpaceQuotaDefinition, error) {
	o := &SpaceQuotaDefinition{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for space_quota_definitions")
	}

	return o, nil
}

// All returns all SpaceQuotaDefinition records from the query.
func (q SpaceQuotaDefinitionQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpaceQuotaDefinitionSlice, error) {
	var o []*SpaceQuotaDefinition

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SpaceQuotaDefinition slice")
	}

	return o, nil
}

// Count returns the count of all SpaceQuotaDefinition records in the query.
func (q SpaceQuotaDefinitionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count space_quota_definitions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q SpaceQuotaDefinitionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if space_quota_definitions exists")
	}

	return count > 0, nil
}

// Organization pointed to by the foreign key.
func (q SpaceQuotaDefinitionQuery) Organization(o *SpaceQuotaDefinition, mods ...qm.QueryMod) OrganizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	query := Organizations(queryMods...)
	queries.SetFrom(query.Query, "`organizations`")

	return query
}

// Spaces retrieves all the space's Spaces with an executor.
func (q SpaceQuotaDefinitionQuery) Spaces(o *SpaceQuotaDefinition, mods ...qm.QueryMod) SpaceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`spaces`.`space_quota_definition_id`=?", o.ID),
	)

	query := Spaces(queryMods...)
	queries.SetFrom(query.Query, "`spaces`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`spaces`.*"})
	}

	return query
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (spaceQuotaDefinitionL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpaceQuotaDefinition interface{}, mods queries.Applicator) error {
	var slice []*SpaceQuotaDefinition
	var object *SpaceQuotaDefinition

	if singular {
		object = maybeSpaceQuotaDefinition.(*SpaceQuotaDefinition)
	} else {
		slice = *maybeSpaceQuotaDefinition.(*[]*SpaceQuotaDefinition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &spaceQuotaDefinitionR{}
		}
		args = append(args, object.OrganizationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &spaceQuotaDefinitionR{}
			}

			for _, a := range args {
				if a == obj.OrganizationID {
					continue Outer
				}
			}

			args = append(args, obj.OrganizationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizations`),
		qm.WhereIn(`organizations.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organizations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.SpaceQuotaDefinitions = append(foreign.R.SpaceQuotaDefinitions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganizationID == foreign.ID {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.SpaceQuotaDefinitions = append(foreign.R.SpaceQuotaDefinitions, local)
				break
			}
		}
	}

	return nil
}

// LoadSpaces allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (spaceQuotaDefinitionL) LoadSpaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpaceQuotaDefinition interface{}, mods queries.Applicator) error {
	var slice []*SpaceQuotaDefinition
	var object *SpaceQuotaDefinition

	if singular {
		object = maybeSpaceQuotaDefinition.(*SpaceQuotaDefinition)
	} else {
		slice = *maybeSpaceQuotaDefinition.(*[]*SpaceQuotaDefinition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &spaceQuotaDefinitionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &spaceQuotaDefinitionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`spaces`),
		qm.WhereIn(`spaces.space_quota_definition_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load spaces")
	}

	var resultSlice []*Space
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice spaces")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on spaces")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for spaces")
	}

	if singular {
		object.R.Spaces = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &spaceR{}
			}
			foreign.R.SpaceQuotaDefinition = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SpaceQuotaDefinitionID) {
				local.R.Spaces = append(local.R.Spaces, foreign)
				if foreign.R == nil {
					foreign.R = &spaceR{}
				}
				foreign.R.SpaceQuotaDefinition = local
				break
			}
		}
	}

	return nil
}

// SetOrganization of the spaceQuotaDefinition to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.SpaceQuotaDefinitions.
func (q SpaceQuotaDefinitionQuery) SetOrganization(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = Organizations().Insert(related, ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `space_quota_definitions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"organization_id"}),
		strmangle.WhereClause("`", "`", 0, spaceQuotaDefinitionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganizationID = related.ID
	if o.R == nil {
		o.R = &spaceQuotaDefinitionR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			SpaceQuotaDefinitions: SpaceQuotaDefinitionSlice{o},
		}
	} else {
		related.R.SpaceQuotaDefinitions = append(related.R.SpaceQuotaDefinitions, o)
	}

	return nil
}

// AddSpaces adds the given related objects to the existing relationships
// of the space_quota_definition, optionally inserting them as new records.
// Appends related to o.R.Spaces.
// Sets related.R.SpaceQuotaDefinition appropriately.
func (q SpaceQuotaDefinitionQuery) AddSpaces(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Space) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SpaceQuotaDefinitionID, o.ID)
			if err = Spaces().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `spaces` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"space_quota_definition_id"}),
				strmangle.WhereClause("`", "`", 0, spacePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SpaceQuotaDefinitionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &spaceQuotaDefinitionR{
			Spaces: related,
		}
	} else {
		o.R.Spaces = append(o.R.Spaces, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &spaceR{
				SpaceQuotaDefinition: o,
			}
		} else {
			rel.R.SpaceQuotaDefinition = o
		}
	}
	return nil
}

// SetSpaces removes all previously related items of the
// space_quota_definition replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SpaceQuotaDefinition's Spaces accordingly.
// Replaces o.R.Spaces with related.
// Sets related.R.SpaceQuotaDefinition's Spaces accordingly.
func (q SpaceQuotaDefinitionQuery) SetSpaces(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Space) error {
	query := "update `spaces` set `space_quota_definition_id` = null where `space_quota_definition_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Spaces {
			queries.SetScanner(&rel.SpaceQuotaDefinitionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SpaceQuotaDefinition = nil
		}

		o.R.Spaces = nil
	}
	return q.AddSpaces(o, ctx, exec, insert, related...)
}

// RemoveSpaces relationships from objects passed in.
// Removes related items from R.Spaces (uses pointer comparison, removal does not keep order)
// Sets related.R.SpaceQuotaDefinition.
func (q SpaceQuotaDefinitionQuery) RemoveSpaces(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, related ...*Space) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SpaceQuotaDefinitionID, nil)
		if rel.R != nil {
			rel.R.SpaceQuotaDefinition = nil
		}
		if _, err = Spaces().Update(rel, ctx, exec, boil.Whitelist("space_quota_definition_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Spaces {
			if rel != ri {
				continue
			}

			ln := len(o.R.Spaces)
			if ln > 1 && i < ln-1 {
				o.R.Spaces[i] = o.R.Spaces[ln-1]
			}
			o.R.Spaces = o.R.Spaces[:ln-1]
			break
		}
	}

	return nil
}

// SpaceQuotaDefinitions retrieves all the records using an executor.
func SpaceQuotaDefinitions(mods ...qm.QueryMod) SpaceQuotaDefinitionQuery {
	mods = append(mods, qm.From("`space_quota_definitions`"))
	return SpaceQuotaDefinitionQuery{NewQuery(mods...)}
}

type SpaceQuotaDefinitionFinder interface {
	FindSpaceQuotaDefinition(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SpaceQuotaDefinition, error)
}

// FindSpaceQuotaDefinition retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSpaceQuotaDefinition(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SpaceQuotaDefinition, error) {
	spaceQuotaDefinitionObj := &SpaceQuotaDefinition{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `space_quota_definitions` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, spaceQuotaDefinitionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from space_quota_definitions")
	}

	return spaceQuotaDefinitionObj, nil
}

type SpaceQuotaDefinitionInserter interface {
	Insert(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (q SpaceQuotaDefinitionQuery) Insert(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no space_quota_definitions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(spaceQuotaDefinitionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	spaceQuotaDefinitionInsertCacheMut.RLock()
	cache, cached := spaceQuotaDefinitionInsertCache[key]
	spaceQuotaDefinitionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			spaceQuotaDefinitionAllColumns,
			spaceQuotaDefinitionColumnsWithDefault,
			spaceQuotaDefinitionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(spaceQuotaDefinitionType, spaceQuotaDefinitionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(spaceQuotaDefinitionType, spaceQuotaDefinitionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `space_quota_definitions` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `space_quota_definitions` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `space_quota_definitions` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, spaceQuotaDefinitionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into space_quota_definitions")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == spaceQuotaDefinitionMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for space_quota_definitions")
	}

CacheNoHooks:
	if !cached {
		spaceQuotaDefinitionInsertCacheMut.Lock()
		spaceQuotaDefinitionInsertCache[key] = cache
		spaceQuotaDefinitionInsertCacheMut.Unlock()
	}

	return nil
}

type SpaceQuotaDefinitionUpdater interface {
	Update(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)
	UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
	UpdateAllSlice(o SpaceQuotaDefinitionSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
}

// Update uses an executor to update the SpaceQuotaDefinition.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (q SpaceQuotaDefinitionQuery) Update(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	spaceQuotaDefinitionUpdateCacheMut.RLock()
	cache, cached := spaceQuotaDefinitionUpdateCache[key]
	spaceQuotaDefinitionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			spaceQuotaDefinitionAllColumns,
			spaceQuotaDefinitionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update space_quota_definitions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `space_quota_definitions` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, spaceQuotaDefinitionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(spaceQuotaDefinitionType, spaceQuotaDefinitionMapping, append(wl, spaceQuotaDefinitionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update space_quota_definitions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for space_quota_definitions")
	}

	if !cached {
		spaceQuotaDefinitionUpdateCacheMut.Lock()
		spaceQuotaDefinitionUpdateCache[key] = cache
		spaceQuotaDefinitionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q SpaceQuotaDefinitionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for space_quota_definitions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for space_quota_definitions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (q SpaceQuotaDefinitionQuery) UpdateAllSlice(o SpaceQuotaDefinitionSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), spaceQuotaDefinitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `space_quota_definitions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, spaceQuotaDefinitionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in spaceQuotaDefinition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all spaceQuotaDefinition")
	}
	return rowsAff, nil
}

type SpaceQuotaDefinitionDeleter interface {
	Delete(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAllSlice(o SpaceQuotaDefinitionSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)
}

// Delete deletes a single SpaceQuotaDefinition record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (q SpaceQuotaDefinitionQuery) Delete(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SpaceQuotaDefinition provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), spaceQuotaDefinitionPrimaryKeyMapping)
	sql := "DELETE FROM `space_quota_definitions` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from space_quota_definitions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for space_quota_definitions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q SpaceQuotaDefinitionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no spaceQuotaDefinitionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from space_quota_definitions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for space_quota_definitions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (q SpaceQuotaDefinitionQuery) DeleteAllSlice(o SpaceQuotaDefinitionSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), spaceQuotaDefinitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `space_quota_definitions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, spaceQuotaDefinitionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from spaceQuotaDefinition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for space_quota_definitions")
	}

	return rowsAff, nil
}

type SpaceQuotaDefinitionReloader interface {
	Reload(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor) error
	ReloadAll(o *SpaceQuotaDefinitionSlice, ctx context.Context, exec boil.ContextExecutor) error
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (q SpaceQuotaDefinitionQuery) Reload(o *SpaceQuotaDefinition, ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSpaceQuotaDefinition(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (q SpaceQuotaDefinitionQuery) ReloadAll(o *SpaceQuotaDefinitionSlice, ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SpaceQuotaDefinitionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), spaceQuotaDefinitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `space_quota_definitions`.* FROM `space_quota_definitions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, spaceQuotaDefinitionPrimaryKeyColumns, len(*o))

	query := queries.Raw(sql, args...)

	err := query.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SpaceQuotaDefinitionSlice")
	}

	*o = slice

	return nil
}

// SpaceQuotaDefinitionExists checks if the SpaceQuotaDefinition row exists.
func SpaceQuotaDefinitionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `space_quota_definitions` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if space_quota_definitions exists")
	}

	return exists, nil
}

var mySQLSpaceQuotaDefinitionUniqueColumns = []string{
	"id",
	"guid",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SpaceQuotaDefinition) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no space_quota_definitions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(spaceQuotaDefinitionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSpaceQuotaDefinitionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	spaceQuotaDefinitionUpsertCacheMut.RLock()
	cache, cached := spaceQuotaDefinitionUpsertCache[key]
	spaceQuotaDefinitionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			spaceQuotaDefinitionAllColumns,
			spaceQuotaDefinitionColumnsWithDefault,
			spaceQuotaDefinitionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			spaceQuotaDefinitionAllColumns,
			spaceQuotaDefinitionPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert space_quota_definitions, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`space_quota_definitions`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `space_quota_definitions` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(spaceQuotaDefinitionType, spaceQuotaDefinitionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(spaceQuotaDefinitionType, spaceQuotaDefinitionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for space_quota_definitions")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == spaceQuotaDefinitionMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(spaceQuotaDefinitionType, spaceQuotaDefinitionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for space_quota_definitions")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for space_quota_definitions")
	}

CacheNoHooks:
	if !cached {
		spaceQuotaDefinitionUpsertCacheMut.Lock()
		spaceQuotaDefinitionUpsertCache[key] = cache
		spaceQuotaDefinitionUpsertCacheMut.Unlock()
	}

	return nil
}
