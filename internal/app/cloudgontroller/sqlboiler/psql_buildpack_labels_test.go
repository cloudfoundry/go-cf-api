// +build psql_integration
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBuildpackLabels(t *testing.T) {
	t.Parallel()

	query := BuildpackLabels()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBuildpackLabelsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuildpackLabel{}
	if err = randomize.Struct(seed, o, buildpackLabelDBTypes, true, buildpackLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildpackLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BuildpackLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBuildpackLabelsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuildpackLabel{}
	if err = randomize.Struct(seed, o, buildpackLabelDBTypes, true, buildpackLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildpackLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BuildpackLabels().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BuildpackLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBuildpackLabelsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuildpackLabel{}
	if err = randomize.Struct(seed, o, buildpackLabelDBTypes, true, buildpackLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildpackLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BuildpackLabelSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BuildpackLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBuildpackLabelsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuildpackLabel{}
	if err = randomize.Struct(seed, o, buildpackLabelDBTypes, true, buildpackLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildpackLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BuildpackLabelExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if BuildpackLabel exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BuildpackLabelExists to return true, but got false.")
	}
}

func testBuildpackLabelsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuildpackLabel{}
	if err = randomize.Struct(seed, o, buildpackLabelDBTypes, true, buildpackLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildpackLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	buildpackLabelFound, err := FindBuildpackLabel(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if buildpackLabelFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBuildpackLabelsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuildpackLabel{}
	if err = randomize.Struct(seed, o, buildpackLabelDBTypes, true, buildpackLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildpackLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BuildpackLabels().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBuildpackLabelsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuildpackLabel{}
	if err = randomize.Struct(seed, o, buildpackLabelDBTypes, true, buildpackLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildpackLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BuildpackLabels().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBuildpackLabelsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	buildpackLabelOne := &BuildpackLabel{}
	buildpackLabelTwo := &BuildpackLabel{}
	if err = randomize.Struct(seed, buildpackLabelOne, buildpackLabelDBTypes, false, buildpackLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildpackLabel struct: %s", err)
	}
	if err = randomize.Struct(seed, buildpackLabelTwo, buildpackLabelDBTypes, false, buildpackLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildpackLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = buildpackLabelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = buildpackLabelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BuildpackLabels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBuildpackLabelsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	buildpackLabelOne := &BuildpackLabel{}
	buildpackLabelTwo := &BuildpackLabel{}
	if err = randomize.Struct(seed, buildpackLabelOne, buildpackLabelDBTypes, false, buildpackLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildpackLabel struct: %s", err)
	}
	if err = randomize.Struct(seed, buildpackLabelTwo, buildpackLabelDBTypes, false, buildpackLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildpackLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = buildpackLabelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = buildpackLabelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BuildpackLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func buildpackLabelBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BuildpackLabel) error {
	*o = BuildpackLabel{}
	return nil
}

func buildpackLabelAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BuildpackLabel) error {
	*o = BuildpackLabel{}
	return nil
}

func buildpackLabelAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BuildpackLabel) error {
	*o = BuildpackLabel{}
	return nil
}

func buildpackLabelBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BuildpackLabel) error {
	*o = BuildpackLabel{}
	return nil
}

func buildpackLabelAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BuildpackLabel) error {
	*o = BuildpackLabel{}
	return nil
}

func buildpackLabelBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BuildpackLabel) error {
	*o = BuildpackLabel{}
	return nil
}

func buildpackLabelAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BuildpackLabel) error {
	*o = BuildpackLabel{}
	return nil
}

func buildpackLabelBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BuildpackLabel) error {
	*o = BuildpackLabel{}
	return nil
}

func buildpackLabelAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BuildpackLabel) error {
	*o = BuildpackLabel{}
	return nil
}

func testBuildpackLabelsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &BuildpackLabel{}
	o := &BuildpackLabel{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, buildpackLabelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BuildpackLabel object: %s", err)
	}

	AddBuildpackLabelHook(boil.BeforeInsertHook, buildpackLabelBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	buildpackLabelBeforeInsertHooks = []BuildpackLabelHook{}

	AddBuildpackLabelHook(boil.AfterInsertHook, buildpackLabelAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	buildpackLabelAfterInsertHooks = []BuildpackLabelHook{}

	AddBuildpackLabelHook(boil.AfterSelectHook, buildpackLabelAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	buildpackLabelAfterSelectHooks = []BuildpackLabelHook{}

	AddBuildpackLabelHook(boil.BeforeUpdateHook, buildpackLabelBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	buildpackLabelBeforeUpdateHooks = []BuildpackLabelHook{}

	AddBuildpackLabelHook(boil.AfterUpdateHook, buildpackLabelAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	buildpackLabelAfterUpdateHooks = []BuildpackLabelHook{}

	AddBuildpackLabelHook(boil.BeforeDeleteHook, buildpackLabelBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	buildpackLabelBeforeDeleteHooks = []BuildpackLabelHook{}

	AddBuildpackLabelHook(boil.AfterDeleteHook, buildpackLabelAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	buildpackLabelAfterDeleteHooks = []BuildpackLabelHook{}

	AddBuildpackLabelHook(boil.BeforeUpsertHook, buildpackLabelBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	buildpackLabelBeforeUpsertHooks = []BuildpackLabelHook{}

	AddBuildpackLabelHook(boil.AfterUpsertHook, buildpackLabelAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	buildpackLabelAfterUpsertHooks = []BuildpackLabelHook{}
}

func testBuildpackLabelsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuildpackLabel{}
	if err = randomize.Struct(seed, o, buildpackLabelDBTypes, true, buildpackLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildpackLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BuildpackLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBuildpackLabelsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuildpackLabel{}
	if err = randomize.Struct(seed, o, buildpackLabelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BuildpackLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(buildpackLabelColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BuildpackLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBuildpackLabelToOneBuildpackUsingResource(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local BuildpackLabel
	var foreign Buildpack

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, buildpackLabelDBTypes, true, buildpackLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildpackLabel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, buildpackDBTypes, false, buildpackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Buildpack struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ResourceGUID, foreign.GUID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Resource().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.GUID, foreign.GUID) {
		t.Errorf("want: %v, got %v", foreign.GUID, check.GUID)
	}

	slice := BuildpackLabelSlice{&local}
	if err = local.L.LoadResource(ctx, tx, false, (*[]*BuildpackLabel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Resource == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Resource = nil
	if err = local.L.LoadResource(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Resource == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBuildpackLabelToOneSetOpBuildpackUsingResource(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BuildpackLabel
	var b, c Buildpack

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, buildpackLabelDBTypes, false, strmangle.SetComplement(buildpackLabelPrimaryKeyColumns, buildpackLabelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, buildpackDBTypes, false, strmangle.SetComplement(buildpackPrimaryKeyColumns, buildpackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, buildpackDBTypes, false, strmangle.SetComplement(buildpackPrimaryKeyColumns, buildpackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Buildpack{&b, &c} {
		err = a.SetResource(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Resource != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ResourceBuildpackLabels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ResourceGUID, x.GUID) {
			t.Error("foreign key was wrong value", a.ResourceGUID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ResourceGUID))
		reflect.Indirect(reflect.ValueOf(&a.ResourceGUID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ResourceGUID, x.GUID) {
			t.Error("foreign key was wrong value", a.ResourceGUID, x.GUID)
		}
	}
}

func testBuildpackLabelToOneRemoveOpBuildpackUsingResource(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BuildpackLabel
	var b Buildpack

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, buildpackLabelDBTypes, false, strmangle.SetComplement(buildpackLabelPrimaryKeyColumns, buildpackLabelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, buildpackDBTypes, false, strmangle.SetComplement(buildpackPrimaryKeyColumns, buildpackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetResource(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveResource(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Resource().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Resource != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ResourceGUID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ResourceBuildpackLabels) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testBuildpackLabelsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuildpackLabel{}
	if err = randomize.Struct(seed, o, buildpackLabelDBTypes, true, buildpackLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildpackLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBuildpackLabelsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuildpackLabel{}
	if err = randomize.Struct(seed, o, buildpackLabelDBTypes, true, buildpackLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildpackLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BuildpackLabelSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBuildpackLabelsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuildpackLabel{}
	if err = randomize.Struct(seed, o, buildpackLabelDBTypes, true, buildpackLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildpackLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BuildpackLabels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	buildpackLabelDBTypes = map[string]string{`ID`: `integer`, `GUID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `ResourceGUID`: `character varying`, `KeyPrefix`: `character varying`, `KeyName`: `character varying`, `Value`: `character varying`}
	_                     = bytes.MinRead
)

func testBuildpackLabelsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(buildpackLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(buildpackLabelAllColumns) == len(buildpackLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BuildpackLabel{}
	if err = randomize.Struct(seed, o, buildpackLabelDBTypes, true, buildpackLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildpackLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BuildpackLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, buildpackLabelDBTypes, true, buildpackLabelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BuildpackLabel struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBuildpackLabelsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(buildpackLabelAllColumns) == len(buildpackLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BuildpackLabel{}
	if err = randomize.Struct(seed, o, buildpackLabelDBTypes, true, buildpackLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildpackLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BuildpackLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, buildpackLabelDBTypes, true, buildpackLabelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BuildpackLabel struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(buildpackLabelAllColumns, buildpackLabelPrimaryKeyColumns) {
		fields = buildpackLabelAllColumns
	} else {
		fields = strmangle.SetComplement(
			buildpackLabelAllColumns,
			buildpackLabelPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BuildpackLabelSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBuildpackLabelsUpsert(t *testing.T) {
	t.Parallel()

	if len(buildpackLabelAllColumns) == len(buildpackLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BuildpackLabel{}
	if err = randomize.Struct(seed, &o, buildpackLabelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BuildpackLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BuildpackLabel: %s", err)
	}

	count, err := BuildpackLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, buildpackLabelDBTypes, false, buildpackLabelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BuildpackLabel struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BuildpackLabel: %s", err)
	}

	count, err = BuildpackLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
