// +build postgres
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DelayedJob is an object representing the database table.
type DelayedJob struct {
	ID         int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	GUID       string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Priority   null.Int    `boil:"priority" json:"priority,omitempty" toml:"priority" yaml:"priority,omitempty"`
	Attempts   null.Int    `boil:"attempts" json:"attempts,omitempty" toml:"attempts" yaml:"attempts,omitempty"`
	Handler    null.String `boil:"handler" json:"handler,omitempty" toml:"handler" yaml:"handler,omitempty"`
	LastError  null.String `boil:"last_error" json:"last_error,omitempty" toml:"last_error" yaml:"last_error,omitempty"`
	RunAt      null.Time   `boil:"run_at" json:"run_at,omitempty" toml:"run_at" yaml:"run_at,omitempty"`
	LockedAt   null.Time   `boil:"locked_at" json:"locked_at,omitempty" toml:"locked_at" yaml:"locked_at,omitempty"`
	FailedAt   null.Time   `boil:"failed_at" json:"failed_at,omitempty" toml:"failed_at" yaml:"failed_at,omitempty"`
	LockedBy   null.String `boil:"locked_by" json:"locked_by,omitempty" toml:"locked_by" yaml:"locked_by,omitempty"`
	Queue      null.String `boil:"queue" json:"queue,omitempty" toml:"queue" yaml:"queue,omitempty"`
	CFAPIError null.String `boil:"cf_api_error" json:"cf_api_error,omitempty" toml:"cf_api_error" yaml:"cf_api_error,omitempty"`

	R *delayedJobR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L delayedJobL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DelayedJobColumns = struct {
	ID         string
	GUID       string
	CreatedAt  string
	UpdatedAt  string
	Priority   string
	Attempts   string
	Handler    string
	LastError  string
	RunAt      string
	LockedAt   string
	FailedAt   string
	LockedBy   string
	Queue      string
	CFAPIError string
}{
	ID:         "id",
	GUID:       "guid",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	Priority:   "priority",
	Attempts:   "attempts",
	Handler:    "handler",
	LastError:  "last_error",
	RunAt:      "run_at",
	LockedAt:   "locked_at",
	FailedAt:   "failed_at",
	LockedBy:   "locked_by",
	Queue:      "queue",
	CFAPIError: "cf_api_error",
}

var DelayedJobTableColumns = struct {
	ID         string
	GUID       string
	CreatedAt  string
	UpdatedAt  string
	Priority   string
	Attempts   string
	Handler    string
	LastError  string
	RunAt      string
	LockedAt   string
	FailedAt   string
	LockedBy   string
	Queue      string
	CFAPIError string
}{
	ID:         "delayed_jobs.id",
	GUID:       "delayed_jobs.guid",
	CreatedAt:  "delayed_jobs.created_at",
	UpdatedAt:  "delayed_jobs.updated_at",
	Priority:   "delayed_jobs.priority",
	Attempts:   "delayed_jobs.attempts",
	Handler:    "delayed_jobs.handler",
	LastError:  "delayed_jobs.last_error",
	RunAt:      "delayed_jobs.run_at",
	LockedAt:   "delayed_jobs.locked_at",
	FailedAt:   "delayed_jobs.failed_at",
	LockedBy:   "delayed_jobs.locked_by",
	Queue:      "delayed_jobs.queue",
	CFAPIError: "delayed_jobs.cf_api_error",
}

// Generated where

var DelayedJobWhere = struct {
	ID         whereHelperint
	GUID       whereHelperstring
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpernull_Time
	Priority   whereHelpernull_Int
	Attempts   whereHelpernull_Int
	Handler    whereHelpernull_String
	LastError  whereHelpernull_String
	RunAt      whereHelpernull_Time
	LockedAt   whereHelpernull_Time
	FailedAt   whereHelpernull_Time
	LockedBy   whereHelpernull_String
	Queue      whereHelpernull_String
	CFAPIError whereHelpernull_String
}{
	ID:         whereHelperint{field: "\"delayed_jobs\".\"id\""},
	GUID:       whereHelperstring{field: "\"delayed_jobs\".\"guid\""},
	CreatedAt:  whereHelpertime_Time{field: "\"delayed_jobs\".\"created_at\""},
	UpdatedAt:  whereHelpernull_Time{field: "\"delayed_jobs\".\"updated_at\""},
	Priority:   whereHelpernull_Int{field: "\"delayed_jobs\".\"priority\""},
	Attempts:   whereHelpernull_Int{field: "\"delayed_jobs\".\"attempts\""},
	Handler:    whereHelpernull_String{field: "\"delayed_jobs\".\"handler\""},
	LastError:  whereHelpernull_String{field: "\"delayed_jobs\".\"last_error\""},
	RunAt:      whereHelpernull_Time{field: "\"delayed_jobs\".\"run_at\""},
	LockedAt:   whereHelpernull_Time{field: "\"delayed_jobs\".\"locked_at\""},
	FailedAt:   whereHelpernull_Time{field: "\"delayed_jobs\".\"failed_at\""},
	LockedBy:   whereHelpernull_String{field: "\"delayed_jobs\".\"locked_by\""},
	Queue:      whereHelpernull_String{field: "\"delayed_jobs\".\"queue\""},
	CFAPIError: whereHelpernull_String{field: "\"delayed_jobs\".\"cf_api_error\""},
}

// DelayedJobRels is where relationship names are stored.
var DelayedJobRels = struct {
}{}

// delayedJobR is where relationships are stored.
type delayedJobR struct {
}

// NewStruct creates a new relationship struct
func (*delayedJobR) NewStruct() *delayedJobR {
	return &delayedJobR{}
}

// delayedJobL is where Load methods for each relationship are stored.
type delayedJobL struct{}

var (
	delayedJobAllColumns            = []string{"id", "guid", "created_at", "updated_at", "priority", "attempts", "handler", "last_error", "run_at", "locked_at", "failed_at", "locked_by", "queue", "cf_api_error"}
	delayedJobColumnsWithoutDefault = []string{"guid", "updated_at", "handler", "last_error", "run_at", "locked_at", "failed_at", "locked_by", "queue", "cf_api_error"}
	delayedJobColumnsWithDefault    = []string{"id", "created_at", "priority", "attempts"}
	delayedJobPrimaryKeyColumns     = []string{"id"}
)

type (
	// DelayedJobSlice is an alias for a slice of pointers to DelayedJob.
	// This should almost always be used instead of []DelayedJob.
	DelayedJobSlice []*DelayedJob
	// DelayedJobHook is the signature for custom DelayedJob hook methods
	DelayedJobHook func(context.Context, boil.ContextExecutor, *DelayedJob) error

	delayedJobQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	delayedJobType                 = reflect.TypeOf(&DelayedJob{})
	delayedJobMapping              = queries.MakeStructMapping(delayedJobType)
	delayedJobPrimaryKeyMapping, _ = queries.BindMapping(delayedJobType, delayedJobMapping, delayedJobPrimaryKeyColumns)
	delayedJobInsertCacheMut       sync.RWMutex
	delayedJobInsertCache          = make(map[string]insertCache)
	delayedJobUpdateCacheMut       sync.RWMutex
	delayedJobUpdateCache          = make(map[string]updateCache)
	delayedJobUpsertCacheMut       sync.RWMutex
	delayedJobUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var delayedJobBeforeInsertHooks []DelayedJobHook
var delayedJobBeforeUpdateHooks []DelayedJobHook
var delayedJobBeforeDeleteHooks []DelayedJobHook
var delayedJobBeforeUpsertHooks []DelayedJobHook

var delayedJobAfterInsertHooks []DelayedJobHook
var delayedJobAfterSelectHooks []DelayedJobHook
var delayedJobAfterUpdateHooks []DelayedJobHook
var delayedJobAfterDeleteHooks []DelayedJobHook
var delayedJobAfterUpsertHooks []DelayedJobHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DelayedJob) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delayedJobBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DelayedJob) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delayedJobBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DelayedJob) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delayedJobBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DelayedJob) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delayedJobBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DelayedJob) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delayedJobAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DelayedJob) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delayedJobAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DelayedJob) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delayedJobAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DelayedJob) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delayedJobAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DelayedJob) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delayedJobAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDelayedJobHook registers your hook function for all future operations.
func AddDelayedJobHook(hookPoint boil.HookPoint, delayedJobHook DelayedJobHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		delayedJobBeforeInsertHooks = append(delayedJobBeforeInsertHooks, delayedJobHook)
	case boil.BeforeUpdateHook:
		delayedJobBeforeUpdateHooks = append(delayedJobBeforeUpdateHooks, delayedJobHook)
	case boil.BeforeDeleteHook:
		delayedJobBeforeDeleteHooks = append(delayedJobBeforeDeleteHooks, delayedJobHook)
	case boil.BeforeUpsertHook:
		delayedJobBeforeUpsertHooks = append(delayedJobBeforeUpsertHooks, delayedJobHook)
	case boil.AfterInsertHook:
		delayedJobAfterInsertHooks = append(delayedJobAfterInsertHooks, delayedJobHook)
	case boil.AfterSelectHook:
		delayedJobAfterSelectHooks = append(delayedJobAfterSelectHooks, delayedJobHook)
	case boil.AfterUpdateHook:
		delayedJobAfterUpdateHooks = append(delayedJobAfterUpdateHooks, delayedJobHook)
	case boil.AfterDeleteHook:
		delayedJobAfterDeleteHooks = append(delayedJobAfterDeleteHooks, delayedJobHook)
	case boil.AfterUpsertHook:
		delayedJobAfterUpsertHooks = append(delayedJobAfterUpsertHooks, delayedJobHook)
	}
}

// One returns a single delayedJob record from the query.
func (q delayedJobQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DelayedJob, error) {
	o := &DelayedJob{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for delayed_jobs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DelayedJob records from the query.
func (q delayedJobQuery) All(ctx context.Context, exec boil.ContextExecutor) (DelayedJobSlice, error) {
	var o []*DelayedJob

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DelayedJob slice")
	}

	if len(delayedJobAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DelayedJob records in the query.
func (q delayedJobQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count delayed_jobs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q delayedJobQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if delayed_jobs exists")
	}

	return count > 0, nil
}

// DelayedJobs retrieves all the records using an executor.
func DelayedJobs(mods ...qm.QueryMod) delayedJobQuery {
	mods = append(mods, qm.From("\"delayed_jobs\""))
	return delayedJobQuery{NewQuery(mods...)}
}

// FindDelayedJob retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDelayedJob(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DelayedJob, error) {
	delayedJobObj := &DelayedJob{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"delayed_jobs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, delayedJobObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from delayed_jobs")
	}

	if err = delayedJobObj.doAfterSelectHooks(ctx, exec); err != nil {
		return delayedJobObj, err
	}

	return delayedJobObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DelayedJob) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no delayed_jobs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(delayedJobColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	delayedJobInsertCacheMut.RLock()
	cache, cached := delayedJobInsertCache[key]
	delayedJobInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			delayedJobAllColumns,
			delayedJobColumnsWithDefault,
			delayedJobColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(delayedJobType, delayedJobMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(delayedJobType, delayedJobMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"delayed_jobs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"delayed_jobs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into delayed_jobs")
	}

	if !cached {
		delayedJobInsertCacheMut.Lock()
		delayedJobInsertCache[key] = cache
		delayedJobInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DelayedJob.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DelayedJob) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	delayedJobUpdateCacheMut.RLock()
	cache, cached := delayedJobUpdateCache[key]
	delayedJobUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			delayedJobAllColumns,
			delayedJobPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update delayed_jobs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"delayed_jobs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, delayedJobPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(delayedJobType, delayedJobMapping, append(wl, delayedJobPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update delayed_jobs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for delayed_jobs")
	}

	if !cached {
		delayedJobUpdateCacheMut.Lock()
		delayedJobUpdateCache[key] = cache
		delayedJobUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q delayedJobQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for delayed_jobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for delayed_jobs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DelayedJobSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), delayedJobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"delayed_jobs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, delayedJobPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in delayedJob slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all delayedJob")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DelayedJob) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no delayed_jobs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(delayedJobColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	delayedJobUpsertCacheMut.RLock()
	cache, cached := delayedJobUpsertCache[key]
	delayedJobUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			delayedJobAllColumns,
			delayedJobColumnsWithDefault,
			delayedJobColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			delayedJobAllColumns,
			delayedJobPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert delayed_jobs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(delayedJobPrimaryKeyColumns))
			copy(conflict, delayedJobPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"delayed_jobs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(delayedJobType, delayedJobMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(delayedJobType, delayedJobMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert delayed_jobs")
	}

	if !cached {
		delayedJobUpsertCacheMut.Lock()
		delayedJobUpsertCache[key] = cache
		delayedJobUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DelayedJob record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DelayedJob) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DelayedJob provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), delayedJobPrimaryKeyMapping)
	sql := "DELETE FROM \"delayed_jobs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from delayed_jobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for delayed_jobs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q delayedJobQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no delayedJobQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from delayed_jobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for delayed_jobs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DelayedJobSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(delayedJobBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), delayedJobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"delayed_jobs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, delayedJobPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from delayedJob slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for delayed_jobs")
	}

	if len(delayedJobAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DelayedJob) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDelayedJob(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DelayedJobSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DelayedJobSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), delayedJobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"delayed_jobs\".* FROM \"delayed_jobs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, delayedJobPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DelayedJobSlice")
	}

	*o = slice

	return nil
}

// DelayedJobExists checks if the DelayedJob row exists.
func DelayedJobExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"delayed_jobs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if delayed_jobs exists")
	}

	return exists, nil
}
