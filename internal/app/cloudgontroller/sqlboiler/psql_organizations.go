// +build psql
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Organization is an object representing the database table.
type Organization struct {
	ID                          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	GUID                        string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	CreatedAt                   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Name                        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	BillingEnabled              bool        `boil:"billing_enabled" json:"billing_enabled" toml:"billing_enabled" yaml:"billing_enabled"`
	QuotaDefinitionID           int         `boil:"quota_definition_id" json:"quota_definition_id" toml:"quota_definition_id" yaml:"quota_definition_id"`
	Status                      null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	DefaultIsolationSegmentGUID null.String `boil:"default_isolation_segment_guid" json:"default_isolation_segment_guid,omitempty" toml:"default_isolation_segment_guid" yaml:"default_isolation_segment_guid,omitempty"`

	R *organizationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L organizationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrganizationColumns = struct {
	ID                          string
	GUID                        string
	CreatedAt                   string
	UpdatedAt                   string
	Name                        string
	BillingEnabled              string
	QuotaDefinitionID           string
	Status                      string
	DefaultIsolationSegmentGUID string
}{
	ID:                          "id",
	GUID:                        "guid",
	CreatedAt:                   "created_at",
	UpdatedAt:                   "updated_at",
	Name:                        "name",
	BillingEnabled:              "billing_enabled",
	QuotaDefinitionID:           "quota_definition_id",
	Status:                      "status",
	DefaultIsolationSegmentGUID: "default_isolation_segment_guid",
}

var OrganizationTableColumns = struct {
	ID                          string
	GUID                        string
	CreatedAt                   string
	UpdatedAt                   string
	Name                        string
	BillingEnabled              string
	QuotaDefinitionID           string
	Status                      string
	DefaultIsolationSegmentGUID string
}{
	ID:                          "organizations.id",
	GUID:                        "organizations.guid",
	CreatedAt:                   "organizations.created_at",
	UpdatedAt:                   "organizations.updated_at",
	Name:                        "organizations.name",
	BillingEnabled:              "organizations.billing_enabled",
	QuotaDefinitionID:           "organizations.quota_definition_id",
	Status:                      "organizations.status",
	DefaultIsolationSegmentGUID: "organizations.default_isolation_segment_guid",
}

// Generated where

var OrganizationWhere = struct {
	ID                          whereHelperint
	GUID                        whereHelperstring
	CreatedAt                   whereHelpertime_Time
	UpdatedAt                   whereHelpernull_Time
	Name                        whereHelperstring
	BillingEnabled              whereHelperbool
	QuotaDefinitionID           whereHelperint
	Status                      whereHelpernull_String
	DefaultIsolationSegmentGUID whereHelpernull_String
}{
	ID:                          whereHelperint{field: "\"organizations\".\"id\""},
	GUID:                        whereHelperstring{field: "\"organizations\".\"guid\""},
	CreatedAt:                   whereHelpertime_Time{field: "\"organizations\".\"created_at\""},
	UpdatedAt:                   whereHelpernull_Time{field: "\"organizations\".\"updated_at\""},
	Name:                        whereHelperstring{field: "\"organizations\".\"name\""},
	BillingEnabled:              whereHelperbool{field: "\"organizations\".\"billing_enabled\""},
	QuotaDefinitionID:           whereHelperint{field: "\"organizations\".\"quota_definition_id\""},
	Status:                      whereHelpernull_String{field: "\"organizations\".\"status\""},
	DefaultIsolationSegmentGUID: whereHelpernull_String{field: "\"organizations\".\"default_isolation_segment_guid\""},
}

// OrganizationRels is where relationship names are stored.
var OrganizationRels = struct {
	QuotaDefinition                 string
	OwningOrganizationDomains       string
	ResourceOrganizationAnnotations string
	ResourceOrganizationLabels      string
	OrganizationsAuditors           string
	OrganizationsBillingManagers    string
	IsolationSegments               string
	OrganizationsManagers           string
	OrganizationsPrivateDomains     string
	OrganizationsUsers              string
	ServicePlanVisibilities         string
	SpaceQuotaDefinitions           string
	Spaces                          string
}{
	QuotaDefinition:                 "QuotaDefinition",
	OwningOrganizationDomains:       "OwningOrganizationDomains",
	ResourceOrganizationAnnotations: "ResourceOrganizationAnnotations",
	ResourceOrganizationLabels:      "ResourceOrganizationLabels",
	OrganizationsAuditors:           "OrganizationsAuditors",
	OrganizationsBillingManagers:    "OrganizationsBillingManagers",
	IsolationSegments:               "IsolationSegments",
	OrganizationsManagers:           "OrganizationsManagers",
	OrganizationsPrivateDomains:     "OrganizationsPrivateDomains",
	OrganizationsUsers:              "OrganizationsUsers",
	ServicePlanVisibilities:         "ServicePlanVisibilities",
	SpaceQuotaDefinitions:           "SpaceQuotaDefinitions",
	Spaces:                          "Spaces",
}

// organizationR is where relationships are stored.
type organizationR struct {
	QuotaDefinition                 *QuotaDefinition                 `boil:"QuotaDefinition" json:"QuotaDefinition" toml:"QuotaDefinition" yaml:"QuotaDefinition"`
	OwningOrganizationDomains       DomainSlice                      `boil:"OwningOrganizationDomains" json:"OwningOrganizationDomains" toml:"OwningOrganizationDomains" yaml:"OwningOrganizationDomains"`
	ResourceOrganizationAnnotations OrganizationAnnotationSlice      `boil:"ResourceOrganizationAnnotations" json:"ResourceOrganizationAnnotations" toml:"ResourceOrganizationAnnotations" yaml:"ResourceOrganizationAnnotations"`
	ResourceOrganizationLabels      OrganizationLabelSlice           `boil:"ResourceOrganizationLabels" json:"ResourceOrganizationLabels" toml:"ResourceOrganizationLabels" yaml:"ResourceOrganizationLabels"`
	OrganizationsAuditors           OrganizationsAuditorSlice        `boil:"OrganizationsAuditors" json:"OrganizationsAuditors" toml:"OrganizationsAuditors" yaml:"OrganizationsAuditors"`
	OrganizationsBillingManagers    OrganizationsBillingManagerSlice `boil:"OrganizationsBillingManagers" json:"OrganizationsBillingManagers" toml:"OrganizationsBillingManagers" yaml:"OrganizationsBillingManagers"`
	IsolationSegments               IsolationSegmentSlice            `boil:"IsolationSegments" json:"IsolationSegments" toml:"IsolationSegments" yaml:"IsolationSegments"`
	OrganizationsManagers           OrganizationsManagerSlice        `boil:"OrganizationsManagers" json:"OrganizationsManagers" toml:"OrganizationsManagers" yaml:"OrganizationsManagers"`
	OrganizationsPrivateDomains     OrganizationsPrivateDomainSlice  `boil:"OrganizationsPrivateDomains" json:"OrganizationsPrivateDomains" toml:"OrganizationsPrivateDomains" yaml:"OrganizationsPrivateDomains"`
	OrganizationsUsers              OrganizationsUserSlice           `boil:"OrganizationsUsers" json:"OrganizationsUsers" toml:"OrganizationsUsers" yaml:"OrganizationsUsers"`
	ServicePlanVisibilities         ServicePlanVisibilitySlice       `boil:"ServicePlanVisibilities" json:"ServicePlanVisibilities" toml:"ServicePlanVisibilities" yaml:"ServicePlanVisibilities"`
	SpaceQuotaDefinitions           SpaceQuotaDefinitionSlice        `boil:"SpaceQuotaDefinitions" json:"SpaceQuotaDefinitions" toml:"SpaceQuotaDefinitions" yaml:"SpaceQuotaDefinitions"`
	Spaces                          SpaceSlice                       `boil:"Spaces" json:"Spaces" toml:"Spaces" yaml:"Spaces"`
}

// NewStruct creates a new relationship struct
func (*organizationR) NewStruct() *organizationR {
	return &organizationR{}
}

// organizationL is where Load methods for each relationship are stored.
type organizationL struct{}

var (
	organizationAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "billing_enabled", "quota_definition_id", "status", "default_isolation_segment_guid"}
	organizationColumnsWithoutDefault = []string{"guid", "updated_at", "name", "quota_definition_id", "default_isolation_segment_guid"}
	organizationColumnsWithDefault    = []string{"id", "created_at", "billing_enabled", "status"}
	organizationPrimaryKeyColumns     = []string{"id"}
)

type (
	// OrganizationSlice is an alias for a slice of pointers to Organization.
	// This should almost always be used instead of []Organization.
	OrganizationSlice []*Organization
	// OrganizationHook is the signature for custom Organization hook methods
	OrganizationHook func(context.Context, boil.ContextExecutor, *Organization) error

	organizationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	organizationType                 = reflect.TypeOf(&Organization{})
	organizationMapping              = queries.MakeStructMapping(organizationType)
	organizationPrimaryKeyMapping, _ = queries.BindMapping(organizationType, organizationMapping, organizationPrimaryKeyColumns)
	organizationInsertCacheMut       sync.RWMutex
	organizationInsertCache          = make(map[string]insertCache)
	organizationUpdateCacheMut       sync.RWMutex
	organizationUpdateCache          = make(map[string]updateCache)
	organizationUpsertCacheMut       sync.RWMutex
	organizationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var organizationBeforeInsertHooks []OrganizationHook
var organizationBeforeUpdateHooks []OrganizationHook
var organizationBeforeDeleteHooks []OrganizationHook
var organizationBeforeUpsertHooks []OrganizationHook

var organizationAfterInsertHooks []OrganizationHook
var organizationAfterSelectHooks []OrganizationHook
var organizationAfterUpdateHooks []OrganizationHook
var organizationAfterDeleteHooks []OrganizationHook
var organizationAfterUpsertHooks []OrganizationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Organization) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Organization) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Organization) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Organization) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Organization) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Organization) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Organization) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Organization) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Organization) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrganizationHook registers your hook function for all future operations.
func AddOrganizationHook(hookPoint boil.HookPoint, organizationHook OrganizationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		organizationBeforeInsertHooks = append(organizationBeforeInsertHooks, organizationHook)
	case boil.BeforeUpdateHook:
		organizationBeforeUpdateHooks = append(organizationBeforeUpdateHooks, organizationHook)
	case boil.BeforeDeleteHook:
		organizationBeforeDeleteHooks = append(organizationBeforeDeleteHooks, organizationHook)
	case boil.BeforeUpsertHook:
		organizationBeforeUpsertHooks = append(organizationBeforeUpsertHooks, organizationHook)
	case boil.AfterInsertHook:
		organizationAfterInsertHooks = append(organizationAfterInsertHooks, organizationHook)
	case boil.AfterSelectHook:
		organizationAfterSelectHooks = append(organizationAfterSelectHooks, organizationHook)
	case boil.AfterUpdateHook:
		organizationAfterUpdateHooks = append(organizationAfterUpdateHooks, organizationHook)
	case boil.AfterDeleteHook:
		organizationAfterDeleteHooks = append(organizationAfterDeleteHooks, organizationHook)
	case boil.AfterUpsertHook:
		organizationAfterUpsertHooks = append(organizationAfterUpsertHooks, organizationHook)
	}
}

// One returns a single organization record from the query.
func (q organizationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Organization, error) {
	o := &Organization{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for organizations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Organization records from the query.
func (q organizationQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationSlice, error) {
	var o []*Organization

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Organization slice")
	}

	if len(organizationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Organization records in the query.
func (q organizationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count organizations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q organizationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if organizations exists")
	}

	return count > 0, nil
}

// QuotaDefinition pointed to by the foreign key.
func (o *Organization) QuotaDefinition(mods ...qm.QueryMod) quotaDefinitionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.QuotaDefinitionID),
	}

	queryMods = append(queryMods, mods...)

	query := QuotaDefinitions(queryMods...)
	queries.SetFrom(query.Query, "\"quota_definitions\"")

	return query
}

// OwningOrganizationDomains retrieves all the domain's Domains with an executor via owning_organization_id column.
func (o *Organization) OwningOrganizationDomains(mods ...qm.QueryMod) domainQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"domains\".\"owning_organization_id\"=?", o.ID),
	)

	query := Domains(queryMods...)
	queries.SetFrom(query.Query, "\"domains\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"domains\".*"})
	}

	return query
}

// ResourceOrganizationAnnotations retrieves all the organization_annotation's OrganizationAnnotations with an executor via resource_guid column.
func (o *Organization) ResourceOrganizationAnnotations(mods ...qm.QueryMod) organizationAnnotationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"organization_annotations\".\"resource_guid\"=?", o.GUID),
	)

	query := OrganizationAnnotations(queryMods...)
	queries.SetFrom(query.Query, "\"organization_annotations\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"organization_annotations\".*"})
	}

	return query
}

// ResourceOrganizationLabels retrieves all the organization_label's OrganizationLabels with an executor via resource_guid column.
func (o *Organization) ResourceOrganizationLabels(mods ...qm.QueryMod) organizationLabelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"organization_labels\".\"resource_guid\"=?", o.GUID),
	)

	query := OrganizationLabels(queryMods...)
	queries.SetFrom(query.Query, "\"organization_labels\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"organization_labels\".*"})
	}

	return query
}

// OrganizationsAuditors retrieves all the organizations_auditor's OrganizationsAuditors with an executor.
func (o *Organization) OrganizationsAuditors(mods ...qm.QueryMod) organizationsAuditorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"organizations_auditors\".\"organization_id\"=?", o.ID),
	)

	query := OrganizationsAuditors(queryMods...)
	queries.SetFrom(query.Query, "\"organizations_auditors\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"organizations_auditors\".*"})
	}

	return query
}

// OrganizationsBillingManagers retrieves all the organizations_billing_manager's OrganizationsBillingManagers with an executor.
func (o *Organization) OrganizationsBillingManagers(mods ...qm.QueryMod) organizationsBillingManagerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"organizations_billing_managers\".\"organization_id\"=?", o.ID),
	)

	query := OrganizationsBillingManagers(queryMods...)
	queries.SetFrom(query.Query, "\"organizations_billing_managers\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"organizations_billing_managers\".*"})
	}

	return query
}

// IsolationSegments retrieves all the isolation_segment's IsolationSegments with an executor.
func (o *Organization) IsolationSegments(mods ...qm.QueryMod) isolationSegmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"organizations_isolation_segments\" on \"isolation_segments\".\"guid\" = \"organizations_isolation_segments\".\"isolation_segment_guid\""),
		qm.Where("\"organizations_isolation_segments\".\"organization_guid\"=?", o.GUID),
	)

	query := IsolationSegments(queryMods...)
	queries.SetFrom(query.Query, "\"isolation_segments\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"isolation_segments\".*"})
	}

	return query
}

// OrganizationsManagers retrieves all the organizations_manager's OrganizationsManagers with an executor.
func (o *Organization) OrganizationsManagers(mods ...qm.QueryMod) organizationsManagerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"organizations_managers\".\"organization_id\"=?", o.ID),
	)

	query := OrganizationsManagers(queryMods...)
	queries.SetFrom(query.Query, "\"organizations_managers\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"organizations_managers\".*"})
	}

	return query
}

// OrganizationsPrivateDomains retrieves all the organizations_private_domain's OrganizationsPrivateDomains with an executor.
func (o *Organization) OrganizationsPrivateDomains(mods ...qm.QueryMod) organizationsPrivateDomainQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"organizations_private_domains\".\"organization_id\"=?", o.ID),
	)

	query := OrganizationsPrivateDomains(queryMods...)
	queries.SetFrom(query.Query, "\"organizations_private_domains\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"organizations_private_domains\".*"})
	}

	return query
}

// OrganizationsUsers retrieves all the organizations_user's OrganizationsUsers with an executor.
func (o *Organization) OrganizationsUsers(mods ...qm.QueryMod) organizationsUserQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"organizations_users\".\"organization_id\"=?", o.ID),
	)

	query := OrganizationsUsers(queryMods...)
	queries.SetFrom(query.Query, "\"organizations_users\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"organizations_users\".*"})
	}

	return query
}

// ServicePlanVisibilities retrieves all the service_plan_visibility's ServicePlanVisibilities with an executor.
func (o *Organization) ServicePlanVisibilities(mods ...qm.QueryMod) servicePlanVisibilityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"service_plan_visibilities\".\"organization_id\"=?", o.ID),
	)

	query := ServicePlanVisibilities(queryMods...)
	queries.SetFrom(query.Query, "\"service_plan_visibilities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"service_plan_visibilities\".*"})
	}

	return query
}

// SpaceQuotaDefinitions retrieves all the space_quota_definition's SpaceQuotaDefinitions with an executor.
func (o *Organization) SpaceQuotaDefinitions(mods ...qm.QueryMod) spaceQuotaDefinitionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"space_quota_definitions\".\"organization_id\"=?", o.ID),
	)

	query := SpaceQuotaDefinitions(queryMods...)
	queries.SetFrom(query.Query, "\"space_quota_definitions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"space_quota_definitions\".*"})
	}

	return query
}

// Spaces retrieves all the space's Spaces with an executor.
func (o *Organization) Spaces(mods ...qm.QueryMod) spaceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"spaces\".\"organization_id\"=?", o.ID),
	)

	query := Spaces(queryMods...)
	queries.SetFrom(query.Query, "\"spaces\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"spaces\".*"})
	}

	return query
}

// LoadQuotaDefinition allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organizationL) LoadQuotaDefinition(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.QuotaDefinitionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.QuotaDefinitionID {
					continue Outer
				}
			}

			args = append(args, obj.QuotaDefinitionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`quota_definitions`),
		qm.WhereIn(`quota_definitions.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load QuotaDefinition")
	}

	var resultSlice []*QuotaDefinition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice QuotaDefinition")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for quota_definitions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for quota_definitions")
	}

	if len(organizationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.QuotaDefinition = foreign
		if foreign.R == nil {
			foreign.R = &quotaDefinitionR{}
		}
		foreign.R.Organizations = append(foreign.R.Organizations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.QuotaDefinitionID == foreign.ID {
				local.R.QuotaDefinition = foreign
				if foreign.R == nil {
					foreign.R = &quotaDefinitionR{}
				}
				foreign.R.Organizations = append(foreign.R.Organizations, local)
				break
			}
		}
	}

	return nil
}

// LoadOwningOrganizationDomains allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadOwningOrganizationDomains(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`domains`),
		qm.WhereIn(`domains.owning_organization_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load domains")
	}

	var resultSlice []*Domain
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice domains")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on domains")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for domains")
	}

	if len(domainAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OwningOrganizationDomains = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &domainR{}
			}
			foreign.R.OwningOrganization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OwningOrganizationID) {
				local.R.OwningOrganizationDomains = append(local.R.OwningOrganizationDomains, foreign)
				if foreign.R == nil {
					foreign.R = &domainR{}
				}
				foreign.R.OwningOrganization = local
				break
			}
		}
	}

	return nil
}

// LoadResourceOrganizationAnnotations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadResourceOrganizationAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organization_annotations`),
		qm.WhereIn(`organization_annotations.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load organization_annotations")
	}

	var resultSlice []*OrganizationAnnotation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice organization_annotations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on organization_annotations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organization_annotations")
	}

	if len(organizationAnnotationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ResourceOrganizationAnnotations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationAnnotationR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceOrganizationAnnotations = append(local.R.ResourceOrganizationAnnotations, foreign)
				if foreign.R == nil {
					foreign.R = &organizationAnnotationR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// LoadResourceOrganizationLabels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadResourceOrganizationLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organization_labels`),
		qm.WhereIn(`organization_labels.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load organization_labels")
	}

	var resultSlice []*OrganizationLabel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice organization_labels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on organization_labels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organization_labels")
	}

	if len(organizationLabelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ResourceOrganizationLabels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationLabelR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceOrganizationLabels = append(local.R.ResourceOrganizationLabels, foreign)
				if foreign.R == nil {
					foreign.R = &organizationLabelR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// LoadOrganizationsAuditors allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadOrganizationsAuditors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizations_auditors`),
		qm.WhereIn(`organizations_auditors.organization_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load organizations_auditors")
	}

	var resultSlice []*OrganizationsAuditor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice organizations_auditors")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on organizations_auditors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations_auditors")
	}

	if len(organizationsAuditorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrganizationsAuditors = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationsAuditorR{}
			}
			foreign.R.Organization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganizationID {
				local.R.OrganizationsAuditors = append(local.R.OrganizationsAuditors, foreign)
				if foreign.R == nil {
					foreign.R = &organizationsAuditorR{}
				}
				foreign.R.Organization = local
				break
			}
		}
	}

	return nil
}

// LoadOrganizationsBillingManagers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadOrganizationsBillingManagers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizations_billing_managers`),
		qm.WhereIn(`organizations_billing_managers.organization_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load organizations_billing_managers")
	}

	var resultSlice []*OrganizationsBillingManager
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice organizations_billing_managers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on organizations_billing_managers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations_billing_managers")
	}

	if len(organizationsBillingManagerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrganizationsBillingManagers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationsBillingManagerR{}
			}
			foreign.R.Organization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganizationID {
				local.R.OrganizationsBillingManagers = append(local.R.OrganizationsBillingManagers, foreign)
				if foreign.R == nil {
					foreign.R = &organizationsBillingManagerR{}
				}
				foreign.R.Organization = local
				break
			}
		}
	}

	return nil
}

// LoadIsolationSegments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadIsolationSegments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.GUID {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"isolation_segments\".id, \"isolation_segments\".guid, \"isolation_segments\".created_at, \"isolation_segments\".updated_at, \"isolation_segments\".name, \"a\".\"organization_guid\""),
		qm.From("\"isolation_segments\""),
		qm.InnerJoin("\"organizations_isolation_segments\" as \"a\" on \"isolation_segments\".\"guid\" = \"a\".\"isolation_segment_guid\""),
		qm.WhereIn("\"a\".\"organization_guid\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load isolation_segments")
	}

	var resultSlice []*IsolationSegment

	var localJoinCols []string
	for results.Next() {
		one := new(IsolationSegment)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.GUID, &one.CreatedAt, &one.UpdatedAt, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for isolation_segments")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice isolation_segments")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on isolation_segments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for isolation_segments")
	}

	if len(isolationSegmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IsolationSegments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &isolationSegmentR{}
			}
			foreign.R.Organizations = append(foreign.R.Organizations, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.GUID == localJoinCol {
				local.R.IsolationSegments = append(local.R.IsolationSegments, foreign)
				if foreign.R == nil {
					foreign.R = &isolationSegmentR{}
				}
				foreign.R.Organizations = append(foreign.R.Organizations, local)
				break
			}
		}
	}

	return nil
}

// LoadOrganizationsManagers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadOrganizationsManagers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizations_managers`),
		qm.WhereIn(`organizations_managers.organization_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load organizations_managers")
	}

	var resultSlice []*OrganizationsManager
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice organizations_managers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on organizations_managers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations_managers")
	}

	if len(organizationsManagerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrganizationsManagers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationsManagerR{}
			}
			foreign.R.Organization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganizationID {
				local.R.OrganizationsManagers = append(local.R.OrganizationsManagers, foreign)
				if foreign.R == nil {
					foreign.R = &organizationsManagerR{}
				}
				foreign.R.Organization = local
				break
			}
		}
	}

	return nil
}

// LoadOrganizationsPrivateDomains allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadOrganizationsPrivateDomains(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizations_private_domains`),
		qm.WhereIn(`organizations_private_domains.organization_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load organizations_private_domains")
	}

	var resultSlice []*OrganizationsPrivateDomain
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice organizations_private_domains")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on organizations_private_domains")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations_private_domains")
	}

	if len(organizationsPrivateDomainAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrganizationsPrivateDomains = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationsPrivateDomainR{}
			}
			foreign.R.Organization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganizationID {
				local.R.OrganizationsPrivateDomains = append(local.R.OrganizationsPrivateDomains, foreign)
				if foreign.R == nil {
					foreign.R = &organizationsPrivateDomainR{}
				}
				foreign.R.Organization = local
				break
			}
		}
	}

	return nil
}

// LoadOrganizationsUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadOrganizationsUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizations_users`),
		qm.WhereIn(`organizations_users.organization_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load organizations_users")
	}

	var resultSlice []*OrganizationsUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice organizations_users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on organizations_users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations_users")
	}

	if len(organizationsUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrganizationsUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationsUserR{}
			}
			foreign.R.Organization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganizationID {
				local.R.OrganizationsUsers = append(local.R.OrganizationsUsers, foreign)
				if foreign.R == nil {
					foreign.R = &organizationsUserR{}
				}
				foreign.R.Organization = local
				break
			}
		}
	}

	return nil
}

// LoadServicePlanVisibilities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadServicePlanVisibilities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`service_plan_visibilities`),
		qm.WhereIn(`service_plan_visibilities.organization_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load service_plan_visibilities")
	}

	var resultSlice []*ServicePlanVisibility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice service_plan_visibilities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on service_plan_visibilities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for service_plan_visibilities")
	}

	if len(servicePlanVisibilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ServicePlanVisibilities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &servicePlanVisibilityR{}
			}
			foreign.R.Organization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganizationID {
				local.R.ServicePlanVisibilities = append(local.R.ServicePlanVisibilities, foreign)
				if foreign.R == nil {
					foreign.R = &servicePlanVisibilityR{}
				}
				foreign.R.Organization = local
				break
			}
		}
	}

	return nil
}

// LoadSpaceQuotaDefinitions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadSpaceQuotaDefinitions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`space_quota_definitions`),
		qm.WhereIn(`space_quota_definitions.organization_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load space_quota_definitions")
	}

	var resultSlice []*SpaceQuotaDefinition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice space_quota_definitions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on space_quota_definitions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for space_quota_definitions")
	}

	if len(spaceQuotaDefinitionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SpaceQuotaDefinitions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &spaceQuotaDefinitionR{}
			}
			foreign.R.Organization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganizationID {
				local.R.SpaceQuotaDefinitions = append(local.R.SpaceQuotaDefinitions, foreign)
				if foreign.R == nil {
					foreign.R = &spaceQuotaDefinitionR{}
				}
				foreign.R.Organization = local
				break
			}
		}
	}

	return nil
}

// LoadSpaces allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadSpaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`spaces`),
		qm.WhereIn(`spaces.organization_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load spaces")
	}

	var resultSlice []*Space
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice spaces")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on spaces")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for spaces")
	}

	if len(spaceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Spaces = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &spaceR{}
			}
			foreign.R.Organization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganizationID {
				local.R.Spaces = append(local.R.Spaces, foreign)
				if foreign.R == nil {
					foreign.R = &spaceR{}
				}
				foreign.R.Organization = local
				break
			}
		}
	}

	return nil
}

// SetQuotaDefinition of the organization to the related item.
// Sets o.R.QuotaDefinition to related.
// Adds o to related.R.Organizations.
func (o *Organization) SetQuotaDefinition(ctx context.Context, exec boil.ContextExecutor, insert bool, related *QuotaDefinition) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"organizations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"quota_definition_id"}),
		strmangle.WhereClause("\"", "\"", 2, organizationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.QuotaDefinitionID = related.ID
	if o.R == nil {
		o.R = &organizationR{
			QuotaDefinition: related,
		}
	} else {
		o.R.QuotaDefinition = related
	}

	if related.R == nil {
		related.R = &quotaDefinitionR{
			Organizations: OrganizationSlice{o},
		}
	} else {
		related.R.Organizations = append(related.R.Organizations, o)
	}

	return nil
}

// AddOwningOrganizationDomains adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.OwningOrganizationDomains.
// Sets related.R.OwningOrganization appropriately.
func (o *Organization) AddOwningOrganizationDomains(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Domain) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OwningOrganizationID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"domains\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"owning_organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, domainPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OwningOrganizationID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			OwningOrganizationDomains: related,
		}
	} else {
		o.R.OwningOrganizationDomains = append(o.R.OwningOrganizationDomains, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &domainR{
				OwningOrganization: o,
			}
		} else {
			rel.R.OwningOrganization = o
		}
	}
	return nil
}

// SetOwningOrganizationDomains removes all previously related items of the
// organization replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OwningOrganization's OwningOrganizationDomains accordingly.
// Replaces o.R.OwningOrganizationDomains with related.
// Sets related.R.OwningOrganization's OwningOrganizationDomains accordingly.
func (o *Organization) SetOwningOrganizationDomains(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Domain) error {
	query := "update \"domains\" set \"owning_organization_id\" = null where \"owning_organization_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OwningOrganizationDomains {
			queries.SetScanner(&rel.OwningOrganizationID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OwningOrganization = nil
		}

		o.R.OwningOrganizationDomains = nil
	}
	return o.AddOwningOrganizationDomains(ctx, exec, insert, related...)
}

// RemoveOwningOrganizationDomains relationships from objects passed in.
// Removes related items from R.OwningOrganizationDomains (uses pointer comparison, removal does not keep order)
// Sets related.R.OwningOrganization.
func (o *Organization) RemoveOwningOrganizationDomains(ctx context.Context, exec boil.ContextExecutor, related ...*Domain) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OwningOrganizationID, nil)
		if rel.R != nil {
			rel.R.OwningOrganization = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("owning_organization_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OwningOrganizationDomains {
			if rel != ri {
				continue
			}

			ln := len(o.R.OwningOrganizationDomains)
			if ln > 1 && i < ln-1 {
				o.R.OwningOrganizationDomains[i] = o.R.OwningOrganizationDomains[ln-1]
			}
			o.R.OwningOrganizationDomains = o.R.OwningOrganizationDomains[:ln-1]
			break
		}
	}

	return nil
}

// AddResourceOrganizationAnnotations adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.ResourceOrganizationAnnotations.
// Sets related.R.Resource appropriately.
func (o *Organization) AddResourceOrganizationAnnotations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationAnnotation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"organization_annotations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"resource_guid"}),
				strmangle.WhereClause("\"", "\"", 2, organizationAnnotationPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			ResourceOrganizationAnnotations: related,
		}
	} else {
		o.R.ResourceOrganizationAnnotations = append(o.R.ResourceOrganizationAnnotations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationAnnotationR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceOrganizationAnnotations removes all previously related items of the
// organization replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceOrganizationAnnotations accordingly.
// Replaces o.R.ResourceOrganizationAnnotations with related.
// Sets related.R.Resource's ResourceOrganizationAnnotations accordingly.
func (o *Organization) SetResourceOrganizationAnnotations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationAnnotation) error {
	query := "update \"organization_annotations\" set \"resource_guid\" = null where \"resource_guid\" = $1"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceOrganizationAnnotations {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceOrganizationAnnotations = nil
	}
	return o.AddResourceOrganizationAnnotations(ctx, exec, insert, related...)
}

// RemoveResourceOrganizationAnnotations relationships from objects passed in.
// Removes related items from R.ResourceOrganizationAnnotations (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (o *Organization) RemoveResourceOrganizationAnnotations(ctx context.Context, exec boil.ContextExecutor, related ...*OrganizationAnnotation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceOrganizationAnnotations {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceOrganizationAnnotations)
			if ln > 1 && i < ln-1 {
				o.R.ResourceOrganizationAnnotations[i] = o.R.ResourceOrganizationAnnotations[ln-1]
			}
			o.R.ResourceOrganizationAnnotations = o.R.ResourceOrganizationAnnotations[:ln-1]
			break
		}
	}

	return nil
}

// AddResourceOrganizationLabels adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.ResourceOrganizationLabels.
// Sets related.R.Resource appropriately.
func (o *Organization) AddResourceOrganizationLabels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationLabel) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"organization_labels\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"resource_guid"}),
				strmangle.WhereClause("\"", "\"", 2, organizationLabelPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			ResourceOrganizationLabels: related,
		}
	} else {
		o.R.ResourceOrganizationLabels = append(o.R.ResourceOrganizationLabels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationLabelR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceOrganizationLabels removes all previously related items of the
// organization replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceOrganizationLabels accordingly.
// Replaces o.R.ResourceOrganizationLabels with related.
// Sets related.R.Resource's ResourceOrganizationLabels accordingly.
func (o *Organization) SetResourceOrganizationLabels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationLabel) error {
	query := "update \"organization_labels\" set \"resource_guid\" = null where \"resource_guid\" = $1"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceOrganizationLabels {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceOrganizationLabels = nil
	}
	return o.AddResourceOrganizationLabels(ctx, exec, insert, related...)
}

// RemoveResourceOrganizationLabels relationships from objects passed in.
// Removes related items from R.ResourceOrganizationLabels (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (o *Organization) RemoveResourceOrganizationLabels(ctx context.Context, exec boil.ContextExecutor, related ...*OrganizationLabel) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceOrganizationLabels {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceOrganizationLabels)
			if ln > 1 && i < ln-1 {
				o.R.ResourceOrganizationLabels[i] = o.R.ResourceOrganizationLabels[ln-1]
			}
			o.R.ResourceOrganizationLabels = o.R.ResourceOrganizationLabels[:ln-1]
			break
		}
	}

	return nil
}

// AddOrganizationsAuditors adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.OrganizationsAuditors.
// Sets related.R.Organization appropriately.
func (o *Organization) AddOrganizationsAuditors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationsAuditor) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"organizations_auditors\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, organizationsAuditorPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.OrganizationsAuditorsPK}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			OrganizationsAuditors: related,
		}
	} else {
		o.R.OrganizationsAuditors = append(o.R.OrganizationsAuditors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationsAuditorR{
				Organization: o,
			}
		} else {
			rel.R.Organization = o
		}
	}
	return nil
}

// AddOrganizationsBillingManagers adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.OrganizationsBillingManagers.
// Sets related.R.Organization appropriately.
func (o *Organization) AddOrganizationsBillingManagers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationsBillingManager) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"organizations_billing_managers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, organizationsBillingManagerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.OrganizationsBillingManagersPK}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			OrganizationsBillingManagers: related,
		}
	} else {
		o.R.OrganizationsBillingManagers = append(o.R.OrganizationsBillingManagers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationsBillingManagerR{
				Organization: o,
			}
		} else {
			rel.R.Organization = o
		}
	}
	return nil
}

// AddIsolationSegments adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.IsolationSegments.
// Sets related.R.Organizations appropriately.
func (o *Organization) AddIsolationSegments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IsolationSegment) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"organizations_isolation_segments\" (\"organization_guid\", \"isolation_segment_guid\") values ($1, $2)"
		values := []interface{}{o.GUID, rel.GUID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &organizationR{
			IsolationSegments: related,
		}
	} else {
		o.R.IsolationSegments = append(o.R.IsolationSegments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &isolationSegmentR{
				Organizations: OrganizationSlice{o},
			}
		} else {
			rel.R.Organizations = append(rel.R.Organizations, o)
		}
	}
	return nil
}

// SetIsolationSegments removes all previously related items of the
// organization replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Organizations's IsolationSegments accordingly.
// Replaces o.R.IsolationSegments with related.
// Sets related.R.Organizations's IsolationSegments accordingly.
func (o *Organization) SetIsolationSegments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IsolationSegment) error {
	query := "delete from \"organizations_isolation_segments\" where \"organization_guid\" = $1"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeIsolationSegmentsFromOrganizationsSlice(o, related)
	if o.R != nil {
		o.R.IsolationSegments = nil
	}
	return o.AddIsolationSegments(ctx, exec, insert, related...)
}

// RemoveIsolationSegments relationships from objects passed in.
// Removes related items from R.IsolationSegments (uses pointer comparison, removal does not keep order)
// Sets related.R.Organizations.
func (o *Organization) RemoveIsolationSegments(ctx context.Context, exec boil.ContextExecutor, related ...*IsolationSegment) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"organizations_isolation_segments\" where \"organization_guid\" = $1 and \"isolation_segment_guid\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.GUID}
	for _, rel := range related {
		values = append(values, rel.GUID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeIsolationSegmentsFromOrganizationsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.IsolationSegments {
			if rel != ri {
				continue
			}

			ln := len(o.R.IsolationSegments)
			if ln > 1 && i < ln-1 {
				o.R.IsolationSegments[i] = o.R.IsolationSegments[ln-1]
			}
			o.R.IsolationSegments = o.R.IsolationSegments[:ln-1]
			break
		}
	}

	return nil
}

func removeIsolationSegmentsFromOrganizationsSlice(o *Organization, related []*IsolationSegment) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Organizations {
			if o.GUID != ri.GUID {
				continue
			}

			ln := len(rel.R.Organizations)
			if ln > 1 && i < ln-1 {
				rel.R.Organizations[i] = rel.R.Organizations[ln-1]
			}
			rel.R.Organizations = rel.R.Organizations[:ln-1]
			break
		}
	}
}

// AddOrganizationsManagers adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.OrganizationsManagers.
// Sets related.R.Organization appropriately.
func (o *Organization) AddOrganizationsManagers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationsManager) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"organizations_managers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, organizationsManagerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.OrganizationsManagersPK}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			OrganizationsManagers: related,
		}
	} else {
		o.R.OrganizationsManagers = append(o.R.OrganizationsManagers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationsManagerR{
				Organization: o,
			}
		} else {
			rel.R.Organization = o
		}
	}
	return nil
}

// AddOrganizationsPrivateDomains adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.OrganizationsPrivateDomains.
// Sets related.R.Organization appropriately.
func (o *Organization) AddOrganizationsPrivateDomains(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationsPrivateDomain) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"organizations_private_domains\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, organizationsPrivateDomainPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.OrganizationsPrivateDomainsPK}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			OrganizationsPrivateDomains: related,
		}
	} else {
		o.R.OrganizationsPrivateDomains = append(o.R.OrganizationsPrivateDomains, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationsPrivateDomainR{
				Organization: o,
			}
		} else {
			rel.R.Organization = o
		}
	}
	return nil
}

// AddOrganizationsUsers adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.OrganizationsUsers.
// Sets related.R.Organization appropriately.
func (o *Organization) AddOrganizationsUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationsUser) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"organizations_users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, organizationsUserPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.OrganizationsUsersPK}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			OrganizationsUsers: related,
		}
	} else {
		o.R.OrganizationsUsers = append(o.R.OrganizationsUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationsUserR{
				Organization: o,
			}
		} else {
			rel.R.Organization = o
		}
	}
	return nil
}

// AddServicePlanVisibilities adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.ServicePlanVisibilities.
// Sets related.R.Organization appropriately.
func (o *Organization) AddServicePlanVisibilities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServicePlanVisibility) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"service_plan_visibilities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, servicePlanVisibilityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			ServicePlanVisibilities: related,
		}
	} else {
		o.R.ServicePlanVisibilities = append(o.R.ServicePlanVisibilities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &servicePlanVisibilityR{
				Organization: o,
			}
		} else {
			rel.R.Organization = o
		}
	}
	return nil
}

// AddSpaceQuotaDefinitions adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.SpaceQuotaDefinitions.
// Sets related.R.Organization appropriately.
func (o *Organization) AddSpaceQuotaDefinitions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpaceQuotaDefinition) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"space_quota_definitions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, spaceQuotaDefinitionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			SpaceQuotaDefinitions: related,
		}
	} else {
		o.R.SpaceQuotaDefinitions = append(o.R.SpaceQuotaDefinitions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &spaceQuotaDefinitionR{
				Organization: o,
			}
		} else {
			rel.R.Organization = o
		}
	}
	return nil
}

// AddSpaces adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.Spaces.
// Sets related.R.Organization appropriately.
func (o *Organization) AddSpaces(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Space) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"spaces\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, spacePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			Spaces: related,
		}
	} else {
		o.R.Spaces = append(o.R.Spaces, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &spaceR{
				Organization: o,
			}
		} else {
			rel.R.Organization = o
		}
	}
	return nil
}

// Organizations retrieves all the records using an executor.
func Organizations(mods ...qm.QueryMod) organizationQuery {
	mods = append(mods, qm.From("\"organizations\""))
	return organizationQuery{NewQuery(mods...)}
}

// FindOrganization retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrganization(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Organization, error) {
	organizationObj := &Organization{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"organizations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, organizationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from organizations")
	}

	if err = organizationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return organizationObj, err
	}

	return organizationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Organization) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no organizations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	organizationInsertCacheMut.RLock()
	cache, cached := organizationInsertCache[key]
	organizationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			organizationAllColumns,
			organizationColumnsWithDefault,
			organizationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(organizationType, organizationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(organizationType, organizationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"organizations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"organizations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into organizations")
	}

	if !cached {
		organizationInsertCacheMut.Lock()
		organizationInsertCache[key] = cache
		organizationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Organization.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Organization) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	organizationUpdateCacheMut.RLock()
	cache, cached := organizationUpdateCache[key]
	organizationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			organizationAllColumns,
			organizationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update organizations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"organizations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, organizationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(organizationType, organizationMapping, append(wl, organizationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update organizations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for organizations")
	}

	if !cached {
		organizationUpdateCacheMut.Lock()
		organizationUpdateCache[key] = cache
		organizationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q organizationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for organizations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for organizations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrganizationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"organizations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, organizationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in organization slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all organization")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Organization) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no organizations provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	organizationUpsertCacheMut.RLock()
	cache, cached := organizationUpsertCache[key]
	organizationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			organizationAllColumns,
			organizationColumnsWithDefault,
			organizationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			organizationAllColumns,
			organizationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert organizations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(organizationPrimaryKeyColumns))
			copy(conflict, organizationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"organizations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(organizationType, organizationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(organizationType, organizationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert organizations")
	}

	if !cached {
		organizationUpsertCacheMut.Lock()
		organizationUpsertCache[key] = cache
		organizationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Organization record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Organization) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Organization provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), organizationPrimaryKeyMapping)
	sql := "DELETE FROM \"organizations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from organizations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for organizations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q organizationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no organizationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from organizations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for organizations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrganizationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(organizationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"organizations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, organizationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from organization slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for organizations")
	}

	if len(organizationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Organization) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrganization(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrganizationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrganizationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"organizations\".* FROM \"organizations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, organizationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrganizationSlice")
	}

	*o = slice

	return nil
}

// OrganizationExists checks if the Organization row exists.
func OrganizationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"organizations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if organizations exists")
	}

	return exists, nil
}
