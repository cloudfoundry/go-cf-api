// +build integration mysql
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOrphanedBlobs(t *testing.T) {
	t.Parallel()

	query := OrphanedBlobs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOrphanedBlobsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrphanedBlob{}
	if err = randomize.Struct(seed, o, orphanedBlobDBTypes, true, orphanedBlobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrphanedBlob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrphanedBlobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrphanedBlobsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrphanedBlob{}
	if err = randomize.Struct(seed, o, orphanedBlobDBTypes, true, orphanedBlobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrphanedBlob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OrphanedBlobs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrphanedBlobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrphanedBlobsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrphanedBlob{}
	if err = randomize.Struct(seed, o, orphanedBlobDBTypes, true, orphanedBlobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrphanedBlob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrphanedBlobSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrphanedBlobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrphanedBlobsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrphanedBlob{}
	if err = randomize.Struct(seed, o, orphanedBlobDBTypes, true, orphanedBlobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrphanedBlob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OrphanedBlobExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OrphanedBlob exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OrphanedBlobExists to return true, but got false.")
	}
}

func testOrphanedBlobsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrphanedBlob{}
	if err = randomize.Struct(seed, o, orphanedBlobDBTypes, true, orphanedBlobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrphanedBlob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	orphanedBlobFound, err := FindOrphanedBlob(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if orphanedBlobFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOrphanedBlobsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrphanedBlob{}
	if err = randomize.Struct(seed, o, orphanedBlobDBTypes, true, orphanedBlobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrphanedBlob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OrphanedBlobs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOrphanedBlobsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrphanedBlob{}
	if err = randomize.Struct(seed, o, orphanedBlobDBTypes, true, orphanedBlobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrphanedBlob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OrphanedBlobs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOrphanedBlobsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orphanedBlobOne := &OrphanedBlob{}
	orphanedBlobTwo := &OrphanedBlob{}
	if err = randomize.Struct(seed, orphanedBlobOne, orphanedBlobDBTypes, false, orphanedBlobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrphanedBlob struct: %s", err)
	}
	if err = randomize.Struct(seed, orphanedBlobTwo, orphanedBlobDBTypes, false, orphanedBlobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrphanedBlob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orphanedBlobOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orphanedBlobTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrphanedBlobs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOrphanedBlobsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	orphanedBlobOne := &OrphanedBlob{}
	orphanedBlobTwo := &OrphanedBlob{}
	if err = randomize.Struct(seed, orphanedBlobOne, orphanedBlobDBTypes, false, orphanedBlobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrphanedBlob struct: %s", err)
	}
	if err = randomize.Struct(seed, orphanedBlobTwo, orphanedBlobDBTypes, false, orphanedBlobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrphanedBlob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orphanedBlobOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orphanedBlobTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrphanedBlobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func orphanedBlobBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrphanedBlob) error {
	*o = OrphanedBlob{}
	return nil
}

func orphanedBlobAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrphanedBlob) error {
	*o = OrphanedBlob{}
	return nil
}

func orphanedBlobAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *OrphanedBlob) error {
	*o = OrphanedBlob{}
	return nil
}

func orphanedBlobBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrphanedBlob) error {
	*o = OrphanedBlob{}
	return nil
}

func orphanedBlobAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrphanedBlob) error {
	*o = OrphanedBlob{}
	return nil
}

func orphanedBlobBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrphanedBlob) error {
	*o = OrphanedBlob{}
	return nil
}

func orphanedBlobAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrphanedBlob) error {
	*o = OrphanedBlob{}
	return nil
}

func orphanedBlobBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrphanedBlob) error {
	*o = OrphanedBlob{}
	return nil
}

func orphanedBlobAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrphanedBlob) error {
	*o = OrphanedBlob{}
	return nil
}

func testOrphanedBlobsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &OrphanedBlob{}
	o := &OrphanedBlob{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, orphanedBlobDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OrphanedBlob object: %s", err)
	}

	AddOrphanedBlobHook(boil.BeforeInsertHook, orphanedBlobBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	orphanedBlobBeforeInsertHooks = []OrphanedBlobHook{}

	AddOrphanedBlobHook(boil.AfterInsertHook, orphanedBlobAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	orphanedBlobAfterInsertHooks = []OrphanedBlobHook{}

	AddOrphanedBlobHook(boil.AfterSelectHook, orphanedBlobAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	orphanedBlobAfterSelectHooks = []OrphanedBlobHook{}

	AddOrphanedBlobHook(boil.BeforeUpdateHook, orphanedBlobBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	orphanedBlobBeforeUpdateHooks = []OrphanedBlobHook{}

	AddOrphanedBlobHook(boil.AfterUpdateHook, orphanedBlobAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	orphanedBlobAfterUpdateHooks = []OrphanedBlobHook{}

	AddOrphanedBlobHook(boil.BeforeDeleteHook, orphanedBlobBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	orphanedBlobBeforeDeleteHooks = []OrphanedBlobHook{}

	AddOrphanedBlobHook(boil.AfterDeleteHook, orphanedBlobAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	orphanedBlobAfterDeleteHooks = []OrphanedBlobHook{}

	AddOrphanedBlobHook(boil.BeforeUpsertHook, orphanedBlobBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	orphanedBlobBeforeUpsertHooks = []OrphanedBlobHook{}

	AddOrphanedBlobHook(boil.AfterUpsertHook, orphanedBlobAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	orphanedBlobAfterUpsertHooks = []OrphanedBlobHook{}
}

func testOrphanedBlobsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrphanedBlob{}
	if err = randomize.Struct(seed, o, orphanedBlobDBTypes, true, orphanedBlobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrphanedBlob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrphanedBlobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrphanedBlobsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrphanedBlob{}
	if err = randomize.Struct(seed, o, orphanedBlobDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrphanedBlob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(orphanedBlobColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OrphanedBlobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrphanedBlobsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrphanedBlob{}
	if err = randomize.Struct(seed, o, orphanedBlobDBTypes, true, orphanedBlobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrphanedBlob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrphanedBlobsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrphanedBlob{}
	if err = randomize.Struct(seed, o, orphanedBlobDBTypes, true, orphanedBlobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrphanedBlob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrphanedBlobSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrphanedBlobsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrphanedBlob{}
	if err = randomize.Struct(seed, o, orphanedBlobDBTypes, true, orphanedBlobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrphanedBlob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrphanedBlobs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	orphanedBlobDBTypes = map[string]string{`ID`: `int`, `GUID`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `BlobKey`: `varchar`, `DirtyCount`: `int`, `BlobstoreType`: `varchar`}
	_                   = bytes.MinRead
)

func testOrphanedBlobsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(orphanedBlobPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(orphanedBlobAllColumns) == len(orphanedBlobPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrphanedBlob{}
	if err = randomize.Struct(seed, o, orphanedBlobDBTypes, true, orphanedBlobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrphanedBlob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrphanedBlobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orphanedBlobDBTypes, true, orphanedBlobPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrphanedBlob struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOrphanedBlobsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(orphanedBlobAllColumns) == len(orphanedBlobPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrphanedBlob{}
	if err = randomize.Struct(seed, o, orphanedBlobDBTypes, true, orphanedBlobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrphanedBlob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrphanedBlobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orphanedBlobDBTypes, true, orphanedBlobPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrphanedBlob struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(orphanedBlobAllColumns, orphanedBlobPrimaryKeyColumns) {
		fields = orphanedBlobAllColumns
	} else {
		fields = strmangle.SetComplement(
			orphanedBlobAllColumns,
			orphanedBlobPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OrphanedBlobSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOrphanedBlobsUpsert(t *testing.T) {
	t.Parallel()

	if len(orphanedBlobAllColumns) == len(orphanedBlobPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLOrphanedBlobUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OrphanedBlob{}
	if err = randomize.Struct(seed, &o, orphanedBlobDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OrphanedBlob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrphanedBlob: %s", err)
	}

	count, err := OrphanedBlobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, orphanedBlobDBTypes, false, orphanedBlobPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrphanedBlob struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrphanedBlob: %s", err)
	}

	count, err = OrphanedBlobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
