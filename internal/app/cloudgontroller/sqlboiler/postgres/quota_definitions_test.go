// +build integration
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testQuotaDefinitions(t *testing.T) {
	t.Parallel()

	query := QuotaDefinitions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testQuotaDefinitionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QuotaDefinition{}
	if err = randomize.Struct(seed, o, quotaDefinitionDBTypes, true, quotaDefinitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuotaDefinition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := QuotaDefinitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQuotaDefinitionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QuotaDefinition{}
	if err = randomize.Struct(seed, o, quotaDefinitionDBTypes, true, quotaDefinitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuotaDefinition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := QuotaDefinitions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := QuotaDefinitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQuotaDefinitionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QuotaDefinition{}
	if err = randomize.Struct(seed, o, quotaDefinitionDBTypes, true, quotaDefinitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuotaDefinition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := QuotaDefinitionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := QuotaDefinitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQuotaDefinitionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QuotaDefinition{}
	if err = randomize.Struct(seed, o, quotaDefinitionDBTypes, true, quotaDefinitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuotaDefinition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := QuotaDefinitionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if QuotaDefinition exists: %s", err)
	}
	if !e {
		t.Errorf("Expected QuotaDefinitionExists to return true, but got false.")
	}
}

func testQuotaDefinitionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QuotaDefinition{}
	if err = randomize.Struct(seed, o, quotaDefinitionDBTypes, true, quotaDefinitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuotaDefinition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	quotaDefinitionFound, err := FindQuotaDefinition(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if quotaDefinitionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testQuotaDefinitionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QuotaDefinition{}
	if err = randomize.Struct(seed, o, quotaDefinitionDBTypes, true, quotaDefinitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuotaDefinition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = QuotaDefinitions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testQuotaDefinitionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QuotaDefinition{}
	if err = randomize.Struct(seed, o, quotaDefinitionDBTypes, true, quotaDefinitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuotaDefinition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := QuotaDefinitions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testQuotaDefinitionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	quotaDefinitionOne := &QuotaDefinition{}
	quotaDefinitionTwo := &QuotaDefinition{}
	if err = randomize.Struct(seed, quotaDefinitionOne, quotaDefinitionDBTypes, false, quotaDefinitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuotaDefinition struct: %s", err)
	}
	if err = randomize.Struct(seed, quotaDefinitionTwo, quotaDefinitionDBTypes, false, quotaDefinitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuotaDefinition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = quotaDefinitionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = quotaDefinitionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := QuotaDefinitions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testQuotaDefinitionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	quotaDefinitionOne := &QuotaDefinition{}
	quotaDefinitionTwo := &QuotaDefinition{}
	if err = randomize.Struct(seed, quotaDefinitionOne, quotaDefinitionDBTypes, false, quotaDefinitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuotaDefinition struct: %s", err)
	}
	if err = randomize.Struct(seed, quotaDefinitionTwo, quotaDefinitionDBTypes, false, quotaDefinitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuotaDefinition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = quotaDefinitionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = quotaDefinitionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QuotaDefinitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func quotaDefinitionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *QuotaDefinition) error {
	*o = QuotaDefinition{}
	return nil
}

func quotaDefinitionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *QuotaDefinition) error {
	*o = QuotaDefinition{}
	return nil
}

func quotaDefinitionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *QuotaDefinition) error {
	*o = QuotaDefinition{}
	return nil
}

func quotaDefinitionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *QuotaDefinition) error {
	*o = QuotaDefinition{}
	return nil
}

func quotaDefinitionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *QuotaDefinition) error {
	*o = QuotaDefinition{}
	return nil
}

func quotaDefinitionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *QuotaDefinition) error {
	*o = QuotaDefinition{}
	return nil
}

func quotaDefinitionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *QuotaDefinition) error {
	*o = QuotaDefinition{}
	return nil
}

func quotaDefinitionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *QuotaDefinition) error {
	*o = QuotaDefinition{}
	return nil
}

func quotaDefinitionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *QuotaDefinition) error {
	*o = QuotaDefinition{}
	return nil
}

func testQuotaDefinitionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &QuotaDefinition{}
	o := &QuotaDefinition{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, quotaDefinitionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize QuotaDefinition object: %s", err)
	}

	AddQuotaDefinitionHook(boil.BeforeInsertHook, quotaDefinitionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	quotaDefinitionBeforeInsertHooks = []QuotaDefinitionHook{}

	AddQuotaDefinitionHook(boil.AfterInsertHook, quotaDefinitionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	quotaDefinitionAfterInsertHooks = []QuotaDefinitionHook{}

	AddQuotaDefinitionHook(boil.AfterSelectHook, quotaDefinitionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	quotaDefinitionAfterSelectHooks = []QuotaDefinitionHook{}

	AddQuotaDefinitionHook(boil.BeforeUpdateHook, quotaDefinitionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	quotaDefinitionBeforeUpdateHooks = []QuotaDefinitionHook{}

	AddQuotaDefinitionHook(boil.AfterUpdateHook, quotaDefinitionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	quotaDefinitionAfterUpdateHooks = []QuotaDefinitionHook{}

	AddQuotaDefinitionHook(boil.BeforeDeleteHook, quotaDefinitionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	quotaDefinitionBeforeDeleteHooks = []QuotaDefinitionHook{}

	AddQuotaDefinitionHook(boil.AfterDeleteHook, quotaDefinitionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	quotaDefinitionAfterDeleteHooks = []QuotaDefinitionHook{}

	AddQuotaDefinitionHook(boil.BeforeUpsertHook, quotaDefinitionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	quotaDefinitionBeforeUpsertHooks = []QuotaDefinitionHook{}

	AddQuotaDefinitionHook(boil.AfterUpsertHook, quotaDefinitionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	quotaDefinitionAfterUpsertHooks = []QuotaDefinitionHook{}
}

func testQuotaDefinitionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QuotaDefinition{}
	if err = randomize.Struct(seed, o, quotaDefinitionDBTypes, true, quotaDefinitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuotaDefinition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QuotaDefinitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testQuotaDefinitionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QuotaDefinition{}
	if err = randomize.Struct(seed, o, quotaDefinitionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize QuotaDefinition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(quotaDefinitionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := QuotaDefinitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testQuotaDefinitionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QuotaDefinition{}
	if err = randomize.Struct(seed, o, quotaDefinitionDBTypes, true, quotaDefinitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuotaDefinition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testQuotaDefinitionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QuotaDefinition{}
	if err = randomize.Struct(seed, o, quotaDefinitionDBTypes, true, quotaDefinitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuotaDefinition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := QuotaDefinitionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testQuotaDefinitionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QuotaDefinition{}
	if err = randomize.Struct(seed, o, quotaDefinitionDBTypes, true, quotaDefinitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuotaDefinition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := QuotaDefinitions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	quotaDefinitionDBTypes = map[string]string{`ID`: `integer`, `GUID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `Name`: `USER-DEFINED`, `NonBasicServicesAllowed`: `boolean`, `TotalServices`: `integer`, `MemoryLimit`: `integer`, `TotalRoutes`: `integer`, `InstanceMemoryLimit`: `integer`, `TotalPrivateDomains`: `integer`, `AppInstanceLimit`: `integer`, `AppTaskLimit`: `integer`, `TotalServiceKeys`: `integer`, `TotalReservedRoutePorts`: `integer`}
	_                      = bytes.MinRead
)

func testQuotaDefinitionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(quotaDefinitionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(quotaDefinitionAllColumns) == len(quotaDefinitionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &QuotaDefinition{}
	if err = randomize.Struct(seed, o, quotaDefinitionDBTypes, true, quotaDefinitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuotaDefinition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QuotaDefinitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, quotaDefinitionDBTypes, true, quotaDefinitionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize QuotaDefinition struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testQuotaDefinitionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(quotaDefinitionAllColumns) == len(quotaDefinitionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &QuotaDefinition{}
	if err = randomize.Struct(seed, o, quotaDefinitionDBTypes, true, quotaDefinitionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuotaDefinition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QuotaDefinitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, quotaDefinitionDBTypes, true, quotaDefinitionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize QuotaDefinition struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(quotaDefinitionAllColumns, quotaDefinitionPrimaryKeyColumns) {
		fields = quotaDefinitionAllColumns
	} else {
		fields = strmangle.SetComplement(
			quotaDefinitionAllColumns,
			quotaDefinitionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := QuotaDefinitionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testQuotaDefinitionsUpsert(t *testing.T) {
	t.Parallel()

	if len(quotaDefinitionAllColumns) == len(quotaDefinitionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := QuotaDefinition{}
	if err = randomize.Struct(seed, &o, quotaDefinitionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize QuotaDefinition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert QuotaDefinition: %s", err)
	}

	count, err := QuotaDefinitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, quotaDefinitionDBTypes, false, quotaDefinitionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize QuotaDefinition struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert QuotaDefinition: %s", err)
	}

	count, err = QuotaDefinitions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
