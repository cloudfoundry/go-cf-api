// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSecurityGroups(t *testing.T) {
	t.Parallel()

	query := SecurityGroups()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSecurityGroupsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SecurityGroup{}
	if err = randomize.Struct(seed, o, securityGroupDBTypes, true, securityGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SecurityGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SecurityGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSecurityGroupsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SecurityGroup{}
	if err = randomize.Struct(seed, o, securityGroupDBTypes, true, securityGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SecurityGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SecurityGroups().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SecurityGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSecurityGroupsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SecurityGroup{}
	if err = randomize.Struct(seed, o, securityGroupDBTypes, true, securityGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SecurityGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SecurityGroupSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SecurityGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSecurityGroupsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SecurityGroup{}
	if err = randomize.Struct(seed, o, securityGroupDBTypes, true, securityGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SecurityGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SecurityGroupExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SecurityGroup exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SecurityGroupExists to return true, but got false.")
	}
}

func testSecurityGroupsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SecurityGroup{}
	if err = randomize.Struct(seed, o, securityGroupDBTypes, true, securityGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SecurityGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	securityGroupFound, err := FindSecurityGroup(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if securityGroupFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSecurityGroupsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SecurityGroup{}
	if err = randomize.Struct(seed, o, securityGroupDBTypes, true, securityGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SecurityGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SecurityGroups().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSecurityGroupsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SecurityGroup{}
	if err = randomize.Struct(seed, o, securityGroupDBTypes, true, securityGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SecurityGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SecurityGroups().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSecurityGroupsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	securityGroupOne := &SecurityGroup{}
	securityGroupTwo := &SecurityGroup{}
	if err = randomize.Struct(seed, securityGroupOne, securityGroupDBTypes, false, securityGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SecurityGroup struct: %s", err)
	}
	if err = randomize.Struct(seed, securityGroupTwo, securityGroupDBTypes, false, securityGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SecurityGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = securityGroupOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = securityGroupTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SecurityGroups().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSecurityGroupsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	securityGroupOne := &SecurityGroup{}
	securityGroupTwo := &SecurityGroup{}
	if err = randomize.Struct(seed, securityGroupOne, securityGroupDBTypes, false, securityGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SecurityGroup struct: %s", err)
	}
	if err = randomize.Struct(seed, securityGroupTwo, securityGroupDBTypes, false, securityGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SecurityGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = securityGroupOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = securityGroupTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SecurityGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func securityGroupBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SecurityGroup) error {
	*o = SecurityGroup{}
	return nil
}

func securityGroupAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SecurityGroup) error {
	*o = SecurityGroup{}
	return nil
}

func securityGroupAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SecurityGroup) error {
	*o = SecurityGroup{}
	return nil
}

func securityGroupBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SecurityGroup) error {
	*o = SecurityGroup{}
	return nil
}

func securityGroupAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SecurityGroup) error {
	*o = SecurityGroup{}
	return nil
}

func securityGroupBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SecurityGroup) error {
	*o = SecurityGroup{}
	return nil
}

func securityGroupAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SecurityGroup) error {
	*o = SecurityGroup{}
	return nil
}

func securityGroupBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SecurityGroup) error {
	*o = SecurityGroup{}
	return nil
}

func securityGroupAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SecurityGroup) error {
	*o = SecurityGroup{}
	return nil
}

func testSecurityGroupsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SecurityGroup{}
	o := &SecurityGroup{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, securityGroupDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SecurityGroup object: %s", err)
	}

	AddSecurityGroupHook(boil.BeforeInsertHook, securityGroupBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	securityGroupBeforeInsertHooks = []SecurityGroupHook{}

	AddSecurityGroupHook(boil.AfterInsertHook, securityGroupAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	securityGroupAfterInsertHooks = []SecurityGroupHook{}

	AddSecurityGroupHook(boil.AfterSelectHook, securityGroupAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	securityGroupAfterSelectHooks = []SecurityGroupHook{}

	AddSecurityGroupHook(boil.BeforeUpdateHook, securityGroupBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	securityGroupBeforeUpdateHooks = []SecurityGroupHook{}

	AddSecurityGroupHook(boil.AfterUpdateHook, securityGroupAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	securityGroupAfterUpdateHooks = []SecurityGroupHook{}

	AddSecurityGroupHook(boil.BeforeDeleteHook, securityGroupBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	securityGroupBeforeDeleteHooks = []SecurityGroupHook{}

	AddSecurityGroupHook(boil.AfterDeleteHook, securityGroupAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	securityGroupAfterDeleteHooks = []SecurityGroupHook{}

	AddSecurityGroupHook(boil.BeforeUpsertHook, securityGroupBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	securityGroupBeforeUpsertHooks = []SecurityGroupHook{}

	AddSecurityGroupHook(boil.AfterUpsertHook, securityGroupAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	securityGroupAfterUpsertHooks = []SecurityGroupHook{}
}

func testSecurityGroupsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SecurityGroup{}
	if err = randomize.Struct(seed, o, securityGroupDBTypes, true, securityGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SecurityGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SecurityGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSecurityGroupsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SecurityGroup{}
	if err = randomize.Struct(seed, o, securityGroupDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SecurityGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(securityGroupColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SecurityGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSecurityGroupToManySecurityGroupsSpaces(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SecurityGroup
	var b, c SecurityGroupsSpace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, securityGroupDBTypes, true, securityGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SecurityGroup struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, securityGroupsSpaceDBTypes, false, securityGroupsSpaceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, securityGroupsSpaceDBTypes, false, securityGroupsSpaceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SecurityGroupID = a.ID
	c.SecurityGroupID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SecurityGroupsSpaces().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SecurityGroupID == b.SecurityGroupID {
			bFound = true
		}
		if v.SecurityGroupID == c.SecurityGroupID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SecurityGroupSlice{&a}
	if err = a.L.LoadSecurityGroupsSpaces(ctx, tx, false, (*[]*SecurityGroup)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SecurityGroupsSpaces); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SecurityGroupsSpaces = nil
	if err = a.L.LoadSecurityGroupsSpaces(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SecurityGroupsSpaces); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSecurityGroupToManyStagingSecurityGroupStagingSecurityGroupsSpaces(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SecurityGroup
	var b, c StagingSecurityGroupsSpace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, securityGroupDBTypes, true, securityGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SecurityGroup struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, stagingSecurityGroupsSpaceDBTypes, false, stagingSecurityGroupsSpaceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, stagingSecurityGroupsSpaceDBTypes, false, stagingSecurityGroupsSpaceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.StagingSecurityGroupID = a.ID
	c.StagingSecurityGroupID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.StagingSecurityGroupStagingSecurityGroupsSpaces().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.StagingSecurityGroupID == b.StagingSecurityGroupID {
			bFound = true
		}
		if v.StagingSecurityGroupID == c.StagingSecurityGroupID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SecurityGroupSlice{&a}
	if err = a.L.LoadStagingSecurityGroupStagingSecurityGroupsSpaces(ctx, tx, false, (*[]*SecurityGroup)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.StagingSecurityGroupStagingSecurityGroupsSpaces); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.StagingSecurityGroupStagingSecurityGroupsSpaces = nil
	if err = a.L.LoadStagingSecurityGroupStagingSecurityGroupsSpaces(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.StagingSecurityGroupStagingSecurityGroupsSpaces); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSecurityGroupToManyAddOpSecurityGroupsSpaces(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SecurityGroup
	var b, c, d, e SecurityGroupsSpace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, securityGroupDBTypes, false, strmangle.SetComplement(securityGroupPrimaryKeyColumns, securityGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SecurityGroupsSpace{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, securityGroupsSpaceDBTypes, false, strmangle.SetComplement(securityGroupsSpacePrimaryKeyColumns, securityGroupsSpaceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SecurityGroupsSpace{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSecurityGroupsSpaces(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SecurityGroupID {
			t.Error("foreign key was wrong value", a.ID, first.SecurityGroupID)
		}
		if a.ID != second.SecurityGroupID {
			t.Error("foreign key was wrong value", a.ID, second.SecurityGroupID)
		}

		if first.R.SecurityGroup != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SecurityGroup != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SecurityGroupsSpaces[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SecurityGroupsSpaces[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SecurityGroupsSpaces().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSecurityGroupToManyAddOpStagingSecurityGroupStagingSecurityGroupsSpaces(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SecurityGroup
	var b, c, d, e StagingSecurityGroupsSpace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, securityGroupDBTypes, false, strmangle.SetComplement(securityGroupPrimaryKeyColumns, securityGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*StagingSecurityGroupsSpace{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, stagingSecurityGroupsSpaceDBTypes, false, strmangle.SetComplement(stagingSecurityGroupsSpacePrimaryKeyColumns, stagingSecurityGroupsSpaceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*StagingSecurityGroupsSpace{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddStagingSecurityGroupStagingSecurityGroupsSpaces(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.StagingSecurityGroupID {
			t.Error("foreign key was wrong value", a.ID, first.StagingSecurityGroupID)
		}
		if a.ID != second.StagingSecurityGroupID {
			t.Error("foreign key was wrong value", a.ID, second.StagingSecurityGroupID)
		}

		if first.R.StagingSecurityGroup != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.StagingSecurityGroup != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.StagingSecurityGroupStagingSecurityGroupsSpaces[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.StagingSecurityGroupStagingSecurityGroupsSpaces[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.StagingSecurityGroupStagingSecurityGroupsSpaces().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSecurityGroupsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SecurityGroup{}
	if err = randomize.Struct(seed, o, securityGroupDBTypes, true, securityGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SecurityGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSecurityGroupsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SecurityGroup{}
	if err = randomize.Struct(seed, o, securityGroupDBTypes, true, securityGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SecurityGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SecurityGroupSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSecurityGroupsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SecurityGroup{}
	if err = randomize.Struct(seed, o, securityGroupDBTypes, true, securityGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SecurityGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SecurityGroups().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	securityGroupDBTypes = map[string]string{`ID`: `integer`, `GUID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `Name`: `text`, `Rules`: `text`, `StagingDefault`: `boolean`, `RunningDefault`: `boolean`}
	_                    = bytes.MinRead
)

func testSecurityGroupsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(securityGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(securityGroupAllColumns) == len(securityGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SecurityGroup{}
	if err = randomize.Struct(seed, o, securityGroupDBTypes, true, securityGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SecurityGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SecurityGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, securityGroupDBTypes, true, securityGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SecurityGroup struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSecurityGroupsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(securityGroupAllColumns) == len(securityGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SecurityGroup{}
	if err = randomize.Struct(seed, o, securityGroupDBTypes, true, securityGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SecurityGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SecurityGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, securityGroupDBTypes, true, securityGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SecurityGroup struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(securityGroupAllColumns, securityGroupPrimaryKeyColumns) {
		fields = securityGroupAllColumns
	} else {
		fields = strmangle.SetComplement(
			securityGroupAllColumns,
			securityGroupPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SecurityGroupSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSecurityGroupsUpsert(t *testing.T) {
	t.Parallel()

	if len(securityGroupAllColumns) == len(securityGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SecurityGroup{}
	if err = randomize.Struct(seed, &o, securityGroupDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SecurityGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SecurityGroup: %s", err)
	}

	count, err := SecurityGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, securityGroupDBTypes, false, securityGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SecurityGroup struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SecurityGroup: %s", err)
	}

	count, err = SecurityGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
