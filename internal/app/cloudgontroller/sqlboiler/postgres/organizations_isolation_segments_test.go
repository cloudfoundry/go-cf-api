// +build integration
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOrganizationsIsolationSegments(t *testing.T) {
	t.Parallel()

	query := OrganizationsIsolationSegments()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOrganizationsIsolationSegmentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationsIsolationSegment{}
	if err = randomize.Struct(seed, o, organizationsIsolationSegmentDBTypes, true, organizationsIsolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationsIsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrganizationsIsolationSegments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrganizationsIsolationSegmentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationsIsolationSegment{}
	if err = randomize.Struct(seed, o, organizationsIsolationSegmentDBTypes, true, organizationsIsolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationsIsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OrganizationsIsolationSegments().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrganizationsIsolationSegments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrganizationsIsolationSegmentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationsIsolationSegment{}
	if err = randomize.Struct(seed, o, organizationsIsolationSegmentDBTypes, true, organizationsIsolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationsIsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrganizationsIsolationSegmentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrganizationsIsolationSegments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrganizationsIsolationSegmentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationsIsolationSegment{}
	if err = randomize.Struct(seed, o, organizationsIsolationSegmentDBTypes, true, organizationsIsolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationsIsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OrganizationsIsolationSegmentExists(ctx, tx, o.OrganizationGUID, o.IsolationSegmentGUID)
	if err != nil {
		t.Errorf("Unable to check if OrganizationsIsolationSegment exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OrganizationsIsolationSegmentExists to return true, but got false.")
	}
}

func testOrganizationsIsolationSegmentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationsIsolationSegment{}
	if err = randomize.Struct(seed, o, organizationsIsolationSegmentDBTypes, true, organizationsIsolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationsIsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	organizationsIsolationSegmentFound, err := FindOrganizationsIsolationSegment(ctx, tx, o.OrganizationGUID, o.IsolationSegmentGUID)
	if err != nil {
		t.Error(err)
	}

	if organizationsIsolationSegmentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOrganizationsIsolationSegmentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationsIsolationSegment{}
	if err = randomize.Struct(seed, o, organizationsIsolationSegmentDBTypes, true, organizationsIsolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationsIsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OrganizationsIsolationSegments().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOrganizationsIsolationSegmentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationsIsolationSegment{}
	if err = randomize.Struct(seed, o, organizationsIsolationSegmentDBTypes, true, organizationsIsolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationsIsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OrganizationsIsolationSegments().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOrganizationsIsolationSegmentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	organizationsIsolationSegmentOne := &OrganizationsIsolationSegment{}
	organizationsIsolationSegmentTwo := &OrganizationsIsolationSegment{}
	if err = randomize.Struct(seed, organizationsIsolationSegmentOne, organizationsIsolationSegmentDBTypes, false, organizationsIsolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationsIsolationSegment struct: %s", err)
	}
	if err = randomize.Struct(seed, organizationsIsolationSegmentTwo, organizationsIsolationSegmentDBTypes, false, organizationsIsolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationsIsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = organizationsIsolationSegmentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = organizationsIsolationSegmentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrganizationsIsolationSegments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOrganizationsIsolationSegmentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	organizationsIsolationSegmentOne := &OrganizationsIsolationSegment{}
	organizationsIsolationSegmentTwo := &OrganizationsIsolationSegment{}
	if err = randomize.Struct(seed, organizationsIsolationSegmentOne, organizationsIsolationSegmentDBTypes, false, organizationsIsolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationsIsolationSegment struct: %s", err)
	}
	if err = randomize.Struct(seed, organizationsIsolationSegmentTwo, organizationsIsolationSegmentDBTypes, false, organizationsIsolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationsIsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = organizationsIsolationSegmentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = organizationsIsolationSegmentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrganizationsIsolationSegments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func organizationsIsolationSegmentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrganizationsIsolationSegment) error {
	*o = OrganizationsIsolationSegment{}
	return nil
}

func organizationsIsolationSegmentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrganizationsIsolationSegment) error {
	*o = OrganizationsIsolationSegment{}
	return nil
}

func organizationsIsolationSegmentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *OrganizationsIsolationSegment) error {
	*o = OrganizationsIsolationSegment{}
	return nil
}

func organizationsIsolationSegmentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrganizationsIsolationSegment) error {
	*o = OrganizationsIsolationSegment{}
	return nil
}

func organizationsIsolationSegmentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrganizationsIsolationSegment) error {
	*o = OrganizationsIsolationSegment{}
	return nil
}

func organizationsIsolationSegmentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrganizationsIsolationSegment) error {
	*o = OrganizationsIsolationSegment{}
	return nil
}

func organizationsIsolationSegmentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrganizationsIsolationSegment) error {
	*o = OrganizationsIsolationSegment{}
	return nil
}

func organizationsIsolationSegmentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrganizationsIsolationSegment) error {
	*o = OrganizationsIsolationSegment{}
	return nil
}

func organizationsIsolationSegmentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrganizationsIsolationSegment) error {
	*o = OrganizationsIsolationSegment{}
	return nil
}

func testOrganizationsIsolationSegmentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &OrganizationsIsolationSegment{}
	o := &OrganizationsIsolationSegment{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, organizationsIsolationSegmentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OrganizationsIsolationSegment object: %s", err)
	}

	AddOrganizationsIsolationSegmentHook(boil.BeforeInsertHook, organizationsIsolationSegmentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	organizationsIsolationSegmentBeforeInsertHooks = []OrganizationsIsolationSegmentHook{}

	AddOrganizationsIsolationSegmentHook(boil.AfterInsertHook, organizationsIsolationSegmentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	organizationsIsolationSegmentAfterInsertHooks = []OrganizationsIsolationSegmentHook{}

	AddOrganizationsIsolationSegmentHook(boil.AfterSelectHook, organizationsIsolationSegmentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	organizationsIsolationSegmentAfterSelectHooks = []OrganizationsIsolationSegmentHook{}

	AddOrganizationsIsolationSegmentHook(boil.BeforeUpdateHook, organizationsIsolationSegmentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	organizationsIsolationSegmentBeforeUpdateHooks = []OrganizationsIsolationSegmentHook{}

	AddOrganizationsIsolationSegmentHook(boil.AfterUpdateHook, organizationsIsolationSegmentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	organizationsIsolationSegmentAfterUpdateHooks = []OrganizationsIsolationSegmentHook{}

	AddOrganizationsIsolationSegmentHook(boil.BeforeDeleteHook, organizationsIsolationSegmentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	organizationsIsolationSegmentBeforeDeleteHooks = []OrganizationsIsolationSegmentHook{}

	AddOrganizationsIsolationSegmentHook(boil.AfterDeleteHook, organizationsIsolationSegmentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	organizationsIsolationSegmentAfterDeleteHooks = []OrganizationsIsolationSegmentHook{}

	AddOrganizationsIsolationSegmentHook(boil.BeforeUpsertHook, organizationsIsolationSegmentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	organizationsIsolationSegmentBeforeUpsertHooks = []OrganizationsIsolationSegmentHook{}

	AddOrganizationsIsolationSegmentHook(boil.AfterUpsertHook, organizationsIsolationSegmentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	organizationsIsolationSegmentAfterUpsertHooks = []OrganizationsIsolationSegmentHook{}
}

func testOrganizationsIsolationSegmentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationsIsolationSegment{}
	if err = randomize.Struct(seed, o, organizationsIsolationSegmentDBTypes, true, organizationsIsolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationsIsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrganizationsIsolationSegments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrganizationsIsolationSegmentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationsIsolationSegment{}
	if err = randomize.Struct(seed, o, organizationsIsolationSegmentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrganizationsIsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(organizationsIsolationSegmentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OrganizationsIsolationSegments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrganizationsIsolationSegmentToOneIsolationSegmentUsingIsolationSegment(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrganizationsIsolationSegment
	var foreign IsolationSegment

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, organizationsIsolationSegmentDBTypes, false, organizationsIsolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationsIsolationSegment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, isolationSegmentDBTypes, false, isolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IsolationSegmentGUID = foreign.GUID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IsolationSegment().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.GUID != foreign.GUID {
		t.Errorf("want: %v, got %v", foreign.GUID, check.GUID)
	}

	slice := OrganizationsIsolationSegmentSlice{&local}
	if err = local.L.LoadIsolationSegment(ctx, tx, false, (*[]*OrganizationsIsolationSegment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IsolationSegment == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IsolationSegment = nil
	if err = local.L.LoadIsolationSegment(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IsolationSegment == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrganizationsIsolationSegmentToOneSetOpIsolationSegmentUsingIsolationSegment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrganizationsIsolationSegment
	var b, c IsolationSegment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationsIsolationSegmentDBTypes, false, strmangle.SetComplement(organizationsIsolationSegmentPrimaryKeyColumns, organizationsIsolationSegmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, isolationSegmentDBTypes, false, strmangle.SetComplement(isolationSegmentPrimaryKeyColumns, isolationSegmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, isolationSegmentDBTypes, false, strmangle.SetComplement(isolationSegmentPrimaryKeyColumns, isolationSegmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*IsolationSegment{&b, &c} {
		err = a.SetIsolationSegment(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IsolationSegment != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrganizationsIsolationSegments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IsolationSegmentGUID != x.GUID {
			t.Error("foreign key was wrong value", a.IsolationSegmentGUID)
		}

		if exists, err := OrganizationsIsolationSegmentExists(ctx, tx, a.OrganizationGUID, a.IsolationSegmentGUID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testOrganizationsIsolationSegmentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationsIsolationSegment{}
	if err = randomize.Struct(seed, o, organizationsIsolationSegmentDBTypes, true, organizationsIsolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationsIsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrganizationsIsolationSegmentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationsIsolationSegment{}
	if err = randomize.Struct(seed, o, organizationsIsolationSegmentDBTypes, true, organizationsIsolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationsIsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrganizationsIsolationSegmentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrganizationsIsolationSegmentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationsIsolationSegment{}
	if err = randomize.Struct(seed, o, organizationsIsolationSegmentDBTypes, true, organizationsIsolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationsIsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrganizationsIsolationSegments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	organizationsIsolationSegmentDBTypes = map[string]string{`OrganizationGUID`: `text`, `IsolationSegmentGUID`: `text`}
	_                                    = bytes.MinRead
)

func testOrganizationsIsolationSegmentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(organizationsIsolationSegmentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(organizationsIsolationSegmentAllColumns) == len(organizationsIsolationSegmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationsIsolationSegment{}
	if err = randomize.Struct(seed, o, organizationsIsolationSegmentDBTypes, true, organizationsIsolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationsIsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrganizationsIsolationSegments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, organizationsIsolationSegmentDBTypes, true, organizationsIsolationSegmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrganizationsIsolationSegment struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOrganizationsIsolationSegmentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(organizationsIsolationSegmentAllColumns) == len(organizationsIsolationSegmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationsIsolationSegment{}
	if err = randomize.Struct(seed, o, organizationsIsolationSegmentDBTypes, true, organizationsIsolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationsIsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrganizationsIsolationSegments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, organizationsIsolationSegmentDBTypes, true, organizationsIsolationSegmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrganizationsIsolationSegment struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(organizationsIsolationSegmentAllColumns, organizationsIsolationSegmentPrimaryKeyColumns) {
		fields = organizationsIsolationSegmentAllColumns
	} else {
		fields = strmangle.SetComplement(
			organizationsIsolationSegmentAllColumns,
			organizationsIsolationSegmentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OrganizationsIsolationSegmentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOrganizationsIsolationSegmentsUpsert(t *testing.T) {
	t.Parallel()

	if len(organizationsIsolationSegmentAllColumns) == len(organizationsIsolationSegmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OrganizationsIsolationSegment{}
	if err = randomize.Struct(seed, &o, organizationsIsolationSegmentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrganizationsIsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrganizationsIsolationSegment: %s", err)
	}

	count, err := OrganizationsIsolationSegments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, organizationsIsolationSegmentDBTypes, false, organizationsIsolationSegmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrganizationsIsolationSegment struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrganizationsIsolationSegment: %s", err)
	}

	count, err = OrganizationsIsolationSegments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
