// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRoutes(t *testing.T) {
	t.Parallel()

	query := Routes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRoutesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Route{}
	if err = randomize.Struct(seed, o, routeDBTypes, true, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Routes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoutesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Route{}
	if err = randomize.Struct(seed, o, routeDBTypes, true, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Routes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Routes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoutesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Route{}
	if err = randomize.Struct(seed, o, routeDBTypes, true, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RouteSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Routes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoutesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Route{}
	if err = randomize.Struct(seed, o, routeDBTypes, true, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RouteExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Route exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RouteExists to return true, but got false.")
	}
}

func testRoutesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Route{}
	if err = randomize.Struct(seed, o, routeDBTypes, true, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	routeFound, err := FindRoute(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if routeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRoutesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Route{}
	if err = randomize.Struct(seed, o, routeDBTypes, true, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Routes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRoutesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Route{}
	if err = randomize.Struct(seed, o, routeDBTypes, true, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Routes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRoutesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	routeOne := &Route{}
	routeTwo := &Route{}
	if err = randomize.Struct(seed, routeOne, routeDBTypes, false, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}
	if err = randomize.Struct(seed, routeTwo, routeDBTypes, false, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = routeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = routeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Routes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRoutesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	routeOne := &Route{}
	routeTwo := &Route{}
	if err = randomize.Struct(seed, routeOne, routeDBTypes, false, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}
	if err = randomize.Struct(seed, routeTwo, routeDBTypes, false, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = routeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = routeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Routes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func routeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Route) error {
	*o = Route{}
	return nil
}

func routeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Route) error {
	*o = Route{}
	return nil
}

func routeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Route) error {
	*o = Route{}
	return nil
}

func routeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Route) error {
	*o = Route{}
	return nil
}

func routeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Route) error {
	*o = Route{}
	return nil
}

func routeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Route) error {
	*o = Route{}
	return nil
}

func routeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Route) error {
	*o = Route{}
	return nil
}

func routeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Route) error {
	*o = Route{}
	return nil
}

func routeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Route) error {
	*o = Route{}
	return nil
}

func testRoutesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Route{}
	o := &Route{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, routeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Route object: %s", err)
	}

	AddRouteHook(boil.BeforeInsertHook, routeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	routeBeforeInsertHooks = []RouteHook{}

	AddRouteHook(boil.AfterInsertHook, routeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	routeAfterInsertHooks = []RouteHook{}

	AddRouteHook(boil.AfterSelectHook, routeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	routeAfterSelectHooks = []RouteHook{}

	AddRouteHook(boil.BeforeUpdateHook, routeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	routeBeforeUpdateHooks = []RouteHook{}

	AddRouteHook(boil.AfterUpdateHook, routeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	routeAfterUpdateHooks = []RouteHook{}

	AddRouteHook(boil.BeforeDeleteHook, routeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	routeBeforeDeleteHooks = []RouteHook{}

	AddRouteHook(boil.AfterDeleteHook, routeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	routeAfterDeleteHooks = []RouteHook{}

	AddRouteHook(boil.BeforeUpsertHook, routeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	routeBeforeUpsertHooks = []RouteHook{}

	AddRouteHook(boil.AfterUpsertHook, routeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	routeAfterUpsertHooks = []RouteHook{}
}

func testRoutesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Route{}
	if err = randomize.Struct(seed, o, routeDBTypes, true, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Routes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoutesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Route{}
	if err = randomize.Struct(seed, o, routeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(routeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Routes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRouteToManyResourceRouteAnnotations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Route
	var b, c RouteAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeDBTypes, true, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, routeAnnotationDBTypes, false, routeAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, routeAnnotationDBTypes, false, routeAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceRouteAnnotations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RouteSlice{&a}
	if err = a.L.LoadResourceRouteAnnotations(ctx, tx, false, (*[]*Route)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceRouteAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceRouteAnnotations = nil
	if err = a.L.LoadResourceRouteAnnotations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceRouteAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRouteToManyRouteBindings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Route
	var b, c RouteBinding

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeDBTypes, true, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, routeBindingDBTypes, false, routeBindingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, routeBindingDBTypes, false, routeBindingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.RouteID, a.ID)
	queries.Assign(&c.RouteID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RouteBindings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.RouteID, b.RouteID) {
			bFound = true
		}
		if queries.Equal(v.RouteID, c.RouteID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RouteSlice{&a}
	if err = a.L.LoadRouteBindings(ctx, tx, false, (*[]*Route)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RouteBindings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RouteBindings = nil
	if err = a.L.LoadRouteBindings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RouteBindings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRouteToManyResourceRouteLabels(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Route
	var b, c RouteLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeDBTypes, true, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, routeLabelDBTypes, false, routeLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, routeLabelDBTypes, false, routeLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceRouteLabels().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RouteSlice{&a}
	if err = a.L.LoadResourceRouteLabels(ctx, tx, false, (*[]*Route)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceRouteLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceRouteLabels = nil
	if err = a.L.LoadResourceRouteLabels(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceRouteLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRouteToManyRouteMappings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Route
	var b, c RouteMapping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeDBTypes, true, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, routeMappingDBTypes, false, routeMappingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, routeMappingDBTypes, false, routeMappingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.RouteGUID = a.GUID
	c.RouteGUID = a.GUID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RouteMappings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.RouteGUID == b.RouteGUID {
			bFound = true
		}
		if v.RouteGUID == c.RouteGUID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RouteSlice{&a}
	if err = a.L.LoadRouteMappings(ctx, tx, false, (*[]*Route)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RouteMappings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RouteMappings = nil
	if err = a.L.LoadRouteMappings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RouteMappings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRouteToManyAddOpResourceRouteAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Route
	var b, c, d, e RouteAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeDBTypes, false, strmangle.SetComplement(routePrimaryKeyColumns, routeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RouteAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, routeAnnotationDBTypes, false, strmangle.SetComplement(routeAnnotationPrimaryKeyColumns, routeAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RouteAnnotation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceRouteAnnotations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceRouteAnnotations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceRouteAnnotations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceRouteAnnotations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRouteToManySetOpResourceRouteAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Route
	var b, c, d, e RouteAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeDBTypes, false, strmangle.SetComplement(routePrimaryKeyColumns, routeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RouteAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, routeAnnotationDBTypes, false, strmangle.SetComplement(routeAnnotationPrimaryKeyColumns, routeAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceRouteAnnotations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceRouteAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceRouteAnnotations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceRouteAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceRouteAnnotations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceRouteAnnotations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRouteToManyRemoveOpResourceRouteAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Route
	var b, c, d, e RouteAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeDBTypes, false, strmangle.SetComplement(routePrimaryKeyColumns, routeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RouteAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, routeAnnotationDBTypes, false, strmangle.SetComplement(routeAnnotationPrimaryKeyColumns, routeAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceRouteAnnotations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceRouteAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceRouteAnnotations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceRouteAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceRouteAnnotations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceRouteAnnotations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceRouteAnnotations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRouteToManyAddOpRouteBindings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Route
	var b, c, d, e RouteBinding

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeDBTypes, false, strmangle.SetComplement(routePrimaryKeyColumns, routeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RouteBinding{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, routeBindingDBTypes, false, strmangle.SetComplement(routeBindingPrimaryKeyColumns, routeBindingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RouteBinding{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRouteBindings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.RouteID) {
			t.Error("foreign key was wrong value", a.ID, first.RouteID)
		}
		if !queries.Equal(a.ID, second.RouteID) {
			t.Error("foreign key was wrong value", a.ID, second.RouteID)
		}

		if first.R.Route != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Route != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RouteBindings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RouteBindings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RouteBindings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRouteToManySetOpRouteBindings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Route
	var b, c, d, e RouteBinding

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeDBTypes, false, strmangle.SetComplement(routePrimaryKeyColumns, routeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RouteBinding{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, routeBindingDBTypes, false, strmangle.SetComplement(routeBindingPrimaryKeyColumns, routeBindingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetRouteBindings(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RouteBindings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetRouteBindings(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RouteBindings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RouteID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RouteID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.RouteID) {
		t.Error("foreign key was wrong value", a.ID, d.RouteID)
	}
	if !queries.Equal(a.ID, e.RouteID) {
		t.Error("foreign key was wrong value", a.ID, e.RouteID)
	}

	if b.R.Route != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Route != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Route != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Route != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.RouteBindings[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.RouteBindings[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRouteToManyRemoveOpRouteBindings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Route
	var b, c, d, e RouteBinding

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeDBTypes, false, strmangle.SetComplement(routePrimaryKeyColumns, routeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RouteBinding{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, routeBindingDBTypes, false, strmangle.SetComplement(routeBindingPrimaryKeyColumns, routeBindingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddRouteBindings(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RouteBindings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveRouteBindings(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RouteBindings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RouteID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RouteID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Route != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Route != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Route != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Route != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.RouteBindings) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.RouteBindings[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.RouteBindings[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRouteToManyAddOpResourceRouteLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Route
	var b, c, d, e RouteLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeDBTypes, false, strmangle.SetComplement(routePrimaryKeyColumns, routeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RouteLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, routeLabelDBTypes, false, strmangle.SetComplement(routeLabelPrimaryKeyColumns, routeLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RouteLabel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceRouteLabels(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceRouteLabels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceRouteLabels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceRouteLabels().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRouteToManySetOpResourceRouteLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Route
	var b, c, d, e RouteLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeDBTypes, false, strmangle.SetComplement(routePrimaryKeyColumns, routeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RouteLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, routeLabelDBTypes, false, strmangle.SetComplement(routeLabelPrimaryKeyColumns, routeLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceRouteLabels(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceRouteLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceRouteLabels(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceRouteLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceRouteLabels[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceRouteLabels[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRouteToManyRemoveOpResourceRouteLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Route
	var b, c, d, e RouteLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeDBTypes, false, strmangle.SetComplement(routePrimaryKeyColumns, routeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RouteLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, routeLabelDBTypes, false, strmangle.SetComplement(routeLabelPrimaryKeyColumns, routeLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceRouteLabels(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceRouteLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceRouteLabels(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceRouteLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceRouteLabels) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceRouteLabels[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceRouteLabels[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRouteToManyAddOpRouteMappings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Route
	var b, c, d, e RouteMapping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeDBTypes, false, strmangle.SetComplement(routePrimaryKeyColumns, routeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RouteMapping{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, routeMappingDBTypes, false, strmangle.SetComplement(routeMappingPrimaryKeyColumns, routeMappingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RouteMapping{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRouteMappings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.GUID != first.RouteGUID {
			t.Error("foreign key was wrong value", a.GUID, first.RouteGUID)
		}
		if a.GUID != second.RouteGUID {
			t.Error("foreign key was wrong value", a.GUID, second.RouteGUID)
		}

		if first.R.Route != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Route != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RouteMappings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RouteMappings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RouteMappings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRouteToOneDomainUsingDomain(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Route
	var foreign Domain

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, routeDBTypes, false, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, domainDBTypes, false, domainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Domain struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DomainID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Domain().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RouteSlice{&local}
	if err = local.L.LoadDomain(ctx, tx, false, (*[]*Route)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Domain == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Domain = nil
	if err = local.L.LoadDomain(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Domain == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRouteToOneSpaceUsingSpace(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Route
	var foreign Space

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, routeDBTypes, false, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, spaceDBTypes, false, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SpaceID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Space().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RouteSlice{&local}
	if err = local.L.LoadSpace(ctx, tx, false, (*[]*Route)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Space == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Space = nil
	if err = local.L.LoadSpace(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Space == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRouteToOneSetOpDomainUsingDomain(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Route
	var b, c Domain

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeDBTypes, false, strmangle.SetComplement(routePrimaryKeyColumns, routeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, domainDBTypes, false, strmangle.SetComplement(domainPrimaryKeyColumns, domainColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, domainDBTypes, false, strmangle.SetComplement(domainPrimaryKeyColumns, domainColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Domain{&b, &c} {
		err = a.SetDomain(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Domain != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Routes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DomainID != x.ID {
			t.Error("foreign key was wrong value", a.DomainID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DomainID))
		reflect.Indirect(reflect.ValueOf(&a.DomainID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DomainID != x.ID {
			t.Error("foreign key was wrong value", a.DomainID, x.ID)
		}
	}
}
func testRouteToOneSetOpSpaceUsingSpace(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Route
	var b, c Space

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, routeDBTypes, false, strmangle.SetComplement(routePrimaryKeyColumns, routeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Space{&b, &c} {
		err = a.SetSpace(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Space != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Routes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SpaceID != x.ID {
			t.Error("foreign key was wrong value", a.SpaceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SpaceID))
		reflect.Indirect(reflect.ValueOf(&a.SpaceID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SpaceID != x.ID {
			t.Error("foreign key was wrong value", a.SpaceID, x.ID)
		}
	}
}

func testRoutesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Route{}
	if err = randomize.Struct(seed, o, routeDBTypes, true, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoutesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Route{}
	if err = randomize.Struct(seed, o, routeDBTypes, true, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RouteSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoutesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Route{}
	if err = randomize.Struct(seed, o, routeDBTypes, true, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Routes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	routeDBTypes = map[string]string{`ID`: `integer`, `GUID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `Host`: `USER-DEFINED`, `DomainID`: `integer`, `SpaceID`: `integer`, `Path`: `USER-DEFINED`, `Port`: `integer`, `VipOffset`: `integer`}
	_            = bytes.MinRead
)

func testRoutesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(routePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(routeAllColumns) == len(routePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Route{}
	if err = randomize.Struct(seed, o, routeDBTypes, true, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Routes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, routeDBTypes, true, routePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRoutesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(routeAllColumns) == len(routePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Route{}
	if err = randomize.Struct(seed, o, routeDBTypes, true, routeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Routes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, routeDBTypes, true, routePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(routeAllColumns, routePrimaryKeyColumns) {
		fields = routeAllColumns
	} else {
		fields = strmangle.SetComplement(
			routeAllColumns,
			routePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RouteSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRoutesUpsert(t *testing.T) {
	t.Parallel()

	if len(routeAllColumns) == len(routePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Route{}
	if err = randomize.Struct(seed, &o, routeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Route: %s", err)
	}

	count, err := Routes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, routeDBTypes, false, routePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Route struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Route: %s", err)
	}

	count, err = Routes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
