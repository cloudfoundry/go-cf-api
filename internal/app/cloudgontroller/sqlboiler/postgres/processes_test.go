// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProcesses(t *testing.T) {
	t.Parallel()

	query := Processes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProcessesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Process{}
	if err = randomize.Struct(seed, o, processDBTypes, true, processColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Processes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProcessesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Process{}
	if err = randomize.Struct(seed, o, processDBTypes, true, processColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Processes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Processes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProcessesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Process{}
	if err = randomize.Struct(seed, o, processDBTypes, true, processColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProcessSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Processes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProcessesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Process{}
	if err = randomize.Struct(seed, o, processDBTypes, true, processColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProcessExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Process exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProcessExists to return true, but got false.")
	}
}

func testProcessesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Process{}
	if err = randomize.Struct(seed, o, processDBTypes, true, processColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	processFound, err := FindProcess(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if processFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProcessesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Process{}
	if err = randomize.Struct(seed, o, processDBTypes, true, processColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Processes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProcessesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Process{}
	if err = randomize.Struct(seed, o, processDBTypes, true, processColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Processes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProcessesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	processOne := &Process{}
	processTwo := &Process{}
	if err = randomize.Struct(seed, processOne, processDBTypes, false, processColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}
	if err = randomize.Struct(seed, processTwo, processDBTypes, false, processColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = processOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = processTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Processes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProcessesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	processOne := &Process{}
	processTwo := &Process{}
	if err = randomize.Struct(seed, processOne, processDBTypes, false, processColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}
	if err = randomize.Struct(seed, processTwo, processDBTypes, false, processColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = processOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = processTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Processes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func processBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Process) error {
	*o = Process{}
	return nil
}

func processAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Process) error {
	*o = Process{}
	return nil
}

func processAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Process) error {
	*o = Process{}
	return nil
}

func processBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Process) error {
	*o = Process{}
	return nil
}

func processAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Process) error {
	*o = Process{}
	return nil
}

func processBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Process) error {
	*o = Process{}
	return nil
}

func processAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Process) error {
	*o = Process{}
	return nil
}

func processBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Process) error {
	*o = Process{}
	return nil
}

func processAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Process) error {
	*o = Process{}
	return nil
}

func testProcessesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Process{}
	o := &Process{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, processDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Process object: %s", err)
	}

	AddProcessHook(boil.BeforeInsertHook, processBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	processBeforeInsertHooks = []ProcessHook{}

	AddProcessHook(boil.AfterInsertHook, processAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	processAfterInsertHooks = []ProcessHook{}

	AddProcessHook(boil.AfterSelectHook, processAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	processAfterSelectHooks = []ProcessHook{}

	AddProcessHook(boil.BeforeUpdateHook, processBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	processBeforeUpdateHooks = []ProcessHook{}

	AddProcessHook(boil.AfterUpdateHook, processAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	processAfterUpdateHooks = []ProcessHook{}

	AddProcessHook(boil.BeforeDeleteHook, processBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	processBeforeDeleteHooks = []ProcessHook{}

	AddProcessHook(boil.AfterDeleteHook, processAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	processAfterDeleteHooks = []ProcessHook{}

	AddProcessHook(boil.BeforeUpsertHook, processBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	processBeforeUpsertHooks = []ProcessHook{}

	AddProcessHook(boil.AfterUpsertHook, processAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	processAfterUpsertHooks = []ProcessHook{}
}

func testProcessesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Process{}
	if err = randomize.Struct(seed, o, processDBTypes, true, processColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Processes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProcessesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Process{}
	if err = randomize.Struct(seed, o, processDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(processColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Processes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProcessToManyAppAppEvents(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Process
	var b, c AppEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, processDBTypes, true, processColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, appEventDBTypes, false, appEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, appEventDBTypes, false, appEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.AppID = a.ID
	c.AppID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AppAppEvents().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.AppID == b.AppID {
			bFound = true
		}
		if v.AppID == c.AppID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProcessSlice{&a}
	if err = a.L.LoadAppAppEvents(ctx, tx, false, (*[]*Process)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AppAppEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AppAppEvents = nil
	if err = a.L.LoadAppAppEvents(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AppAppEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProcessToManyResourceProcessAnnotations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Process
	var b, c ProcessAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, processDBTypes, true, processColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, processAnnotationDBTypes, false, processAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, processAnnotationDBTypes, false, processAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceProcessAnnotations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProcessSlice{&a}
	if err = a.L.LoadResourceProcessAnnotations(ctx, tx, false, (*[]*Process)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceProcessAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceProcessAnnotations = nil
	if err = a.L.LoadResourceProcessAnnotations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceProcessAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProcessToManyResourceProcessLabels(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Process
	var b, c ProcessLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, processDBTypes, true, processColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, processLabelDBTypes, false, processLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, processLabelDBTypes, false, processLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceProcessLabels().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProcessSlice{&a}
	if err = a.L.LoadResourceProcessLabels(ctx, tx, false, (*[]*Process)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceProcessLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceProcessLabels = nil
	if err = a.L.LoadResourceProcessLabels(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceProcessLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProcessToManyAddOpAppAppEvents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Process
	var b, c, d, e AppEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, processDBTypes, false, strmangle.SetComplement(processPrimaryKeyColumns, processColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AppEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appEventDBTypes, false, strmangle.SetComplement(appEventPrimaryKeyColumns, appEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AppEvent{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAppAppEvents(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.AppID {
			t.Error("foreign key was wrong value", a.ID, first.AppID)
		}
		if a.ID != second.AppID {
			t.Error("foreign key was wrong value", a.ID, second.AppID)
		}

		if first.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AppAppEvents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AppAppEvents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AppAppEvents().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testProcessToManyAddOpResourceProcessAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Process
	var b, c, d, e ProcessAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, processDBTypes, false, strmangle.SetComplement(processPrimaryKeyColumns, processColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProcessAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, processAnnotationDBTypes, false, strmangle.SetComplement(processAnnotationPrimaryKeyColumns, processAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ProcessAnnotation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceProcessAnnotations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceProcessAnnotations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceProcessAnnotations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceProcessAnnotations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProcessToManySetOpResourceProcessAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Process
	var b, c, d, e ProcessAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, processDBTypes, false, strmangle.SetComplement(processPrimaryKeyColumns, processColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProcessAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, processAnnotationDBTypes, false, strmangle.SetComplement(processAnnotationPrimaryKeyColumns, processAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceProcessAnnotations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceProcessAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceProcessAnnotations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceProcessAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceProcessAnnotations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceProcessAnnotations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProcessToManyRemoveOpResourceProcessAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Process
	var b, c, d, e ProcessAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, processDBTypes, false, strmangle.SetComplement(processPrimaryKeyColumns, processColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProcessAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, processAnnotationDBTypes, false, strmangle.SetComplement(processAnnotationPrimaryKeyColumns, processAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceProcessAnnotations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceProcessAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceProcessAnnotations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceProcessAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceProcessAnnotations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceProcessAnnotations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceProcessAnnotations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProcessToManyAddOpResourceProcessLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Process
	var b, c, d, e ProcessLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, processDBTypes, false, strmangle.SetComplement(processPrimaryKeyColumns, processColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProcessLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, processLabelDBTypes, false, strmangle.SetComplement(processLabelPrimaryKeyColumns, processLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ProcessLabel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceProcessLabels(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceProcessLabels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceProcessLabels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceProcessLabels().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProcessToManySetOpResourceProcessLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Process
	var b, c, d, e ProcessLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, processDBTypes, false, strmangle.SetComplement(processPrimaryKeyColumns, processColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProcessLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, processLabelDBTypes, false, strmangle.SetComplement(processLabelPrimaryKeyColumns, processLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceProcessLabels(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceProcessLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceProcessLabels(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceProcessLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceProcessLabels[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceProcessLabels[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProcessToManyRemoveOpResourceProcessLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Process
	var b, c, d, e ProcessLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, processDBTypes, false, strmangle.SetComplement(processPrimaryKeyColumns, processColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProcessLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, processLabelDBTypes, false, strmangle.SetComplement(processLabelPrimaryKeyColumns, processLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceProcessLabels(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceProcessLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceProcessLabels(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceProcessLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceProcessLabels) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceProcessLabels[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceProcessLabels[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProcessToOneAppUsingApp(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Process
	var foreign App

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, processDBTypes, true, processColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, appDBTypes, false, appColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize App struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.AppGUID, foreign.GUID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.App().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.GUID, foreign.GUID) {
		t.Errorf("want: %v, got %v", foreign.GUID, check.GUID)
	}

	slice := ProcessSlice{&local}
	if err = local.L.LoadApp(ctx, tx, false, (*[]*Process)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.App == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.App = nil
	if err = local.L.LoadApp(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.App == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProcessToOneSetOpAppUsingApp(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Process
	var b, c App

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, processDBTypes, false, strmangle.SetComplement(processPrimaryKeyColumns, processColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*App{&b, &c} {
		err = a.SetApp(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.App != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Processes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.AppGUID, x.GUID) {
			t.Error("foreign key was wrong value", a.AppGUID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AppGUID))
		reflect.Indirect(reflect.ValueOf(&a.AppGUID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.AppGUID, x.GUID) {
			t.Error("foreign key was wrong value", a.AppGUID, x.GUID)
		}
	}
}

func testProcessToOneRemoveOpAppUsingApp(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Process
	var b App

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, processDBTypes, false, strmangle.SetComplement(processPrimaryKeyColumns, processColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, appDBTypes, false, strmangle.SetComplement(appPrimaryKeyColumns, appColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetApp(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveApp(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.App().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.App != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.AppGUID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Processes) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testProcessesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Process{}
	if err = randomize.Struct(seed, o, processDBTypes, true, processColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProcessesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Process{}
	if err = randomize.Struct(seed, o, processDBTypes, true, processColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProcessSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProcessesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Process{}
	if err = randomize.Struct(seed, o, processDBTypes, true, processColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Processes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	processDBTypes = map[string]string{`ID`: `integer`, `GUID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `Production`: `boolean`, `Memory`: `integer`, `Instances`: `integer`, `FileDescriptors`: `integer`, `DiskQuota`: `integer`, `State`: `text`, `Version`: `text`, `Metadata`: `character varying`, `DetectedBuildpack`: `text`, `NotDeleted`: `boolean`, `HealthCheckTimeout`: `integer`, `Diego`: `boolean`, `PackageUpdatedAt`: `timestamp without time zone`, `AppGUID`: `text`, `Type`: `text`, `HealthCheckType`: `text`, `Command`: `character varying`, `EnableSSH`: `boolean`, `EncryptedDockerCredentialsJSON`: `text`, `DockerSalt`: `text`, `Ports`: `text`, `HealthCheckHTTPEndpoint`: `text`, `HealthCheckInvocationTimeout`: `integer`, `RevisionGUID`: `character varying`}
	_              = bytes.MinRead
)

func testProcessesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(processPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(processAllColumns) == len(processPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Process{}
	if err = randomize.Struct(seed, o, processDBTypes, true, processColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Processes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, processDBTypes, true, processPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProcessesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(processAllColumns) == len(processPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Process{}
	if err = randomize.Struct(seed, o, processDBTypes, true, processColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Processes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, processDBTypes, true, processPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(processAllColumns, processPrimaryKeyColumns) {
		fields = processAllColumns
	} else {
		fields = strmangle.SetComplement(
			processAllColumns,
			processPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProcessSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProcessesUpsert(t *testing.T) {
	t.Parallel()

	if len(processAllColumns) == len(processPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Process{}
	if err = randomize.Struct(seed, &o, processDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Process: %s", err)
	}

	count, err := Processes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, processDBTypes, false, processPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Process struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Process: %s", err)
	}

	count, err = Processes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
