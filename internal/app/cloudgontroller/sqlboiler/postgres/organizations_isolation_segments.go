// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrganizationsIsolationSegment is an object representing the database table.
type OrganizationsIsolationSegment struct {
	OrganizationGUID     string `boil:"organization_guid" json:"organization_guid" toml:"organization_guid" yaml:"organization_guid"`
	IsolationSegmentGUID string `boil:"isolation_segment_guid" json:"isolation_segment_guid" toml:"isolation_segment_guid" yaml:"isolation_segment_guid"`

	R *organizationsIsolationSegmentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L organizationsIsolationSegmentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrganizationsIsolationSegmentColumns = struct {
	OrganizationGUID     string
	IsolationSegmentGUID string
}{
	OrganizationGUID:     "organization_guid",
	IsolationSegmentGUID: "isolation_segment_guid",
}

var OrganizationsIsolationSegmentTableColumns = struct {
	OrganizationGUID     string
	IsolationSegmentGUID string
}{
	OrganizationGUID:     "organizations_isolation_segments.organization_guid",
	IsolationSegmentGUID: "organizations_isolation_segments.isolation_segment_guid",
}

// Generated where

var OrganizationsIsolationSegmentWhere = struct {
	OrganizationGUID     whereHelperstring
	IsolationSegmentGUID whereHelperstring
}{
	OrganizationGUID:     whereHelperstring{field: "\"organizations_isolation_segments\".\"organization_guid\""},
	IsolationSegmentGUID: whereHelperstring{field: "\"organizations_isolation_segments\".\"isolation_segment_guid\""},
}

// OrganizationsIsolationSegmentRels is where relationship names are stored.
var OrganizationsIsolationSegmentRels = struct {
	IsolationSegment string
}{
	IsolationSegment: "IsolationSegment",
}

// organizationsIsolationSegmentR is where relationships are stored.
type organizationsIsolationSegmentR struct {
	IsolationSegment *IsolationSegment `boil:"IsolationSegment" json:"IsolationSegment" toml:"IsolationSegment" yaml:"IsolationSegment"`
}

// NewStruct creates a new relationship struct
func (*organizationsIsolationSegmentR) NewStruct() *organizationsIsolationSegmentR {
	return &organizationsIsolationSegmentR{}
}

// organizationsIsolationSegmentL is where Load methods for each relationship are stored.
type organizationsIsolationSegmentL struct{}

var (
	organizationsIsolationSegmentAllColumns            = []string{"organization_guid", "isolation_segment_guid"}
	organizationsIsolationSegmentColumnsWithoutDefault = []string{"organization_guid", "isolation_segment_guid"}
	organizationsIsolationSegmentColumnsWithDefault    = []string{}
	organizationsIsolationSegmentPrimaryKeyColumns     = []string{"organization_guid", "isolation_segment_guid"}
)

type (
	// OrganizationsIsolationSegmentSlice is an alias for a slice of pointers to OrganizationsIsolationSegment.
	// This should almost always be used instead of []OrganizationsIsolationSegment.
	OrganizationsIsolationSegmentSlice []*OrganizationsIsolationSegment
	// OrganizationsIsolationSegmentHook is the signature for custom OrganizationsIsolationSegment hook methods
	OrganizationsIsolationSegmentHook func(context.Context, boil.ContextExecutor, *OrganizationsIsolationSegment) error

	organizationsIsolationSegmentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	organizationsIsolationSegmentType                 = reflect.TypeOf(&OrganizationsIsolationSegment{})
	organizationsIsolationSegmentMapping              = queries.MakeStructMapping(organizationsIsolationSegmentType)
	organizationsIsolationSegmentPrimaryKeyMapping, _ = queries.BindMapping(organizationsIsolationSegmentType, organizationsIsolationSegmentMapping, organizationsIsolationSegmentPrimaryKeyColumns)
	organizationsIsolationSegmentInsertCacheMut       sync.RWMutex
	organizationsIsolationSegmentInsertCache          = make(map[string]insertCache)
	organizationsIsolationSegmentUpdateCacheMut       sync.RWMutex
	organizationsIsolationSegmentUpdateCache          = make(map[string]updateCache)
	organizationsIsolationSegmentUpsertCacheMut       sync.RWMutex
	organizationsIsolationSegmentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var organizationsIsolationSegmentBeforeInsertHooks []OrganizationsIsolationSegmentHook
var organizationsIsolationSegmentBeforeUpdateHooks []OrganizationsIsolationSegmentHook
var organizationsIsolationSegmentBeforeDeleteHooks []OrganizationsIsolationSegmentHook
var organizationsIsolationSegmentBeforeUpsertHooks []OrganizationsIsolationSegmentHook

var organizationsIsolationSegmentAfterInsertHooks []OrganizationsIsolationSegmentHook
var organizationsIsolationSegmentAfterSelectHooks []OrganizationsIsolationSegmentHook
var organizationsIsolationSegmentAfterUpdateHooks []OrganizationsIsolationSegmentHook
var organizationsIsolationSegmentAfterDeleteHooks []OrganizationsIsolationSegmentHook
var organizationsIsolationSegmentAfterUpsertHooks []OrganizationsIsolationSegmentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrganizationsIsolationSegment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationsIsolationSegmentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrganizationsIsolationSegment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationsIsolationSegmentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrganizationsIsolationSegment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationsIsolationSegmentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrganizationsIsolationSegment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationsIsolationSegmentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrganizationsIsolationSegment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationsIsolationSegmentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrganizationsIsolationSegment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationsIsolationSegmentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrganizationsIsolationSegment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationsIsolationSegmentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrganizationsIsolationSegment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationsIsolationSegmentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrganizationsIsolationSegment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationsIsolationSegmentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrganizationsIsolationSegmentHook registers your hook function for all future operations.
func AddOrganizationsIsolationSegmentHook(hookPoint boil.HookPoint, organizationsIsolationSegmentHook OrganizationsIsolationSegmentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		organizationsIsolationSegmentBeforeInsertHooks = append(organizationsIsolationSegmentBeforeInsertHooks, organizationsIsolationSegmentHook)
	case boil.BeforeUpdateHook:
		organizationsIsolationSegmentBeforeUpdateHooks = append(organizationsIsolationSegmentBeforeUpdateHooks, organizationsIsolationSegmentHook)
	case boil.BeforeDeleteHook:
		organizationsIsolationSegmentBeforeDeleteHooks = append(organizationsIsolationSegmentBeforeDeleteHooks, organizationsIsolationSegmentHook)
	case boil.BeforeUpsertHook:
		organizationsIsolationSegmentBeforeUpsertHooks = append(organizationsIsolationSegmentBeforeUpsertHooks, organizationsIsolationSegmentHook)
	case boil.AfterInsertHook:
		organizationsIsolationSegmentAfterInsertHooks = append(organizationsIsolationSegmentAfterInsertHooks, organizationsIsolationSegmentHook)
	case boil.AfterSelectHook:
		organizationsIsolationSegmentAfterSelectHooks = append(organizationsIsolationSegmentAfterSelectHooks, organizationsIsolationSegmentHook)
	case boil.AfterUpdateHook:
		organizationsIsolationSegmentAfterUpdateHooks = append(organizationsIsolationSegmentAfterUpdateHooks, organizationsIsolationSegmentHook)
	case boil.AfterDeleteHook:
		organizationsIsolationSegmentAfterDeleteHooks = append(organizationsIsolationSegmentAfterDeleteHooks, organizationsIsolationSegmentHook)
	case boil.AfterUpsertHook:
		organizationsIsolationSegmentAfterUpsertHooks = append(organizationsIsolationSegmentAfterUpsertHooks, organizationsIsolationSegmentHook)
	}
}

// One returns a single organizationsIsolationSegment record from the query.
func (q organizationsIsolationSegmentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationsIsolationSegment, error) {
	o := &OrganizationsIsolationSegment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for organizations_isolation_segments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OrganizationsIsolationSegment records from the query.
func (q organizationsIsolationSegmentQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationsIsolationSegmentSlice, error) {
	var o []*OrganizationsIsolationSegment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OrganizationsIsolationSegment slice")
	}

	if len(organizationsIsolationSegmentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OrganizationsIsolationSegment records in the query.
func (q organizationsIsolationSegmentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count organizations_isolation_segments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q organizationsIsolationSegmentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if organizations_isolation_segments exists")
	}

	return count > 0, nil
}

// IsolationSegment pointed to by the foreign key.
func (o *OrganizationsIsolationSegment) IsolationSegment(mods ...qm.QueryMod) isolationSegmentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"guid\" = ?", o.IsolationSegmentGUID),
	}

	queryMods = append(queryMods, mods...)

	query := IsolationSegments(queryMods...)
	queries.SetFrom(query.Query, "\"isolation_segments\"")

	return query
}

// LoadIsolationSegment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organizationsIsolationSegmentL) LoadIsolationSegment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationsIsolationSegment interface{}, mods queries.Applicator) error {
	var slice []*OrganizationsIsolationSegment
	var object *OrganizationsIsolationSegment

	if singular {
		object = maybeOrganizationsIsolationSegment.(*OrganizationsIsolationSegment)
	} else {
		slice = *maybeOrganizationsIsolationSegment.(*[]*OrganizationsIsolationSegment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationsIsolationSegmentR{}
		}
		args = append(args, object.IsolationSegmentGUID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationsIsolationSegmentR{}
			}

			for _, a := range args {
				if a == obj.IsolationSegmentGUID {
					continue Outer
				}
			}

			args = append(args, obj.IsolationSegmentGUID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`isolation_segments`),
		qm.WhereIn(`isolation_segments.guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load IsolationSegment")
	}

	var resultSlice []*IsolationSegment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice IsolationSegment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for isolation_segments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for isolation_segments")
	}

	if len(organizationsIsolationSegmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IsolationSegment = foreign
		if foreign.R == nil {
			foreign.R = &isolationSegmentR{}
		}
		foreign.R.OrganizationsIsolationSegments = append(foreign.R.OrganizationsIsolationSegments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IsolationSegmentGUID == foreign.GUID {
				local.R.IsolationSegment = foreign
				if foreign.R == nil {
					foreign.R = &isolationSegmentR{}
				}
				foreign.R.OrganizationsIsolationSegments = append(foreign.R.OrganizationsIsolationSegments, local)
				break
			}
		}
	}

	return nil
}

// SetIsolationSegment of the organizationsIsolationSegment to the related item.
// Sets o.R.IsolationSegment to related.
// Adds o to related.R.OrganizationsIsolationSegments.
func (o *OrganizationsIsolationSegment) SetIsolationSegment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *IsolationSegment) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"organizations_isolation_segments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"isolation_segment_guid"}),
		strmangle.WhereClause("\"", "\"", 2, organizationsIsolationSegmentPrimaryKeyColumns),
	)
	values := []interface{}{related.GUID, o.OrganizationGUID, o.IsolationSegmentGUID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IsolationSegmentGUID = related.GUID
	if o.R == nil {
		o.R = &organizationsIsolationSegmentR{
			IsolationSegment: related,
		}
	} else {
		o.R.IsolationSegment = related
	}

	if related.R == nil {
		related.R = &isolationSegmentR{
			OrganizationsIsolationSegments: OrganizationsIsolationSegmentSlice{o},
		}
	} else {
		related.R.OrganizationsIsolationSegments = append(related.R.OrganizationsIsolationSegments, o)
	}

	return nil
}

// OrganizationsIsolationSegments retrieves all the records using an executor.
func OrganizationsIsolationSegments(mods ...qm.QueryMod) organizationsIsolationSegmentQuery {
	mods = append(mods, qm.From("\"organizations_isolation_segments\""))
	return organizationsIsolationSegmentQuery{NewQuery(mods...)}
}

// FindOrganizationsIsolationSegment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrganizationsIsolationSegment(ctx context.Context, exec boil.ContextExecutor, organizationGUID string, isolationSegmentGUID string, selectCols ...string) (*OrganizationsIsolationSegment, error) {
	organizationsIsolationSegmentObj := &OrganizationsIsolationSegment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"organizations_isolation_segments\" where \"organization_guid\"=$1 AND \"isolation_segment_guid\"=$2", sel,
	)

	q := queries.Raw(query, organizationGUID, isolationSegmentGUID)

	err := q.Bind(ctx, exec, organizationsIsolationSegmentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from organizations_isolation_segments")
	}

	if err = organizationsIsolationSegmentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return organizationsIsolationSegmentObj, err
	}

	return organizationsIsolationSegmentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrganizationsIsolationSegment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no organizations_isolation_segments provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationsIsolationSegmentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	organizationsIsolationSegmentInsertCacheMut.RLock()
	cache, cached := organizationsIsolationSegmentInsertCache[key]
	organizationsIsolationSegmentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			organizationsIsolationSegmentAllColumns,
			organizationsIsolationSegmentColumnsWithDefault,
			organizationsIsolationSegmentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(organizationsIsolationSegmentType, organizationsIsolationSegmentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(organizationsIsolationSegmentType, organizationsIsolationSegmentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"organizations_isolation_segments\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"organizations_isolation_segments\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into organizations_isolation_segments")
	}

	if !cached {
		organizationsIsolationSegmentInsertCacheMut.Lock()
		organizationsIsolationSegmentInsertCache[key] = cache
		organizationsIsolationSegmentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OrganizationsIsolationSegment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrganizationsIsolationSegment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	organizationsIsolationSegmentUpdateCacheMut.RLock()
	cache, cached := organizationsIsolationSegmentUpdateCache[key]
	organizationsIsolationSegmentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			organizationsIsolationSegmentAllColumns,
			organizationsIsolationSegmentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update organizations_isolation_segments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"organizations_isolation_segments\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, organizationsIsolationSegmentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(organizationsIsolationSegmentType, organizationsIsolationSegmentMapping, append(wl, organizationsIsolationSegmentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update organizations_isolation_segments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for organizations_isolation_segments")
	}

	if !cached {
		organizationsIsolationSegmentUpdateCacheMut.Lock()
		organizationsIsolationSegmentUpdateCache[key] = cache
		organizationsIsolationSegmentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q organizationsIsolationSegmentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for organizations_isolation_segments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for organizations_isolation_segments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrganizationsIsolationSegmentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationsIsolationSegmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"organizations_isolation_segments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, organizationsIsolationSegmentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in organizationsIsolationSegment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all organizationsIsolationSegment")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrganizationsIsolationSegment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no organizations_isolation_segments provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationsIsolationSegmentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	organizationsIsolationSegmentUpsertCacheMut.RLock()
	cache, cached := organizationsIsolationSegmentUpsertCache[key]
	organizationsIsolationSegmentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			organizationsIsolationSegmentAllColumns,
			organizationsIsolationSegmentColumnsWithDefault,
			organizationsIsolationSegmentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			organizationsIsolationSegmentAllColumns,
			organizationsIsolationSegmentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert organizations_isolation_segments, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(organizationsIsolationSegmentPrimaryKeyColumns))
			copy(conflict, organizationsIsolationSegmentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"organizations_isolation_segments\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(organizationsIsolationSegmentType, organizationsIsolationSegmentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(organizationsIsolationSegmentType, organizationsIsolationSegmentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert organizations_isolation_segments")
	}

	if !cached {
		organizationsIsolationSegmentUpsertCacheMut.Lock()
		organizationsIsolationSegmentUpsertCache[key] = cache
		organizationsIsolationSegmentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OrganizationsIsolationSegment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrganizationsIsolationSegment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrganizationsIsolationSegment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), organizationsIsolationSegmentPrimaryKeyMapping)
	sql := "DELETE FROM \"organizations_isolation_segments\" WHERE \"organization_guid\"=$1 AND \"isolation_segment_guid\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from organizations_isolation_segments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for organizations_isolation_segments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q organizationsIsolationSegmentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no organizationsIsolationSegmentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from organizations_isolation_segments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for organizations_isolation_segments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrganizationsIsolationSegmentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(organizationsIsolationSegmentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationsIsolationSegmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"organizations_isolation_segments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, organizationsIsolationSegmentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from organizationsIsolationSegment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for organizations_isolation_segments")
	}

	if len(organizationsIsolationSegmentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrganizationsIsolationSegment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrganizationsIsolationSegment(ctx, exec, o.OrganizationGUID, o.IsolationSegmentGUID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrganizationsIsolationSegmentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrganizationsIsolationSegmentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationsIsolationSegmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"organizations_isolation_segments\".* FROM \"organizations_isolation_segments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, organizationsIsolationSegmentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrganizationsIsolationSegmentSlice")
	}

	*o = slice

	return nil
}

// OrganizationsIsolationSegmentExists checks if the OrganizationsIsolationSegment row exists.
func OrganizationsIsolationSegmentExists(ctx context.Context, exec boil.ContextExecutor, organizationGUID string, isolationSegmentGUID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"organizations_isolation_segments\" where \"organization_guid\"=$1 AND \"isolation_segment_guid\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, organizationGUID, isolationSegmentGUID)
	}
	row := exec.QueryRowContext(ctx, sql, organizationGUID, isolationSegmentGUID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if organizations_isolation_segments exists")
	}

	return exists, nil
}
