// +build integration mysql
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testEnvGroups(t *testing.T) {
	t.Parallel()

	query := EnvGroups()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testEnvGroupsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EnvGroup{}
	if err = randomize.Struct(seed, o, envGroupDBTypes, true, envGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EnvGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEnvGroupsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EnvGroup{}
	if err = randomize.Struct(seed, o, envGroupDBTypes, true, envGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := EnvGroups().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EnvGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEnvGroupsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EnvGroup{}
	if err = randomize.Struct(seed, o, envGroupDBTypes, true, envGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EnvGroupSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EnvGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEnvGroupsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EnvGroup{}
	if err = randomize.Struct(seed, o, envGroupDBTypes, true, envGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := EnvGroupExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if EnvGroup exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EnvGroupExists to return true, but got false.")
	}
}

func testEnvGroupsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EnvGroup{}
	if err = randomize.Struct(seed, o, envGroupDBTypes, true, envGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	envGroupFound, err := FindEnvGroup(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if envGroupFound == nil {
		t.Error("want a record, got nil")
	}
}

func testEnvGroupsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EnvGroup{}
	if err = randomize.Struct(seed, o, envGroupDBTypes, true, envGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = EnvGroups().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testEnvGroupsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EnvGroup{}
	if err = randomize.Struct(seed, o, envGroupDBTypes, true, envGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := EnvGroups().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEnvGroupsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	envGroupOne := &EnvGroup{}
	envGroupTwo := &EnvGroup{}
	if err = randomize.Struct(seed, envGroupOne, envGroupDBTypes, false, envGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvGroup struct: %s", err)
	}
	if err = randomize.Struct(seed, envGroupTwo, envGroupDBTypes, false, envGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = envGroupOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = envGroupTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EnvGroups().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEnvGroupsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	envGroupOne := &EnvGroup{}
	envGroupTwo := &EnvGroup{}
	if err = randomize.Struct(seed, envGroupOne, envGroupDBTypes, false, envGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvGroup struct: %s", err)
	}
	if err = randomize.Struct(seed, envGroupTwo, envGroupDBTypes, false, envGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = envGroupOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = envGroupTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EnvGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func envGroupBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *EnvGroup) error {
	*o = EnvGroup{}
	return nil
}

func envGroupAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *EnvGroup) error {
	*o = EnvGroup{}
	return nil
}

func envGroupAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *EnvGroup) error {
	*o = EnvGroup{}
	return nil
}

func envGroupBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *EnvGroup) error {
	*o = EnvGroup{}
	return nil
}

func envGroupAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *EnvGroup) error {
	*o = EnvGroup{}
	return nil
}

func envGroupBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *EnvGroup) error {
	*o = EnvGroup{}
	return nil
}

func envGroupAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *EnvGroup) error {
	*o = EnvGroup{}
	return nil
}

func envGroupBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *EnvGroup) error {
	*o = EnvGroup{}
	return nil
}

func envGroupAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *EnvGroup) error {
	*o = EnvGroup{}
	return nil
}

func testEnvGroupsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &EnvGroup{}
	o := &EnvGroup{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, envGroupDBTypes, false); err != nil {
		t.Errorf("Unable to randomize EnvGroup object: %s", err)
	}

	AddEnvGroupHook(boil.BeforeInsertHook, envGroupBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	envGroupBeforeInsertHooks = []EnvGroupHook{}

	AddEnvGroupHook(boil.AfterInsertHook, envGroupAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	envGroupAfterInsertHooks = []EnvGroupHook{}

	AddEnvGroupHook(boil.AfterSelectHook, envGroupAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	envGroupAfterSelectHooks = []EnvGroupHook{}

	AddEnvGroupHook(boil.BeforeUpdateHook, envGroupBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	envGroupBeforeUpdateHooks = []EnvGroupHook{}

	AddEnvGroupHook(boil.AfterUpdateHook, envGroupAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	envGroupAfterUpdateHooks = []EnvGroupHook{}

	AddEnvGroupHook(boil.BeforeDeleteHook, envGroupBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	envGroupBeforeDeleteHooks = []EnvGroupHook{}

	AddEnvGroupHook(boil.AfterDeleteHook, envGroupAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	envGroupAfterDeleteHooks = []EnvGroupHook{}

	AddEnvGroupHook(boil.BeforeUpsertHook, envGroupBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	envGroupBeforeUpsertHooks = []EnvGroupHook{}

	AddEnvGroupHook(boil.AfterUpsertHook, envGroupAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	envGroupAfterUpsertHooks = []EnvGroupHook{}
}

func testEnvGroupsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EnvGroup{}
	if err = randomize.Struct(seed, o, envGroupDBTypes, true, envGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EnvGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEnvGroupsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EnvGroup{}
	if err = randomize.Struct(seed, o, envGroupDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EnvGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(envGroupColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := EnvGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEnvGroupsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EnvGroup{}
	if err = randomize.Struct(seed, o, envGroupDBTypes, true, envGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEnvGroupsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EnvGroup{}
	if err = randomize.Struct(seed, o, envGroupDBTypes, true, envGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EnvGroupSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEnvGroupsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EnvGroup{}
	if err = randomize.Struct(seed, o, envGroupDBTypes, true, envGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EnvGroups().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	envGroupDBTypes = map[string]string{`ID`: `int`, `GUID`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `Name`: `varchar`, `EnvironmentJSON`: `text`, `Salt`: `varchar`, `EncryptionKeyLabel`: `varchar`, `EncryptionIterations`: `int`}
	_               = bytes.MinRead
)

func testEnvGroupsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(envGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(envGroupAllColumns) == len(envGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EnvGroup{}
	if err = randomize.Struct(seed, o, envGroupDBTypes, true, envGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EnvGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, envGroupDBTypes, true, envGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EnvGroup struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testEnvGroupsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(envGroupAllColumns) == len(envGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EnvGroup{}
	if err = randomize.Struct(seed, o, envGroupDBTypes, true, envGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EnvGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EnvGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, envGroupDBTypes, true, envGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EnvGroup struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(envGroupAllColumns, envGroupPrimaryKeyColumns) {
		fields = envGroupAllColumns
	} else {
		fields = strmangle.SetComplement(
			envGroupAllColumns,
			envGroupPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := EnvGroupSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testEnvGroupsUpsert(t *testing.T) {
	t.Parallel()

	if len(envGroupAllColumns) == len(envGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLEnvGroupUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := EnvGroup{}
	if err = randomize.Struct(seed, &o, envGroupDBTypes, false); err != nil {
		t.Errorf("Unable to randomize EnvGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EnvGroup: %s", err)
	}

	count, err := EnvGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, envGroupDBTypes, false, envGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EnvGroup struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EnvGroup: %s", err)
	}

	count, err = EnvGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
