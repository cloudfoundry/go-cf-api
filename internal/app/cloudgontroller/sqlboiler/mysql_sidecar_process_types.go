// +build mysql
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SidecarProcessType is an object representing the database table.
type SidecarProcessType struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	GUID        string    `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Type        string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	SidecarGUID string    `boil:"sidecar_guid" json:"sidecar_guid" toml:"sidecar_guid" yaml:"sidecar_guid"`
	AppGUID     string    `boil:"app_guid" json:"app_guid" toml:"app_guid" yaml:"app_guid"`

	R *sidecarProcessTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sidecarProcessTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SidecarProcessTypeColumns = struct {
	ID          string
	GUID        string
	CreatedAt   string
	UpdatedAt   string
	Type        string
	SidecarGUID string
	AppGUID     string
}{
	ID:          "id",
	GUID:        "guid",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	Type:        "type",
	SidecarGUID: "sidecar_guid",
	AppGUID:     "app_guid",
}

var SidecarProcessTypeTableColumns = struct {
	ID          string
	GUID        string
	CreatedAt   string
	UpdatedAt   string
	Type        string
	SidecarGUID string
	AppGUID     string
}{
	ID:          "sidecar_process_types.id",
	GUID:        "sidecar_process_types.guid",
	CreatedAt:   "sidecar_process_types.created_at",
	UpdatedAt:   "sidecar_process_types.updated_at",
	Type:        "sidecar_process_types.type",
	SidecarGUID: "sidecar_process_types.sidecar_guid",
	AppGUID:     "sidecar_process_types.app_guid",
}

// Generated where

var SidecarProcessTypeWhere = struct {
	ID          whereHelperint
	GUID        whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpernull_Time
	Type        whereHelperstring
	SidecarGUID whereHelperstring
	AppGUID     whereHelperstring
}{
	ID:          whereHelperint{field: "`sidecar_process_types`.`id`"},
	GUID:        whereHelperstring{field: "`sidecar_process_types`.`guid`"},
	CreatedAt:   whereHelpertime_Time{field: "`sidecar_process_types`.`created_at`"},
	UpdatedAt:   whereHelpernull_Time{field: "`sidecar_process_types`.`updated_at`"},
	Type:        whereHelperstring{field: "`sidecar_process_types`.`type`"},
	SidecarGUID: whereHelperstring{field: "`sidecar_process_types`.`sidecar_guid`"},
	AppGUID:     whereHelperstring{field: "`sidecar_process_types`.`app_guid`"},
}

// SidecarProcessTypeRels is where relationship names are stored.
var SidecarProcessTypeRels = struct {
	Sidecar string
}{
	Sidecar: "Sidecar",
}

// sidecarProcessTypeR is where relationships are stored.
type sidecarProcessTypeR struct {
	Sidecar *Sidecar `boil:"Sidecar" json:"Sidecar" toml:"Sidecar" yaml:"Sidecar"`
}

// NewStruct creates a new relationship struct
func (*sidecarProcessTypeR) NewStruct() *sidecarProcessTypeR {
	return &sidecarProcessTypeR{}
}

// sidecarProcessTypeL is where Load methods for each relationship are stored.
type sidecarProcessTypeL struct{}

var (
	sidecarProcessTypeAllColumns            = []string{"id", "guid", "created_at", "updated_at", "type", "sidecar_guid", "app_guid"}
	sidecarProcessTypeColumnsWithoutDefault = []string{"guid", "updated_at", "type", "sidecar_guid", "app_guid"}
	sidecarProcessTypeColumnsWithDefault    = []string{"id", "created_at"}
	sidecarProcessTypePrimaryKeyColumns     = []string{"id"}
)

type (
	// SidecarProcessTypeSlice is an alias for a slice of pointers to SidecarProcessType.
	// This should almost always be used instead of []SidecarProcessType.
	SidecarProcessTypeSlice []*SidecarProcessType
	// SidecarProcessTypeHook is the signature for custom SidecarProcessType hook methods
	SidecarProcessTypeHook func(context.Context, boil.ContextExecutor, *SidecarProcessType) error

	sidecarProcessTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sidecarProcessTypeType                 = reflect.TypeOf(&SidecarProcessType{})
	sidecarProcessTypeMapping              = queries.MakeStructMapping(sidecarProcessTypeType)
	sidecarProcessTypePrimaryKeyMapping, _ = queries.BindMapping(sidecarProcessTypeType, sidecarProcessTypeMapping, sidecarProcessTypePrimaryKeyColumns)
	sidecarProcessTypeInsertCacheMut       sync.RWMutex
	sidecarProcessTypeInsertCache          = make(map[string]insertCache)
	sidecarProcessTypeUpdateCacheMut       sync.RWMutex
	sidecarProcessTypeUpdateCache          = make(map[string]updateCache)
	sidecarProcessTypeUpsertCacheMut       sync.RWMutex
	sidecarProcessTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sidecarProcessTypeBeforeInsertHooks []SidecarProcessTypeHook
var sidecarProcessTypeBeforeUpdateHooks []SidecarProcessTypeHook
var sidecarProcessTypeBeforeDeleteHooks []SidecarProcessTypeHook
var sidecarProcessTypeBeforeUpsertHooks []SidecarProcessTypeHook

var sidecarProcessTypeAfterInsertHooks []SidecarProcessTypeHook
var sidecarProcessTypeAfterSelectHooks []SidecarProcessTypeHook
var sidecarProcessTypeAfterUpdateHooks []SidecarProcessTypeHook
var sidecarProcessTypeAfterDeleteHooks []SidecarProcessTypeHook
var sidecarProcessTypeAfterUpsertHooks []SidecarProcessTypeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SidecarProcessType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sidecarProcessTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SidecarProcessType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sidecarProcessTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SidecarProcessType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sidecarProcessTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SidecarProcessType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sidecarProcessTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SidecarProcessType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sidecarProcessTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SidecarProcessType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sidecarProcessTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SidecarProcessType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sidecarProcessTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SidecarProcessType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sidecarProcessTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SidecarProcessType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sidecarProcessTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSidecarProcessTypeHook registers your hook function for all future operations.
func AddSidecarProcessTypeHook(hookPoint boil.HookPoint, sidecarProcessTypeHook SidecarProcessTypeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sidecarProcessTypeBeforeInsertHooks = append(sidecarProcessTypeBeforeInsertHooks, sidecarProcessTypeHook)
	case boil.BeforeUpdateHook:
		sidecarProcessTypeBeforeUpdateHooks = append(sidecarProcessTypeBeforeUpdateHooks, sidecarProcessTypeHook)
	case boil.BeforeDeleteHook:
		sidecarProcessTypeBeforeDeleteHooks = append(sidecarProcessTypeBeforeDeleteHooks, sidecarProcessTypeHook)
	case boil.BeforeUpsertHook:
		sidecarProcessTypeBeforeUpsertHooks = append(sidecarProcessTypeBeforeUpsertHooks, sidecarProcessTypeHook)
	case boil.AfterInsertHook:
		sidecarProcessTypeAfterInsertHooks = append(sidecarProcessTypeAfterInsertHooks, sidecarProcessTypeHook)
	case boil.AfterSelectHook:
		sidecarProcessTypeAfterSelectHooks = append(sidecarProcessTypeAfterSelectHooks, sidecarProcessTypeHook)
	case boil.AfterUpdateHook:
		sidecarProcessTypeAfterUpdateHooks = append(sidecarProcessTypeAfterUpdateHooks, sidecarProcessTypeHook)
	case boil.AfterDeleteHook:
		sidecarProcessTypeAfterDeleteHooks = append(sidecarProcessTypeAfterDeleteHooks, sidecarProcessTypeHook)
	case boil.AfterUpsertHook:
		sidecarProcessTypeAfterUpsertHooks = append(sidecarProcessTypeAfterUpsertHooks, sidecarProcessTypeHook)
	}
}

// One returns a single sidecarProcessType record from the query.
func (q sidecarProcessTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SidecarProcessType, error) {
	o := &SidecarProcessType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sidecar_process_types")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SidecarProcessType records from the query.
func (q sidecarProcessTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (SidecarProcessTypeSlice, error) {
	var o []*SidecarProcessType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SidecarProcessType slice")
	}

	if len(sidecarProcessTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SidecarProcessType records in the query.
func (q sidecarProcessTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sidecar_process_types rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sidecarProcessTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sidecar_process_types exists")
	}

	return count > 0, nil
}

// Sidecar pointed to by the foreign key.
func (o *SidecarProcessType) Sidecar(mods ...qm.QueryMod) sidecarQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`guid` = ?", o.SidecarGUID),
	}

	queryMods = append(queryMods, mods...)

	query := Sidecars(queryMods...)
	queries.SetFrom(query.Query, "`sidecars`")

	return query
}

// LoadSidecar allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sidecarProcessTypeL) LoadSidecar(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSidecarProcessType interface{}, mods queries.Applicator) error {
	var slice []*SidecarProcessType
	var object *SidecarProcessType

	if singular {
		object = maybeSidecarProcessType.(*SidecarProcessType)
	} else {
		slice = *maybeSidecarProcessType.(*[]*SidecarProcessType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sidecarProcessTypeR{}
		}
		args = append(args, object.SidecarGUID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sidecarProcessTypeR{}
			}

			for _, a := range args {
				if a == obj.SidecarGUID {
					continue Outer
				}
			}

			args = append(args, obj.SidecarGUID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sidecars`),
		qm.WhereIn(`sidecars.guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Sidecar")
	}

	var resultSlice []*Sidecar
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Sidecar")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sidecars")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sidecars")
	}

	if len(sidecarProcessTypeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Sidecar = foreign
		if foreign.R == nil {
			foreign.R = &sidecarR{}
		}
		foreign.R.SidecarProcessTypes = append(foreign.R.SidecarProcessTypes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SidecarGUID == foreign.GUID {
				local.R.Sidecar = foreign
				if foreign.R == nil {
					foreign.R = &sidecarR{}
				}
				foreign.R.SidecarProcessTypes = append(foreign.R.SidecarProcessTypes, local)
				break
			}
		}
	}

	return nil
}

// SetSidecar of the sidecarProcessType to the related item.
// Sets o.R.Sidecar to related.
// Adds o to related.R.SidecarProcessTypes.
func (o *SidecarProcessType) SetSidecar(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Sidecar) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sidecar_process_types` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"sidecar_guid"}),
		strmangle.WhereClause("`", "`", 0, sidecarProcessTypePrimaryKeyColumns),
	)
	values := []interface{}{related.GUID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SidecarGUID = related.GUID
	if o.R == nil {
		o.R = &sidecarProcessTypeR{
			Sidecar: related,
		}
	} else {
		o.R.Sidecar = related
	}

	if related.R == nil {
		related.R = &sidecarR{
			SidecarProcessTypes: SidecarProcessTypeSlice{o},
		}
	} else {
		related.R.SidecarProcessTypes = append(related.R.SidecarProcessTypes, o)
	}

	return nil
}

// SidecarProcessTypes retrieves all the records using an executor.
func SidecarProcessTypes(mods ...qm.QueryMod) sidecarProcessTypeQuery {
	mods = append(mods, qm.From("`sidecar_process_types`"))
	return sidecarProcessTypeQuery{NewQuery(mods...)}
}

// FindSidecarProcessType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSidecarProcessType(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SidecarProcessType, error) {
	sidecarProcessTypeObj := &SidecarProcessType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sidecar_process_types` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sidecarProcessTypeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sidecar_process_types")
	}

	if err = sidecarProcessTypeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sidecarProcessTypeObj, err
	}

	return sidecarProcessTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SidecarProcessType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sidecar_process_types provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sidecarProcessTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sidecarProcessTypeInsertCacheMut.RLock()
	cache, cached := sidecarProcessTypeInsertCache[key]
	sidecarProcessTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sidecarProcessTypeAllColumns,
			sidecarProcessTypeColumnsWithDefault,
			sidecarProcessTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sidecarProcessTypeType, sidecarProcessTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sidecarProcessTypeType, sidecarProcessTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sidecar_process_types` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sidecar_process_types` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sidecar_process_types` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sidecarProcessTypePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sidecar_process_types")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == sidecarProcessTypeMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sidecar_process_types")
	}

CacheNoHooks:
	if !cached {
		sidecarProcessTypeInsertCacheMut.Lock()
		sidecarProcessTypeInsertCache[key] = cache
		sidecarProcessTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SidecarProcessType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SidecarProcessType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sidecarProcessTypeUpdateCacheMut.RLock()
	cache, cached := sidecarProcessTypeUpdateCache[key]
	sidecarProcessTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sidecarProcessTypeAllColumns,
			sidecarProcessTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sidecar_process_types, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sidecar_process_types` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sidecarProcessTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sidecarProcessTypeType, sidecarProcessTypeMapping, append(wl, sidecarProcessTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sidecar_process_types row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sidecar_process_types")
	}

	if !cached {
		sidecarProcessTypeUpdateCacheMut.Lock()
		sidecarProcessTypeUpdateCache[key] = cache
		sidecarProcessTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sidecarProcessTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sidecar_process_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sidecar_process_types")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SidecarProcessTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sidecarProcessTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sidecar_process_types` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sidecarProcessTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sidecarProcessType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sidecarProcessType")
	}
	return rowsAff, nil
}

var mySQLSidecarProcessTypeUniqueColumns = []string{
	"id",
	"guid",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SidecarProcessType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sidecar_process_types provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sidecarProcessTypeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSidecarProcessTypeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sidecarProcessTypeUpsertCacheMut.RLock()
	cache, cached := sidecarProcessTypeUpsertCache[key]
	sidecarProcessTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sidecarProcessTypeAllColumns,
			sidecarProcessTypeColumnsWithDefault,
			sidecarProcessTypeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sidecarProcessTypeAllColumns,
			sidecarProcessTypePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sidecar_process_types, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sidecar_process_types`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sidecar_process_types` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sidecarProcessTypeType, sidecarProcessTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sidecarProcessTypeType, sidecarProcessTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sidecar_process_types")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == sidecarProcessTypeMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sidecarProcessTypeType, sidecarProcessTypeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sidecar_process_types")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sidecar_process_types")
	}

CacheNoHooks:
	if !cached {
		sidecarProcessTypeUpsertCacheMut.Lock()
		sidecarProcessTypeUpsertCache[key] = cache
		sidecarProcessTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SidecarProcessType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SidecarProcessType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SidecarProcessType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sidecarProcessTypePrimaryKeyMapping)
	sql := "DELETE FROM `sidecar_process_types` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sidecar_process_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sidecar_process_types")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sidecarProcessTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sidecarProcessTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sidecar_process_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sidecar_process_types")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SidecarProcessTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sidecarProcessTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sidecarProcessTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sidecar_process_types` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sidecarProcessTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sidecarProcessType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sidecar_process_types")
	}

	if len(sidecarProcessTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SidecarProcessType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSidecarProcessType(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SidecarProcessTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SidecarProcessTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sidecarProcessTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sidecar_process_types`.* FROM `sidecar_process_types` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sidecarProcessTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SidecarProcessTypeSlice")
	}

	*o = slice

	return nil
}

// SidecarProcessTypeExists checks if the SidecarProcessType row exists.
func SidecarProcessTypeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sidecar_process_types` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sidecar_process_types exists")
	}

	return exists, nil
}
