//go:generate mockgen -source=$GOFILE -destination=mocks/revision_process_commands.go -copyright_file=../../../../buildtags.txt
// +build psql
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RevisionProcessCommand is an object representing the database table.
type RevisionProcessCommand struct {
	ID             int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	GUID           string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	CreatedAt      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	RevisionGUID   string      `boil:"revision_guid" json:"revision_guid" toml:"revision_guid" yaml:"revision_guid"`
	ProcessType    string      `boil:"process_type" json:"process_type" toml:"process_type" yaml:"process_type"`
	ProcessCommand null.String `boil:"process_command" json:"process_command,omitempty" toml:"process_command" yaml:"process_command,omitempty"`

	R *revisionProcessCommandR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L revisionProcessCommandL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RevisionProcessCommandColumns = struct {
	ID             string
	GUID           string
	CreatedAt      string
	UpdatedAt      string
	RevisionGUID   string
	ProcessType    string
	ProcessCommand string
}{
	ID:             "id",
	GUID:           "guid",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	RevisionGUID:   "revision_guid",
	ProcessType:    "process_type",
	ProcessCommand: "process_command",
}

var RevisionProcessCommandTableColumns = struct {
	ID             string
	GUID           string
	CreatedAt      string
	UpdatedAt      string
	RevisionGUID   string
	ProcessType    string
	ProcessCommand string
}{
	ID:             "revision_process_commands.id",
	GUID:           "revision_process_commands.guid",
	CreatedAt:      "revision_process_commands.created_at",
	UpdatedAt:      "revision_process_commands.updated_at",
	RevisionGUID:   "revision_process_commands.revision_guid",
	ProcessType:    "revision_process_commands.process_type",
	ProcessCommand: "revision_process_commands.process_command",
}

// Generated where

var RevisionProcessCommandWhere = struct {
	ID             whereHelperint
	GUID           whereHelperstring
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpernull_Time
	RevisionGUID   whereHelperstring
	ProcessType    whereHelperstring
	ProcessCommand whereHelpernull_String
}{
	ID:             whereHelperint{field: "\"revision_process_commands\".\"id\""},
	GUID:           whereHelperstring{field: "\"revision_process_commands\".\"guid\""},
	CreatedAt:      whereHelpertime_Time{field: "\"revision_process_commands\".\"created_at\""},
	UpdatedAt:      whereHelpernull_Time{field: "\"revision_process_commands\".\"updated_at\""},
	RevisionGUID:   whereHelperstring{field: "\"revision_process_commands\".\"revision_guid\""},
	ProcessType:    whereHelperstring{field: "\"revision_process_commands\".\"process_type\""},
	ProcessCommand: whereHelpernull_String{field: "\"revision_process_commands\".\"process_command\""},
}

// RevisionProcessCommandRels is where relationship names are stored.
var RevisionProcessCommandRels = struct {
	Revision string
}{
	Revision: "Revision",
}

// revisionProcessCommandR is where relationships are stored.
type revisionProcessCommandR struct {
	Revision *Revision `boil:"Revision" json:"Revision" toml:"Revision" yaml:"Revision"`
}

// NewStruct creates a new relationship struct
func (*revisionProcessCommandR) NewStruct() *revisionProcessCommandR {
	return &revisionProcessCommandR{}
}

// revisionProcessCommandL is where Load methods for each relationship are stored.
type revisionProcessCommandL struct{}

var (
	revisionProcessCommandAllColumns            = []string{"id", "guid", "created_at", "updated_at", "revision_guid", "process_type", "process_command"}
	revisionProcessCommandColumnsWithoutDefault = []string{"guid", "updated_at", "revision_guid", "process_type", "process_command"}
	revisionProcessCommandColumnsWithDefault    = []string{"id", "created_at"}
	revisionProcessCommandPrimaryKeyColumns     = []string{"id"}
)

type (
	// RevisionProcessCommandSlice is an alias for a slice of pointers to RevisionProcessCommand.
	// This should almost always be used instead of []RevisionProcessCommand.
	RevisionProcessCommandSlice []*RevisionProcessCommand

	revisionProcessCommandQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	revisionProcessCommandType                 = reflect.TypeOf(&RevisionProcessCommand{})
	revisionProcessCommandMapping              = queries.MakeStructMapping(revisionProcessCommandType)
	revisionProcessCommandPrimaryKeyMapping, _ = queries.BindMapping(revisionProcessCommandType, revisionProcessCommandMapping, revisionProcessCommandPrimaryKeyColumns)
	revisionProcessCommandInsertCacheMut       sync.RWMutex
	revisionProcessCommandInsertCache          = make(map[string]insertCache)
	revisionProcessCommandUpdateCacheMut       sync.RWMutex
	revisionProcessCommandUpdateCache          = make(map[string]updateCache)
	revisionProcessCommandUpsertCacheMut       sync.RWMutex
	revisionProcessCommandUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

type RevisionProcessCommandFinisher interface {
	One(ctx context.Context, exec boil.ContextExecutor) (*RevisionProcessCommand, error)
	Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	All(ctx context.Context, exec boil.ContextExecutor) (RevisionProcessCommandSlice, error)
	Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)
}

// One returns a single revisionProcessCommand record from the query.
func (q revisionProcessCommandQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RevisionProcessCommand, error) {
	o := &RevisionProcessCommand{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for revision_process_commands")
	}

	return o, nil
}

// All returns all RevisionProcessCommand records from the query.
func (q revisionProcessCommandQuery) All(ctx context.Context, exec boil.ContextExecutor) (RevisionProcessCommandSlice, error) {
	var o []*RevisionProcessCommand

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RevisionProcessCommand slice")
	}

	return o, nil
}

// Count returns the count of all RevisionProcessCommand records in the query.
func (q revisionProcessCommandQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count revision_process_commands rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q revisionProcessCommandQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if revision_process_commands exists")
	}

	return count > 0, nil
}

// Revision pointed to by the foreign key.
func (q revisionProcessCommandQuery) Revision(o *RevisionProcessCommand, mods ...qm.QueryMod) revisionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"guid\" = ?", o.RevisionGUID),
	}

	queryMods = append(queryMods, mods...)

	query := Revisions(queryMods...)
	queries.SetFrom(query.Query, "\"revisions\"")

	return query
}

// LoadRevision allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (revisionProcessCommandL) LoadRevision(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevisionProcessCommand interface{}, mods queries.Applicator) error {
	var slice []*RevisionProcessCommand
	var object *RevisionProcessCommand

	if singular {
		object = maybeRevisionProcessCommand.(*RevisionProcessCommand)
	} else {
		slice = *maybeRevisionProcessCommand.(*[]*RevisionProcessCommand)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &revisionProcessCommandR{}
		}
		args = append(args, object.RevisionGUID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &revisionProcessCommandR{}
			}

			for _, a := range args {
				if a == obj.RevisionGUID {
					continue Outer
				}
			}

			args = append(args, obj.RevisionGUID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`revisions`),
		qm.WhereIn(`revisions.guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Revision")
	}

	var resultSlice []*Revision
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Revision")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for revisions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for revisions")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Revision = foreign
		if foreign.R == nil {
			foreign.R = &revisionR{}
		}
		foreign.R.RevisionProcessCommands = append(foreign.R.RevisionProcessCommands, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RevisionGUID == foreign.GUID {
				local.R.Revision = foreign
				if foreign.R == nil {
					foreign.R = &revisionR{}
				}
				foreign.R.RevisionProcessCommands = append(foreign.R.RevisionProcessCommands, local)
				break
			}
		}
	}

	return nil
}

// SetRevision of the revisionProcessCommand to the related item.
// Sets o.R.Revision to related.
// Adds o to related.R.RevisionProcessCommands.
func (q revisionProcessCommandQuery) SetRevision(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Revision) error {
	var err error
	if insert {
		if err = Revisions().Insert(related, ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"revision_process_commands\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"revision_guid"}),
		strmangle.WhereClause("\"", "\"", 2, revisionProcessCommandPrimaryKeyColumns),
	)
	values := []interface{}{related.GUID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RevisionGUID = related.GUID
	if o.R == nil {
		o.R = &revisionProcessCommandR{
			Revision: related,
		}
	} else {
		o.R.Revision = related
	}

	if related.R == nil {
		related.R = &revisionR{
			RevisionProcessCommands: RevisionProcessCommandSlice{o},
		}
	} else {
		related.R.RevisionProcessCommands = append(related.R.RevisionProcessCommands, o)
	}

	return nil
}

// RevisionProcessCommands retrieves all the records using an executor.
func RevisionProcessCommands(mods ...qm.QueryMod) revisionProcessCommandQuery {
	mods = append(mods, qm.From("\"revision_process_commands\""))
	return revisionProcessCommandQuery{NewQuery(mods...)}
}

type RevisionProcessCommandFinder interface {
	FindRevisionProcessCommand(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RevisionProcessCommand, error)
}

// FindRevisionProcessCommand retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRevisionProcessCommand(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RevisionProcessCommand, error) {
	revisionProcessCommandObj := &RevisionProcessCommand{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"revision_process_commands\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, revisionProcessCommandObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from revision_process_commands")
	}

	return revisionProcessCommandObj, nil
}

type RevisionProcessCommandInserter interface {
	Insert(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (q revisionProcessCommandQuery) Insert(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no revision_process_commands provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(revisionProcessCommandColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	revisionProcessCommandInsertCacheMut.RLock()
	cache, cached := revisionProcessCommandInsertCache[key]
	revisionProcessCommandInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			revisionProcessCommandAllColumns,
			revisionProcessCommandColumnsWithDefault,
			revisionProcessCommandColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(revisionProcessCommandType, revisionProcessCommandMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(revisionProcessCommandType, revisionProcessCommandMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"revision_process_commands\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"revision_process_commands\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into revision_process_commands")
	}

	if !cached {
		revisionProcessCommandInsertCacheMut.Lock()
		revisionProcessCommandInsertCache[key] = cache
		revisionProcessCommandInsertCacheMut.Unlock()
	}

	return nil
}

type RevisionProcessCommandUpdater interface {
	Update(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)
	UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
	UpdateAllSlice(o RevisionProcessCommandSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
}

// Update uses an executor to update the RevisionProcessCommand.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (q revisionProcessCommandQuery) Update(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	revisionProcessCommandUpdateCacheMut.RLock()
	cache, cached := revisionProcessCommandUpdateCache[key]
	revisionProcessCommandUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			revisionProcessCommandAllColumns,
			revisionProcessCommandPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update revision_process_commands, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"revision_process_commands\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, revisionProcessCommandPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(revisionProcessCommandType, revisionProcessCommandMapping, append(wl, revisionProcessCommandPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update revision_process_commands row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for revision_process_commands")
	}

	if !cached {
		revisionProcessCommandUpdateCacheMut.Lock()
		revisionProcessCommandUpdateCache[key] = cache
		revisionProcessCommandUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q revisionProcessCommandQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for revision_process_commands")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for revision_process_commands")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (q revisionProcessCommandQuery) UpdateAllSlice(o RevisionProcessCommandSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), revisionProcessCommandPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"revision_process_commands\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, revisionProcessCommandPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in revisionProcessCommand slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all revisionProcessCommand")
	}
	return rowsAff, nil
}

type RevisionProcessCommandUpserter interface {
	Upsert(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (q revisionProcessCommandQuery) Upsert(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no revision_process_commands provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(revisionProcessCommandColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	revisionProcessCommandUpsertCacheMut.RLock()
	cache, cached := revisionProcessCommandUpsertCache[key]
	revisionProcessCommandUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			revisionProcessCommandAllColumns,
			revisionProcessCommandColumnsWithDefault,
			revisionProcessCommandColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			revisionProcessCommandAllColumns,
			revisionProcessCommandPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert revision_process_commands, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(revisionProcessCommandPrimaryKeyColumns))
			copy(conflict, revisionProcessCommandPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"revision_process_commands\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(revisionProcessCommandType, revisionProcessCommandMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(revisionProcessCommandType, revisionProcessCommandMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert revision_process_commands")
	}

	if !cached {
		revisionProcessCommandUpsertCacheMut.Lock()
		revisionProcessCommandUpsertCache[key] = cache
		revisionProcessCommandUpsertCacheMut.Unlock()
	}

	return nil
}

type RevisionProcessCommandDeleter interface {
	Delete(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAllSlice(o RevisionProcessCommandSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)
}

// Delete deletes a single RevisionProcessCommand record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (q revisionProcessCommandQuery) Delete(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RevisionProcessCommand provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), revisionProcessCommandPrimaryKeyMapping)
	sql := "DELETE FROM \"revision_process_commands\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from revision_process_commands")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for revision_process_commands")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q revisionProcessCommandQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no revisionProcessCommandQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from revision_process_commands")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for revision_process_commands")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (q revisionProcessCommandQuery) DeleteAllSlice(o RevisionProcessCommandSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), revisionProcessCommandPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"revision_process_commands\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, revisionProcessCommandPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from revisionProcessCommand slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for revision_process_commands")
	}

	return rowsAff, nil
}

type RevisionProcessCommandReloader interface {
	Reload(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor) error
	ReloadAll(o *RevisionProcessCommandSlice, ctx context.Context, exec boil.ContextExecutor) error
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (q revisionProcessCommandQuery) Reload(o *RevisionProcessCommand, ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRevisionProcessCommand(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (q revisionProcessCommandQuery) ReloadAll(o *RevisionProcessCommandSlice, ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RevisionProcessCommandSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), revisionProcessCommandPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"revision_process_commands\".* FROM \"revision_process_commands\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, revisionProcessCommandPrimaryKeyColumns, len(*o))

	query := queries.Raw(sql, args...)

	err := query.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RevisionProcessCommandSlice")
	}

	*o = slice

	return nil
}

// RevisionProcessCommandExists checks if the RevisionProcessCommand row exists.
func RevisionProcessCommandExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"revision_process_commands\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if revision_process_commands exists")
	}

	return exists, nil
}
