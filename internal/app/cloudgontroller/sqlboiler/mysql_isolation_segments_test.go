// +build integration mysql
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testIsolationSegments(t *testing.T) {
	t.Parallel()

	query := IsolationSegments()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testIsolationSegmentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IsolationSegment{}
	if err = randomize.Struct(seed, o, isolationSegmentDBTypes, true, isolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IsolationSegments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIsolationSegmentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IsolationSegment{}
	if err = randomize.Struct(seed, o, isolationSegmentDBTypes, true, isolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := IsolationSegments().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IsolationSegments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIsolationSegmentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IsolationSegment{}
	if err = randomize.Struct(seed, o, isolationSegmentDBTypes, true, isolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IsolationSegmentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IsolationSegments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIsolationSegmentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IsolationSegment{}
	if err = randomize.Struct(seed, o, isolationSegmentDBTypes, true, isolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := IsolationSegmentExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if IsolationSegment exists: %s", err)
	}
	if !e {
		t.Errorf("Expected IsolationSegmentExists to return true, but got false.")
	}
}

func testIsolationSegmentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IsolationSegment{}
	if err = randomize.Struct(seed, o, isolationSegmentDBTypes, true, isolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	isolationSegmentFound, err := FindIsolationSegment(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if isolationSegmentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testIsolationSegmentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IsolationSegment{}
	if err = randomize.Struct(seed, o, isolationSegmentDBTypes, true, isolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = IsolationSegments().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testIsolationSegmentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IsolationSegment{}
	if err = randomize.Struct(seed, o, isolationSegmentDBTypes, true, isolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := IsolationSegments().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testIsolationSegmentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	isolationSegmentOne := &IsolationSegment{}
	isolationSegmentTwo := &IsolationSegment{}
	if err = randomize.Struct(seed, isolationSegmentOne, isolationSegmentDBTypes, false, isolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}
	if err = randomize.Struct(seed, isolationSegmentTwo, isolationSegmentDBTypes, false, isolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = isolationSegmentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = isolationSegmentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IsolationSegments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testIsolationSegmentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	isolationSegmentOne := &IsolationSegment{}
	isolationSegmentTwo := &IsolationSegment{}
	if err = randomize.Struct(seed, isolationSegmentOne, isolationSegmentDBTypes, false, isolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}
	if err = randomize.Struct(seed, isolationSegmentTwo, isolationSegmentDBTypes, false, isolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = isolationSegmentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = isolationSegmentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IsolationSegments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func isolationSegmentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *IsolationSegment) error {
	*o = IsolationSegment{}
	return nil
}

func isolationSegmentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *IsolationSegment) error {
	*o = IsolationSegment{}
	return nil
}

func isolationSegmentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *IsolationSegment) error {
	*o = IsolationSegment{}
	return nil
}

func isolationSegmentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *IsolationSegment) error {
	*o = IsolationSegment{}
	return nil
}

func isolationSegmentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *IsolationSegment) error {
	*o = IsolationSegment{}
	return nil
}

func isolationSegmentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *IsolationSegment) error {
	*o = IsolationSegment{}
	return nil
}

func isolationSegmentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *IsolationSegment) error {
	*o = IsolationSegment{}
	return nil
}

func isolationSegmentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *IsolationSegment) error {
	*o = IsolationSegment{}
	return nil
}

func isolationSegmentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *IsolationSegment) error {
	*o = IsolationSegment{}
	return nil
}

func testIsolationSegmentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &IsolationSegment{}
	o := &IsolationSegment{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, isolationSegmentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize IsolationSegment object: %s", err)
	}

	AddIsolationSegmentHook(boil.BeforeInsertHook, isolationSegmentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	isolationSegmentBeforeInsertHooks = []IsolationSegmentHook{}

	AddIsolationSegmentHook(boil.AfterInsertHook, isolationSegmentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	isolationSegmentAfterInsertHooks = []IsolationSegmentHook{}

	AddIsolationSegmentHook(boil.AfterSelectHook, isolationSegmentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	isolationSegmentAfterSelectHooks = []IsolationSegmentHook{}

	AddIsolationSegmentHook(boil.BeforeUpdateHook, isolationSegmentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	isolationSegmentBeforeUpdateHooks = []IsolationSegmentHook{}

	AddIsolationSegmentHook(boil.AfterUpdateHook, isolationSegmentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	isolationSegmentAfterUpdateHooks = []IsolationSegmentHook{}

	AddIsolationSegmentHook(boil.BeforeDeleteHook, isolationSegmentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	isolationSegmentBeforeDeleteHooks = []IsolationSegmentHook{}

	AddIsolationSegmentHook(boil.AfterDeleteHook, isolationSegmentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	isolationSegmentAfterDeleteHooks = []IsolationSegmentHook{}

	AddIsolationSegmentHook(boil.BeforeUpsertHook, isolationSegmentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	isolationSegmentBeforeUpsertHooks = []IsolationSegmentHook{}

	AddIsolationSegmentHook(boil.AfterUpsertHook, isolationSegmentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	isolationSegmentAfterUpsertHooks = []IsolationSegmentHook{}
}

func testIsolationSegmentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IsolationSegment{}
	if err = randomize.Struct(seed, o, isolationSegmentDBTypes, true, isolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IsolationSegments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIsolationSegmentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IsolationSegment{}
	if err = randomize.Struct(seed, o, isolationSegmentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(isolationSegmentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := IsolationSegments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIsolationSegmentToManyResourceIsolationSegmentAnnotations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IsolationSegment
	var b, c IsolationSegmentAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, isolationSegmentDBTypes, true, isolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, isolationSegmentAnnotationDBTypes, false, isolationSegmentAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, isolationSegmentAnnotationDBTypes, false, isolationSegmentAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceIsolationSegmentAnnotations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := IsolationSegmentSlice{&a}
	if err = a.L.LoadResourceIsolationSegmentAnnotations(ctx, tx, false, (*[]*IsolationSegment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceIsolationSegmentAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceIsolationSegmentAnnotations = nil
	if err = a.L.LoadResourceIsolationSegmentAnnotations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceIsolationSegmentAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testIsolationSegmentToManyResourceIsolationSegmentLabels(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IsolationSegment
	var b, c IsolationSegmentLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, isolationSegmentDBTypes, true, isolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, isolationSegmentLabelDBTypes, false, isolationSegmentLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, isolationSegmentLabelDBTypes, false, isolationSegmentLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceIsolationSegmentLabels().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := IsolationSegmentSlice{&a}
	if err = a.L.LoadResourceIsolationSegmentLabels(ctx, tx, false, (*[]*IsolationSegment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceIsolationSegmentLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceIsolationSegmentLabels = nil
	if err = a.L.LoadResourceIsolationSegmentLabels(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceIsolationSegmentLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testIsolationSegmentToManyOrganizations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IsolationSegment
	var b, c Organization

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, isolationSegmentDBTypes, true, isolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, organizationDBTypes, false, organizationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, organizationDBTypes, false, organizationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into `organizations_isolation_segments` (`isolation_segment_guid`, `organization_guid`) values (?, ?)", a.GUID, b.GUID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into `organizations_isolation_segments` (`isolation_segment_guid`, `organization_guid`) values (?, ?)", a.GUID, c.GUID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Organizations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GUID == b.GUID {
			bFound = true
		}
		if v.GUID == c.GUID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := IsolationSegmentSlice{&a}
	if err = a.L.LoadOrganizations(ctx, tx, false, (*[]*IsolationSegment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Organizations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Organizations = nil
	if err = a.L.LoadOrganizations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Organizations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testIsolationSegmentToManySpaces(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IsolationSegment
	var b, c Space

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, isolationSegmentDBTypes, true, isolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, spaceDBTypes, false, spaceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, spaceDBTypes, false, spaceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.IsolationSegmentGUID, a.GUID)
	queries.Assign(&c.IsolationSegmentGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Spaces().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.IsolationSegmentGUID, b.IsolationSegmentGUID) {
			bFound = true
		}
		if queries.Equal(v.IsolationSegmentGUID, c.IsolationSegmentGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := IsolationSegmentSlice{&a}
	if err = a.L.LoadSpaces(ctx, tx, false, (*[]*IsolationSegment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Spaces); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Spaces = nil
	if err = a.L.LoadSpaces(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Spaces); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testIsolationSegmentToManyAddOpResourceIsolationSegmentAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IsolationSegment
	var b, c, d, e IsolationSegmentAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, isolationSegmentDBTypes, false, strmangle.SetComplement(isolationSegmentPrimaryKeyColumns, isolationSegmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*IsolationSegmentAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, isolationSegmentAnnotationDBTypes, false, strmangle.SetComplement(isolationSegmentAnnotationPrimaryKeyColumns, isolationSegmentAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*IsolationSegmentAnnotation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceIsolationSegmentAnnotations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceIsolationSegmentAnnotations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceIsolationSegmentAnnotations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceIsolationSegmentAnnotations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testIsolationSegmentToManySetOpResourceIsolationSegmentAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IsolationSegment
	var b, c, d, e IsolationSegmentAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, isolationSegmentDBTypes, false, strmangle.SetComplement(isolationSegmentPrimaryKeyColumns, isolationSegmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*IsolationSegmentAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, isolationSegmentAnnotationDBTypes, false, strmangle.SetComplement(isolationSegmentAnnotationPrimaryKeyColumns, isolationSegmentAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceIsolationSegmentAnnotations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceIsolationSegmentAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceIsolationSegmentAnnotations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceIsolationSegmentAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceIsolationSegmentAnnotations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceIsolationSegmentAnnotations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testIsolationSegmentToManyRemoveOpResourceIsolationSegmentAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IsolationSegment
	var b, c, d, e IsolationSegmentAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, isolationSegmentDBTypes, false, strmangle.SetComplement(isolationSegmentPrimaryKeyColumns, isolationSegmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*IsolationSegmentAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, isolationSegmentAnnotationDBTypes, false, strmangle.SetComplement(isolationSegmentAnnotationPrimaryKeyColumns, isolationSegmentAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceIsolationSegmentAnnotations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceIsolationSegmentAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceIsolationSegmentAnnotations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceIsolationSegmentAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceIsolationSegmentAnnotations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceIsolationSegmentAnnotations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceIsolationSegmentAnnotations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testIsolationSegmentToManyAddOpResourceIsolationSegmentLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IsolationSegment
	var b, c, d, e IsolationSegmentLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, isolationSegmentDBTypes, false, strmangle.SetComplement(isolationSegmentPrimaryKeyColumns, isolationSegmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*IsolationSegmentLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, isolationSegmentLabelDBTypes, false, strmangle.SetComplement(isolationSegmentLabelPrimaryKeyColumns, isolationSegmentLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*IsolationSegmentLabel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceIsolationSegmentLabels(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceIsolationSegmentLabels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceIsolationSegmentLabels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceIsolationSegmentLabels().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testIsolationSegmentToManySetOpResourceIsolationSegmentLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IsolationSegment
	var b, c, d, e IsolationSegmentLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, isolationSegmentDBTypes, false, strmangle.SetComplement(isolationSegmentPrimaryKeyColumns, isolationSegmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*IsolationSegmentLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, isolationSegmentLabelDBTypes, false, strmangle.SetComplement(isolationSegmentLabelPrimaryKeyColumns, isolationSegmentLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceIsolationSegmentLabels(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceIsolationSegmentLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceIsolationSegmentLabels(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceIsolationSegmentLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceIsolationSegmentLabels[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceIsolationSegmentLabels[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testIsolationSegmentToManyRemoveOpResourceIsolationSegmentLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IsolationSegment
	var b, c, d, e IsolationSegmentLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, isolationSegmentDBTypes, false, strmangle.SetComplement(isolationSegmentPrimaryKeyColumns, isolationSegmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*IsolationSegmentLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, isolationSegmentLabelDBTypes, false, strmangle.SetComplement(isolationSegmentLabelPrimaryKeyColumns, isolationSegmentLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceIsolationSegmentLabels(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceIsolationSegmentLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceIsolationSegmentLabels(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceIsolationSegmentLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceIsolationSegmentLabels) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceIsolationSegmentLabels[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceIsolationSegmentLabels[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testIsolationSegmentToManyAddOpOrganizations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IsolationSegment
	var b, c, d, e Organization

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, isolationSegmentDBTypes, false, strmangle.SetComplement(isolationSegmentPrimaryKeyColumns, isolationSegmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Organization{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Organization{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrganizations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.IsolationSegments[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.IsolationSegments[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Organizations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Organizations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Organizations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testIsolationSegmentToManySetOpOrganizations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IsolationSegment
	var b, c, d, e Organization

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, isolationSegmentDBTypes, false, strmangle.SetComplement(isolationSegmentPrimaryKeyColumns, isolationSegmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Organization{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOrganizations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Organizations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOrganizations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Organizations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.IsolationSegments) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.IsolationSegments) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.IsolationSegments[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.IsolationSegments[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Organizations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Organizations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testIsolationSegmentToManyRemoveOpOrganizations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IsolationSegment
	var b, c, d, e Organization

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, isolationSegmentDBTypes, false, strmangle.SetComplement(isolationSegmentPrimaryKeyColumns, isolationSegmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Organization{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOrganizations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Organizations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOrganizations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Organizations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.IsolationSegments) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.IsolationSegments) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.IsolationSegments[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.IsolationSegments[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Organizations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Organizations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Organizations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testIsolationSegmentToManyAddOpSpaces(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IsolationSegment
	var b, c, d, e Space

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, isolationSegmentDBTypes, false, strmangle.SetComplement(isolationSegmentPrimaryKeyColumns, isolationSegmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Space{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Space{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSpaces(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.IsolationSegmentGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.IsolationSegmentGUID)
		}
		if !queries.Equal(a.GUID, second.IsolationSegmentGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.IsolationSegmentGUID)
		}

		if first.R.IsolationSegment != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.IsolationSegment != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Spaces[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Spaces[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Spaces().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testIsolationSegmentToManySetOpSpaces(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IsolationSegment
	var b, c, d, e Space

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, isolationSegmentDBTypes, false, strmangle.SetComplement(isolationSegmentPrimaryKeyColumns, isolationSegmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Space{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSpaces(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Spaces().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSpaces(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Spaces().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.IsolationSegmentGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.IsolationSegmentGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.IsolationSegmentGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.IsolationSegmentGUID)
	}
	if !queries.Equal(a.GUID, e.IsolationSegmentGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.IsolationSegmentGUID)
	}

	if b.R.IsolationSegment != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.IsolationSegment != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.IsolationSegment != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.IsolationSegment != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Spaces[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Spaces[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testIsolationSegmentToManyRemoveOpSpaces(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IsolationSegment
	var b, c, d, e Space

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, isolationSegmentDBTypes, false, strmangle.SetComplement(isolationSegmentPrimaryKeyColumns, isolationSegmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Space{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSpaces(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Spaces().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSpaces(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Spaces().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.IsolationSegmentGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.IsolationSegmentGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.IsolationSegment != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.IsolationSegment != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.IsolationSegment != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.IsolationSegment != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Spaces) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Spaces[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Spaces[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testIsolationSegmentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IsolationSegment{}
	if err = randomize.Struct(seed, o, isolationSegmentDBTypes, true, isolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIsolationSegmentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IsolationSegment{}
	if err = randomize.Struct(seed, o, isolationSegmentDBTypes, true, isolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IsolationSegmentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIsolationSegmentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IsolationSegment{}
	if err = randomize.Struct(seed, o, isolationSegmentDBTypes, true, isolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IsolationSegments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	isolationSegmentDBTypes = map[string]string{`ID`: `int`, `GUID`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `Name`: `varchar`}
	_                       = bytes.MinRead
)

func testIsolationSegmentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(isolationSegmentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(isolationSegmentAllColumns) == len(isolationSegmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IsolationSegment{}
	if err = randomize.Struct(seed, o, isolationSegmentDBTypes, true, isolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IsolationSegments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, isolationSegmentDBTypes, true, isolationSegmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testIsolationSegmentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(isolationSegmentAllColumns) == len(isolationSegmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IsolationSegment{}
	if err = randomize.Struct(seed, o, isolationSegmentDBTypes, true, isolationSegmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IsolationSegments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, isolationSegmentDBTypes, true, isolationSegmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(isolationSegmentAllColumns, isolationSegmentPrimaryKeyColumns) {
		fields = isolationSegmentAllColumns
	} else {
		fields = strmangle.SetComplement(
			isolationSegmentAllColumns,
			isolationSegmentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := IsolationSegmentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testIsolationSegmentsUpsert(t *testing.T) {
	t.Parallel()

	if len(isolationSegmentAllColumns) == len(isolationSegmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLIsolationSegmentUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := IsolationSegment{}
	if err = randomize.Struct(seed, &o, isolationSegmentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IsolationSegment: %s", err)
	}

	count, err := IsolationSegments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, isolationSegmentDBTypes, false, isolationSegmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IsolationSegment struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IsolationSegment: %s", err)
	}

	count, err = IsolationSegments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
