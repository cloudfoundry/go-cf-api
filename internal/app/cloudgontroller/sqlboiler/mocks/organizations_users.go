// Code generated by MockGen. DO NOT EDIT.
// Source: psql_organizations_users.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockOrganizationsUserFinisher is a mock of OrganizationsUserFinisher interface.
type MockOrganizationsUserFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationsUserFinisherMockRecorder
}

// MockOrganizationsUserFinisherMockRecorder is the mock recorder for MockOrganizationsUserFinisher.
type MockOrganizationsUserFinisherMockRecorder struct {
	mock *MockOrganizationsUserFinisher
}

// NewMockOrganizationsUserFinisher creates a new mock instance.
func NewMockOrganizationsUserFinisher(ctrl *gomock.Controller) *MockOrganizationsUserFinisher {
	mock := &MockOrganizationsUserFinisher{ctrl: ctrl}
	mock.recorder = &MockOrganizationsUserFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationsUserFinisher) EXPECT() *MockOrganizationsUserFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockOrganizationsUserFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.OrganizationsUserSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.OrganizationsUserSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockOrganizationsUserFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockOrganizationsUserFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockOrganizationsUserFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockOrganizationsUserFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockOrganizationsUserFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockOrganizationsUserFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockOrganizationsUserFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockOrganizationsUserFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockOrganizationsUserFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.OrganizationsUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.OrganizationsUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockOrganizationsUserFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockOrganizationsUserFinisher)(nil).One), ctx, exec)
}

// MockOrganizationsUserFinder is a mock of OrganizationsUserFinder interface.
type MockOrganizationsUserFinder struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationsUserFinderMockRecorder
}

// MockOrganizationsUserFinderMockRecorder is the mock recorder for MockOrganizationsUserFinder.
type MockOrganizationsUserFinderMockRecorder struct {
	mock *MockOrganizationsUserFinder
}

// NewMockOrganizationsUserFinder creates a new mock instance.
func NewMockOrganizationsUserFinder(ctrl *gomock.Controller) *MockOrganizationsUserFinder {
	mock := &MockOrganizationsUserFinder{ctrl: ctrl}
	mock.recorder = &MockOrganizationsUserFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationsUserFinder) EXPECT() *MockOrganizationsUserFinderMockRecorder {
	return m.recorder
}

// FindOrganizationsUser mocks base method.
func (m *MockOrganizationsUserFinder) FindOrganizationsUser(ctx context.Context, exec boil.ContextExecutor, organizationsUsersPK int, selectCols ...string) (*models.OrganizationsUser, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, organizationsUsersPK}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOrganizationsUser", varargs...)
	ret0, _ := ret[0].(*models.OrganizationsUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrganizationsUser indicates an expected call of FindOrganizationsUser.
func (mr *MockOrganizationsUserFinderMockRecorder) FindOrganizationsUser(ctx, exec, organizationsUsersPK interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, organizationsUsersPK}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrganizationsUser", reflect.TypeOf((*MockOrganizationsUserFinder)(nil).FindOrganizationsUser), varargs...)
}

// MockOrganizationsUserInserter is a mock of OrganizationsUserInserter interface.
type MockOrganizationsUserInserter struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationsUserInserterMockRecorder
}

// MockOrganizationsUserInserterMockRecorder is the mock recorder for MockOrganizationsUserInserter.
type MockOrganizationsUserInserterMockRecorder struct {
	mock *MockOrganizationsUserInserter
}

// NewMockOrganizationsUserInserter creates a new mock instance.
func NewMockOrganizationsUserInserter(ctrl *gomock.Controller) *MockOrganizationsUserInserter {
	mock := &MockOrganizationsUserInserter{ctrl: ctrl}
	mock.recorder = &MockOrganizationsUserInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationsUserInserter) EXPECT() *MockOrganizationsUserInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockOrganizationsUserInserter) Insert(o *models.OrganizationsUser, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockOrganizationsUserInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockOrganizationsUserInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockOrganizationsUserUpdater is a mock of OrganizationsUserUpdater interface.
type MockOrganizationsUserUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationsUserUpdaterMockRecorder
}

// MockOrganizationsUserUpdaterMockRecorder is the mock recorder for MockOrganizationsUserUpdater.
type MockOrganizationsUserUpdaterMockRecorder struct {
	mock *MockOrganizationsUserUpdater
}

// NewMockOrganizationsUserUpdater creates a new mock instance.
func NewMockOrganizationsUserUpdater(ctrl *gomock.Controller) *MockOrganizationsUserUpdater {
	mock := &MockOrganizationsUserUpdater{ctrl: ctrl}
	mock.recorder = &MockOrganizationsUserUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationsUserUpdater) EXPECT() *MockOrganizationsUserUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockOrganizationsUserUpdater) Update(o *models.OrganizationsUser, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockOrganizationsUserUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrganizationsUserUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockOrganizationsUserUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockOrganizationsUserUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockOrganizationsUserUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockOrganizationsUserUpdater) UpdateAllSlice(o models.OrganizationsUserSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockOrganizationsUserUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockOrganizationsUserUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockOrganizationsUserUpserter is a mock of OrganizationsUserUpserter interface.
type MockOrganizationsUserUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationsUserUpserterMockRecorder
}

// MockOrganizationsUserUpserterMockRecorder is the mock recorder for MockOrganizationsUserUpserter.
type MockOrganizationsUserUpserterMockRecorder struct {
	mock *MockOrganizationsUserUpserter
}

// NewMockOrganizationsUserUpserter creates a new mock instance.
func NewMockOrganizationsUserUpserter(ctrl *gomock.Controller) *MockOrganizationsUserUpserter {
	mock := &MockOrganizationsUserUpserter{ctrl: ctrl}
	mock.recorder = &MockOrganizationsUserUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationsUserUpserter) EXPECT() *MockOrganizationsUserUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockOrganizationsUserUpserter) Upsert(o *models.OrganizationsUser, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockOrganizationsUserUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockOrganizationsUserUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockOrganizationsUserDeleter is a mock of OrganizationsUserDeleter interface.
type MockOrganizationsUserDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationsUserDeleterMockRecorder
}

// MockOrganizationsUserDeleterMockRecorder is the mock recorder for MockOrganizationsUserDeleter.
type MockOrganizationsUserDeleterMockRecorder struct {
	mock *MockOrganizationsUserDeleter
}

// NewMockOrganizationsUserDeleter creates a new mock instance.
func NewMockOrganizationsUserDeleter(ctrl *gomock.Controller) *MockOrganizationsUserDeleter {
	mock := &MockOrganizationsUserDeleter{ctrl: ctrl}
	mock.recorder = &MockOrganizationsUserDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationsUserDeleter) EXPECT() *MockOrganizationsUserDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockOrganizationsUserDeleter) Delete(o *models.OrganizationsUser, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockOrganizationsUserDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrganizationsUserDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockOrganizationsUserDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockOrganizationsUserDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockOrganizationsUserDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockOrganizationsUserDeleter) DeleteAllSlice(o models.OrganizationsUserSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockOrganizationsUserDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockOrganizationsUserDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockOrganizationsUserReloader is a mock of OrganizationsUserReloader interface.
type MockOrganizationsUserReloader struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationsUserReloaderMockRecorder
}

// MockOrganizationsUserReloaderMockRecorder is the mock recorder for MockOrganizationsUserReloader.
type MockOrganizationsUserReloaderMockRecorder struct {
	mock *MockOrganizationsUserReloader
}

// NewMockOrganizationsUserReloader creates a new mock instance.
func NewMockOrganizationsUserReloader(ctrl *gomock.Controller) *MockOrganizationsUserReloader {
	mock := &MockOrganizationsUserReloader{ctrl: ctrl}
	mock.recorder = &MockOrganizationsUserReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationsUserReloader) EXPECT() *MockOrganizationsUserReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockOrganizationsUserReloader) Reload(o *models.OrganizationsUser, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockOrganizationsUserReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockOrganizationsUserReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockOrganizationsUserReloader) ReloadAll(o *models.OrganizationsUserSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockOrganizationsUserReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockOrganizationsUserReloader)(nil).ReloadAll), o, ctx, exec)
}
