// Code generated by MockGen. DO NOT EDIT.
// Source: psql_service_binding_operations.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockServiceBindingOperationFinisher is a mock of ServiceBindingOperationFinisher interface.
type MockServiceBindingOperationFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBindingOperationFinisherMockRecorder
}

// MockServiceBindingOperationFinisherMockRecorder is the mock recorder for MockServiceBindingOperationFinisher.
type MockServiceBindingOperationFinisherMockRecorder struct {
	mock *MockServiceBindingOperationFinisher
}

// NewMockServiceBindingOperationFinisher creates a new mock instance.
func NewMockServiceBindingOperationFinisher(ctrl *gomock.Controller) *MockServiceBindingOperationFinisher {
	mock := &MockServiceBindingOperationFinisher{ctrl: ctrl}
	mock.recorder = &MockServiceBindingOperationFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBindingOperationFinisher) EXPECT() *MockServiceBindingOperationFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockServiceBindingOperationFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.ServiceBindingOperationSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.ServiceBindingOperationSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockServiceBindingOperationFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockServiceBindingOperationFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockServiceBindingOperationFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockServiceBindingOperationFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockServiceBindingOperationFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockServiceBindingOperationFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockServiceBindingOperationFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockServiceBindingOperationFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockServiceBindingOperationFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.ServiceBindingOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.ServiceBindingOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockServiceBindingOperationFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockServiceBindingOperationFinisher)(nil).One), ctx, exec)
}

// MockServiceBindingOperationFinder is a mock of ServiceBindingOperationFinder interface.
type MockServiceBindingOperationFinder struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBindingOperationFinderMockRecorder
}

// MockServiceBindingOperationFinderMockRecorder is the mock recorder for MockServiceBindingOperationFinder.
type MockServiceBindingOperationFinderMockRecorder struct {
	mock *MockServiceBindingOperationFinder
}

// NewMockServiceBindingOperationFinder creates a new mock instance.
func NewMockServiceBindingOperationFinder(ctrl *gomock.Controller) *MockServiceBindingOperationFinder {
	mock := &MockServiceBindingOperationFinder{ctrl: ctrl}
	mock.recorder = &MockServiceBindingOperationFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBindingOperationFinder) EXPECT() *MockServiceBindingOperationFinderMockRecorder {
	return m.recorder
}

// FindServiceBindingOperation mocks base method.
func (m *MockServiceBindingOperationFinder) FindServiceBindingOperation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.ServiceBindingOperation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindServiceBindingOperation", varargs...)
	ret0, _ := ret[0].(*models.ServiceBindingOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindServiceBindingOperation indicates an expected call of FindServiceBindingOperation.
func (mr *MockServiceBindingOperationFinderMockRecorder) FindServiceBindingOperation(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindServiceBindingOperation", reflect.TypeOf((*MockServiceBindingOperationFinder)(nil).FindServiceBindingOperation), varargs...)
}

// MockServiceBindingOperationInserter is a mock of ServiceBindingOperationInserter interface.
type MockServiceBindingOperationInserter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBindingOperationInserterMockRecorder
}

// MockServiceBindingOperationInserterMockRecorder is the mock recorder for MockServiceBindingOperationInserter.
type MockServiceBindingOperationInserterMockRecorder struct {
	mock *MockServiceBindingOperationInserter
}

// NewMockServiceBindingOperationInserter creates a new mock instance.
func NewMockServiceBindingOperationInserter(ctrl *gomock.Controller) *MockServiceBindingOperationInserter {
	mock := &MockServiceBindingOperationInserter{ctrl: ctrl}
	mock.recorder = &MockServiceBindingOperationInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBindingOperationInserter) EXPECT() *MockServiceBindingOperationInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockServiceBindingOperationInserter) Insert(o *models.ServiceBindingOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockServiceBindingOperationInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockServiceBindingOperationInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockServiceBindingOperationUpdater is a mock of ServiceBindingOperationUpdater interface.
type MockServiceBindingOperationUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBindingOperationUpdaterMockRecorder
}

// MockServiceBindingOperationUpdaterMockRecorder is the mock recorder for MockServiceBindingOperationUpdater.
type MockServiceBindingOperationUpdaterMockRecorder struct {
	mock *MockServiceBindingOperationUpdater
}

// NewMockServiceBindingOperationUpdater creates a new mock instance.
func NewMockServiceBindingOperationUpdater(ctrl *gomock.Controller) *MockServiceBindingOperationUpdater {
	mock := &MockServiceBindingOperationUpdater{ctrl: ctrl}
	mock.recorder = &MockServiceBindingOperationUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBindingOperationUpdater) EXPECT() *MockServiceBindingOperationUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockServiceBindingOperationUpdater) Update(o *models.ServiceBindingOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServiceBindingOperationUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceBindingOperationUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockServiceBindingOperationUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockServiceBindingOperationUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockServiceBindingOperationUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockServiceBindingOperationUpdater) UpdateAllSlice(o models.ServiceBindingOperationSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockServiceBindingOperationUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockServiceBindingOperationUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockServiceBindingOperationDeleter is a mock of ServiceBindingOperationDeleter interface.
type MockServiceBindingOperationDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBindingOperationDeleterMockRecorder
}

// MockServiceBindingOperationDeleterMockRecorder is the mock recorder for MockServiceBindingOperationDeleter.
type MockServiceBindingOperationDeleterMockRecorder struct {
	mock *MockServiceBindingOperationDeleter
}

// NewMockServiceBindingOperationDeleter creates a new mock instance.
func NewMockServiceBindingOperationDeleter(ctrl *gomock.Controller) *MockServiceBindingOperationDeleter {
	mock := &MockServiceBindingOperationDeleter{ctrl: ctrl}
	mock.recorder = &MockServiceBindingOperationDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBindingOperationDeleter) EXPECT() *MockServiceBindingOperationDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockServiceBindingOperationDeleter) Delete(o *models.ServiceBindingOperation, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceBindingOperationDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceBindingOperationDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockServiceBindingOperationDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockServiceBindingOperationDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockServiceBindingOperationDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockServiceBindingOperationDeleter) DeleteAllSlice(o models.ServiceBindingOperationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockServiceBindingOperationDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockServiceBindingOperationDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockServiceBindingOperationReloader is a mock of ServiceBindingOperationReloader interface.
type MockServiceBindingOperationReloader struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBindingOperationReloaderMockRecorder
}

// MockServiceBindingOperationReloaderMockRecorder is the mock recorder for MockServiceBindingOperationReloader.
type MockServiceBindingOperationReloaderMockRecorder struct {
	mock *MockServiceBindingOperationReloader
}

// NewMockServiceBindingOperationReloader creates a new mock instance.
func NewMockServiceBindingOperationReloader(ctrl *gomock.Controller) *MockServiceBindingOperationReloader {
	mock := &MockServiceBindingOperationReloader{ctrl: ctrl}
	mock.recorder = &MockServiceBindingOperationReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBindingOperationReloader) EXPECT() *MockServiceBindingOperationReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockServiceBindingOperationReloader) Reload(o *models.ServiceBindingOperation, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockServiceBindingOperationReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockServiceBindingOperationReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockServiceBindingOperationReloader) ReloadAll(o *models.ServiceBindingOperationSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockServiceBindingOperationReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockServiceBindingOperationReloader)(nil).ReloadAll), o, ctx, exec)
}
