// Code generated by MockGen. DO NOT EDIT.
// Source: psql_revisions.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockRevisionFinisher is a mock of RevisionFinisher interface.
type MockRevisionFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionFinisherMockRecorder
}

// MockRevisionFinisherMockRecorder is the mock recorder for MockRevisionFinisher.
type MockRevisionFinisherMockRecorder struct {
	mock *MockRevisionFinisher
}

// NewMockRevisionFinisher creates a new mock instance.
func NewMockRevisionFinisher(ctrl *gomock.Controller) *MockRevisionFinisher {
	mock := &MockRevisionFinisher{ctrl: ctrl}
	mock.recorder = &MockRevisionFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionFinisher) EXPECT() *MockRevisionFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockRevisionFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.RevisionSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.RevisionSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockRevisionFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockRevisionFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockRevisionFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockRevisionFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRevisionFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockRevisionFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockRevisionFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRevisionFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockRevisionFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockRevisionFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockRevisionFinisher)(nil).One), ctx, exec)
}

// MockRevisionFinder is a mock of RevisionFinder interface.
type MockRevisionFinder struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionFinderMockRecorder
}

// MockRevisionFinderMockRecorder is the mock recorder for MockRevisionFinder.
type MockRevisionFinderMockRecorder struct {
	mock *MockRevisionFinder
}

// NewMockRevisionFinder creates a new mock instance.
func NewMockRevisionFinder(ctrl *gomock.Controller) *MockRevisionFinder {
	mock := &MockRevisionFinder{ctrl: ctrl}
	mock.recorder = &MockRevisionFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionFinder) EXPECT() *MockRevisionFinderMockRecorder {
	return m.recorder
}

// FindRevision mocks base method.
func (m *MockRevisionFinder) FindRevision(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.Revision, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindRevision", varargs...)
	ret0, _ := ret[0].(*models.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRevision indicates an expected call of FindRevision.
func (mr *MockRevisionFinderMockRecorder) FindRevision(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRevision", reflect.TypeOf((*MockRevisionFinder)(nil).FindRevision), varargs...)
}

// MockRevisionInserter is a mock of RevisionInserter interface.
type MockRevisionInserter struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionInserterMockRecorder
}

// MockRevisionInserterMockRecorder is the mock recorder for MockRevisionInserter.
type MockRevisionInserterMockRecorder struct {
	mock *MockRevisionInserter
}

// NewMockRevisionInserter creates a new mock instance.
func NewMockRevisionInserter(ctrl *gomock.Controller) *MockRevisionInserter {
	mock := &MockRevisionInserter{ctrl: ctrl}
	mock.recorder = &MockRevisionInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionInserter) EXPECT() *MockRevisionInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockRevisionInserter) Insert(o *models.Revision, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockRevisionInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRevisionInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockRevisionUpdater is a mock of RevisionUpdater interface.
type MockRevisionUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionUpdaterMockRecorder
}

// MockRevisionUpdaterMockRecorder is the mock recorder for MockRevisionUpdater.
type MockRevisionUpdaterMockRecorder struct {
	mock *MockRevisionUpdater
}

// NewMockRevisionUpdater creates a new mock instance.
func NewMockRevisionUpdater(ctrl *gomock.Controller) *MockRevisionUpdater {
	mock := &MockRevisionUpdater{ctrl: ctrl}
	mock.recorder = &MockRevisionUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionUpdater) EXPECT() *MockRevisionUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockRevisionUpdater) Update(o *models.Revision, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRevisionUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRevisionUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockRevisionUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockRevisionUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockRevisionUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockRevisionUpdater) UpdateAllSlice(o models.RevisionSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockRevisionUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockRevisionUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockRevisionUpserter is a mock of RevisionUpserter interface.
type MockRevisionUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionUpserterMockRecorder
}

// MockRevisionUpserterMockRecorder is the mock recorder for MockRevisionUpserter.
type MockRevisionUpserterMockRecorder struct {
	mock *MockRevisionUpserter
}

// NewMockRevisionUpserter creates a new mock instance.
func NewMockRevisionUpserter(ctrl *gomock.Controller) *MockRevisionUpserter {
	mock := &MockRevisionUpserter{ctrl: ctrl}
	mock.recorder = &MockRevisionUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionUpserter) EXPECT() *MockRevisionUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockRevisionUpserter) Upsert(o *models.Revision, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockRevisionUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockRevisionUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockRevisionDeleter is a mock of RevisionDeleter interface.
type MockRevisionDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionDeleterMockRecorder
}

// MockRevisionDeleterMockRecorder is the mock recorder for MockRevisionDeleter.
type MockRevisionDeleterMockRecorder struct {
	mock *MockRevisionDeleter
}

// NewMockRevisionDeleter creates a new mock instance.
func NewMockRevisionDeleter(ctrl *gomock.Controller) *MockRevisionDeleter {
	mock := &MockRevisionDeleter{ctrl: ctrl}
	mock.recorder = &MockRevisionDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionDeleter) EXPECT() *MockRevisionDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRevisionDeleter) Delete(o *models.Revision, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRevisionDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRevisionDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockRevisionDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockRevisionDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockRevisionDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockRevisionDeleter) DeleteAllSlice(o models.RevisionSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockRevisionDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockRevisionDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockRevisionReloader is a mock of RevisionReloader interface.
type MockRevisionReloader struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionReloaderMockRecorder
}

// MockRevisionReloaderMockRecorder is the mock recorder for MockRevisionReloader.
type MockRevisionReloaderMockRecorder struct {
	mock *MockRevisionReloader
}

// NewMockRevisionReloader creates a new mock instance.
func NewMockRevisionReloader(ctrl *gomock.Controller) *MockRevisionReloader {
	mock := &MockRevisionReloader{ctrl: ctrl}
	mock.recorder = &MockRevisionReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionReloader) EXPECT() *MockRevisionReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockRevisionReloader) Reload(o *models.Revision, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockRevisionReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockRevisionReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockRevisionReloader) ReloadAll(o *models.RevisionSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockRevisionReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockRevisionReloader)(nil).ReloadAll), o, ctx, exec)
}
