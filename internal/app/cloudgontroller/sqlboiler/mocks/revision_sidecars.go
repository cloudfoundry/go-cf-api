// +build unit

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_revision_sidecars.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockRevisionSidecarUpserter is a mock of RevisionSidecarUpserter interface.
type MockRevisionSidecarUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionSidecarUpserterMockRecorder
}

// MockRevisionSidecarUpserterMockRecorder is the mock recorder for MockRevisionSidecarUpserter.
type MockRevisionSidecarUpserterMockRecorder struct {
	mock *MockRevisionSidecarUpserter
}

// NewMockRevisionSidecarUpserter creates a new mock instance.
func NewMockRevisionSidecarUpserter(ctrl *gomock.Controller) *MockRevisionSidecarUpserter {
	mock := &MockRevisionSidecarUpserter{ctrl: ctrl}
	mock.recorder = &MockRevisionSidecarUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionSidecarUpserter) EXPECT() *MockRevisionSidecarUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockRevisionSidecarUpserter) Upsert(o *models.RevisionSidecar, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockRevisionSidecarUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockRevisionSidecarUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockRevisionSidecarFinisher is a mock of RevisionSidecarFinisher interface.
type MockRevisionSidecarFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionSidecarFinisherMockRecorder
}

// MockRevisionSidecarFinisherMockRecorder is the mock recorder for MockRevisionSidecarFinisher.
type MockRevisionSidecarFinisherMockRecorder struct {
	mock *MockRevisionSidecarFinisher
}

// NewMockRevisionSidecarFinisher creates a new mock instance.
func NewMockRevisionSidecarFinisher(ctrl *gomock.Controller) *MockRevisionSidecarFinisher {
	mock := &MockRevisionSidecarFinisher{ctrl: ctrl}
	mock.recorder = &MockRevisionSidecarFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionSidecarFinisher) EXPECT() *MockRevisionSidecarFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockRevisionSidecarFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.RevisionSidecarSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.RevisionSidecarSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockRevisionSidecarFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockRevisionSidecarFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockRevisionSidecarFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockRevisionSidecarFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRevisionSidecarFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockRevisionSidecarFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockRevisionSidecarFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRevisionSidecarFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockRevisionSidecarFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.RevisionSidecar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.RevisionSidecar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockRevisionSidecarFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockRevisionSidecarFinisher)(nil).One), ctx, exec)
}

// MockRevisionSidecarFinder is a mock of RevisionSidecarFinder interface.
type MockRevisionSidecarFinder struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionSidecarFinderMockRecorder
}

// MockRevisionSidecarFinderMockRecorder is the mock recorder for MockRevisionSidecarFinder.
type MockRevisionSidecarFinderMockRecorder struct {
	mock *MockRevisionSidecarFinder
}

// NewMockRevisionSidecarFinder creates a new mock instance.
func NewMockRevisionSidecarFinder(ctrl *gomock.Controller) *MockRevisionSidecarFinder {
	mock := &MockRevisionSidecarFinder{ctrl: ctrl}
	mock.recorder = &MockRevisionSidecarFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionSidecarFinder) EXPECT() *MockRevisionSidecarFinderMockRecorder {
	return m.recorder
}

// FindRevisionSidecar mocks base method.
func (m *MockRevisionSidecarFinder) FindRevisionSidecar(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.RevisionSidecar, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindRevisionSidecar", varargs...)
	ret0, _ := ret[0].(*models.RevisionSidecar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRevisionSidecar indicates an expected call of FindRevisionSidecar.
func (mr *MockRevisionSidecarFinderMockRecorder) FindRevisionSidecar(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRevisionSidecar", reflect.TypeOf((*MockRevisionSidecarFinder)(nil).FindRevisionSidecar), varargs...)
}

// MockRevisionSidecarInserter is a mock of RevisionSidecarInserter interface.
type MockRevisionSidecarInserter struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionSidecarInserterMockRecorder
}

// MockRevisionSidecarInserterMockRecorder is the mock recorder for MockRevisionSidecarInserter.
type MockRevisionSidecarInserterMockRecorder struct {
	mock *MockRevisionSidecarInserter
}

// NewMockRevisionSidecarInserter creates a new mock instance.
func NewMockRevisionSidecarInserter(ctrl *gomock.Controller) *MockRevisionSidecarInserter {
	mock := &MockRevisionSidecarInserter{ctrl: ctrl}
	mock.recorder = &MockRevisionSidecarInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionSidecarInserter) EXPECT() *MockRevisionSidecarInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockRevisionSidecarInserter) Insert(o *models.RevisionSidecar, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockRevisionSidecarInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRevisionSidecarInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockRevisionSidecarUpdater is a mock of RevisionSidecarUpdater interface.
type MockRevisionSidecarUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionSidecarUpdaterMockRecorder
}

// MockRevisionSidecarUpdaterMockRecorder is the mock recorder for MockRevisionSidecarUpdater.
type MockRevisionSidecarUpdaterMockRecorder struct {
	mock *MockRevisionSidecarUpdater
}

// NewMockRevisionSidecarUpdater creates a new mock instance.
func NewMockRevisionSidecarUpdater(ctrl *gomock.Controller) *MockRevisionSidecarUpdater {
	mock := &MockRevisionSidecarUpdater{ctrl: ctrl}
	mock.recorder = &MockRevisionSidecarUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionSidecarUpdater) EXPECT() *MockRevisionSidecarUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockRevisionSidecarUpdater) Update(o *models.RevisionSidecar, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRevisionSidecarUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRevisionSidecarUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockRevisionSidecarUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockRevisionSidecarUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockRevisionSidecarUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockRevisionSidecarUpdater) UpdateAllSlice(o models.RevisionSidecarSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockRevisionSidecarUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockRevisionSidecarUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockRevisionSidecarDeleter is a mock of RevisionSidecarDeleter interface.
type MockRevisionSidecarDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionSidecarDeleterMockRecorder
}

// MockRevisionSidecarDeleterMockRecorder is the mock recorder for MockRevisionSidecarDeleter.
type MockRevisionSidecarDeleterMockRecorder struct {
	mock *MockRevisionSidecarDeleter
}

// NewMockRevisionSidecarDeleter creates a new mock instance.
func NewMockRevisionSidecarDeleter(ctrl *gomock.Controller) *MockRevisionSidecarDeleter {
	mock := &MockRevisionSidecarDeleter{ctrl: ctrl}
	mock.recorder = &MockRevisionSidecarDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionSidecarDeleter) EXPECT() *MockRevisionSidecarDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRevisionSidecarDeleter) Delete(o *models.RevisionSidecar, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRevisionSidecarDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRevisionSidecarDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockRevisionSidecarDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockRevisionSidecarDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockRevisionSidecarDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockRevisionSidecarDeleter) DeleteAllSlice(o models.RevisionSidecarSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockRevisionSidecarDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockRevisionSidecarDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockRevisionSidecarReloader is a mock of RevisionSidecarReloader interface.
type MockRevisionSidecarReloader struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionSidecarReloaderMockRecorder
}

// MockRevisionSidecarReloaderMockRecorder is the mock recorder for MockRevisionSidecarReloader.
type MockRevisionSidecarReloaderMockRecorder struct {
	mock *MockRevisionSidecarReloader
}

// NewMockRevisionSidecarReloader creates a new mock instance.
func NewMockRevisionSidecarReloader(ctrl *gomock.Controller) *MockRevisionSidecarReloader {
	mock := &MockRevisionSidecarReloader{ctrl: ctrl}
	mock.recorder = &MockRevisionSidecarReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionSidecarReloader) EXPECT() *MockRevisionSidecarReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockRevisionSidecarReloader) Reload(o *models.RevisionSidecar, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockRevisionSidecarReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockRevisionSidecarReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockRevisionSidecarReloader) ReloadAll(o *models.RevisionSidecarSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockRevisionSidecarReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockRevisionSidecarReloader)(nil).ReloadAll), o, ctx, exec)
}
