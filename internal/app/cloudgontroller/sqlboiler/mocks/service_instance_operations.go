// +build unit

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_service_instance_operations.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockServiceInstanceOperationUpserter is a mock of ServiceInstanceOperationUpserter interface.
type MockServiceInstanceOperationUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInstanceOperationUpserterMockRecorder
}

// MockServiceInstanceOperationUpserterMockRecorder is the mock recorder for MockServiceInstanceOperationUpserter.
type MockServiceInstanceOperationUpserterMockRecorder struct {
	mock *MockServiceInstanceOperationUpserter
}

// NewMockServiceInstanceOperationUpserter creates a new mock instance.
func NewMockServiceInstanceOperationUpserter(ctrl *gomock.Controller) *MockServiceInstanceOperationUpserter {
	mock := &MockServiceInstanceOperationUpserter{ctrl: ctrl}
	mock.recorder = &MockServiceInstanceOperationUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInstanceOperationUpserter) EXPECT() *MockServiceInstanceOperationUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockServiceInstanceOperationUpserter) Upsert(o *models.ServiceInstanceOperation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockServiceInstanceOperationUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockServiceInstanceOperationUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockServiceInstanceOperationFinisher is a mock of ServiceInstanceOperationFinisher interface.
type MockServiceInstanceOperationFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInstanceOperationFinisherMockRecorder
}

// MockServiceInstanceOperationFinisherMockRecorder is the mock recorder for MockServiceInstanceOperationFinisher.
type MockServiceInstanceOperationFinisherMockRecorder struct {
	mock *MockServiceInstanceOperationFinisher
}

// NewMockServiceInstanceOperationFinisher creates a new mock instance.
func NewMockServiceInstanceOperationFinisher(ctrl *gomock.Controller) *MockServiceInstanceOperationFinisher {
	mock := &MockServiceInstanceOperationFinisher{ctrl: ctrl}
	mock.recorder = &MockServiceInstanceOperationFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInstanceOperationFinisher) EXPECT() *MockServiceInstanceOperationFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockServiceInstanceOperationFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.ServiceInstanceOperationSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.ServiceInstanceOperationSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockServiceInstanceOperationFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockServiceInstanceOperationFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockServiceInstanceOperationFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockServiceInstanceOperationFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockServiceInstanceOperationFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockServiceInstanceOperationFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockServiceInstanceOperationFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockServiceInstanceOperationFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockServiceInstanceOperationFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.ServiceInstanceOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.ServiceInstanceOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockServiceInstanceOperationFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockServiceInstanceOperationFinisher)(nil).One), ctx, exec)
}

// MockServiceInstanceOperationFinder is a mock of ServiceInstanceOperationFinder interface.
type MockServiceInstanceOperationFinder struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInstanceOperationFinderMockRecorder
}

// MockServiceInstanceOperationFinderMockRecorder is the mock recorder for MockServiceInstanceOperationFinder.
type MockServiceInstanceOperationFinderMockRecorder struct {
	mock *MockServiceInstanceOperationFinder
}

// NewMockServiceInstanceOperationFinder creates a new mock instance.
func NewMockServiceInstanceOperationFinder(ctrl *gomock.Controller) *MockServiceInstanceOperationFinder {
	mock := &MockServiceInstanceOperationFinder{ctrl: ctrl}
	mock.recorder = &MockServiceInstanceOperationFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInstanceOperationFinder) EXPECT() *MockServiceInstanceOperationFinderMockRecorder {
	return m.recorder
}

// FindServiceInstanceOperation mocks base method.
func (m *MockServiceInstanceOperationFinder) FindServiceInstanceOperation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.ServiceInstanceOperation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindServiceInstanceOperation", varargs...)
	ret0, _ := ret[0].(*models.ServiceInstanceOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindServiceInstanceOperation indicates an expected call of FindServiceInstanceOperation.
func (mr *MockServiceInstanceOperationFinderMockRecorder) FindServiceInstanceOperation(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindServiceInstanceOperation", reflect.TypeOf((*MockServiceInstanceOperationFinder)(nil).FindServiceInstanceOperation), varargs...)
}

// MockServiceInstanceOperationInserter is a mock of ServiceInstanceOperationInserter interface.
type MockServiceInstanceOperationInserter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInstanceOperationInserterMockRecorder
}

// MockServiceInstanceOperationInserterMockRecorder is the mock recorder for MockServiceInstanceOperationInserter.
type MockServiceInstanceOperationInserterMockRecorder struct {
	mock *MockServiceInstanceOperationInserter
}

// NewMockServiceInstanceOperationInserter creates a new mock instance.
func NewMockServiceInstanceOperationInserter(ctrl *gomock.Controller) *MockServiceInstanceOperationInserter {
	mock := &MockServiceInstanceOperationInserter{ctrl: ctrl}
	mock.recorder = &MockServiceInstanceOperationInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInstanceOperationInserter) EXPECT() *MockServiceInstanceOperationInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockServiceInstanceOperationInserter) Insert(o *models.ServiceInstanceOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockServiceInstanceOperationInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockServiceInstanceOperationInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockServiceInstanceOperationUpdater is a mock of ServiceInstanceOperationUpdater interface.
type MockServiceInstanceOperationUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInstanceOperationUpdaterMockRecorder
}

// MockServiceInstanceOperationUpdaterMockRecorder is the mock recorder for MockServiceInstanceOperationUpdater.
type MockServiceInstanceOperationUpdaterMockRecorder struct {
	mock *MockServiceInstanceOperationUpdater
}

// NewMockServiceInstanceOperationUpdater creates a new mock instance.
func NewMockServiceInstanceOperationUpdater(ctrl *gomock.Controller) *MockServiceInstanceOperationUpdater {
	mock := &MockServiceInstanceOperationUpdater{ctrl: ctrl}
	mock.recorder = &MockServiceInstanceOperationUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInstanceOperationUpdater) EXPECT() *MockServiceInstanceOperationUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockServiceInstanceOperationUpdater) Update(o *models.ServiceInstanceOperation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServiceInstanceOperationUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceInstanceOperationUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockServiceInstanceOperationUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockServiceInstanceOperationUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockServiceInstanceOperationUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockServiceInstanceOperationUpdater) UpdateAllSlice(o models.ServiceInstanceOperationSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockServiceInstanceOperationUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockServiceInstanceOperationUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockServiceInstanceOperationDeleter is a mock of ServiceInstanceOperationDeleter interface.
type MockServiceInstanceOperationDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInstanceOperationDeleterMockRecorder
}

// MockServiceInstanceOperationDeleterMockRecorder is the mock recorder for MockServiceInstanceOperationDeleter.
type MockServiceInstanceOperationDeleterMockRecorder struct {
	mock *MockServiceInstanceOperationDeleter
}

// NewMockServiceInstanceOperationDeleter creates a new mock instance.
func NewMockServiceInstanceOperationDeleter(ctrl *gomock.Controller) *MockServiceInstanceOperationDeleter {
	mock := &MockServiceInstanceOperationDeleter{ctrl: ctrl}
	mock.recorder = &MockServiceInstanceOperationDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInstanceOperationDeleter) EXPECT() *MockServiceInstanceOperationDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockServiceInstanceOperationDeleter) Delete(o *models.ServiceInstanceOperation, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceInstanceOperationDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceInstanceOperationDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockServiceInstanceOperationDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockServiceInstanceOperationDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockServiceInstanceOperationDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockServiceInstanceOperationDeleter) DeleteAllSlice(o models.ServiceInstanceOperationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockServiceInstanceOperationDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockServiceInstanceOperationDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockServiceInstanceOperationReloader is a mock of ServiceInstanceOperationReloader interface.
type MockServiceInstanceOperationReloader struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInstanceOperationReloaderMockRecorder
}

// MockServiceInstanceOperationReloaderMockRecorder is the mock recorder for MockServiceInstanceOperationReloader.
type MockServiceInstanceOperationReloaderMockRecorder struct {
	mock *MockServiceInstanceOperationReloader
}

// NewMockServiceInstanceOperationReloader creates a new mock instance.
func NewMockServiceInstanceOperationReloader(ctrl *gomock.Controller) *MockServiceInstanceOperationReloader {
	mock := &MockServiceInstanceOperationReloader{ctrl: ctrl}
	mock.recorder = &MockServiceInstanceOperationReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInstanceOperationReloader) EXPECT() *MockServiceInstanceOperationReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockServiceInstanceOperationReloader) Reload(o *models.ServiceInstanceOperation, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockServiceInstanceOperationReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockServiceInstanceOperationReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockServiceInstanceOperationReloader) ReloadAll(o *models.ServiceInstanceOperationSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockServiceInstanceOperationReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockServiceInstanceOperationReloader)(nil).ReloadAll), o, ctx, exec)
}
