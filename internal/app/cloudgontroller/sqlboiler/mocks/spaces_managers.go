// +build unit

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_spaces_managers.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockSpacesManagerUpserter is a mock of SpacesManagerUpserter interface.
type MockSpacesManagerUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockSpacesManagerUpserterMockRecorder
}

// MockSpacesManagerUpserterMockRecorder is the mock recorder for MockSpacesManagerUpserter.
type MockSpacesManagerUpserterMockRecorder struct {
	mock *MockSpacesManagerUpserter
}

// NewMockSpacesManagerUpserter creates a new mock instance.
func NewMockSpacesManagerUpserter(ctrl *gomock.Controller) *MockSpacesManagerUpserter {
	mock := &MockSpacesManagerUpserter{ctrl: ctrl}
	mock.recorder = &MockSpacesManagerUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpacesManagerUpserter) EXPECT() *MockSpacesManagerUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockSpacesManagerUpserter) Upsert(o *models.SpacesManager, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockSpacesManagerUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockSpacesManagerUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockSpacesManagerFinisher is a mock of SpacesManagerFinisher interface.
type MockSpacesManagerFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockSpacesManagerFinisherMockRecorder
}

// MockSpacesManagerFinisherMockRecorder is the mock recorder for MockSpacesManagerFinisher.
type MockSpacesManagerFinisherMockRecorder struct {
	mock *MockSpacesManagerFinisher
}

// NewMockSpacesManagerFinisher creates a new mock instance.
func NewMockSpacesManagerFinisher(ctrl *gomock.Controller) *MockSpacesManagerFinisher {
	mock := &MockSpacesManagerFinisher{ctrl: ctrl}
	mock.recorder = &MockSpacesManagerFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpacesManagerFinisher) EXPECT() *MockSpacesManagerFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockSpacesManagerFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.SpacesManagerSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.SpacesManagerSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockSpacesManagerFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockSpacesManagerFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockSpacesManagerFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockSpacesManagerFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockSpacesManagerFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockSpacesManagerFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockSpacesManagerFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockSpacesManagerFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockSpacesManagerFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.SpacesManager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.SpacesManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockSpacesManagerFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockSpacesManagerFinisher)(nil).One), ctx, exec)
}

// MockSpacesManagerFinder is a mock of SpacesManagerFinder interface.
type MockSpacesManagerFinder struct {
	ctrl     *gomock.Controller
	recorder *MockSpacesManagerFinderMockRecorder
}

// MockSpacesManagerFinderMockRecorder is the mock recorder for MockSpacesManagerFinder.
type MockSpacesManagerFinderMockRecorder struct {
	mock *MockSpacesManagerFinder
}

// NewMockSpacesManagerFinder creates a new mock instance.
func NewMockSpacesManagerFinder(ctrl *gomock.Controller) *MockSpacesManagerFinder {
	mock := &MockSpacesManagerFinder{ctrl: ctrl}
	mock.recorder = &MockSpacesManagerFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpacesManagerFinder) EXPECT() *MockSpacesManagerFinderMockRecorder {
	return m.recorder
}

// FindSpacesManager mocks base method.
func (m *MockSpacesManagerFinder) FindSpacesManager(ctx context.Context, exec boil.ContextExecutor, spacesManagersPK int, selectCols ...string) (*models.SpacesManager, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, spacesManagersPK}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindSpacesManager", varargs...)
	ret0, _ := ret[0].(*models.SpacesManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSpacesManager indicates an expected call of FindSpacesManager.
func (mr *MockSpacesManagerFinderMockRecorder) FindSpacesManager(ctx, exec, spacesManagersPK interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, spacesManagersPK}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSpacesManager", reflect.TypeOf((*MockSpacesManagerFinder)(nil).FindSpacesManager), varargs...)
}

// MockSpacesManagerInserter is a mock of SpacesManagerInserter interface.
type MockSpacesManagerInserter struct {
	ctrl     *gomock.Controller
	recorder *MockSpacesManagerInserterMockRecorder
}

// MockSpacesManagerInserterMockRecorder is the mock recorder for MockSpacesManagerInserter.
type MockSpacesManagerInserterMockRecorder struct {
	mock *MockSpacesManagerInserter
}

// NewMockSpacesManagerInserter creates a new mock instance.
func NewMockSpacesManagerInserter(ctrl *gomock.Controller) *MockSpacesManagerInserter {
	mock := &MockSpacesManagerInserter{ctrl: ctrl}
	mock.recorder = &MockSpacesManagerInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpacesManagerInserter) EXPECT() *MockSpacesManagerInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockSpacesManagerInserter) Insert(o *models.SpacesManager, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockSpacesManagerInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSpacesManagerInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockSpacesManagerUpdater is a mock of SpacesManagerUpdater interface.
type MockSpacesManagerUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockSpacesManagerUpdaterMockRecorder
}

// MockSpacesManagerUpdaterMockRecorder is the mock recorder for MockSpacesManagerUpdater.
type MockSpacesManagerUpdaterMockRecorder struct {
	mock *MockSpacesManagerUpdater
}

// NewMockSpacesManagerUpdater creates a new mock instance.
func NewMockSpacesManagerUpdater(ctrl *gomock.Controller) *MockSpacesManagerUpdater {
	mock := &MockSpacesManagerUpdater{ctrl: ctrl}
	mock.recorder = &MockSpacesManagerUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpacesManagerUpdater) EXPECT() *MockSpacesManagerUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockSpacesManagerUpdater) Update(o *models.SpacesManager, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSpacesManagerUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSpacesManagerUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockSpacesManagerUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockSpacesManagerUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockSpacesManagerUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockSpacesManagerUpdater) UpdateAllSlice(o models.SpacesManagerSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockSpacesManagerUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockSpacesManagerUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockSpacesManagerDeleter is a mock of SpacesManagerDeleter interface.
type MockSpacesManagerDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockSpacesManagerDeleterMockRecorder
}

// MockSpacesManagerDeleterMockRecorder is the mock recorder for MockSpacesManagerDeleter.
type MockSpacesManagerDeleterMockRecorder struct {
	mock *MockSpacesManagerDeleter
}

// NewMockSpacesManagerDeleter creates a new mock instance.
func NewMockSpacesManagerDeleter(ctrl *gomock.Controller) *MockSpacesManagerDeleter {
	mock := &MockSpacesManagerDeleter{ctrl: ctrl}
	mock.recorder = &MockSpacesManagerDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpacesManagerDeleter) EXPECT() *MockSpacesManagerDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSpacesManagerDeleter) Delete(o *models.SpacesManager, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSpacesManagerDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSpacesManagerDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockSpacesManagerDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockSpacesManagerDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockSpacesManagerDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockSpacesManagerDeleter) DeleteAllSlice(o models.SpacesManagerSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockSpacesManagerDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockSpacesManagerDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockSpacesManagerReloader is a mock of SpacesManagerReloader interface.
type MockSpacesManagerReloader struct {
	ctrl     *gomock.Controller
	recorder *MockSpacesManagerReloaderMockRecorder
}

// MockSpacesManagerReloaderMockRecorder is the mock recorder for MockSpacesManagerReloader.
type MockSpacesManagerReloaderMockRecorder struct {
	mock *MockSpacesManagerReloader
}

// NewMockSpacesManagerReloader creates a new mock instance.
func NewMockSpacesManagerReloader(ctrl *gomock.Controller) *MockSpacesManagerReloader {
	mock := &MockSpacesManagerReloader{ctrl: ctrl}
	mock.recorder = &MockSpacesManagerReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpacesManagerReloader) EXPECT() *MockSpacesManagerReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockSpacesManagerReloader) Reload(o *models.SpacesManager, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockSpacesManagerReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockSpacesManagerReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockSpacesManagerReloader) ReloadAll(o *models.SpacesManagerSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockSpacesManagerReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockSpacesManagerReloader)(nil).ReloadAll), o, ctx, exec)
}
