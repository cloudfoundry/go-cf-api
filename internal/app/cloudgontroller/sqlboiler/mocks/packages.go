// Code generated by MockGen. DO NOT EDIT.
// Source: psql_packages.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockPackageFinisher is a mock of PackageFinisher interface.
type MockPackageFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockPackageFinisherMockRecorder
}

// MockPackageFinisherMockRecorder is the mock recorder for MockPackageFinisher.
type MockPackageFinisherMockRecorder struct {
	mock *MockPackageFinisher
}

// NewMockPackageFinisher creates a new mock instance.
func NewMockPackageFinisher(ctrl *gomock.Controller) *MockPackageFinisher {
	mock := &MockPackageFinisher{ctrl: ctrl}
	mock.recorder = &MockPackageFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageFinisher) EXPECT() *MockPackageFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockPackageFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.PackageSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.PackageSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockPackageFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockPackageFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockPackageFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockPackageFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockPackageFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockPackageFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockPackageFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockPackageFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockPackageFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockPackageFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockPackageFinisher)(nil).One), ctx, exec)
}

// MockPackageFinder is a mock of PackageFinder interface.
type MockPackageFinder struct {
	ctrl     *gomock.Controller
	recorder *MockPackageFinderMockRecorder
}

// MockPackageFinderMockRecorder is the mock recorder for MockPackageFinder.
type MockPackageFinderMockRecorder struct {
	mock *MockPackageFinder
}

// NewMockPackageFinder creates a new mock instance.
func NewMockPackageFinder(ctrl *gomock.Controller) *MockPackageFinder {
	mock := &MockPackageFinder{ctrl: ctrl}
	mock.recorder = &MockPackageFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageFinder) EXPECT() *MockPackageFinderMockRecorder {
	return m.recorder
}

// FindPackage mocks base method.
func (m *MockPackageFinder) FindPackage(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.Package, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindPackage", varargs...)
	ret0, _ := ret[0].(*models.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPackage indicates an expected call of FindPackage.
func (mr *MockPackageFinderMockRecorder) FindPackage(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPackage", reflect.TypeOf((*MockPackageFinder)(nil).FindPackage), varargs...)
}

// MockPackageInserter is a mock of PackageInserter interface.
type MockPackageInserter struct {
	ctrl     *gomock.Controller
	recorder *MockPackageInserterMockRecorder
}

// MockPackageInserterMockRecorder is the mock recorder for MockPackageInserter.
type MockPackageInserterMockRecorder struct {
	mock *MockPackageInserter
}

// NewMockPackageInserter creates a new mock instance.
func NewMockPackageInserter(ctrl *gomock.Controller) *MockPackageInserter {
	mock := &MockPackageInserter{ctrl: ctrl}
	mock.recorder = &MockPackageInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageInserter) EXPECT() *MockPackageInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockPackageInserter) Insert(o *models.Package, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockPackageInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPackageInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockPackageUpdater is a mock of PackageUpdater interface.
type MockPackageUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockPackageUpdaterMockRecorder
}

// MockPackageUpdaterMockRecorder is the mock recorder for MockPackageUpdater.
type MockPackageUpdaterMockRecorder struct {
	mock *MockPackageUpdater
}

// NewMockPackageUpdater creates a new mock instance.
func NewMockPackageUpdater(ctrl *gomock.Controller) *MockPackageUpdater {
	mock := &MockPackageUpdater{ctrl: ctrl}
	mock.recorder = &MockPackageUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageUpdater) EXPECT() *MockPackageUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockPackageUpdater) Update(o *models.Package, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPackageUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPackageUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockPackageUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockPackageUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockPackageUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockPackageUpdater) UpdateAllSlice(o models.PackageSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockPackageUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockPackageUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockPackageUpserter is a mock of PackageUpserter interface.
type MockPackageUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockPackageUpserterMockRecorder
}

// MockPackageUpserterMockRecorder is the mock recorder for MockPackageUpserter.
type MockPackageUpserterMockRecorder struct {
	mock *MockPackageUpserter
}

// NewMockPackageUpserter creates a new mock instance.
func NewMockPackageUpserter(ctrl *gomock.Controller) *MockPackageUpserter {
	mock := &MockPackageUpserter{ctrl: ctrl}
	mock.recorder = &MockPackageUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageUpserter) EXPECT() *MockPackageUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockPackageUpserter) Upsert(o *models.Package, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockPackageUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockPackageUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockPackageDeleter is a mock of PackageDeleter interface.
type MockPackageDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockPackageDeleterMockRecorder
}

// MockPackageDeleterMockRecorder is the mock recorder for MockPackageDeleter.
type MockPackageDeleterMockRecorder struct {
	mock *MockPackageDeleter
}

// NewMockPackageDeleter creates a new mock instance.
func NewMockPackageDeleter(ctrl *gomock.Controller) *MockPackageDeleter {
	mock := &MockPackageDeleter{ctrl: ctrl}
	mock.recorder = &MockPackageDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageDeleter) EXPECT() *MockPackageDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockPackageDeleter) Delete(o *models.Package, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPackageDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPackageDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockPackageDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockPackageDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockPackageDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockPackageDeleter) DeleteAllSlice(o models.PackageSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockPackageDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockPackageDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockPackageReloader is a mock of PackageReloader interface.
type MockPackageReloader struct {
	ctrl     *gomock.Controller
	recorder *MockPackageReloaderMockRecorder
}

// MockPackageReloaderMockRecorder is the mock recorder for MockPackageReloader.
type MockPackageReloaderMockRecorder struct {
	mock *MockPackageReloader
}

// NewMockPackageReloader creates a new mock instance.
func NewMockPackageReloader(ctrl *gomock.Controller) *MockPackageReloader {
	mock := &MockPackageReloader{ctrl: ctrl}
	mock.recorder = &MockPackageReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageReloader) EXPECT() *MockPackageReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockPackageReloader) Reload(o *models.Package, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockPackageReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockPackageReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockPackageReloader) ReloadAll(o *models.PackageSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockPackageReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockPackageReloader)(nil).ReloadAll), o, ctx, exec)
}
