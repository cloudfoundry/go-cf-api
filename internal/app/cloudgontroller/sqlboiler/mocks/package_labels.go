// +build unit

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_package_labels.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockPackageLabelUpserter is a mock of PackageLabelUpserter interface.
type MockPackageLabelUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockPackageLabelUpserterMockRecorder
}

// MockPackageLabelUpserterMockRecorder is the mock recorder for MockPackageLabelUpserter.
type MockPackageLabelUpserterMockRecorder struct {
	mock *MockPackageLabelUpserter
}

// NewMockPackageLabelUpserter creates a new mock instance.
func NewMockPackageLabelUpserter(ctrl *gomock.Controller) *MockPackageLabelUpserter {
	mock := &MockPackageLabelUpserter{ctrl: ctrl}
	mock.recorder = &MockPackageLabelUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageLabelUpserter) EXPECT() *MockPackageLabelUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockPackageLabelUpserter) Upsert(o *models.PackageLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockPackageLabelUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockPackageLabelUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockPackageLabelFinisher is a mock of PackageLabelFinisher interface.
type MockPackageLabelFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockPackageLabelFinisherMockRecorder
}

// MockPackageLabelFinisherMockRecorder is the mock recorder for MockPackageLabelFinisher.
type MockPackageLabelFinisherMockRecorder struct {
	mock *MockPackageLabelFinisher
}

// NewMockPackageLabelFinisher creates a new mock instance.
func NewMockPackageLabelFinisher(ctrl *gomock.Controller) *MockPackageLabelFinisher {
	mock := &MockPackageLabelFinisher{ctrl: ctrl}
	mock.recorder = &MockPackageLabelFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageLabelFinisher) EXPECT() *MockPackageLabelFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockPackageLabelFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.PackageLabelSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.PackageLabelSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockPackageLabelFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockPackageLabelFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockPackageLabelFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockPackageLabelFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockPackageLabelFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockPackageLabelFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockPackageLabelFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockPackageLabelFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockPackageLabelFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.PackageLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.PackageLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockPackageLabelFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockPackageLabelFinisher)(nil).One), ctx, exec)
}

// MockPackageLabelFinder is a mock of PackageLabelFinder interface.
type MockPackageLabelFinder struct {
	ctrl     *gomock.Controller
	recorder *MockPackageLabelFinderMockRecorder
}

// MockPackageLabelFinderMockRecorder is the mock recorder for MockPackageLabelFinder.
type MockPackageLabelFinderMockRecorder struct {
	mock *MockPackageLabelFinder
}

// NewMockPackageLabelFinder creates a new mock instance.
func NewMockPackageLabelFinder(ctrl *gomock.Controller) *MockPackageLabelFinder {
	mock := &MockPackageLabelFinder{ctrl: ctrl}
	mock.recorder = &MockPackageLabelFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageLabelFinder) EXPECT() *MockPackageLabelFinderMockRecorder {
	return m.recorder
}

// FindPackageLabel mocks base method.
func (m *MockPackageLabelFinder) FindPackageLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.PackageLabel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindPackageLabel", varargs...)
	ret0, _ := ret[0].(*models.PackageLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPackageLabel indicates an expected call of FindPackageLabel.
func (mr *MockPackageLabelFinderMockRecorder) FindPackageLabel(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPackageLabel", reflect.TypeOf((*MockPackageLabelFinder)(nil).FindPackageLabel), varargs...)
}

// MockPackageLabelInserter is a mock of PackageLabelInserter interface.
type MockPackageLabelInserter struct {
	ctrl     *gomock.Controller
	recorder *MockPackageLabelInserterMockRecorder
}

// MockPackageLabelInserterMockRecorder is the mock recorder for MockPackageLabelInserter.
type MockPackageLabelInserterMockRecorder struct {
	mock *MockPackageLabelInserter
}

// NewMockPackageLabelInserter creates a new mock instance.
func NewMockPackageLabelInserter(ctrl *gomock.Controller) *MockPackageLabelInserter {
	mock := &MockPackageLabelInserter{ctrl: ctrl}
	mock.recorder = &MockPackageLabelInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageLabelInserter) EXPECT() *MockPackageLabelInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockPackageLabelInserter) Insert(o *models.PackageLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockPackageLabelInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPackageLabelInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockPackageLabelUpdater is a mock of PackageLabelUpdater interface.
type MockPackageLabelUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockPackageLabelUpdaterMockRecorder
}

// MockPackageLabelUpdaterMockRecorder is the mock recorder for MockPackageLabelUpdater.
type MockPackageLabelUpdaterMockRecorder struct {
	mock *MockPackageLabelUpdater
}

// NewMockPackageLabelUpdater creates a new mock instance.
func NewMockPackageLabelUpdater(ctrl *gomock.Controller) *MockPackageLabelUpdater {
	mock := &MockPackageLabelUpdater{ctrl: ctrl}
	mock.recorder = &MockPackageLabelUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageLabelUpdater) EXPECT() *MockPackageLabelUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockPackageLabelUpdater) Update(o *models.PackageLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPackageLabelUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPackageLabelUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockPackageLabelUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockPackageLabelUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockPackageLabelUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockPackageLabelUpdater) UpdateAllSlice(o models.PackageLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockPackageLabelUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockPackageLabelUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockPackageLabelDeleter is a mock of PackageLabelDeleter interface.
type MockPackageLabelDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockPackageLabelDeleterMockRecorder
}

// MockPackageLabelDeleterMockRecorder is the mock recorder for MockPackageLabelDeleter.
type MockPackageLabelDeleterMockRecorder struct {
	mock *MockPackageLabelDeleter
}

// NewMockPackageLabelDeleter creates a new mock instance.
func NewMockPackageLabelDeleter(ctrl *gomock.Controller) *MockPackageLabelDeleter {
	mock := &MockPackageLabelDeleter{ctrl: ctrl}
	mock.recorder = &MockPackageLabelDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageLabelDeleter) EXPECT() *MockPackageLabelDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockPackageLabelDeleter) Delete(o *models.PackageLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPackageLabelDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPackageLabelDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockPackageLabelDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockPackageLabelDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockPackageLabelDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockPackageLabelDeleter) DeleteAllSlice(o models.PackageLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockPackageLabelDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockPackageLabelDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockPackageLabelReloader is a mock of PackageLabelReloader interface.
type MockPackageLabelReloader struct {
	ctrl     *gomock.Controller
	recorder *MockPackageLabelReloaderMockRecorder
}

// MockPackageLabelReloaderMockRecorder is the mock recorder for MockPackageLabelReloader.
type MockPackageLabelReloaderMockRecorder struct {
	mock *MockPackageLabelReloader
}

// NewMockPackageLabelReloader creates a new mock instance.
func NewMockPackageLabelReloader(ctrl *gomock.Controller) *MockPackageLabelReloader {
	mock := &MockPackageLabelReloader{ctrl: ctrl}
	mock.recorder = &MockPackageLabelReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageLabelReloader) EXPECT() *MockPackageLabelReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockPackageLabelReloader) Reload(o *models.PackageLabel, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockPackageLabelReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockPackageLabelReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockPackageLabelReloader) ReloadAll(o *models.PackageLabelSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockPackageLabelReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockPackageLabelReloader)(nil).ReloadAll), o, ctx, exec)
}
