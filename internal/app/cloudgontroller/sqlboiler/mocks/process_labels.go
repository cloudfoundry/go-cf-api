// +build unit

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_process_labels.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockProcessLabelFinisher is a mock of ProcessLabelFinisher interface.
type MockProcessLabelFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockProcessLabelFinisherMockRecorder
}

// MockProcessLabelFinisherMockRecorder is the mock recorder for MockProcessLabelFinisher.
type MockProcessLabelFinisherMockRecorder struct {
	mock *MockProcessLabelFinisher
}

// NewMockProcessLabelFinisher creates a new mock instance.
func NewMockProcessLabelFinisher(ctrl *gomock.Controller) *MockProcessLabelFinisher {
	mock := &MockProcessLabelFinisher{ctrl: ctrl}
	mock.recorder = &MockProcessLabelFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessLabelFinisher) EXPECT() *MockProcessLabelFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockProcessLabelFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.ProcessLabelSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.ProcessLabelSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockProcessLabelFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockProcessLabelFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockProcessLabelFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockProcessLabelFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockProcessLabelFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockProcessLabelFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockProcessLabelFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockProcessLabelFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockProcessLabelFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.ProcessLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.ProcessLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockProcessLabelFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockProcessLabelFinisher)(nil).One), ctx, exec)
}

// MockProcessLabelFinder is a mock of ProcessLabelFinder interface.
type MockProcessLabelFinder struct {
	ctrl     *gomock.Controller
	recorder *MockProcessLabelFinderMockRecorder
}

// MockProcessLabelFinderMockRecorder is the mock recorder for MockProcessLabelFinder.
type MockProcessLabelFinderMockRecorder struct {
	mock *MockProcessLabelFinder
}

// NewMockProcessLabelFinder creates a new mock instance.
func NewMockProcessLabelFinder(ctrl *gomock.Controller) *MockProcessLabelFinder {
	mock := &MockProcessLabelFinder{ctrl: ctrl}
	mock.recorder = &MockProcessLabelFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessLabelFinder) EXPECT() *MockProcessLabelFinderMockRecorder {
	return m.recorder
}

// FindProcessLabel mocks base method.
func (m *MockProcessLabelFinder) FindProcessLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.ProcessLabel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindProcessLabel", varargs...)
	ret0, _ := ret[0].(*models.ProcessLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProcessLabel indicates an expected call of FindProcessLabel.
func (mr *MockProcessLabelFinderMockRecorder) FindProcessLabel(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProcessLabel", reflect.TypeOf((*MockProcessLabelFinder)(nil).FindProcessLabel), varargs...)
}

// MockProcessLabelInserter is a mock of ProcessLabelInserter interface.
type MockProcessLabelInserter struct {
	ctrl     *gomock.Controller
	recorder *MockProcessLabelInserterMockRecorder
}

// MockProcessLabelInserterMockRecorder is the mock recorder for MockProcessLabelInserter.
type MockProcessLabelInserterMockRecorder struct {
	mock *MockProcessLabelInserter
}

// NewMockProcessLabelInserter creates a new mock instance.
func NewMockProcessLabelInserter(ctrl *gomock.Controller) *MockProcessLabelInserter {
	mock := &MockProcessLabelInserter{ctrl: ctrl}
	mock.recorder = &MockProcessLabelInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessLabelInserter) EXPECT() *MockProcessLabelInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockProcessLabelInserter) Insert(o *models.ProcessLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockProcessLabelInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockProcessLabelInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockProcessLabelUpdater is a mock of ProcessLabelUpdater interface.
type MockProcessLabelUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockProcessLabelUpdaterMockRecorder
}

// MockProcessLabelUpdaterMockRecorder is the mock recorder for MockProcessLabelUpdater.
type MockProcessLabelUpdaterMockRecorder struct {
	mock *MockProcessLabelUpdater
}

// NewMockProcessLabelUpdater creates a new mock instance.
func NewMockProcessLabelUpdater(ctrl *gomock.Controller) *MockProcessLabelUpdater {
	mock := &MockProcessLabelUpdater{ctrl: ctrl}
	mock.recorder = &MockProcessLabelUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessLabelUpdater) EXPECT() *MockProcessLabelUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockProcessLabelUpdater) Update(o *models.ProcessLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProcessLabelUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProcessLabelUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockProcessLabelUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockProcessLabelUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockProcessLabelUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockProcessLabelUpdater) UpdateAllSlice(o models.ProcessLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockProcessLabelUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockProcessLabelUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockProcessLabelUpserter is a mock of ProcessLabelUpserter interface.
type MockProcessLabelUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockProcessLabelUpserterMockRecorder
}

// MockProcessLabelUpserterMockRecorder is the mock recorder for MockProcessLabelUpserter.
type MockProcessLabelUpserterMockRecorder struct {
	mock *MockProcessLabelUpserter
}

// NewMockProcessLabelUpserter creates a new mock instance.
func NewMockProcessLabelUpserter(ctrl *gomock.Controller) *MockProcessLabelUpserter {
	mock := &MockProcessLabelUpserter{ctrl: ctrl}
	mock.recorder = &MockProcessLabelUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessLabelUpserter) EXPECT() *MockProcessLabelUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockProcessLabelUpserter) Upsert(o *models.ProcessLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockProcessLabelUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockProcessLabelUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockProcessLabelDeleter is a mock of ProcessLabelDeleter interface.
type MockProcessLabelDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockProcessLabelDeleterMockRecorder
}

// MockProcessLabelDeleterMockRecorder is the mock recorder for MockProcessLabelDeleter.
type MockProcessLabelDeleterMockRecorder struct {
	mock *MockProcessLabelDeleter
}

// NewMockProcessLabelDeleter creates a new mock instance.
func NewMockProcessLabelDeleter(ctrl *gomock.Controller) *MockProcessLabelDeleter {
	mock := &MockProcessLabelDeleter{ctrl: ctrl}
	mock.recorder = &MockProcessLabelDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessLabelDeleter) EXPECT() *MockProcessLabelDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockProcessLabelDeleter) Delete(o *models.ProcessLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockProcessLabelDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProcessLabelDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockProcessLabelDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockProcessLabelDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockProcessLabelDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockProcessLabelDeleter) DeleteAllSlice(o models.ProcessLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockProcessLabelDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockProcessLabelDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockProcessLabelReloader is a mock of ProcessLabelReloader interface.
type MockProcessLabelReloader struct {
	ctrl     *gomock.Controller
	recorder *MockProcessLabelReloaderMockRecorder
}

// MockProcessLabelReloaderMockRecorder is the mock recorder for MockProcessLabelReloader.
type MockProcessLabelReloaderMockRecorder struct {
	mock *MockProcessLabelReloader
}

// NewMockProcessLabelReloader creates a new mock instance.
func NewMockProcessLabelReloader(ctrl *gomock.Controller) *MockProcessLabelReloader {
	mock := &MockProcessLabelReloader{ctrl: ctrl}
	mock.recorder = &MockProcessLabelReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessLabelReloader) EXPECT() *MockProcessLabelReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockProcessLabelReloader) Reload(o *models.ProcessLabel, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockProcessLabelReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockProcessLabelReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockProcessLabelReloader) ReloadAll(o *models.ProcessLabelSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockProcessLabelReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockProcessLabelReloader)(nil).ReloadAll), o, ctx, exec)
}
