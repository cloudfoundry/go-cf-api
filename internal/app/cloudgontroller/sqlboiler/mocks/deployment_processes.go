// Code generated by MockGen. DO NOT EDIT.
// Source: psql_deployment_processes.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockDeploymentProcessFinisher is a mock of DeploymentProcessFinisher interface.
type MockDeploymentProcessFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentProcessFinisherMockRecorder
}

// MockDeploymentProcessFinisherMockRecorder is the mock recorder for MockDeploymentProcessFinisher.
type MockDeploymentProcessFinisherMockRecorder struct {
	mock *MockDeploymentProcessFinisher
}

// NewMockDeploymentProcessFinisher creates a new mock instance.
func NewMockDeploymentProcessFinisher(ctrl *gomock.Controller) *MockDeploymentProcessFinisher {
	mock := &MockDeploymentProcessFinisher{ctrl: ctrl}
	mock.recorder = &MockDeploymentProcessFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentProcessFinisher) EXPECT() *MockDeploymentProcessFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockDeploymentProcessFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.DeploymentProcessSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.DeploymentProcessSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockDeploymentProcessFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockDeploymentProcessFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockDeploymentProcessFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockDeploymentProcessFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockDeploymentProcessFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockDeploymentProcessFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockDeploymentProcessFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockDeploymentProcessFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockDeploymentProcessFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.DeploymentProcess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.DeploymentProcess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockDeploymentProcessFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockDeploymentProcessFinisher)(nil).One), ctx, exec)
}

// MockDeploymentProcessFinder is a mock of DeploymentProcessFinder interface.
type MockDeploymentProcessFinder struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentProcessFinderMockRecorder
}

// MockDeploymentProcessFinderMockRecorder is the mock recorder for MockDeploymentProcessFinder.
type MockDeploymentProcessFinderMockRecorder struct {
	mock *MockDeploymentProcessFinder
}

// NewMockDeploymentProcessFinder creates a new mock instance.
func NewMockDeploymentProcessFinder(ctrl *gomock.Controller) *MockDeploymentProcessFinder {
	mock := &MockDeploymentProcessFinder{ctrl: ctrl}
	mock.recorder = &MockDeploymentProcessFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentProcessFinder) EXPECT() *MockDeploymentProcessFinderMockRecorder {
	return m.recorder
}

// FindDeploymentProcess mocks base method.
func (m *MockDeploymentProcessFinder) FindDeploymentProcess(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.DeploymentProcess, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindDeploymentProcess", varargs...)
	ret0, _ := ret[0].(*models.DeploymentProcess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDeploymentProcess indicates an expected call of FindDeploymentProcess.
func (mr *MockDeploymentProcessFinderMockRecorder) FindDeploymentProcess(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDeploymentProcess", reflect.TypeOf((*MockDeploymentProcessFinder)(nil).FindDeploymentProcess), varargs...)
}

// MockDeploymentProcessInserter is a mock of DeploymentProcessInserter interface.
type MockDeploymentProcessInserter struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentProcessInserterMockRecorder
}

// MockDeploymentProcessInserterMockRecorder is the mock recorder for MockDeploymentProcessInserter.
type MockDeploymentProcessInserterMockRecorder struct {
	mock *MockDeploymentProcessInserter
}

// NewMockDeploymentProcessInserter creates a new mock instance.
func NewMockDeploymentProcessInserter(ctrl *gomock.Controller) *MockDeploymentProcessInserter {
	mock := &MockDeploymentProcessInserter{ctrl: ctrl}
	mock.recorder = &MockDeploymentProcessInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentProcessInserter) EXPECT() *MockDeploymentProcessInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockDeploymentProcessInserter) Insert(o *models.DeploymentProcess, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockDeploymentProcessInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDeploymentProcessInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockDeploymentProcessUpdater is a mock of DeploymentProcessUpdater interface.
type MockDeploymentProcessUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentProcessUpdaterMockRecorder
}

// MockDeploymentProcessUpdaterMockRecorder is the mock recorder for MockDeploymentProcessUpdater.
type MockDeploymentProcessUpdaterMockRecorder struct {
	mock *MockDeploymentProcessUpdater
}

// NewMockDeploymentProcessUpdater creates a new mock instance.
func NewMockDeploymentProcessUpdater(ctrl *gomock.Controller) *MockDeploymentProcessUpdater {
	mock := &MockDeploymentProcessUpdater{ctrl: ctrl}
	mock.recorder = &MockDeploymentProcessUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentProcessUpdater) EXPECT() *MockDeploymentProcessUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockDeploymentProcessUpdater) Update(o *models.DeploymentProcess, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDeploymentProcessUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDeploymentProcessUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockDeploymentProcessUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockDeploymentProcessUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockDeploymentProcessUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockDeploymentProcessUpdater) UpdateAllSlice(o models.DeploymentProcessSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockDeploymentProcessUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockDeploymentProcessUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockDeploymentProcessDeleter is a mock of DeploymentProcessDeleter interface.
type MockDeploymentProcessDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentProcessDeleterMockRecorder
}

// MockDeploymentProcessDeleterMockRecorder is the mock recorder for MockDeploymentProcessDeleter.
type MockDeploymentProcessDeleterMockRecorder struct {
	mock *MockDeploymentProcessDeleter
}

// NewMockDeploymentProcessDeleter creates a new mock instance.
func NewMockDeploymentProcessDeleter(ctrl *gomock.Controller) *MockDeploymentProcessDeleter {
	mock := &MockDeploymentProcessDeleter{ctrl: ctrl}
	mock.recorder = &MockDeploymentProcessDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentProcessDeleter) EXPECT() *MockDeploymentProcessDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDeploymentProcessDeleter) Delete(o *models.DeploymentProcess, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDeploymentProcessDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeploymentProcessDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockDeploymentProcessDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockDeploymentProcessDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockDeploymentProcessDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockDeploymentProcessDeleter) DeleteAllSlice(o models.DeploymentProcessSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockDeploymentProcessDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockDeploymentProcessDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockDeploymentProcessReloader is a mock of DeploymentProcessReloader interface.
type MockDeploymentProcessReloader struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentProcessReloaderMockRecorder
}

// MockDeploymentProcessReloaderMockRecorder is the mock recorder for MockDeploymentProcessReloader.
type MockDeploymentProcessReloaderMockRecorder struct {
	mock *MockDeploymentProcessReloader
}

// NewMockDeploymentProcessReloader creates a new mock instance.
func NewMockDeploymentProcessReloader(ctrl *gomock.Controller) *MockDeploymentProcessReloader {
	mock := &MockDeploymentProcessReloader{ctrl: ctrl}
	mock.recorder = &MockDeploymentProcessReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentProcessReloader) EXPECT() *MockDeploymentProcessReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockDeploymentProcessReloader) Reload(o *models.DeploymentProcess, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockDeploymentProcessReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockDeploymentProcessReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockDeploymentProcessReloader) ReloadAll(o *models.DeploymentProcessSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockDeploymentProcessReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockDeploymentProcessReloader)(nil).ReloadAll), o, ctx, exec)
}
