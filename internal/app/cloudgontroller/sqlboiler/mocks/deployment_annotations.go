// Code generated by MockGen. DO NOT EDIT.
// Source: psql_deployment_annotations.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockDeploymentAnnotationFinisher is a mock of DeploymentAnnotationFinisher interface.
type MockDeploymentAnnotationFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentAnnotationFinisherMockRecorder
}

// MockDeploymentAnnotationFinisherMockRecorder is the mock recorder for MockDeploymentAnnotationFinisher.
type MockDeploymentAnnotationFinisherMockRecorder struct {
	mock *MockDeploymentAnnotationFinisher
}

// NewMockDeploymentAnnotationFinisher creates a new mock instance.
func NewMockDeploymentAnnotationFinisher(ctrl *gomock.Controller) *MockDeploymentAnnotationFinisher {
	mock := &MockDeploymentAnnotationFinisher{ctrl: ctrl}
	mock.recorder = &MockDeploymentAnnotationFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentAnnotationFinisher) EXPECT() *MockDeploymentAnnotationFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockDeploymentAnnotationFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.DeploymentAnnotationSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.DeploymentAnnotationSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockDeploymentAnnotationFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockDeploymentAnnotationFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockDeploymentAnnotationFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockDeploymentAnnotationFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockDeploymentAnnotationFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockDeploymentAnnotationFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockDeploymentAnnotationFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockDeploymentAnnotationFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockDeploymentAnnotationFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.DeploymentAnnotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.DeploymentAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockDeploymentAnnotationFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockDeploymentAnnotationFinisher)(nil).One), ctx, exec)
}

// MockDeploymentAnnotationFinder is a mock of DeploymentAnnotationFinder interface.
type MockDeploymentAnnotationFinder struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentAnnotationFinderMockRecorder
}

// MockDeploymentAnnotationFinderMockRecorder is the mock recorder for MockDeploymentAnnotationFinder.
type MockDeploymentAnnotationFinderMockRecorder struct {
	mock *MockDeploymentAnnotationFinder
}

// NewMockDeploymentAnnotationFinder creates a new mock instance.
func NewMockDeploymentAnnotationFinder(ctrl *gomock.Controller) *MockDeploymentAnnotationFinder {
	mock := &MockDeploymentAnnotationFinder{ctrl: ctrl}
	mock.recorder = &MockDeploymentAnnotationFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentAnnotationFinder) EXPECT() *MockDeploymentAnnotationFinderMockRecorder {
	return m.recorder
}

// FindDeploymentAnnotation mocks base method.
func (m *MockDeploymentAnnotationFinder) FindDeploymentAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.DeploymentAnnotation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindDeploymentAnnotation", varargs...)
	ret0, _ := ret[0].(*models.DeploymentAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDeploymentAnnotation indicates an expected call of FindDeploymentAnnotation.
func (mr *MockDeploymentAnnotationFinderMockRecorder) FindDeploymentAnnotation(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDeploymentAnnotation", reflect.TypeOf((*MockDeploymentAnnotationFinder)(nil).FindDeploymentAnnotation), varargs...)
}

// MockDeploymentAnnotationInserter is a mock of DeploymentAnnotationInserter interface.
type MockDeploymentAnnotationInserter struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentAnnotationInserterMockRecorder
}

// MockDeploymentAnnotationInserterMockRecorder is the mock recorder for MockDeploymentAnnotationInserter.
type MockDeploymentAnnotationInserterMockRecorder struct {
	mock *MockDeploymentAnnotationInserter
}

// NewMockDeploymentAnnotationInserter creates a new mock instance.
func NewMockDeploymentAnnotationInserter(ctrl *gomock.Controller) *MockDeploymentAnnotationInserter {
	mock := &MockDeploymentAnnotationInserter{ctrl: ctrl}
	mock.recorder = &MockDeploymentAnnotationInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentAnnotationInserter) EXPECT() *MockDeploymentAnnotationInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockDeploymentAnnotationInserter) Insert(o *models.DeploymentAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockDeploymentAnnotationInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDeploymentAnnotationInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockDeploymentAnnotationUpdater is a mock of DeploymentAnnotationUpdater interface.
type MockDeploymentAnnotationUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentAnnotationUpdaterMockRecorder
}

// MockDeploymentAnnotationUpdaterMockRecorder is the mock recorder for MockDeploymentAnnotationUpdater.
type MockDeploymentAnnotationUpdaterMockRecorder struct {
	mock *MockDeploymentAnnotationUpdater
}

// NewMockDeploymentAnnotationUpdater creates a new mock instance.
func NewMockDeploymentAnnotationUpdater(ctrl *gomock.Controller) *MockDeploymentAnnotationUpdater {
	mock := &MockDeploymentAnnotationUpdater{ctrl: ctrl}
	mock.recorder = &MockDeploymentAnnotationUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentAnnotationUpdater) EXPECT() *MockDeploymentAnnotationUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockDeploymentAnnotationUpdater) Update(o *models.DeploymentAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDeploymentAnnotationUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDeploymentAnnotationUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockDeploymentAnnotationUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockDeploymentAnnotationUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockDeploymentAnnotationUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockDeploymentAnnotationUpdater) UpdateAllSlice(o models.DeploymentAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockDeploymentAnnotationUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockDeploymentAnnotationUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockDeploymentAnnotationUpserter is a mock of DeploymentAnnotationUpserter interface.
type MockDeploymentAnnotationUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentAnnotationUpserterMockRecorder
}

// MockDeploymentAnnotationUpserterMockRecorder is the mock recorder for MockDeploymentAnnotationUpserter.
type MockDeploymentAnnotationUpserterMockRecorder struct {
	mock *MockDeploymentAnnotationUpserter
}

// NewMockDeploymentAnnotationUpserter creates a new mock instance.
func NewMockDeploymentAnnotationUpserter(ctrl *gomock.Controller) *MockDeploymentAnnotationUpserter {
	mock := &MockDeploymentAnnotationUpserter{ctrl: ctrl}
	mock.recorder = &MockDeploymentAnnotationUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentAnnotationUpserter) EXPECT() *MockDeploymentAnnotationUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockDeploymentAnnotationUpserter) Upsert(o *models.DeploymentAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockDeploymentAnnotationUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockDeploymentAnnotationUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockDeploymentAnnotationDeleter is a mock of DeploymentAnnotationDeleter interface.
type MockDeploymentAnnotationDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentAnnotationDeleterMockRecorder
}

// MockDeploymentAnnotationDeleterMockRecorder is the mock recorder for MockDeploymentAnnotationDeleter.
type MockDeploymentAnnotationDeleterMockRecorder struct {
	mock *MockDeploymentAnnotationDeleter
}

// NewMockDeploymentAnnotationDeleter creates a new mock instance.
func NewMockDeploymentAnnotationDeleter(ctrl *gomock.Controller) *MockDeploymentAnnotationDeleter {
	mock := &MockDeploymentAnnotationDeleter{ctrl: ctrl}
	mock.recorder = &MockDeploymentAnnotationDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentAnnotationDeleter) EXPECT() *MockDeploymentAnnotationDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDeploymentAnnotationDeleter) Delete(o *models.DeploymentAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDeploymentAnnotationDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeploymentAnnotationDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockDeploymentAnnotationDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockDeploymentAnnotationDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockDeploymentAnnotationDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockDeploymentAnnotationDeleter) DeleteAllSlice(o models.DeploymentAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockDeploymentAnnotationDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockDeploymentAnnotationDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockDeploymentAnnotationReloader is a mock of DeploymentAnnotationReloader interface.
type MockDeploymentAnnotationReloader struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentAnnotationReloaderMockRecorder
}

// MockDeploymentAnnotationReloaderMockRecorder is the mock recorder for MockDeploymentAnnotationReloader.
type MockDeploymentAnnotationReloaderMockRecorder struct {
	mock *MockDeploymentAnnotationReloader
}

// NewMockDeploymentAnnotationReloader creates a new mock instance.
func NewMockDeploymentAnnotationReloader(ctrl *gomock.Controller) *MockDeploymentAnnotationReloader {
	mock := &MockDeploymentAnnotationReloader{ctrl: ctrl}
	mock.recorder = &MockDeploymentAnnotationReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentAnnotationReloader) EXPECT() *MockDeploymentAnnotationReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockDeploymentAnnotationReloader) Reload(o *models.DeploymentAnnotation, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockDeploymentAnnotationReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockDeploymentAnnotationReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockDeploymentAnnotationReloader) ReloadAll(o *models.DeploymentAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockDeploymentAnnotationReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockDeploymentAnnotationReloader)(nil).ReloadAll), o, ctx, exec)
}
