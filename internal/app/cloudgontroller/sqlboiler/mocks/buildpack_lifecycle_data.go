// +build unit

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_buildpack_lifecycle_data.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockBuildpackLifecycleDatumFinisher is a mock of BuildpackLifecycleDatumFinisher interface.
type MockBuildpackLifecycleDatumFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackLifecycleDatumFinisherMockRecorder
}

// MockBuildpackLifecycleDatumFinisherMockRecorder is the mock recorder for MockBuildpackLifecycleDatumFinisher.
type MockBuildpackLifecycleDatumFinisherMockRecorder struct {
	mock *MockBuildpackLifecycleDatumFinisher
}

// NewMockBuildpackLifecycleDatumFinisher creates a new mock instance.
func NewMockBuildpackLifecycleDatumFinisher(ctrl *gomock.Controller) *MockBuildpackLifecycleDatumFinisher {
	mock := &MockBuildpackLifecycleDatumFinisher{ctrl: ctrl}
	mock.recorder = &MockBuildpackLifecycleDatumFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildpackLifecycleDatumFinisher) EXPECT() *MockBuildpackLifecycleDatumFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockBuildpackLifecycleDatumFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.BuildpackLifecycleDatumSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.BuildpackLifecycleDatumSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockBuildpackLifecycleDatumFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockBuildpackLifecycleDatumFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockBuildpackLifecycleDatumFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockBuildpackLifecycleDatumFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockBuildpackLifecycleDatumFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockBuildpackLifecycleDatumFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockBuildpackLifecycleDatumFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockBuildpackLifecycleDatumFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockBuildpackLifecycleDatumFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.BuildpackLifecycleDatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.BuildpackLifecycleDatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockBuildpackLifecycleDatumFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockBuildpackLifecycleDatumFinisher)(nil).One), ctx, exec)
}

// MockBuildpackLifecycleDatumFinder is a mock of BuildpackLifecycleDatumFinder interface.
type MockBuildpackLifecycleDatumFinder struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackLifecycleDatumFinderMockRecorder
}

// MockBuildpackLifecycleDatumFinderMockRecorder is the mock recorder for MockBuildpackLifecycleDatumFinder.
type MockBuildpackLifecycleDatumFinderMockRecorder struct {
	mock *MockBuildpackLifecycleDatumFinder
}

// NewMockBuildpackLifecycleDatumFinder creates a new mock instance.
func NewMockBuildpackLifecycleDatumFinder(ctrl *gomock.Controller) *MockBuildpackLifecycleDatumFinder {
	mock := &MockBuildpackLifecycleDatumFinder{ctrl: ctrl}
	mock.recorder = &MockBuildpackLifecycleDatumFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildpackLifecycleDatumFinder) EXPECT() *MockBuildpackLifecycleDatumFinderMockRecorder {
	return m.recorder
}

// FindBuildpackLifecycleDatum mocks base method.
func (m *MockBuildpackLifecycleDatumFinder) FindBuildpackLifecycleDatum(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.BuildpackLifecycleDatum, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindBuildpackLifecycleDatum", varargs...)
	ret0, _ := ret[0].(*models.BuildpackLifecycleDatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBuildpackLifecycleDatum indicates an expected call of FindBuildpackLifecycleDatum.
func (mr *MockBuildpackLifecycleDatumFinderMockRecorder) FindBuildpackLifecycleDatum(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBuildpackLifecycleDatum", reflect.TypeOf((*MockBuildpackLifecycleDatumFinder)(nil).FindBuildpackLifecycleDatum), varargs...)
}

// MockBuildpackLifecycleDatumInserter is a mock of BuildpackLifecycleDatumInserter interface.
type MockBuildpackLifecycleDatumInserter struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackLifecycleDatumInserterMockRecorder
}

// MockBuildpackLifecycleDatumInserterMockRecorder is the mock recorder for MockBuildpackLifecycleDatumInserter.
type MockBuildpackLifecycleDatumInserterMockRecorder struct {
	mock *MockBuildpackLifecycleDatumInserter
}

// NewMockBuildpackLifecycleDatumInserter creates a new mock instance.
func NewMockBuildpackLifecycleDatumInserter(ctrl *gomock.Controller) *MockBuildpackLifecycleDatumInserter {
	mock := &MockBuildpackLifecycleDatumInserter{ctrl: ctrl}
	mock.recorder = &MockBuildpackLifecycleDatumInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildpackLifecycleDatumInserter) EXPECT() *MockBuildpackLifecycleDatumInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockBuildpackLifecycleDatumInserter) Insert(o *models.BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockBuildpackLifecycleDatumInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockBuildpackLifecycleDatumInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockBuildpackLifecycleDatumUpdater is a mock of BuildpackLifecycleDatumUpdater interface.
type MockBuildpackLifecycleDatumUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackLifecycleDatumUpdaterMockRecorder
}

// MockBuildpackLifecycleDatumUpdaterMockRecorder is the mock recorder for MockBuildpackLifecycleDatumUpdater.
type MockBuildpackLifecycleDatumUpdaterMockRecorder struct {
	mock *MockBuildpackLifecycleDatumUpdater
}

// NewMockBuildpackLifecycleDatumUpdater creates a new mock instance.
func NewMockBuildpackLifecycleDatumUpdater(ctrl *gomock.Controller) *MockBuildpackLifecycleDatumUpdater {
	mock := &MockBuildpackLifecycleDatumUpdater{ctrl: ctrl}
	mock.recorder = &MockBuildpackLifecycleDatumUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildpackLifecycleDatumUpdater) EXPECT() *MockBuildpackLifecycleDatumUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockBuildpackLifecycleDatumUpdater) Update(o *models.BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBuildpackLifecycleDatumUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBuildpackLifecycleDatumUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockBuildpackLifecycleDatumUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockBuildpackLifecycleDatumUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockBuildpackLifecycleDatumUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockBuildpackLifecycleDatumUpdater) UpdateAllSlice(o models.BuildpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockBuildpackLifecycleDatumUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockBuildpackLifecycleDatumUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockBuildpackLifecycleDatumUpserter is a mock of BuildpackLifecycleDatumUpserter interface.
type MockBuildpackLifecycleDatumUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackLifecycleDatumUpserterMockRecorder
}

// MockBuildpackLifecycleDatumUpserterMockRecorder is the mock recorder for MockBuildpackLifecycleDatumUpserter.
type MockBuildpackLifecycleDatumUpserterMockRecorder struct {
	mock *MockBuildpackLifecycleDatumUpserter
}

// NewMockBuildpackLifecycleDatumUpserter creates a new mock instance.
func NewMockBuildpackLifecycleDatumUpserter(ctrl *gomock.Controller) *MockBuildpackLifecycleDatumUpserter {
	mock := &MockBuildpackLifecycleDatumUpserter{ctrl: ctrl}
	mock.recorder = &MockBuildpackLifecycleDatumUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildpackLifecycleDatumUpserter) EXPECT() *MockBuildpackLifecycleDatumUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockBuildpackLifecycleDatumUpserter) Upsert(o *models.BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockBuildpackLifecycleDatumUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockBuildpackLifecycleDatumUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockBuildpackLifecycleDatumDeleter is a mock of BuildpackLifecycleDatumDeleter interface.
type MockBuildpackLifecycleDatumDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackLifecycleDatumDeleterMockRecorder
}

// MockBuildpackLifecycleDatumDeleterMockRecorder is the mock recorder for MockBuildpackLifecycleDatumDeleter.
type MockBuildpackLifecycleDatumDeleterMockRecorder struct {
	mock *MockBuildpackLifecycleDatumDeleter
}

// NewMockBuildpackLifecycleDatumDeleter creates a new mock instance.
func NewMockBuildpackLifecycleDatumDeleter(ctrl *gomock.Controller) *MockBuildpackLifecycleDatumDeleter {
	mock := &MockBuildpackLifecycleDatumDeleter{ctrl: ctrl}
	mock.recorder = &MockBuildpackLifecycleDatumDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildpackLifecycleDatumDeleter) EXPECT() *MockBuildpackLifecycleDatumDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockBuildpackLifecycleDatumDeleter) Delete(o *models.BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockBuildpackLifecycleDatumDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBuildpackLifecycleDatumDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockBuildpackLifecycleDatumDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockBuildpackLifecycleDatumDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockBuildpackLifecycleDatumDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockBuildpackLifecycleDatumDeleter) DeleteAllSlice(o models.BuildpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockBuildpackLifecycleDatumDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockBuildpackLifecycleDatumDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockBuildpackLifecycleDatumReloader is a mock of BuildpackLifecycleDatumReloader interface.
type MockBuildpackLifecycleDatumReloader struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackLifecycleDatumReloaderMockRecorder
}

// MockBuildpackLifecycleDatumReloaderMockRecorder is the mock recorder for MockBuildpackLifecycleDatumReloader.
type MockBuildpackLifecycleDatumReloaderMockRecorder struct {
	mock *MockBuildpackLifecycleDatumReloader
}

// NewMockBuildpackLifecycleDatumReloader creates a new mock instance.
func NewMockBuildpackLifecycleDatumReloader(ctrl *gomock.Controller) *MockBuildpackLifecycleDatumReloader {
	mock := &MockBuildpackLifecycleDatumReloader{ctrl: ctrl}
	mock.recorder = &MockBuildpackLifecycleDatumReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildpackLifecycleDatumReloader) EXPECT() *MockBuildpackLifecycleDatumReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockBuildpackLifecycleDatumReloader) Reload(o *models.BuildpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockBuildpackLifecycleDatumReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockBuildpackLifecycleDatumReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockBuildpackLifecycleDatumReloader) ReloadAll(o *models.BuildpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockBuildpackLifecycleDatumReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockBuildpackLifecycleDatumReloader)(nil).ReloadAll), o, ctx, exec)
}
