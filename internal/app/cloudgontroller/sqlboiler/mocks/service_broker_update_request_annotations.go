// Code generated by MockGen. DO NOT EDIT.
// Source: psql_service_broker_update_request_annotations.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockServiceBrokerUpdateRequestAnnotationFinisher is a mock of ServiceBrokerUpdateRequestAnnotationFinisher interface.
type MockServiceBrokerUpdateRequestAnnotationFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBrokerUpdateRequestAnnotationFinisherMockRecorder
}

// MockServiceBrokerUpdateRequestAnnotationFinisherMockRecorder is the mock recorder for MockServiceBrokerUpdateRequestAnnotationFinisher.
type MockServiceBrokerUpdateRequestAnnotationFinisherMockRecorder struct {
	mock *MockServiceBrokerUpdateRequestAnnotationFinisher
}

// NewMockServiceBrokerUpdateRequestAnnotationFinisher creates a new mock instance.
func NewMockServiceBrokerUpdateRequestAnnotationFinisher(ctrl *gomock.Controller) *MockServiceBrokerUpdateRequestAnnotationFinisher {
	mock := &MockServiceBrokerUpdateRequestAnnotationFinisher{ctrl: ctrl}
	mock.recorder = &MockServiceBrokerUpdateRequestAnnotationFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBrokerUpdateRequestAnnotationFinisher) EXPECT() *MockServiceBrokerUpdateRequestAnnotationFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockServiceBrokerUpdateRequestAnnotationFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.ServiceBrokerUpdateRequestAnnotationSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.ServiceBrokerUpdateRequestAnnotationSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockServiceBrokerUpdateRequestAnnotationFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockServiceBrokerUpdateRequestAnnotationFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockServiceBrokerUpdateRequestAnnotationFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockServiceBrokerUpdateRequestAnnotationFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockServiceBrokerUpdateRequestAnnotationFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockServiceBrokerUpdateRequestAnnotationFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockServiceBrokerUpdateRequestAnnotationFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockServiceBrokerUpdateRequestAnnotationFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockServiceBrokerUpdateRequestAnnotationFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.ServiceBrokerUpdateRequestAnnotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.ServiceBrokerUpdateRequestAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockServiceBrokerUpdateRequestAnnotationFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockServiceBrokerUpdateRequestAnnotationFinisher)(nil).One), ctx, exec)
}

// MockServiceBrokerUpdateRequestAnnotationFinder is a mock of ServiceBrokerUpdateRequestAnnotationFinder interface.
type MockServiceBrokerUpdateRequestAnnotationFinder struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBrokerUpdateRequestAnnotationFinderMockRecorder
}

// MockServiceBrokerUpdateRequestAnnotationFinderMockRecorder is the mock recorder for MockServiceBrokerUpdateRequestAnnotationFinder.
type MockServiceBrokerUpdateRequestAnnotationFinderMockRecorder struct {
	mock *MockServiceBrokerUpdateRequestAnnotationFinder
}

// NewMockServiceBrokerUpdateRequestAnnotationFinder creates a new mock instance.
func NewMockServiceBrokerUpdateRequestAnnotationFinder(ctrl *gomock.Controller) *MockServiceBrokerUpdateRequestAnnotationFinder {
	mock := &MockServiceBrokerUpdateRequestAnnotationFinder{ctrl: ctrl}
	mock.recorder = &MockServiceBrokerUpdateRequestAnnotationFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBrokerUpdateRequestAnnotationFinder) EXPECT() *MockServiceBrokerUpdateRequestAnnotationFinderMockRecorder {
	return m.recorder
}

// FindServiceBrokerUpdateRequestAnnotation mocks base method.
func (m *MockServiceBrokerUpdateRequestAnnotationFinder) FindServiceBrokerUpdateRequestAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.ServiceBrokerUpdateRequestAnnotation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindServiceBrokerUpdateRequestAnnotation", varargs...)
	ret0, _ := ret[0].(*models.ServiceBrokerUpdateRequestAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindServiceBrokerUpdateRequestAnnotation indicates an expected call of FindServiceBrokerUpdateRequestAnnotation.
func (mr *MockServiceBrokerUpdateRequestAnnotationFinderMockRecorder) FindServiceBrokerUpdateRequestAnnotation(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindServiceBrokerUpdateRequestAnnotation", reflect.TypeOf((*MockServiceBrokerUpdateRequestAnnotationFinder)(nil).FindServiceBrokerUpdateRequestAnnotation), varargs...)
}

// MockServiceBrokerUpdateRequestAnnotationInserter is a mock of ServiceBrokerUpdateRequestAnnotationInserter interface.
type MockServiceBrokerUpdateRequestAnnotationInserter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBrokerUpdateRequestAnnotationInserterMockRecorder
}

// MockServiceBrokerUpdateRequestAnnotationInserterMockRecorder is the mock recorder for MockServiceBrokerUpdateRequestAnnotationInserter.
type MockServiceBrokerUpdateRequestAnnotationInserterMockRecorder struct {
	mock *MockServiceBrokerUpdateRequestAnnotationInserter
}

// NewMockServiceBrokerUpdateRequestAnnotationInserter creates a new mock instance.
func NewMockServiceBrokerUpdateRequestAnnotationInserter(ctrl *gomock.Controller) *MockServiceBrokerUpdateRequestAnnotationInserter {
	mock := &MockServiceBrokerUpdateRequestAnnotationInserter{ctrl: ctrl}
	mock.recorder = &MockServiceBrokerUpdateRequestAnnotationInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBrokerUpdateRequestAnnotationInserter) EXPECT() *MockServiceBrokerUpdateRequestAnnotationInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockServiceBrokerUpdateRequestAnnotationInserter) Insert(o *models.ServiceBrokerUpdateRequestAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockServiceBrokerUpdateRequestAnnotationInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockServiceBrokerUpdateRequestAnnotationInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockServiceBrokerUpdateRequestAnnotationUpdater is a mock of ServiceBrokerUpdateRequestAnnotationUpdater interface.
type MockServiceBrokerUpdateRequestAnnotationUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBrokerUpdateRequestAnnotationUpdaterMockRecorder
}

// MockServiceBrokerUpdateRequestAnnotationUpdaterMockRecorder is the mock recorder for MockServiceBrokerUpdateRequestAnnotationUpdater.
type MockServiceBrokerUpdateRequestAnnotationUpdaterMockRecorder struct {
	mock *MockServiceBrokerUpdateRequestAnnotationUpdater
}

// NewMockServiceBrokerUpdateRequestAnnotationUpdater creates a new mock instance.
func NewMockServiceBrokerUpdateRequestAnnotationUpdater(ctrl *gomock.Controller) *MockServiceBrokerUpdateRequestAnnotationUpdater {
	mock := &MockServiceBrokerUpdateRequestAnnotationUpdater{ctrl: ctrl}
	mock.recorder = &MockServiceBrokerUpdateRequestAnnotationUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBrokerUpdateRequestAnnotationUpdater) EXPECT() *MockServiceBrokerUpdateRequestAnnotationUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockServiceBrokerUpdateRequestAnnotationUpdater) Update(o *models.ServiceBrokerUpdateRequestAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServiceBrokerUpdateRequestAnnotationUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceBrokerUpdateRequestAnnotationUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockServiceBrokerUpdateRequestAnnotationUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockServiceBrokerUpdateRequestAnnotationUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockServiceBrokerUpdateRequestAnnotationUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockServiceBrokerUpdateRequestAnnotationUpdater) UpdateAllSlice(o models.ServiceBrokerUpdateRequestAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockServiceBrokerUpdateRequestAnnotationUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockServiceBrokerUpdateRequestAnnotationUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockServiceBrokerUpdateRequestAnnotationDeleter is a mock of ServiceBrokerUpdateRequestAnnotationDeleter interface.
type MockServiceBrokerUpdateRequestAnnotationDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBrokerUpdateRequestAnnotationDeleterMockRecorder
}

// MockServiceBrokerUpdateRequestAnnotationDeleterMockRecorder is the mock recorder for MockServiceBrokerUpdateRequestAnnotationDeleter.
type MockServiceBrokerUpdateRequestAnnotationDeleterMockRecorder struct {
	mock *MockServiceBrokerUpdateRequestAnnotationDeleter
}

// NewMockServiceBrokerUpdateRequestAnnotationDeleter creates a new mock instance.
func NewMockServiceBrokerUpdateRequestAnnotationDeleter(ctrl *gomock.Controller) *MockServiceBrokerUpdateRequestAnnotationDeleter {
	mock := &MockServiceBrokerUpdateRequestAnnotationDeleter{ctrl: ctrl}
	mock.recorder = &MockServiceBrokerUpdateRequestAnnotationDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBrokerUpdateRequestAnnotationDeleter) EXPECT() *MockServiceBrokerUpdateRequestAnnotationDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockServiceBrokerUpdateRequestAnnotationDeleter) Delete(o *models.ServiceBrokerUpdateRequestAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceBrokerUpdateRequestAnnotationDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceBrokerUpdateRequestAnnotationDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockServiceBrokerUpdateRequestAnnotationDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockServiceBrokerUpdateRequestAnnotationDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockServiceBrokerUpdateRequestAnnotationDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockServiceBrokerUpdateRequestAnnotationDeleter) DeleteAllSlice(o models.ServiceBrokerUpdateRequestAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockServiceBrokerUpdateRequestAnnotationDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockServiceBrokerUpdateRequestAnnotationDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockServiceBrokerUpdateRequestAnnotationReloader is a mock of ServiceBrokerUpdateRequestAnnotationReloader interface.
type MockServiceBrokerUpdateRequestAnnotationReloader struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBrokerUpdateRequestAnnotationReloaderMockRecorder
}

// MockServiceBrokerUpdateRequestAnnotationReloaderMockRecorder is the mock recorder for MockServiceBrokerUpdateRequestAnnotationReloader.
type MockServiceBrokerUpdateRequestAnnotationReloaderMockRecorder struct {
	mock *MockServiceBrokerUpdateRequestAnnotationReloader
}

// NewMockServiceBrokerUpdateRequestAnnotationReloader creates a new mock instance.
func NewMockServiceBrokerUpdateRequestAnnotationReloader(ctrl *gomock.Controller) *MockServiceBrokerUpdateRequestAnnotationReloader {
	mock := &MockServiceBrokerUpdateRequestAnnotationReloader{ctrl: ctrl}
	mock.recorder = &MockServiceBrokerUpdateRequestAnnotationReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBrokerUpdateRequestAnnotationReloader) EXPECT() *MockServiceBrokerUpdateRequestAnnotationReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockServiceBrokerUpdateRequestAnnotationReloader) Reload(o *models.ServiceBrokerUpdateRequestAnnotation, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockServiceBrokerUpdateRequestAnnotationReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockServiceBrokerUpdateRequestAnnotationReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockServiceBrokerUpdateRequestAnnotationReloader) ReloadAll(o *models.ServiceBrokerUpdateRequestAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockServiceBrokerUpdateRequestAnnotationReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockServiceBrokerUpdateRequestAnnotationReloader)(nil).ReloadAll), o, ctx, exec)
}
