// Code generated by MockGen. DO NOT EDIT.
// Source: psql_user_labels.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockUserLabelFinisher is a mock of UserLabelFinisher interface.
type MockUserLabelFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockUserLabelFinisherMockRecorder
}

// MockUserLabelFinisherMockRecorder is the mock recorder for MockUserLabelFinisher.
type MockUserLabelFinisherMockRecorder struct {
	mock *MockUserLabelFinisher
}

// NewMockUserLabelFinisher creates a new mock instance.
func NewMockUserLabelFinisher(ctrl *gomock.Controller) *MockUserLabelFinisher {
	mock := &MockUserLabelFinisher{ctrl: ctrl}
	mock.recorder = &MockUserLabelFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLabelFinisher) EXPECT() *MockUserLabelFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockUserLabelFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.UserLabelSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.UserLabelSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockUserLabelFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockUserLabelFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockUserLabelFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockUserLabelFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockUserLabelFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockUserLabelFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockUserLabelFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockUserLabelFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockUserLabelFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.UserLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.UserLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockUserLabelFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockUserLabelFinisher)(nil).One), ctx, exec)
}

// MockUserLabelFinder is a mock of UserLabelFinder interface.
type MockUserLabelFinder struct {
	ctrl     *gomock.Controller
	recorder *MockUserLabelFinderMockRecorder
}

// MockUserLabelFinderMockRecorder is the mock recorder for MockUserLabelFinder.
type MockUserLabelFinderMockRecorder struct {
	mock *MockUserLabelFinder
}

// NewMockUserLabelFinder creates a new mock instance.
func NewMockUserLabelFinder(ctrl *gomock.Controller) *MockUserLabelFinder {
	mock := &MockUserLabelFinder{ctrl: ctrl}
	mock.recorder = &MockUserLabelFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLabelFinder) EXPECT() *MockUserLabelFinderMockRecorder {
	return m.recorder
}

// FindUserLabel mocks base method.
func (m *MockUserLabelFinder) FindUserLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.UserLabel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindUserLabel", varargs...)
	ret0, _ := ret[0].(*models.UserLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserLabel indicates an expected call of FindUserLabel.
func (mr *MockUserLabelFinderMockRecorder) FindUserLabel(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserLabel", reflect.TypeOf((*MockUserLabelFinder)(nil).FindUserLabel), varargs...)
}

// MockUserLabelInserter is a mock of UserLabelInserter interface.
type MockUserLabelInserter struct {
	ctrl     *gomock.Controller
	recorder *MockUserLabelInserterMockRecorder
}

// MockUserLabelInserterMockRecorder is the mock recorder for MockUserLabelInserter.
type MockUserLabelInserterMockRecorder struct {
	mock *MockUserLabelInserter
}

// NewMockUserLabelInserter creates a new mock instance.
func NewMockUserLabelInserter(ctrl *gomock.Controller) *MockUserLabelInserter {
	mock := &MockUserLabelInserter{ctrl: ctrl}
	mock.recorder = &MockUserLabelInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLabelInserter) EXPECT() *MockUserLabelInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockUserLabelInserter) Insert(o *models.UserLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockUserLabelInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserLabelInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockUserLabelUpdater is a mock of UserLabelUpdater interface.
type MockUserLabelUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockUserLabelUpdaterMockRecorder
}

// MockUserLabelUpdaterMockRecorder is the mock recorder for MockUserLabelUpdater.
type MockUserLabelUpdaterMockRecorder struct {
	mock *MockUserLabelUpdater
}

// NewMockUserLabelUpdater creates a new mock instance.
func NewMockUserLabelUpdater(ctrl *gomock.Controller) *MockUserLabelUpdater {
	mock := &MockUserLabelUpdater{ctrl: ctrl}
	mock.recorder = &MockUserLabelUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLabelUpdater) EXPECT() *MockUserLabelUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockUserLabelUpdater) Update(o *models.UserLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserLabelUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserLabelUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockUserLabelUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockUserLabelUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockUserLabelUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockUserLabelUpdater) UpdateAllSlice(o models.UserLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockUserLabelUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockUserLabelUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockUserLabelUpserter is a mock of UserLabelUpserter interface.
type MockUserLabelUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockUserLabelUpserterMockRecorder
}

// MockUserLabelUpserterMockRecorder is the mock recorder for MockUserLabelUpserter.
type MockUserLabelUpserterMockRecorder struct {
	mock *MockUserLabelUpserter
}

// NewMockUserLabelUpserter creates a new mock instance.
func NewMockUserLabelUpserter(ctrl *gomock.Controller) *MockUserLabelUpserter {
	mock := &MockUserLabelUpserter{ctrl: ctrl}
	mock.recorder = &MockUserLabelUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLabelUpserter) EXPECT() *MockUserLabelUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockUserLabelUpserter) Upsert(o *models.UserLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockUserLabelUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockUserLabelUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockUserLabelDeleter is a mock of UserLabelDeleter interface.
type MockUserLabelDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockUserLabelDeleterMockRecorder
}

// MockUserLabelDeleterMockRecorder is the mock recorder for MockUserLabelDeleter.
type MockUserLabelDeleterMockRecorder struct {
	mock *MockUserLabelDeleter
}

// NewMockUserLabelDeleter creates a new mock instance.
func NewMockUserLabelDeleter(ctrl *gomock.Controller) *MockUserLabelDeleter {
	mock := &MockUserLabelDeleter{ctrl: ctrl}
	mock.recorder = &MockUserLabelDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLabelDeleter) EXPECT() *MockUserLabelDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockUserLabelDeleter) Delete(o *models.UserLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockUserLabelDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserLabelDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockUserLabelDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockUserLabelDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockUserLabelDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockUserLabelDeleter) DeleteAllSlice(o models.UserLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockUserLabelDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockUserLabelDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockUserLabelReloader is a mock of UserLabelReloader interface.
type MockUserLabelReloader struct {
	ctrl     *gomock.Controller
	recorder *MockUserLabelReloaderMockRecorder
}

// MockUserLabelReloaderMockRecorder is the mock recorder for MockUserLabelReloader.
type MockUserLabelReloaderMockRecorder struct {
	mock *MockUserLabelReloader
}

// NewMockUserLabelReloader creates a new mock instance.
func NewMockUserLabelReloader(ctrl *gomock.Controller) *MockUserLabelReloader {
	mock := &MockUserLabelReloader{ctrl: ctrl}
	mock.recorder = &MockUserLabelReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLabelReloader) EXPECT() *MockUserLabelReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockUserLabelReloader) Reload(o *models.UserLabel, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockUserLabelReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockUserLabelReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockUserLabelReloader) ReloadAll(o *models.UserLabelSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockUserLabelReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockUserLabelReloader)(nil).ReloadAll), o, ctx, exec)
}
