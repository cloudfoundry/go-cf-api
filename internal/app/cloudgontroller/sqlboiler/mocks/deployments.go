// Code generated by MockGen. DO NOT EDIT.
// Source: psql_deployments.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockDeploymentFinisher is a mock of DeploymentFinisher interface.
type MockDeploymentFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentFinisherMockRecorder
}

// MockDeploymentFinisherMockRecorder is the mock recorder for MockDeploymentFinisher.
type MockDeploymentFinisherMockRecorder struct {
	mock *MockDeploymentFinisher
}

// NewMockDeploymentFinisher creates a new mock instance.
func NewMockDeploymentFinisher(ctrl *gomock.Controller) *MockDeploymentFinisher {
	mock := &MockDeploymentFinisher{ctrl: ctrl}
	mock.recorder = &MockDeploymentFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentFinisher) EXPECT() *MockDeploymentFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockDeploymentFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.DeploymentSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.DeploymentSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockDeploymentFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockDeploymentFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockDeploymentFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockDeploymentFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockDeploymentFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockDeploymentFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockDeploymentFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockDeploymentFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockDeploymentFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockDeploymentFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockDeploymentFinisher)(nil).One), ctx, exec)
}

// MockDeploymentFinder is a mock of DeploymentFinder interface.
type MockDeploymentFinder struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentFinderMockRecorder
}

// MockDeploymentFinderMockRecorder is the mock recorder for MockDeploymentFinder.
type MockDeploymentFinderMockRecorder struct {
	mock *MockDeploymentFinder
}

// NewMockDeploymentFinder creates a new mock instance.
func NewMockDeploymentFinder(ctrl *gomock.Controller) *MockDeploymentFinder {
	mock := &MockDeploymentFinder{ctrl: ctrl}
	mock.recorder = &MockDeploymentFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentFinder) EXPECT() *MockDeploymentFinderMockRecorder {
	return m.recorder
}

// FindDeployment mocks base method.
func (m *MockDeploymentFinder) FindDeployment(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.Deployment, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindDeployment", varargs...)
	ret0, _ := ret[0].(*models.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDeployment indicates an expected call of FindDeployment.
func (mr *MockDeploymentFinderMockRecorder) FindDeployment(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDeployment", reflect.TypeOf((*MockDeploymentFinder)(nil).FindDeployment), varargs...)
}

// MockDeploymentInserter is a mock of DeploymentInserter interface.
type MockDeploymentInserter struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentInserterMockRecorder
}

// MockDeploymentInserterMockRecorder is the mock recorder for MockDeploymentInserter.
type MockDeploymentInserterMockRecorder struct {
	mock *MockDeploymentInserter
}

// NewMockDeploymentInserter creates a new mock instance.
func NewMockDeploymentInserter(ctrl *gomock.Controller) *MockDeploymentInserter {
	mock := &MockDeploymentInserter{ctrl: ctrl}
	mock.recorder = &MockDeploymentInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentInserter) EXPECT() *MockDeploymentInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockDeploymentInserter) Insert(o *models.Deployment, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockDeploymentInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDeploymentInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockDeploymentUpdater is a mock of DeploymentUpdater interface.
type MockDeploymentUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentUpdaterMockRecorder
}

// MockDeploymentUpdaterMockRecorder is the mock recorder for MockDeploymentUpdater.
type MockDeploymentUpdaterMockRecorder struct {
	mock *MockDeploymentUpdater
}

// NewMockDeploymentUpdater creates a new mock instance.
func NewMockDeploymentUpdater(ctrl *gomock.Controller) *MockDeploymentUpdater {
	mock := &MockDeploymentUpdater{ctrl: ctrl}
	mock.recorder = &MockDeploymentUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentUpdater) EXPECT() *MockDeploymentUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockDeploymentUpdater) Update(o *models.Deployment, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDeploymentUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDeploymentUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockDeploymentUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockDeploymentUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockDeploymentUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockDeploymentUpdater) UpdateAllSlice(o models.DeploymentSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockDeploymentUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockDeploymentUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockDeploymentDeleter is a mock of DeploymentDeleter interface.
type MockDeploymentDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentDeleterMockRecorder
}

// MockDeploymentDeleterMockRecorder is the mock recorder for MockDeploymentDeleter.
type MockDeploymentDeleterMockRecorder struct {
	mock *MockDeploymentDeleter
}

// NewMockDeploymentDeleter creates a new mock instance.
func NewMockDeploymentDeleter(ctrl *gomock.Controller) *MockDeploymentDeleter {
	mock := &MockDeploymentDeleter{ctrl: ctrl}
	mock.recorder = &MockDeploymentDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentDeleter) EXPECT() *MockDeploymentDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDeploymentDeleter) Delete(o *models.Deployment, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDeploymentDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeploymentDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockDeploymentDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockDeploymentDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockDeploymentDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockDeploymentDeleter) DeleteAllSlice(o models.DeploymentSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockDeploymentDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockDeploymentDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockDeploymentReloader is a mock of DeploymentReloader interface.
type MockDeploymentReloader struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentReloaderMockRecorder
}

// MockDeploymentReloaderMockRecorder is the mock recorder for MockDeploymentReloader.
type MockDeploymentReloaderMockRecorder struct {
	mock *MockDeploymentReloader
}

// NewMockDeploymentReloader creates a new mock instance.
func NewMockDeploymentReloader(ctrl *gomock.Controller) *MockDeploymentReloader {
	mock := &MockDeploymentReloader{ctrl: ctrl}
	mock.recorder = &MockDeploymentReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentReloader) EXPECT() *MockDeploymentReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockDeploymentReloader) Reload(o *models.Deployment, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockDeploymentReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockDeploymentReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockDeploymentReloader) ReloadAll(o *models.DeploymentSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockDeploymentReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockDeploymentReloader)(nil).ReloadAll), o, ctx, exec)
}
