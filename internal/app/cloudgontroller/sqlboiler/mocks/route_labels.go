// Code generated by MockGen. DO NOT EDIT.
// Source: psql_route_labels.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockRouteLabelFinisher is a mock of RouteLabelFinisher interface.
type MockRouteLabelFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockRouteLabelFinisherMockRecorder
}

// MockRouteLabelFinisherMockRecorder is the mock recorder for MockRouteLabelFinisher.
type MockRouteLabelFinisherMockRecorder struct {
	mock *MockRouteLabelFinisher
}

// NewMockRouteLabelFinisher creates a new mock instance.
func NewMockRouteLabelFinisher(ctrl *gomock.Controller) *MockRouteLabelFinisher {
	mock := &MockRouteLabelFinisher{ctrl: ctrl}
	mock.recorder = &MockRouteLabelFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteLabelFinisher) EXPECT() *MockRouteLabelFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockRouteLabelFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.RouteLabelSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.RouteLabelSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockRouteLabelFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockRouteLabelFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockRouteLabelFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockRouteLabelFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRouteLabelFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockRouteLabelFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockRouteLabelFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRouteLabelFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockRouteLabelFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.RouteLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.RouteLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockRouteLabelFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockRouteLabelFinisher)(nil).One), ctx, exec)
}

// MockRouteLabelFinder is a mock of RouteLabelFinder interface.
type MockRouteLabelFinder struct {
	ctrl     *gomock.Controller
	recorder *MockRouteLabelFinderMockRecorder
}

// MockRouteLabelFinderMockRecorder is the mock recorder for MockRouteLabelFinder.
type MockRouteLabelFinderMockRecorder struct {
	mock *MockRouteLabelFinder
}

// NewMockRouteLabelFinder creates a new mock instance.
func NewMockRouteLabelFinder(ctrl *gomock.Controller) *MockRouteLabelFinder {
	mock := &MockRouteLabelFinder{ctrl: ctrl}
	mock.recorder = &MockRouteLabelFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteLabelFinder) EXPECT() *MockRouteLabelFinderMockRecorder {
	return m.recorder
}

// FindRouteLabel mocks base method.
func (m *MockRouteLabelFinder) FindRouteLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.RouteLabel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindRouteLabel", varargs...)
	ret0, _ := ret[0].(*models.RouteLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteLabel indicates an expected call of FindRouteLabel.
func (mr *MockRouteLabelFinderMockRecorder) FindRouteLabel(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteLabel", reflect.TypeOf((*MockRouteLabelFinder)(nil).FindRouteLabel), varargs...)
}

// MockRouteLabelInserter is a mock of RouteLabelInserter interface.
type MockRouteLabelInserter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteLabelInserterMockRecorder
}

// MockRouteLabelInserterMockRecorder is the mock recorder for MockRouteLabelInserter.
type MockRouteLabelInserterMockRecorder struct {
	mock *MockRouteLabelInserter
}

// NewMockRouteLabelInserter creates a new mock instance.
func NewMockRouteLabelInserter(ctrl *gomock.Controller) *MockRouteLabelInserter {
	mock := &MockRouteLabelInserter{ctrl: ctrl}
	mock.recorder = &MockRouteLabelInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteLabelInserter) EXPECT() *MockRouteLabelInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockRouteLabelInserter) Insert(o *models.RouteLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockRouteLabelInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRouteLabelInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockRouteLabelUpdater is a mock of RouteLabelUpdater interface.
type MockRouteLabelUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockRouteLabelUpdaterMockRecorder
}

// MockRouteLabelUpdaterMockRecorder is the mock recorder for MockRouteLabelUpdater.
type MockRouteLabelUpdaterMockRecorder struct {
	mock *MockRouteLabelUpdater
}

// NewMockRouteLabelUpdater creates a new mock instance.
func NewMockRouteLabelUpdater(ctrl *gomock.Controller) *MockRouteLabelUpdater {
	mock := &MockRouteLabelUpdater{ctrl: ctrl}
	mock.recorder = &MockRouteLabelUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteLabelUpdater) EXPECT() *MockRouteLabelUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockRouteLabelUpdater) Update(o *models.RouteLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRouteLabelUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRouteLabelUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockRouteLabelUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockRouteLabelUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockRouteLabelUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockRouteLabelUpdater) UpdateAllSlice(o models.RouteLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockRouteLabelUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockRouteLabelUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockRouteLabelDeleter is a mock of RouteLabelDeleter interface.
type MockRouteLabelDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteLabelDeleterMockRecorder
}

// MockRouteLabelDeleterMockRecorder is the mock recorder for MockRouteLabelDeleter.
type MockRouteLabelDeleterMockRecorder struct {
	mock *MockRouteLabelDeleter
}

// NewMockRouteLabelDeleter creates a new mock instance.
func NewMockRouteLabelDeleter(ctrl *gomock.Controller) *MockRouteLabelDeleter {
	mock := &MockRouteLabelDeleter{ctrl: ctrl}
	mock.recorder = &MockRouteLabelDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteLabelDeleter) EXPECT() *MockRouteLabelDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRouteLabelDeleter) Delete(o *models.RouteLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRouteLabelDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRouteLabelDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockRouteLabelDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockRouteLabelDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockRouteLabelDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockRouteLabelDeleter) DeleteAllSlice(o models.RouteLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockRouteLabelDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockRouteLabelDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockRouteLabelReloader is a mock of RouteLabelReloader interface.
type MockRouteLabelReloader struct {
	ctrl     *gomock.Controller
	recorder *MockRouteLabelReloaderMockRecorder
}

// MockRouteLabelReloaderMockRecorder is the mock recorder for MockRouteLabelReloader.
type MockRouteLabelReloaderMockRecorder struct {
	mock *MockRouteLabelReloader
}

// NewMockRouteLabelReloader creates a new mock instance.
func NewMockRouteLabelReloader(ctrl *gomock.Controller) *MockRouteLabelReloader {
	mock := &MockRouteLabelReloader{ctrl: ctrl}
	mock.recorder = &MockRouteLabelReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteLabelReloader) EXPECT() *MockRouteLabelReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockRouteLabelReloader) Reload(o *models.RouteLabel, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockRouteLabelReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockRouteLabelReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockRouteLabelReloader) ReloadAll(o *models.RouteLabelSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockRouteLabelReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockRouteLabelReloader)(nil).ReloadAll), o, ctx, exec)
}
