// Code generated by MockGen. DO NOT EDIT.
// Source: psql_feature_flags.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockFeatureFlagFinisher is a mock of FeatureFlagFinisher interface.
type MockFeatureFlagFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureFlagFinisherMockRecorder
}

// MockFeatureFlagFinisherMockRecorder is the mock recorder for MockFeatureFlagFinisher.
type MockFeatureFlagFinisherMockRecorder struct {
	mock *MockFeatureFlagFinisher
}

// NewMockFeatureFlagFinisher creates a new mock instance.
func NewMockFeatureFlagFinisher(ctrl *gomock.Controller) *MockFeatureFlagFinisher {
	mock := &MockFeatureFlagFinisher{ctrl: ctrl}
	mock.recorder = &MockFeatureFlagFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureFlagFinisher) EXPECT() *MockFeatureFlagFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockFeatureFlagFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.FeatureFlagSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.FeatureFlagSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockFeatureFlagFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockFeatureFlagFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockFeatureFlagFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockFeatureFlagFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockFeatureFlagFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockFeatureFlagFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockFeatureFlagFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockFeatureFlagFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockFeatureFlagFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.FeatureFlag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.FeatureFlag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockFeatureFlagFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockFeatureFlagFinisher)(nil).One), ctx, exec)
}

// MockFeatureFlagFinder is a mock of FeatureFlagFinder interface.
type MockFeatureFlagFinder struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureFlagFinderMockRecorder
}

// MockFeatureFlagFinderMockRecorder is the mock recorder for MockFeatureFlagFinder.
type MockFeatureFlagFinderMockRecorder struct {
	mock *MockFeatureFlagFinder
}

// NewMockFeatureFlagFinder creates a new mock instance.
func NewMockFeatureFlagFinder(ctrl *gomock.Controller) *MockFeatureFlagFinder {
	mock := &MockFeatureFlagFinder{ctrl: ctrl}
	mock.recorder = &MockFeatureFlagFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureFlagFinder) EXPECT() *MockFeatureFlagFinderMockRecorder {
	return m.recorder
}

// FindFeatureFlag mocks base method.
func (m *MockFeatureFlagFinder) FindFeatureFlag(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.FeatureFlag, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindFeatureFlag", varargs...)
	ret0, _ := ret[0].(*models.FeatureFlag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFeatureFlag indicates an expected call of FindFeatureFlag.
func (mr *MockFeatureFlagFinderMockRecorder) FindFeatureFlag(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFeatureFlag", reflect.TypeOf((*MockFeatureFlagFinder)(nil).FindFeatureFlag), varargs...)
}

// MockFeatureFlagInserter is a mock of FeatureFlagInserter interface.
type MockFeatureFlagInserter struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureFlagInserterMockRecorder
}

// MockFeatureFlagInserterMockRecorder is the mock recorder for MockFeatureFlagInserter.
type MockFeatureFlagInserterMockRecorder struct {
	mock *MockFeatureFlagInserter
}

// NewMockFeatureFlagInserter creates a new mock instance.
func NewMockFeatureFlagInserter(ctrl *gomock.Controller) *MockFeatureFlagInserter {
	mock := &MockFeatureFlagInserter{ctrl: ctrl}
	mock.recorder = &MockFeatureFlagInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureFlagInserter) EXPECT() *MockFeatureFlagInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockFeatureFlagInserter) Insert(o *models.FeatureFlag, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockFeatureFlagInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockFeatureFlagInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockFeatureFlagUpdater is a mock of FeatureFlagUpdater interface.
type MockFeatureFlagUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureFlagUpdaterMockRecorder
}

// MockFeatureFlagUpdaterMockRecorder is the mock recorder for MockFeatureFlagUpdater.
type MockFeatureFlagUpdaterMockRecorder struct {
	mock *MockFeatureFlagUpdater
}

// NewMockFeatureFlagUpdater creates a new mock instance.
func NewMockFeatureFlagUpdater(ctrl *gomock.Controller) *MockFeatureFlagUpdater {
	mock := &MockFeatureFlagUpdater{ctrl: ctrl}
	mock.recorder = &MockFeatureFlagUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureFlagUpdater) EXPECT() *MockFeatureFlagUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockFeatureFlagUpdater) Update(o *models.FeatureFlag, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFeatureFlagUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFeatureFlagUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockFeatureFlagUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockFeatureFlagUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockFeatureFlagUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockFeatureFlagUpdater) UpdateAllSlice(o models.FeatureFlagSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockFeatureFlagUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockFeatureFlagUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockFeatureFlagDeleter is a mock of FeatureFlagDeleter interface.
type MockFeatureFlagDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureFlagDeleterMockRecorder
}

// MockFeatureFlagDeleterMockRecorder is the mock recorder for MockFeatureFlagDeleter.
type MockFeatureFlagDeleterMockRecorder struct {
	mock *MockFeatureFlagDeleter
}

// NewMockFeatureFlagDeleter creates a new mock instance.
func NewMockFeatureFlagDeleter(ctrl *gomock.Controller) *MockFeatureFlagDeleter {
	mock := &MockFeatureFlagDeleter{ctrl: ctrl}
	mock.recorder = &MockFeatureFlagDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureFlagDeleter) EXPECT() *MockFeatureFlagDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockFeatureFlagDeleter) Delete(o *models.FeatureFlag, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockFeatureFlagDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFeatureFlagDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockFeatureFlagDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockFeatureFlagDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockFeatureFlagDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockFeatureFlagDeleter) DeleteAllSlice(o models.FeatureFlagSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockFeatureFlagDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockFeatureFlagDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockFeatureFlagReloader is a mock of FeatureFlagReloader interface.
type MockFeatureFlagReloader struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureFlagReloaderMockRecorder
}

// MockFeatureFlagReloaderMockRecorder is the mock recorder for MockFeatureFlagReloader.
type MockFeatureFlagReloaderMockRecorder struct {
	mock *MockFeatureFlagReloader
}

// NewMockFeatureFlagReloader creates a new mock instance.
func NewMockFeatureFlagReloader(ctrl *gomock.Controller) *MockFeatureFlagReloader {
	mock := &MockFeatureFlagReloader{ctrl: ctrl}
	mock.recorder = &MockFeatureFlagReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureFlagReloader) EXPECT() *MockFeatureFlagReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockFeatureFlagReloader) Reload(o *models.FeatureFlag, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockFeatureFlagReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockFeatureFlagReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockFeatureFlagReloader) ReloadAll(o *models.FeatureFlagSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockFeatureFlagReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockFeatureFlagReloader)(nil).ReloadAll), o, ctx, exec)
}
