// +build unit

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_domain_labels.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockDomainLabelFinisher is a mock of DomainLabelFinisher interface.
type MockDomainLabelFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockDomainLabelFinisherMockRecorder
}

// MockDomainLabelFinisherMockRecorder is the mock recorder for MockDomainLabelFinisher.
type MockDomainLabelFinisherMockRecorder struct {
	mock *MockDomainLabelFinisher
}

// NewMockDomainLabelFinisher creates a new mock instance.
func NewMockDomainLabelFinisher(ctrl *gomock.Controller) *MockDomainLabelFinisher {
	mock := &MockDomainLabelFinisher{ctrl: ctrl}
	mock.recorder = &MockDomainLabelFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainLabelFinisher) EXPECT() *MockDomainLabelFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockDomainLabelFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.DomainLabelSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.DomainLabelSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockDomainLabelFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockDomainLabelFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockDomainLabelFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockDomainLabelFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockDomainLabelFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockDomainLabelFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockDomainLabelFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockDomainLabelFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockDomainLabelFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.DomainLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.DomainLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockDomainLabelFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockDomainLabelFinisher)(nil).One), ctx, exec)
}

// MockDomainLabelFinder is a mock of DomainLabelFinder interface.
type MockDomainLabelFinder struct {
	ctrl     *gomock.Controller
	recorder *MockDomainLabelFinderMockRecorder
}

// MockDomainLabelFinderMockRecorder is the mock recorder for MockDomainLabelFinder.
type MockDomainLabelFinderMockRecorder struct {
	mock *MockDomainLabelFinder
}

// NewMockDomainLabelFinder creates a new mock instance.
func NewMockDomainLabelFinder(ctrl *gomock.Controller) *MockDomainLabelFinder {
	mock := &MockDomainLabelFinder{ctrl: ctrl}
	mock.recorder = &MockDomainLabelFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainLabelFinder) EXPECT() *MockDomainLabelFinderMockRecorder {
	return m.recorder
}

// FindDomainLabel mocks base method.
func (m *MockDomainLabelFinder) FindDomainLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.DomainLabel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindDomainLabel", varargs...)
	ret0, _ := ret[0].(*models.DomainLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDomainLabel indicates an expected call of FindDomainLabel.
func (mr *MockDomainLabelFinderMockRecorder) FindDomainLabel(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDomainLabel", reflect.TypeOf((*MockDomainLabelFinder)(nil).FindDomainLabel), varargs...)
}

// MockDomainLabelInserter is a mock of DomainLabelInserter interface.
type MockDomainLabelInserter struct {
	ctrl     *gomock.Controller
	recorder *MockDomainLabelInserterMockRecorder
}

// MockDomainLabelInserterMockRecorder is the mock recorder for MockDomainLabelInserter.
type MockDomainLabelInserterMockRecorder struct {
	mock *MockDomainLabelInserter
}

// NewMockDomainLabelInserter creates a new mock instance.
func NewMockDomainLabelInserter(ctrl *gomock.Controller) *MockDomainLabelInserter {
	mock := &MockDomainLabelInserter{ctrl: ctrl}
	mock.recorder = &MockDomainLabelInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainLabelInserter) EXPECT() *MockDomainLabelInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockDomainLabelInserter) Insert(o *models.DomainLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockDomainLabelInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDomainLabelInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockDomainLabelUpdater is a mock of DomainLabelUpdater interface.
type MockDomainLabelUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockDomainLabelUpdaterMockRecorder
}

// MockDomainLabelUpdaterMockRecorder is the mock recorder for MockDomainLabelUpdater.
type MockDomainLabelUpdaterMockRecorder struct {
	mock *MockDomainLabelUpdater
}

// NewMockDomainLabelUpdater creates a new mock instance.
func NewMockDomainLabelUpdater(ctrl *gomock.Controller) *MockDomainLabelUpdater {
	mock := &MockDomainLabelUpdater{ctrl: ctrl}
	mock.recorder = &MockDomainLabelUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainLabelUpdater) EXPECT() *MockDomainLabelUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockDomainLabelUpdater) Update(o *models.DomainLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDomainLabelUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDomainLabelUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockDomainLabelUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockDomainLabelUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockDomainLabelUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockDomainLabelUpdater) UpdateAllSlice(o models.DomainLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockDomainLabelUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockDomainLabelUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockDomainLabelUpserter is a mock of DomainLabelUpserter interface.
type MockDomainLabelUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockDomainLabelUpserterMockRecorder
}

// MockDomainLabelUpserterMockRecorder is the mock recorder for MockDomainLabelUpserter.
type MockDomainLabelUpserterMockRecorder struct {
	mock *MockDomainLabelUpserter
}

// NewMockDomainLabelUpserter creates a new mock instance.
func NewMockDomainLabelUpserter(ctrl *gomock.Controller) *MockDomainLabelUpserter {
	mock := &MockDomainLabelUpserter{ctrl: ctrl}
	mock.recorder = &MockDomainLabelUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainLabelUpserter) EXPECT() *MockDomainLabelUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockDomainLabelUpserter) Upsert(o *models.DomainLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockDomainLabelUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockDomainLabelUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockDomainLabelDeleter is a mock of DomainLabelDeleter interface.
type MockDomainLabelDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockDomainLabelDeleterMockRecorder
}

// MockDomainLabelDeleterMockRecorder is the mock recorder for MockDomainLabelDeleter.
type MockDomainLabelDeleterMockRecorder struct {
	mock *MockDomainLabelDeleter
}

// NewMockDomainLabelDeleter creates a new mock instance.
func NewMockDomainLabelDeleter(ctrl *gomock.Controller) *MockDomainLabelDeleter {
	mock := &MockDomainLabelDeleter{ctrl: ctrl}
	mock.recorder = &MockDomainLabelDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainLabelDeleter) EXPECT() *MockDomainLabelDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDomainLabelDeleter) Delete(o *models.DomainLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDomainLabelDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDomainLabelDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockDomainLabelDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockDomainLabelDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockDomainLabelDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockDomainLabelDeleter) DeleteAllSlice(o models.DomainLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockDomainLabelDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockDomainLabelDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockDomainLabelReloader is a mock of DomainLabelReloader interface.
type MockDomainLabelReloader struct {
	ctrl     *gomock.Controller
	recorder *MockDomainLabelReloaderMockRecorder
}

// MockDomainLabelReloaderMockRecorder is the mock recorder for MockDomainLabelReloader.
type MockDomainLabelReloaderMockRecorder struct {
	mock *MockDomainLabelReloader
}

// NewMockDomainLabelReloader creates a new mock instance.
func NewMockDomainLabelReloader(ctrl *gomock.Controller) *MockDomainLabelReloader {
	mock := &MockDomainLabelReloader{ctrl: ctrl}
	mock.recorder = &MockDomainLabelReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainLabelReloader) EXPECT() *MockDomainLabelReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockDomainLabelReloader) Reload(o *models.DomainLabel, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockDomainLabelReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockDomainLabelReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockDomainLabelReloader) ReloadAll(o *models.DomainLabelSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockDomainLabelReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockDomainLabelReloader)(nil).ReloadAll), o, ctx, exec)
}
