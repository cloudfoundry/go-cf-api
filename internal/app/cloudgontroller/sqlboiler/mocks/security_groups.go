// Code generated by MockGen. DO NOT EDIT.
// Source: psql_security_groups.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockSecurityGroupFinisher is a mock of SecurityGroupFinisher interface.
type MockSecurityGroupFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityGroupFinisherMockRecorder
}

// MockSecurityGroupFinisherMockRecorder is the mock recorder for MockSecurityGroupFinisher.
type MockSecurityGroupFinisherMockRecorder struct {
	mock *MockSecurityGroupFinisher
}

// NewMockSecurityGroupFinisher creates a new mock instance.
func NewMockSecurityGroupFinisher(ctrl *gomock.Controller) *MockSecurityGroupFinisher {
	mock := &MockSecurityGroupFinisher{ctrl: ctrl}
	mock.recorder = &MockSecurityGroupFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityGroupFinisher) EXPECT() *MockSecurityGroupFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockSecurityGroupFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.SecurityGroupSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.SecurityGroupSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockSecurityGroupFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockSecurityGroupFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockSecurityGroupFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockSecurityGroupFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockSecurityGroupFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockSecurityGroupFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockSecurityGroupFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockSecurityGroupFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockSecurityGroupFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockSecurityGroupFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockSecurityGroupFinisher)(nil).One), ctx, exec)
}

// MockSecurityGroupFinder is a mock of SecurityGroupFinder interface.
type MockSecurityGroupFinder struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityGroupFinderMockRecorder
}

// MockSecurityGroupFinderMockRecorder is the mock recorder for MockSecurityGroupFinder.
type MockSecurityGroupFinderMockRecorder struct {
	mock *MockSecurityGroupFinder
}

// NewMockSecurityGroupFinder creates a new mock instance.
func NewMockSecurityGroupFinder(ctrl *gomock.Controller) *MockSecurityGroupFinder {
	mock := &MockSecurityGroupFinder{ctrl: ctrl}
	mock.recorder = &MockSecurityGroupFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityGroupFinder) EXPECT() *MockSecurityGroupFinderMockRecorder {
	return m.recorder
}

// FindSecurityGroup mocks base method.
func (m *MockSecurityGroupFinder) FindSecurityGroup(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.SecurityGroup, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindSecurityGroup", varargs...)
	ret0, _ := ret[0].(*models.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSecurityGroup indicates an expected call of FindSecurityGroup.
func (mr *MockSecurityGroupFinderMockRecorder) FindSecurityGroup(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSecurityGroup", reflect.TypeOf((*MockSecurityGroupFinder)(nil).FindSecurityGroup), varargs...)
}

// MockSecurityGroupInserter is a mock of SecurityGroupInserter interface.
type MockSecurityGroupInserter struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityGroupInserterMockRecorder
}

// MockSecurityGroupInserterMockRecorder is the mock recorder for MockSecurityGroupInserter.
type MockSecurityGroupInserterMockRecorder struct {
	mock *MockSecurityGroupInserter
}

// NewMockSecurityGroupInserter creates a new mock instance.
func NewMockSecurityGroupInserter(ctrl *gomock.Controller) *MockSecurityGroupInserter {
	mock := &MockSecurityGroupInserter{ctrl: ctrl}
	mock.recorder = &MockSecurityGroupInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityGroupInserter) EXPECT() *MockSecurityGroupInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockSecurityGroupInserter) Insert(o *models.SecurityGroup, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockSecurityGroupInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSecurityGroupInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockSecurityGroupUpdater is a mock of SecurityGroupUpdater interface.
type MockSecurityGroupUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityGroupUpdaterMockRecorder
}

// MockSecurityGroupUpdaterMockRecorder is the mock recorder for MockSecurityGroupUpdater.
type MockSecurityGroupUpdaterMockRecorder struct {
	mock *MockSecurityGroupUpdater
}

// NewMockSecurityGroupUpdater creates a new mock instance.
func NewMockSecurityGroupUpdater(ctrl *gomock.Controller) *MockSecurityGroupUpdater {
	mock := &MockSecurityGroupUpdater{ctrl: ctrl}
	mock.recorder = &MockSecurityGroupUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityGroupUpdater) EXPECT() *MockSecurityGroupUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockSecurityGroupUpdater) Update(o *models.SecurityGroup, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSecurityGroupUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSecurityGroupUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockSecurityGroupUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockSecurityGroupUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockSecurityGroupUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockSecurityGroupUpdater) UpdateAllSlice(o models.SecurityGroupSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockSecurityGroupUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockSecurityGroupUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockSecurityGroupUpserter is a mock of SecurityGroupUpserter interface.
type MockSecurityGroupUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityGroupUpserterMockRecorder
}

// MockSecurityGroupUpserterMockRecorder is the mock recorder for MockSecurityGroupUpserter.
type MockSecurityGroupUpserterMockRecorder struct {
	mock *MockSecurityGroupUpserter
}

// NewMockSecurityGroupUpserter creates a new mock instance.
func NewMockSecurityGroupUpserter(ctrl *gomock.Controller) *MockSecurityGroupUpserter {
	mock := &MockSecurityGroupUpserter{ctrl: ctrl}
	mock.recorder = &MockSecurityGroupUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityGroupUpserter) EXPECT() *MockSecurityGroupUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockSecurityGroupUpserter) Upsert(o *models.SecurityGroup, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockSecurityGroupUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockSecurityGroupUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockSecurityGroupDeleter is a mock of SecurityGroupDeleter interface.
type MockSecurityGroupDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityGroupDeleterMockRecorder
}

// MockSecurityGroupDeleterMockRecorder is the mock recorder for MockSecurityGroupDeleter.
type MockSecurityGroupDeleterMockRecorder struct {
	mock *MockSecurityGroupDeleter
}

// NewMockSecurityGroupDeleter creates a new mock instance.
func NewMockSecurityGroupDeleter(ctrl *gomock.Controller) *MockSecurityGroupDeleter {
	mock := &MockSecurityGroupDeleter{ctrl: ctrl}
	mock.recorder = &MockSecurityGroupDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityGroupDeleter) EXPECT() *MockSecurityGroupDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSecurityGroupDeleter) Delete(o *models.SecurityGroup, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSecurityGroupDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSecurityGroupDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockSecurityGroupDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockSecurityGroupDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockSecurityGroupDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockSecurityGroupDeleter) DeleteAllSlice(o models.SecurityGroupSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockSecurityGroupDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockSecurityGroupDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockSecurityGroupReloader is a mock of SecurityGroupReloader interface.
type MockSecurityGroupReloader struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityGroupReloaderMockRecorder
}

// MockSecurityGroupReloaderMockRecorder is the mock recorder for MockSecurityGroupReloader.
type MockSecurityGroupReloaderMockRecorder struct {
	mock *MockSecurityGroupReloader
}

// NewMockSecurityGroupReloader creates a new mock instance.
func NewMockSecurityGroupReloader(ctrl *gomock.Controller) *MockSecurityGroupReloader {
	mock := &MockSecurityGroupReloader{ctrl: ctrl}
	mock.recorder = &MockSecurityGroupReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityGroupReloader) EXPECT() *MockSecurityGroupReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockSecurityGroupReloader) Reload(o *models.SecurityGroup, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockSecurityGroupReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockSecurityGroupReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockSecurityGroupReloader) ReloadAll(o *models.SecurityGroupSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockSecurityGroupReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockSecurityGroupReloader)(nil).ReloadAll), o, ctx, exec)
}
