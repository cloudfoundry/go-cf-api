// +build unit

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_buildpack_lifecycle_buildpacks.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockBuildpackLifecycleBuildpackUpserter is a mock of BuildpackLifecycleBuildpackUpserter interface.
type MockBuildpackLifecycleBuildpackUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackLifecycleBuildpackUpserterMockRecorder
}

// MockBuildpackLifecycleBuildpackUpserterMockRecorder is the mock recorder for MockBuildpackLifecycleBuildpackUpserter.
type MockBuildpackLifecycleBuildpackUpserterMockRecorder struct {
	mock *MockBuildpackLifecycleBuildpackUpserter
}

// NewMockBuildpackLifecycleBuildpackUpserter creates a new mock instance.
func NewMockBuildpackLifecycleBuildpackUpserter(ctrl *gomock.Controller) *MockBuildpackLifecycleBuildpackUpserter {
	mock := &MockBuildpackLifecycleBuildpackUpserter{ctrl: ctrl}
	mock.recorder = &MockBuildpackLifecycleBuildpackUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildpackLifecycleBuildpackUpserter) EXPECT() *MockBuildpackLifecycleBuildpackUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockBuildpackLifecycleBuildpackUpserter) Upsert(o *models.BuildpackLifecycleBuildpack, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockBuildpackLifecycleBuildpackUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockBuildpackLifecycleBuildpackUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockBuildpackLifecycleBuildpackFinisher is a mock of BuildpackLifecycleBuildpackFinisher interface.
type MockBuildpackLifecycleBuildpackFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackLifecycleBuildpackFinisherMockRecorder
}

// MockBuildpackLifecycleBuildpackFinisherMockRecorder is the mock recorder for MockBuildpackLifecycleBuildpackFinisher.
type MockBuildpackLifecycleBuildpackFinisherMockRecorder struct {
	mock *MockBuildpackLifecycleBuildpackFinisher
}

// NewMockBuildpackLifecycleBuildpackFinisher creates a new mock instance.
func NewMockBuildpackLifecycleBuildpackFinisher(ctrl *gomock.Controller) *MockBuildpackLifecycleBuildpackFinisher {
	mock := &MockBuildpackLifecycleBuildpackFinisher{ctrl: ctrl}
	mock.recorder = &MockBuildpackLifecycleBuildpackFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildpackLifecycleBuildpackFinisher) EXPECT() *MockBuildpackLifecycleBuildpackFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockBuildpackLifecycleBuildpackFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.BuildpackLifecycleBuildpackSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.BuildpackLifecycleBuildpackSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockBuildpackLifecycleBuildpackFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockBuildpackLifecycleBuildpackFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockBuildpackLifecycleBuildpackFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockBuildpackLifecycleBuildpackFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockBuildpackLifecycleBuildpackFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockBuildpackLifecycleBuildpackFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockBuildpackLifecycleBuildpackFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockBuildpackLifecycleBuildpackFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockBuildpackLifecycleBuildpackFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.BuildpackLifecycleBuildpack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.BuildpackLifecycleBuildpack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockBuildpackLifecycleBuildpackFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockBuildpackLifecycleBuildpackFinisher)(nil).One), ctx, exec)
}

// MockBuildpackLifecycleBuildpackFinder is a mock of BuildpackLifecycleBuildpackFinder interface.
type MockBuildpackLifecycleBuildpackFinder struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackLifecycleBuildpackFinderMockRecorder
}

// MockBuildpackLifecycleBuildpackFinderMockRecorder is the mock recorder for MockBuildpackLifecycleBuildpackFinder.
type MockBuildpackLifecycleBuildpackFinderMockRecorder struct {
	mock *MockBuildpackLifecycleBuildpackFinder
}

// NewMockBuildpackLifecycleBuildpackFinder creates a new mock instance.
func NewMockBuildpackLifecycleBuildpackFinder(ctrl *gomock.Controller) *MockBuildpackLifecycleBuildpackFinder {
	mock := &MockBuildpackLifecycleBuildpackFinder{ctrl: ctrl}
	mock.recorder = &MockBuildpackLifecycleBuildpackFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildpackLifecycleBuildpackFinder) EXPECT() *MockBuildpackLifecycleBuildpackFinderMockRecorder {
	return m.recorder
}

// FindBuildpackLifecycleBuildpack mocks base method.
func (m *MockBuildpackLifecycleBuildpackFinder) FindBuildpackLifecycleBuildpack(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.BuildpackLifecycleBuildpack, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindBuildpackLifecycleBuildpack", varargs...)
	ret0, _ := ret[0].(*models.BuildpackLifecycleBuildpack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBuildpackLifecycleBuildpack indicates an expected call of FindBuildpackLifecycleBuildpack.
func (mr *MockBuildpackLifecycleBuildpackFinderMockRecorder) FindBuildpackLifecycleBuildpack(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBuildpackLifecycleBuildpack", reflect.TypeOf((*MockBuildpackLifecycleBuildpackFinder)(nil).FindBuildpackLifecycleBuildpack), varargs...)
}

// MockBuildpackLifecycleBuildpackInserter is a mock of BuildpackLifecycleBuildpackInserter interface.
type MockBuildpackLifecycleBuildpackInserter struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackLifecycleBuildpackInserterMockRecorder
}

// MockBuildpackLifecycleBuildpackInserterMockRecorder is the mock recorder for MockBuildpackLifecycleBuildpackInserter.
type MockBuildpackLifecycleBuildpackInserterMockRecorder struct {
	mock *MockBuildpackLifecycleBuildpackInserter
}

// NewMockBuildpackLifecycleBuildpackInserter creates a new mock instance.
func NewMockBuildpackLifecycleBuildpackInserter(ctrl *gomock.Controller) *MockBuildpackLifecycleBuildpackInserter {
	mock := &MockBuildpackLifecycleBuildpackInserter{ctrl: ctrl}
	mock.recorder = &MockBuildpackLifecycleBuildpackInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildpackLifecycleBuildpackInserter) EXPECT() *MockBuildpackLifecycleBuildpackInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockBuildpackLifecycleBuildpackInserter) Insert(o *models.BuildpackLifecycleBuildpack, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockBuildpackLifecycleBuildpackInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockBuildpackLifecycleBuildpackInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockBuildpackLifecycleBuildpackUpdater is a mock of BuildpackLifecycleBuildpackUpdater interface.
type MockBuildpackLifecycleBuildpackUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackLifecycleBuildpackUpdaterMockRecorder
}

// MockBuildpackLifecycleBuildpackUpdaterMockRecorder is the mock recorder for MockBuildpackLifecycleBuildpackUpdater.
type MockBuildpackLifecycleBuildpackUpdaterMockRecorder struct {
	mock *MockBuildpackLifecycleBuildpackUpdater
}

// NewMockBuildpackLifecycleBuildpackUpdater creates a new mock instance.
func NewMockBuildpackLifecycleBuildpackUpdater(ctrl *gomock.Controller) *MockBuildpackLifecycleBuildpackUpdater {
	mock := &MockBuildpackLifecycleBuildpackUpdater{ctrl: ctrl}
	mock.recorder = &MockBuildpackLifecycleBuildpackUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildpackLifecycleBuildpackUpdater) EXPECT() *MockBuildpackLifecycleBuildpackUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockBuildpackLifecycleBuildpackUpdater) Update(o *models.BuildpackLifecycleBuildpack, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBuildpackLifecycleBuildpackUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBuildpackLifecycleBuildpackUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockBuildpackLifecycleBuildpackUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockBuildpackLifecycleBuildpackUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockBuildpackLifecycleBuildpackUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockBuildpackLifecycleBuildpackUpdater) UpdateAllSlice(o models.BuildpackLifecycleBuildpackSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockBuildpackLifecycleBuildpackUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockBuildpackLifecycleBuildpackUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockBuildpackLifecycleBuildpackDeleter is a mock of BuildpackLifecycleBuildpackDeleter interface.
type MockBuildpackLifecycleBuildpackDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackLifecycleBuildpackDeleterMockRecorder
}

// MockBuildpackLifecycleBuildpackDeleterMockRecorder is the mock recorder for MockBuildpackLifecycleBuildpackDeleter.
type MockBuildpackLifecycleBuildpackDeleterMockRecorder struct {
	mock *MockBuildpackLifecycleBuildpackDeleter
}

// NewMockBuildpackLifecycleBuildpackDeleter creates a new mock instance.
func NewMockBuildpackLifecycleBuildpackDeleter(ctrl *gomock.Controller) *MockBuildpackLifecycleBuildpackDeleter {
	mock := &MockBuildpackLifecycleBuildpackDeleter{ctrl: ctrl}
	mock.recorder = &MockBuildpackLifecycleBuildpackDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildpackLifecycleBuildpackDeleter) EXPECT() *MockBuildpackLifecycleBuildpackDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockBuildpackLifecycleBuildpackDeleter) Delete(o *models.BuildpackLifecycleBuildpack, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockBuildpackLifecycleBuildpackDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBuildpackLifecycleBuildpackDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockBuildpackLifecycleBuildpackDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockBuildpackLifecycleBuildpackDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockBuildpackLifecycleBuildpackDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockBuildpackLifecycleBuildpackDeleter) DeleteAllSlice(o models.BuildpackLifecycleBuildpackSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockBuildpackLifecycleBuildpackDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockBuildpackLifecycleBuildpackDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockBuildpackLifecycleBuildpackReloader is a mock of BuildpackLifecycleBuildpackReloader interface.
type MockBuildpackLifecycleBuildpackReloader struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackLifecycleBuildpackReloaderMockRecorder
}

// MockBuildpackLifecycleBuildpackReloaderMockRecorder is the mock recorder for MockBuildpackLifecycleBuildpackReloader.
type MockBuildpackLifecycleBuildpackReloaderMockRecorder struct {
	mock *MockBuildpackLifecycleBuildpackReloader
}

// NewMockBuildpackLifecycleBuildpackReloader creates a new mock instance.
func NewMockBuildpackLifecycleBuildpackReloader(ctrl *gomock.Controller) *MockBuildpackLifecycleBuildpackReloader {
	mock := &MockBuildpackLifecycleBuildpackReloader{ctrl: ctrl}
	mock.recorder = &MockBuildpackLifecycleBuildpackReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildpackLifecycleBuildpackReloader) EXPECT() *MockBuildpackLifecycleBuildpackReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockBuildpackLifecycleBuildpackReloader) Reload(o *models.BuildpackLifecycleBuildpack, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockBuildpackLifecycleBuildpackReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockBuildpackLifecycleBuildpackReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockBuildpackLifecycleBuildpackReloader) ReloadAll(o *models.BuildpackLifecycleBuildpackSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockBuildpackLifecycleBuildpackReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockBuildpackLifecycleBuildpackReloader)(nil).ReloadAll), o, ctx, exec)
}
