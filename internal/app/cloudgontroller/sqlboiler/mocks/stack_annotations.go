// +build unit

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_stack_annotations.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockStackAnnotationFinisher is a mock of StackAnnotationFinisher interface.
type MockStackAnnotationFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockStackAnnotationFinisherMockRecorder
}

// MockStackAnnotationFinisherMockRecorder is the mock recorder for MockStackAnnotationFinisher.
type MockStackAnnotationFinisherMockRecorder struct {
	mock *MockStackAnnotationFinisher
}

// NewMockStackAnnotationFinisher creates a new mock instance.
func NewMockStackAnnotationFinisher(ctrl *gomock.Controller) *MockStackAnnotationFinisher {
	mock := &MockStackAnnotationFinisher{ctrl: ctrl}
	mock.recorder = &MockStackAnnotationFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackAnnotationFinisher) EXPECT() *MockStackAnnotationFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockStackAnnotationFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.StackAnnotationSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.StackAnnotationSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockStackAnnotationFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockStackAnnotationFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockStackAnnotationFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockStackAnnotationFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockStackAnnotationFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockStackAnnotationFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockStackAnnotationFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockStackAnnotationFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockStackAnnotationFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.StackAnnotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.StackAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockStackAnnotationFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockStackAnnotationFinisher)(nil).One), ctx, exec)
}

// MockStackAnnotationFinder is a mock of StackAnnotationFinder interface.
type MockStackAnnotationFinder struct {
	ctrl     *gomock.Controller
	recorder *MockStackAnnotationFinderMockRecorder
}

// MockStackAnnotationFinderMockRecorder is the mock recorder for MockStackAnnotationFinder.
type MockStackAnnotationFinderMockRecorder struct {
	mock *MockStackAnnotationFinder
}

// NewMockStackAnnotationFinder creates a new mock instance.
func NewMockStackAnnotationFinder(ctrl *gomock.Controller) *MockStackAnnotationFinder {
	mock := &MockStackAnnotationFinder{ctrl: ctrl}
	mock.recorder = &MockStackAnnotationFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackAnnotationFinder) EXPECT() *MockStackAnnotationFinderMockRecorder {
	return m.recorder
}

// FindStackAnnotation mocks base method.
func (m *MockStackAnnotationFinder) FindStackAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.StackAnnotation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindStackAnnotation", varargs...)
	ret0, _ := ret[0].(*models.StackAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStackAnnotation indicates an expected call of FindStackAnnotation.
func (mr *MockStackAnnotationFinderMockRecorder) FindStackAnnotation(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStackAnnotation", reflect.TypeOf((*MockStackAnnotationFinder)(nil).FindStackAnnotation), varargs...)
}

// MockStackAnnotationInserter is a mock of StackAnnotationInserter interface.
type MockStackAnnotationInserter struct {
	ctrl     *gomock.Controller
	recorder *MockStackAnnotationInserterMockRecorder
}

// MockStackAnnotationInserterMockRecorder is the mock recorder for MockStackAnnotationInserter.
type MockStackAnnotationInserterMockRecorder struct {
	mock *MockStackAnnotationInserter
}

// NewMockStackAnnotationInserter creates a new mock instance.
func NewMockStackAnnotationInserter(ctrl *gomock.Controller) *MockStackAnnotationInserter {
	mock := &MockStackAnnotationInserter{ctrl: ctrl}
	mock.recorder = &MockStackAnnotationInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackAnnotationInserter) EXPECT() *MockStackAnnotationInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockStackAnnotationInserter) Insert(o *models.StackAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockStackAnnotationInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockStackAnnotationInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockStackAnnotationUpdater is a mock of StackAnnotationUpdater interface.
type MockStackAnnotationUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockStackAnnotationUpdaterMockRecorder
}

// MockStackAnnotationUpdaterMockRecorder is the mock recorder for MockStackAnnotationUpdater.
type MockStackAnnotationUpdaterMockRecorder struct {
	mock *MockStackAnnotationUpdater
}

// NewMockStackAnnotationUpdater creates a new mock instance.
func NewMockStackAnnotationUpdater(ctrl *gomock.Controller) *MockStackAnnotationUpdater {
	mock := &MockStackAnnotationUpdater{ctrl: ctrl}
	mock.recorder = &MockStackAnnotationUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackAnnotationUpdater) EXPECT() *MockStackAnnotationUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockStackAnnotationUpdater) Update(o *models.StackAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockStackAnnotationUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStackAnnotationUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockStackAnnotationUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockStackAnnotationUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockStackAnnotationUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockStackAnnotationUpdater) UpdateAllSlice(o models.StackAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockStackAnnotationUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockStackAnnotationUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockStackAnnotationUpserter is a mock of StackAnnotationUpserter interface.
type MockStackAnnotationUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockStackAnnotationUpserterMockRecorder
}

// MockStackAnnotationUpserterMockRecorder is the mock recorder for MockStackAnnotationUpserter.
type MockStackAnnotationUpserterMockRecorder struct {
	mock *MockStackAnnotationUpserter
}

// NewMockStackAnnotationUpserter creates a new mock instance.
func NewMockStackAnnotationUpserter(ctrl *gomock.Controller) *MockStackAnnotationUpserter {
	mock := &MockStackAnnotationUpserter{ctrl: ctrl}
	mock.recorder = &MockStackAnnotationUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackAnnotationUpserter) EXPECT() *MockStackAnnotationUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockStackAnnotationUpserter) Upsert(o *models.StackAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockStackAnnotationUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockStackAnnotationUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockStackAnnotationDeleter is a mock of StackAnnotationDeleter interface.
type MockStackAnnotationDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockStackAnnotationDeleterMockRecorder
}

// MockStackAnnotationDeleterMockRecorder is the mock recorder for MockStackAnnotationDeleter.
type MockStackAnnotationDeleterMockRecorder struct {
	mock *MockStackAnnotationDeleter
}

// NewMockStackAnnotationDeleter creates a new mock instance.
func NewMockStackAnnotationDeleter(ctrl *gomock.Controller) *MockStackAnnotationDeleter {
	mock := &MockStackAnnotationDeleter{ctrl: ctrl}
	mock.recorder = &MockStackAnnotationDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackAnnotationDeleter) EXPECT() *MockStackAnnotationDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStackAnnotationDeleter) Delete(o *models.StackAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockStackAnnotationDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStackAnnotationDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockStackAnnotationDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockStackAnnotationDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockStackAnnotationDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockStackAnnotationDeleter) DeleteAllSlice(o models.StackAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockStackAnnotationDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockStackAnnotationDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockStackAnnotationReloader is a mock of StackAnnotationReloader interface.
type MockStackAnnotationReloader struct {
	ctrl     *gomock.Controller
	recorder *MockStackAnnotationReloaderMockRecorder
}

// MockStackAnnotationReloaderMockRecorder is the mock recorder for MockStackAnnotationReloader.
type MockStackAnnotationReloaderMockRecorder struct {
	mock *MockStackAnnotationReloader
}

// NewMockStackAnnotationReloader creates a new mock instance.
func NewMockStackAnnotationReloader(ctrl *gomock.Controller) *MockStackAnnotationReloader {
	mock := &MockStackAnnotationReloader{ctrl: ctrl}
	mock.recorder = &MockStackAnnotationReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackAnnotationReloader) EXPECT() *MockStackAnnotationReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockStackAnnotationReloader) Reload(o *models.StackAnnotation, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockStackAnnotationReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockStackAnnotationReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockStackAnnotationReloader) ReloadAll(o *models.StackAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockStackAnnotationReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockStackAnnotationReloader)(nil).ReloadAll), o, ctx, exec)
}
