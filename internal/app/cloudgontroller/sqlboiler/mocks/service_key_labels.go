// Code generated by MockGen. DO NOT EDIT.
// Source: psql_service_key_labels.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockServiceKeyLabelFinisher is a mock of ServiceKeyLabelFinisher interface.
type MockServiceKeyLabelFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockServiceKeyLabelFinisherMockRecorder
}

// MockServiceKeyLabelFinisherMockRecorder is the mock recorder for MockServiceKeyLabelFinisher.
type MockServiceKeyLabelFinisherMockRecorder struct {
	mock *MockServiceKeyLabelFinisher
}

// NewMockServiceKeyLabelFinisher creates a new mock instance.
func NewMockServiceKeyLabelFinisher(ctrl *gomock.Controller) *MockServiceKeyLabelFinisher {
	mock := &MockServiceKeyLabelFinisher{ctrl: ctrl}
	mock.recorder = &MockServiceKeyLabelFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceKeyLabelFinisher) EXPECT() *MockServiceKeyLabelFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockServiceKeyLabelFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.ServiceKeyLabelSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.ServiceKeyLabelSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockServiceKeyLabelFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockServiceKeyLabelFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockServiceKeyLabelFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockServiceKeyLabelFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockServiceKeyLabelFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockServiceKeyLabelFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockServiceKeyLabelFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockServiceKeyLabelFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockServiceKeyLabelFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.ServiceKeyLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.ServiceKeyLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockServiceKeyLabelFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockServiceKeyLabelFinisher)(nil).One), ctx, exec)
}

// MockServiceKeyLabelFinder is a mock of ServiceKeyLabelFinder interface.
type MockServiceKeyLabelFinder struct {
	ctrl     *gomock.Controller
	recorder *MockServiceKeyLabelFinderMockRecorder
}

// MockServiceKeyLabelFinderMockRecorder is the mock recorder for MockServiceKeyLabelFinder.
type MockServiceKeyLabelFinderMockRecorder struct {
	mock *MockServiceKeyLabelFinder
}

// NewMockServiceKeyLabelFinder creates a new mock instance.
func NewMockServiceKeyLabelFinder(ctrl *gomock.Controller) *MockServiceKeyLabelFinder {
	mock := &MockServiceKeyLabelFinder{ctrl: ctrl}
	mock.recorder = &MockServiceKeyLabelFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceKeyLabelFinder) EXPECT() *MockServiceKeyLabelFinderMockRecorder {
	return m.recorder
}

// FindServiceKeyLabel mocks base method.
func (m *MockServiceKeyLabelFinder) FindServiceKeyLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.ServiceKeyLabel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindServiceKeyLabel", varargs...)
	ret0, _ := ret[0].(*models.ServiceKeyLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindServiceKeyLabel indicates an expected call of FindServiceKeyLabel.
func (mr *MockServiceKeyLabelFinderMockRecorder) FindServiceKeyLabel(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindServiceKeyLabel", reflect.TypeOf((*MockServiceKeyLabelFinder)(nil).FindServiceKeyLabel), varargs...)
}

// MockServiceKeyLabelInserter is a mock of ServiceKeyLabelInserter interface.
type MockServiceKeyLabelInserter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceKeyLabelInserterMockRecorder
}

// MockServiceKeyLabelInserterMockRecorder is the mock recorder for MockServiceKeyLabelInserter.
type MockServiceKeyLabelInserterMockRecorder struct {
	mock *MockServiceKeyLabelInserter
}

// NewMockServiceKeyLabelInserter creates a new mock instance.
func NewMockServiceKeyLabelInserter(ctrl *gomock.Controller) *MockServiceKeyLabelInserter {
	mock := &MockServiceKeyLabelInserter{ctrl: ctrl}
	mock.recorder = &MockServiceKeyLabelInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceKeyLabelInserter) EXPECT() *MockServiceKeyLabelInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockServiceKeyLabelInserter) Insert(o *models.ServiceKeyLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockServiceKeyLabelInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockServiceKeyLabelInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockServiceKeyLabelUpdater is a mock of ServiceKeyLabelUpdater interface.
type MockServiceKeyLabelUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockServiceKeyLabelUpdaterMockRecorder
}

// MockServiceKeyLabelUpdaterMockRecorder is the mock recorder for MockServiceKeyLabelUpdater.
type MockServiceKeyLabelUpdaterMockRecorder struct {
	mock *MockServiceKeyLabelUpdater
}

// NewMockServiceKeyLabelUpdater creates a new mock instance.
func NewMockServiceKeyLabelUpdater(ctrl *gomock.Controller) *MockServiceKeyLabelUpdater {
	mock := &MockServiceKeyLabelUpdater{ctrl: ctrl}
	mock.recorder = &MockServiceKeyLabelUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceKeyLabelUpdater) EXPECT() *MockServiceKeyLabelUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockServiceKeyLabelUpdater) Update(o *models.ServiceKeyLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServiceKeyLabelUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceKeyLabelUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockServiceKeyLabelUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockServiceKeyLabelUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockServiceKeyLabelUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockServiceKeyLabelUpdater) UpdateAllSlice(o models.ServiceKeyLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockServiceKeyLabelUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockServiceKeyLabelUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockServiceKeyLabelUpserter is a mock of ServiceKeyLabelUpserter interface.
type MockServiceKeyLabelUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceKeyLabelUpserterMockRecorder
}

// MockServiceKeyLabelUpserterMockRecorder is the mock recorder for MockServiceKeyLabelUpserter.
type MockServiceKeyLabelUpserterMockRecorder struct {
	mock *MockServiceKeyLabelUpserter
}

// NewMockServiceKeyLabelUpserter creates a new mock instance.
func NewMockServiceKeyLabelUpserter(ctrl *gomock.Controller) *MockServiceKeyLabelUpserter {
	mock := &MockServiceKeyLabelUpserter{ctrl: ctrl}
	mock.recorder = &MockServiceKeyLabelUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceKeyLabelUpserter) EXPECT() *MockServiceKeyLabelUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockServiceKeyLabelUpserter) Upsert(o *models.ServiceKeyLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockServiceKeyLabelUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockServiceKeyLabelUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockServiceKeyLabelDeleter is a mock of ServiceKeyLabelDeleter interface.
type MockServiceKeyLabelDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceKeyLabelDeleterMockRecorder
}

// MockServiceKeyLabelDeleterMockRecorder is the mock recorder for MockServiceKeyLabelDeleter.
type MockServiceKeyLabelDeleterMockRecorder struct {
	mock *MockServiceKeyLabelDeleter
}

// NewMockServiceKeyLabelDeleter creates a new mock instance.
func NewMockServiceKeyLabelDeleter(ctrl *gomock.Controller) *MockServiceKeyLabelDeleter {
	mock := &MockServiceKeyLabelDeleter{ctrl: ctrl}
	mock.recorder = &MockServiceKeyLabelDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceKeyLabelDeleter) EXPECT() *MockServiceKeyLabelDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockServiceKeyLabelDeleter) Delete(o *models.ServiceKeyLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceKeyLabelDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceKeyLabelDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockServiceKeyLabelDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockServiceKeyLabelDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockServiceKeyLabelDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockServiceKeyLabelDeleter) DeleteAllSlice(o models.ServiceKeyLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockServiceKeyLabelDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockServiceKeyLabelDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockServiceKeyLabelReloader is a mock of ServiceKeyLabelReloader interface.
type MockServiceKeyLabelReloader struct {
	ctrl     *gomock.Controller
	recorder *MockServiceKeyLabelReloaderMockRecorder
}

// MockServiceKeyLabelReloaderMockRecorder is the mock recorder for MockServiceKeyLabelReloader.
type MockServiceKeyLabelReloaderMockRecorder struct {
	mock *MockServiceKeyLabelReloader
}

// NewMockServiceKeyLabelReloader creates a new mock instance.
func NewMockServiceKeyLabelReloader(ctrl *gomock.Controller) *MockServiceKeyLabelReloader {
	mock := &MockServiceKeyLabelReloader{ctrl: ctrl}
	mock.recorder = &MockServiceKeyLabelReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceKeyLabelReloader) EXPECT() *MockServiceKeyLabelReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockServiceKeyLabelReloader) Reload(o *models.ServiceKeyLabel, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockServiceKeyLabelReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockServiceKeyLabelReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockServiceKeyLabelReloader) ReloadAll(o *models.ServiceKeyLabelSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockServiceKeyLabelReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockServiceKeyLabelReloader)(nil).ReloadAll), o, ctx, exec)
}
