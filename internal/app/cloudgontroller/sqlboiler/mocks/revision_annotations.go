// Code generated by MockGen. DO NOT EDIT.
// Source: psql_revision_annotations.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockRevisionAnnotationFinisher is a mock of RevisionAnnotationFinisher interface.
type MockRevisionAnnotationFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionAnnotationFinisherMockRecorder
}

// MockRevisionAnnotationFinisherMockRecorder is the mock recorder for MockRevisionAnnotationFinisher.
type MockRevisionAnnotationFinisherMockRecorder struct {
	mock *MockRevisionAnnotationFinisher
}

// NewMockRevisionAnnotationFinisher creates a new mock instance.
func NewMockRevisionAnnotationFinisher(ctrl *gomock.Controller) *MockRevisionAnnotationFinisher {
	mock := &MockRevisionAnnotationFinisher{ctrl: ctrl}
	mock.recorder = &MockRevisionAnnotationFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionAnnotationFinisher) EXPECT() *MockRevisionAnnotationFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockRevisionAnnotationFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.RevisionAnnotationSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.RevisionAnnotationSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockRevisionAnnotationFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockRevisionAnnotationFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockRevisionAnnotationFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockRevisionAnnotationFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRevisionAnnotationFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockRevisionAnnotationFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockRevisionAnnotationFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRevisionAnnotationFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockRevisionAnnotationFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.RevisionAnnotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.RevisionAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockRevisionAnnotationFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockRevisionAnnotationFinisher)(nil).One), ctx, exec)
}

// MockRevisionAnnotationFinder is a mock of RevisionAnnotationFinder interface.
type MockRevisionAnnotationFinder struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionAnnotationFinderMockRecorder
}

// MockRevisionAnnotationFinderMockRecorder is the mock recorder for MockRevisionAnnotationFinder.
type MockRevisionAnnotationFinderMockRecorder struct {
	mock *MockRevisionAnnotationFinder
}

// NewMockRevisionAnnotationFinder creates a new mock instance.
func NewMockRevisionAnnotationFinder(ctrl *gomock.Controller) *MockRevisionAnnotationFinder {
	mock := &MockRevisionAnnotationFinder{ctrl: ctrl}
	mock.recorder = &MockRevisionAnnotationFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionAnnotationFinder) EXPECT() *MockRevisionAnnotationFinderMockRecorder {
	return m.recorder
}

// FindRevisionAnnotation mocks base method.
func (m *MockRevisionAnnotationFinder) FindRevisionAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.RevisionAnnotation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindRevisionAnnotation", varargs...)
	ret0, _ := ret[0].(*models.RevisionAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRevisionAnnotation indicates an expected call of FindRevisionAnnotation.
func (mr *MockRevisionAnnotationFinderMockRecorder) FindRevisionAnnotation(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRevisionAnnotation", reflect.TypeOf((*MockRevisionAnnotationFinder)(nil).FindRevisionAnnotation), varargs...)
}

// MockRevisionAnnotationInserter is a mock of RevisionAnnotationInserter interface.
type MockRevisionAnnotationInserter struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionAnnotationInserterMockRecorder
}

// MockRevisionAnnotationInserterMockRecorder is the mock recorder for MockRevisionAnnotationInserter.
type MockRevisionAnnotationInserterMockRecorder struct {
	mock *MockRevisionAnnotationInserter
}

// NewMockRevisionAnnotationInserter creates a new mock instance.
func NewMockRevisionAnnotationInserter(ctrl *gomock.Controller) *MockRevisionAnnotationInserter {
	mock := &MockRevisionAnnotationInserter{ctrl: ctrl}
	mock.recorder = &MockRevisionAnnotationInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionAnnotationInserter) EXPECT() *MockRevisionAnnotationInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockRevisionAnnotationInserter) Insert(o *models.RevisionAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockRevisionAnnotationInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRevisionAnnotationInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockRevisionAnnotationUpdater is a mock of RevisionAnnotationUpdater interface.
type MockRevisionAnnotationUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionAnnotationUpdaterMockRecorder
}

// MockRevisionAnnotationUpdaterMockRecorder is the mock recorder for MockRevisionAnnotationUpdater.
type MockRevisionAnnotationUpdaterMockRecorder struct {
	mock *MockRevisionAnnotationUpdater
}

// NewMockRevisionAnnotationUpdater creates a new mock instance.
func NewMockRevisionAnnotationUpdater(ctrl *gomock.Controller) *MockRevisionAnnotationUpdater {
	mock := &MockRevisionAnnotationUpdater{ctrl: ctrl}
	mock.recorder = &MockRevisionAnnotationUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionAnnotationUpdater) EXPECT() *MockRevisionAnnotationUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockRevisionAnnotationUpdater) Update(o *models.RevisionAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRevisionAnnotationUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRevisionAnnotationUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockRevisionAnnotationUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockRevisionAnnotationUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockRevisionAnnotationUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockRevisionAnnotationUpdater) UpdateAllSlice(o models.RevisionAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockRevisionAnnotationUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockRevisionAnnotationUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockRevisionAnnotationDeleter is a mock of RevisionAnnotationDeleter interface.
type MockRevisionAnnotationDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionAnnotationDeleterMockRecorder
}

// MockRevisionAnnotationDeleterMockRecorder is the mock recorder for MockRevisionAnnotationDeleter.
type MockRevisionAnnotationDeleterMockRecorder struct {
	mock *MockRevisionAnnotationDeleter
}

// NewMockRevisionAnnotationDeleter creates a new mock instance.
func NewMockRevisionAnnotationDeleter(ctrl *gomock.Controller) *MockRevisionAnnotationDeleter {
	mock := &MockRevisionAnnotationDeleter{ctrl: ctrl}
	mock.recorder = &MockRevisionAnnotationDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionAnnotationDeleter) EXPECT() *MockRevisionAnnotationDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRevisionAnnotationDeleter) Delete(o *models.RevisionAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRevisionAnnotationDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRevisionAnnotationDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockRevisionAnnotationDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockRevisionAnnotationDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockRevisionAnnotationDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockRevisionAnnotationDeleter) DeleteAllSlice(o models.RevisionAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockRevisionAnnotationDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockRevisionAnnotationDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockRevisionAnnotationReloader is a mock of RevisionAnnotationReloader interface.
type MockRevisionAnnotationReloader struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionAnnotationReloaderMockRecorder
}

// MockRevisionAnnotationReloaderMockRecorder is the mock recorder for MockRevisionAnnotationReloader.
type MockRevisionAnnotationReloaderMockRecorder struct {
	mock *MockRevisionAnnotationReloader
}

// NewMockRevisionAnnotationReloader creates a new mock instance.
func NewMockRevisionAnnotationReloader(ctrl *gomock.Controller) *MockRevisionAnnotationReloader {
	mock := &MockRevisionAnnotationReloader{ctrl: ctrl}
	mock.recorder = &MockRevisionAnnotationReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionAnnotationReloader) EXPECT() *MockRevisionAnnotationReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockRevisionAnnotationReloader) Reload(o *models.RevisionAnnotation, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockRevisionAnnotationReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockRevisionAnnotationReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockRevisionAnnotationReloader) ReloadAll(o *models.RevisionAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockRevisionAnnotationReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockRevisionAnnotationReloader)(nil).ReloadAll), o, ctx, exec)
}
