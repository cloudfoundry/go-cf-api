// Code generated by MockGen. DO NOT EDIT.
// Source: psql_service_plan_visibilities.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockServicePlanVisibilityFinisher is a mock of ServicePlanVisibilityFinisher interface.
type MockServicePlanVisibilityFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockServicePlanVisibilityFinisherMockRecorder
}

// MockServicePlanVisibilityFinisherMockRecorder is the mock recorder for MockServicePlanVisibilityFinisher.
type MockServicePlanVisibilityFinisherMockRecorder struct {
	mock *MockServicePlanVisibilityFinisher
}

// NewMockServicePlanVisibilityFinisher creates a new mock instance.
func NewMockServicePlanVisibilityFinisher(ctrl *gomock.Controller) *MockServicePlanVisibilityFinisher {
	mock := &MockServicePlanVisibilityFinisher{ctrl: ctrl}
	mock.recorder = &MockServicePlanVisibilityFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicePlanVisibilityFinisher) EXPECT() *MockServicePlanVisibilityFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockServicePlanVisibilityFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.ServicePlanVisibilitySlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.ServicePlanVisibilitySlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockServicePlanVisibilityFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockServicePlanVisibilityFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockServicePlanVisibilityFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockServicePlanVisibilityFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockServicePlanVisibilityFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockServicePlanVisibilityFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockServicePlanVisibilityFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockServicePlanVisibilityFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockServicePlanVisibilityFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.ServicePlanVisibility, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.ServicePlanVisibility)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockServicePlanVisibilityFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockServicePlanVisibilityFinisher)(nil).One), ctx, exec)
}

// MockServicePlanVisibilityFinder is a mock of ServicePlanVisibilityFinder interface.
type MockServicePlanVisibilityFinder struct {
	ctrl     *gomock.Controller
	recorder *MockServicePlanVisibilityFinderMockRecorder
}

// MockServicePlanVisibilityFinderMockRecorder is the mock recorder for MockServicePlanVisibilityFinder.
type MockServicePlanVisibilityFinderMockRecorder struct {
	mock *MockServicePlanVisibilityFinder
}

// NewMockServicePlanVisibilityFinder creates a new mock instance.
func NewMockServicePlanVisibilityFinder(ctrl *gomock.Controller) *MockServicePlanVisibilityFinder {
	mock := &MockServicePlanVisibilityFinder{ctrl: ctrl}
	mock.recorder = &MockServicePlanVisibilityFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicePlanVisibilityFinder) EXPECT() *MockServicePlanVisibilityFinderMockRecorder {
	return m.recorder
}

// FindServicePlanVisibility mocks base method.
func (m *MockServicePlanVisibilityFinder) FindServicePlanVisibility(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.ServicePlanVisibility, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindServicePlanVisibility", varargs...)
	ret0, _ := ret[0].(*models.ServicePlanVisibility)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindServicePlanVisibility indicates an expected call of FindServicePlanVisibility.
func (mr *MockServicePlanVisibilityFinderMockRecorder) FindServicePlanVisibility(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindServicePlanVisibility", reflect.TypeOf((*MockServicePlanVisibilityFinder)(nil).FindServicePlanVisibility), varargs...)
}

// MockServicePlanVisibilityInserter is a mock of ServicePlanVisibilityInserter interface.
type MockServicePlanVisibilityInserter struct {
	ctrl     *gomock.Controller
	recorder *MockServicePlanVisibilityInserterMockRecorder
}

// MockServicePlanVisibilityInserterMockRecorder is the mock recorder for MockServicePlanVisibilityInserter.
type MockServicePlanVisibilityInserterMockRecorder struct {
	mock *MockServicePlanVisibilityInserter
}

// NewMockServicePlanVisibilityInserter creates a new mock instance.
func NewMockServicePlanVisibilityInserter(ctrl *gomock.Controller) *MockServicePlanVisibilityInserter {
	mock := &MockServicePlanVisibilityInserter{ctrl: ctrl}
	mock.recorder = &MockServicePlanVisibilityInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicePlanVisibilityInserter) EXPECT() *MockServicePlanVisibilityInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockServicePlanVisibilityInserter) Insert(o *models.ServicePlanVisibility, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockServicePlanVisibilityInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockServicePlanVisibilityInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockServicePlanVisibilityUpdater is a mock of ServicePlanVisibilityUpdater interface.
type MockServicePlanVisibilityUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockServicePlanVisibilityUpdaterMockRecorder
}

// MockServicePlanVisibilityUpdaterMockRecorder is the mock recorder for MockServicePlanVisibilityUpdater.
type MockServicePlanVisibilityUpdaterMockRecorder struct {
	mock *MockServicePlanVisibilityUpdater
}

// NewMockServicePlanVisibilityUpdater creates a new mock instance.
func NewMockServicePlanVisibilityUpdater(ctrl *gomock.Controller) *MockServicePlanVisibilityUpdater {
	mock := &MockServicePlanVisibilityUpdater{ctrl: ctrl}
	mock.recorder = &MockServicePlanVisibilityUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicePlanVisibilityUpdater) EXPECT() *MockServicePlanVisibilityUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockServicePlanVisibilityUpdater) Update(o *models.ServicePlanVisibility, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServicePlanVisibilityUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServicePlanVisibilityUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockServicePlanVisibilityUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockServicePlanVisibilityUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockServicePlanVisibilityUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockServicePlanVisibilityUpdater) UpdateAllSlice(o models.ServicePlanVisibilitySlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockServicePlanVisibilityUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockServicePlanVisibilityUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockServicePlanVisibilityUpserter is a mock of ServicePlanVisibilityUpserter interface.
type MockServicePlanVisibilityUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockServicePlanVisibilityUpserterMockRecorder
}

// MockServicePlanVisibilityUpserterMockRecorder is the mock recorder for MockServicePlanVisibilityUpserter.
type MockServicePlanVisibilityUpserterMockRecorder struct {
	mock *MockServicePlanVisibilityUpserter
}

// NewMockServicePlanVisibilityUpserter creates a new mock instance.
func NewMockServicePlanVisibilityUpserter(ctrl *gomock.Controller) *MockServicePlanVisibilityUpserter {
	mock := &MockServicePlanVisibilityUpserter{ctrl: ctrl}
	mock.recorder = &MockServicePlanVisibilityUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicePlanVisibilityUpserter) EXPECT() *MockServicePlanVisibilityUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockServicePlanVisibilityUpserter) Upsert(o *models.ServicePlanVisibility, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockServicePlanVisibilityUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockServicePlanVisibilityUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockServicePlanVisibilityDeleter is a mock of ServicePlanVisibilityDeleter interface.
type MockServicePlanVisibilityDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockServicePlanVisibilityDeleterMockRecorder
}

// MockServicePlanVisibilityDeleterMockRecorder is the mock recorder for MockServicePlanVisibilityDeleter.
type MockServicePlanVisibilityDeleterMockRecorder struct {
	mock *MockServicePlanVisibilityDeleter
}

// NewMockServicePlanVisibilityDeleter creates a new mock instance.
func NewMockServicePlanVisibilityDeleter(ctrl *gomock.Controller) *MockServicePlanVisibilityDeleter {
	mock := &MockServicePlanVisibilityDeleter{ctrl: ctrl}
	mock.recorder = &MockServicePlanVisibilityDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicePlanVisibilityDeleter) EXPECT() *MockServicePlanVisibilityDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockServicePlanVisibilityDeleter) Delete(o *models.ServicePlanVisibility, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockServicePlanVisibilityDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServicePlanVisibilityDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockServicePlanVisibilityDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockServicePlanVisibilityDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockServicePlanVisibilityDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockServicePlanVisibilityDeleter) DeleteAllSlice(o models.ServicePlanVisibilitySlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockServicePlanVisibilityDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockServicePlanVisibilityDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockServicePlanVisibilityReloader is a mock of ServicePlanVisibilityReloader interface.
type MockServicePlanVisibilityReloader struct {
	ctrl     *gomock.Controller
	recorder *MockServicePlanVisibilityReloaderMockRecorder
}

// MockServicePlanVisibilityReloaderMockRecorder is the mock recorder for MockServicePlanVisibilityReloader.
type MockServicePlanVisibilityReloaderMockRecorder struct {
	mock *MockServicePlanVisibilityReloader
}

// NewMockServicePlanVisibilityReloader creates a new mock instance.
func NewMockServicePlanVisibilityReloader(ctrl *gomock.Controller) *MockServicePlanVisibilityReloader {
	mock := &MockServicePlanVisibilityReloader{ctrl: ctrl}
	mock.recorder = &MockServicePlanVisibilityReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicePlanVisibilityReloader) EXPECT() *MockServicePlanVisibilityReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockServicePlanVisibilityReloader) Reload(o *models.ServicePlanVisibility, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockServicePlanVisibilityReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockServicePlanVisibilityReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockServicePlanVisibilityReloader) ReloadAll(o *models.ServicePlanVisibilitySlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockServicePlanVisibilityReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockServicePlanVisibilityReloader)(nil).ReloadAll), o, ctx, exec)
}
