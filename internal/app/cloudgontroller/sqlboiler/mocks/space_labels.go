// Code generated by MockGen. DO NOT EDIT.
// Source: psql_space_labels.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockSpaceLabelFinisher is a mock of SpaceLabelFinisher interface.
type MockSpaceLabelFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceLabelFinisherMockRecorder
}

// MockSpaceLabelFinisherMockRecorder is the mock recorder for MockSpaceLabelFinisher.
type MockSpaceLabelFinisherMockRecorder struct {
	mock *MockSpaceLabelFinisher
}

// NewMockSpaceLabelFinisher creates a new mock instance.
func NewMockSpaceLabelFinisher(ctrl *gomock.Controller) *MockSpaceLabelFinisher {
	mock := &MockSpaceLabelFinisher{ctrl: ctrl}
	mock.recorder = &MockSpaceLabelFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceLabelFinisher) EXPECT() *MockSpaceLabelFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockSpaceLabelFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.SpaceLabelSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.SpaceLabelSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockSpaceLabelFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockSpaceLabelFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockSpaceLabelFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockSpaceLabelFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockSpaceLabelFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockSpaceLabelFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockSpaceLabelFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockSpaceLabelFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockSpaceLabelFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.SpaceLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.SpaceLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockSpaceLabelFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockSpaceLabelFinisher)(nil).One), ctx, exec)
}

// MockSpaceLabelFinder is a mock of SpaceLabelFinder interface.
type MockSpaceLabelFinder struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceLabelFinderMockRecorder
}

// MockSpaceLabelFinderMockRecorder is the mock recorder for MockSpaceLabelFinder.
type MockSpaceLabelFinderMockRecorder struct {
	mock *MockSpaceLabelFinder
}

// NewMockSpaceLabelFinder creates a new mock instance.
func NewMockSpaceLabelFinder(ctrl *gomock.Controller) *MockSpaceLabelFinder {
	mock := &MockSpaceLabelFinder{ctrl: ctrl}
	mock.recorder = &MockSpaceLabelFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceLabelFinder) EXPECT() *MockSpaceLabelFinderMockRecorder {
	return m.recorder
}

// FindSpaceLabel mocks base method.
func (m *MockSpaceLabelFinder) FindSpaceLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.SpaceLabel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindSpaceLabel", varargs...)
	ret0, _ := ret[0].(*models.SpaceLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSpaceLabel indicates an expected call of FindSpaceLabel.
func (mr *MockSpaceLabelFinderMockRecorder) FindSpaceLabel(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSpaceLabel", reflect.TypeOf((*MockSpaceLabelFinder)(nil).FindSpaceLabel), varargs...)
}

// MockSpaceLabelInserter is a mock of SpaceLabelInserter interface.
type MockSpaceLabelInserter struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceLabelInserterMockRecorder
}

// MockSpaceLabelInserterMockRecorder is the mock recorder for MockSpaceLabelInserter.
type MockSpaceLabelInserterMockRecorder struct {
	mock *MockSpaceLabelInserter
}

// NewMockSpaceLabelInserter creates a new mock instance.
func NewMockSpaceLabelInserter(ctrl *gomock.Controller) *MockSpaceLabelInserter {
	mock := &MockSpaceLabelInserter{ctrl: ctrl}
	mock.recorder = &MockSpaceLabelInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceLabelInserter) EXPECT() *MockSpaceLabelInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockSpaceLabelInserter) Insert(o *models.SpaceLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockSpaceLabelInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSpaceLabelInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockSpaceLabelUpdater is a mock of SpaceLabelUpdater interface.
type MockSpaceLabelUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceLabelUpdaterMockRecorder
}

// MockSpaceLabelUpdaterMockRecorder is the mock recorder for MockSpaceLabelUpdater.
type MockSpaceLabelUpdaterMockRecorder struct {
	mock *MockSpaceLabelUpdater
}

// NewMockSpaceLabelUpdater creates a new mock instance.
func NewMockSpaceLabelUpdater(ctrl *gomock.Controller) *MockSpaceLabelUpdater {
	mock := &MockSpaceLabelUpdater{ctrl: ctrl}
	mock.recorder = &MockSpaceLabelUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceLabelUpdater) EXPECT() *MockSpaceLabelUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockSpaceLabelUpdater) Update(o *models.SpaceLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSpaceLabelUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSpaceLabelUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockSpaceLabelUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockSpaceLabelUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockSpaceLabelUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockSpaceLabelUpdater) UpdateAllSlice(o models.SpaceLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockSpaceLabelUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockSpaceLabelUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockSpaceLabelUpserter is a mock of SpaceLabelUpserter interface.
type MockSpaceLabelUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceLabelUpserterMockRecorder
}

// MockSpaceLabelUpserterMockRecorder is the mock recorder for MockSpaceLabelUpserter.
type MockSpaceLabelUpserterMockRecorder struct {
	mock *MockSpaceLabelUpserter
}

// NewMockSpaceLabelUpserter creates a new mock instance.
func NewMockSpaceLabelUpserter(ctrl *gomock.Controller) *MockSpaceLabelUpserter {
	mock := &MockSpaceLabelUpserter{ctrl: ctrl}
	mock.recorder = &MockSpaceLabelUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceLabelUpserter) EXPECT() *MockSpaceLabelUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockSpaceLabelUpserter) Upsert(o *models.SpaceLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockSpaceLabelUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockSpaceLabelUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockSpaceLabelDeleter is a mock of SpaceLabelDeleter interface.
type MockSpaceLabelDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceLabelDeleterMockRecorder
}

// MockSpaceLabelDeleterMockRecorder is the mock recorder for MockSpaceLabelDeleter.
type MockSpaceLabelDeleterMockRecorder struct {
	mock *MockSpaceLabelDeleter
}

// NewMockSpaceLabelDeleter creates a new mock instance.
func NewMockSpaceLabelDeleter(ctrl *gomock.Controller) *MockSpaceLabelDeleter {
	mock := &MockSpaceLabelDeleter{ctrl: ctrl}
	mock.recorder = &MockSpaceLabelDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceLabelDeleter) EXPECT() *MockSpaceLabelDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSpaceLabelDeleter) Delete(o *models.SpaceLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSpaceLabelDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSpaceLabelDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockSpaceLabelDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockSpaceLabelDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockSpaceLabelDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockSpaceLabelDeleter) DeleteAllSlice(o models.SpaceLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockSpaceLabelDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockSpaceLabelDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockSpaceLabelReloader is a mock of SpaceLabelReloader interface.
type MockSpaceLabelReloader struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceLabelReloaderMockRecorder
}

// MockSpaceLabelReloaderMockRecorder is the mock recorder for MockSpaceLabelReloader.
type MockSpaceLabelReloaderMockRecorder struct {
	mock *MockSpaceLabelReloader
}

// NewMockSpaceLabelReloader creates a new mock instance.
func NewMockSpaceLabelReloader(ctrl *gomock.Controller) *MockSpaceLabelReloader {
	mock := &MockSpaceLabelReloader{ctrl: ctrl}
	mock.recorder = &MockSpaceLabelReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceLabelReloader) EXPECT() *MockSpaceLabelReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockSpaceLabelReloader) Reload(o *models.SpaceLabel, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockSpaceLabelReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockSpaceLabelReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockSpaceLabelReloader) ReloadAll(o *models.SpaceLabelSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockSpaceLabelReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockSpaceLabelReloader)(nil).ReloadAll), o, ctx, exec)
}
