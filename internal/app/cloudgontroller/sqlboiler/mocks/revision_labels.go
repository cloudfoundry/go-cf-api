// +build unit

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_revision_labels.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockRevisionLabelUpserter is a mock of RevisionLabelUpserter interface.
type MockRevisionLabelUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionLabelUpserterMockRecorder
}

// MockRevisionLabelUpserterMockRecorder is the mock recorder for MockRevisionLabelUpserter.
type MockRevisionLabelUpserterMockRecorder struct {
	mock *MockRevisionLabelUpserter
}

// NewMockRevisionLabelUpserter creates a new mock instance.
func NewMockRevisionLabelUpserter(ctrl *gomock.Controller) *MockRevisionLabelUpserter {
	mock := &MockRevisionLabelUpserter{ctrl: ctrl}
	mock.recorder = &MockRevisionLabelUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionLabelUpserter) EXPECT() *MockRevisionLabelUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockRevisionLabelUpserter) Upsert(o *models.RevisionLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockRevisionLabelUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockRevisionLabelUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockRevisionLabelFinisher is a mock of RevisionLabelFinisher interface.
type MockRevisionLabelFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionLabelFinisherMockRecorder
}

// MockRevisionLabelFinisherMockRecorder is the mock recorder for MockRevisionLabelFinisher.
type MockRevisionLabelFinisherMockRecorder struct {
	mock *MockRevisionLabelFinisher
}

// NewMockRevisionLabelFinisher creates a new mock instance.
func NewMockRevisionLabelFinisher(ctrl *gomock.Controller) *MockRevisionLabelFinisher {
	mock := &MockRevisionLabelFinisher{ctrl: ctrl}
	mock.recorder = &MockRevisionLabelFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionLabelFinisher) EXPECT() *MockRevisionLabelFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockRevisionLabelFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.RevisionLabelSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.RevisionLabelSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockRevisionLabelFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockRevisionLabelFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockRevisionLabelFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockRevisionLabelFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRevisionLabelFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockRevisionLabelFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockRevisionLabelFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRevisionLabelFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockRevisionLabelFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.RevisionLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.RevisionLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockRevisionLabelFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockRevisionLabelFinisher)(nil).One), ctx, exec)
}

// MockRevisionLabelFinder is a mock of RevisionLabelFinder interface.
type MockRevisionLabelFinder struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionLabelFinderMockRecorder
}

// MockRevisionLabelFinderMockRecorder is the mock recorder for MockRevisionLabelFinder.
type MockRevisionLabelFinderMockRecorder struct {
	mock *MockRevisionLabelFinder
}

// NewMockRevisionLabelFinder creates a new mock instance.
func NewMockRevisionLabelFinder(ctrl *gomock.Controller) *MockRevisionLabelFinder {
	mock := &MockRevisionLabelFinder{ctrl: ctrl}
	mock.recorder = &MockRevisionLabelFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionLabelFinder) EXPECT() *MockRevisionLabelFinderMockRecorder {
	return m.recorder
}

// FindRevisionLabel mocks base method.
func (m *MockRevisionLabelFinder) FindRevisionLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.RevisionLabel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindRevisionLabel", varargs...)
	ret0, _ := ret[0].(*models.RevisionLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRevisionLabel indicates an expected call of FindRevisionLabel.
func (mr *MockRevisionLabelFinderMockRecorder) FindRevisionLabel(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRevisionLabel", reflect.TypeOf((*MockRevisionLabelFinder)(nil).FindRevisionLabel), varargs...)
}

// MockRevisionLabelInserter is a mock of RevisionLabelInserter interface.
type MockRevisionLabelInserter struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionLabelInserterMockRecorder
}

// MockRevisionLabelInserterMockRecorder is the mock recorder for MockRevisionLabelInserter.
type MockRevisionLabelInserterMockRecorder struct {
	mock *MockRevisionLabelInserter
}

// NewMockRevisionLabelInserter creates a new mock instance.
func NewMockRevisionLabelInserter(ctrl *gomock.Controller) *MockRevisionLabelInserter {
	mock := &MockRevisionLabelInserter{ctrl: ctrl}
	mock.recorder = &MockRevisionLabelInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionLabelInserter) EXPECT() *MockRevisionLabelInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockRevisionLabelInserter) Insert(o *models.RevisionLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockRevisionLabelInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRevisionLabelInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockRevisionLabelUpdater is a mock of RevisionLabelUpdater interface.
type MockRevisionLabelUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionLabelUpdaterMockRecorder
}

// MockRevisionLabelUpdaterMockRecorder is the mock recorder for MockRevisionLabelUpdater.
type MockRevisionLabelUpdaterMockRecorder struct {
	mock *MockRevisionLabelUpdater
}

// NewMockRevisionLabelUpdater creates a new mock instance.
func NewMockRevisionLabelUpdater(ctrl *gomock.Controller) *MockRevisionLabelUpdater {
	mock := &MockRevisionLabelUpdater{ctrl: ctrl}
	mock.recorder = &MockRevisionLabelUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionLabelUpdater) EXPECT() *MockRevisionLabelUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockRevisionLabelUpdater) Update(o *models.RevisionLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRevisionLabelUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRevisionLabelUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockRevisionLabelUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockRevisionLabelUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockRevisionLabelUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockRevisionLabelUpdater) UpdateAllSlice(o models.RevisionLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockRevisionLabelUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockRevisionLabelUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockRevisionLabelDeleter is a mock of RevisionLabelDeleter interface.
type MockRevisionLabelDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionLabelDeleterMockRecorder
}

// MockRevisionLabelDeleterMockRecorder is the mock recorder for MockRevisionLabelDeleter.
type MockRevisionLabelDeleterMockRecorder struct {
	mock *MockRevisionLabelDeleter
}

// NewMockRevisionLabelDeleter creates a new mock instance.
func NewMockRevisionLabelDeleter(ctrl *gomock.Controller) *MockRevisionLabelDeleter {
	mock := &MockRevisionLabelDeleter{ctrl: ctrl}
	mock.recorder = &MockRevisionLabelDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionLabelDeleter) EXPECT() *MockRevisionLabelDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRevisionLabelDeleter) Delete(o *models.RevisionLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRevisionLabelDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRevisionLabelDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockRevisionLabelDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockRevisionLabelDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockRevisionLabelDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockRevisionLabelDeleter) DeleteAllSlice(o models.RevisionLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockRevisionLabelDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockRevisionLabelDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockRevisionLabelReloader is a mock of RevisionLabelReloader interface.
type MockRevisionLabelReloader struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionLabelReloaderMockRecorder
}

// MockRevisionLabelReloaderMockRecorder is the mock recorder for MockRevisionLabelReloader.
type MockRevisionLabelReloaderMockRecorder struct {
	mock *MockRevisionLabelReloader
}

// NewMockRevisionLabelReloader creates a new mock instance.
func NewMockRevisionLabelReloader(ctrl *gomock.Controller) *MockRevisionLabelReloader {
	mock := &MockRevisionLabelReloader{ctrl: ctrl}
	mock.recorder = &MockRevisionLabelReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevisionLabelReloader) EXPECT() *MockRevisionLabelReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockRevisionLabelReloader) Reload(o *models.RevisionLabel, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockRevisionLabelReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockRevisionLabelReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockRevisionLabelReloader) ReloadAll(o *models.RevisionLabelSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockRevisionLabelReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockRevisionLabelReloader)(nil).ReloadAll), o, ctx, exec)
}
