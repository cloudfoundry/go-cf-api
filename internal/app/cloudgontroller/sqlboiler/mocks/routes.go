// +build unit

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_routes.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockRouteUpserter is a mock of RouteUpserter interface.
type MockRouteUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteUpserterMockRecorder
}

// MockRouteUpserterMockRecorder is the mock recorder for MockRouteUpserter.
type MockRouteUpserterMockRecorder struct {
	mock *MockRouteUpserter
}

// NewMockRouteUpserter creates a new mock instance.
func NewMockRouteUpserter(ctrl *gomock.Controller) *MockRouteUpserter {
	mock := &MockRouteUpserter{ctrl: ctrl}
	mock.recorder = &MockRouteUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteUpserter) EXPECT() *MockRouteUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockRouteUpserter) Upsert(o *models.Route, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockRouteUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockRouteUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockRouteFinisher is a mock of RouteFinisher interface.
type MockRouteFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockRouteFinisherMockRecorder
}

// MockRouteFinisherMockRecorder is the mock recorder for MockRouteFinisher.
type MockRouteFinisherMockRecorder struct {
	mock *MockRouteFinisher
}

// NewMockRouteFinisher creates a new mock instance.
func NewMockRouteFinisher(ctrl *gomock.Controller) *MockRouteFinisher {
	mock := &MockRouteFinisher{ctrl: ctrl}
	mock.recorder = &MockRouteFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteFinisher) EXPECT() *MockRouteFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockRouteFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.RouteSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.RouteSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockRouteFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockRouteFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockRouteFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockRouteFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRouteFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockRouteFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockRouteFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRouteFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockRouteFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockRouteFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockRouteFinisher)(nil).One), ctx, exec)
}

// MockRouteFinder is a mock of RouteFinder interface.
type MockRouteFinder struct {
	ctrl     *gomock.Controller
	recorder *MockRouteFinderMockRecorder
}

// MockRouteFinderMockRecorder is the mock recorder for MockRouteFinder.
type MockRouteFinderMockRecorder struct {
	mock *MockRouteFinder
}

// NewMockRouteFinder creates a new mock instance.
func NewMockRouteFinder(ctrl *gomock.Controller) *MockRouteFinder {
	mock := &MockRouteFinder{ctrl: ctrl}
	mock.recorder = &MockRouteFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteFinder) EXPECT() *MockRouteFinderMockRecorder {
	return m.recorder
}

// FindRoute mocks base method.
func (m *MockRouteFinder) FindRoute(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.Route, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindRoute", varargs...)
	ret0, _ := ret[0].(*models.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoute indicates an expected call of FindRoute.
func (mr *MockRouteFinderMockRecorder) FindRoute(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoute", reflect.TypeOf((*MockRouteFinder)(nil).FindRoute), varargs...)
}

// MockRouteInserter is a mock of RouteInserter interface.
type MockRouteInserter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteInserterMockRecorder
}

// MockRouteInserterMockRecorder is the mock recorder for MockRouteInserter.
type MockRouteInserterMockRecorder struct {
	mock *MockRouteInserter
}

// NewMockRouteInserter creates a new mock instance.
func NewMockRouteInserter(ctrl *gomock.Controller) *MockRouteInserter {
	mock := &MockRouteInserter{ctrl: ctrl}
	mock.recorder = &MockRouteInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteInserter) EXPECT() *MockRouteInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockRouteInserter) Insert(o *models.Route, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockRouteInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRouteInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockRouteUpdater is a mock of RouteUpdater interface.
type MockRouteUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockRouteUpdaterMockRecorder
}

// MockRouteUpdaterMockRecorder is the mock recorder for MockRouteUpdater.
type MockRouteUpdaterMockRecorder struct {
	mock *MockRouteUpdater
}

// NewMockRouteUpdater creates a new mock instance.
func NewMockRouteUpdater(ctrl *gomock.Controller) *MockRouteUpdater {
	mock := &MockRouteUpdater{ctrl: ctrl}
	mock.recorder = &MockRouteUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteUpdater) EXPECT() *MockRouteUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockRouteUpdater) Update(o *models.Route, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRouteUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRouteUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockRouteUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockRouteUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockRouteUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockRouteUpdater) UpdateAllSlice(o models.RouteSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockRouteUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockRouteUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockRouteDeleter is a mock of RouteDeleter interface.
type MockRouteDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteDeleterMockRecorder
}

// MockRouteDeleterMockRecorder is the mock recorder for MockRouteDeleter.
type MockRouteDeleterMockRecorder struct {
	mock *MockRouteDeleter
}

// NewMockRouteDeleter creates a new mock instance.
func NewMockRouteDeleter(ctrl *gomock.Controller) *MockRouteDeleter {
	mock := &MockRouteDeleter{ctrl: ctrl}
	mock.recorder = &MockRouteDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteDeleter) EXPECT() *MockRouteDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRouteDeleter) Delete(o *models.Route, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRouteDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRouteDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockRouteDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockRouteDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockRouteDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockRouteDeleter) DeleteAllSlice(o models.RouteSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockRouteDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockRouteDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockRouteReloader is a mock of RouteReloader interface.
type MockRouteReloader struct {
	ctrl     *gomock.Controller
	recorder *MockRouteReloaderMockRecorder
}

// MockRouteReloaderMockRecorder is the mock recorder for MockRouteReloader.
type MockRouteReloaderMockRecorder struct {
	mock *MockRouteReloader
}

// NewMockRouteReloader creates a new mock instance.
func NewMockRouteReloader(ctrl *gomock.Controller) *MockRouteReloader {
	mock := &MockRouteReloader{ctrl: ctrl}
	mock.recorder = &MockRouteReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteReloader) EXPECT() *MockRouteReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockRouteReloader) Reload(o *models.Route, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockRouteReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockRouteReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockRouteReloader) ReloadAll(o *models.RouteSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockRouteReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockRouteReloader)(nil).ReloadAll), o, ctx, exec)
}
