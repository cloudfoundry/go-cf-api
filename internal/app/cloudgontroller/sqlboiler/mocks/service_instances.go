// Code generated by MockGen. DO NOT EDIT.
// Source: psql_service_instances.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockServiceInstanceFinisher is a mock of ServiceInstanceFinisher interface.
type MockServiceInstanceFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInstanceFinisherMockRecorder
}

// MockServiceInstanceFinisherMockRecorder is the mock recorder for MockServiceInstanceFinisher.
type MockServiceInstanceFinisherMockRecorder struct {
	mock *MockServiceInstanceFinisher
}

// NewMockServiceInstanceFinisher creates a new mock instance.
func NewMockServiceInstanceFinisher(ctrl *gomock.Controller) *MockServiceInstanceFinisher {
	mock := &MockServiceInstanceFinisher{ctrl: ctrl}
	mock.recorder = &MockServiceInstanceFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInstanceFinisher) EXPECT() *MockServiceInstanceFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockServiceInstanceFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.ServiceInstanceSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.ServiceInstanceSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockServiceInstanceFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockServiceInstanceFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockServiceInstanceFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockServiceInstanceFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockServiceInstanceFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockServiceInstanceFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockServiceInstanceFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockServiceInstanceFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockServiceInstanceFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.ServiceInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.ServiceInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockServiceInstanceFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockServiceInstanceFinisher)(nil).One), ctx, exec)
}

// MockServiceInstanceFinder is a mock of ServiceInstanceFinder interface.
type MockServiceInstanceFinder struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInstanceFinderMockRecorder
}

// MockServiceInstanceFinderMockRecorder is the mock recorder for MockServiceInstanceFinder.
type MockServiceInstanceFinderMockRecorder struct {
	mock *MockServiceInstanceFinder
}

// NewMockServiceInstanceFinder creates a new mock instance.
func NewMockServiceInstanceFinder(ctrl *gomock.Controller) *MockServiceInstanceFinder {
	mock := &MockServiceInstanceFinder{ctrl: ctrl}
	mock.recorder = &MockServiceInstanceFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInstanceFinder) EXPECT() *MockServiceInstanceFinderMockRecorder {
	return m.recorder
}

// FindServiceInstance mocks base method.
func (m *MockServiceInstanceFinder) FindServiceInstance(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.ServiceInstance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindServiceInstance", varargs...)
	ret0, _ := ret[0].(*models.ServiceInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindServiceInstance indicates an expected call of FindServiceInstance.
func (mr *MockServiceInstanceFinderMockRecorder) FindServiceInstance(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindServiceInstance", reflect.TypeOf((*MockServiceInstanceFinder)(nil).FindServiceInstance), varargs...)
}

// MockServiceInstanceInserter is a mock of ServiceInstanceInserter interface.
type MockServiceInstanceInserter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInstanceInserterMockRecorder
}

// MockServiceInstanceInserterMockRecorder is the mock recorder for MockServiceInstanceInserter.
type MockServiceInstanceInserterMockRecorder struct {
	mock *MockServiceInstanceInserter
}

// NewMockServiceInstanceInserter creates a new mock instance.
func NewMockServiceInstanceInserter(ctrl *gomock.Controller) *MockServiceInstanceInserter {
	mock := &MockServiceInstanceInserter{ctrl: ctrl}
	mock.recorder = &MockServiceInstanceInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInstanceInserter) EXPECT() *MockServiceInstanceInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockServiceInstanceInserter) Insert(o *models.ServiceInstance, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockServiceInstanceInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockServiceInstanceInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockServiceInstanceUpdater is a mock of ServiceInstanceUpdater interface.
type MockServiceInstanceUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInstanceUpdaterMockRecorder
}

// MockServiceInstanceUpdaterMockRecorder is the mock recorder for MockServiceInstanceUpdater.
type MockServiceInstanceUpdaterMockRecorder struct {
	mock *MockServiceInstanceUpdater
}

// NewMockServiceInstanceUpdater creates a new mock instance.
func NewMockServiceInstanceUpdater(ctrl *gomock.Controller) *MockServiceInstanceUpdater {
	mock := &MockServiceInstanceUpdater{ctrl: ctrl}
	mock.recorder = &MockServiceInstanceUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInstanceUpdater) EXPECT() *MockServiceInstanceUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockServiceInstanceUpdater) Update(o *models.ServiceInstance, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServiceInstanceUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceInstanceUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockServiceInstanceUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockServiceInstanceUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockServiceInstanceUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockServiceInstanceUpdater) UpdateAllSlice(o models.ServiceInstanceSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockServiceInstanceUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockServiceInstanceUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockServiceInstanceDeleter is a mock of ServiceInstanceDeleter interface.
type MockServiceInstanceDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInstanceDeleterMockRecorder
}

// MockServiceInstanceDeleterMockRecorder is the mock recorder for MockServiceInstanceDeleter.
type MockServiceInstanceDeleterMockRecorder struct {
	mock *MockServiceInstanceDeleter
}

// NewMockServiceInstanceDeleter creates a new mock instance.
func NewMockServiceInstanceDeleter(ctrl *gomock.Controller) *MockServiceInstanceDeleter {
	mock := &MockServiceInstanceDeleter{ctrl: ctrl}
	mock.recorder = &MockServiceInstanceDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInstanceDeleter) EXPECT() *MockServiceInstanceDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockServiceInstanceDeleter) Delete(o *models.ServiceInstance, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceInstanceDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceInstanceDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockServiceInstanceDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockServiceInstanceDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockServiceInstanceDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockServiceInstanceDeleter) DeleteAllSlice(o models.ServiceInstanceSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockServiceInstanceDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockServiceInstanceDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockServiceInstanceReloader is a mock of ServiceInstanceReloader interface.
type MockServiceInstanceReloader struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInstanceReloaderMockRecorder
}

// MockServiceInstanceReloaderMockRecorder is the mock recorder for MockServiceInstanceReloader.
type MockServiceInstanceReloaderMockRecorder struct {
	mock *MockServiceInstanceReloader
}

// NewMockServiceInstanceReloader creates a new mock instance.
func NewMockServiceInstanceReloader(ctrl *gomock.Controller) *MockServiceInstanceReloader {
	mock := &MockServiceInstanceReloader{ctrl: ctrl}
	mock.recorder = &MockServiceInstanceReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInstanceReloader) EXPECT() *MockServiceInstanceReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockServiceInstanceReloader) Reload(o *models.ServiceInstance, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockServiceInstanceReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockServiceInstanceReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockServiceInstanceReloader) ReloadAll(o *models.ServiceInstanceSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockServiceInstanceReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockServiceInstanceReloader)(nil).ReloadAll), o, ctx, exec)
}
