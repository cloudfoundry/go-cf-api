// Code generated by MockGen. DO NOT EDIT.
// Source: psql_service_offering_annotations.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockServiceOfferingAnnotationFinisher is a mock of ServiceOfferingAnnotationFinisher interface.
type MockServiceOfferingAnnotationFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockServiceOfferingAnnotationFinisherMockRecorder
}

// MockServiceOfferingAnnotationFinisherMockRecorder is the mock recorder for MockServiceOfferingAnnotationFinisher.
type MockServiceOfferingAnnotationFinisherMockRecorder struct {
	mock *MockServiceOfferingAnnotationFinisher
}

// NewMockServiceOfferingAnnotationFinisher creates a new mock instance.
func NewMockServiceOfferingAnnotationFinisher(ctrl *gomock.Controller) *MockServiceOfferingAnnotationFinisher {
	mock := &MockServiceOfferingAnnotationFinisher{ctrl: ctrl}
	mock.recorder = &MockServiceOfferingAnnotationFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceOfferingAnnotationFinisher) EXPECT() *MockServiceOfferingAnnotationFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockServiceOfferingAnnotationFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.ServiceOfferingAnnotationSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.ServiceOfferingAnnotationSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockServiceOfferingAnnotationFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockServiceOfferingAnnotationFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockServiceOfferingAnnotationFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockServiceOfferingAnnotationFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockServiceOfferingAnnotationFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockServiceOfferingAnnotationFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockServiceOfferingAnnotationFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockServiceOfferingAnnotationFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockServiceOfferingAnnotationFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.ServiceOfferingAnnotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.ServiceOfferingAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockServiceOfferingAnnotationFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockServiceOfferingAnnotationFinisher)(nil).One), ctx, exec)
}

// MockServiceOfferingAnnotationFinder is a mock of ServiceOfferingAnnotationFinder interface.
type MockServiceOfferingAnnotationFinder struct {
	ctrl     *gomock.Controller
	recorder *MockServiceOfferingAnnotationFinderMockRecorder
}

// MockServiceOfferingAnnotationFinderMockRecorder is the mock recorder for MockServiceOfferingAnnotationFinder.
type MockServiceOfferingAnnotationFinderMockRecorder struct {
	mock *MockServiceOfferingAnnotationFinder
}

// NewMockServiceOfferingAnnotationFinder creates a new mock instance.
func NewMockServiceOfferingAnnotationFinder(ctrl *gomock.Controller) *MockServiceOfferingAnnotationFinder {
	mock := &MockServiceOfferingAnnotationFinder{ctrl: ctrl}
	mock.recorder = &MockServiceOfferingAnnotationFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceOfferingAnnotationFinder) EXPECT() *MockServiceOfferingAnnotationFinderMockRecorder {
	return m.recorder
}

// FindServiceOfferingAnnotation mocks base method.
func (m *MockServiceOfferingAnnotationFinder) FindServiceOfferingAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.ServiceOfferingAnnotation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindServiceOfferingAnnotation", varargs...)
	ret0, _ := ret[0].(*models.ServiceOfferingAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindServiceOfferingAnnotation indicates an expected call of FindServiceOfferingAnnotation.
func (mr *MockServiceOfferingAnnotationFinderMockRecorder) FindServiceOfferingAnnotation(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindServiceOfferingAnnotation", reflect.TypeOf((*MockServiceOfferingAnnotationFinder)(nil).FindServiceOfferingAnnotation), varargs...)
}

// MockServiceOfferingAnnotationInserter is a mock of ServiceOfferingAnnotationInserter interface.
type MockServiceOfferingAnnotationInserter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceOfferingAnnotationInserterMockRecorder
}

// MockServiceOfferingAnnotationInserterMockRecorder is the mock recorder for MockServiceOfferingAnnotationInserter.
type MockServiceOfferingAnnotationInserterMockRecorder struct {
	mock *MockServiceOfferingAnnotationInserter
}

// NewMockServiceOfferingAnnotationInserter creates a new mock instance.
func NewMockServiceOfferingAnnotationInserter(ctrl *gomock.Controller) *MockServiceOfferingAnnotationInserter {
	mock := &MockServiceOfferingAnnotationInserter{ctrl: ctrl}
	mock.recorder = &MockServiceOfferingAnnotationInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceOfferingAnnotationInserter) EXPECT() *MockServiceOfferingAnnotationInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockServiceOfferingAnnotationInserter) Insert(o *models.ServiceOfferingAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockServiceOfferingAnnotationInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockServiceOfferingAnnotationInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockServiceOfferingAnnotationUpdater is a mock of ServiceOfferingAnnotationUpdater interface.
type MockServiceOfferingAnnotationUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockServiceOfferingAnnotationUpdaterMockRecorder
}

// MockServiceOfferingAnnotationUpdaterMockRecorder is the mock recorder for MockServiceOfferingAnnotationUpdater.
type MockServiceOfferingAnnotationUpdaterMockRecorder struct {
	mock *MockServiceOfferingAnnotationUpdater
}

// NewMockServiceOfferingAnnotationUpdater creates a new mock instance.
func NewMockServiceOfferingAnnotationUpdater(ctrl *gomock.Controller) *MockServiceOfferingAnnotationUpdater {
	mock := &MockServiceOfferingAnnotationUpdater{ctrl: ctrl}
	mock.recorder = &MockServiceOfferingAnnotationUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceOfferingAnnotationUpdater) EXPECT() *MockServiceOfferingAnnotationUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockServiceOfferingAnnotationUpdater) Update(o *models.ServiceOfferingAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServiceOfferingAnnotationUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceOfferingAnnotationUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockServiceOfferingAnnotationUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockServiceOfferingAnnotationUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockServiceOfferingAnnotationUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockServiceOfferingAnnotationUpdater) UpdateAllSlice(o models.ServiceOfferingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockServiceOfferingAnnotationUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockServiceOfferingAnnotationUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockServiceOfferingAnnotationUpserter is a mock of ServiceOfferingAnnotationUpserter interface.
type MockServiceOfferingAnnotationUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceOfferingAnnotationUpserterMockRecorder
}

// MockServiceOfferingAnnotationUpserterMockRecorder is the mock recorder for MockServiceOfferingAnnotationUpserter.
type MockServiceOfferingAnnotationUpserterMockRecorder struct {
	mock *MockServiceOfferingAnnotationUpserter
}

// NewMockServiceOfferingAnnotationUpserter creates a new mock instance.
func NewMockServiceOfferingAnnotationUpserter(ctrl *gomock.Controller) *MockServiceOfferingAnnotationUpserter {
	mock := &MockServiceOfferingAnnotationUpserter{ctrl: ctrl}
	mock.recorder = &MockServiceOfferingAnnotationUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceOfferingAnnotationUpserter) EXPECT() *MockServiceOfferingAnnotationUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockServiceOfferingAnnotationUpserter) Upsert(o *models.ServiceOfferingAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockServiceOfferingAnnotationUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockServiceOfferingAnnotationUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockServiceOfferingAnnotationDeleter is a mock of ServiceOfferingAnnotationDeleter interface.
type MockServiceOfferingAnnotationDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceOfferingAnnotationDeleterMockRecorder
}

// MockServiceOfferingAnnotationDeleterMockRecorder is the mock recorder for MockServiceOfferingAnnotationDeleter.
type MockServiceOfferingAnnotationDeleterMockRecorder struct {
	mock *MockServiceOfferingAnnotationDeleter
}

// NewMockServiceOfferingAnnotationDeleter creates a new mock instance.
func NewMockServiceOfferingAnnotationDeleter(ctrl *gomock.Controller) *MockServiceOfferingAnnotationDeleter {
	mock := &MockServiceOfferingAnnotationDeleter{ctrl: ctrl}
	mock.recorder = &MockServiceOfferingAnnotationDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceOfferingAnnotationDeleter) EXPECT() *MockServiceOfferingAnnotationDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockServiceOfferingAnnotationDeleter) Delete(o *models.ServiceOfferingAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceOfferingAnnotationDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceOfferingAnnotationDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockServiceOfferingAnnotationDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockServiceOfferingAnnotationDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockServiceOfferingAnnotationDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockServiceOfferingAnnotationDeleter) DeleteAllSlice(o models.ServiceOfferingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockServiceOfferingAnnotationDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockServiceOfferingAnnotationDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockServiceOfferingAnnotationReloader is a mock of ServiceOfferingAnnotationReloader interface.
type MockServiceOfferingAnnotationReloader struct {
	ctrl     *gomock.Controller
	recorder *MockServiceOfferingAnnotationReloaderMockRecorder
}

// MockServiceOfferingAnnotationReloaderMockRecorder is the mock recorder for MockServiceOfferingAnnotationReloader.
type MockServiceOfferingAnnotationReloaderMockRecorder struct {
	mock *MockServiceOfferingAnnotationReloader
}

// NewMockServiceOfferingAnnotationReloader creates a new mock instance.
func NewMockServiceOfferingAnnotationReloader(ctrl *gomock.Controller) *MockServiceOfferingAnnotationReloader {
	mock := &MockServiceOfferingAnnotationReloader{ctrl: ctrl}
	mock.recorder = &MockServiceOfferingAnnotationReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceOfferingAnnotationReloader) EXPECT() *MockServiceOfferingAnnotationReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockServiceOfferingAnnotationReloader) Reload(o *models.ServiceOfferingAnnotation, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockServiceOfferingAnnotationReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockServiceOfferingAnnotationReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockServiceOfferingAnnotationReloader) ReloadAll(o *models.ServiceOfferingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockServiceOfferingAnnotationReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockServiceOfferingAnnotationReloader)(nil).ReloadAll), o, ctx, exec)
}
