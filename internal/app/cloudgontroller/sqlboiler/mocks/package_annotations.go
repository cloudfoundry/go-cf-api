// Code generated by MockGen. DO NOT EDIT.
// Source: psql_package_annotations.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/app/cloudgontroller/sqlboiler"
)

// MockPackageAnnotationFinisher is a mock of PackageAnnotationFinisher interface.
type MockPackageAnnotationFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockPackageAnnotationFinisherMockRecorder
}

// MockPackageAnnotationFinisherMockRecorder is the mock recorder for MockPackageAnnotationFinisher.
type MockPackageAnnotationFinisherMockRecorder struct {
	mock *MockPackageAnnotationFinisher
}

// NewMockPackageAnnotationFinisher creates a new mock instance.
func NewMockPackageAnnotationFinisher(ctrl *gomock.Controller) *MockPackageAnnotationFinisher {
	mock := &MockPackageAnnotationFinisher{ctrl: ctrl}
	mock.recorder = &MockPackageAnnotationFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageAnnotationFinisher) EXPECT() *MockPackageAnnotationFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockPackageAnnotationFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.PackageAnnotationSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.PackageAnnotationSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockPackageAnnotationFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockPackageAnnotationFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockPackageAnnotationFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockPackageAnnotationFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockPackageAnnotationFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockPackageAnnotationFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockPackageAnnotationFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockPackageAnnotationFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockPackageAnnotationFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.PackageAnnotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.PackageAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockPackageAnnotationFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockPackageAnnotationFinisher)(nil).One), ctx, exec)
}

// MockPackageAnnotationFinder is a mock of PackageAnnotationFinder interface.
type MockPackageAnnotationFinder struct {
	ctrl     *gomock.Controller
	recorder *MockPackageAnnotationFinderMockRecorder
}

// MockPackageAnnotationFinderMockRecorder is the mock recorder for MockPackageAnnotationFinder.
type MockPackageAnnotationFinderMockRecorder struct {
	mock *MockPackageAnnotationFinder
}

// NewMockPackageAnnotationFinder creates a new mock instance.
func NewMockPackageAnnotationFinder(ctrl *gomock.Controller) *MockPackageAnnotationFinder {
	mock := &MockPackageAnnotationFinder{ctrl: ctrl}
	mock.recorder = &MockPackageAnnotationFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageAnnotationFinder) EXPECT() *MockPackageAnnotationFinderMockRecorder {
	return m.recorder
}

// FindPackageAnnotation mocks base method.
func (m *MockPackageAnnotationFinder) FindPackageAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.PackageAnnotation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindPackageAnnotation", varargs...)
	ret0, _ := ret[0].(*models.PackageAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPackageAnnotation indicates an expected call of FindPackageAnnotation.
func (mr *MockPackageAnnotationFinderMockRecorder) FindPackageAnnotation(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPackageAnnotation", reflect.TypeOf((*MockPackageAnnotationFinder)(nil).FindPackageAnnotation), varargs...)
}

// MockPackageAnnotationInserter is a mock of PackageAnnotationInserter interface.
type MockPackageAnnotationInserter struct {
	ctrl     *gomock.Controller
	recorder *MockPackageAnnotationInserterMockRecorder
}

// MockPackageAnnotationInserterMockRecorder is the mock recorder for MockPackageAnnotationInserter.
type MockPackageAnnotationInserterMockRecorder struct {
	mock *MockPackageAnnotationInserter
}

// NewMockPackageAnnotationInserter creates a new mock instance.
func NewMockPackageAnnotationInserter(ctrl *gomock.Controller) *MockPackageAnnotationInserter {
	mock := &MockPackageAnnotationInserter{ctrl: ctrl}
	mock.recorder = &MockPackageAnnotationInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageAnnotationInserter) EXPECT() *MockPackageAnnotationInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockPackageAnnotationInserter) Insert(o *models.PackageAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockPackageAnnotationInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPackageAnnotationInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockPackageAnnotationUpdater is a mock of PackageAnnotationUpdater interface.
type MockPackageAnnotationUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockPackageAnnotationUpdaterMockRecorder
}

// MockPackageAnnotationUpdaterMockRecorder is the mock recorder for MockPackageAnnotationUpdater.
type MockPackageAnnotationUpdaterMockRecorder struct {
	mock *MockPackageAnnotationUpdater
}

// NewMockPackageAnnotationUpdater creates a new mock instance.
func NewMockPackageAnnotationUpdater(ctrl *gomock.Controller) *MockPackageAnnotationUpdater {
	mock := &MockPackageAnnotationUpdater{ctrl: ctrl}
	mock.recorder = &MockPackageAnnotationUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageAnnotationUpdater) EXPECT() *MockPackageAnnotationUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockPackageAnnotationUpdater) Update(o *models.PackageAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPackageAnnotationUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPackageAnnotationUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockPackageAnnotationUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockPackageAnnotationUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockPackageAnnotationUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockPackageAnnotationUpdater) UpdateAllSlice(o models.PackageAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockPackageAnnotationUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockPackageAnnotationUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockPackageAnnotationUpserter is a mock of PackageAnnotationUpserter interface.
type MockPackageAnnotationUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockPackageAnnotationUpserterMockRecorder
}

// MockPackageAnnotationUpserterMockRecorder is the mock recorder for MockPackageAnnotationUpserter.
type MockPackageAnnotationUpserterMockRecorder struct {
	mock *MockPackageAnnotationUpserter
}

// NewMockPackageAnnotationUpserter creates a new mock instance.
func NewMockPackageAnnotationUpserter(ctrl *gomock.Controller) *MockPackageAnnotationUpserter {
	mock := &MockPackageAnnotationUpserter{ctrl: ctrl}
	mock.recorder = &MockPackageAnnotationUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageAnnotationUpserter) EXPECT() *MockPackageAnnotationUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockPackageAnnotationUpserter) Upsert(o *models.PackageAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockPackageAnnotationUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockPackageAnnotationUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockPackageAnnotationDeleter is a mock of PackageAnnotationDeleter interface.
type MockPackageAnnotationDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockPackageAnnotationDeleterMockRecorder
}

// MockPackageAnnotationDeleterMockRecorder is the mock recorder for MockPackageAnnotationDeleter.
type MockPackageAnnotationDeleterMockRecorder struct {
	mock *MockPackageAnnotationDeleter
}

// NewMockPackageAnnotationDeleter creates a new mock instance.
func NewMockPackageAnnotationDeleter(ctrl *gomock.Controller) *MockPackageAnnotationDeleter {
	mock := &MockPackageAnnotationDeleter{ctrl: ctrl}
	mock.recorder = &MockPackageAnnotationDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageAnnotationDeleter) EXPECT() *MockPackageAnnotationDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockPackageAnnotationDeleter) Delete(o *models.PackageAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPackageAnnotationDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPackageAnnotationDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockPackageAnnotationDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockPackageAnnotationDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockPackageAnnotationDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockPackageAnnotationDeleter) DeleteAllSlice(o models.PackageAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockPackageAnnotationDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockPackageAnnotationDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockPackageAnnotationReloader is a mock of PackageAnnotationReloader interface.
type MockPackageAnnotationReloader struct {
	ctrl     *gomock.Controller
	recorder *MockPackageAnnotationReloaderMockRecorder
}

// MockPackageAnnotationReloaderMockRecorder is the mock recorder for MockPackageAnnotationReloader.
type MockPackageAnnotationReloaderMockRecorder struct {
	mock *MockPackageAnnotationReloader
}

// NewMockPackageAnnotationReloader creates a new mock instance.
func NewMockPackageAnnotationReloader(ctrl *gomock.Controller) *MockPackageAnnotationReloader {
	mock := &MockPackageAnnotationReloader{ctrl: ctrl}
	mock.recorder = &MockPackageAnnotationReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageAnnotationReloader) EXPECT() *MockPackageAnnotationReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockPackageAnnotationReloader) Reload(o *models.PackageAnnotation, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockPackageAnnotationReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockPackageAnnotationReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockPackageAnnotationReloader) ReloadAll(o *models.PackageAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockPackageAnnotationReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockPackageAnnotationReloader)(nil).ReloadAll), o, ctx, exec)
}
