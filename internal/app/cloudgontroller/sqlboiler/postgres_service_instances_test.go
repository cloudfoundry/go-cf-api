// +build integration,postgres
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testServiceInstances(t *testing.T) {
	t.Parallel()

	query := ServiceInstances()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testServiceInstancesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceInstance{}
	if err = randomize.Struct(seed, o, serviceInstanceDBTypes, true, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServiceInstances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServiceInstancesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceInstance{}
	if err = randomize.Struct(seed, o, serviceInstanceDBTypes, true, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ServiceInstances().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServiceInstances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServiceInstancesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceInstance{}
	if err = randomize.Struct(seed, o, serviceInstanceDBTypes, true, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServiceInstanceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServiceInstances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServiceInstancesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceInstance{}
	if err = randomize.Struct(seed, o, serviceInstanceDBTypes, true, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ServiceInstanceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ServiceInstance exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ServiceInstanceExists to return true, but got false.")
	}
}

func testServiceInstancesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceInstance{}
	if err = randomize.Struct(seed, o, serviceInstanceDBTypes, true, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	serviceInstanceFound, err := FindServiceInstance(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if serviceInstanceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testServiceInstancesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceInstance{}
	if err = randomize.Struct(seed, o, serviceInstanceDBTypes, true, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ServiceInstances().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testServiceInstancesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceInstance{}
	if err = randomize.Struct(seed, o, serviceInstanceDBTypes, true, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ServiceInstances().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testServiceInstancesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	serviceInstanceOne := &ServiceInstance{}
	serviceInstanceTwo := &ServiceInstance{}
	if err = randomize.Struct(seed, serviceInstanceOne, serviceInstanceDBTypes, false, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}
	if err = randomize.Struct(seed, serviceInstanceTwo, serviceInstanceDBTypes, false, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serviceInstanceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serviceInstanceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServiceInstances().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testServiceInstancesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	serviceInstanceOne := &ServiceInstance{}
	serviceInstanceTwo := &ServiceInstance{}
	if err = randomize.Struct(seed, serviceInstanceOne, serviceInstanceDBTypes, false, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}
	if err = randomize.Struct(seed, serviceInstanceTwo, serviceInstanceDBTypes, false, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serviceInstanceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serviceInstanceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServiceInstances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func serviceInstanceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServiceInstance) error {
	*o = ServiceInstance{}
	return nil
}

func serviceInstanceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServiceInstance) error {
	*o = ServiceInstance{}
	return nil
}

func serviceInstanceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ServiceInstance) error {
	*o = ServiceInstance{}
	return nil
}

func serviceInstanceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServiceInstance) error {
	*o = ServiceInstance{}
	return nil
}

func serviceInstanceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServiceInstance) error {
	*o = ServiceInstance{}
	return nil
}

func serviceInstanceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServiceInstance) error {
	*o = ServiceInstance{}
	return nil
}

func serviceInstanceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServiceInstance) error {
	*o = ServiceInstance{}
	return nil
}

func serviceInstanceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServiceInstance) error {
	*o = ServiceInstance{}
	return nil
}

func serviceInstanceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServiceInstance) error {
	*o = ServiceInstance{}
	return nil
}

func testServiceInstancesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ServiceInstance{}
	o := &ServiceInstance{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, serviceInstanceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ServiceInstance object: %s", err)
	}

	AddServiceInstanceHook(boil.BeforeInsertHook, serviceInstanceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	serviceInstanceBeforeInsertHooks = []ServiceInstanceHook{}

	AddServiceInstanceHook(boil.AfterInsertHook, serviceInstanceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	serviceInstanceAfterInsertHooks = []ServiceInstanceHook{}

	AddServiceInstanceHook(boil.AfterSelectHook, serviceInstanceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	serviceInstanceAfterSelectHooks = []ServiceInstanceHook{}

	AddServiceInstanceHook(boil.BeforeUpdateHook, serviceInstanceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	serviceInstanceBeforeUpdateHooks = []ServiceInstanceHook{}

	AddServiceInstanceHook(boil.AfterUpdateHook, serviceInstanceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	serviceInstanceAfterUpdateHooks = []ServiceInstanceHook{}

	AddServiceInstanceHook(boil.BeforeDeleteHook, serviceInstanceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	serviceInstanceBeforeDeleteHooks = []ServiceInstanceHook{}

	AddServiceInstanceHook(boil.AfterDeleteHook, serviceInstanceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	serviceInstanceAfterDeleteHooks = []ServiceInstanceHook{}

	AddServiceInstanceHook(boil.BeforeUpsertHook, serviceInstanceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	serviceInstanceBeforeUpsertHooks = []ServiceInstanceHook{}

	AddServiceInstanceHook(boil.AfterUpsertHook, serviceInstanceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	serviceInstanceAfterUpsertHooks = []ServiceInstanceHook{}
}

func testServiceInstancesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceInstance{}
	if err = randomize.Struct(seed, o, serviceInstanceDBTypes, true, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServiceInstances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServiceInstancesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceInstance{}
	if err = randomize.Struct(seed, o, serviceInstanceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(serviceInstanceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ServiceInstances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServiceInstanceToManyRouteBindings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c RouteBinding

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, true, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, routeBindingDBTypes, false, routeBindingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, routeBindingDBTypes, false, routeBindingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ServiceInstanceID, a.ID)
	queries.Assign(&c.ServiceInstanceID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RouteBindings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ServiceInstanceID, b.ServiceInstanceID) {
			bFound = true
		}
		if queries.Equal(v.ServiceInstanceID, c.ServiceInstanceID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ServiceInstanceSlice{&a}
	if err = a.L.LoadRouteBindings(ctx, tx, false, (*[]*ServiceInstance)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RouteBindings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RouteBindings = nil
	if err = a.L.LoadRouteBindings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RouteBindings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testServiceInstanceToManyServiceBindings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c ServiceBinding

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, true, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serviceBindingDBTypes, false, serviceBindingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceBindingDBTypes, false, serviceBindingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ServiceInstanceGUID = a.GUID
	c.ServiceInstanceGUID = a.GUID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ServiceBindings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ServiceInstanceGUID == b.ServiceInstanceGUID {
			bFound = true
		}
		if v.ServiceInstanceGUID == c.ServiceInstanceGUID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ServiceInstanceSlice{&a}
	if err = a.L.LoadServiceBindings(ctx, tx, false, (*[]*ServiceInstance)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ServiceBindings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ServiceBindings = nil
	if err = a.L.LoadServiceBindings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ServiceBindings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testServiceInstanceToManyResourceServiceInstanceAnnotations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c ServiceInstanceAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, true, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serviceInstanceAnnotationDBTypes, false, serviceInstanceAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceInstanceAnnotationDBTypes, false, serviceInstanceAnnotationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceServiceInstanceAnnotations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ServiceInstanceSlice{&a}
	if err = a.L.LoadResourceServiceInstanceAnnotations(ctx, tx, false, (*[]*ServiceInstance)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceServiceInstanceAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceServiceInstanceAnnotations = nil
	if err = a.L.LoadResourceServiceInstanceAnnotations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceServiceInstanceAnnotations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testServiceInstanceToManyResourceServiceInstanceLabels(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c ServiceInstanceLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, true, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serviceInstanceLabelDBTypes, false, serviceInstanceLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceInstanceLabelDBTypes, false, serviceInstanceLabelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ResourceGUID, a.GUID)
	queries.Assign(&c.ResourceGUID, a.GUID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResourceServiceInstanceLabels().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ResourceGUID, b.ResourceGUID) {
			bFound = true
		}
		if queries.Equal(v.ResourceGUID, c.ResourceGUID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ServiceInstanceSlice{&a}
	if err = a.L.LoadResourceServiceInstanceLabels(ctx, tx, false, (*[]*ServiceInstance)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceServiceInstanceLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResourceServiceInstanceLabels = nil
	if err = a.L.LoadResourceServiceInstanceLabels(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResourceServiceInstanceLabels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testServiceInstanceToManyServiceInstanceOperations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c ServiceInstanceOperation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, true, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serviceInstanceOperationDBTypes, false, serviceInstanceOperationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceInstanceOperationDBTypes, false, serviceInstanceOperationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ServiceInstanceID, a.ID)
	queries.Assign(&c.ServiceInstanceID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ServiceInstanceOperations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ServiceInstanceID, b.ServiceInstanceID) {
			bFound = true
		}
		if queries.Equal(v.ServiceInstanceID, c.ServiceInstanceID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ServiceInstanceSlice{&a}
	if err = a.L.LoadServiceInstanceOperations(ctx, tx, false, (*[]*ServiceInstance)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ServiceInstanceOperations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ServiceInstanceOperations = nil
	if err = a.L.LoadServiceInstanceOperations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ServiceInstanceOperations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testServiceInstanceToManySpaces(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c Space

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, true, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, spaceDBTypes, false, spaceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, spaceDBTypes, false, spaceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"service_instance_shares\" (\"service_instance_guid\", \"target_space_guid\") values ($1, $2)", a.GUID, b.GUID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"service_instance_shares\" (\"service_instance_guid\", \"target_space_guid\") values ($1, $2)", a.GUID, c.GUID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Spaces().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GUID == b.GUID {
			bFound = true
		}
		if v.GUID == c.GUID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ServiceInstanceSlice{&a}
	if err = a.L.LoadSpaces(ctx, tx, false, (*[]*ServiceInstance)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Spaces); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Spaces = nil
	if err = a.L.LoadSpaces(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Spaces); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testServiceInstanceToManyServiceKeys(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c ServiceKey

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, true, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serviceKeyDBTypes, false, serviceKeyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceKeyDBTypes, false, serviceKeyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ServiceInstanceID = a.ID
	c.ServiceInstanceID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ServiceKeys().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ServiceInstanceID == b.ServiceInstanceID {
			bFound = true
		}
		if v.ServiceInstanceID == c.ServiceInstanceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ServiceInstanceSlice{&a}
	if err = a.L.LoadServiceKeys(ctx, tx, false, (*[]*ServiceInstance)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ServiceKeys); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ServiceKeys = nil
	if err = a.L.LoadServiceKeys(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ServiceKeys); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testServiceInstanceToManyAddOpRouteBindings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c, d, e RouteBinding

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RouteBinding{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, routeBindingDBTypes, false, strmangle.SetComplement(routeBindingPrimaryKeyColumns, routeBindingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RouteBinding{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRouteBindings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ServiceInstanceID) {
			t.Error("foreign key was wrong value", a.ID, first.ServiceInstanceID)
		}
		if !queries.Equal(a.ID, second.ServiceInstanceID) {
			t.Error("foreign key was wrong value", a.ID, second.ServiceInstanceID)
		}

		if first.R.ServiceInstance != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ServiceInstance != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RouteBindings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RouteBindings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RouteBindings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testServiceInstanceToManySetOpRouteBindings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c, d, e RouteBinding

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RouteBinding{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, routeBindingDBTypes, false, strmangle.SetComplement(routeBindingPrimaryKeyColumns, routeBindingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetRouteBindings(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RouteBindings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetRouteBindings(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RouteBindings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ServiceInstanceID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ServiceInstanceID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ServiceInstanceID) {
		t.Error("foreign key was wrong value", a.ID, d.ServiceInstanceID)
	}
	if !queries.Equal(a.ID, e.ServiceInstanceID) {
		t.Error("foreign key was wrong value", a.ID, e.ServiceInstanceID)
	}

	if b.R.ServiceInstance != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ServiceInstance != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ServiceInstance != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ServiceInstance != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.RouteBindings[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.RouteBindings[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testServiceInstanceToManyRemoveOpRouteBindings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c, d, e RouteBinding

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RouteBinding{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, routeBindingDBTypes, false, strmangle.SetComplement(routeBindingPrimaryKeyColumns, routeBindingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddRouteBindings(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RouteBindings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveRouteBindings(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RouteBindings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ServiceInstanceID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ServiceInstanceID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ServiceInstance != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ServiceInstance != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ServiceInstance != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ServiceInstance != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.RouteBindings) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.RouteBindings[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.RouteBindings[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testServiceInstanceToManyAddOpServiceBindings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c, d, e ServiceBinding

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceBinding{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceBindingDBTypes, false, strmangle.SetComplement(serviceBindingPrimaryKeyColumns, serviceBindingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServiceBinding{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddServiceBindings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.GUID != first.ServiceInstanceGUID {
			t.Error("foreign key was wrong value", a.GUID, first.ServiceInstanceGUID)
		}
		if a.GUID != second.ServiceInstanceGUID {
			t.Error("foreign key was wrong value", a.GUID, second.ServiceInstanceGUID)
		}

		if first.R.ServiceInstance != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ServiceInstance != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ServiceBindings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ServiceBindings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ServiceBindings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testServiceInstanceToManyAddOpResourceServiceInstanceAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c, d, e ServiceInstanceAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceInstanceAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceInstanceAnnotationDBTypes, false, strmangle.SetComplement(serviceInstanceAnnotationPrimaryKeyColumns, serviceInstanceAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServiceInstanceAnnotation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceServiceInstanceAnnotations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceServiceInstanceAnnotations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceServiceInstanceAnnotations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceServiceInstanceAnnotations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testServiceInstanceToManySetOpResourceServiceInstanceAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c, d, e ServiceInstanceAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceInstanceAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceInstanceAnnotationDBTypes, false, strmangle.SetComplement(serviceInstanceAnnotationPrimaryKeyColumns, serviceInstanceAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceServiceInstanceAnnotations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceServiceInstanceAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceServiceInstanceAnnotations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceServiceInstanceAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceServiceInstanceAnnotations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceServiceInstanceAnnotations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testServiceInstanceToManyRemoveOpResourceServiceInstanceAnnotations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c, d, e ServiceInstanceAnnotation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceInstanceAnnotation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceInstanceAnnotationDBTypes, false, strmangle.SetComplement(serviceInstanceAnnotationPrimaryKeyColumns, serviceInstanceAnnotationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceServiceInstanceAnnotations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceServiceInstanceAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceServiceInstanceAnnotations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceServiceInstanceAnnotations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceServiceInstanceAnnotations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceServiceInstanceAnnotations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceServiceInstanceAnnotations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testServiceInstanceToManyAddOpResourceServiceInstanceLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c, d, e ServiceInstanceLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceInstanceLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceInstanceLabelDBTypes, false, strmangle.SetComplement(serviceInstanceLabelPrimaryKeyColumns, serviceInstanceLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServiceInstanceLabel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResourceServiceInstanceLabels(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GUID, first.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, first.ResourceGUID)
		}
		if !queries.Equal(a.GUID, second.ResourceGUID) {
			t.Error("foreign key was wrong value", a.GUID, second.ResourceGUID)
		}

		if first.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResourceServiceInstanceLabels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResourceServiceInstanceLabels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResourceServiceInstanceLabels().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testServiceInstanceToManySetOpResourceServiceInstanceLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c, d, e ServiceInstanceLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceInstanceLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceInstanceLabelDBTypes, false, strmangle.SetComplement(serviceInstanceLabelPrimaryKeyColumns, serviceInstanceLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetResourceServiceInstanceLabels(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceServiceInstanceLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetResourceServiceInstanceLabels(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceServiceInstanceLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GUID, d.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, d.ResourceGUID)
	}
	if !queries.Equal(a.GUID, e.ResourceGUID) {
		t.Error("foreign key was wrong value", a.GUID, e.ResourceGUID)
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Resource != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ResourceServiceInstanceLabels[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ResourceServiceInstanceLabels[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testServiceInstanceToManyRemoveOpResourceServiceInstanceLabels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c, d, e ServiceInstanceLabel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceInstanceLabel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceInstanceLabelDBTypes, false, strmangle.SetComplement(serviceInstanceLabelPrimaryKeyColumns, serviceInstanceLabelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddResourceServiceInstanceLabels(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ResourceServiceInstanceLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveResourceServiceInstanceLabels(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ResourceServiceInstanceLabels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ResourceGUID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ResourceGUID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Resource != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Resource != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ResourceServiceInstanceLabels) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ResourceServiceInstanceLabels[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ResourceServiceInstanceLabels[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testServiceInstanceToManyAddOpServiceInstanceOperations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c, d, e ServiceInstanceOperation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceInstanceOperation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceInstanceOperationDBTypes, false, strmangle.SetComplement(serviceInstanceOperationPrimaryKeyColumns, serviceInstanceOperationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServiceInstanceOperation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddServiceInstanceOperations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ServiceInstanceID) {
			t.Error("foreign key was wrong value", a.ID, first.ServiceInstanceID)
		}
		if !queries.Equal(a.ID, second.ServiceInstanceID) {
			t.Error("foreign key was wrong value", a.ID, second.ServiceInstanceID)
		}

		if first.R.ServiceInstance != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ServiceInstance != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ServiceInstanceOperations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ServiceInstanceOperations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ServiceInstanceOperations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testServiceInstanceToManySetOpServiceInstanceOperations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c, d, e ServiceInstanceOperation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceInstanceOperation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceInstanceOperationDBTypes, false, strmangle.SetComplement(serviceInstanceOperationPrimaryKeyColumns, serviceInstanceOperationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetServiceInstanceOperations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ServiceInstanceOperations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetServiceInstanceOperations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ServiceInstanceOperations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ServiceInstanceID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ServiceInstanceID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ServiceInstanceID) {
		t.Error("foreign key was wrong value", a.ID, d.ServiceInstanceID)
	}
	if !queries.Equal(a.ID, e.ServiceInstanceID) {
		t.Error("foreign key was wrong value", a.ID, e.ServiceInstanceID)
	}

	if b.R.ServiceInstance != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ServiceInstance != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ServiceInstance != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ServiceInstance != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ServiceInstanceOperations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ServiceInstanceOperations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testServiceInstanceToManyRemoveOpServiceInstanceOperations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c, d, e ServiceInstanceOperation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceInstanceOperation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceInstanceOperationDBTypes, false, strmangle.SetComplement(serviceInstanceOperationPrimaryKeyColumns, serviceInstanceOperationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddServiceInstanceOperations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ServiceInstanceOperations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveServiceInstanceOperations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ServiceInstanceOperations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ServiceInstanceID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ServiceInstanceID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ServiceInstance != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ServiceInstance != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ServiceInstance != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ServiceInstance != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ServiceInstanceOperations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ServiceInstanceOperations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ServiceInstanceOperations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testServiceInstanceToManyAddOpSpaces(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c, d, e Space

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Space{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Space{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSpaces(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.SharedServiceInstances[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.SharedServiceInstances[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Spaces[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Spaces[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Spaces().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testServiceInstanceToManySetOpSpaces(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c, d, e Space

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Space{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSpaces(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Spaces().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSpaces(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Spaces().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.SharedServiceInstances) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.SharedServiceInstances) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.SharedServiceInstances[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.SharedServiceInstances[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Spaces[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Spaces[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testServiceInstanceToManyRemoveOpSpaces(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c, d, e Space

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Space{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSpaces(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Spaces().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSpaces(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Spaces().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.SharedServiceInstances) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.SharedServiceInstances) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.SharedServiceInstances[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.SharedServiceInstances[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Spaces) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Spaces[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Spaces[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testServiceInstanceToManyAddOpServiceKeys(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c, d, e ServiceKey

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServiceKey{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serviceKeyDBTypes, false, strmangle.SetComplement(serviceKeyPrimaryKeyColumns, serviceKeyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServiceKey{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddServiceKeys(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ServiceInstanceID {
			t.Error("foreign key was wrong value", a.ID, first.ServiceInstanceID)
		}
		if a.ID != second.ServiceInstanceID {
			t.Error("foreign key was wrong value", a.ID, second.ServiceInstanceID)
		}

		if first.R.ServiceInstance != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ServiceInstance != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ServiceKeys[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ServiceKeys[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ServiceKeys().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testServiceInstanceToOneSpaceUsingSpace(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ServiceInstance
	var foreign Space

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, serviceInstanceDBTypes, false, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, spaceDBTypes, false, spaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Space struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SpaceID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Space().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ServiceInstanceSlice{&local}
	if err = local.L.LoadSpace(ctx, tx, false, (*[]*ServiceInstance)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Space == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Space = nil
	if err = local.L.LoadSpace(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Space == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testServiceInstanceToOneServicePlanUsingServicePlan(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ServiceInstance
	var foreign ServicePlan

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, serviceInstanceDBTypes, true, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, servicePlanDBTypes, false, servicePlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ServicePlanID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ServicePlan().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ServiceInstanceSlice{&local}
	if err = local.L.LoadServicePlan(ctx, tx, false, (*[]*ServiceInstance)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServicePlan == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ServicePlan = nil
	if err = local.L.LoadServicePlan(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServicePlan == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testServiceInstanceToOneSetOpSpaceUsingSpace(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c Space

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, spaceDBTypes, false, strmangle.SetComplement(spacePrimaryKeyColumns, spaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Space{&b, &c} {
		err = a.SetSpace(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Space != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ServiceInstances[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SpaceID != x.ID {
			t.Error("foreign key was wrong value", a.SpaceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SpaceID))
		reflect.Indirect(reflect.ValueOf(&a.SpaceID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SpaceID != x.ID {
			t.Error("foreign key was wrong value", a.SpaceID, x.ID)
		}
	}
}
func testServiceInstanceToOneSetOpServicePlanUsingServicePlan(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b, c ServicePlan

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, servicePlanDBTypes, false, strmangle.SetComplement(servicePlanPrimaryKeyColumns, servicePlanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, servicePlanDBTypes, false, strmangle.SetComplement(servicePlanPrimaryKeyColumns, servicePlanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ServicePlan{&b, &c} {
		err = a.SetServicePlan(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ServicePlan != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ServiceInstances[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ServicePlanID, x.ID) {
			t.Error("foreign key was wrong value", a.ServicePlanID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ServicePlanID))
		reflect.Indirect(reflect.ValueOf(&a.ServicePlanID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ServicePlanID, x.ID) {
			t.Error("foreign key was wrong value", a.ServicePlanID, x.ID)
		}
	}
}

func testServiceInstanceToOneRemoveOpServicePlanUsingServicePlan(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServiceInstance
	var b ServicePlan

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serviceInstanceDBTypes, false, strmangle.SetComplement(serviceInstancePrimaryKeyColumns, serviceInstanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, servicePlanDBTypes, false, strmangle.SetComplement(servicePlanPrimaryKeyColumns, servicePlanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetServicePlan(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveServicePlan(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ServicePlan().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ServicePlan != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ServicePlanID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ServiceInstances) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testServiceInstancesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceInstance{}
	if err = randomize.Struct(seed, o, serviceInstanceDBTypes, true, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServiceInstancesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceInstance{}
	if err = randomize.Struct(seed, o, serviceInstanceDBTypes, true, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServiceInstanceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServiceInstancesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServiceInstance{}
	if err = randomize.Struct(seed, o, serviceInstanceDBTypes, true, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServiceInstances().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	serviceInstanceDBTypes = map[string]string{`ID`: `integer`, `GUID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `Name`: `text`, `Credentials`: `text`, `GatewayName`: `text`, `GatewayData`: `character varying`, `SpaceID`: `integer`, `ServicePlanID`: `integer`, `Salt`: `text`, `DashboardURL`: `character varying`, `IsGatewayService`: `boolean`, `SyslogDrainURL`: `text`, `Tags`: `text`, `RouteServiceURL`: `text`, `EncryptionKeyLabel`: `character varying`, `EncryptionIterations`: `integer`, `MaintenanceInfo`: `text`}
	_                      = bytes.MinRead
)

func testServiceInstancesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(serviceInstancePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(serviceInstanceAllColumns) == len(serviceInstancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServiceInstance{}
	if err = randomize.Struct(seed, o, serviceInstanceDBTypes, true, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServiceInstances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serviceInstanceDBTypes, true, serviceInstancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testServiceInstancesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(serviceInstanceAllColumns) == len(serviceInstancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServiceInstance{}
	if err = randomize.Struct(seed, o, serviceInstanceDBTypes, true, serviceInstanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServiceInstances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serviceInstanceDBTypes, true, serviceInstancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(serviceInstanceAllColumns, serviceInstancePrimaryKeyColumns) {
		fields = serviceInstanceAllColumns
	} else {
		fields = strmangle.SetComplement(
			serviceInstanceAllColumns,
			serviceInstancePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ServiceInstanceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testServiceInstancesUpsert(t *testing.T) {
	t.Parallel()

	if len(serviceInstanceAllColumns) == len(serviceInstancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ServiceInstance{}
	if err = randomize.Struct(seed, &o, serviceInstanceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServiceInstance: %s", err)
	}

	count, err := ServiceInstances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, serviceInstanceDBTypes, false, serviceInstancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServiceInstance struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServiceInstance: %s", err)
	}

	count, err = ServiceInstances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
