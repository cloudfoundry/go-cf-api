// +build mysql
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// KpackLifecycleDatum is an object representing the database table.
type KpackLifecycleDatum struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	GUID        string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	BuildGUID   null.String `boil:"build_guid" json:"build_guid,omitempty" toml:"build_guid" yaml:"build_guid,omitempty"`
	DropletGUID null.String `boil:"droplet_guid" json:"droplet_guid,omitempty" toml:"droplet_guid" yaml:"droplet_guid,omitempty"`
	AppGUID     null.String `boil:"app_guid" json:"app_guid,omitempty" toml:"app_guid" yaml:"app_guid,omitempty"`
	Buildpacks  null.String `boil:"buildpacks" json:"buildpacks,omitempty" toml:"buildpacks" yaml:"buildpacks,omitempty"`

	R *kpackLifecycleDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L kpackLifecycleDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var KpackLifecycleDatumColumns = struct {
	ID          string
	GUID        string
	CreatedAt   string
	UpdatedAt   string
	BuildGUID   string
	DropletGUID string
	AppGUID     string
	Buildpacks  string
}{
	ID:          "id",
	GUID:        "guid",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	BuildGUID:   "build_guid",
	DropletGUID: "droplet_guid",
	AppGUID:     "app_guid",
	Buildpacks:  "buildpacks",
}

var KpackLifecycleDatumTableColumns = struct {
	ID          string
	GUID        string
	CreatedAt   string
	UpdatedAt   string
	BuildGUID   string
	DropletGUID string
	AppGUID     string
	Buildpacks  string
}{
	ID:          "kpack_lifecycle_data.id",
	GUID:        "kpack_lifecycle_data.guid",
	CreatedAt:   "kpack_lifecycle_data.created_at",
	UpdatedAt:   "kpack_lifecycle_data.updated_at",
	BuildGUID:   "kpack_lifecycle_data.build_guid",
	DropletGUID: "kpack_lifecycle_data.droplet_guid",
	AppGUID:     "kpack_lifecycle_data.app_guid",
	Buildpacks:  "kpack_lifecycle_data.buildpacks",
}

// Generated where

var KpackLifecycleDatumWhere = struct {
	ID          whereHelperint
	GUID        whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpernull_Time
	BuildGUID   whereHelpernull_String
	DropletGUID whereHelpernull_String
	AppGUID     whereHelpernull_String
	Buildpacks  whereHelpernull_String
}{
	ID:          whereHelperint{field: "`kpack_lifecycle_data`.`id`"},
	GUID:        whereHelperstring{field: "`kpack_lifecycle_data`.`guid`"},
	CreatedAt:   whereHelpertime_Time{field: "`kpack_lifecycle_data`.`created_at`"},
	UpdatedAt:   whereHelpernull_Time{field: "`kpack_lifecycle_data`.`updated_at`"},
	BuildGUID:   whereHelpernull_String{field: "`kpack_lifecycle_data`.`build_guid`"},
	DropletGUID: whereHelpernull_String{field: "`kpack_lifecycle_data`.`droplet_guid`"},
	AppGUID:     whereHelpernull_String{field: "`kpack_lifecycle_data`.`app_guid`"},
	Buildpacks:  whereHelpernull_String{field: "`kpack_lifecycle_data`.`buildpacks`"},
}

// KpackLifecycleDatumRels is where relationship names are stored.
var KpackLifecycleDatumRels = struct {
	App   string
	Build string
}{
	App:   "App",
	Build: "Build",
}

// kpackLifecycleDatumR is where relationships are stored.
type kpackLifecycleDatumR struct {
	App   *App   `boil:"App" json:"App" toml:"App" yaml:"App"`
	Build *Build `boil:"Build" json:"Build" toml:"Build" yaml:"Build"`
}

// NewStruct creates a new relationship struct
func (*kpackLifecycleDatumR) NewStruct() *kpackLifecycleDatumR {
	return &kpackLifecycleDatumR{}
}

// kpackLifecycleDatumL is where Load methods for each relationship are stored.
type kpackLifecycleDatumL struct{}

var (
	kpackLifecycleDatumAllColumns            = []string{"id", "guid", "created_at", "updated_at", "build_guid", "droplet_guid", "app_guid", "buildpacks"}
	kpackLifecycleDatumColumnsWithoutDefault = []string{"guid", "updated_at", "build_guid", "droplet_guid", "app_guid"}
	kpackLifecycleDatumColumnsWithDefault    = []string{"id", "created_at", "buildpacks"}
	kpackLifecycleDatumPrimaryKeyColumns     = []string{"id"}
)

type (
	// KpackLifecycleDatumSlice is an alias for a slice of pointers to KpackLifecycleDatum.
	// This should almost always be used instead of []KpackLifecycleDatum.
	KpackLifecycleDatumSlice []*KpackLifecycleDatum

	kpackLifecycleDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	kpackLifecycleDatumType                 = reflect.TypeOf(&KpackLifecycleDatum{})
	kpackLifecycleDatumMapping              = queries.MakeStructMapping(kpackLifecycleDatumType)
	kpackLifecycleDatumPrimaryKeyMapping, _ = queries.BindMapping(kpackLifecycleDatumType, kpackLifecycleDatumMapping, kpackLifecycleDatumPrimaryKeyColumns)
	kpackLifecycleDatumInsertCacheMut       sync.RWMutex
	kpackLifecycleDatumInsertCache          = make(map[string]insertCache)
	kpackLifecycleDatumUpdateCacheMut       sync.RWMutex
	kpackLifecycleDatumUpdateCache          = make(map[string]updateCache)
	kpackLifecycleDatumUpsertCacheMut       sync.RWMutex
	kpackLifecycleDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

type KpackLifecycleDatumFinisher interface {
	One(ctx context.Context, exec boil.ContextExecutor) (*KpackLifecycleDatum, error)
	Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	All(ctx context.Context, exec boil.ContextExecutor) (KpackLifecycleDatumSlice, error)
	Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)
}

// One returns a single kpackLifecycleDatum record from the query.
func (q kpackLifecycleDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*KpackLifecycleDatum, error) {
	o := &KpackLifecycleDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for kpack_lifecycle_data")
	}

	return o, nil
}

// All returns all KpackLifecycleDatum records from the query.
func (q kpackLifecycleDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (KpackLifecycleDatumSlice, error) {
	var o []*KpackLifecycleDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to KpackLifecycleDatum slice")
	}

	return o, nil
}

// Count returns the count of all KpackLifecycleDatum records in the query.
func (q kpackLifecycleDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count kpack_lifecycle_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q kpackLifecycleDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if kpack_lifecycle_data exists")
	}

	return count > 0, nil
}

// App pointed to by the foreign key.
func (q kpackLifecycleDatumQuery) App(o *KpackLifecycleDatum, mods ...qm.QueryMod) appQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`guid` = ?", o.AppGUID),
	}

	queryMods = append(queryMods, mods...)

	query := Apps(queryMods...)
	queries.SetFrom(query.Query, "`apps`")

	return query
}

// Build pointed to by the foreign key.
func (q kpackLifecycleDatumQuery) Build(o *KpackLifecycleDatum, mods ...qm.QueryMod) buildQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`guid` = ?", o.BuildGUID),
	}

	queryMods = append(queryMods, mods...)

	query := Builds(queryMods...)
	queries.SetFrom(query.Query, "`builds`")

	return query
}

// LoadApp allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (kpackLifecycleDatumL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeKpackLifecycleDatum interface{}, mods queries.Applicator) error {
	var slice []*KpackLifecycleDatum
	var object *KpackLifecycleDatum

	if singular {
		object = maybeKpackLifecycleDatum.(*KpackLifecycleDatum)
	} else {
		slice = *maybeKpackLifecycleDatum.(*[]*KpackLifecycleDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &kpackLifecycleDatumR{}
		}
		if !queries.IsNil(object.AppGUID) {
			args = append(args, object.AppGUID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &kpackLifecycleDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AppGUID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AppGUID) {
				args = append(args, obj.AppGUID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`apps`),
		qm.WhereIn(`apps.guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load App")
	}

	var resultSlice []*App
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice App")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for apps")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for apps")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.App = foreign
		if foreign.R == nil {
			foreign.R = &appR{}
		}
		foreign.R.KpackLifecycleData = append(foreign.R.KpackLifecycleData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AppGUID, foreign.GUID) {
				local.R.App = foreign
				if foreign.R == nil {
					foreign.R = &appR{}
				}
				foreign.R.KpackLifecycleData = append(foreign.R.KpackLifecycleData, local)
				break
			}
		}
	}

	return nil
}

// LoadBuild allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (kpackLifecycleDatumL) LoadBuild(ctx context.Context, e boil.ContextExecutor, singular bool, maybeKpackLifecycleDatum interface{}, mods queries.Applicator) error {
	var slice []*KpackLifecycleDatum
	var object *KpackLifecycleDatum

	if singular {
		object = maybeKpackLifecycleDatum.(*KpackLifecycleDatum)
	} else {
		slice = *maybeKpackLifecycleDatum.(*[]*KpackLifecycleDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &kpackLifecycleDatumR{}
		}
		if !queries.IsNil(object.BuildGUID) {
			args = append(args, object.BuildGUID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &kpackLifecycleDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BuildGUID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BuildGUID) {
				args = append(args, obj.BuildGUID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`builds`),
		qm.WhereIn(`builds.guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Build")
	}

	var resultSlice []*Build
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Build")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for builds")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for builds")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Build = foreign
		if foreign.R == nil {
			foreign.R = &buildR{}
		}
		foreign.R.KpackLifecycleData = append(foreign.R.KpackLifecycleData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BuildGUID, foreign.GUID) {
				local.R.Build = foreign
				if foreign.R == nil {
					foreign.R = &buildR{}
				}
				foreign.R.KpackLifecycleData = append(foreign.R.KpackLifecycleData, local)
				break
			}
		}
	}

	return nil
}

// SetApp of the kpackLifecycleDatum to the related item.
// Sets o.R.App to related.
// Adds o to related.R.KpackLifecycleData.
func (q kpackLifecycleDatumQuery) SetApp(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, insert bool, related *App) error {
	var err error
	if insert {
		if err = Apps().Insert(related, ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `kpack_lifecycle_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"app_guid"}),
		strmangle.WhereClause("`", "`", 0, kpackLifecycleDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.GUID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AppGUID, related.GUID)
	if o.R == nil {
		o.R = &kpackLifecycleDatumR{
			App: related,
		}
	} else {
		o.R.App = related
	}

	if related.R == nil {
		related.R = &appR{
			KpackLifecycleData: KpackLifecycleDatumSlice{o},
		}
	} else {
		related.R.KpackLifecycleData = append(related.R.KpackLifecycleData, o)
	}

	return nil
}

// RemoveApp relationship.
// Sets o.R.App to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (q kpackLifecycleDatumQuery) RemoveApp(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, related *App) error {
	var err error

	queries.SetScanner(&o.AppGUID, nil)
	if _, err = q.Update(o, ctx, exec, boil.Whitelist("app_guid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.App = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.KpackLifecycleData {
		if queries.Equal(o.AppGUID, ri.AppGUID) {
			continue
		}

		ln := len(related.R.KpackLifecycleData)
		if ln > 1 && i < ln-1 {
			related.R.KpackLifecycleData[i] = related.R.KpackLifecycleData[ln-1]
		}
		related.R.KpackLifecycleData = related.R.KpackLifecycleData[:ln-1]
		break
	}
	return nil
}

// SetBuild of the kpackLifecycleDatum to the related item.
// Sets o.R.Build to related.
// Adds o to related.R.KpackLifecycleData.
func (q kpackLifecycleDatumQuery) SetBuild(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Build) error {
	var err error
	if insert {
		if err = Builds().Insert(related, ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `kpack_lifecycle_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"build_guid"}),
		strmangle.WhereClause("`", "`", 0, kpackLifecycleDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.GUID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BuildGUID, related.GUID)
	if o.R == nil {
		o.R = &kpackLifecycleDatumR{
			Build: related,
		}
	} else {
		o.R.Build = related
	}

	if related.R == nil {
		related.R = &buildR{
			KpackLifecycleData: KpackLifecycleDatumSlice{o},
		}
	} else {
		related.R.KpackLifecycleData = append(related.R.KpackLifecycleData, o)
	}

	return nil
}

// RemoveBuild relationship.
// Sets o.R.Build to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (q kpackLifecycleDatumQuery) RemoveBuild(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, related *Build) error {
	var err error

	queries.SetScanner(&o.BuildGUID, nil)
	if _, err = q.Update(o, ctx, exec, boil.Whitelist("build_guid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Build = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.KpackLifecycleData {
		if queries.Equal(o.BuildGUID, ri.BuildGUID) {
			continue
		}

		ln := len(related.R.KpackLifecycleData)
		if ln > 1 && i < ln-1 {
			related.R.KpackLifecycleData[i] = related.R.KpackLifecycleData[ln-1]
		}
		related.R.KpackLifecycleData = related.R.KpackLifecycleData[:ln-1]
		break
	}
	return nil
}

// KpackLifecycleData retrieves all the records using an executor.
func KpackLifecycleData(mods ...qm.QueryMod) kpackLifecycleDatumQuery {
	mods = append(mods, qm.From("`kpack_lifecycle_data`"))
	return kpackLifecycleDatumQuery{NewQuery(mods...)}
}

type KpackLifecycleDatumFinder interface {
	FindKpackLifecycleDatum(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*KpackLifecycleDatum, error)
}

// FindKpackLifecycleDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindKpackLifecycleDatum(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*KpackLifecycleDatum, error) {
	kpackLifecycleDatumObj := &KpackLifecycleDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `kpack_lifecycle_data` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, kpackLifecycleDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from kpack_lifecycle_data")
	}

	return kpackLifecycleDatumObj, nil
}

type KpackLifecycleDatumInserter interface {
	Insert(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (q kpackLifecycleDatumQuery) Insert(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no kpack_lifecycle_data provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(kpackLifecycleDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	kpackLifecycleDatumInsertCacheMut.RLock()
	cache, cached := kpackLifecycleDatumInsertCache[key]
	kpackLifecycleDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			kpackLifecycleDatumAllColumns,
			kpackLifecycleDatumColumnsWithDefault,
			kpackLifecycleDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(kpackLifecycleDatumType, kpackLifecycleDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(kpackLifecycleDatumType, kpackLifecycleDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `kpack_lifecycle_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `kpack_lifecycle_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `kpack_lifecycle_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, kpackLifecycleDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into kpack_lifecycle_data")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == kpackLifecycleDatumMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for kpack_lifecycle_data")
	}

CacheNoHooks:
	if !cached {
		kpackLifecycleDatumInsertCacheMut.Lock()
		kpackLifecycleDatumInsertCache[key] = cache
		kpackLifecycleDatumInsertCacheMut.Unlock()
	}

	return nil
}

type KpackLifecycleDatumUpdater interface {
	Update(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)
	UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
	UpdateAllSlice(o KpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
}

// Update uses an executor to update the KpackLifecycleDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (q kpackLifecycleDatumQuery) Update(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	kpackLifecycleDatumUpdateCacheMut.RLock()
	cache, cached := kpackLifecycleDatumUpdateCache[key]
	kpackLifecycleDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			kpackLifecycleDatumAllColumns,
			kpackLifecycleDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update kpack_lifecycle_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `kpack_lifecycle_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, kpackLifecycleDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(kpackLifecycleDatumType, kpackLifecycleDatumMapping, append(wl, kpackLifecycleDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update kpack_lifecycle_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for kpack_lifecycle_data")
	}

	if !cached {
		kpackLifecycleDatumUpdateCacheMut.Lock()
		kpackLifecycleDatumUpdateCache[key] = cache
		kpackLifecycleDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q kpackLifecycleDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for kpack_lifecycle_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for kpack_lifecycle_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (q kpackLifecycleDatumQuery) UpdateAllSlice(o KpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), kpackLifecycleDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `kpack_lifecycle_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, kpackLifecycleDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in kpackLifecycleDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all kpackLifecycleDatum")
	}
	return rowsAff, nil
}

type KpackLifecycleDatumDeleter interface {
	Delete(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAllSlice(o KpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)
}

// Delete deletes a single KpackLifecycleDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (q kpackLifecycleDatumQuery) Delete(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no KpackLifecycleDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), kpackLifecycleDatumPrimaryKeyMapping)
	sql := "DELETE FROM `kpack_lifecycle_data` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from kpack_lifecycle_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for kpack_lifecycle_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q kpackLifecycleDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no kpackLifecycleDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from kpack_lifecycle_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for kpack_lifecycle_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (q kpackLifecycleDatumQuery) DeleteAllSlice(o KpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), kpackLifecycleDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `kpack_lifecycle_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, kpackLifecycleDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from kpackLifecycleDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for kpack_lifecycle_data")
	}

	return rowsAff, nil
}

type KpackLifecycleDatumReloader interface {
	Reload(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor) error
	ReloadAll(o *KpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor) error
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (q kpackLifecycleDatumQuery) Reload(o *KpackLifecycleDatum, ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindKpackLifecycleDatum(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (q kpackLifecycleDatumQuery) ReloadAll(o *KpackLifecycleDatumSlice, ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := KpackLifecycleDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), kpackLifecycleDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `kpack_lifecycle_data`.* FROM `kpack_lifecycle_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, kpackLifecycleDatumPrimaryKeyColumns, len(*o))

	query := queries.Raw(sql, args...)

	err := query.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in KpackLifecycleDatumSlice")
	}

	*o = slice

	return nil
}

// KpackLifecycleDatumExists checks if the KpackLifecycleDatum row exists.
func KpackLifecycleDatumExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `kpack_lifecycle_data` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if kpack_lifecycle_data exists")
	}

	return exists, nil
}

var mySQLKpackLifecycleDatumUniqueColumns = []string{
	"id",
	"guid",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *KpackLifecycleDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no kpack_lifecycle_data provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(kpackLifecycleDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLKpackLifecycleDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	kpackLifecycleDatumUpsertCacheMut.RLock()
	cache, cached := kpackLifecycleDatumUpsertCache[key]
	kpackLifecycleDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			kpackLifecycleDatumAllColumns,
			kpackLifecycleDatumColumnsWithDefault,
			kpackLifecycleDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			kpackLifecycleDatumAllColumns,
			kpackLifecycleDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert kpack_lifecycle_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`kpack_lifecycle_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `kpack_lifecycle_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(kpackLifecycleDatumType, kpackLifecycleDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(kpackLifecycleDatumType, kpackLifecycleDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for kpack_lifecycle_data")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == kpackLifecycleDatumMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(kpackLifecycleDatumType, kpackLifecycleDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for kpack_lifecycle_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for kpack_lifecycle_data")
	}

CacheNoHooks:
	if !cached {
		kpackLifecycleDatumUpsertCacheMut.Lock()
		kpackLifecycleDatumUpsertCache[key] = cache
		kpackLifecycleDatumUpsertCacheMut.Unlock()
	}

	return nil
}
