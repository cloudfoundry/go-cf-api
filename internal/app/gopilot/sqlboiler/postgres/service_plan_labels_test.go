// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testServicePlanLabels(t *testing.T) {
	t.Parallel()

	query := ServicePlanLabels()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testServicePlanLabelsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlanLabel{}
	if err = randomize.Struct(seed, o, servicePlanLabelDBTypes, true, servicePlanLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlanLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServicePlanLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServicePlanLabelsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlanLabel{}
	if err = randomize.Struct(seed, o, servicePlanLabelDBTypes, true, servicePlanLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlanLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ServicePlanLabels().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServicePlanLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServicePlanLabelsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlanLabel{}
	if err = randomize.Struct(seed, o, servicePlanLabelDBTypes, true, servicePlanLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlanLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServicePlanLabelSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServicePlanLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServicePlanLabelsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlanLabel{}
	if err = randomize.Struct(seed, o, servicePlanLabelDBTypes, true, servicePlanLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlanLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ServicePlanLabelExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ServicePlanLabel exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ServicePlanLabelExists to return true, but got false.")
	}
}

func testServicePlanLabelsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlanLabel{}
	if err = randomize.Struct(seed, o, servicePlanLabelDBTypes, true, servicePlanLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlanLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	servicePlanLabelFound, err := FindServicePlanLabel(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if servicePlanLabelFound == nil {
		t.Error("want a record, got nil")
	}
}

func testServicePlanLabelsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlanLabel{}
	if err = randomize.Struct(seed, o, servicePlanLabelDBTypes, true, servicePlanLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlanLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ServicePlanLabels().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testServicePlanLabelsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlanLabel{}
	if err = randomize.Struct(seed, o, servicePlanLabelDBTypes, true, servicePlanLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlanLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ServicePlanLabels().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testServicePlanLabelsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	servicePlanLabelOne := &ServicePlanLabel{}
	servicePlanLabelTwo := &ServicePlanLabel{}
	if err = randomize.Struct(seed, servicePlanLabelOne, servicePlanLabelDBTypes, false, servicePlanLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlanLabel struct: %s", err)
	}
	if err = randomize.Struct(seed, servicePlanLabelTwo, servicePlanLabelDBTypes, false, servicePlanLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlanLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = servicePlanLabelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = servicePlanLabelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServicePlanLabels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testServicePlanLabelsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	servicePlanLabelOne := &ServicePlanLabel{}
	servicePlanLabelTwo := &ServicePlanLabel{}
	if err = randomize.Struct(seed, servicePlanLabelOne, servicePlanLabelDBTypes, false, servicePlanLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlanLabel struct: %s", err)
	}
	if err = randomize.Struct(seed, servicePlanLabelTwo, servicePlanLabelDBTypes, false, servicePlanLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlanLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = servicePlanLabelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = servicePlanLabelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServicePlanLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func servicePlanLabelBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServicePlanLabel) error {
	*o = ServicePlanLabel{}
	return nil
}

func servicePlanLabelAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServicePlanLabel) error {
	*o = ServicePlanLabel{}
	return nil
}

func servicePlanLabelAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ServicePlanLabel) error {
	*o = ServicePlanLabel{}
	return nil
}

func servicePlanLabelBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServicePlanLabel) error {
	*o = ServicePlanLabel{}
	return nil
}

func servicePlanLabelAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServicePlanLabel) error {
	*o = ServicePlanLabel{}
	return nil
}

func servicePlanLabelBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServicePlanLabel) error {
	*o = ServicePlanLabel{}
	return nil
}

func servicePlanLabelAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServicePlanLabel) error {
	*o = ServicePlanLabel{}
	return nil
}

func servicePlanLabelBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServicePlanLabel) error {
	*o = ServicePlanLabel{}
	return nil
}

func servicePlanLabelAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServicePlanLabel) error {
	*o = ServicePlanLabel{}
	return nil
}

func testServicePlanLabelsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ServicePlanLabel{}
	o := &ServicePlanLabel{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, servicePlanLabelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ServicePlanLabel object: %s", err)
	}

	AddServicePlanLabelHook(boil.BeforeInsertHook, servicePlanLabelBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	servicePlanLabelBeforeInsertHooks = []ServicePlanLabelHook{}

	AddServicePlanLabelHook(boil.AfterInsertHook, servicePlanLabelAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	servicePlanLabelAfterInsertHooks = []ServicePlanLabelHook{}

	AddServicePlanLabelHook(boil.AfterSelectHook, servicePlanLabelAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	servicePlanLabelAfterSelectHooks = []ServicePlanLabelHook{}

	AddServicePlanLabelHook(boil.BeforeUpdateHook, servicePlanLabelBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	servicePlanLabelBeforeUpdateHooks = []ServicePlanLabelHook{}

	AddServicePlanLabelHook(boil.AfterUpdateHook, servicePlanLabelAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	servicePlanLabelAfterUpdateHooks = []ServicePlanLabelHook{}

	AddServicePlanLabelHook(boil.BeforeDeleteHook, servicePlanLabelBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	servicePlanLabelBeforeDeleteHooks = []ServicePlanLabelHook{}

	AddServicePlanLabelHook(boil.AfterDeleteHook, servicePlanLabelAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	servicePlanLabelAfterDeleteHooks = []ServicePlanLabelHook{}

	AddServicePlanLabelHook(boil.BeforeUpsertHook, servicePlanLabelBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	servicePlanLabelBeforeUpsertHooks = []ServicePlanLabelHook{}

	AddServicePlanLabelHook(boil.AfterUpsertHook, servicePlanLabelAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	servicePlanLabelAfterUpsertHooks = []ServicePlanLabelHook{}
}

func testServicePlanLabelsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlanLabel{}
	if err = randomize.Struct(seed, o, servicePlanLabelDBTypes, true, servicePlanLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlanLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServicePlanLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServicePlanLabelsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlanLabel{}
	if err = randomize.Struct(seed, o, servicePlanLabelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServicePlanLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(servicePlanLabelColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ServicePlanLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServicePlanLabelToOneServicePlanUsingResource(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ServicePlanLabel
	var foreign ServicePlan

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, servicePlanLabelDBTypes, true, servicePlanLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlanLabel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, servicePlanDBTypes, false, servicePlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlan struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ResourceGUID, foreign.GUID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Resource().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.GUID, foreign.GUID) {
		t.Errorf("want: %v, got %v", foreign.GUID, check.GUID)
	}

	slice := ServicePlanLabelSlice{&local}
	if err = local.L.LoadResource(ctx, tx, false, (*[]*ServicePlanLabel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Resource == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Resource = nil
	if err = local.L.LoadResource(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Resource == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testServicePlanLabelToOneSetOpServicePlanUsingResource(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServicePlanLabel
	var b, c ServicePlan

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, servicePlanLabelDBTypes, false, strmangle.SetComplement(servicePlanLabelPrimaryKeyColumns, servicePlanLabelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, servicePlanDBTypes, false, strmangle.SetComplement(servicePlanPrimaryKeyColumns, servicePlanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, servicePlanDBTypes, false, strmangle.SetComplement(servicePlanPrimaryKeyColumns, servicePlanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ServicePlan{&b, &c} {
		err = a.SetResource(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Resource != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ResourceServicePlanLabels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ResourceGUID, x.GUID) {
			t.Error("foreign key was wrong value", a.ResourceGUID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ResourceGUID))
		reflect.Indirect(reflect.ValueOf(&a.ResourceGUID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ResourceGUID, x.GUID) {
			t.Error("foreign key was wrong value", a.ResourceGUID, x.GUID)
		}
	}
}

func testServicePlanLabelToOneRemoveOpServicePlanUsingResource(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServicePlanLabel
	var b ServicePlan

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, servicePlanLabelDBTypes, false, strmangle.SetComplement(servicePlanLabelPrimaryKeyColumns, servicePlanLabelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, servicePlanDBTypes, false, strmangle.SetComplement(servicePlanPrimaryKeyColumns, servicePlanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetResource(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveResource(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Resource().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Resource != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ResourceGUID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ResourceServicePlanLabels) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testServicePlanLabelsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlanLabel{}
	if err = randomize.Struct(seed, o, servicePlanLabelDBTypes, true, servicePlanLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlanLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServicePlanLabelsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlanLabel{}
	if err = randomize.Struct(seed, o, servicePlanLabelDBTypes, true, servicePlanLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlanLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServicePlanLabelSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServicePlanLabelsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlanLabel{}
	if err = randomize.Struct(seed, o, servicePlanLabelDBTypes, true, servicePlanLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlanLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServicePlanLabels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	servicePlanLabelDBTypes = map[string]string{`ID`: `integer`, `GUID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `ResourceGUID`: `character varying`, `KeyPrefix`: `character varying`, `KeyName`: `character varying`, `Value`: `character varying`}
	_                       = bytes.MinRead
)

func testServicePlanLabelsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(servicePlanLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(servicePlanLabelAllColumns) == len(servicePlanLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlanLabel{}
	if err = randomize.Struct(seed, o, servicePlanLabelDBTypes, true, servicePlanLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlanLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServicePlanLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, servicePlanLabelDBTypes, true, servicePlanLabelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServicePlanLabel struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testServicePlanLabelsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(servicePlanLabelAllColumns) == len(servicePlanLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServicePlanLabel{}
	if err = randomize.Struct(seed, o, servicePlanLabelDBTypes, true, servicePlanLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServicePlanLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServicePlanLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, servicePlanLabelDBTypes, true, servicePlanLabelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServicePlanLabel struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(servicePlanLabelAllColumns, servicePlanLabelPrimaryKeyColumns) {
		fields = servicePlanLabelAllColumns
	} else {
		fields = strmangle.SetComplement(
			servicePlanLabelAllColumns,
			servicePlanLabelPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ServicePlanLabelSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testServicePlanLabelsUpsert(t *testing.T) {
	t.Parallel()

	if len(servicePlanLabelAllColumns) == len(servicePlanLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ServicePlanLabel{}
	if err = randomize.Struct(seed, &o, servicePlanLabelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServicePlanLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServicePlanLabel: %s", err)
	}

	count, err := ServicePlanLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, servicePlanLabelDBTypes, false, servicePlanLabelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServicePlanLabel struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServicePlanLabel: %s", err)
	}

	count, err = ServicePlanLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
