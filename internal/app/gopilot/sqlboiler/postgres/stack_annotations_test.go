// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStackAnnotations(t *testing.T) {
	t.Parallel()

	query := StackAnnotations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStackAnnotationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StackAnnotation{}
	if err = randomize.Struct(seed, o, stackAnnotationDBTypes, true, stackAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StackAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StackAnnotations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStackAnnotationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StackAnnotation{}
	if err = randomize.Struct(seed, o, stackAnnotationDBTypes, true, stackAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StackAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := StackAnnotations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StackAnnotations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStackAnnotationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StackAnnotation{}
	if err = randomize.Struct(seed, o, stackAnnotationDBTypes, true, stackAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StackAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StackAnnotationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StackAnnotations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStackAnnotationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StackAnnotation{}
	if err = randomize.Struct(seed, o, stackAnnotationDBTypes, true, stackAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StackAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StackAnnotationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if StackAnnotation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StackAnnotationExists to return true, but got false.")
	}
}

func testStackAnnotationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StackAnnotation{}
	if err = randomize.Struct(seed, o, stackAnnotationDBTypes, true, stackAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StackAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	stackAnnotationFound, err := FindStackAnnotation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if stackAnnotationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStackAnnotationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StackAnnotation{}
	if err = randomize.Struct(seed, o, stackAnnotationDBTypes, true, stackAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StackAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = StackAnnotations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStackAnnotationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StackAnnotation{}
	if err = randomize.Struct(seed, o, stackAnnotationDBTypes, true, stackAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StackAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := StackAnnotations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStackAnnotationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	stackAnnotationOne := &StackAnnotation{}
	stackAnnotationTwo := &StackAnnotation{}
	if err = randomize.Struct(seed, stackAnnotationOne, stackAnnotationDBTypes, false, stackAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StackAnnotation struct: %s", err)
	}
	if err = randomize.Struct(seed, stackAnnotationTwo, stackAnnotationDBTypes, false, stackAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StackAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = stackAnnotationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = stackAnnotationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StackAnnotations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStackAnnotationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	stackAnnotationOne := &StackAnnotation{}
	stackAnnotationTwo := &StackAnnotation{}
	if err = randomize.Struct(seed, stackAnnotationOne, stackAnnotationDBTypes, false, stackAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StackAnnotation struct: %s", err)
	}
	if err = randomize.Struct(seed, stackAnnotationTwo, stackAnnotationDBTypes, false, stackAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StackAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = stackAnnotationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = stackAnnotationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StackAnnotations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func stackAnnotationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *StackAnnotation) error {
	*o = StackAnnotation{}
	return nil
}

func stackAnnotationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *StackAnnotation) error {
	*o = StackAnnotation{}
	return nil
}

func stackAnnotationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *StackAnnotation) error {
	*o = StackAnnotation{}
	return nil
}

func stackAnnotationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StackAnnotation) error {
	*o = StackAnnotation{}
	return nil
}

func stackAnnotationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StackAnnotation) error {
	*o = StackAnnotation{}
	return nil
}

func stackAnnotationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StackAnnotation) error {
	*o = StackAnnotation{}
	return nil
}

func stackAnnotationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StackAnnotation) error {
	*o = StackAnnotation{}
	return nil
}

func stackAnnotationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StackAnnotation) error {
	*o = StackAnnotation{}
	return nil
}

func stackAnnotationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StackAnnotation) error {
	*o = StackAnnotation{}
	return nil
}

func testStackAnnotationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &StackAnnotation{}
	o := &StackAnnotation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, stackAnnotationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize StackAnnotation object: %s", err)
	}

	AddStackAnnotationHook(boil.BeforeInsertHook, stackAnnotationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	stackAnnotationBeforeInsertHooks = []StackAnnotationHook{}

	AddStackAnnotationHook(boil.AfterInsertHook, stackAnnotationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	stackAnnotationAfterInsertHooks = []StackAnnotationHook{}

	AddStackAnnotationHook(boil.AfterSelectHook, stackAnnotationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	stackAnnotationAfterSelectHooks = []StackAnnotationHook{}

	AddStackAnnotationHook(boil.BeforeUpdateHook, stackAnnotationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	stackAnnotationBeforeUpdateHooks = []StackAnnotationHook{}

	AddStackAnnotationHook(boil.AfterUpdateHook, stackAnnotationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	stackAnnotationAfterUpdateHooks = []StackAnnotationHook{}

	AddStackAnnotationHook(boil.BeforeDeleteHook, stackAnnotationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	stackAnnotationBeforeDeleteHooks = []StackAnnotationHook{}

	AddStackAnnotationHook(boil.AfterDeleteHook, stackAnnotationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	stackAnnotationAfterDeleteHooks = []StackAnnotationHook{}

	AddStackAnnotationHook(boil.BeforeUpsertHook, stackAnnotationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	stackAnnotationBeforeUpsertHooks = []StackAnnotationHook{}

	AddStackAnnotationHook(boil.AfterUpsertHook, stackAnnotationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	stackAnnotationAfterUpsertHooks = []StackAnnotationHook{}
}

func testStackAnnotationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StackAnnotation{}
	if err = randomize.Struct(seed, o, stackAnnotationDBTypes, true, stackAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StackAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StackAnnotations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStackAnnotationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StackAnnotation{}
	if err = randomize.Struct(seed, o, stackAnnotationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StackAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(stackAnnotationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := StackAnnotations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStackAnnotationToOneStackUsingResource(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local StackAnnotation
	var foreign Stack

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, stackAnnotationDBTypes, true, stackAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StackAnnotation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, stackDBTypes, false, stackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stack struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ResourceGUID, foreign.GUID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Resource().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.GUID, foreign.GUID) {
		t.Errorf("want: %v, got %v", foreign.GUID, check.GUID)
	}

	slice := StackAnnotationSlice{&local}
	if err = local.L.LoadResource(ctx, tx, false, (*[]*StackAnnotation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Resource == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Resource = nil
	if err = local.L.LoadResource(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Resource == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testStackAnnotationToOneSetOpStackUsingResource(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StackAnnotation
	var b, c Stack

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stackAnnotationDBTypes, false, strmangle.SetComplement(stackAnnotationPrimaryKeyColumns, stackAnnotationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, stackDBTypes, false, strmangle.SetComplement(stackPrimaryKeyColumns, stackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, stackDBTypes, false, strmangle.SetComplement(stackPrimaryKeyColumns, stackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Stack{&b, &c} {
		err = a.SetResource(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Resource != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ResourceStackAnnotations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ResourceGUID, x.GUID) {
			t.Error("foreign key was wrong value", a.ResourceGUID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ResourceGUID))
		reflect.Indirect(reflect.ValueOf(&a.ResourceGUID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ResourceGUID, x.GUID) {
			t.Error("foreign key was wrong value", a.ResourceGUID, x.GUID)
		}
	}
}

func testStackAnnotationToOneRemoveOpStackUsingResource(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StackAnnotation
	var b Stack

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stackAnnotationDBTypes, false, strmangle.SetComplement(stackAnnotationPrimaryKeyColumns, stackAnnotationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, stackDBTypes, false, strmangle.SetComplement(stackPrimaryKeyColumns, stackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetResource(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveResource(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Resource().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Resource != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ResourceGUID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ResourceStackAnnotations) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testStackAnnotationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StackAnnotation{}
	if err = randomize.Struct(seed, o, stackAnnotationDBTypes, true, stackAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StackAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStackAnnotationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StackAnnotation{}
	if err = randomize.Struct(seed, o, stackAnnotationDBTypes, true, stackAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StackAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StackAnnotationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStackAnnotationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StackAnnotation{}
	if err = randomize.Struct(seed, o, stackAnnotationDBTypes, true, stackAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StackAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StackAnnotations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	stackAnnotationDBTypes = map[string]string{`ID`: `integer`, `GUID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `ResourceGUID`: `character varying`, `KeyPrefix`: `character varying`, `Key`: `character varying`, `Value`: `character varying`}
	_                      = bytes.MinRead
)

func testStackAnnotationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(stackAnnotationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(stackAnnotationAllColumns) == len(stackAnnotationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StackAnnotation{}
	if err = randomize.Struct(seed, o, stackAnnotationDBTypes, true, stackAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StackAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StackAnnotations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, stackAnnotationDBTypes, true, stackAnnotationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StackAnnotation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStackAnnotationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(stackAnnotationAllColumns) == len(stackAnnotationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StackAnnotation{}
	if err = randomize.Struct(seed, o, stackAnnotationDBTypes, true, stackAnnotationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StackAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StackAnnotations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, stackAnnotationDBTypes, true, stackAnnotationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StackAnnotation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(stackAnnotationAllColumns, stackAnnotationPrimaryKeyColumns) {
		fields = stackAnnotationAllColumns
	} else {
		fields = strmangle.SetComplement(
			stackAnnotationAllColumns,
			stackAnnotationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StackAnnotationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStackAnnotationsUpsert(t *testing.T) {
	t.Parallel()

	if len(stackAnnotationAllColumns) == len(stackAnnotationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := StackAnnotation{}
	if err = randomize.Struct(seed, &o, stackAnnotationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StackAnnotation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StackAnnotation: %s", err)
	}

	count, err := StackAnnotations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, stackAnnotationDBTypes, false, stackAnnotationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StackAnnotation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StackAnnotation: %s", err)
	}

	count, err = StackAnnotations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
