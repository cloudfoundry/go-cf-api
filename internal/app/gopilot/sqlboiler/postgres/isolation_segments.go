// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// IsolationSegment is an object representing the database table.
type IsolationSegment struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	GUID      string    `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *isolationSegmentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L isolationSegmentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IsolationSegmentColumns = struct {
	ID        string
	GUID      string
	CreatedAt string
	UpdatedAt string
	Name      string
}{
	ID:        "id",
	GUID:      "guid",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	Name:      "name",
}

var IsolationSegmentTableColumns = struct {
	ID        string
	GUID      string
	CreatedAt string
	UpdatedAt string
	Name      string
}{
	ID:        "isolation_segments.id",
	GUID:      "isolation_segments.guid",
	CreatedAt: "isolation_segments.created_at",
	UpdatedAt: "isolation_segments.updated_at",
	Name:      "isolation_segments.name",
}

// Generated where

var IsolationSegmentWhere = struct {
	ID        whereHelperint
	GUID      whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpernull_Time
	Name      whereHelperstring
}{
	ID:        whereHelperint{field: "\"isolation_segments\".\"id\""},
	GUID:      whereHelperstring{field: "\"isolation_segments\".\"guid\""},
	CreatedAt: whereHelpertime_Time{field: "\"isolation_segments\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"isolation_segments\".\"updated_at\""},
	Name:      whereHelperstring{field: "\"isolation_segments\".\"name\""},
}

// IsolationSegmentRels is where relationship names are stored.
var IsolationSegmentRels = struct {
	ResourceIsolationSegmentAnnotations string
	ResourceIsolationSegmentLabels      string
	OrganizationsIsolationSegments      string
	Spaces                              string
}{
	ResourceIsolationSegmentAnnotations: "ResourceIsolationSegmentAnnotations",
	ResourceIsolationSegmentLabels:      "ResourceIsolationSegmentLabels",
	OrganizationsIsolationSegments:      "OrganizationsIsolationSegments",
	Spaces:                              "Spaces",
}

// isolationSegmentR is where relationships are stored.
type isolationSegmentR struct {
	ResourceIsolationSegmentAnnotations IsolationSegmentAnnotationSlice    `boil:"ResourceIsolationSegmentAnnotations" json:"ResourceIsolationSegmentAnnotations" toml:"ResourceIsolationSegmentAnnotations" yaml:"ResourceIsolationSegmentAnnotations"`
	ResourceIsolationSegmentLabels      IsolationSegmentLabelSlice         `boil:"ResourceIsolationSegmentLabels" json:"ResourceIsolationSegmentLabels" toml:"ResourceIsolationSegmentLabels" yaml:"ResourceIsolationSegmentLabels"`
	OrganizationsIsolationSegments      OrganizationsIsolationSegmentSlice `boil:"OrganizationsIsolationSegments" json:"OrganizationsIsolationSegments" toml:"OrganizationsIsolationSegments" yaml:"OrganizationsIsolationSegments"`
	Spaces                              SpaceSlice                         `boil:"Spaces" json:"Spaces" toml:"Spaces" yaml:"Spaces"`
}

// NewStruct creates a new relationship struct
func (*isolationSegmentR) NewStruct() *isolationSegmentR {
	return &isolationSegmentR{}
}

// isolationSegmentL is where Load methods for each relationship are stored.
type isolationSegmentL struct{}

var (
	isolationSegmentAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name"}
	isolationSegmentColumnsWithoutDefault = []string{"guid", "updated_at", "name"}
	isolationSegmentColumnsWithDefault    = []string{"id", "created_at"}
	isolationSegmentPrimaryKeyColumns     = []string{"id"}
)

type (
	// IsolationSegmentSlice is an alias for a slice of pointers to IsolationSegment.
	// This should almost always be used instead of []IsolationSegment.
	IsolationSegmentSlice []*IsolationSegment
	// IsolationSegmentHook is the signature for custom IsolationSegment hook methods
	IsolationSegmentHook func(context.Context, boil.ContextExecutor, *IsolationSegment) error

	isolationSegmentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	isolationSegmentType                 = reflect.TypeOf(&IsolationSegment{})
	isolationSegmentMapping              = queries.MakeStructMapping(isolationSegmentType)
	isolationSegmentPrimaryKeyMapping, _ = queries.BindMapping(isolationSegmentType, isolationSegmentMapping, isolationSegmentPrimaryKeyColumns)
	isolationSegmentInsertCacheMut       sync.RWMutex
	isolationSegmentInsertCache          = make(map[string]insertCache)
	isolationSegmentUpdateCacheMut       sync.RWMutex
	isolationSegmentUpdateCache          = make(map[string]updateCache)
	isolationSegmentUpsertCacheMut       sync.RWMutex
	isolationSegmentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var isolationSegmentBeforeInsertHooks []IsolationSegmentHook
var isolationSegmentBeforeUpdateHooks []IsolationSegmentHook
var isolationSegmentBeforeDeleteHooks []IsolationSegmentHook
var isolationSegmentBeforeUpsertHooks []IsolationSegmentHook

var isolationSegmentAfterInsertHooks []IsolationSegmentHook
var isolationSegmentAfterSelectHooks []IsolationSegmentHook
var isolationSegmentAfterUpdateHooks []IsolationSegmentHook
var isolationSegmentAfterDeleteHooks []IsolationSegmentHook
var isolationSegmentAfterUpsertHooks []IsolationSegmentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *IsolationSegment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range isolationSegmentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *IsolationSegment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range isolationSegmentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *IsolationSegment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range isolationSegmentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *IsolationSegment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range isolationSegmentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *IsolationSegment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range isolationSegmentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *IsolationSegment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range isolationSegmentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *IsolationSegment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range isolationSegmentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *IsolationSegment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range isolationSegmentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *IsolationSegment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range isolationSegmentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIsolationSegmentHook registers your hook function for all future operations.
func AddIsolationSegmentHook(hookPoint boil.HookPoint, isolationSegmentHook IsolationSegmentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		isolationSegmentBeforeInsertHooks = append(isolationSegmentBeforeInsertHooks, isolationSegmentHook)
	case boil.BeforeUpdateHook:
		isolationSegmentBeforeUpdateHooks = append(isolationSegmentBeforeUpdateHooks, isolationSegmentHook)
	case boil.BeforeDeleteHook:
		isolationSegmentBeforeDeleteHooks = append(isolationSegmentBeforeDeleteHooks, isolationSegmentHook)
	case boil.BeforeUpsertHook:
		isolationSegmentBeforeUpsertHooks = append(isolationSegmentBeforeUpsertHooks, isolationSegmentHook)
	case boil.AfterInsertHook:
		isolationSegmentAfterInsertHooks = append(isolationSegmentAfterInsertHooks, isolationSegmentHook)
	case boil.AfterSelectHook:
		isolationSegmentAfterSelectHooks = append(isolationSegmentAfterSelectHooks, isolationSegmentHook)
	case boil.AfterUpdateHook:
		isolationSegmentAfterUpdateHooks = append(isolationSegmentAfterUpdateHooks, isolationSegmentHook)
	case boil.AfterDeleteHook:
		isolationSegmentAfterDeleteHooks = append(isolationSegmentAfterDeleteHooks, isolationSegmentHook)
	case boil.AfterUpsertHook:
		isolationSegmentAfterUpsertHooks = append(isolationSegmentAfterUpsertHooks, isolationSegmentHook)
	}
}

// One returns a single isolationSegment record from the query.
func (q isolationSegmentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*IsolationSegment, error) {
	o := &IsolationSegment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for isolation_segments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all IsolationSegment records from the query.
func (q isolationSegmentQuery) All(ctx context.Context, exec boil.ContextExecutor) (IsolationSegmentSlice, error) {
	var o []*IsolationSegment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to IsolationSegment slice")
	}

	if len(isolationSegmentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all IsolationSegment records in the query.
func (q isolationSegmentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count isolation_segments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q isolationSegmentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if isolation_segments exists")
	}

	return count > 0, nil
}

// ResourceIsolationSegmentAnnotations retrieves all the isolation_segment_annotation's IsolationSegmentAnnotations with an executor via resource_guid column.
func (o *IsolationSegment) ResourceIsolationSegmentAnnotations(mods ...qm.QueryMod) isolationSegmentAnnotationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"isolation_segment_annotations\".\"resource_guid\"=?", o.GUID),
	)

	query := IsolationSegmentAnnotations(queryMods...)
	queries.SetFrom(query.Query, "\"isolation_segment_annotations\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"isolation_segment_annotations\".*"})
	}

	return query
}

// ResourceIsolationSegmentLabels retrieves all the isolation_segment_label's IsolationSegmentLabels with an executor via resource_guid column.
func (o *IsolationSegment) ResourceIsolationSegmentLabels(mods ...qm.QueryMod) isolationSegmentLabelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"isolation_segment_labels\".\"resource_guid\"=?", o.GUID),
	)

	query := IsolationSegmentLabels(queryMods...)
	queries.SetFrom(query.Query, "\"isolation_segment_labels\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"isolation_segment_labels\".*"})
	}

	return query
}

// OrganizationsIsolationSegments retrieves all the organizations_isolation_segment's OrganizationsIsolationSegments with an executor.
func (o *IsolationSegment) OrganizationsIsolationSegments(mods ...qm.QueryMod) organizationsIsolationSegmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"organizations_isolation_segments\".\"isolation_segment_guid\"=?", o.GUID),
	)

	query := OrganizationsIsolationSegments(queryMods...)
	queries.SetFrom(query.Query, "\"organizations_isolation_segments\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"organizations_isolation_segments\".*"})
	}

	return query
}

// Spaces retrieves all the space's Spaces with an executor.
func (o *IsolationSegment) Spaces(mods ...qm.QueryMod) spaceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"spaces\".\"isolation_segment_guid\"=?", o.GUID),
	)

	query := Spaces(queryMods...)
	queries.SetFrom(query.Query, "\"spaces\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"spaces\".*"})
	}

	return query
}

// LoadResourceIsolationSegmentAnnotations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (isolationSegmentL) LoadResourceIsolationSegmentAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIsolationSegment interface{}, mods queries.Applicator) error {
	var slice []*IsolationSegment
	var object *IsolationSegment

	if singular {
		object = maybeIsolationSegment.(*IsolationSegment)
	} else {
		slice = *maybeIsolationSegment.(*[]*IsolationSegment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &isolationSegmentR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &isolationSegmentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`isolation_segment_annotations`),
		qm.WhereIn(`isolation_segment_annotations.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load isolation_segment_annotations")
	}

	var resultSlice []*IsolationSegmentAnnotation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice isolation_segment_annotations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on isolation_segment_annotations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for isolation_segment_annotations")
	}

	if len(isolationSegmentAnnotationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ResourceIsolationSegmentAnnotations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &isolationSegmentAnnotationR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceIsolationSegmentAnnotations = append(local.R.ResourceIsolationSegmentAnnotations, foreign)
				if foreign.R == nil {
					foreign.R = &isolationSegmentAnnotationR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// LoadResourceIsolationSegmentLabels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (isolationSegmentL) LoadResourceIsolationSegmentLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIsolationSegment interface{}, mods queries.Applicator) error {
	var slice []*IsolationSegment
	var object *IsolationSegment

	if singular {
		object = maybeIsolationSegment.(*IsolationSegment)
	} else {
		slice = *maybeIsolationSegment.(*[]*IsolationSegment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &isolationSegmentR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &isolationSegmentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`isolation_segment_labels`),
		qm.WhereIn(`isolation_segment_labels.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load isolation_segment_labels")
	}

	var resultSlice []*IsolationSegmentLabel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice isolation_segment_labels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on isolation_segment_labels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for isolation_segment_labels")
	}

	if len(isolationSegmentLabelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ResourceIsolationSegmentLabels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &isolationSegmentLabelR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceIsolationSegmentLabels = append(local.R.ResourceIsolationSegmentLabels, foreign)
				if foreign.R == nil {
					foreign.R = &isolationSegmentLabelR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// LoadOrganizationsIsolationSegments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (isolationSegmentL) LoadOrganizationsIsolationSegments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIsolationSegment interface{}, mods queries.Applicator) error {
	var slice []*IsolationSegment
	var object *IsolationSegment

	if singular {
		object = maybeIsolationSegment.(*IsolationSegment)
	} else {
		slice = *maybeIsolationSegment.(*[]*IsolationSegment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &isolationSegmentR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &isolationSegmentR{}
			}

			for _, a := range args {
				if a == obj.GUID {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizations_isolation_segments`),
		qm.WhereIn(`organizations_isolation_segments.isolation_segment_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load organizations_isolation_segments")
	}

	var resultSlice []*OrganizationsIsolationSegment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice organizations_isolation_segments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on organizations_isolation_segments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations_isolation_segments")
	}

	if len(organizationsIsolationSegmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrganizationsIsolationSegments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationsIsolationSegmentR{}
			}
			foreign.R.IsolationSegment = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.GUID == foreign.IsolationSegmentGUID {
				local.R.OrganizationsIsolationSegments = append(local.R.OrganizationsIsolationSegments, foreign)
				if foreign.R == nil {
					foreign.R = &organizationsIsolationSegmentR{}
				}
				foreign.R.IsolationSegment = local
				break
			}
		}
	}

	return nil
}

// LoadSpaces allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (isolationSegmentL) LoadSpaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIsolationSegment interface{}, mods queries.Applicator) error {
	var slice []*IsolationSegment
	var object *IsolationSegment

	if singular {
		object = maybeIsolationSegment.(*IsolationSegment)
	} else {
		slice = *maybeIsolationSegment.(*[]*IsolationSegment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &isolationSegmentR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &isolationSegmentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`spaces`),
		qm.WhereIn(`spaces.isolation_segment_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load spaces")
	}

	var resultSlice []*Space
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice spaces")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on spaces")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for spaces")
	}

	if len(spaceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Spaces = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &spaceR{}
			}
			foreign.R.IsolationSegment = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.IsolationSegmentGUID) {
				local.R.Spaces = append(local.R.Spaces, foreign)
				if foreign.R == nil {
					foreign.R = &spaceR{}
				}
				foreign.R.IsolationSegment = local
				break
			}
		}
	}

	return nil
}

// AddResourceIsolationSegmentAnnotations adds the given related objects to the existing relationships
// of the isolation_segment, optionally inserting them as new records.
// Appends related to o.R.ResourceIsolationSegmentAnnotations.
// Sets related.R.Resource appropriately.
func (o *IsolationSegment) AddResourceIsolationSegmentAnnotations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IsolationSegmentAnnotation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"isolation_segment_annotations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"resource_guid"}),
				strmangle.WhereClause("\"", "\"", 2, isolationSegmentAnnotationPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &isolationSegmentR{
			ResourceIsolationSegmentAnnotations: related,
		}
	} else {
		o.R.ResourceIsolationSegmentAnnotations = append(o.R.ResourceIsolationSegmentAnnotations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &isolationSegmentAnnotationR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceIsolationSegmentAnnotations removes all previously related items of the
// isolation_segment replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceIsolationSegmentAnnotations accordingly.
// Replaces o.R.ResourceIsolationSegmentAnnotations with related.
// Sets related.R.Resource's ResourceIsolationSegmentAnnotations accordingly.
func (o *IsolationSegment) SetResourceIsolationSegmentAnnotations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IsolationSegmentAnnotation) error {
	query := "update \"isolation_segment_annotations\" set \"resource_guid\" = null where \"resource_guid\" = $1"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceIsolationSegmentAnnotations {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceIsolationSegmentAnnotations = nil
	}
	return o.AddResourceIsolationSegmentAnnotations(ctx, exec, insert, related...)
}

// RemoveResourceIsolationSegmentAnnotations relationships from objects passed in.
// Removes related items from R.ResourceIsolationSegmentAnnotations (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (o *IsolationSegment) RemoveResourceIsolationSegmentAnnotations(ctx context.Context, exec boil.ContextExecutor, related ...*IsolationSegmentAnnotation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceIsolationSegmentAnnotations {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceIsolationSegmentAnnotations)
			if ln > 1 && i < ln-1 {
				o.R.ResourceIsolationSegmentAnnotations[i] = o.R.ResourceIsolationSegmentAnnotations[ln-1]
			}
			o.R.ResourceIsolationSegmentAnnotations = o.R.ResourceIsolationSegmentAnnotations[:ln-1]
			break
		}
	}

	return nil
}

// AddResourceIsolationSegmentLabels adds the given related objects to the existing relationships
// of the isolation_segment, optionally inserting them as new records.
// Appends related to o.R.ResourceIsolationSegmentLabels.
// Sets related.R.Resource appropriately.
func (o *IsolationSegment) AddResourceIsolationSegmentLabels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IsolationSegmentLabel) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"isolation_segment_labels\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"resource_guid"}),
				strmangle.WhereClause("\"", "\"", 2, isolationSegmentLabelPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &isolationSegmentR{
			ResourceIsolationSegmentLabels: related,
		}
	} else {
		o.R.ResourceIsolationSegmentLabels = append(o.R.ResourceIsolationSegmentLabels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &isolationSegmentLabelR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceIsolationSegmentLabels removes all previously related items of the
// isolation_segment replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceIsolationSegmentLabels accordingly.
// Replaces o.R.ResourceIsolationSegmentLabels with related.
// Sets related.R.Resource's ResourceIsolationSegmentLabels accordingly.
func (o *IsolationSegment) SetResourceIsolationSegmentLabels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IsolationSegmentLabel) error {
	query := "update \"isolation_segment_labels\" set \"resource_guid\" = null where \"resource_guid\" = $1"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceIsolationSegmentLabels {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceIsolationSegmentLabels = nil
	}
	return o.AddResourceIsolationSegmentLabels(ctx, exec, insert, related...)
}

// RemoveResourceIsolationSegmentLabels relationships from objects passed in.
// Removes related items from R.ResourceIsolationSegmentLabels (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (o *IsolationSegment) RemoveResourceIsolationSegmentLabels(ctx context.Context, exec boil.ContextExecutor, related ...*IsolationSegmentLabel) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceIsolationSegmentLabels {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceIsolationSegmentLabels)
			if ln > 1 && i < ln-1 {
				o.R.ResourceIsolationSegmentLabels[i] = o.R.ResourceIsolationSegmentLabels[ln-1]
			}
			o.R.ResourceIsolationSegmentLabels = o.R.ResourceIsolationSegmentLabels[:ln-1]
			break
		}
	}

	return nil
}

// AddOrganizationsIsolationSegments adds the given related objects to the existing relationships
// of the isolation_segment, optionally inserting them as new records.
// Appends related to o.R.OrganizationsIsolationSegments.
// Sets related.R.IsolationSegment appropriately.
func (o *IsolationSegment) AddOrganizationsIsolationSegments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationsIsolationSegment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IsolationSegmentGUID = o.GUID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"organizations_isolation_segments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"isolation_segment_guid"}),
				strmangle.WhereClause("\"", "\"", 2, organizationsIsolationSegmentPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.OrganizationGUID, rel.IsolationSegmentGUID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IsolationSegmentGUID = o.GUID
		}
	}

	if o.R == nil {
		o.R = &isolationSegmentR{
			OrganizationsIsolationSegments: related,
		}
	} else {
		o.R.OrganizationsIsolationSegments = append(o.R.OrganizationsIsolationSegments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationsIsolationSegmentR{
				IsolationSegment: o,
			}
		} else {
			rel.R.IsolationSegment = o
		}
	}
	return nil
}

// AddSpaces adds the given related objects to the existing relationships
// of the isolation_segment, optionally inserting them as new records.
// Appends related to o.R.Spaces.
// Sets related.R.IsolationSegment appropriately.
func (o *IsolationSegment) AddSpaces(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Space) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IsolationSegmentGUID, o.GUID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"spaces\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"isolation_segment_guid"}),
				strmangle.WhereClause("\"", "\"", 2, spacePrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IsolationSegmentGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &isolationSegmentR{
			Spaces: related,
		}
	} else {
		o.R.Spaces = append(o.R.Spaces, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &spaceR{
				IsolationSegment: o,
			}
		} else {
			rel.R.IsolationSegment = o
		}
	}
	return nil
}

// SetSpaces removes all previously related items of the
// isolation_segment replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IsolationSegment's Spaces accordingly.
// Replaces o.R.Spaces with related.
// Sets related.R.IsolationSegment's Spaces accordingly.
func (o *IsolationSegment) SetSpaces(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Space) error {
	query := "update \"spaces\" set \"isolation_segment_guid\" = null where \"isolation_segment_guid\" = $1"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Spaces {
			queries.SetScanner(&rel.IsolationSegmentGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.IsolationSegment = nil
		}

		o.R.Spaces = nil
	}
	return o.AddSpaces(ctx, exec, insert, related...)
}

// RemoveSpaces relationships from objects passed in.
// Removes related items from R.Spaces (uses pointer comparison, removal does not keep order)
// Sets related.R.IsolationSegment.
func (o *IsolationSegment) RemoveSpaces(ctx context.Context, exec boil.ContextExecutor, related ...*Space) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IsolationSegmentGUID, nil)
		if rel.R != nil {
			rel.R.IsolationSegment = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("isolation_segment_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Spaces {
			if rel != ri {
				continue
			}

			ln := len(o.R.Spaces)
			if ln > 1 && i < ln-1 {
				o.R.Spaces[i] = o.R.Spaces[ln-1]
			}
			o.R.Spaces = o.R.Spaces[:ln-1]
			break
		}
	}

	return nil
}

// IsolationSegments retrieves all the records using an executor.
func IsolationSegments(mods ...qm.QueryMod) isolationSegmentQuery {
	mods = append(mods, qm.From("\"isolation_segments\""))
	return isolationSegmentQuery{NewQuery(mods...)}
}

// FindIsolationSegment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIsolationSegment(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*IsolationSegment, error) {
	isolationSegmentObj := &IsolationSegment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"isolation_segments\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, isolationSegmentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from isolation_segments")
	}

	if err = isolationSegmentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return isolationSegmentObj, err
	}

	return isolationSegmentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *IsolationSegment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no isolation_segments provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(isolationSegmentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	isolationSegmentInsertCacheMut.RLock()
	cache, cached := isolationSegmentInsertCache[key]
	isolationSegmentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			isolationSegmentAllColumns,
			isolationSegmentColumnsWithDefault,
			isolationSegmentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(isolationSegmentType, isolationSegmentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(isolationSegmentType, isolationSegmentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"isolation_segments\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"isolation_segments\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into isolation_segments")
	}

	if !cached {
		isolationSegmentInsertCacheMut.Lock()
		isolationSegmentInsertCache[key] = cache
		isolationSegmentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the IsolationSegment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *IsolationSegment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	isolationSegmentUpdateCacheMut.RLock()
	cache, cached := isolationSegmentUpdateCache[key]
	isolationSegmentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			isolationSegmentAllColumns,
			isolationSegmentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update isolation_segments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"isolation_segments\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, isolationSegmentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(isolationSegmentType, isolationSegmentMapping, append(wl, isolationSegmentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update isolation_segments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for isolation_segments")
	}

	if !cached {
		isolationSegmentUpdateCacheMut.Lock()
		isolationSegmentUpdateCache[key] = cache
		isolationSegmentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q isolationSegmentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for isolation_segments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for isolation_segments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IsolationSegmentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), isolationSegmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"isolation_segments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, isolationSegmentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in isolationSegment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all isolationSegment")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *IsolationSegment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no isolation_segments provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(isolationSegmentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	isolationSegmentUpsertCacheMut.RLock()
	cache, cached := isolationSegmentUpsertCache[key]
	isolationSegmentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			isolationSegmentAllColumns,
			isolationSegmentColumnsWithDefault,
			isolationSegmentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			isolationSegmentAllColumns,
			isolationSegmentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert isolation_segments, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(isolationSegmentPrimaryKeyColumns))
			copy(conflict, isolationSegmentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"isolation_segments\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(isolationSegmentType, isolationSegmentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(isolationSegmentType, isolationSegmentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert isolation_segments")
	}

	if !cached {
		isolationSegmentUpsertCacheMut.Lock()
		isolationSegmentUpsertCache[key] = cache
		isolationSegmentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single IsolationSegment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *IsolationSegment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IsolationSegment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), isolationSegmentPrimaryKeyMapping)
	sql := "DELETE FROM \"isolation_segments\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from isolation_segments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for isolation_segments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q isolationSegmentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no isolationSegmentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from isolation_segments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for isolation_segments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IsolationSegmentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(isolationSegmentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), isolationSegmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"isolation_segments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, isolationSegmentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from isolationSegment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for isolation_segments")
	}

	if len(isolationSegmentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *IsolationSegment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindIsolationSegment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IsolationSegmentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IsolationSegmentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), isolationSegmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"isolation_segments\".* FROM \"isolation_segments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, isolationSegmentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in IsolationSegmentSlice")
	}

	*o = slice

	return nil
}

// IsolationSegmentExists checks if the IsolationSegment row exists.
func IsolationSegmentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"isolation_segments\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if isolation_segments exists")
	}

	return exists, nil
}
