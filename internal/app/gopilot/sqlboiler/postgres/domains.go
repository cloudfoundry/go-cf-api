// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Domain is an object representing the database table.
type Domain struct {
	ID                   int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	GUID                 string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	CreatedAt            time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt            null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Name                 string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Wildcard             bool        `boil:"wildcard" json:"wildcard" toml:"wildcard" yaml:"wildcard"`
	OwningOrganizationID null.Int    `boil:"owning_organization_id" json:"owning_organization_id,omitempty" toml:"owning_organization_id" yaml:"owning_organization_id,omitempty"`
	RouterGroupGUID      null.String `boil:"router_group_guid" json:"router_group_guid,omitempty" toml:"router_group_guid" yaml:"router_group_guid,omitempty"`
	Internal             null.Bool   `boil:"internal" json:"internal,omitempty" toml:"internal" yaml:"internal,omitempty"`

	R *domainR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L domainL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DomainColumns = struct {
	ID                   string
	GUID                 string
	CreatedAt            string
	UpdatedAt            string
	Name                 string
	Wildcard             string
	OwningOrganizationID string
	RouterGroupGUID      string
	Internal             string
}{
	ID:                   "id",
	GUID:                 "guid",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
	Name:                 "name",
	Wildcard:             "wildcard",
	OwningOrganizationID: "owning_organization_id",
	RouterGroupGUID:      "router_group_guid",
	Internal:             "internal",
}

var DomainTableColumns = struct {
	ID                   string
	GUID                 string
	CreatedAt            string
	UpdatedAt            string
	Name                 string
	Wildcard             string
	OwningOrganizationID string
	RouterGroupGUID      string
	Internal             string
}{
	ID:                   "domains.id",
	GUID:                 "domains.guid",
	CreatedAt:            "domains.created_at",
	UpdatedAt:            "domains.updated_at",
	Name:                 "domains.name",
	Wildcard:             "domains.wildcard",
	OwningOrganizationID: "domains.owning_organization_id",
	RouterGroupGUID:      "domains.router_group_guid",
	Internal:             "domains.internal",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var DomainWhere = struct {
	ID                   whereHelperint
	GUID                 whereHelperstring
	CreatedAt            whereHelpertime_Time
	UpdatedAt            whereHelpernull_Time
	Name                 whereHelperstring
	Wildcard             whereHelperbool
	OwningOrganizationID whereHelpernull_Int
	RouterGroupGUID      whereHelpernull_String
	Internal             whereHelpernull_Bool
}{
	ID:                   whereHelperint{field: "\"domains\".\"id\""},
	GUID:                 whereHelperstring{field: "\"domains\".\"guid\""},
	CreatedAt:            whereHelpertime_Time{field: "\"domains\".\"created_at\""},
	UpdatedAt:            whereHelpernull_Time{field: "\"domains\".\"updated_at\""},
	Name:                 whereHelperstring{field: "\"domains\".\"name\""},
	Wildcard:             whereHelperbool{field: "\"domains\".\"wildcard\""},
	OwningOrganizationID: whereHelpernull_Int{field: "\"domains\".\"owning_organization_id\""},
	RouterGroupGUID:      whereHelpernull_String{field: "\"domains\".\"router_group_guid\""},
	Internal:             whereHelpernull_Bool{field: "\"domains\".\"internal\""},
}

// DomainRels is where relationship names are stored.
var DomainRels = struct {
	ResourceDomainAnnotations                string
	ResourceDomainLabels                     string
	PrivateDomainOrganizationsPrivateDomains string
	Routes                                   string
}{
	ResourceDomainAnnotations:                "ResourceDomainAnnotations",
	ResourceDomainLabels:                     "ResourceDomainLabels",
	PrivateDomainOrganizationsPrivateDomains: "PrivateDomainOrganizationsPrivateDomains",
	Routes:                                   "Routes",
}

// domainR is where relationships are stored.
type domainR struct {
	ResourceDomainAnnotations                DomainAnnotationSlice           `boil:"ResourceDomainAnnotations" json:"ResourceDomainAnnotations" toml:"ResourceDomainAnnotations" yaml:"ResourceDomainAnnotations"`
	ResourceDomainLabels                     DomainLabelSlice                `boil:"ResourceDomainLabels" json:"ResourceDomainLabels" toml:"ResourceDomainLabels" yaml:"ResourceDomainLabels"`
	PrivateDomainOrganizationsPrivateDomains OrganizationsPrivateDomainSlice `boil:"PrivateDomainOrganizationsPrivateDomains" json:"PrivateDomainOrganizationsPrivateDomains" toml:"PrivateDomainOrganizationsPrivateDomains" yaml:"PrivateDomainOrganizationsPrivateDomains"`
	Routes                                   RouteSlice                      `boil:"Routes" json:"Routes" toml:"Routes" yaml:"Routes"`
}

// NewStruct creates a new relationship struct
func (*domainR) NewStruct() *domainR {
	return &domainR{}
}

// domainL is where Load methods for each relationship are stored.
type domainL struct{}

var (
	domainAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "wildcard", "owning_organization_id", "router_group_guid", "internal"}
	domainColumnsWithoutDefault = []string{"guid", "updated_at", "name", "owning_organization_id", "router_group_guid"}
	domainColumnsWithDefault    = []string{"id", "created_at", "wildcard", "internal"}
	domainPrimaryKeyColumns     = []string{"id"}
)

type (
	// DomainSlice is an alias for a slice of pointers to Domain.
	// This should almost always be used instead of []Domain.
	DomainSlice []*Domain
	// DomainHook is the signature for custom Domain hook methods
	DomainHook func(context.Context, boil.ContextExecutor, *Domain) error

	domainQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	domainType                 = reflect.TypeOf(&Domain{})
	domainMapping              = queries.MakeStructMapping(domainType)
	domainPrimaryKeyMapping, _ = queries.BindMapping(domainType, domainMapping, domainPrimaryKeyColumns)
	domainInsertCacheMut       sync.RWMutex
	domainInsertCache          = make(map[string]insertCache)
	domainUpdateCacheMut       sync.RWMutex
	domainUpdateCache          = make(map[string]updateCache)
	domainUpsertCacheMut       sync.RWMutex
	domainUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var domainBeforeInsertHooks []DomainHook
var domainBeforeUpdateHooks []DomainHook
var domainBeforeDeleteHooks []DomainHook
var domainBeforeUpsertHooks []DomainHook

var domainAfterInsertHooks []DomainHook
var domainAfterSelectHooks []DomainHook
var domainAfterUpdateHooks []DomainHook
var domainAfterDeleteHooks []DomainHook
var domainAfterUpsertHooks []DomainHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Domain) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Domain) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Domain) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Domain) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Domain) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Domain) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Domain) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Domain) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Domain) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range domainAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDomainHook registers your hook function for all future operations.
func AddDomainHook(hookPoint boil.HookPoint, domainHook DomainHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		domainBeforeInsertHooks = append(domainBeforeInsertHooks, domainHook)
	case boil.BeforeUpdateHook:
		domainBeforeUpdateHooks = append(domainBeforeUpdateHooks, domainHook)
	case boil.BeforeDeleteHook:
		domainBeforeDeleteHooks = append(domainBeforeDeleteHooks, domainHook)
	case boil.BeforeUpsertHook:
		domainBeforeUpsertHooks = append(domainBeforeUpsertHooks, domainHook)
	case boil.AfterInsertHook:
		domainAfterInsertHooks = append(domainAfterInsertHooks, domainHook)
	case boil.AfterSelectHook:
		domainAfterSelectHooks = append(domainAfterSelectHooks, domainHook)
	case boil.AfterUpdateHook:
		domainAfterUpdateHooks = append(domainAfterUpdateHooks, domainHook)
	case boil.AfterDeleteHook:
		domainAfterDeleteHooks = append(domainAfterDeleteHooks, domainHook)
	case boil.AfterUpsertHook:
		domainAfterUpsertHooks = append(domainAfterUpsertHooks, domainHook)
	}
}

// One returns a single domain record from the query.
func (q domainQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Domain, error) {
	o := &Domain{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for domains")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Domain records from the query.
func (q domainQuery) All(ctx context.Context, exec boil.ContextExecutor) (DomainSlice, error) {
	var o []*Domain

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Domain slice")
	}

	if len(domainAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Domain records in the query.
func (q domainQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count domains rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q domainQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if domains exists")
	}

	return count > 0, nil
}

// ResourceDomainAnnotations retrieves all the domain_annotation's DomainAnnotations with an executor via resource_guid column.
func (o *Domain) ResourceDomainAnnotations(mods ...qm.QueryMod) domainAnnotationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"domain_annotations\".\"resource_guid\"=?", o.GUID),
	)

	query := DomainAnnotations(queryMods...)
	queries.SetFrom(query.Query, "\"domain_annotations\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"domain_annotations\".*"})
	}

	return query
}

// ResourceDomainLabels retrieves all the domain_label's DomainLabels with an executor via resource_guid column.
func (o *Domain) ResourceDomainLabels(mods ...qm.QueryMod) domainLabelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"domain_labels\".\"resource_guid\"=?", o.GUID),
	)

	query := DomainLabels(queryMods...)
	queries.SetFrom(query.Query, "\"domain_labels\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"domain_labels\".*"})
	}

	return query
}

// PrivateDomainOrganizationsPrivateDomains retrieves all the organizations_private_domain's OrganizationsPrivateDomains with an executor via private_domain_id column.
func (o *Domain) PrivateDomainOrganizationsPrivateDomains(mods ...qm.QueryMod) organizationsPrivateDomainQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"organizations_private_domains\".\"private_domain_id\"=?", o.ID),
	)

	query := OrganizationsPrivateDomains(queryMods...)
	queries.SetFrom(query.Query, "\"organizations_private_domains\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"organizations_private_domains\".*"})
	}

	return query
}

// Routes retrieves all the route's Routes with an executor.
func (o *Domain) Routes(mods ...qm.QueryMod) routeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"routes\".\"domain_id\"=?", o.ID),
	)

	query := Routes(queryMods...)
	queries.SetFrom(query.Query, "\"routes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"routes\".*"})
	}

	return query
}

// LoadResourceDomainAnnotations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (domainL) LoadResourceDomainAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomain interface{}, mods queries.Applicator) error {
	var slice []*Domain
	var object *Domain

	if singular {
		object = maybeDomain.(*Domain)
	} else {
		slice = *maybeDomain.(*[]*Domain)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &domainR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &domainR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`domain_annotations`),
		qm.WhereIn(`domain_annotations.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load domain_annotations")
	}

	var resultSlice []*DomainAnnotation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice domain_annotations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on domain_annotations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for domain_annotations")
	}

	if len(domainAnnotationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ResourceDomainAnnotations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &domainAnnotationR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceDomainAnnotations = append(local.R.ResourceDomainAnnotations, foreign)
				if foreign.R == nil {
					foreign.R = &domainAnnotationR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// LoadResourceDomainLabels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (domainL) LoadResourceDomainLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomain interface{}, mods queries.Applicator) error {
	var slice []*Domain
	var object *Domain

	if singular {
		object = maybeDomain.(*Domain)
	} else {
		slice = *maybeDomain.(*[]*Domain)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &domainR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &domainR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`domain_labels`),
		qm.WhereIn(`domain_labels.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load domain_labels")
	}

	var resultSlice []*DomainLabel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice domain_labels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on domain_labels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for domain_labels")
	}

	if len(domainLabelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ResourceDomainLabels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &domainLabelR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceDomainLabels = append(local.R.ResourceDomainLabels, foreign)
				if foreign.R == nil {
					foreign.R = &domainLabelR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// LoadPrivateDomainOrganizationsPrivateDomains allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (domainL) LoadPrivateDomainOrganizationsPrivateDomains(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomain interface{}, mods queries.Applicator) error {
	var slice []*Domain
	var object *Domain

	if singular {
		object = maybeDomain.(*Domain)
	} else {
		slice = *maybeDomain.(*[]*Domain)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &domainR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &domainR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizations_private_domains`),
		qm.WhereIn(`organizations_private_domains.private_domain_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load organizations_private_domains")
	}

	var resultSlice []*OrganizationsPrivateDomain
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice organizations_private_domains")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on organizations_private_domains")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations_private_domains")
	}

	if len(organizationsPrivateDomainAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PrivateDomainOrganizationsPrivateDomains = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationsPrivateDomainR{}
			}
			foreign.R.PrivateDomain = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PrivateDomainID {
				local.R.PrivateDomainOrganizationsPrivateDomains = append(local.R.PrivateDomainOrganizationsPrivateDomains, foreign)
				if foreign.R == nil {
					foreign.R = &organizationsPrivateDomainR{}
				}
				foreign.R.PrivateDomain = local
				break
			}
		}
	}

	return nil
}

// LoadRoutes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (domainL) LoadRoutes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomain interface{}, mods queries.Applicator) error {
	var slice []*Domain
	var object *Domain

	if singular {
		object = maybeDomain.(*Domain)
	} else {
		slice = *maybeDomain.(*[]*Domain)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &domainR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &domainR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`routes`),
		qm.WhereIn(`routes.domain_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load routes")
	}

	var resultSlice []*Route
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice routes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on routes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for routes")
	}

	if len(routeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Routes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &routeR{}
			}
			foreign.R.Domain = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DomainID {
				local.R.Routes = append(local.R.Routes, foreign)
				if foreign.R == nil {
					foreign.R = &routeR{}
				}
				foreign.R.Domain = local
				break
			}
		}
	}

	return nil
}

// AddResourceDomainAnnotations adds the given related objects to the existing relationships
// of the domain, optionally inserting them as new records.
// Appends related to o.R.ResourceDomainAnnotations.
// Sets related.R.Resource appropriately.
func (o *Domain) AddResourceDomainAnnotations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DomainAnnotation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"domain_annotations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"resource_guid"}),
				strmangle.WhereClause("\"", "\"", 2, domainAnnotationPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &domainR{
			ResourceDomainAnnotations: related,
		}
	} else {
		o.R.ResourceDomainAnnotations = append(o.R.ResourceDomainAnnotations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &domainAnnotationR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceDomainAnnotations removes all previously related items of the
// domain replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceDomainAnnotations accordingly.
// Replaces o.R.ResourceDomainAnnotations with related.
// Sets related.R.Resource's ResourceDomainAnnotations accordingly.
func (o *Domain) SetResourceDomainAnnotations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DomainAnnotation) error {
	query := "update \"domain_annotations\" set \"resource_guid\" = null where \"resource_guid\" = $1"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceDomainAnnotations {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceDomainAnnotations = nil
	}
	return o.AddResourceDomainAnnotations(ctx, exec, insert, related...)
}

// RemoveResourceDomainAnnotations relationships from objects passed in.
// Removes related items from R.ResourceDomainAnnotations (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (o *Domain) RemoveResourceDomainAnnotations(ctx context.Context, exec boil.ContextExecutor, related ...*DomainAnnotation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceDomainAnnotations {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceDomainAnnotations)
			if ln > 1 && i < ln-1 {
				o.R.ResourceDomainAnnotations[i] = o.R.ResourceDomainAnnotations[ln-1]
			}
			o.R.ResourceDomainAnnotations = o.R.ResourceDomainAnnotations[:ln-1]
			break
		}
	}

	return nil
}

// AddResourceDomainLabels adds the given related objects to the existing relationships
// of the domain, optionally inserting them as new records.
// Appends related to o.R.ResourceDomainLabels.
// Sets related.R.Resource appropriately.
func (o *Domain) AddResourceDomainLabels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DomainLabel) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"domain_labels\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"resource_guid"}),
				strmangle.WhereClause("\"", "\"", 2, domainLabelPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &domainR{
			ResourceDomainLabels: related,
		}
	} else {
		o.R.ResourceDomainLabels = append(o.R.ResourceDomainLabels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &domainLabelR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceDomainLabels removes all previously related items of the
// domain replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceDomainLabels accordingly.
// Replaces o.R.ResourceDomainLabels with related.
// Sets related.R.Resource's ResourceDomainLabels accordingly.
func (o *Domain) SetResourceDomainLabels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DomainLabel) error {
	query := "update \"domain_labels\" set \"resource_guid\" = null where \"resource_guid\" = $1"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceDomainLabels {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceDomainLabels = nil
	}
	return o.AddResourceDomainLabels(ctx, exec, insert, related...)
}

// RemoveResourceDomainLabels relationships from objects passed in.
// Removes related items from R.ResourceDomainLabels (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (o *Domain) RemoveResourceDomainLabels(ctx context.Context, exec boil.ContextExecutor, related ...*DomainLabel) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceDomainLabels {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceDomainLabels)
			if ln > 1 && i < ln-1 {
				o.R.ResourceDomainLabels[i] = o.R.ResourceDomainLabels[ln-1]
			}
			o.R.ResourceDomainLabels = o.R.ResourceDomainLabels[:ln-1]
			break
		}
	}

	return nil
}

// AddPrivateDomainOrganizationsPrivateDomains adds the given related objects to the existing relationships
// of the domain, optionally inserting them as new records.
// Appends related to o.R.PrivateDomainOrganizationsPrivateDomains.
// Sets related.R.PrivateDomain appropriately.
func (o *Domain) AddPrivateDomainOrganizationsPrivateDomains(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationsPrivateDomain) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PrivateDomainID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"organizations_private_domains\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"private_domain_id"}),
				strmangle.WhereClause("\"", "\"", 2, organizationsPrivateDomainPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.OrganizationsPrivateDomainsPK}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PrivateDomainID = o.ID
		}
	}

	if o.R == nil {
		o.R = &domainR{
			PrivateDomainOrganizationsPrivateDomains: related,
		}
	} else {
		o.R.PrivateDomainOrganizationsPrivateDomains = append(o.R.PrivateDomainOrganizationsPrivateDomains, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationsPrivateDomainR{
				PrivateDomain: o,
			}
		} else {
			rel.R.PrivateDomain = o
		}
	}
	return nil
}

// AddRoutes adds the given related objects to the existing relationships
// of the domain, optionally inserting them as new records.
// Appends related to o.R.Routes.
// Sets related.R.Domain appropriately.
func (o *Domain) AddRoutes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Route) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DomainID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"routes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"domain_id"}),
				strmangle.WhereClause("\"", "\"", 2, routePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DomainID = o.ID
		}
	}

	if o.R == nil {
		o.R = &domainR{
			Routes: related,
		}
	} else {
		o.R.Routes = append(o.R.Routes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &routeR{
				Domain: o,
			}
		} else {
			rel.R.Domain = o
		}
	}
	return nil
}

// Domains retrieves all the records using an executor.
func Domains(mods ...qm.QueryMod) domainQuery {
	mods = append(mods, qm.From("\"domains\""))
	return domainQuery{NewQuery(mods...)}
}

// FindDomain retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDomain(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Domain, error) {
	domainObj := &Domain{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"domains\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, domainObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from domains")
	}

	if err = domainObj.doAfterSelectHooks(ctx, exec); err != nil {
		return domainObj, err
	}

	return domainObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Domain) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no domains provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(domainColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	domainInsertCacheMut.RLock()
	cache, cached := domainInsertCache[key]
	domainInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			domainAllColumns,
			domainColumnsWithDefault,
			domainColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(domainType, domainMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(domainType, domainMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"domains\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"domains\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into domains")
	}

	if !cached {
		domainInsertCacheMut.Lock()
		domainInsertCache[key] = cache
		domainInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Domain.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Domain) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	domainUpdateCacheMut.RLock()
	cache, cached := domainUpdateCache[key]
	domainUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			domainAllColumns,
			domainPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update domains, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"domains\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, domainPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(domainType, domainMapping, append(wl, domainPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update domains row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for domains")
	}

	if !cached {
		domainUpdateCacheMut.Lock()
		domainUpdateCache[key] = cache
		domainUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q domainQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for domains")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for domains")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DomainSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), domainPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"domains\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, domainPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in domain slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all domain")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Domain) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no domains provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(domainColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	domainUpsertCacheMut.RLock()
	cache, cached := domainUpsertCache[key]
	domainUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			domainAllColumns,
			domainColumnsWithDefault,
			domainColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			domainAllColumns,
			domainPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert domains, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(domainPrimaryKeyColumns))
			copy(conflict, domainPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"domains\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(domainType, domainMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(domainType, domainMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert domains")
	}

	if !cached {
		domainUpsertCacheMut.Lock()
		domainUpsertCache[key] = cache
		domainUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Domain record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Domain) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Domain provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), domainPrimaryKeyMapping)
	sql := "DELETE FROM \"domains\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from domains")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for domains")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q domainQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no domainQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from domains")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for domains")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DomainSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(domainBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), domainPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"domains\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, domainPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from domain slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for domains")
	}

	if len(domainAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Domain) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDomain(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DomainSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DomainSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), domainPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"domains\".* FROM \"domains\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, domainPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DomainSlice")
	}

	*o = slice

	return nil
}

// DomainExists checks if the Domain row exists.
func DomainExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"domains\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if domains exists")
	}

	return exists, nil
}
