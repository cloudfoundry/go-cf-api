// +build mysql

// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

type UserUpserter interface {
	Upsert(o *User, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error
}

var mySQLUserUniqueColumns = []string{
	"id",
	"guid",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (q userQuery) Upsert(o *User, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no users provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userUpsertCacheMut.RLock()
	cache, cached := userUpsertCache[key]
	userUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userAllColumns,
			userColumnsWithDefault,
			userColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userAllColumns,
			userPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert users, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`users`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `users` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userType, userMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userType, userMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for users")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userType, userMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for users")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for users")
	}

CacheNoHooks:
	if !cached {
		userUpsertCacheMut.Lock()
		userUpsertCache[key] = cache
		userUpsertCacheMut.Unlock()
	}

	return nil
}

// User is an object representing the database table.
type User struct {
	ID             int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	GUID           string    `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DefaultSpaceID null.Int  `boil:"default_space_id" json:"default_space_id,omitempty" toml:"default_space_id" yaml:"default_space_id,omitempty"`
	Admin          null.Bool `boil:"admin" json:"admin,omitempty" toml:"admin" yaml:"admin,omitempty"`
	Active         null.Bool `boil:"active" json:"active,omitempty" toml:"active" yaml:"active,omitempty"`
	IsOauthClient  null.Bool `boil:"is_oauth_client" json:"is_oauth_client,omitempty" toml:"is_oauth_client" yaml:"is_oauth_client,omitempty"`

	R *userR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserColumns = struct {
	ID             string
	GUID           string
	CreatedAt      string
	UpdatedAt      string
	DefaultSpaceID string
	Admin          string
	Active         string
	IsOauthClient  string
}{
	ID:             "id",
	GUID:           "guid",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DefaultSpaceID: "default_space_id",
	Admin:          "admin",
	Active:         "active",
	IsOauthClient:  "is_oauth_client",
}

var UserTableColumns = struct {
	ID             string
	GUID           string
	CreatedAt      string
	UpdatedAt      string
	DefaultSpaceID string
	Admin          string
	Active         string
	IsOauthClient  string
}{
	ID:             "users.id",
	GUID:           "users.guid",
	CreatedAt:      "users.created_at",
	UpdatedAt:      "users.updated_at",
	DefaultSpaceID: "users.default_space_id",
	Admin:          "users.admin",
	Active:         "users.active",
	IsOauthClient:  "users.is_oauth_client",
}

// Generated where

var UserWhere = struct {
	ID             whereHelperint
	GUID           whereHelperstring
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpernull_Time
	DefaultSpaceID whereHelpernull_Int
	Admin          whereHelpernull_Bool
	Active         whereHelpernull_Bool
	IsOauthClient  whereHelpernull_Bool
}{
	ID:             whereHelperint{field: "`users`.`id`"},
	GUID:           whereHelperstring{field: "`users`.`guid`"},
	CreatedAt:      whereHelpertime_Time{field: "`users`.`created_at`"},
	UpdatedAt:      whereHelpernull_Time{field: "`users`.`updated_at`"},
	DefaultSpaceID: whereHelpernull_Int{field: "`users`.`default_space_id`"},
	Admin:          whereHelpernull_Bool{field: "`users`.`admin`"},
	Active:         whereHelpernull_Bool{field: "`users`.`active`"},
	IsOauthClient:  whereHelpernull_Bool{field: "`users`.`is_oauth_client`"},
}

// UserRels is where relationship names are stored.
var UserRels = struct {
	DefaultSpace                 string
	OrganizationsAuditors        string
	OrganizationsBillingManagers string
	OrganizationsManagers        string
	OrganizationsUsers           string
	SpacesApplicationSupporters  string
	SpacesAuditors               string
	SpacesDevelopers             string
	SpacesManagers               string
	ResourceUserAnnotations      string
	ResourceUserLabels           string
}{
	DefaultSpace:                 "DefaultSpace",
	OrganizationsAuditors:        "OrganizationsAuditors",
	OrganizationsBillingManagers: "OrganizationsBillingManagers",
	OrganizationsManagers:        "OrganizationsManagers",
	OrganizationsUsers:           "OrganizationsUsers",
	SpacesApplicationSupporters:  "SpacesApplicationSupporters",
	SpacesAuditors:               "SpacesAuditors",
	SpacesDevelopers:             "SpacesDevelopers",
	SpacesManagers:               "SpacesManagers",
	ResourceUserAnnotations:      "ResourceUserAnnotations",
	ResourceUserLabels:           "ResourceUserLabels",
}

// userR is where relationships are stored.
type userR struct {
	DefaultSpace                 *Space                           `boil:"DefaultSpace" json:"DefaultSpace" toml:"DefaultSpace" yaml:"DefaultSpace"`
	OrganizationsAuditors        OrganizationsAuditorSlice        `boil:"OrganizationsAuditors" json:"OrganizationsAuditors" toml:"OrganizationsAuditors" yaml:"OrganizationsAuditors"`
	OrganizationsBillingManagers OrganizationsBillingManagerSlice `boil:"OrganizationsBillingManagers" json:"OrganizationsBillingManagers" toml:"OrganizationsBillingManagers" yaml:"OrganizationsBillingManagers"`
	OrganizationsManagers        OrganizationsManagerSlice        `boil:"OrganizationsManagers" json:"OrganizationsManagers" toml:"OrganizationsManagers" yaml:"OrganizationsManagers"`
	OrganizationsUsers           OrganizationsUserSlice           `boil:"OrganizationsUsers" json:"OrganizationsUsers" toml:"OrganizationsUsers" yaml:"OrganizationsUsers"`
	SpacesApplicationSupporters  SpacesApplicationSupporterSlice  `boil:"SpacesApplicationSupporters" json:"SpacesApplicationSupporters" toml:"SpacesApplicationSupporters" yaml:"SpacesApplicationSupporters"`
	SpacesAuditors               SpacesAuditorSlice               `boil:"SpacesAuditors" json:"SpacesAuditors" toml:"SpacesAuditors" yaml:"SpacesAuditors"`
	SpacesDevelopers             SpacesDeveloperSlice             `boil:"SpacesDevelopers" json:"SpacesDevelopers" toml:"SpacesDevelopers" yaml:"SpacesDevelopers"`
	SpacesManagers               SpacesManagerSlice               `boil:"SpacesManagers" json:"SpacesManagers" toml:"SpacesManagers" yaml:"SpacesManagers"`
	ResourceUserAnnotations      UserAnnotationSlice              `boil:"ResourceUserAnnotations" json:"ResourceUserAnnotations" toml:"ResourceUserAnnotations" yaml:"ResourceUserAnnotations"`
	ResourceUserLabels           UserLabelSlice                   `boil:"ResourceUserLabels" json:"ResourceUserLabels" toml:"ResourceUserLabels" yaml:"ResourceUserLabels"`
}

// NewStruct creates a new relationship struct
func (*userR) NewStruct() *userR {
	return &userR{}
}

// userL is where Load methods for each relationship are stored.
type userL struct{}

var (
	userAllColumns            = []string{"id", "guid", "created_at", "updated_at", "default_space_id", "admin", "active", "is_oauth_client"}
	userColumnsWithoutDefault = []string{"guid", "updated_at", "default_space_id", "is_oauth_client"}
	userColumnsWithDefault    = []string{"id", "created_at", "admin", "active"}
	userPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserSlice is an alias for a slice of pointers to User.
	// This should almost always be used instead of []User.
	UserSlice []*User

	userQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userType                 = reflect.TypeOf(&User{})
	userMapping              = queries.MakeStructMapping(userType)
	userPrimaryKeyMapping, _ = queries.BindMapping(userType, userMapping, userPrimaryKeyColumns)
	userInsertCacheMut       sync.RWMutex
	userInsertCache          = make(map[string]insertCache)
	userUpdateCacheMut       sync.RWMutex
	userUpdateCache          = make(map[string]updateCache)
	userUpsertCacheMut       sync.RWMutex
	userUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

type UserFinisher interface {
	One(ctx context.Context, exec boil.ContextExecutor) (*User, error)
	Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	All(ctx context.Context, exec boil.ContextExecutor) (UserSlice, error)
	Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)
}

// One returns a single user record from the query.
func (q userQuery) One(ctx context.Context, exec boil.ContextExecutor) (*User, error) {
	o := &User{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for users")
	}

	return o, nil
}

// All returns all User records from the query.
func (q userQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserSlice, error) {
	var o []*User

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to User slice")
	}

	return o, nil
}

// Count returns the count of all User records in the query.
func (q userQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count users rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if users exists")
	}

	return count > 0, nil
}

// DefaultSpace pointed to by the foreign key.
func (q userQuery) DefaultSpace(o *User, mods ...qm.QueryMod) spaceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.DefaultSpaceID),
	}

	queryMods = append(queryMods, mods...)

	query := Spaces(queryMods...)
	queries.SetFrom(query.Query, "`spaces`")

	return query
}

// OrganizationsAuditors retrieves all the organizations_auditor's OrganizationsAuditors with an executor.
func (q userQuery) OrganizationsAuditors(o *User, mods ...qm.QueryMod) organizationsAuditorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`organizations_auditors`.`user_id`=?", o.ID),
	)

	query := OrganizationsAuditors(queryMods...)
	queries.SetFrom(query.Query, "`organizations_auditors`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`organizations_auditors`.*"})
	}

	return query
}

// OrganizationsBillingManagers retrieves all the organizations_billing_manager's OrganizationsBillingManagers with an executor.
func (q userQuery) OrganizationsBillingManagers(o *User, mods ...qm.QueryMod) organizationsBillingManagerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`organizations_billing_managers`.`user_id`=?", o.ID),
	)

	query := OrganizationsBillingManagers(queryMods...)
	queries.SetFrom(query.Query, "`organizations_billing_managers`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`organizations_billing_managers`.*"})
	}

	return query
}

// OrganizationsManagers retrieves all the organizations_manager's OrganizationsManagers with an executor.
func (q userQuery) OrganizationsManagers(o *User, mods ...qm.QueryMod) organizationsManagerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`organizations_managers`.`user_id`=?", o.ID),
	)

	query := OrganizationsManagers(queryMods...)
	queries.SetFrom(query.Query, "`organizations_managers`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`organizations_managers`.*"})
	}

	return query
}

// OrganizationsUsers retrieves all the organizations_user's OrganizationsUsers with an executor.
func (q userQuery) OrganizationsUsers(o *User, mods ...qm.QueryMod) organizationsUserQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`organizations_users`.`user_id`=?", o.ID),
	)

	query := OrganizationsUsers(queryMods...)
	queries.SetFrom(query.Query, "`organizations_users`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`organizations_users`.*"})
	}

	return query
}

// SpacesApplicationSupporters retrieves all the spaces_application_supporter's SpacesApplicationSupporters with an executor.
func (q userQuery) SpacesApplicationSupporters(o *User, mods ...qm.QueryMod) spacesApplicationSupporterQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`spaces_application_supporters`.`user_id`=?", o.ID),
	)

	query := SpacesApplicationSupporters(queryMods...)
	queries.SetFrom(query.Query, "`spaces_application_supporters`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`spaces_application_supporters`.*"})
	}

	return query
}

// SpacesAuditors retrieves all the spaces_auditor's SpacesAuditors with an executor.
func (q userQuery) SpacesAuditors(o *User, mods ...qm.QueryMod) spacesAuditorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`spaces_auditors`.`user_id`=?", o.ID),
	)

	query := SpacesAuditors(queryMods...)
	queries.SetFrom(query.Query, "`spaces_auditors`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`spaces_auditors`.*"})
	}

	return query
}

// SpacesDevelopers retrieves all the spaces_developer's SpacesDevelopers with an executor.
func (q userQuery) SpacesDevelopers(o *User, mods ...qm.QueryMod) spacesDeveloperQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`spaces_developers`.`user_id`=?", o.ID),
	)

	query := SpacesDevelopers(queryMods...)
	queries.SetFrom(query.Query, "`spaces_developers`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`spaces_developers`.*"})
	}

	return query
}

// SpacesManagers retrieves all the spaces_manager's SpacesManagers with an executor.
func (q userQuery) SpacesManagers(o *User, mods ...qm.QueryMod) spacesManagerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`spaces_managers`.`user_id`=?", o.ID),
	)

	query := SpacesManagers(queryMods...)
	queries.SetFrom(query.Query, "`spaces_managers`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`spaces_managers`.*"})
	}

	return query
}

// ResourceUserAnnotations retrieves all the user_annotation's UserAnnotations with an executor via resource_guid column.
func (q userQuery) ResourceUserAnnotations(o *User, mods ...qm.QueryMod) userAnnotationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`user_annotations`.`resource_guid`=?", o.GUID),
	)

	query := UserAnnotations(queryMods...)
	queries.SetFrom(query.Query, "`user_annotations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`user_annotations`.*"})
	}

	return query
}

// ResourceUserLabels retrieves all the user_label's UserLabels with an executor via resource_guid column.
func (q userQuery) ResourceUserLabels(o *User, mods ...qm.QueryMod) userLabelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`user_labels`.`resource_guid`=?", o.GUID),
	)

	query := UserLabels(queryMods...)
	queries.SetFrom(query.Query, "`user_labels`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`user_labels`.*"})
	}

	return query
}

// LoadDefaultSpace allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userL) LoadDefaultSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		if !queries.IsNil(object.DefaultSpaceID) {
			args = append(args, object.DefaultSpaceID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DefaultSpaceID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DefaultSpaceID) {
				args = append(args, obj.DefaultSpaceID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`spaces`),
		qm.WhereIn(`spaces.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Space")
	}

	var resultSlice []*Space
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Space")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for spaces")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for spaces")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DefaultSpace = foreign
		if foreign.R == nil {
			foreign.R = &spaceR{}
		}
		foreign.R.DefaultSpaceUsers = append(foreign.R.DefaultSpaceUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DefaultSpaceID, foreign.ID) {
				local.R.DefaultSpace = foreign
				if foreign.R == nil {
					foreign.R = &spaceR{}
				}
				foreign.R.DefaultSpaceUsers = append(foreign.R.DefaultSpaceUsers, local)
				break
			}
		}
	}

	return nil
}

// LoadOrganizationsAuditors allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadOrganizationsAuditors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizations_auditors`),
		qm.WhereIn(`organizations_auditors.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load organizations_auditors")
	}

	var resultSlice []*OrganizationsAuditor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice organizations_auditors")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on organizations_auditors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations_auditors")
	}

	if singular {
		object.R.OrganizationsAuditors = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationsAuditorR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.OrganizationsAuditors = append(local.R.OrganizationsAuditors, foreign)
				if foreign.R == nil {
					foreign.R = &organizationsAuditorR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadOrganizationsBillingManagers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadOrganizationsBillingManagers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizations_billing_managers`),
		qm.WhereIn(`organizations_billing_managers.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load organizations_billing_managers")
	}

	var resultSlice []*OrganizationsBillingManager
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice organizations_billing_managers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on organizations_billing_managers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations_billing_managers")
	}

	if singular {
		object.R.OrganizationsBillingManagers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationsBillingManagerR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.OrganizationsBillingManagers = append(local.R.OrganizationsBillingManagers, foreign)
				if foreign.R == nil {
					foreign.R = &organizationsBillingManagerR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadOrganizationsManagers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadOrganizationsManagers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizations_managers`),
		qm.WhereIn(`organizations_managers.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load organizations_managers")
	}

	var resultSlice []*OrganizationsManager
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice organizations_managers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on organizations_managers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations_managers")
	}

	if singular {
		object.R.OrganizationsManagers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationsManagerR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.OrganizationsManagers = append(local.R.OrganizationsManagers, foreign)
				if foreign.R == nil {
					foreign.R = &organizationsManagerR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadOrganizationsUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadOrganizationsUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizations_users`),
		qm.WhereIn(`organizations_users.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load organizations_users")
	}

	var resultSlice []*OrganizationsUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice organizations_users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on organizations_users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations_users")
	}

	if singular {
		object.R.OrganizationsUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationsUserR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.OrganizationsUsers = append(local.R.OrganizationsUsers, foreign)
				if foreign.R == nil {
					foreign.R = &organizationsUserR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadSpacesApplicationSupporters allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadSpacesApplicationSupporters(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`spaces_application_supporters`),
		qm.WhereIn(`spaces_application_supporters.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load spaces_application_supporters")
	}

	var resultSlice []*SpacesApplicationSupporter
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice spaces_application_supporters")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on spaces_application_supporters")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for spaces_application_supporters")
	}

	if singular {
		object.R.SpacesApplicationSupporters = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &spacesApplicationSupporterR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.SpacesApplicationSupporters = append(local.R.SpacesApplicationSupporters, foreign)
				if foreign.R == nil {
					foreign.R = &spacesApplicationSupporterR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadSpacesAuditors allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadSpacesAuditors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`spaces_auditors`),
		qm.WhereIn(`spaces_auditors.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load spaces_auditors")
	}

	var resultSlice []*SpacesAuditor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice spaces_auditors")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on spaces_auditors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for spaces_auditors")
	}

	if singular {
		object.R.SpacesAuditors = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &spacesAuditorR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.SpacesAuditors = append(local.R.SpacesAuditors, foreign)
				if foreign.R == nil {
					foreign.R = &spacesAuditorR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadSpacesDevelopers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadSpacesDevelopers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`spaces_developers`),
		qm.WhereIn(`spaces_developers.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load spaces_developers")
	}

	var resultSlice []*SpacesDeveloper
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice spaces_developers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on spaces_developers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for spaces_developers")
	}

	if singular {
		object.R.SpacesDevelopers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &spacesDeveloperR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.SpacesDevelopers = append(local.R.SpacesDevelopers, foreign)
				if foreign.R == nil {
					foreign.R = &spacesDeveloperR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadSpacesManagers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadSpacesManagers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`spaces_managers`),
		qm.WhereIn(`spaces_managers.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load spaces_managers")
	}

	var resultSlice []*SpacesManager
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice spaces_managers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on spaces_managers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for spaces_managers")
	}

	if singular {
		object.R.SpacesManagers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &spacesManagerR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.SpacesManagers = append(local.R.SpacesManagers, foreign)
				if foreign.R == nil {
					foreign.R = &spacesManagerR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadResourceUserAnnotations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadResourceUserAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_annotations`),
		qm.WhereIn(`user_annotations.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_annotations")
	}

	var resultSlice []*UserAnnotation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_annotations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_annotations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_annotations")
	}

	if singular {
		object.R.ResourceUserAnnotations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userAnnotationR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceUserAnnotations = append(local.R.ResourceUserAnnotations, foreign)
				if foreign.R == nil {
					foreign.R = &userAnnotationR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// LoadResourceUserLabels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadResourceUserLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_labels`),
		qm.WhereIn(`user_labels.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_labels")
	}

	var resultSlice []*UserLabel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_labels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_labels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_labels")
	}

	if singular {
		object.R.ResourceUserLabels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userLabelR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceUserLabels = append(local.R.ResourceUserLabels, foreign)
				if foreign.R == nil {
					foreign.R = &userLabelR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// SetDefaultSpace of the user to the related item.
// Sets o.R.DefaultSpace to related.
// Adds o to related.R.DefaultSpaceUsers.
func (q userQuery) SetDefaultSpace(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Space) error {
	var err error
	if insert {
		if err = Spaces().Insert(related, ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `users` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"default_space_id"}),
		strmangle.WhereClause("`", "`", 0, userPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DefaultSpaceID, related.ID)
	if o.R == nil {
		o.R = &userR{
			DefaultSpace: related,
		}
	} else {
		o.R.DefaultSpace = related
	}

	if related.R == nil {
		related.R = &spaceR{
			DefaultSpaceUsers: UserSlice{o},
		}
	} else {
		related.R.DefaultSpaceUsers = append(related.R.DefaultSpaceUsers, o)
	}

	return nil
}

// RemoveDefaultSpace relationship.
// Sets o.R.DefaultSpace to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (q userQuery) RemoveDefaultSpace(o *User, ctx context.Context, exec boil.ContextExecutor, related *Space) error {
	var err error

	queries.SetScanner(&o.DefaultSpaceID, nil)
	if _, err = q.Update(o, ctx, exec, boil.Whitelist("default_space_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.DefaultSpace = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DefaultSpaceUsers {
		if queries.Equal(o.DefaultSpaceID, ri.DefaultSpaceID) {
			continue
		}

		ln := len(related.R.DefaultSpaceUsers)
		if ln > 1 && i < ln-1 {
			related.R.DefaultSpaceUsers[i] = related.R.DefaultSpaceUsers[ln-1]
		}
		related.R.DefaultSpaceUsers = related.R.DefaultSpaceUsers[:ln-1]
		break
	}
	return nil
}

// AddOrganizationsAuditors adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.OrganizationsAuditors.
// Sets related.R.User appropriately.
func (q userQuery) AddOrganizationsAuditors(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationsAuditor) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = OrganizationsAuditors().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `organizations_auditors` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
				strmangle.WhereClause("`", "`", 0, organizationsAuditorPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.OrganizationsAuditorsPK}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			OrganizationsAuditors: related,
		}
	} else {
		o.R.OrganizationsAuditors = append(o.R.OrganizationsAuditors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationsAuditorR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddOrganizationsBillingManagers adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.OrganizationsBillingManagers.
// Sets related.R.User appropriately.
func (q userQuery) AddOrganizationsBillingManagers(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationsBillingManager) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = OrganizationsBillingManagers().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `organizations_billing_managers` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
				strmangle.WhereClause("`", "`", 0, organizationsBillingManagerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.OrganizationsBillingManagersPK}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			OrganizationsBillingManagers: related,
		}
	} else {
		o.R.OrganizationsBillingManagers = append(o.R.OrganizationsBillingManagers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationsBillingManagerR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddOrganizationsManagers adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.OrganizationsManagers.
// Sets related.R.User appropriately.
func (q userQuery) AddOrganizationsManagers(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationsManager) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = OrganizationsManagers().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `organizations_managers` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
				strmangle.WhereClause("`", "`", 0, organizationsManagerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.OrganizationsManagersPK}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			OrganizationsManagers: related,
		}
	} else {
		o.R.OrganizationsManagers = append(o.R.OrganizationsManagers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationsManagerR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddOrganizationsUsers adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.OrganizationsUsers.
// Sets related.R.User appropriately.
func (q userQuery) AddOrganizationsUsers(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationsUser) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = OrganizationsUsers().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `organizations_users` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
				strmangle.WhereClause("`", "`", 0, organizationsUserPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.OrganizationsUsersPK}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			OrganizationsUsers: related,
		}
	} else {
		o.R.OrganizationsUsers = append(o.R.OrganizationsUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationsUserR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddSpacesApplicationSupporters adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.SpacesApplicationSupporters.
// Sets related.R.User appropriately.
func (q userQuery) AddSpacesApplicationSupporters(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpacesApplicationSupporter) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = SpacesApplicationSupporters().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `spaces_application_supporters` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
				strmangle.WhereClause("`", "`", 0, spacesApplicationSupporterPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.SpacesApplicationSupportersPK}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			SpacesApplicationSupporters: related,
		}
	} else {
		o.R.SpacesApplicationSupporters = append(o.R.SpacesApplicationSupporters, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &spacesApplicationSupporterR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddSpacesAuditors adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.SpacesAuditors.
// Sets related.R.User appropriately.
func (q userQuery) AddSpacesAuditors(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpacesAuditor) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = SpacesAuditors().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `spaces_auditors` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
				strmangle.WhereClause("`", "`", 0, spacesAuditorPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.SpacesAuditorsPK}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			SpacesAuditors: related,
		}
	} else {
		o.R.SpacesAuditors = append(o.R.SpacesAuditors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &spacesAuditorR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddSpacesDevelopers adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.SpacesDevelopers.
// Sets related.R.User appropriately.
func (q userQuery) AddSpacesDevelopers(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpacesDeveloper) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = SpacesDevelopers().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `spaces_developers` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
				strmangle.WhereClause("`", "`", 0, spacesDeveloperPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.SpacesDevelopersPK}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			SpacesDevelopers: related,
		}
	} else {
		o.R.SpacesDevelopers = append(o.R.SpacesDevelopers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &spacesDeveloperR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddSpacesManagers adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.SpacesManagers.
// Sets related.R.User appropriately.
func (q userQuery) AddSpacesManagers(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpacesManager) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = SpacesManagers().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `spaces_managers` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
				strmangle.WhereClause("`", "`", 0, spacesManagerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.SpacesManagersPK}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			SpacesManagers: related,
		}
	} else {
		o.R.SpacesManagers = append(o.R.SpacesManagers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &spacesManagerR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddResourceUserAnnotations adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.ResourceUserAnnotations.
// Sets related.R.Resource appropriately.
func (q userQuery) AddResourceUserAnnotations(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserAnnotation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = UserAnnotations().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `user_annotations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"resource_guid"}),
				strmangle.WhereClause("`", "`", 0, userAnnotationPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			ResourceUserAnnotations: related,
		}
	} else {
		o.R.ResourceUserAnnotations = append(o.R.ResourceUserAnnotations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userAnnotationR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceUserAnnotations removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceUserAnnotations accordingly.
// Replaces o.R.ResourceUserAnnotations with related.
// Sets related.R.Resource's ResourceUserAnnotations accordingly.
func (q userQuery) SetResourceUserAnnotations(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserAnnotation) error {
	query := "update `user_annotations` set `resource_guid` = null where `resource_guid` = ?"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceUserAnnotations {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceUserAnnotations = nil
	}
	return q.AddResourceUserAnnotations(o, ctx, exec, insert, related...)
}

// RemoveResourceUserAnnotations relationships from objects passed in.
// Removes related items from R.ResourceUserAnnotations (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (q userQuery) RemoveResourceUserAnnotations(o *User, ctx context.Context, exec boil.ContextExecutor, related ...*UserAnnotation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = UserAnnotations().Update(rel, ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceUserAnnotations {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceUserAnnotations)
			if ln > 1 && i < ln-1 {
				o.R.ResourceUserAnnotations[i] = o.R.ResourceUserAnnotations[ln-1]
			}
			o.R.ResourceUserAnnotations = o.R.ResourceUserAnnotations[:ln-1]
			break
		}
	}

	return nil
}

// AddResourceUserLabels adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.ResourceUserLabels.
// Sets related.R.Resource appropriately.
func (q userQuery) AddResourceUserLabels(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserLabel) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = UserLabels().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `user_labels` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"resource_guid"}),
				strmangle.WhereClause("`", "`", 0, userLabelPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			ResourceUserLabels: related,
		}
	} else {
		o.R.ResourceUserLabels = append(o.R.ResourceUserLabels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userLabelR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceUserLabels removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceUserLabels accordingly.
// Replaces o.R.ResourceUserLabels with related.
// Sets related.R.Resource's ResourceUserLabels accordingly.
func (q userQuery) SetResourceUserLabels(o *User, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserLabel) error {
	query := "update `user_labels` set `resource_guid` = null where `resource_guid` = ?"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceUserLabels {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceUserLabels = nil
	}
	return q.AddResourceUserLabels(o, ctx, exec, insert, related...)
}

// RemoveResourceUserLabels relationships from objects passed in.
// Removes related items from R.ResourceUserLabels (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (q userQuery) RemoveResourceUserLabels(o *User, ctx context.Context, exec boil.ContextExecutor, related ...*UserLabel) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = UserLabels().Update(rel, ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceUserLabels {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceUserLabels)
			if ln > 1 && i < ln-1 {
				o.R.ResourceUserLabels[i] = o.R.ResourceUserLabels[ln-1]
			}
			o.R.ResourceUserLabels = o.R.ResourceUserLabels[:ln-1]
			break
		}
	}

	return nil
}

// Users retrieves all the records using an executor.
func Users(mods ...qm.QueryMod) userQuery {
	mods = append(mods, qm.From("`users`"))
	return userQuery{NewQuery(mods...)}
}

type UserFinder interface {
	FindUser(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*User, error)
}

// FindUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUser(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*User, error) {
	userObj := &User{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `users` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from users")
	}

	return userObj, nil
}

type UserInserter interface {
	Insert(o *User, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (q userQuery) Insert(o *User, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no users provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userInsertCacheMut.RLock()
	cache, cached := userInsertCache[key]
	userInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAllColumns,
			userColumnsWithDefault,
			userColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userType, userMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userType, userMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `users` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `users` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `users` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into users")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for users")
	}

CacheNoHooks:
	if !cached {
		userInsertCacheMut.Lock()
		userInsertCache[key] = cache
		userInsertCacheMut.Unlock()
	}

	return nil
}

type UserUpdater interface {
	Update(o *User, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)
	UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
	UpdateAllSlice(o UserSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
}

// Update uses an executor to update the User.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (q userQuery) Update(o *User, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	userUpdateCacheMut.RLock()
	cache, cached := userUpdateCache[key]
	userUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAllColumns,
			userPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `users` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userType, userMapping, append(wl, userPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update users row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for users")
	}

	if !cached {
		userUpdateCacheMut.Lock()
		userUpdateCache[key] = cache
		userUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q userQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for users")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (q userQuery) UpdateAllSlice(o UserSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `users` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in user slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all user")
	}
	return rowsAff, nil
}

type UserDeleter interface {
	Delete(o *User, ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAllSlice(o UserSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)
}

// Delete deletes a single User record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (q userQuery) Delete(o *User, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no User provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userPrimaryKeyMapping)
	sql := "DELETE FROM `users` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for users")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for users")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (q userQuery) DeleteAllSlice(o UserSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `users` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for users")
	}

	return rowsAff, nil
}

type UserReloader interface {
	Reload(o *User, ctx context.Context, exec boil.ContextExecutor) error
	ReloadAll(o *UserSlice, ctx context.Context, exec boil.ContextExecutor) error
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (q userQuery) Reload(o *User, ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (q userQuery) ReloadAll(o *UserSlice, ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `users`.* FROM `users` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userPrimaryKeyColumns, len(*o))

	query := queries.Raw(sql, args...)

	err := query.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserSlice")
	}

	*o = slice

	return nil
}

// UserExists checks if the User row exists.
func UserExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `users` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if users exists")
	}

	return exists, nil
}
