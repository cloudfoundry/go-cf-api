//go:build psql
// +build psql

//go:generate sh -c "echo '\x2bbuild unit' > ../../../../buildtags.txt && mockgen -source=$GOFILE -destination=mocks/revisions.go -copyright_file=../../../../buildtags.txt && rm -f ../../../../buildtags.txt"
// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

type RevisionUpserter interface {
	Upsert(o *Revision, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (q revisionQuery) Upsert(o *Revision, ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no revisions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(revisionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	revisionUpsertCacheMut.RLock()
	cache, cached := revisionUpsertCache[key]
	revisionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			revisionAllColumns,
			revisionColumnsWithDefault,
			revisionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			revisionAllColumns,
			revisionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert revisions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(revisionPrimaryKeyColumns))
			copy(conflict, revisionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"revisions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(revisionType, revisionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(revisionType, revisionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert revisions")
	}

	if !cached {
		revisionUpsertCacheMut.Lock()
		revisionUpsertCache[key] = cache
		revisionUpsertCacheMut.Unlock()
	}

	return nil
}

// Revision is an object representing the database table.
type Revision struct {
	ID                            int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	GUID                          string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	CreatedAt                     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                     null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	AppGUID                       null.String `boil:"app_guid" json:"app_guid,omitempty" toml:"app_guid" yaml:"app_guid,omitempty"`
	Version                       null.Int    `boil:"version" json:"version,omitempty" toml:"version" yaml:"version,omitempty"`
	DropletGUID                   null.String `boil:"droplet_guid" json:"droplet_guid,omitempty" toml:"droplet_guid" yaml:"droplet_guid,omitempty"`
	EncryptedEnvironmentVariables null.String `boil:"encrypted_environment_variables" json:"encrypted_environment_variables,omitempty" toml:"encrypted_environment_variables" yaml:"encrypted_environment_variables,omitempty"`
	Salt                          null.String `boil:"salt" json:"salt,omitempty" toml:"salt" yaml:"salt,omitempty"`
	EncryptionKeyLabel            null.String `boil:"encryption_key_label" json:"encryption_key_label,omitempty" toml:"encryption_key_label" yaml:"encryption_key_label,omitempty"`
	EncryptionIterations          int         `boil:"encryption_iterations" json:"encryption_iterations" toml:"encryption_iterations" yaml:"encryption_iterations"`
	Description                   string      `boil:"description" json:"description" toml:"description" yaml:"description"`

	R *revisionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L revisionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RevisionColumns = struct {
	ID                            string
	GUID                          string
	CreatedAt                     string
	UpdatedAt                     string
	AppGUID                       string
	Version                       string
	DropletGUID                   string
	EncryptedEnvironmentVariables string
	Salt                          string
	EncryptionKeyLabel            string
	EncryptionIterations          string
	Description                   string
}{
	ID:                            "id",
	GUID:                          "guid",
	CreatedAt:                     "created_at",
	UpdatedAt:                     "updated_at",
	AppGUID:                       "app_guid",
	Version:                       "version",
	DropletGUID:                   "droplet_guid",
	EncryptedEnvironmentVariables: "encrypted_environment_variables",
	Salt:                          "salt",
	EncryptionKeyLabel:            "encryption_key_label",
	EncryptionIterations:          "encryption_iterations",
	Description:                   "description",
}

var RevisionTableColumns = struct {
	ID                            string
	GUID                          string
	CreatedAt                     string
	UpdatedAt                     string
	AppGUID                       string
	Version                       string
	DropletGUID                   string
	EncryptedEnvironmentVariables string
	Salt                          string
	EncryptionKeyLabel            string
	EncryptionIterations          string
	Description                   string
}{
	ID:                            "revisions.id",
	GUID:                          "revisions.guid",
	CreatedAt:                     "revisions.created_at",
	UpdatedAt:                     "revisions.updated_at",
	AppGUID:                       "revisions.app_guid",
	Version:                       "revisions.version",
	DropletGUID:                   "revisions.droplet_guid",
	EncryptedEnvironmentVariables: "revisions.encrypted_environment_variables",
	Salt:                          "revisions.salt",
	EncryptionKeyLabel:            "revisions.encryption_key_label",
	EncryptionIterations:          "revisions.encryption_iterations",
	Description:                   "revisions.description",
}

// Generated where

var RevisionWhere = struct {
	ID                            whereHelperint
	GUID                          whereHelperstring
	CreatedAt                     whereHelpertime_Time
	UpdatedAt                     whereHelpernull_Time
	AppGUID                       whereHelpernull_String
	Version                       whereHelpernull_Int
	DropletGUID                   whereHelpernull_String
	EncryptedEnvironmentVariables whereHelpernull_String
	Salt                          whereHelpernull_String
	EncryptionKeyLabel            whereHelpernull_String
	EncryptionIterations          whereHelperint
	Description                   whereHelperstring
}{
	ID:                            whereHelperint{field: "\"revisions\".\"id\""},
	GUID:                          whereHelperstring{field: "\"revisions\".\"guid\""},
	CreatedAt:                     whereHelpertime_Time{field: "\"revisions\".\"created_at\""},
	UpdatedAt:                     whereHelpernull_Time{field: "\"revisions\".\"updated_at\""},
	AppGUID:                       whereHelpernull_String{field: "\"revisions\".\"app_guid\""},
	Version:                       whereHelpernull_Int{field: "\"revisions\".\"version\""},
	DropletGUID:                   whereHelpernull_String{field: "\"revisions\".\"droplet_guid\""},
	EncryptedEnvironmentVariables: whereHelpernull_String{field: "\"revisions\".\"encrypted_environment_variables\""},
	Salt:                          whereHelpernull_String{field: "\"revisions\".\"salt\""},
	EncryptionKeyLabel:            whereHelpernull_String{field: "\"revisions\".\"encryption_key_label\""},
	EncryptionIterations:          whereHelperint{field: "\"revisions\".\"encryption_iterations\""},
	Description:                   whereHelperstring{field: "\"revisions\".\"description\""},
}

// RevisionRels is where relationship names are stored.
var RevisionRels = struct {
	App                         string
	ResourceRevisionAnnotations string
	ResourceRevisionLabels      string
	RevisionProcessCommands     string
	RevisionSidecars            string
}{
	App:                         "App",
	ResourceRevisionAnnotations: "ResourceRevisionAnnotations",
	ResourceRevisionLabels:      "ResourceRevisionLabels",
	RevisionProcessCommands:     "RevisionProcessCommands",
	RevisionSidecars:            "RevisionSidecars",
}

// revisionR is where relationships are stored.
type revisionR struct {
	App                         *App                        `boil:"App" json:"App" toml:"App" yaml:"App"`
	ResourceRevisionAnnotations RevisionAnnotationSlice     `boil:"ResourceRevisionAnnotations" json:"ResourceRevisionAnnotations" toml:"ResourceRevisionAnnotations" yaml:"ResourceRevisionAnnotations"`
	ResourceRevisionLabels      RevisionLabelSlice          `boil:"ResourceRevisionLabels" json:"ResourceRevisionLabels" toml:"ResourceRevisionLabels" yaml:"ResourceRevisionLabels"`
	RevisionProcessCommands     RevisionProcessCommandSlice `boil:"RevisionProcessCommands" json:"RevisionProcessCommands" toml:"RevisionProcessCommands" yaml:"RevisionProcessCommands"`
	RevisionSidecars            RevisionSidecarSlice        `boil:"RevisionSidecars" json:"RevisionSidecars" toml:"RevisionSidecars" yaml:"RevisionSidecars"`
}

// NewStruct creates a new relationship struct
func (*revisionR) NewStruct() *revisionR {
	return &revisionR{}
}

// revisionL is where Load methods for each relationship are stored.
type revisionL struct{}

var (
	revisionAllColumns            = []string{"id", "guid", "created_at", "updated_at", "app_guid", "version", "droplet_guid", "encrypted_environment_variables", "salt", "encryption_key_label", "encryption_iterations", "description"}
	revisionColumnsWithoutDefault = []string{"guid", "updated_at", "app_guid", "droplet_guid", "encrypted_environment_variables", "salt", "encryption_key_label"}
	revisionColumnsWithDefault    = []string{"id", "created_at", "version", "encryption_iterations", "description"}
	revisionPrimaryKeyColumns     = []string{"id"}
)

type (
	// RevisionSlice is an alias for a slice of pointers to Revision.
	// This should almost always be used instead of []Revision.
	RevisionSlice []*Revision

	revisionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	revisionType                 = reflect.TypeOf(&Revision{})
	revisionMapping              = queries.MakeStructMapping(revisionType)
	revisionPrimaryKeyMapping, _ = queries.BindMapping(revisionType, revisionMapping, revisionPrimaryKeyColumns)
	revisionInsertCacheMut       sync.RWMutex
	revisionInsertCache          = make(map[string]insertCache)
	revisionUpdateCacheMut       sync.RWMutex
	revisionUpdateCache          = make(map[string]updateCache)
	revisionUpsertCacheMut       sync.RWMutex
	revisionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

type RevisionFinisher interface {
	One(ctx context.Context, exec boil.ContextExecutor) (*Revision, error)
	Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	All(ctx context.Context, exec boil.ContextExecutor) (RevisionSlice, error)
	Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)
}

// One returns a single revision record from the query.
func (q revisionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Revision, error) {
	o := &Revision{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for revisions")
	}

	return o, nil
}

// All returns all Revision records from the query.
func (q revisionQuery) All(ctx context.Context, exec boil.ContextExecutor) (RevisionSlice, error) {
	var o []*Revision

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Revision slice")
	}

	return o, nil
}

// Count returns the count of all Revision records in the query.
func (q revisionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count revisions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q revisionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if revisions exists")
	}

	return count > 0, nil
}

// App pointed to by the foreign key.
func (q revisionQuery) App(o *Revision, mods ...qm.QueryMod) appQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"guid\" = ?", o.AppGUID),
	}

	queryMods = append(queryMods, mods...)

	query := Apps(queryMods...)
	queries.SetFrom(query.Query, "\"apps\"")

	return query
}

// ResourceRevisionAnnotations retrieves all the revision_annotation's RevisionAnnotations with an executor via resource_guid column.
func (q revisionQuery) ResourceRevisionAnnotations(o *Revision, mods ...qm.QueryMod) revisionAnnotationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"revision_annotations\".\"resource_guid\"=?", o.GUID),
	)

	query := RevisionAnnotations(queryMods...)
	queries.SetFrom(query.Query, "\"revision_annotations\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"revision_annotations\".*"})
	}

	return query
}

// ResourceRevisionLabels retrieves all the revision_label's RevisionLabels with an executor via resource_guid column.
func (q revisionQuery) ResourceRevisionLabels(o *Revision, mods ...qm.QueryMod) revisionLabelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"revision_labels\".\"resource_guid\"=?", o.GUID),
	)

	query := RevisionLabels(queryMods...)
	queries.SetFrom(query.Query, "\"revision_labels\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"revision_labels\".*"})
	}

	return query
}

// RevisionProcessCommands retrieves all the revision_process_command's RevisionProcessCommands with an executor.
func (q revisionQuery) RevisionProcessCommands(o *Revision, mods ...qm.QueryMod) revisionProcessCommandQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"revision_process_commands\".\"revision_guid\"=?", o.GUID),
	)

	query := RevisionProcessCommands(queryMods...)
	queries.SetFrom(query.Query, "\"revision_process_commands\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"revision_process_commands\".*"})
	}

	return query
}

// RevisionSidecars retrieves all the revision_sidecar's RevisionSidecars with an executor.
func (q revisionQuery) RevisionSidecars(o *Revision, mods ...qm.QueryMod) revisionSidecarQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"revision_sidecars\".\"revision_guid\"=?", o.GUID),
	)

	query := RevisionSidecars(queryMods...)
	queries.SetFrom(query.Query, "\"revision_sidecars\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"revision_sidecars\".*"})
	}

	return query
}

// LoadApp allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (revisionL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevision interface{}, mods queries.Applicator) error {
	var slice []*Revision
	var object *Revision

	if singular {
		object = maybeRevision.(*Revision)
	} else {
		slice = *maybeRevision.(*[]*Revision)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &revisionR{}
		}
		if !queries.IsNil(object.AppGUID) {
			args = append(args, object.AppGUID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &revisionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AppGUID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AppGUID) {
				args = append(args, obj.AppGUID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`apps`),
		qm.WhereIn(`apps.guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load App")
	}

	var resultSlice []*App
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice App")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for apps")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for apps")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.App = foreign
		if foreign.R == nil {
			foreign.R = &appR{}
		}
		foreign.R.Revisions = append(foreign.R.Revisions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AppGUID, foreign.GUID) {
				local.R.App = foreign
				if foreign.R == nil {
					foreign.R = &appR{}
				}
				foreign.R.Revisions = append(foreign.R.Revisions, local)
				break
			}
		}
	}

	return nil
}

// LoadResourceRevisionAnnotations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (revisionL) LoadResourceRevisionAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevision interface{}, mods queries.Applicator) error {
	var slice []*Revision
	var object *Revision

	if singular {
		object = maybeRevision.(*Revision)
	} else {
		slice = *maybeRevision.(*[]*Revision)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &revisionR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &revisionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`revision_annotations`),
		qm.WhereIn(`revision_annotations.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load revision_annotations")
	}

	var resultSlice []*RevisionAnnotation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice revision_annotations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on revision_annotations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for revision_annotations")
	}

	if singular {
		object.R.ResourceRevisionAnnotations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &revisionAnnotationR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceRevisionAnnotations = append(local.R.ResourceRevisionAnnotations, foreign)
				if foreign.R == nil {
					foreign.R = &revisionAnnotationR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// LoadResourceRevisionLabels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (revisionL) LoadResourceRevisionLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevision interface{}, mods queries.Applicator) error {
	var slice []*Revision
	var object *Revision

	if singular {
		object = maybeRevision.(*Revision)
	} else {
		slice = *maybeRevision.(*[]*Revision)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &revisionR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &revisionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`revision_labels`),
		qm.WhereIn(`revision_labels.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load revision_labels")
	}

	var resultSlice []*RevisionLabel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice revision_labels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on revision_labels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for revision_labels")
	}

	if singular {
		object.R.ResourceRevisionLabels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &revisionLabelR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceRevisionLabels = append(local.R.ResourceRevisionLabels, foreign)
				if foreign.R == nil {
					foreign.R = &revisionLabelR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// LoadRevisionProcessCommands allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (revisionL) LoadRevisionProcessCommands(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevision interface{}, mods queries.Applicator) error {
	var slice []*Revision
	var object *Revision

	if singular {
		object = maybeRevision.(*Revision)
	} else {
		slice = *maybeRevision.(*[]*Revision)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &revisionR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &revisionR{}
			}

			for _, a := range args {
				if a == obj.GUID {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`revision_process_commands`),
		qm.WhereIn(`revision_process_commands.revision_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load revision_process_commands")
	}

	var resultSlice []*RevisionProcessCommand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice revision_process_commands")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on revision_process_commands")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for revision_process_commands")
	}

	if singular {
		object.R.RevisionProcessCommands = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &revisionProcessCommandR{}
			}
			foreign.R.Revision = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.GUID == foreign.RevisionGUID {
				local.R.RevisionProcessCommands = append(local.R.RevisionProcessCommands, foreign)
				if foreign.R == nil {
					foreign.R = &revisionProcessCommandR{}
				}
				foreign.R.Revision = local
				break
			}
		}
	}

	return nil
}

// LoadRevisionSidecars allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (revisionL) LoadRevisionSidecars(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRevision interface{}, mods queries.Applicator) error {
	var slice []*Revision
	var object *Revision

	if singular {
		object = maybeRevision.(*Revision)
	} else {
		slice = *maybeRevision.(*[]*Revision)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &revisionR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &revisionR{}
			}

			for _, a := range args {
				if a == obj.GUID {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`revision_sidecars`),
		qm.WhereIn(`revision_sidecars.revision_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load revision_sidecars")
	}

	var resultSlice []*RevisionSidecar
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice revision_sidecars")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on revision_sidecars")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for revision_sidecars")
	}

	if singular {
		object.R.RevisionSidecars = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &revisionSidecarR{}
			}
			foreign.R.Revision = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.GUID == foreign.RevisionGUID {
				local.R.RevisionSidecars = append(local.R.RevisionSidecars, foreign)
				if foreign.R == nil {
					foreign.R = &revisionSidecarR{}
				}
				foreign.R.Revision = local
				break
			}
		}
	}

	return nil
}

// SetApp of the revision to the related item.
// Sets o.R.App to related.
// Adds o to related.R.Revisions.
func (q revisionQuery) SetApp(o *Revision, ctx context.Context, exec boil.ContextExecutor, insert bool, related *App) error {
	var err error
	if insert {
		if err = Apps().Insert(related, ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"revisions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"app_guid"}),
		strmangle.WhereClause("\"", "\"", 2, revisionPrimaryKeyColumns),
	)
	values := []interface{}{related.GUID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AppGUID, related.GUID)
	if o.R == nil {
		o.R = &revisionR{
			App: related,
		}
	} else {
		o.R.App = related
	}

	if related.R == nil {
		related.R = &appR{
			Revisions: RevisionSlice{o},
		}
	} else {
		related.R.Revisions = append(related.R.Revisions, o)
	}

	return nil
}

// RemoveApp relationship.
// Sets o.R.App to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (q revisionQuery) RemoveApp(o *Revision, ctx context.Context, exec boil.ContextExecutor, related *App) error {
	var err error

	queries.SetScanner(&o.AppGUID, nil)
	if _, err = q.Update(o, ctx, exec, boil.Whitelist("app_guid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.App = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Revisions {
		if queries.Equal(o.AppGUID, ri.AppGUID) {
			continue
		}

		ln := len(related.R.Revisions)
		if ln > 1 && i < ln-1 {
			related.R.Revisions[i] = related.R.Revisions[ln-1]
		}
		related.R.Revisions = related.R.Revisions[:ln-1]
		break
	}
	return nil
}

// AddResourceRevisionAnnotations adds the given related objects to the existing relationships
// of the revision, optionally inserting them as new records.
// Appends related to o.R.ResourceRevisionAnnotations.
// Sets related.R.Resource appropriately.
func (q revisionQuery) AddResourceRevisionAnnotations(o *Revision, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RevisionAnnotation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = RevisionAnnotations().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"revision_annotations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"resource_guid"}),
				strmangle.WhereClause("\"", "\"", 2, revisionAnnotationPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &revisionR{
			ResourceRevisionAnnotations: related,
		}
	} else {
		o.R.ResourceRevisionAnnotations = append(o.R.ResourceRevisionAnnotations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &revisionAnnotationR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceRevisionAnnotations removes all previously related items of the
// revision replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceRevisionAnnotations accordingly.
// Replaces o.R.ResourceRevisionAnnotations with related.
// Sets related.R.Resource's ResourceRevisionAnnotations accordingly.
func (q revisionQuery) SetResourceRevisionAnnotations(o *Revision, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RevisionAnnotation) error {
	query := "update \"revision_annotations\" set \"resource_guid\" = null where \"resource_guid\" = $1"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceRevisionAnnotations {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceRevisionAnnotations = nil
	}
	return q.AddResourceRevisionAnnotations(o, ctx, exec, insert, related...)
}

// RemoveResourceRevisionAnnotations relationships from objects passed in.
// Removes related items from R.ResourceRevisionAnnotations (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (q revisionQuery) RemoveResourceRevisionAnnotations(o *Revision, ctx context.Context, exec boil.ContextExecutor, related ...*RevisionAnnotation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = RevisionAnnotations().Update(rel, ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceRevisionAnnotations {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceRevisionAnnotations)
			if ln > 1 && i < ln-1 {
				o.R.ResourceRevisionAnnotations[i] = o.R.ResourceRevisionAnnotations[ln-1]
			}
			o.R.ResourceRevisionAnnotations = o.R.ResourceRevisionAnnotations[:ln-1]
			break
		}
	}

	return nil
}

// AddResourceRevisionLabels adds the given related objects to the existing relationships
// of the revision, optionally inserting them as new records.
// Appends related to o.R.ResourceRevisionLabels.
// Sets related.R.Resource appropriately.
func (q revisionQuery) AddResourceRevisionLabels(o *Revision, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RevisionLabel) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = RevisionLabels().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"revision_labels\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"resource_guid"}),
				strmangle.WhereClause("\"", "\"", 2, revisionLabelPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &revisionR{
			ResourceRevisionLabels: related,
		}
	} else {
		o.R.ResourceRevisionLabels = append(o.R.ResourceRevisionLabels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &revisionLabelR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceRevisionLabels removes all previously related items of the
// revision replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceRevisionLabels accordingly.
// Replaces o.R.ResourceRevisionLabels with related.
// Sets related.R.Resource's ResourceRevisionLabels accordingly.
func (q revisionQuery) SetResourceRevisionLabels(o *Revision, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RevisionLabel) error {
	query := "update \"revision_labels\" set \"resource_guid\" = null where \"resource_guid\" = $1"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceRevisionLabels {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceRevisionLabels = nil
	}
	return q.AddResourceRevisionLabels(o, ctx, exec, insert, related...)
}

// RemoveResourceRevisionLabels relationships from objects passed in.
// Removes related items from R.ResourceRevisionLabels (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (q revisionQuery) RemoveResourceRevisionLabels(o *Revision, ctx context.Context, exec boil.ContextExecutor, related ...*RevisionLabel) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = RevisionLabels().Update(rel, ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceRevisionLabels {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceRevisionLabels)
			if ln > 1 && i < ln-1 {
				o.R.ResourceRevisionLabels[i] = o.R.ResourceRevisionLabels[ln-1]
			}
			o.R.ResourceRevisionLabels = o.R.ResourceRevisionLabels[:ln-1]
			break
		}
	}

	return nil
}

// AddRevisionProcessCommands adds the given related objects to the existing relationships
// of the revision, optionally inserting them as new records.
// Appends related to o.R.RevisionProcessCommands.
// Sets related.R.Revision appropriately.
func (q revisionQuery) AddRevisionProcessCommands(o *Revision, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RevisionProcessCommand) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RevisionGUID = o.GUID
			if err = RevisionProcessCommands().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"revision_process_commands\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"revision_guid"}),
				strmangle.WhereClause("\"", "\"", 2, revisionProcessCommandPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RevisionGUID = o.GUID
		}
	}

	if o.R == nil {
		o.R = &revisionR{
			RevisionProcessCommands: related,
		}
	} else {
		o.R.RevisionProcessCommands = append(o.R.RevisionProcessCommands, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &revisionProcessCommandR{
				Revision: o,
			}
		} else {
			rel.R.Revision = o
		}
	}
	return nil
}

// AddRevisionSidecars adds the given related objects to the existing relationships
// of the revision, optionally inserting them as new records.
// Appends related to o.R.RevisionSidecars.
// Sets related.R.Revision appropriately.
func (q revisionQuery) AddRevisionSidecars(o *Revision, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RevisionSidecar) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RevisionGUID = o.GUID
			if err = RevisionSidecars().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"revision_sidecars\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"revision_guid"}),
				strmangle.WhereClause("\"", "\"", 2, revisionSidecarPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RevisionGUID = o.GUID
		}
	}

	if o.R == nil {
		o.R = &revisionR{
			RevisionSidecars: related,
		}
	} else {
		o.R.RevisionSidecars = append(o.R.RevisionSidecars, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &revisionSidecarR{
				Revision: o,
			}
		} else {
			rel.R.Revision = o
		}
	}
	return nil
}

// Revisions retrieves all the records using an executor.
func Revisions(mods ...qm.QueryMod) revisionQuery {
	mods = append(mods, qm.From("\"revisions\""))
	return revisionQuery{NewQuery(mods...)}
}

type RevisionFinder interface {
	FindRevision(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Revision, error)
}

// FindRevision retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRevision(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Revision, error) {
	revisionObj := &Revision{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"revisions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, revisionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from revisions")
	}

	return revisionObj, nil
}

type RevisionInserter interface {
	Insert(o *Revision, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (q revisionQuery) Insert(o *Revision, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no revisions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(revisionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	revisionInsertCacheMut.RLock()
	cache, cached := revisionInsertCache[key]
	revisionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			revisionAllColumns,
			revisionColumnsWithDefault,
			revisionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(revisionType, revisionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(revisionType, revisionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"revisions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"revisions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into revisions")
	}

	if !cached {
		revisionInsertCacheMut.Lock()
		revisionInsertCache[key] = cache
		revisionInsertCacheMut.Unlock()
	}

	return nil
}

type RevisionUpdater interface {
	Update(o *Revision, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)
	UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
	UpdateAllSlice(o RevisionSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
}

// Update uses an executor to update the Revision.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (q revisionQuery) Update(o *Revision, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	revisionUpdateCacheMut.RLock()
	cache, cached := revisionUpdateCache[key]
	revisionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			revisionAllColumns,
			revisionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update revisions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"revisions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, revisionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(revisionType, revisionMapping, append(wl, revisionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update revisions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for revisions")
	}

	if !cached {
		revisionUpdateCacheMut.Lock()
		revisionUpdateCache[key] = cache
		revisionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q revisionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for revisions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for revisions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (q revisionQuery) UpdateAllSlice(o RevisionSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), revisionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"revisions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, revisionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in revision slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all revision")
	}
	return rowsAff, nil
}

type RevisionDeleter interface {
	Delete(o *Revision, ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAllSlice(o RevisionSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)
}

// Delete deletes a single Revision record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (q revisionQuery) Delete(o *Revision, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Revision provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), revisionPrimaryKeyMapping)
	sql := "DELETE FROM \"revisions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from revisions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for revisions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q revisionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no revisionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from revisions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for revisions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (q revisionQuery) DeleteAllSlice(o RevisionSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), revisionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"revisions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, revisionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from revision slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for revisions")
	}

	return rowsAff, nil
}

type RevisionReloader interface {
	Reload(o *Revision, ctx context.Context, exec boil.ContextExecutor) error
	ReloadAll(o *RevisionSlice, ctx context.Context, exec boil.ContextExecutor) error
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (q revisionQuery) Reload(o *Revision, ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRevision(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (q revisionQuery) ReloadAll(o *RevisionSlice, ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RevisionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), revisionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"revisions\".* FROM \"revisions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, revisionPrimaryKeyColumns, len(*o))

	query := queries.Raw(sql, args...)

	err := query.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RevisionSlice")
	}

	*o = slice

	return nil
}

// RevisionExists checks if the Revision row exists.
func RevisionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"revisions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if revisions exists")
	}

	return exists, nil
}
