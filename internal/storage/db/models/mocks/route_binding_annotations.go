//go:build unit
// +build unit

//

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_route_binding_annotations.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	models "github.com/cloudfoundry/go-cf-api/internal/storage/db/models"
	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
)

// MockRouteBindingAnnotationUpserter is a mock of RouteBindingAnnotationUpserter interface.
type MockRouteBindingAnnotationUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteBindingAnnotationUpserterMockRecorder
}

// MockRouteBindingAnnotationUpserterMockRecorder is the mock recorder for MockRouteBindingAnnotationUpserter.
type MockRouteBindingAnnotationUpserterMockRecorder struct {
	mock *MockRouteBindingAnnotationUpserter
}

// NewMockRouteBindingAnnotationUpserter creates a new mock instance.
func NewMockRouteBindingAnnotationUpserter(ctrl *gomock.Controller) *MockRouteBindingAnnotationUpserter {
	mock := &MockRouteBindingAnnotationUpserter{ctrl: ctrl}
	mock.recorder = &MockRouteBindingAnnotationUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteBindingAnnotationUpserter) EXPECT() *MockRouteBindingAnnotationUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockRouteBindingAnnotationUpserter) Upsert(o *models.RouteBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockRouteBindingAnnotationUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockRouteBindingAnnotationUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockRouteBindingAnnotationFinisher is a mock of RouteBindingAnnotationFinisher interface.
type MockRouteBindingAnnotationFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockRouteBindingAnnotationFinisherMockRecorder
}

// MockRouteBindingAnnotationFinisherMockRecorder is the mock recorder for MockRouteBindingAnnotationFinisher.
type MockRouteBindingAnnotationFinisherMockRecorder struct {
	mock *MockRouteBindingAnnotationFinisher
}

// NewMockRouteBindingAnnotationFinisher creates a new mock instance.
func NewMockRouteBindingAnnotationFinisher(ctrl *gomock.Controller) *MockRouteBindingAnnotationFinisher {
	mock := &MockRouteBindingAnnotationFinisher{ctrl: ctrl}
	mock.recorder = &MockRouteBindingAnnotationFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteBindingAnnotationFinisher) EXPECT() *MockRouteBindingAnnotationFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockRouteBindingAnnotationFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.RouteBindingAnnotationSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.RouteBindingAnnotationSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockRouteBindingAnnotationFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockRouteBindingAnnotationFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockRouteBindingAnnotationFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockRouteBindingAnnotationFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRouteBindingAnnotationFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockRouteBindingAnnotationFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockRouteBindingAnnotationFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRouteBindingAnnotationFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockRouteBindingAnnotationFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.RouteBindingAnnotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.RouteBindingAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockRouteBindingAnnotationFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockRouteBindingAnnotationFinisher)(nil).One), ctx, exec)
}

// MockRouteBindingAnnotationFinder is a mock of RouteBindingAnnotationFinder interface.
type MockRouteBindingAnnotationFinder struct {
	ctrl     *gomock.Controller
	recorder *MockRouteBindingAnnotationFinderMockRecorder
}

// MockRouteBindingAnnotationFinderMockRecorder is the mock recorder for MockRouteBindingAnnotationFinder.
type MockRouteBindingAnnotationFinderMockRecorder struct {
	mock *MockRouteBindingAnnotationFinder
}

// NewMockRouteBindingAnnotationFinder creates a new mock instance.
func NewMockRouteBindingAnnotationFinder(ctrl *gomock.Controller) *MockRouteBindingAnnotationFinder {
	mock := &MockRouteBindingAnnotationFinder{ctrl: ctrl}
	mock.recorder = &MockRouteBindingAnnotationFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteBindingAnnotationFinder) EXPECT() *MockRouteBindingAnnotationFinderMockRecorder {
	return m.recorder
}

// FindRouteBindingAnnotation mocks base method.
func (m *MockRouteBindingAnnotationFinder) FindRouteBindingAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.RouteBindingAnnotation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindRouteBindingAnnotation", varargs...)
	ret0, _ := ret[0].(*models.RouteBindingAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteBindingAnnotation indicates an expected call of FindRouteBindingAnnotation.
func (mr *MockRouteBindingAnnotationFinderMockRecorder) FindRouteBindingAnnotation(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteBindingAnnotation", reflect.TypeOf((*MockRouteBindingAnnotationFinder)(nil).FindRouteBindingAnnotation), varargs...)
}

// MockRouteBindingAnnotationInserter is a mock of RouteBindingAnnotationInserter interface.
type MockRouteBindingAnnotationInserter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteBindingAnnotationInserterMockRecorder
}

// MockRouteBindingAnnotationInserterMockRecorder is the mock recorder for MockRouteBindingAnnotationInserter.
type MockRouteBindingAnnotationInserterMockRecorder struct {
	mock *MockRouteBindingAnnotationInserter
}

// NewMockRouteBindingAnnotationInserter creates a new mock instance.
func NewMockRouteBindingAnnotationInserter(ctrl *gomock.Controller) *MockRouteBindingAnnotationInserter {
	mock := &MockRouteBindingAnnotationInserter{ctrl: ctrl}
	mock.recorder = &MockRouteBindingAnnotationInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteBindingAnnotationInserter) EXPECT() *MockRouteBindingAnnotationInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockRouteBindingAnnotationInserter) Insert(o *models.RouteBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockRouteBindingAnnotationInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRouteBindingAnnotationInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockRouteBindingAnnotationUpdater is a mock of RouteBindingAnnotationUpdater interface.
type MockRouteBindingAnnotationUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockRouteBindingAnnotationUpdaterMockRecorder
}

// MockRouteBindingAnnotationUpdaterMockRecorder is the mock recorder for MockRouteBindingAnnotationUpdater.
type MockRouteBindingAnnotationUpdaterMockRecorder struct {
	mock *MockRouteBindingAnnotationUpdater
}

// NewMockRouteBindingAnnotationUpdater creates a new mock instance.
func NewMockRouteBindingAnnotationUpdater(ctrl *gomock.Controller) *MockRouteBindingAnnotationUpdater {
	mock := &MockRouteBindingAnnotationUpdater{ctrl: ctrl}
	mock.recorder = &MockRouteBindingAnnotationUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteBindingAnnotationUpdater) EXPECT() *MockRouteBindingAnnotationUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockRouteBindingAnnotationUpdater) Update(o *models.RouteBindingAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRouteBindingAnnotationUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRouteBindingAnnotationUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockRouteBindingAnnotationUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockRouteBindingAnnotationUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockRouteBindingAnnotationUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockRouteBindingAnnotationUpdater) UpdateAllSlice(o models.RouteBindingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockRouteBindingAnnotationUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockRouteBindingAnnotationUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockRouteBindingAnnotationDeleter is a mock of RouteBindingAnnotationDeleter interface.
type MockRouteBindingAnnotationDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteBindingAnnotationDeleterMockRecorder
}

// MockRouteBindingAnnotationDeleterMockRecorder is the mock recorder for MockRouteBindingAnnotationDeleter.
type MockRouteBindingAnnotationDeleterMockRecorder struct {
	mock *MockRouteBindingAnnotationDeleter
}

// NewMockRouteBindingAnnotationDeleter creates a new mock instance.
func NewMockRouteBindingAnnotationDeleter(ctrl *gomock.Controller) *MockRouteBindingAnnotationDeleter {
	mock := &MockRouteBindingAnnotationDeleter{ctrl: ctrl}
	mock.recorder = &MockRouteBindingAnnotationDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteBindingAnnotationDeleter) EXPECT() *MockRouteBindingAnnotationDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRouteBindingAnnotationDeleter) Delete(o *models.RouteBindingAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRouteBindingAnnotationDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRouteBindingAnnotationDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockRouteBindingAnnotationDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockRouteBindingAnnotationDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockRouteBindingAnnotationDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockRouteBindingAnnotationDeleter) DeleteAllSlice(o models.RouteBindingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockRouteBindingAnnotationDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockRouteBindingAnnotationDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockRouteBindingAnnotationReloader is a mock of RouteBindingAnnotationReloader interface.
type MockRouteBindingAnnotationReloader struct {
	ctrl     *gomock.Controller
	recorder *MockRouteBindingAnnotationReloaderMockRecorder
}

// MockRouteBindingAnnotationReloaderMockRecorder is the mock recorder for MockRouteBindingAnnotationReloader.
type MockRouteBindingAnnotationReloaderMockRecorder struct {
	mock *MockRouteBindingAnnotationReloader
}

// NewMockRouteBindingAnnotationReloader creates a new mock instance.
func NewMockRouteBindingAnnotationReloader(ctrl *gomock.Controller) *MockRouteBindingAnnotationReloader {
	mock := &MockRouteBindingAnnotationReloader{ctrl: ctrl}
	mock.recorder = &MockRouteBindingAnnotationReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteBindingAnnotationReloader) EXPECT() *MockRouteBindingAnnotationReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockRouteBindingAnnotationReloader) Reload(o *models.RouteBindingAnnotation, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockRouteBindingAnnotationReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockRouteBindingAnnotationReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockRouteBindingAnnotationReloader) ReloadAll(o *models.RouteBindingAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockRouteBindingAnnotationReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockRouteBindingAnnotationReloader)(nil).ReloadAll), o, ctx, exec)
}
