//go:build unit
// +build unit

//

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_buildpack_annotations.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/storage/db/models"
)

// MockBuildpackAnnotationUpserter is a mock of BuildpackAnnotationUpserter interface.
type MockBuildpackAnnotationUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackAnnotationUpserterMockRecorder
}

// MockBuildpackAnnotationUpserterMockRecorder is the mock recorder for MockBuildpackAnnotationUpserter.
type MockBuildpackAnnotationUpserterMockRecorder struct {
	mock *MockBuildpackAnnotationUpserter
}

// NewMockBuildpackAnnotationUpserter creates a new mock instance.
func NewMockBuildpackAnnotationUpserter(ctrl *gomock.Controller) *MockBuildpackAnnotationUpserter {
	mock := &MockBuildpackAnnotationUpserter{ctrl: ctrl}
	mock.recorder = &MockBuildpackAnnotationUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildpackAnnotationUpserter) EXPECT() *MockBuildpackAnnotationUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockBuildpackAnnotationUpserter) Upsert(o *models.BuildpackAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockBuildpackAnnotationUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockBuildpackAnnotationUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockBuildpackAnnotationFinisher is a mock of BuildpackAnnotationFinisher interface.
type MockBuildpackAnnotationFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackAnnotationFinisherMockRecorder
}

// MockBuildpackAnnotationFinisherMockRecorder is the mock recorder for MockBuildpackAnnotationFinisher.
type MockBuildpackAnnotationFinisherMockRecorder struct {
	mock *MockBuildpackAnnotationFinisher
}

// NewMockBuildpackAnnotationFinisher creates a new mock instance.
func NewMockBuildpackAnnotationFinisher(ctrl *gomock.Controller) *MockBuildpackAnnotationFinisher {
	mock := &MockBuildpackAnnotationFinisher{ctrl: ctrl}
	mock.recorder = &MockBuildpackAnnotationFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildpackAnnotationFinisher) EXPECT() *MockBuildpackAnnotationFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockBuildpackAnnotationFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.BuildpackAnnotationSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.BuildpackAnnotationSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockBuildpackAnnotationFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockBuildpackAnnotationFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockBuildpackAnnotationFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockBuildpackAnnotationFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockBuildpackAnnotationFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockBuildpackAnnotationFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockBuildpackAnnotationFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockBuildpackAnnotationFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockBuildpackAnnotationFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.BuildpackAnnotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.BuildpackAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockBuildpackAnnotationFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockBuildpackAnnotationFinisher)(nil).One), ctx, exec)
}

// MockBuildpackAnnotationFinder is a mock of BuildpackAnnotationFinder interface.
type MockBuildpackAnnotationFinder struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackAnnotationFinderMockRecorder
}

// MockBuildpackAnnotationFinderMockRecorder is the mock recorder for MockBuildpackAnnotationFinder.
type MockBuildpackAnnotationFinderMockRecorder struct {
	mock *MockBuildpackAnnotationFinder
}

// NewMockBuildpackAnnotationFinder creates a new mock instance.
func NewMockBuildpackAnnotationFinder(ctrl *gomock.Controller) *MockBuildpackAnnotationFinder {
	mock := &MockBuildpackAnnotationFinder{ctrl: ctrl}
	mock.recorder = &MockBuildpackAnnotationFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildpackAnnotationFinder) EXPECT() *MockBuildpackAnnotationFinderMockRecorder {
	return m.recorder
}

// FindBuildpackAnnotation mocks base method.
func (m *MockBuildpackAnnotationFinder) FindBuildpackAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.BuildpackAnnotation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindBuildpackAnnotation", varargs...)
	ret0, _ := ret[0].(*models.BuildpackAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBuildpackAnnotation indicates an expected call of FindBuildpackAnnotation.
func (mr *MockBuildpackAnnotationFinderMockRecorder) FindBuildpackAnnotation(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBuildpackAnnotation", reflect.TypeOf((*MockBuildpackAnnotationFinder)(nil).FindBuildpackAnnotation), varargs...)
}

// MockBuildpackAnnotationInserter is a mock of BuildpackAnnotationInserter interface.
type MockBuildpackAnnotationInserter struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackAnnotationInserterMockRecorder
}

// MockBuildpackAnnotationInserterMockRecorder is the mock recorder for MockBuildpackAnnotationInserter.
type MockBuildpackAnnotationInserterMockRecorder struct {
	mock *MockBuildpackAnnotationInserter
}

// NewMockBuildpackAnnotationInserter creates a new mock instance.
func NewMockBuildpackAnnotationInserter(ctrl *gomock.Controller) *MockBuildpackAnnotationInserter {
	mock := &MockBuildpackAnnotationInserter{ctrl: ctrl}
	mock.recorder = &MockBuildpackAnnotationInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildpackAnnotationInserter) EXPECT() *MockBuildpackAnnotationInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockBuildpackAnnotationInserter) Insert(o *models.BuildpackAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockBuildpackAnnotationInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockBuildpackAnnotationInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockBuildpackAnnotationUpdater is a mock of BuildpackAnnotationUpdater interface.
type MockBuildpackAnnotationUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackAnnotationUpdaterMockRecorder
}

// MockBuildpackAnnotationUpdaterMockRecorder is the mock recorder for MockBuildpackAnnotationUpdater.
type MockBuildpackAnnotationUpdaterMockRecorder struct {
	mock *MockBuildpackAnnotationUpdater
}

// NewMockBuildpackAnnotationUpdater creates a new mock instance.
func NewMockBuildpackAnnotationUpdater(ctrl *gomock.Controller) *MockBuildpackAnnotationUpdater {
	mock := &MockBuildpackAnnotationUpdater{ctrl: ctrl}
	mock.recorder = &MockBuildpackAnnotationUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildpackAnnotationUpdater) EXPECT() *MockBuildpackAnnotationUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockBuildpackAnnotationUpdater) Update(o *models.BuildpackAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBuildpackAnnotationUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBuildpackAnnotationUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockBuildpackAnnotationUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockBuildpackAnnotationUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockBuildpackAnnotationUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockBuildpackAnnotationUpdater) UpdateAllSlice(o models.BuildpackAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockBuildpackAnnotationUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockBuildpackAnnotationUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockBuildpackAnnotationDeleter is a mock of BuildpackAnnotationDeleter interface.
type MockBuildpackAnnotationDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackAnnotationDeleterMockRecorder
}

// MockBuildpackAnnotationDeleterMockRecorder is the mock recorder for MockBuildpackAnnotationDeleter.
type MockBuildpackAnnotationDeleterMockRecorder struct {
	mock *MockBuildpackAnnotationDeleter
}

// NewMockBuildpackAnnotationDeleter creates a new mock instance.
func NewMockBuildpackAnnotationDeleter(ctrl *gomock.Controller) *MockBuildpackAnnotationDeleter {
	mock := &MockBuildpackAnnotationDeleter{ctrl: ctrl}
	mock.recorder = &MockBuildpackAnnotationDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildpackAnnotationDeleter) EXPECT() *MockBuildpackAnnotationDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockBuildpackAnnotationDeleter) Delete(o *models.BuildpackAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockBuildpackAnnotationDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBuildpackAnnotationDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockBuildpackAnnotationDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockBuildpackAnnotationDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockBuildpackAnnotationDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockBuildpackAnnotationDeleter) DeleteAllSlice(o models.BuildpackAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockBuildpackAnnotationDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockBuildpackAnnotationDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockBuildpackAnnotationReloader is a mock of BuildpackAnnotationReloader interface.
type MockBuildpackAnnotationReloader struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackAnnotationReloaderMockRecorder
}

// MockBuildpackAnnotationReloaderMockRecorder is the mock recorder for MockBuildpackAnnotationReloader.
type MockBuildpackAnnotationReloaderMockRecorder struct {
	mock *MockBuildpackAnnotationReloader
}

// NewMockBuildpackAnnotationReloader creates a new mock instance.
func NewMockBuildpackAnnotationReloader(ctrl *gomock.Controller) *MockBuildpackAnnotationReloader {
	mock := &MockBuildpackAnnotationReloader{ctrl: ctrl}
	mock.recorder = &MockBuildpackAnnotationReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildpackAnnotationReloader) EXPECT() *MockBuildpackAnnotationReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockBuildpackAnnotationReloader) Reload(o *models.BuildpackAnnotation, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockBuildpackAnnotationReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockBuildpackAnnotationReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockBuildpackAnnotationReloader) ReloadAll(o *models.BuildpackAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockBuildpackAnnotationReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockBuildpackAnnotationReloader)(nil).ReloadAll), o, ctx, exec)
}
