//go:build unit
// +build unit

//

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_droplet_annotations.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/storage/db/models"
)

// MockDropletAnnotationUpserter is a mock of DropletAnnotationUpserter interface.
type MockDropletAnnotationUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockDropletAnnotationUpserterMockRecorder
}

// MockDropletAnnotationUpserterMockRecorder is the mock recorder for MockDropletAnnotationUpserter.
type MockDropletAnnotationUpserterMockRecorder struct {
	mock *MockDropletAnnotationUpserter
}

// NewMockDropletAnnotationUpserter creates a new mock instance.
func NewMockDropletAnnotationUpserter(ctrl *gomock.Controller) *MockDropletAnnotationUpserter {
	mock := &MockDropletAnnotationUpserter{ctrl: ctrl}
	mock.recorder = &MockDropletAnnotationUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDropletAnnotationUpserter) EXPECT() *MockDropletAnnotationUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockDropletAnnotationUpserter) Upsert(o *models.DropletAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockDropletAnnotationUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockDropletAnnotationUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockDropletAnnotationFinisher is a mock of DropletAnnotationFinisher interface.
type MockDropletAnnotationFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockDropletAnnotationFinisherMockRecorder
}

// MockDropletAnnotationFinisherMockRecorder is the mock recorder for MockDropletAnnotationFinisher.
type MockDropletAnnotationFinisherMockRecorder struct {
	mock *MockDropletAnnotationFinisher
}

// NewMockDropletAnnotationFinisher creates a new mock instance.
func NewMockDropletAnnotationFinisher(ctrl *gomock.Controller) *MockDropletAnnotationFinisher {
	mock := &MockDropletAnnotationFinisher{ctrl: ctrl}
	mock.recorder = &MockDropletAnnotationFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDropletAnnotationFinisher) EXPECT() *MockDropletAnnotationFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockDropletAnnotationFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.DropletAnnotationSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.DropletAnnotationSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockDropletAnnotationFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockDropletAnnotationFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockDropletAnnotationFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockDropletAnnotationFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockDropletAnnotationFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockDropletAnnotationFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockDropletAnnotationFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockDropletAnnotationFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockDropletAnnotationFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.DropletAnnotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.DropletAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockDropletAnnotationFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockDropletAnnotationFinisher)(nil).One), ctx, exec)
}

// MockDropletAnnotationFinder is a mock of DropletAnnotationFinder interface.
type MockDropletAnnotationFinder struct {
	ctrl     *gomock.Controller
	recorder *MockDropletAnnotationFinderMockRecorder
}

// MockDropletAnnotationFinderMockRecorder is the mock recorder for MockDropletAnnotationFinder.
type MockDropletAnnotationFinderMockRecorder struct {
	mock *MockDropletAnnotationFinder
}

// NewMockDropletAnnotationFinder creates a new mock instance.
func NewMockDropletAnnotationFinder(ctrl *gomock.Controller) *MockDropletAnnotationFinder {
	mock := &MockDropletAnnotationFinder{ctrl: ctrl}
	mock.recorder = &MockDropletAnnotationFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDropletAnnotationFinder) EXPECT() *MockDropletAnnotationFinderMockRecorder {
	return m.recorder
}

// FindDropletAnnotation mocks base method.
func (m *MockDropletAnnotationFinder) FindDropletAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.DropletAnnotation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindDropletAnnotation", varargs...)
	ret0, _ := ret[0].(*models.DropletAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDropletAnnotation indicates an expected call of FindDropletAnnotation.
func (mr *MockDropletAnnotationFinderMockRecorder) FindDropletAnnotation(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDropletAnnotation", reflect.TypeOf((*MockDropletAnnotationFinder)(nil).FindDropletAnnotation), varargs...)
}

// MockDropletAnnotationInserter is a mock of DropletAnnotationInserter interface.
type MockDropletAnnotationInserter struct {
	ctrl     *gomock.Controller
	recorder *MockDropletAnnotationInserterMockRecorder
}

// MockDropletAnnotationInserterMockRecorder is the mock recorder for MockDropletAnnotationInserter.
type MockDropletAnnotationInserterMockRecorder struct {
	mock *MockDropletAnnotationInserter
}

// NewMockDropletAnnotationInserter creates a new mock instance.
func NewMockDropletAnnotationInserter(ctrl *gomock.Controller) *MockDropletAnnotationInserter {
	mock := &MockDropletAnnotationInserter{ctrl: ctrl}
	mock.recorder = &MockDropletAnnotationInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDropletAnnotationInserter) EXPECT() *MockDropletAnnotationInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockDropletAnnotationInserter) Insert(o *models.DropletAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockDropletAnnotationInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDropletAnnotationInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockDropletAnnotationUpdater is a mock of DropletAnnotationUpdater interface.
type MockDropletAnnotationUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockDropletAnnotationUpdaterMockRecorder
}

// MockDropletAnnotationUpdaterMockRecorder is the mock recorder for MockDropletAnnotationUpdater.
type MockDropletAnnotationUpdaterMockRecorder struct {
	mock *MockDropletAnnotationUpdater
}

// NewMockDropletAnnotationUpdater creates a new mock instance.
func NewMockDropletAnnotationUpdater(ctrl *gomock.Controller) *MockDropletAnnotationUpdater {
	mock := &MockDropletAnnotationUpdater{ctrl: ctrl}
	mock.recorder = &MockDropletAnnotationUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDropletAnnotationUpdater) EXPECT() *MockDropletAnnotationUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockDropletAnnotationUpdater) Update(o *models.DropletAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDropletAnnotationUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDropletAnnotationUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockDropletAnnotationUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockDropletAnnotationUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockDropletAnnotationUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockDropletAnnotationUpdater) UpdateAllSlice(o models.DropletAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockDropletAnnotationUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockDropletAnnotationUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockDropletAnnotationDeleter is a mock of DropletAnnotationDeleter interface.
type MockDropletAnnotationDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockDropletAnnotationDeleterMockRecorder
}

// MockDropletAnnotationDeleterMockRecorder is the mock recorder for MockDropletAnnotationDeleter.
type MockDropletAnnotationDeleterMockRecorder struct {
	mock *MockDropletAnnotationDeleter
}

// NewMockDropletAnnotationDeleter creates a new mock instance.
func NewMockDropletAnnotationDeleter(ctrl *gomock.Controller) *MockDropletAnnotationDeleter {
	mock := &MockDropletAnnotationDeleter{ctrl: ctrl}
	mock.recorder = &MockDropletAnnotationDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDropletAnnotationDeleter) EXPECT() *MockDropletAnnotationDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDropletAnnotationDeleter) Delete(o *models.DropletAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDropletAnnotationDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDropletAnnotationDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockDropletAnnotationDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockDropletAnnotationDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockDropletAnnotationDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockDropletAnnotationDeleter) DeleteAllSlice(o models.DropletAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockDropletAnnotationDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockDropletAnnotationDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockDropletAnnotationReloader is a mock of DropletAnnotationReloader interface.
type MockDropletAnnotationReloader struct {
	ctrl     *gomock.Controller
	recorder *MockDropletAnnotationReloaderMockRecorder
}

// MockDropletAnnotationReloaderMockRecorder is the mock recorder for MockDropletAnnotationReloader.
type MockDropletAnnotationReloaderMockRecorder struct {
	mock *MockDropletAnnotationReloader
}

// NewMockDropletAnnotationReloader creates a new mock instance.
func NewMockDropletAnnotationReloader(ctrl *gomock.Controller) *MockDropletAnnotationReloader {
	mock := &MockDropletAnnotationReloader{ctrl: ctrl}
	mock.recorder = &MockDropletAnnotationReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDropletAnnotationReloader) EXPECT() *MockDropletAnnotationReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockDropletAnnotationReloader) Reload(o *models.DropletAnnotation, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockDropletAnnotationReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockDropletAnnotationReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockDropletAnnotationReloader) ReloadAll(o *models.DropletAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockDropletAnnotationReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockDropletAnnotationReloader)(nil).ReloadAll), o, ctx, exec)
}
