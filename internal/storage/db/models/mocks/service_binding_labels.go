//go:build unit
// +build unit

//

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_service_binding_labels.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	models "github.com/cloudfoundry/go-cf-api/internal/storage/db/models"
	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
)

// MockServiceBindingLabelUpserter is a mock of ServiceBindingLabelUpserter interface.
type MockServiceBindingLabelUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBindingLabelUpserterMockRecorder
}

// MockServiceBindingLabelUpserterMockRecorder is the mock recorder for MockServiceBindingLabelUpserter.
type MockServiceBindingLabelUpserterMockRecorder struct {
	mock *MockServiceBindingLabelUpserter
}

// NewMockServiceBindingLabelUpserter creates a new mock instance.
func NewMockServiceBindingLabelUpserter(ctrl *gomock.Controller) *MockServiceBindingLabelUpserter {
	mock := &MockServiceBindingLabelUpserter{ctrl: ctrl}
	mock.recorder = &MockServiceBindingLabelUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBindingLabelUpserter) EXPECT() *MockServiceBindingLabelUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockServiceBindingLabelUpserter) Upsert(o *models.ServiceBindingLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockServiceBindingLabelUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockServiceBindingLabelUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockServiceBindingLabelFinisher is a mock of ServiceBindingLabelFinisher interface.
type MockServiceBindingLabelFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBindingLabelFinisherMockRecorder
}

// MockServiceBindingLabelFinisherMockRecorder is the mock recorder for MockServiceBindingLabelFinisher.
type MockServiceBindingLabelFinisherMockRecorder struct {
	mock *MockServiceBindingLabelFinisher
}

// NewMockServiceBindingLabelFinisher creates a new mock instance.
func NewMockServiceBindingLabelFinisher(ctrl *gomock.Controller) *MockServiceBindingLabelFinisher {
	mock := &MockServiceBindingLabelFinisher{ctrl: ctrl}
	mock.recorder = &MockServiceBindingLabelFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBindingLabelFinisher) EXPECT() *MockServiceBindingLabelFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockServiceBindingLabelFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.ServiceBindingLabelSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.ServiceBindingLabelSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockServiceBindingLabelFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockServiceBindingLabelFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockServiceBindingLabelFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockServiceBindingLabelFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockServiceBindingLabelFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockServiceBindingLabelFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockServiceBindingLabelFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockServiceBindingLabelFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockServiceBindingLabelFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.ServiceBindingLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.ServiceBindingLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockServiceBindingLabelFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockServiceBindingLabelFinisher)(nil).One), ctx, exec)
}

// MockServiceBindingLabelFinder is a mock of ServiceBindingLabelFinder interface.
type MockServiceBindingLabelFinder struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBindingLabelFinderMockRecorder
}

// MockServiceBindingLabelFinderMockRecorder is the mock recorder for MockServiceBindingLabelFinder.
type MockServiceBindingLabelFinderMockRecorder struct {
	mock *MockServiceBindingLabelFinder
}

// NewMockServiceBindingLabelFinder creates a new mock instance.
func NewMockServiceBindingLabelFinder(ctrl *gomock.Controller) *MockServiceBindingLabelFinder {
	mock := &MockServiceBindingLabelFinder{ctrl: ctrl}
	mock.recorder = &MockServiceBindingLabelFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBindingLabelFinder) EXPECT() *MockServiceBindingLabelFinderMockRecorder {
	return m.recorder
}

// FindServiceBindingLabel mocks base method.
func (m *MockServiceBindingLabelFinder) FindServiceBindingLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.ServiceBindingLabel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindServiceBindingLabel", varargs...)
	ret0, _ := ret[0].(*models.ServiceBindingLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindServiceBindingLabel indicates an expected call of FindServiceBindingLabel.
func (mr *MockServiceBindingLabelFinderMockRecorder) FindServiceBindingLabel(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindServiceBindingLabel", reflect.TypeOf((*MockServiceBindingLabelFinder)(nil).FindServiceBindingLabel), varargs...)
}

// MockServiceBindingLabelInserter is a mock of ServiceBindingLabelInserter interface.
type MockServiceBindingLabelInserter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBindingLabelInserterMockRecorder
}

// MockServiceBindingLabelInserterMockRecorder is the mock recorder for MockServiceBindingLabelInserter.
type MockServiceBindingLabelInserterMockRecorder struct {
	mock *MockServiceBindingLabelInserter
}

// NewMockServiceBindingLabelInserter creates a new mock instance.
func NewMockServiceBindingLabelInserter(ctrl *gomock.Controller) *MockServiceBindingLabelInserter {
	mock := &MockServiceBindingLabelInserter{ctrl: ctrl}
	mock.recorder = &MockServiceBindingLabelInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBindingLabelInserter) EXPECT() *MockServiceBindingLabelInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockServiceBindingLabelInserter) Insert(o *models.ServiceBindingLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockServiceBindingLabelInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockServiceBindingLabelInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockServiceBindingLabelUpdater is a mock of ServiceBindingLabelUpdater interface.
type MockServiceBindingLabelUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBindingLabelUpdaterMockRecorder
}

// MockServiceBindingLabelUpdaterMockRecorder is the mock recorder for MockServiceBindingLabelUpdater.
type MockServiceBindingLabelUpdaterMockRecorder struct {
	mock *MockServiceBindingLabelUpdater
}

// NewMockServiceBindingLabelUpdater creates a new mock instance.
func NewMockServiceBindingLabelUpdater(ctrl *gomock.Controller) *MockServiceBindingLabelUpdater {
	mock := &MockServiceBindingLabelUpdater{ctrl: ctrl}
	mock.recorder = &MockServiceBindingLabelUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBindingLabelUpdater) EXPECT() *MockServiceBindingLabelUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockServiceBindingLabelUpdater) Update(o *models.ServiceBindingLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServiceBindingLabelUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceBindingLabelUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockServiceBindingLabelUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockServiceBindingLabelUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockServiceBindingLabelUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockServiceBindingLabelUpdater) UpdateAllSlice(o models.ServiceBindingLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockServiceBindingLabelUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockServiceBindingLabelUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockServiceBindingLabelDeleter is a mock of ServiceBindingLabelDeleter interface.
type MockServiceBindingLabelDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBindingLabelDeleterMockRecorder
}

// MockServiceBindingLabelDeleterMockRecorder is the mock recorder for MockServiceBindingLabelDeleter.
type MockServiceBindingLabelDeleterMockRecorder struct {
	mock *MockServiceBindingLabelDeleter
}

// NewMockServiceBindingLabelDeleter creates a new mock instance.
func NewMockServiceBindingLabelDeleter(ctrl *gomock.Controller) *MockServiceBindingLabelDeleter {
	mock := &MockServiceBindingLabelDeleter{ctrl: ctrl}
	mock.recorder = &MockServiceBindingLabelDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBindingLabelDeleter) EXPECT() *MockServiceBindingLabelDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockServiceBindingLabelDeleter) Delete(o *models.ServiceBindingLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceBindingLabelDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceBindingLabelDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockServiceBindingLabelDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockServiceBindingLabelDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockServiceBindingLabelDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockServiceBindingLabelDeleter) DeleteAllSlice(o models.ServiceBindingLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockServiceBindingLabelDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockServiceBindingLabelDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockServiceBindingLabelReloader is a mock of ServiceBindingLabelReloader interface.
type MockServiceBindingLabelReloader struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBindingLabelReloaderMockRecorder
}

// MockServiceBindingLabelReloaderMockRecorder is the mock recorder for MockServiceBindingLabelReloader.
type MockServiceBindingLabelReloaderMockRecorder struct {
	mock *MockServiceBindingLabelReloader
}

// NewMockServiceBindingLabelReloader creates a new mock instance.
func NewMockServiceBindingLabelReloader(ctrl *gomock.Controller) *MockServiceBindingLabelReloader {
	mock := &MockServiceBindingLabelReloader{ctrl: ctrl}
	mock.recorder = &MockServiceBindingLabelReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBindingLabelReloader) EXPECT() *MockServiceBindingLabelReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockServiceBindingLabelReloader) Reload(o *models.ServiceBindingLabel, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockServiceBindingLabelReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockServiceBindingLabelReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockServiceBindingLabelReloader) ReloadAll(o *models.ServiceBindingLabelSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockServiceBindingLabelReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockServiceBindingLabelReloader)(nil).ReloadAll), o, ctx, exec)
}
