//go:build unit
// +build unit

//

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_stacks.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/storage/db/models"
)

// MockStackUpserter is a mock of StackUpserter interface.
type MockStackUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockStackUpserterMockRecorder
}

// MockStackUpserterMockRecorder is the mock recorder for MockStackUpserter.
type MockStackUpserterMockRecorder struct {
	mock *MockStackUpserter
}

// NewMockStackUpserter creates a new mock instance.
func NewMockStackUpserter(ctrl *gomock.Controller) *MockStackUpserter {
	mock := &MockStackUpserter{ctrl: ctrl}
	mock.recorder = &MockStackUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackUpserter) EXPECT() *MockStackUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockStackUpserter) Upsert(o *models.Stack, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockStackUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockStackUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockStackFinisher is a mock of StackFinisher interface.
type MockStackFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockStackFinisherMockRecorder
}

// MockStackFinisherMockRecorder is the mock recorder for MockStackFinisher.
type MockStackFinisherMockRecorder struct {
	mock *MockStackFinisher
}

// NewMockStackFinisher creates a new mock instance.
func NewMockStackFinisher(ctrl *gomock.Controller) *MockStackFinisher {
	mock := &MockStackFinisher{ctrl: ctrl}
	mock.recorder = &MockStackFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackFinisher) EXPECT() *MockStackFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockStackFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.StackSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.StackSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockStackFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockStackFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockStackFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockStackFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockStackFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockStackFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockStackFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockStackFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockStackFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.Stack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.Stack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockStackFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockStackFinisher)(nil).One), ctx, exec)
}

// MockStackFinder is a mock of StackFinder interface.
type MockStackFinder struct {
	ctrl     *gomock.Controller
	recorder *MockStackFinderMockRecorder
}

// MockStackFinderMockRecorder is the mock recorder for MockStackFinder.
type MockStackFinderMockRecorder struct {
	mock *MockStackFinder
}

// NewMockStackFinder creates a new mock instance.
func NewMockStackFinder(ctrl *gomock.Controller) *MockStackFinder {
	mock := &MockStackFinder{ctrl: ctrl}
	mock.recorder = &MockStackFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackFinder) EXPECT() *MockStackFinderMockRecorder {
	return m.recorder
}

// FindStack mocks base method.
func (m *MockStackFinder) FindStack(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.Stack, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindStack", varargs...)
	ret0, _ := ret[0].(*models.Stack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStack indicates an expected call of FindStack.
func (mr *MockStackFinderMockRecorder) FindStack(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStack", reflect.TypeOf((*MockStackFinder)(nil).FindStack), varargs...)
}

// MockStackInserter is a mock of StackInserter interface.
type MockStackInserter struct {
	ctrl     *gomock.Controller
	recorder *MockStackInserterMockRecorder
}

// MockStackInserterMockRecorder is the mock recorder for MockStackInserter.
type MockStackInserterMockRecorder struct {
	mock *MockStackInserter
}

// NewMockStackInserter creates a new mock instance.
func NewMockStackInserter(ctrl *gomock.Controller) *MockStackInserter {
	mock := &MockStackInserter{ctrl: ctrl}
	mock.recorder = &MockStackInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackInserter) EXPECT() *MockStackInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockStackInserter) Insert(o *models.Stack, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockStackInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockStackInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockStackUpdater is a mock of StackUpdater interface.
type MockStackUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockStackUpdaterMockRecorder
}

// MockStackUpdaterMockRecorder is the mock recorder for MockStackUpdater.
type MockStackUpdaterMockRecorder struct {
	mock *MockStackUpdater
}

// NewMockStackUpdater creates a new mock instance.
func NewMockStackUpdater(ctrl *gomock.Controller) *MockStackUpdater {
	mock := &MockStackUpdater{ctrl: ctrl}
	mock.recorder = &MockStackUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackUpdater) EXPECT() *MockStackUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockStackUpdater) Update(o *models.Stack, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockStackUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStackUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockStackUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockStackUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockStackUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockStackUpdater) UpdateAllSlice(o models.StackSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockStackUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockStackUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockStackDeleter is a mock of StackDeleter interface.
type MockStackDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockStackDeleterMockRecorder
}

// MockStackDeleterMockRecorder is the mock recorder for MockStackDeleter.
type MockStackDeleterMockRecorder struct {
	mock *MockStackDeleter
}

// NewMockStackDeleter creates a new mock instance.
func NewMockStackDeleter(ctrl *gomock.Controller) *MockStackDeleter {
	mock := &MockStackDeleter{ctrl: ctrl}
	mock.recorder = &MockStackDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackDeleter) EXPECT() *MockStackDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStackDeleter) Delete(o *models.Stack, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockStackDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStackDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockStackDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockStackDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockStackDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockStackDeleter) DeleteAllSlice(o models.StackSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockStackDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockStackDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockStackReloader is a mock of StackReloader interface.
type MockStackReloader struct {
	ctrl     *gomock.Controller
	recorder *MockStackReloaderMockRecorder
}

// MockStackReloaderMockRecorder is the mock recorder for MockStackReloader.
type MockStackReloaderMockRecorder struct {
	mock *MockStackReloader
}

// NewMockStackReloader creates a new mock instance.
func NewMockStackReloader(ctrl *gomock.Controller) *MockStackReloader {
	mock := &MockStackReloader{ctrl: ctrl}
	mock.recorder = &MockStackReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackReloader) EXPECT() *MockStackReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockStackReloader) Reload(o *models.Stack, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockStackReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockStackReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockStackReloader) ReloadAll(o *models.StackSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockStackReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockStackReloader)(nil).ReloadAll), o, ctx, exec)
}
