// +build unit

//

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_sidecars.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/storage/db/models"
)

// MockSidecarUpserter is a mock of SidecarUpserter interface.
type MockSidecarUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockSidecarUpserterMockRecorder
}

// MockSidecarUpserterMockRecorder is the mock recorder for MockSidecarUpserter.
type MockSidecarUpserterMockRecorder struct {
	mock *MockSidecarUpserter
}

// NewMockSidecarUpserter creates a new mock instance.
func NewMockSidecarUpserter(ctrl *gomock.Controller) *MockSidecarUpserter {
	mock := &MockSidecarUpserter{ctrl: ctrl}
	mock.recorder = &MockSidecarUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSidecarUpserter) EXPECT() *MockSidecarUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockSidecarUpserter) Upsert(o *models.Sidecar, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockSidecarUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockSidecarUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockSidecarFinisher is a mock of SidecarFinisher interface.
type MockSidecarFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockSidecarFinisherMockRecorder
}

// MockSidecarFinisherMockRecorder is the mock recorder for MockSidecarFinisher.
type MockSidecarFinisherMockRecorder struct {
	mock *MockSidecarFinisher
}

// NewMockSidecarFinisher creates a new mock instance.
func NewMockSidecarFinisher(ctrl *gomock.Controller) *MockSidecarFinisher {
	mock := &MockSidecarFinisher{ctrl: ctrl}
	mock.recorder = &MockSidecarFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSidecarFinisher) EXPECT() *MockSidecarFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockSidecarFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.SidecarSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.SidecarSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockSidecarFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockSidecarFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockSidecarFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockSidecarFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockSidecarFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockSidecarFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockSidecarFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockSidecarFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockSidecarFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.Sidecar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.Sidecar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockSidecarFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockSidecarFinisher)(nil).One), ctx, exec)
}

// MockSidecarFinder is a mock of SidecarFinder interface.
type MockSidecarFinder struct {
	ctrl     *gomock.Controller
	recorder *MockSidecarFinderMockRecorder
}

// MockSidecarFinderMockRecorder is the mock recorder for MockSidecarFinder.
type MockSidecarFinderMockRecorder struct {
	mock *MockSidecarFinder
}

// NewMockSidecarFinder creates a new mock instance.
func NewMockSidecarFinder(ctrl *gomock.Controller) *MockSidecarFinder {
	mock := &MockSidecarFinder{ctrl: ctrl}
	mock.recorder = &MockSidecarFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSidecarFinder) EXPECT() *MockSidecarFinderMockRecorder {
	return m.recorder
}

// FindSidecar mocks base method.
func (m *MockSidecarFinder) FindSidecar(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.Sidecar, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindSidecar", varargs...)
	ret0, _ := ret[0].(*models.Sidecar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSidecar indicates an expected call of FindSidecar.
func (mr *MockSidecarFinderMockRecorder) FindSidecar(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSidecar", reflect.TypeOf((*MockSidecarFinder)(nil).FindSidecar), varargs...)
}

// MockSidecarInserter is a mock of SidecarInserter interface.
type MockSidecarInserter struct {
	ctrl     *gomock.Controller
	recorder *MockSidecarInserterMockRecorder
}

// MockSidecarInserterMockRecorder is the mock recorder for MockSidecarInserter.
type MockSidecarInserterMockRecorder struct {
	mock *MockSidecarInserter
}

// NewMockSidecarInserter creates a new mock instance.
func NewMockSidecarInserter(ctrl *gomock.Controller) *MockSidecarInserter {
	mock := &MockSidecarInserter{ctrl: ctrl}
	mock.recorder = &MockSidecarInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSidecarInserter) EXPECT() *MockSidecarInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockSidecarInserter) Insert(o *models.Sidecar, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockSidecarInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSidecarInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockSidecarUpdater is a mock of SidecarUpdater interface.
type MockSidecarUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockSidecarUpdaterMockRecorder
}

// MockSidecarUpdaterMockRecorder is the mock recorder for MockSidecarUpdater.
type MockSidecarUpdaterMockRecorder struct {
	mock *MockSidecarUpdater
}

// NewMockSidecarUpdater creates a new mock instance.
func NewMockSidecarUpdater(ctrl *gomock.Controller) *MockSidecarUpdater {
	mock := &MockSidecarUpdater{ctrl: ctrl}
	mock.recorder = &MockSidecarUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSidecarUpdater) EXPECT() *MockSidecarUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockSidecarUpdater) Update(o *models.Sidecar, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSidecarUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSidecarUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockSidecarUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockSidecarUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockSidecarUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockSidecarUpdater) UpdateAllSlice(o models.SidecarSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockSidecarUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockSidecarUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockSidecarDeleter is a mock of SidecarDeleter interface.
type MockSidecarDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockSidecarDeleterMockRecorder
}

// MockSidecarDeleterMockRecorder is the mock recorder for MockSidecarDeleter.
type MockSidecarDeleterMockRecorder struct {
	mock *MockSidecarDeleter
}

// NewMockSidecarDeleter creates a new mock instance.
func NewMockSidecarDeleter(ctrl *gomock.Controller) *MockSidecarDeleter {
	mock := &MockSidecarDeleter{ctrl: ctrl}
	mock.recorder = &MockSidecarDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSidecarDeleter) EXPECT() *MockSidecarDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSidecarDeleter) Delete(o *models.Sidecar, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSidecarDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSidecarDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockSidecarDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockSidecarDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockSidecarDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockSidecarDeleter) DeleteAllSlice(o models.SidecarSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockSidecarDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockSidecarDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockSidecarReloader is a mock of SidecarReloader interface.
type MockSidecarReloader struct {
	ctrl     *gomock.Controller
	recorder *MockSidecarReloaderMockRecorder
}

// MockSidecarReloaderMockRecorder is the mock recorder for MockSidecarReloader.
type MockSidecarReloaderMockRecorder struct {
	mock *MockSidecarReloader
}

// NewMockSidecarReloader creates a new mock instance.
func NewMockSidecarReloader(ctrl *gomock.Controller) *MockSidecarReloader {
	mock := &MockSidecarReloader{ctrl: ctrl}
	mock.recorder = &MockSidecarReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSidecarReloader) EXPECT() *MockSidecarReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockSidecarReloader) Reload(o *models.Sidecar, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockSidecarReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockSidecarReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockSidecarReloader) ReloadAll(o *models.SidecarSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockSidecarReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockSidecarReloader)(nil).ReloadAll), o, ctx, exec)
}
