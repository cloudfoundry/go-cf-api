//go:build unit
// +build unit

//

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_lockings.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	models "github.com/cloudfoundry/go-cf-api/internal/storage/db/models"
	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
)

// MockLockingUpserter is a mock of LockingUpserter interface.
type MockLockingUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockLockingUpserterMockRecorder
}

// MockLockingUpserterMockRecorder is the mock recorder for MockLockingUpserter.
type MockLockingUpserterMockRecorder struct {
	mock *MockLockingUpserter
}

// NewMockLockingUpserter creates a new mock instance.
func NewMockLockingUpserter(ctrl *gomock.Controller) *MockLockingUpserter {
	mock := &MockLockingUpserter{ctrl: ctrl}
	mock.recorder = &MockLockingUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockingUpserter) EXPECT() *MockLockingUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockLockingUpserter) Upsert(o *models.Locking, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockLockingUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockLockingUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockLockingFinisher is a mock of LockingFinisher interface.
type MockLockingFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockLockingFinisherMockRecorder
}

// MockLockingFinisherMockRecorder is the mock recorder for MockLockingFinisher.
type MockLockingFinisherMockRecorder struct {
	mock *MockLockingFinisher
}

// NewMockLockingFinisher creates a new mock instance.
func NewMockLockingFinisher(ctrl *gomock.Controller) *MockLockingFinisher {
	mock := &MockLockingFinisher{ctrl: ctrl}
	mock.recorder = &MockLockingFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockingFinisher) EXPECT() *MockLockingFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockLockingFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.LockingSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.LockingSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockLockingFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockLockingFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockLockingFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockLockingFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockLockingFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockLockingFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockLockingFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockLockingFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockLockingFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.Locking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.Locking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockLockingFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockLockingFinisher)(nil).One), ctx, exec)
}

// MockLockingFinder is a mock of LockingFinder interface.
type MockLockingFinder struct {
	ctrl     *gomock.Controller
	recorder *MockLockingFinderMockRecorder
}

// MockLockingFinderMockRecorder is the mock recorder for MockLockingFinder.
type MockLockingFinderMockRecorder struct {
	mock *MockLockingFinder
}

// NewMockLockingFinder creates a new mock instance.
func NewMockLockingFinder(ctrl *gomock.Controller) *MockLockingFinder {
	mock := &MockLockingFinder{ctrl: ctrl}
	mock.recorder = &MockLockingFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockingFinder) EXPECT() *MockLockingFinderMockRecorder {
	return m.recorder
}

// FindLocking mocks base method.
func (m *MockLockingFinder) FindLocking(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.Locking, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindLocking", varargs...)
	ret0, _ := ret[0].(*models.Locking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLocking indicates an expected call of FindLocking.
func (mr *MockLockingFinderMockRecorder) FindLocking(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLocking", reflect.TypeOf((*MockLockingFinder)(nil).FindLocking), varargs...)
}

// MockLockingInserter is a mock of LockingInserter interface.
type MockLockingInserter struct {
	ctrl     *gomock.Controller
	recorder *MockLockingInserterMockRecorder
}

// MockLockingInserterMockRecorder is the mock recorder for MockLockingInserter.
type MockLockingInserterMockRecorder struct {
	mock *MockLockingInserter
}

// NewMockLockingInserter creates a new mock instance.
func NewMockLockingInserter(ctrl *gomock.Controller) *MockLockingInserter {
	mock := &MockLockingInserter{ctrl: ctrl}
	mock.recorder = &MockLockingInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockingInserter) EXPECT() *MockLockingInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockLockingInserter) Insert(o *models.Locking, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockLockingInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockLockingInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockLockingUpdater is a mock of LockingUpdater interface.
type MockLockingUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockLockingUpdaterMockRecorder
}

// MockLockingUpdaterMockRecorder is the mock recorder for MockLockingUpdater.
type MockLockingUpdaterMockRecorder struct {
	mock *MockLockingUpdater
}

// NewMockLockingUpdater creates a new mock instance.
func NewMockLockingUpdater(ctrl *gomock.Controller) *MockLockingUpdater {
	mock := &MockLockingUpdater{ctrl: ctrl}
	mock.recorder = &MockLockingUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockingUpdater) EXPECT() *MockLockingUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockLockingUpdater) Update(o *models.Locking, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockLockingUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLockingUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockLockingUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockLockingUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockLockingUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockLockingUpdater) UpdateAllSlice(o models.LockingSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockLockingUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockLockingUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockLockingDeleter is a mock of LockingDeleter interface.
type MockLockingDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockLockingDeleterMockRecorder
}

// MockLockingDeleterMockRecorder is the mock recorder for MockLockingDeleter.
type MockLockingDeleterMockRecorder struct {
	mock *MockLockingDeleter
}

// NewMockLockingDeleter creates a new mock instance.
func NewMockLockingDeleter(ctrl *gomock.Controller) *MockLockingDeleter {
	mock := &MockLockingDeleter{ctrl: ctrl}
	mock.recorder = &MockLockingDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockingDeleter) EXPECT() *MockLockingDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockLockingDeleter) Delete(o *models.Locking, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockLockingDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLockingDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockLockingDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockLockingDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockLockingDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockLockingDeleter) DeleteAllSlice(o models.LockingSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockLockingDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockLockingDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockLockingReloader is a mock of LockingReloader interface.
type MockLockingReloader struct {
	ctrl     *gomock.Controller
	recorder *MockLockingReloaderMockRecorder
}

// MockLockingReloaderMockRecorder is the mock recorder for MockLockingReloader.
type MockLockingReloaderMockRecorder struct {
	mock *MockLockingReloader
}

// NewMockLockingReloader creates a new mock instance.
func NewMockLockingReloader(ctrl *gomock.Controller) *MockLockingReloader {
	mock := &MockLockingReloader{ctrl: ctrl}
	mock.recorder = &MockLockingReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockingReloader) EXPECT() *MockLockingReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockLockingReloader) Reload(o *models.Locking, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockLockingReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockLockingReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockLockingReloader) ReloadAll(o *models.LockingSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockLockingReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockLockingReloader)(nil).ReloadAll), o, ctx, exec)
}
