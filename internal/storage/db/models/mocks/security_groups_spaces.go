//go:build unit
// +build unit

//

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_security_groups_spaces.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/storage/db/models"
)

// MockSecurityGroupsSpaceUpserter is a mock of SecurityGroupsSpaceUpserter interface.
type MockSecurityGroupsSpaceUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityGroupsSpaceUpserterMockRecorder
}

// MockSecurityGroupsSpaceUpserterMockRecorder is the mock recorder for MockSecurityGroupsSpaceUpserter.
type MockSecurityGroupsSpaceUpserterMockRecorder struct {
	mock *MockSecurityGroupsSpaceUpserter
}

// NewMockSecurityGroupsSpaceUpserter creates a new mock instance.
func NewMockSecurityGroupsSpaceUpserter(ctrl *gomock.Controller) *MockSecurityGroupsSpaceUpserter {
	mock := &MockSecurityGroupsSpaceUpserter{ctrl: ctrl}
	mock.recorder = &MockSecurityGroupsSpaceUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityGroupsSpaceUpserter) EXPECT() *MockSecurityGroupsSpaceUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockSecurityGroupsSpaceUpserter) Upsert(o *models.SecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockSecurityGroupsSpaceUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockSecurityGroupsSpaceUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockSecurityGroupsSpaceFinisher is a mock of SecurityGroupsSpaceFinisher interface.
type MockSecurityGroupsSpaceFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityGroupsSpaceFinisherMockRecorder
}

// MockSecurityGroupsSpaceFinisherMockRecorder is the mock recorder for MockSecurityGroupsSpaceFinisher.
type MockSecurityGroupsSpaceFinisherMockRecorder struct {
	mock *MockSecurityGroupsSpaceFinisher
}

// NewMockSecurityGroupsSpaceFinisher creates a new mock instance.
func NewMockSecurityGroupsSpaceFinisher(ctrl *gomock.Controller) *MockSecurityGroupsSpaceFinisher {
	mock := &MockSecurityGroupsSpaceFinisher{ctrl: ctrl}
	mock.recorder = &MockSecurityGroupsSpaceFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityGroupsSpaceFinisher) EXPECT() *MockSecurityGroupsSpaceFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockSecurityGroupsSpaceFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.SecurityGroupsSpaceSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.SecurityGroupsSpaceSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockSecurityGroupsSpaceFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockSecurityGroupsSpaceFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockSecurityGroupsSpaceFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockSecurityGroupsSpaceFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockSecurityGroupsSpaceFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockSecurityGroupsSpaceFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockSecurityGroupsSpaceFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockSecurityGroupsSpaceFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockSecurityGroupsSpaceFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.SecurityGroupsSpace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.SecurityGroupsSpace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockSecurityGroupsSpaceFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockSecurityGroupsSpaceFinisher)(nil).One), ctx, exec)
}

// MockSecurityGroupsSpaceFinder is a mock of SecurityGroupsSpaceFinder interface.
type MockSecurityGroupsSpaceFinder struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityGroupsSpaceFinderMockRecorder
}

// MockSecurityGroupsSpaceFinderMockRecorder is the mock recorder for MockSecurityGroupsSpaceFinder.
type MockSecurityGroupsSpaceFinderMockRecorder struct {
	mock *MockSecurityGroupsSpaceFinder
}

// NewMockSecurityGroupsSpaceFinder creates a new mock instance.
func NewMockSecurityGroupsSpaceFinder(ctrl *gomock.Controller) *MockSecurityGroupsSpaceFinder {
	mock := &MockSecurityGroupsSpaceFinder{ctrl: ctrl}
	mock.recorder = &MockSecurityGroupsSpaceFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityGroupsSpaceFinder) EXPECT() *MockSecurityGroupsSpaceFinderMockRecorder {
	return m.recorder
}

// FindSecurityGroupsSpace mocks base method.
func (m *MockSecurityGroupsSpaceFinder) FindSecurityGroupsSpace(ctx context.Context, exec boil.ContextExecutor, securityGroupsSpacesPK int, selectCols ...string) (*models.SecurityGroupsSpace, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, securityGroupsSpacesPK}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindSecurityGroupsSpace", varargs...)
	ret0, _ := ret[0].(*models.SecurityGroupsSpace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSecurityGroupsSpace indicates an expected call of FindSecurityGroupsSpace.
func (mr *MockSecurityGroupsSpaceFinderMockRecorder) FindSecurityGroupsSpace(ctx, exec, securityGroupsSpacesPK interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, securityGroupsSpacesPK}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSecurityGroupsSpace", reflect.TypeOf((*MockSecurityGroupsSpaceFinder)(nil).FindSecurityGroupsSpace), varargs...)
}

// MockSecurityGroupsSpaceInserter is a mock of SecurityGroupsSpaceInserter interface.
type MockSecurityGroupsSpaceInserter struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityGroupsSpaceInserterMockRecorder
}

// MockSecurityGroupsSpaceInserterMockRecorder is the mock recorder for MockSecurityGroupsSpaceInserter.
type MockSecurityGroupsSpaceInserterMockRecorder struct {
	mock *MockSecurityGroupsSpaceInserter
}

// NewMockSecurityGroupsSpaceInserter creates a new mock instance.
func NewMockSecurityGroupsSpaceInserter(ctrl *gomock.Controller) *MockSecurityGroupsSpaceInserter {
	mock := &MockSecurityGroupsSpaceInserter{ctrl: ctrl}
	mock.recorder = &MockSecurityGroupsSpaceInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityGroupsSpaceInserter) EXPECT() *MockSecurityGroupsSpaceInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockSecurityGroupsSpaceInserter) Insert(o *models.SecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockSecurityGroupsSpaceInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSecurityGroupsSpaceInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockSecurityGroupsSpaceUpdater is a mock of SecurityGroupsSpaceUpdater interface.
type MockSecurityGroupsSpaceUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityGroupsSpaceUpdaterMockRecorder
}

// MockSecurityGroupsSpaceUpdaterMockRecorder is the mock recorder for MockSecurityGroupsSpaceUpdater.
type MockSecurityGroupsSpaceUpdaterMockRecorder struct {
	mock *MockSecurityGroupsSpaceUpdater
}

// NewMockSecurityGroupsSpaceUpdater creates a new mock instance.
func NewMockSecurityGroupsSpaceUpdater(ctrl *gomock.Controller) *MockSecurityGroupsSpaceUpdater {
	mock := &MockSecurityGroupsSpaceUpdater{ctrl: ctrl}
	mock.recorder = &MockSecurityGroupsSpaceUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityGroupsSpaceUpdater) EXPECT() *MockSecurityGroupsSpaceUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockSecurityGroupsSpaceUpdater) Update(o *models.SecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSecurityGroupsSpaceUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSecurityGroupsSpaceUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockSecurityGroupsSpaceUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockSecurityGroupsSpaceUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockSecurityGroupsSpaceUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockSecurityGroupsSpaceUpdater) UpdateAllSlice(o models.SecurityGroupsSpaceSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockSecurityGroupsSpaceUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockSecurityGroupsSpaceUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockSecurityGroupsSpaceDeleter is a mock of SecurityGroupsSpaceDeleter interface.
type MockSecurityGroupsSpaceDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityGroupsSpaceDeleterMockRecorder
}

// MockSecurityGroupsSpaceDeleterMockRecorder is the mock recorder for MockSecurityGroupsSpaceDeleter.
type MockSecurityGroupsSpaceDeleterMockRecorder struct {
	mock *MockSecurityGroupsSpaceDeleter
}

// NewMockSecurityGroupsSpaceDeleter creates a new mock instance.
func NewMockSecurityGroupsSpaceDeleter(ctrl *gomock.Controller) *MockSecurityGroupsSpaceDeleter {
	mock := &MockSecurityGroupsSpaceDeleter{ctrl: ctrl}
	mock.recorder = &MockSecurityGroupsSpaceDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityGroupsSpaceDeleter) EXPECT() *MockSecurityGroupsSpaceDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSecurityGroupsSpaceDeleter) Delete(o *models.SecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSecurityGroupsSpaceDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSecurityGroupsSpaceDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockSecurityGroupsSpaceDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockSecurityGroupsSpaceDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockSecurityGroupsSpaceDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockSecurityGroupsSpaceDeleter) DeleteAllSlice(o models.SecurityGroupsSpaceSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockSecurityGroupsSpaceDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockSecurityGroupsSpaceDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockSecurityGroupsSpaceReloader is a mock of SecurityGroupsSpaceReloader interface.
type MockSecurityGroupsSpaceReloader struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityGroupsSpaceReloaderMockRecorder
}

// MockSecurityGroupsSpaceReloaderMockRecorder is the mock recorder for MockSecurityGroupsSpaceReloader.
type MockSecurityGroupsSpaceReloaderMockRecorder struct {
	mock *MockSecurityGroupsSpaceReloader
}

// NewMockSecurityGroupsSpaceReloader creates a new mock instance.
func NewMockSecurityGroupsSpaceReloader(ctrl *gomock.Controller) *MockSecurityGroupsSpaceReloader {
	mock := &MockSecurityGroupsSpaceReloader{ctrl: ctrl}
	mock.recorder = &MockSecurityGroupsSpaceReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityGroupsSpaceReloader) EXPECT() *MockSecurityGroupsSpaceReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockSecurityGroupsSpaceReloader) Reload(o *models.SecurityGroupsSpace, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockSecurityGroupsSpaceReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockSecurityGroupsSpaceReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockSecurityGroupsSpaceReloader) ReloadAll(o *models.SecurityGroupsSpaceSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockSecurityGroupsSpaceReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockSecurityGroupsSpaceReloader)(nil).ReloadAll), o, ctx, exec)
}
