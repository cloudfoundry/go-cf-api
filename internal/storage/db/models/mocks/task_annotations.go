//go:build unit
// +build unit

//

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_task_annotations.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.com/cloudfoundry/go-cf-api/internal/storage/db/models"
)

// MockTaskAnnotationUpserter is a mock of TaskAnnotationUpserter interface.
type MockTaskAnnotationUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockTaskAnnotationUpserterMockRecorder
}

// MockTaskAnnotationUpserterMockRecorder is the mock recorder for MockTaskAnnotationUpserter.
type MockTaskAnnotationUpserterMockRecorder struct {
	mock *MockTaskAnnotationUpserter
}

// NewMockTaskAnnotationUpserter creates a new mock instance.
func NewMockTaskAnnotationUpserter(ctrl *gomock.Controller) *MockTaskAnnotationUpserter {
	mock := &MockTaskAnnotationUpserter{ctrl: ctrl}
	mock.recorder = &MockTaskAnnotationUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskAnnotationUpserter) EXPECT() *MockTaskAnnotationUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockTaskAnnotationUpserter) Upsert(o *models.TaskAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockTaskAnnotationUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockTaskAnnotationUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockTaskAnnotationFinisher is a mock of TaskAnnotationFinisher interface.
type MockTaskAnnotationFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockTaskAnnotationFinisherMockRecorder
}

// MockTaskAnnotationFinisherMockRecorder is the mock recorder for MockTaskAnnotationFinisher.
type MockTaskAnnotationFinisherMockRecorder struct {
	mock *MockTaskAnnotationFinisher
}

// NewMockTaskAnnotationFinisher creates a new mock instance.
func NewMockTaskAnnotationFinisher(ctrl *gomock.Controller) *MockTaskAnnotationFinisher {
	mock := &MockTaskAnnotationFinisher{ctrl: ctrl}
	mock.recorder = &MockTaskAnnotationFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskAnnotationFinisher) EXPECT() *MockTaskAnnotationFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockTaskAnnotationFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.TaskAnnotationSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.TaskAnnotationSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockTaskAnnotationFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockTaskAnnotationFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockTaskAnnotationFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockTaskAnnotationFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockTaskAnnotationFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockTaskAnnotationFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockTaskAnnotationFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockTaskAnnotationFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockTaskAnnotationFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.TaskAnnotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.TaskAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockTaskAnnotationFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockTaskAnnotationFinisher)(nil).One), ctx, exec)
}

// MockTaskAnnotationFinder is a mock of TaskAnnotationFinder interface.
type MockTaskAnnotationFinder struct {
	ctrl     *gomock.Controller
	recorder *MockTaskAnnotationFinderMockRecorder
}

// MockTaskAnnotationFinderMockRecorder is the mock recorder for MockTaskAnnotationFinder.
type MockTaskAnnotationFinderMockRecorder struct {
	mock *MockTaskAnnotationFinder
}

// NewMockTaskAnnotationFinder creates a new mock instance.
func NewMockTaskAnnotationFinder(ctrl *gomock.Controller) *MockTaskAnnotationFinder {
	mock := &MockTaskAnnotationFinder{ctrl: ctrl}
	mock.recorder = &MockTaskAnnotationFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskAnnotationFinder) EXPECT() *MockTaskAnnotationFinderMockRecorder {
	return m.recorder
}

// FindTaskAnnotation mocks base method.
func (m *MockTaskAnnotationFinder) FindTaskAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.TaskAnnotation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindTaskAnnotation", varargs...)
	ret0, _ := ret[0].(*models.TaskAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTaskAnnotation indicates an expected call of FindTaskAnnotation.
func (mr *MockTaskAnnotationFinderMockRecorder) FindTaskAnnotation(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTaskAnnotation", reflect.TypeOf((*MockTaskAnnotationFinder)(nil).FindTaskAnnotation), varargs...)
}

// MockTaskAnnotationInserter is a mock of TaskAnnotationInserter interface.
type MockTaskAnnotationInserter struct {
	ctrl     *gomock.Controller
	recorder *MockTaskAnnotationInserterMockRecorder
}

// MockTaskAnnotationInserterMockRecorder is the mock recorder for MockTaskAnnotationInserter.
type MockTaskAnnotationInserterMockRecorder struct {
	mock *MockTaskAnnotationInserter
}

// NewMockTaskAnnotationInserter creates a new mock instance.
func NewMockTaskAnnotationInserter(ctrl *gomock.Controller) *MockTaskAnnotationInserter {
	mock := &MockTaskAnnotationInserter{ctrl: ctrl}
	mock.recorder = &MockTaskAnnotationInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskAnnotationInserter) EXPECT() *MockTaskAnnotationInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockTaskAnnotationInserter) Insert(o *models.TaskAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockTaskAnnotationInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTaskAnnotationInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockTaskAnnotationUpdater is a mock of TaskAnnotationUpdater interface.
type MockTaskAnnotationUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockTaskAnnotationUpdaterMockRecorder
}

// MockTaskAnnotationUpdaterMockRecorder is the mock recorder for MockTaskAnnotationUpdater.
type MockTaskAnnotationUpdaterMockRecorder struct {
	mock *MockTaskAnnotationUpdater
}

// NewMockTaskAnnotationUpdater creates a new mock instance.
func NewMockTaskAnnotationUpdater(ctrl *gomock.Controller) *MockTaskAnnotationUpdater {
	mock := &MockTaskAnnotationUpdater{ctrl: ctrl}
	mock.recorder = &MockTaskAnnotationUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskAnnotationUpdater) EXPECT() *MockTaskAnnotationUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockTaskAnnotationUpdater) Update(o *models.TaskAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTaskAnnotationUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTaskAnnotationUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockTaskAnnotationUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockTaskAnnotationUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockTaskAnnotationUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockTaskAnnotationUpdater) UpdateAllSlice(o models.TaskAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockTaskAnnotationUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockTaskAnnotationUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockTaskAnnotationDeleter is a mock of TaskAnnotationDeleter interface.
type MockTaskAnnotationDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockTaskAnnotationDeleterMockRecorder
}

// MockTaskAnnotationDeleterMockRecorder is the mock recorder for MockTaskAnnotationDeleter.
type MockTaskAnnotationDeleterMockRecorder struct {
	mock *MockTaskAnnotationDeleter
}

// NewMockTaskAnnotationDeleter creates a new mock instance.
func NewMockTaskAnnotationDeleter(ctrl *gomock.Controller) *MockTaskAnnotationDeleter {
	mock := &MockTaskAnnotationDeleter{ctrl: ctrl}
	mock.recorder = &MockTaskAnnotationDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskAnnotationDeleter) EXPECT() *MockTaskAnnotationDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTaskAnnotationDeleter) Delete(o *models.TaskAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskAnnotationDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskAnnotationDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockTaskAnnotationDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockTaskAnnotationDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockTaskAnnotationDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockTaskAnnotationDeleter) DeleteAllSlice(o models.TaskAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockTaskAnnotationDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockTaskAnnotationDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockTaskAnnotationReloader is a mock of TaskAnnotationReloader interface.
type MockTaskAnnotationReloader struct {
	ctrl     *gomock.Controller
	recorder *MockTaskAnnotationReloaderMockRecorder
}

// MockTaskAnnotationReloaderMockRecorder is the mock recorder for MockTaskAnnotationReloader.
type MockTaskAnnotationReloaderMockRecorder struct {
	mock *MockTaskAnnotationReloader
}

// NewMockTaskAnnotationReloader creates a new mock instance.
func NewMockTaskAnnotationReloader(ctrl *gomock.Controller) *MockTaskAnnotationReloader {
	mock := &MockTaskAnnotationReloader{ctrl: ctrl}
	mock.recorder = &MockTaskAnnotationReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskAnnotationReloader) EXPECT() *MockTaskAnnotationReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockTaskAnnotationReloader) Reload(o *models.TaskAnnotation, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockTaskAnnotationReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockTaskAnnotationReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockTaskAnnotationReloader) ReloadAll(o *models.TaskAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockTaskAnnotationReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockTaskAnnotationReloader)(nil).ReloadAll), o, ctx, exec)
}
