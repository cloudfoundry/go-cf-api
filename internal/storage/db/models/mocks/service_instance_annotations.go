//go:build unit
// +build unit

//

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_service_instance_annotations.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	models "github.com/cloudfoundry/go-cf-api/internal/storage/db/models"
	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
)

// MockServiceInstanceAnnotationUpserter is a mock of ServiceInstanceAnnotationUpserter interface.
type MockServiceInstanceAnnotationUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInstanceAnnotationUpserterMockRecorder
}

// MockServiceInstanceAnnotationUpserterMockRecorder is the mock recorder for MockServiceInstanceAnnotationUpserter.
type MockServiceInstanceAnnotationUpserterMockRecorder struct {
	mock *MockServiceInstanceAnnotationUpserter
}

// NewMockServiceInstanceAnnotationUpserter creates a new mock instance.
func NewMockServiceInstanceAnnotationUpserter(ctrl *gomock.Controller) *MockServiceInstanceAnnotationUpserter {
	mock := &MockServiceInstanceAnnotationUpserter{ctrl: ctrl}
	mock.recorder = &MockServiceInstanceAnnotationUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInstanceAnnotationUpserter) EXPECT() *MockServiceInstanceAnnotationUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockServiceInstanceAnnotationUpserter) Upsert(o *models.ServiceInstanceAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockServiceInstanceAnnotationUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockServiceInstanceAnnotationUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockServiceInstanceAnnotationFinisher is a mock of ServiceInstanceAnnotationFinisher interface.
type MockServiceInstanceAnnotationFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInstanceAnnotationFinisherMockRecorder
}

// MockServiceInstanceAnnotationFinisherMockRecorder is the mock recorder for MockServiceInstanceAnnotationFinisher.
type MockServiceInstanceAnnotationFinisherMockRecorder struct {
	mock *MockServiceInstanceAnnotationFinisher
}

// NewMockServiceInstanceAnnotationFinisher creates a new mock instance.
func NewMockServiceInstanceAnnotationFinisher(ctrl *gomock.Controller) *MockServiceInstanceAnnotationFinisher {
	mock := &MockServiceInstanceAnnotationFinisher{ctrl: ctrl}
	mock.recorder = &MockServiceInstanceAnnotationFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInstanceAnnotationFinisher) EXPECT() *MockServiceInstanceAnnotationFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockServiceInstanceAnnotationFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.ServiceInstanceAnnotationSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.ServiceInstanceAnnotationSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockServiceInstanceAnnotationFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockServiceInstanceAnnotationFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockServiceInstanceAnnotationFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockServiceInstanceAnnotationFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockServiceInstanceAnnotationFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockServiceInstanceAnnotationFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockServiceInstanceAnnotationFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockServiceInstanceAnnotationFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockServiceInstanceAnnotationFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.ServiceInstanceAnnotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.ServiceInstanceAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockServiceInstanceAnnotationFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockServiceInstanceAnnotationFinisher)(nil).One), ctx, exec)
}

// MockServiceInstanceAnnotationFinder is a mock of ServiceInstanceAnnotationFinder interface.
type MockServiceInstanceAnnotationFinder struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInstanceAnnotationFinderMockRecorder
}

// MockServiceInstanceAnnotationFinderMockRecorder is the mock recorder for MockServiceInstanceAnnotationFinder.
type MockServiceInstanceAnnotationFinderMockRecorder struct {
	mock *MockServiceInstanceAnnotationFinder
}

// NewMockServiceInstanceAnnotationFinder creates a new mock instance.
func NewMockServiceInstanceAnnotationFinder(ctrl *gomock.Controller) *MockServiceInstanceAnnotationFinder {
	mock := &MockServiceInstanceAnnotationFinder{ctrl: ctrl}
	mock.recorder = &MockServiceInstanceAnnotationFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInstanceAnnotationFinder) EXPECT() *MockServiceInstanceAnnotationFinderMockRecorder {
	return m.recorder
}

// FindServiceInstanceAnnotation mocks base method.
func (m *MockServiceInstanceAnnotationFinder) FindServiceInstanceAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.ServiceInstanceAnnotation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindServiceInstanceAnnotation", varargs...)
	ret0, _ := ret[0].(*models.ServiceInstanceAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindServiceInstanceAnnotation indicates an expected call of FindServiceInstanceAnnotation.
func (mr *MockServiceInstanceAnnotationFinderMockRecorder) FindServiceInstanceAnnotation(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindServiceInstanceAnnotation", reflect.TypeOf((*MockServiceInstanceAnnotationFinder)(nil).FindServiceInstanceAnnotation), varargs...)
}

// MockServiceInstanceAnnotationInserter is a mock of ServiceInstanceAnnotationInserter interface.
type MockServiceInstanceAnnotationInserter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInstanceAnnotationInserterMockRecorder
}

// MockServiceInstanceAnnotationInserterMockRecorder is the mock recorder for MockServiceInstanceAnnotationInserter.
type MockServiceInstanceAnnotationInserterMockRecorder struct {
	mock *MockServiceInstanceAnnotationInserter
}

// NewMockServiceInstanceAnnotationInserter creates a new mock instance.
func NewMockServiceInstanceAnnotationInserter(ctrl *gomock.Controller) *MockServiceInstanceAnnotationInserter {
	mock := &MockServiceInstanceAnnotationInserter{ctrl: ctrl}
	mock.recorder = &MockServiceInstanceAnnotationInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInstanceAnnotationInserter) EXPECT() *MockServiceInstanceAnnotationInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockServiceInstanceAnnotationInserter) Insert(o *models.ServiceInstanceAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockServiceInstanceAnnotationInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockServiceInstanceAnnotationInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockServiceInstanceAnnotationUpdater is a mock of ServiceInstanceAnnotationUpdater interface.
type MockServiceInstanceAnnotationUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInstanceAnnotationUpdaterMockRecorder
}

// MockServiceInstanceAnnotationUpdaterMockRecorder is the mock recorder for MockServiceInstanceAnnotationUpdater.
type MockServiceInstanceAnnotationUpdaterMockRecorder struct {
	mock *MockServiceInstanceAnnotationUpdater
}

// NewMockServiceInstanceAnnotationUpdater creates a new mock instance.
func NewMockServiceInstanceAnnotationUpdater(ctrl *gomock.Controller) *MockServiceInstanceAnnotationUpdater {
	mock := &MockServiceInstanceAnnotationUpdater{ctrl: ctrl}
	mock.recorder = &MockServiceInstanceAnnotationUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInstanceAnnotationUpdater) EXPECT() *MockServiceInstanceAnnotationUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockServiceInstanceAnnotationUpdater) Update(o *models.ServiceInstanceAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServiceInstanceAnnotationUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceInstanceAnnotationUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockServiceInstanceAnnotationUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockServiceInstanceAnnotationUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockServiceInstanceAnnotationUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockServiceInstanceAnnotationUpdater) UpdateAllSlice(o models.ServiceInstanceAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockServiceInstanceAnnotationUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockServiceInstanceAnnotationUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockServiceInstanceAnnotationDeleter is a mock of ServiceInstanceAnnotationDeleter interface.
type MockServiceInstanceAnnotationDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInstanceAnnotationDeleterMockRecorder
}

// MockServiceInstanceAnnotationDeleterMockRecorder is the mock recorder for MockServiceInstanceAnnotationDeleter.
type MockServiceInstanceAnnotationDeleterMockRecorder struct {
	mock *MockServiceInstanceAnnotationDeleter
}

// NewMockServiceInstanceAnnotationDeleter creates a new mock instance.
func NewMockServiceInstanceAnnotationDeleter(ctrl *gomock.Controller) *MockServiceInstanceAnnotationDeleter {
	mock := &MockServiceInstanceAnnotationDeleter{ctrl: ctrl}
	mock.recorder = &MockServiceInstanceAnnotationDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInstanceAnnotationDeleter) EXPECT() *MockServiceInstanceAnnotationDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockServiceInstanceAnnotationDeleter) Delete(o *models.ServiceInstanceAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceInstanceAnnotationDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceInstanceAnnotationDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockServiceInstanceAnnotationDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockServiceInstanceAnnotationDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockServiceInstanceAnnotationDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockServiceInstanceAnnotationDeleter) DeleteAllSlice(o models.ServiceInstanceAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockServiceInstanceAnnotationDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockServiceInstanceAnnotationDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockServiceInstanceAnnotationReloader is a mock of ServiceInstanceAnnotationReloader interface.
type MockServiceInstanceAnnotationReloader struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInstanceAnnotationReloaderMockRecorder
}

// MockServiceInstanceAnnotationReloaderMockRecorder is the mock recorder for MockServiceInstanceAnnotationReloader.
type MockServiceInstanceAnnotationReloaderMockRecorder struct {
	mock *MockServiceInstanceAnnotationReloader
}

// NewMockServiceInstanceAnnotationReloader creates a new mock instance.
func NewMockServiceInstanceAnnotationReloader(ctrl *gomock.Controller) *MockServiceInstanceAnnotationReloader {
	mock := &MockServiceInstanceAnnotationReloader{ctrl: ctrl}
	mock.recorder = &MockServiceInstanceAnnotationReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInstanceAnnotationReloader) EXPECT() *MockServiceInstanceAnnotationReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockServiceInstanceAnnotationReloader) Reload(o *models.ServiceInstanceAnnotation, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockServiceInstanceAnnotationReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockServiceInstanceAnnotationReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockServiceInstanceAnnotationReloader) ReloadAll(o *models.ServiceInstanceAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockServiceInstanceAnnotationReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockServiceInstanceAnnotationReloader)(nil).ReloadAll), o, ctx, exec)
}
