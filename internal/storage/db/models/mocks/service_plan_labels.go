//go:build unit
// +build unit

//

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_service_plan_labels.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.com/cloudfoundry/go-cf-api/internal/storage/db/models"
)

// MockServicePlanLabelUpserter is a mock of ServicePlanLabelUpserter interface.
type MockServicePlanLabelUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockServicePlanLabelUpserterMockRecorder
}

// MockServicePlanLabelUpserterMockRecorder is the mock recorder for MockServicePlanLabelUpserter.
type MockServicePlanLabelUpserterMockRecorder struct {
	mock *MockServicePlanLabelUpserter
}

// NewMockServicePlanLabelUpserter creates a new mock instance.
func NewMockServicePlanLabelUpserter(ctrl *gomock.Controller) *MockServicePlanLabelUpserter {
	mock := &MockServicePlanLabelUpserter{ctrl: ctrl}
	mock.recorder = &MockServicePlanLabelUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicePlanLabelUpserter) EXPECT() *MockServicePlanLabelUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockServicePlanLabelUpserter) Upsert(o *models.ServicePlanLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockServicePlanLabelUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockServicePlanLabelUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockServicePlanLabelFinisher is a mock of ServicePlanLabelFinisher interface.
type MockServicePlanLabelFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockServicePlanLabelFinisherMockRecorder
}

// MockServicePlanLabelFinisherMockRecorder is the mock recorder for MockServicePlanLabelFinisher.
type MockServicePlanLabelFinisherMockRecorder struct {
	mock *MockServicePlanLabelFinisher
}

// NewMockServicePlanLabelFinisher creates a new mock instance.
func NewMockServicePlanLabelFinisher(ctrl *gomock.Controller) *MockServicePlanLabelFinisher {
	mock := &MockServicePlanLabelFinisher{ctrl: ctrl}
	mock.recorder = &MockServicePlanLabelFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicePlanLabelFinisher) EXPECT() *MockServicePlanLabelFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockServicePlanLabelFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.ServicePlanLabelSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.ServicePlanLabelSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockServicePlanLabelFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockServicePlanLabelFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockServicePlanLabelFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockServicePlanLabelFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockServicePlanLabelFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockServicePlanLabelFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockServicePlanLabelFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockServicePlanLabelFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockServicePlanLabelFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.ServicePlanLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.ServicePlanLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockServicePlanLabelFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockServicePlanLabelFinisher)(nil).One), ctx, exec)
}

// MockServicePlanLabelFinder is a mock of ServicePlanLabelFinder interface.
type MockServicePlanLabelFinder struct {
	ctrl     *gomock.Controller
	recorder *MockServicePlanLabelFinderMockRecorder
}

// MockServicePlanLabelFinderMockRecorder is the mock recorder for MockServicePlanLabelFinder.
type MockServicePlanLabelFinderMockRecorder struct {
	mock *MockServicePlanLabelFinder
}

// NewMockServicePlanLabelFinder creates a new mock instance.
func NewMockServicePlanLabelFinder(ctrl *gomock.Controller) *MockServicePlanLabelFinder {
	mock := &MockServicePlanLabelFinder{ctrl: ctrl}
	mock.recorder = &MockServicePlanLabelFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicePlanLabelFinder) EXPECT() *MockServicePlanLabelFinderMockRecorder {
	return m.recorder
}

// FindServicePlanLabel mocks base method.
func (m *MockServicePlanLabelFinder) FindServicePlanLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.ServicePlanLabel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindServicePlanLabel", varargs...)
	ret0, _ := ret[0].(*models.ServicePlanLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindServicePlanLabel indicates an expected call of FindServicePlanLabel.
func (mr *MockServicePlanLabelFinderMockRecorder) FindServicePlanLabel(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindServicePlanLabel", reflect.TypeOf((*MockServicePlanLabelFinder)(nil).FindServicePlanLabel), varargs...)
}

// MockServicePlanLabelInserter is a mock of ServicePlanLabelInserter interface.
type MockServicePlanLabelInserter struct {
	ctrl     *gomock.Controller
	recorder *MockServicePlanLabelInserterMockRecorder
}

// MockServicePlanLabelInserterMockRecorder is the mock recorder for MockServicePlanLabelInserter.
type MockServicePlanLabelInserterMockRecorder struct {
	mock *MockServicePlanLabelInserter
}

// NewMockServicePlanLabelInserter creates a new mock instance.
func NewMockServicePlanLabelInserter(ctrl *gomock.Controller) *MockServicePlanLabelInserter {
	mock := &MockServicePlanLabelInserter{ctrl: ctrl}
	mock.recorder = &MockServicePlanLabelInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicePlanLabelInserter) EXPECT() *MockServicePlanLabelInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockServicePlanLabelInserter) Insert(o *models.ServicePlanLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockServicePlanLabelInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockServicePlanLabelInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockServicePlanLabelUpdater is a mock of ServicePlanLabelUpdater interface.
type MockServicePlanLabelUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockServicePlanLabelUpdaterMockRecorder
}

// MockServicePlanLabelUpdaterMockRecorder is the mock recorder for MockServicePlanLabelUpdater.
type MockServicePlanLabelUpdaterMockRecorder struct {
	mock *MockServicePlanLabelUpdater
}

// NewMockServicePlanLabelUpdater creates a new mock instance.
func NewMockServicePlanLabelUpdater(ctrl *gomock.Controller) *MockServicePlanLabelUpdater {
	mock := &MockServicePlanLabelUpdater{ctrl: ctrl}
	mock.recorder = &MockServicePlanLabelUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicePlanLabelUpdater) EXPECT() *MockServicePlanLabelUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockServicePlanLabelUpdater) Update(o *models.ServicePlanLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServicePlanLabelUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServicePlanLabelUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockServicePlanLabelUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockServicePlanLabelUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockServicePlanLabelUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockServicePlanLabelUpdater) UpdateAllSlice(o models.ServicePlanLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockServicePlanLabelUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockServicePlanLabelUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockServicePlanLabelDeleter is a mock of ServicePlanLabelDeleter interface.
type MockServicePlanLabelDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockServicePlanLabelDeleterMockRecorder
}

// MockServicePlanLabelDeleterMockRecorder is the mock recorder for MockServicePlanLabelDeleter.
type MockServicePlanLabelDeleterMockRecorder struct {
	mock *MockServicePlanLabelDeleter
}

// NewMockServicePlanLabelDeleter creates a new mock instance.
func NewMockServicePlanLabelDeleter(ctrl *gomock.Controller) *MockServicePlanLabelDeleter {
	mock := &MockServicePlanLabelDeleter{ctrl: ctrl}
	mock.recorder = &MockServicePlanLabelDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicePlanLabelDeleter) EXPECT() *MockServicePlanLabelDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockServicePlanLabelDeleter) Delete(o *models.ServicePlanLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockServicePlanLabelDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServicePlanLabelDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockServicePlanLabelDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockServicePlanLabelDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockServicePlanLabelDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockServicePlanLabelDeleter) DeleteAllSlice(o models.ServicePlanLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockServicePlanLabelDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockServicePlanLabelDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockServicePlanLabelReloader is a mock of ServicePlanLabelReloader interface.
type MockServicePlanLabelReloader struct {
	ctrl     *gomock.Controller
	recorder *MockServicePlanLabelReloaderMockRecorder
}

// MockServicePlanLabelReloaderMockRecorder is the mock recorder for MockServicePlanLabelReloader.
type MockServicePlanLabelReloaderMockRecorder struct {
	mock *MockServicePlanLabelReloader
}

// NewMockServicePlanLabelReloader creates a new mock instance.
func NewMockServicePlanLabelReloader(ctrl *gomock.Controller) *MockServicePlanLabelReloader {
	mock := &MockServicePlanLabelReloader{ctrl: ctrl}
	mock.recorder = &MockServicePlanLabelReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicePlanLabelReloader) EXPECT() *MockServicePlanLabelReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockServicePlanLabelReloader) Reload(o *models.ServicePlanLabel, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockServicePlanLabelReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockServicePlanLabelReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockServicePlanLabelReloader) ReloadAll(o *models.ServicePlanLabelSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockServicePlanLabelReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockServicePlanLabelReloader)(nil).ReloadAll), o, ctx, exec)
}
