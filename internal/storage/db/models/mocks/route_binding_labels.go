//go:build unit
// +build unit

//

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_route_binding_labels.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	models "github.com/cloudfoundry/go-cf-api/internal/storage/db/models"
	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
)

// MockRouteBindingLabelUpserter is a mock of RouteBindingLabelUpserter interface.
type MockRouteBindingLabelUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteBindingLabelUpserterMockRecorder
}

// MockRouteBindingLabelUpserterMockRecorder is the mock recorder for MockRouteBindingLabelUpserter.
type MockRouteBindingLabelUpserterMockRecorder struct {
	mock *MockRouteBindingLabelUpserter
}

// NewMockRouteBindingLabelUpserter creates a new mock instance.
func NewMockRouteBindingLabelUpserter(ctrl *gomock.Controller) *MockRouteBindingLabelUpserter {
	mock := &MockRouteBindingLabelUpserter{ctrl: ctrl}
	mock.recorder = &MockRouteBindingLabelUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteBindingLabelUpserter) EXPECT() *MockRouteBindingLabelUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockRouteBindingLabelUpserter) Upsert(o *models.RouteBindingLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockRouteBindingLabelUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockRouteBindingLabelUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockRouteBindingLabelFinisher is a mock of RouteBindingLabelFinisher interface.
type MockRouteBindingLabelFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockRouteBindingLabelFinisherMockRecorder
}

// MockRouteBindingLabelFinisherMockRecorder is the mock recorder for MockRouteBindingLabelFinisher.
type MockRouteBindingLabelFinisherMockRecorder struct {
	mock *MockRouteBindingLabelFinisher
}

// NewMockRouteBindingLabelFinisher creates a new mock instance.
func NewMockRouteBindingLabelFinisher(ctrl *gomock.Controller) *MockRouteBindingLabelFinisher {
	mock := &MockRouteBindingLabelFinisher{ctrl: ctrl}
	mock.recorder = &MockRouteBindingLabelFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteBindingLabelFinisher) EXPECT() *MockRouteBindingLabelFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockRouteBindingLabelFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.RouteBindingLabelSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.RouteBindingLabelSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockRouteBindingLabelFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockRouteBindingLabelFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockRouteBindingLabelFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockRouteBindingLabelFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRouteBindingLabelFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockRouteBindingLabelFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockRouteBindingLabelFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRouteBindingLabelFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockRouteBindingLabelFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.RouteBindingLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.RouteBindingLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockRouteBindingLabelFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockRouteBindingLabelFinisher)(nil).One), ctx, exec)
}

// MockRouteBindingLabelFinder is a mock of RouteBindingLabelFinder interface.
type MockRouteBindingLabelFinder struct {
	ctrl     *gomock.Controller
	recorder *MockRouteBindingLabelFinderMockRecorder
}

// MockRouteBindingLabelFinderMockRecorder is the mock recorder for MockRouteBindingLabelFinder.
type MockRouteBindingLabelFinderMockRecorder struct {
	mock *MockRouteBindingLabelFinder
}

// NewMockRouteBindingLabelFinder creates a new mock instance.
func NewMockRouteBindingLabelFinder(ctrl *gomock.Controller) *MockRouteBindingLabelFinder {
	mock := &MockRouteBindingLabelFinder{ctrl: ctrl}
	mock.recorder = &MockRouteBindingLabelFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteBindingLabelFinder) EXPECT() *MockRouteBindingLabelFinderMockRecorder {
	return m.recorder
}

// FindRouteBindingLabel mocks base method.
func (m *MockRouteBindingLabelFinder) FindRouteBindingLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.RouteBindingLabel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindRouteBindingLabel", varargs...)
	ret0, _ := ret[0].(*models.RouteBindingLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteBindingLabel indicates an expected call of FindRouteBindingLabel.
func (mr *MockRouteBindingLabelFinderMockRecorder) FindRouteBindingLabel(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteBindingLabel", reflect.TypeOf((*MockRouteBindingLabelFinder)(nil).FindRouteBindingLabel), varargs...)
}

// MockRouteBindingLabelInserter is a mock of RouteBindingLabelInserter interface.
type MockRouteBindingLabelInserter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteBindingLabelInserterMockRecorder
}

// MockRouteBindingLabelInserterMockRecorder is the mock recorder for MockRouteBindingLabelInserter.
type MockRouteBindingLabelInserterMockRecorder struct {
	mock *MockRouteBindingLabelInserter
}

// NewMockRouteBindingLabelInserter creates a new mock instance.
func NewMockRouteBindingLabelInserter(ctrl *gomock.Controller) *MockRouteBindingLabelInserter {
	mock := &MockRouteBindingLabelInserter{ctrl: ctrl}
	mock.recorder = &MockRouteBindingLabelInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteBindingLabelInserter) EXPECT() *MockRouteBindingLabelInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockRouteBindingLabelInserter) Insert(o *models.RouteBindingLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockRouteBindingLabelInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRouteBindingLabelInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockRouteBindingLabelUpdater is a mock of RouteBindingLabelUpdater interface.
type MockRouteBindingLabelUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockRouteBindingLabelUpdaterMockRecorder
}

// MockRouteBindingLabelUpdaterMockRecorder is the mock recorder for MockRouteBindingLabelUpdater.
type MockRouteBindingLabelUpdaterMockRecorder struct {
	mock *MockRouteBindingLabelUpdater
}

// NewMockRouteBindingLabelUpdater creates a new mock instance.
func NewMockRouteBindingLabelUpdater(ctrl *gomock.Controller) *MockRouteBindingLabelUpdater {
	mock := &MockRouteBindingLabelUpdater{ctrl: ctrl}
	mock.recorder = &MockRouteBindingLabelUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteBindingLabelUpdater) EXPECT() *MockRouteBindingLabelUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockRouteBindingLabelUpdater) Update(o *models.RouteBindingLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRouteBindingLabelUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRouteBindingLabelUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockRouteBindingLabelUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockRouteBindingLabelUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockRouteBindingLabelUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockRouteBindingLabelUpdater) UpdateAllSlice(o models.RouteBindingLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockRouteBindingLabelUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockRouteBindingLabelUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockRouteBindingLabelDeleter is a mock of RouteBindingLabelDeleter interface.
type MockRouteBindingLabelDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteBindingLabelDeleterMockRecorder
}

// MockRouteBindingLabelDeleterMockRecorder is the mock recorder for MockRouteBindingLabelDeleter.
type MockRouteBindingLabelDeleterMockRecorder struct {
	mock *MockRouteBindingLabelDeleter
}

// NewMockRouteBindingLabelDeleter creates a new mock instance.
func NewMockRouteBindingLabelDeleter(ctrl *gomock.Controller) *MockRouteBindingLabelDeleter {
	mock := &MockRouteBindingLabelDeleter{ctrl: ctrl}
	mock.recorder = &MockRouteBindingLabelDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteBindingLabelDeleter) EXPECT() *MockRouteBindingLabelDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRouteBindingLabelDeleter) Delete(o *models.RouteBindingLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRouteBindingLabelDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRouteBindingLabelDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockRouteBindingLabelDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockRouteBindingLabelDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockRouteBindingLabelDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockRouteBindingLabelDeleter) DeleteAllSlice(o models.RouteBindingLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockRouteBindingLabelDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockRouteBindingLabelDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockRouteBindingLabelReloader is a mock of RouteBindingLabelReloader interface.
type MockRouteBindingLabelReloader struct {
	ctrl     *gomock.Controller
	recorder *MockRouteBindingLabelReloaderMockRecorder
}

// MockRouteBindingLabelReloaderMockRecorder is the mock recorder for MockRouteBindingLabelReloader.
type MockRouteBindingLabelReloaderMockRecorder struct {
	mock *MockRouteBindingLabelReloader
}

// NewMockRouteBindingLabelReloader creates a new mock instance.
func NewMockRouteBindingLabelReloader(ctrl *gomock.Controller) *MockRouteBindingLabelReloader {
	mock := &MockRouteBindingLabelReloader{ctrl: ctrl}
	mock.recorder = &MockRouteBindingLabelReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteBindingLabelReloader) EXPECT() *MockRouteBindingLabelReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockRouteBindingLabelReloader) Reload(o *models.RouteBindingLabel, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockRouteBindingLabelReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockRouteBindingLabelReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockRouteBindingLabelReloader) ReloadAll(o *models.RouteBindingLabelSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockRouteBindingLabelReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockRouteBindingLabelReloader)(nil).ReloadAll), o, ctx, exec)
}
