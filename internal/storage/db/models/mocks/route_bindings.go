//go:build unit
// +build unit

//

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_route_bindings.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	models "github.com/cloudfoundry/go-cf-api/internal/storage/db/models"
	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
)

// MockRouteBindingUpserter is a mock of RouteBindingUpserter interface.
type MockRouteBindingUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteBindingUpserterMockRecorder
}

// MockRouteBindingUpserterMockRecorder is the mock recorder for MockRouteBindingUpserter.
type MockRouteBindingUpserterMockRecorder struct {
	mock *MockRouteBindingUpserter
}

// NewMockRouteBindingUpserter creates a new mock instance.
func NewMockRouteBindingUpserter(ctrl *gomock.Controller) *MockRouteBindingUpserter {
	mock := &MockRouteBindingUpserter{ctrl: ctrl}
	mock.recorder = &MockRouteBindingUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteBindingUpserter) EXPECT() *MockRouteBindingUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockRouteBindingUpserter) Upsert(o *models.RouteBinding, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockRouteBindingUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockRouteBindingUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockRouteBindingFinisher is a mock of RouteBindingFinisher interface.
type MockRouteBindingFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockRouteBindingFinisherMockRecorder
}

// MockRouteBindingFinisherMockRecorder is the mock recorder for MockRouteBindingFinisher.
type MockRouteBindingFinisherMockRecorder struct {
	mock *MockRouteBindingFinisher
}

// NewMockRouteBindingFinisher creates a new mock instance.
func NewMockRouteBindingFinisher(ctrl *gomock.Controller) *MockRouteBindingFinisher {
	mock := &MockRouteBindingFinisher{ctrl: ctrl}
	mock.recorder = &MockRouteBindingFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteBindingFinisher) EXPECT() *MockRouteBindingFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockRouteBindingFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.RouteBindingSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.RouteBindingSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockRouteBindingFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockRouteBindingFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockRouteBindingFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockRouteBindingFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRouteBindingFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockRouteBindingFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockRouteBindingFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRouteBindingFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockRouteBindingFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.RouteBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.RouteBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockRouteBindingFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockRouteBindingFinisher)(nil).One), ctx, exec)
}

// MockRouteBindingFinder is a mock of RouteBindingFinder interface.
type MockRouteBindingFinder struct {
	ctrl     *gomock.Controller
	recorder *MockRouteBindingFinderMockRecorder
}

// MockRouteBindingFinderMockRecorder is the mock recorder for MockRouteBindingFinder.
type MockRouteBindingFinderMockRecorder struct {
	mock *MockRouteBindingFinder
}

// NewMockRouteBindingFinder creates a new mock instance.
func NewMockRouteBindingFinder(ctrl *gomock.Controller) *MockRouteBindingFinder {
	mock := &MockRouteBindingFinder{ctrl: ctrl}
	mock.recorder = &MockRouteBindingFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteBindingFinder) EXPECT() *MockRouteBindingFinderMockRecorder {
	return m.recorder
}

// FindRouteBinding mocks base method.
func (m *MockRouteBindingFinder) FindRouteBinding(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.RouteBinding, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindRouteBinding", varargs...)
	ret0, _ := ret[0].(*models.RouteBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteBinding indicates an expected call of FindRouteBinding.
func (mr *MockRouteBindingFinderMockRecorder) FindRouteBinding(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteBinding", reflect.TypeOf((*MockRouteBindingFinder)(nil).FindRouteBinding), varargs...)
}

// MockRouteBindingInserter is a mock of RouteBindingInserter interface.
type MockRouteBindingInserter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteBindingInserterMockRecorder
}

// MockRouteBindingInserterMockRecorder is the mock recorder for MockRouteBindingInserter.
type MockRouteBindingInserterMockRecorder struct {
	mock *MockRouteBindingInserter
}

// NewMockRouteBindingInserter creates a new mock instance.
func NewMockRouteBindingInserter(ctrl *gomock.Controller) *MockRouteBindingInserter {
	mock := &MockRouteBindingInserter{ctrl: ctrl}
	mock.recorder = &MockRouteBindingInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteBindingInserter) EXPECT() *MockRouteBindingInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockRouteBindingInserter) Insert(o *models.RouteBinding, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockRouteBindingInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRouteBindingInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockRouteBindingUpdater is a mock of RouteBindingUpdater interface.
type MockRouteBindingUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockRouteBindingUpdaterMockRecorder
}

// MockRouteBindingUpdaterMockRecorder is the mock recorder for MockRouteBindingUpdater.
type MockRouteBindingUpdaterMockRecorder struct {
	mock *MockRouteBindingUpdater
}

// NewMockRouteBindingUpdater creates a new mock instance.
func NewMockRouteBindingUpdater(ctrl *gomock.Controller) *MockRouteBindingUpdater {
	mock := &MockRouteBindingUpdater{ctrl: ctrl}
	mock.recorder = &MockRouteBindingUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteBindingUpdater) EXPECT() *MockRouteBindingUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockRouteBindingUpdater) Update(o *models.RouteBinding, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRouteBindingUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRouteBindingUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockRouteBindingUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockRouteBindingUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockRouteBindingUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockRouteBindingUpdater) UpdateAllSlice(o models.RouteBindingSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockRouteBindingUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockRouteBindingUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockRouteBindingDeleter is a mock of RouteBindingDeleter interface.
type MockRouteBindingDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteBindingDeleterMockRecorder
}

// MockRouteBindingDeleterMockRecorder is the mock recorder for MockRouteBindingDeleter.
type MockRouteBindingDeleterMockRecorder struct {
	mock *MockRouteBindingDeleter
}

// NewMockRouteBindingDeleter creates a new mock instance.
func NewMockRouteBindingDeleter(ctrl *gomock.Controller) *MockRouteBindingDeleter {
	mock := &MockRouteBindingDeleter{ctrl: ctrl}
	mock.recorder = &MockRouteBindingDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteBindingDeleter) EXPECT() *MockRouteBindingDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRouteBindingDeleter) Delete(o *models.RouteBinding, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRouteBindingDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRouteBindingDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockRouteBindingDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockRouteBindingDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockRouteBindingDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockRouteBindingDeleter) DeleteAllSlice(o models.RouteBindingSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockRouteBindingDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockRouteBindingDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockRouteBindingReloader is a mock of RouteBindingReloader interface.
type MockRouteBindingReloader struct {
	ctrl     *gomock.Controller
	recorder *MockRouteBindingReloaderMockRecorder
}

// MockRouteBindingReloaderMockRecorder is the mock recorder for MockRouteBindingReloader.
type MockRouteBindingReloaderMockRecorder struct {
	mock *MockRouteBindingReloader
}

// NewMockRouteBindingReloader creates a new mock instance.
func NewMockRouteBindingReloader(ctrl *gomock.Controller) *MockRouteBindingReloader {
	mock := &MockRouteBindingReloader{ctrl: ctrl}
	mock.recorder = &MockRouteBindingReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteBindingReloader) EXPECT() *MockRouteBindingReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockRouteBindingReloader) Reload(o *models.RouteBinding, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockRouteBindingReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockRouteBindingReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockRouteBindingReloader) ReloadAll(o *models.RouteBindingSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockRouteBindingReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockRouteBindingReloader)(nil).ReloadAll), o, ctx, exec)
}
