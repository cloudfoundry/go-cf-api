//go:build unit
// +build unit

//

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_spaces.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	models "github.com/cloudfoundry/go-cf-api/internal/storage/db/models"
	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
)

// MockSpaceUpserter is a mock of SpaceUpserter interface.
type MockSpaceUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceUpserterMockRecorder
}

// MockSpaceUpserterMockRecorder is the mock recorder for MockSpaceUpserter.
type MockSpaceUpserterMockRecorder struct {
	mock *MockSpaceUpserter
}

// NewMockSpaceUpserter creates a new mock instance.
func NewMockSpaceUpserter(ctrl *gomock.Controller) *MockSpaceUpserter {
	mock := &MockSpaceUpserter{ctrl: ctrl}
	mock.recorder = &MockSpaceUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceUpserter) EXPECT() *MockSpaceUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockSpaceUpserter) Upsert(o *models.Space, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockSpaceUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockSpaceUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockSpaceFinisher is a mock of SpaceFinisher interface.
type MockSpaceFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceFinisherMockRecorder
}

// MockSpaceFinisherMockRecorder is the mock recorder for MockSpaceFinisher.
type MockSpaceFinisherMockRecorder struct {
	mock *MockSpaceFinisher
}

// NewMockSpaceFinisher creates a new mock instance.
func NewMockSpaceFinisher(ctrl *gomock.Controller) *MockSpaceFinisher {
	mock := &MockSpaceFinisher{ctrl: ctrl}
	mock.recorder = &MockSpaceFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceFinisher) EXPECT() *MockSpaceFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockSpaceFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.SpaceSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.SpaceSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockSpaceFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockSpaceFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockSpaceFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockSpaceFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockSpaceFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockSpaceFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockSpaceFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockSpaceFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockSpaceFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockSpaceFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockSpaceFinisher)(nil).One), ctx, exec)
}

// MockSpaceFinder is a mock of SpaceFinder interface.
type MockSpaceFinder struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceFinderMockRecorder
}

// MockSpaceFinderMockRecorder is the mock recorder for MockSpaceFinder.
type MockSpaceFinderMockRecorder struct {
	mock *MockSpaceFinder
}

// NewMockSpaceFinder creates a new mock instance.
func NewMockSpaceFinder(ctrl *gomock.Controller) *MockSpaceFinder {
	mock := &MockSpaceFinder{ctrl: ctrl}
	mock.recorder = &MockSpaceFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceFinder) EXPECT() *MockSpaceFinderMockRecorder {
	return m.recorder
}

// FindSpace mocks base method.
func (m *MockSpaceFinder) FindSpace(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.Space, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindSpace", varargs...)
	ret0, _ := ret[0].(*models.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSpace indicates an expected call of FindSpace.
func (mr *MockSpaceFinderMockRecorder) FindSpace(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSpace", reflect.TypeOf((*MockSpaceFinder)(nil).FindSpace), varargs...)
}

// MockSpaceInserter is a mock of SpaceInserter interface.
type MockSpaceInserter struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceInserterMockRecorder
}

// MockSpaceInserterMockRecorder is the mock recorder for MockSpaceInserter.
type MockSpaceInserterMockRecorder struct {
	mock *MockSpaceInserter
}

// NewMockSpaceInserter creates a new mock instance.
func NewMockSpaceInserter(ctrl *gomock.Controller) *MockSpaceInserter {
	mock := &MockSpaceInserter{ctrl: ctrl}
	mock.recorder = &MockSpaceInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceInserter) EXPECT() *MockSpaceInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockSpaceInserter) Insert(o *models.Space, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockSpaceInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSpaceInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockSpaceUpdater is a mock of SpaceUpdater interface.
type MockSpaceUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceUpdaterMockRecorder
}

// MockSpaceUpdaterMockRecorder is the mock recorder for MockSpaceUpdater.
type MockSpaceUpdaterMockRecorder struct {
	mock *MockSpaceUpdater
}

// NewMockSpaceUpdater creates a new mock instance.
func NewMockSpaceUpdater(ctrl *gomock.Controller) *MockSpaceUpdater {
	mock := &MockSpaceUpdater{ctrl: ctrl}
	mock.recorder = &MockSpaceUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceUpdater) EXPECT() *MockSpaceUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockSpaceUpdater) Update(o *models.Space, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSpaceUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSpaceUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockSpaceUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockSpaceUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockSpaceUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockSpaceUpdater) UpdateAllSlice(o models.SpaceSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockSpaceUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockSpaceUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockSpaceDeleter is a mock of SpaceDeleter interface.
type MockSpaceDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceDeleterMockRecorder
}

// MockSpaceDeleterMockRecorder is the mock recorder for MockSpaceDeleter.
type MockSpaceDeleterMockRecorder struct {
	mock *MockSpaceDeleter
}

// NewMockSpaceDeleter creates a new mock instance.
func NewMockSpaceDeleter(ctrl *gomock.Controller) *MockSpaceDeleter {
	mock := &MockSpaceDeleter{ctrl: ctrl}
	mock.recorder = &MockSpaceDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceDeleter) EXPECT() *MockSpaceDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSpaceDeleter) Delete(o *models.Space, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSpaceDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSpaceDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockSpaceDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockSpaceDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockSpaceDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockSpaceDeleter) DeleteAllSlice(o models.SpaceSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockSpaceDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockSpaceDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockSpaceReloader is a mock of SpaceReloader interface.
type MockSpaceReloader struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceReloaderMockRecorder
}

// MockSpaceReloaderMockRecorder is the mock recorder for MockSpaceReloader.
type MockSpaceReloaderMockRecorder struct {
	mock *MockSpaceReloader
}

// NewMockSpaceReloader creates a new mock instance.
func NewMockSpaceReloader(ctrl *gomock.Controller) *MockSpaceReloader {
	mock := &MockSpaceReloader{ctrl: ctrl}
	mock.recorder = &MockSpaceReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceReloader) EXPECT() *MockSpaceReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockSpaceReloader) Reload(o *models.Space, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockSpaceReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockSpaceReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockSpaceReloader) ReloadAll(o *models.SpaceSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockSpaceReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockSpaceReloader)(nil).ReloadAll), o, ctx, exec)
}
