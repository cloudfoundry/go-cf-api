// +build unit

//

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_job_warnings.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/storage/db/models"
)

// MockJobWarningUpserter is a mock of JobWarningUpserter interface.
type MockJobWarningUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockJobWarningUpserterMockRecorder
}

// MockJobWarningUpserterMockRecorder is the mock recorder for MockJobWarningUpserter.
type MockJobWarningUpserterMockRecorder struct {
	mock *MockJobWarningUpserter
}

// NewMockJobWarningUpserter creates a new mock instance.
func NewMockJobWarningUpserter(ctrl *gomock.Controller) *MockJobWarningUpserter {
	mock := &MockJobWarningUpserter{ctrl: ctrl}
	mock.recorder = &MockJobWarningUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobWarningUpserter) EXPECT() *MockJobWarningUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockJobWarningUpserter) Upsert(o *models.JobWarning, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockJobWarningUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockJobWarningUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockJobWarningFinisher is a mock of JobWarningFinisher interface.
type MockJobWarningFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockJobWarningFinisherMockRecorder
}

// MockJobWarningFinisherMockRecorder is the mock recorder for MockJobWarningFinisher.
type MockJobWarningFinisherMockRecorder struct {
	mock *MockJobWarningFinisher
}

// NewMockJobWarningFinisher creates a new mock instance.
func NewMockJobWarningFinisher(ctrl *gomock.Controller) *MockJobWarningFinisher {
	mock := &MockJobWarningFinisher{ctrl: ctrl}
	mock.recorder = &MockJobWarningFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobWarningFinisher) EXPECT() *MockJobWarningFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobWarningFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.JobWarningSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.JobWarningSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobWarningFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobWarningFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockJobWarningFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockJobWarningFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockJobWarningFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockJobWarningFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockJobWarningFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockJobWarningFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockJobWarningFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.JobWarning, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.JobWarning)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockJobWarningFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockJobWarningFinisher)(nil).One), ctx, exec)
}

// MockJobWarningFinder is a mock of JobWarningFinder interface.
type MockJobWarningFinder struct {
	ctrl     *gomock.Controller
	recorder *MockJobWarningFinderMockRecorder
}

// MockJobWarningFinderMockRecorder is the mock recorder for MockJobWarningFinder.
type MockJobWarningFinderMockRecorder struct {
	mock *MockJobWarningFinder
}

// NewMockJobWarningFinder creates a new mock instance.
func NewMockJobWarningFinder(ctrl *gomock.Controller) *MockJobWarningFinder {
	mock := &MockJobWarningFinder{ctrl: ctrl}
	mock.recorder = &MockJobWarningFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobWarningFinder) EXPECT() *MockJobWarningFinderMockRecorder {
	return m.recorder
}

// FindJobWarning mocks base method.
func (m *MockJobWarningFinder) FindJobWarning(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.JobWarning, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindJobWarning", varargs...)
	ret0, _ := ret[0].(*models.JobWarning)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindJobWarning indicates an expected call of FindJobWarning.
func (mr *MockJobWarningFinderMockRecorder) FindJobWarning(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindJobWarning", reflect.TypeOf((*MockJobWarningFinder)(nil).FindJobWarning), varargs...)
}

// MockJobWarningInserter is a mock of JobWarningInserter interface.
type MockJobWarningInserter struct {
	ctrl     *gomock.Controller
	recorder *MockJobWarningInserterMockRecorder
}

// MockJobWarningInserterMockRecorder is the mock recorder for MockJobWarningInserter.
type MockJobWarningInserterMockRecorder struct {
	mock *MockJobWarningInserter
}

// NewMockJobWarningInserter creates a new mock instance.
func NewMockJobWarningInserter(ctrl *gomock.Controller) *MockJobWarningInserter {
	mock := &MockJobWarningInserter{ctrl: ctrl}
	mock.recorder = &MockJobWarningInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobWarningInserter) EXPECT() *MockJobWarningInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockJobWarningInserter) Insert(o *models.JobWarning, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockJobWarningInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockJobWarningInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockJobWarningUpdater is a mock of JobWarningUpdater interface.
type MockJobWarningUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockJobWarningUpdaterMockRecorder
}

// MockJobWarningUpdaterMockRecorder is the mock recorder for MockJobWarningUpdater.
type MockJobWarningUpdaterMockRecorder struct {
	mock *MockJobWarningUpdater
}

// NewMockJobWarningUpdater creates a new mock instance.
func NewMockJobWarningUpdater(ctrl *gomock.Controller) *MockJobWarningUpdater {
	mock := &MockJobWarningUpdater{ctrl: ctrl}
	mock.recorder = &MockJobWarningUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobWarningUpdater) EXPECT() *MockJobWarningUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockJobWarningUpdater) Update(o *models.JobWarning, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockJobWarningUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockJobWarningUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockJobWarningUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockJobWarningUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockJobWarningUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockJobWarningUpdater) UpdateAllSlice(o models.JobWarningSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockJobWarningUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockJobWarningUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockJobWarningDeleter is a mock of JobWarningDeleter interface.
type MockJobWarningDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockJobWarningDeleterMockRecorder
}

// MockJobWarningDeleterMockRecorder is the mock recorder for MockJobWarningDeleter.
type MockJobWarningDeleterMockRecorder struct {
	mock *MockJobWarningDeleter
}

// NewMockJobWarningDeleter creates a new mock instance.
func NewMockJobWarningDeleter(ctrl *gomock.Controller) *MockJobWarningDeleter {
	mock := &MockJobWarningDeleter{ctrl: ctrl}
	mock.recorder = &MockJobWarningDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobWarningDeleter) EXPECT() *MockJobWarningDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockJobWarningDeleter) Delete(o *models.JobWarning, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockJobWarningDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockJobWarningDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockJobWarningDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockJobWarningDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockJobWarningDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockJobWarningDeleter) DeleteAllSlice(o models.JobWarningSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockJobWarningDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockJobWarningDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockJobWarningReloader is a mock of JobWarningReloader interface.
type MockJobWarningReloader struct {
	ctrl     *gomock.Controller
	recorder *MockJobWarningReloaderMockRecorder
}

// MockJobWarningReloaderMockRecorder is the mock recorder for MockJobWarningReloader.
type MockJobWarningReloaderMockRecorder struct {
	mock *MockJobWarningReloader
}

// NewMockJobWarningReloader creates a new mock instance.
func NewMockJobWarningReloader(ctrl *gomock.Controller) *MockJobWarningReloader {
	mock := &MockJobWarningReloader{ctrl: ctrl}
	mock.recorder = &MockJobWarningReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobWarningReloader) EXPECT() *MockJobWarningReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockJobWarningReloader) Reload(o *models.JobWarning, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockJobWarningReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockJobWarningReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockJobWarningReloader) ReloadAll(o *models.JobWarningSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockJobWarningReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockJobWarningReloader)(nil).ReloadAll), o, ctx, exec)
}
