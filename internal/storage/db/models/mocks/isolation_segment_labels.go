//go:build unit
// +build unit

//

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_isolation_segment_labels.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/storage/db/models"
)

// MockIsolationSegmentLabelUpserter is a mock of IsolationSegmentLabelUpserter interface.
type MockIsolationSegmentLabelUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockIsolationSegmentLabelUpserterMockRecorder
}

// MockIsolationSegmentLabelUpserterMockRecorder is the mock recorder for MockIsolationSegmentLabelUpserter.
type MockIsolationSegmentLabelUpserterMockRecorder struct {
	mock *MockIsolationSegmentLabelUpserter
}

// NewMockIsolationSegmentLabelUpserter creates a new mock instance.
func NewMockIsolationSegmentLabelUpserter(ctrl *gomock.Controller) *MockIsolationSegmentLabelUpserter {
	mock := &MockIsolationSegmentLabelUpserter{ctrl: ctrl}
	mock.recorder = &MockIsolationSegmentLabelUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIsolationSegmentLabelUpserter) EXPECT() *MockIsolationSegmentLabelUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockIsolationSegmentLabelUpserter) Upsert(o *models.IsolationSegmentLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockIsolationSegmentLabelUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockIsolationSegmentLabelUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockIsolationSegmentLabelFinisher is a mock of IsolationSegmentLabelFinisher interface.
type MockIsolationSegmentLabelFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockIsolationSegmentLabelFinisherMockRecorder
}

// MockIsolationSegmentLabelFinisherMockRecorder is the mock recorder for MockIsolationSegmentLabelFinisher.
type MockIsolationSegmentLabelFinisherMockRecorder struct {
	mock *MockIsolationSegmentLabelFinisher
}

// NewMockIsolationSegmentLabelFinisher creates a new mock instance.
func NewMockIsolationSegmentLabelFinisher(ctrl *gomock.Controller) *MockIsolationSegmentLabelFinisher {
	mock := &MockIsolationSegmentLabelFinisher{ctrl: ctrl}
	mock.recorder = &MockIsolationSegmentLabelFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIsolationSegmentLabelFinisher) EXPECT() *MockIsolationSegmentLabelFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockIsolationSegmentLabelFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.IsolationSegmentLabelSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.IsolationSegmentLabelSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockIsolationSegmentLabelFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockIsolationSegmentLabelFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockIsolationSegmentLabelFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockIsolationSegmentLabelFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockIsolationSegmentLabelFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockIsolationSegmentLabelFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockIsolationSegmentLabelFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIsolationSegmentLabelFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockIsolationSegmentLabelFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.IsolationSegmentLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.IsolationSegmentLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockIsolationSegmentLabelFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockIsolationSegmentLabelFinisher)(nil).One), ctx, exec)
}

// MockIsolationSegmentLabelFinder is a mock of IsolationSegmentLabelFinder interface.
type MockIsolationSegmentLabelFinder struct {
	ctrl     *gomock.Controller
	recorder *MockIsolationSegmentLabelFinderMockRecorder
}

// MockIsolationSegmentLabelFinderMockRecorder is the mock recorder for MockIsolationSegmentLabelFinder.
type MockIsolationSegmentLabelFinderMockRecorder struct {
	mock *MockIsolationSegmentLabelFinder
}

// NewMockIsolationSegmentLabelFinder creates a new mock instance.
func NewMockIsolationSegmentLabelFinder(ctrl *gomock.Controller) *MockIsolationSegmentLabelFinder {
	mock := &MockIsolationSegmentLabelFinder{ctrl: ctrl}
	mock.recorder = &MockIsolationSegmentLabelFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIsolationSegmentLabelFinder) EXPECT() *MockIsolationSegmentLabelFinderMockRecorder {
	return m.recorder
}

// FindIsolationSegmentLabel mocks base method.
func (m *MockIsolationSegmentLabelFinder) FindIsolationSegmentLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.IsolationSegmentLabel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindIsolationSegmentLabel", varargs...)
	ret0, _ := ret[0].(*models.IsolationSegmentLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIsolationSegmentLabel indicates an expected call of FindIsolationSegmentLabel.
func (mr *MockIsolationSegmentLabelFinderMockRecorder) FindIsolationSegmentLabel(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIsolationSegmentLabel", reflect.TypeOf((*MockIsolationSegmentLabelFinder)(nil).FindIsolationSegmentLabel), varargs...)
}

// MockIsolationSegmentLabelInserter is a mock of IsolationSegmentLabelInserter interface.
type MockIsolationSegmentLabelInserter struct {
	ctrl     *gomock.Controller
	recorder *MockIsolationSegmentLabelInserterMockRecorder
}

// MockIsolationSegmentLabelInserterMockRecorder is the mock recorder for MockIsolationSegmentLabelInserter.
type MockIsolationSegmentLabelInserterMockRecorder struct {
	mock *MockIsolationSegmentLabelInserter
}

// NewMockIsolationSegmentLabelInserter creates a new mock instance.
func NewMockIsolationSegmentLabelInserter(ctrl *gomock.Controller) *MockIsolationSegmentLabelInserter {
	mock := &MockIsolationSegmentLabelInserter{ctrl: ctrl}
	mock.recorder = &MockIsolationSegmentLabelInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIsolationSegmentLabelInserter) EXPECT() *MockIsolationSegmentLabelInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockIsolationSegmentLabelInserter) Insert(o *models.IsolationSegmentLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIsolationSegmentLabelInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIsolationSegmentLabelInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockIsolationSegmentLabelUpdater is a mock of IsolationSegmentLabelUpdater interface.
type MockIsolationSegmentLabelUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockIsolationSegmentLabelUpdaterMockRecorder
}

// MockIsolationSegmentLabelUpdaterMockRecorder is the mock recorder for MockIsolationSegmentLabelUpdater.
type MockIsolationSegmentLabelUpdaterMockRecorder struct {
	mock *MockIsolationSegmentLabelUpdater
}

// NewMockIsolationSegmentLabelUpdater creates a new mock instance.
func NewMockIsolationSegmentLabelUpdater(ctrl *gomock.Controller) *MockIsolationSegmentLabelUpdater {
	mock := &MockIsolationSegmentLabelUpdater{ctrl: ctrl}
	mock.recorder = &MockIsolationSegmentLabelUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIsolationSegmentLabelUpdater) EXPECT() *MockIsolationSegmentLabelUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockIsolationSegmentLabelUpdater) Update(o *models.IsolationSegmentLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIsolationSegmentLabelUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIsolationSegmentLabelUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockIsolationSegmentLabelUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockIsolationSegmentLabelUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockIsolationSegmentLabelUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockIsolationSegmentLabelUpdater) UpdateAllSlice(o models.IsolationSegmentLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockIsolationSegmentLabelUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockIsolationSegmentLabelUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockIsolationSegmentLabelDeleter is a mock of IsolationSegmentLabelDeleter interface.
type MockIsolationSegmentLabelDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockIsolationSegmentLabelDeleterMockRecorder
}

// MockIsolationSegmentLabelDeleterMockRecorder is the mock recorder for MockIsolationSegmentLabelDeleter.
type MockIsolationSegmentLabelDeleterMockRecorder struct {
	mock *MockIsolationSegmentLabelDeleter
}

// NewMockIsolationSegmentLabelDeleter creates a new mock instance.
func NewMockIsolationSegmentLabelDeleter(ctrl *gomock.Controller) *MockIsolationSegmentLabelDeleter {
	mock := &MockIsolationSegmentLabelDeleter{ctrl: ctrl}
	mock.recorder = &MockIsolationSegmentLabelDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIsolationSegmentLabelDeleter) EXPECT() *MockIsolationSegmentLabelDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIsolationSegmentLabelDeleter) Delete(o *models.IsolationSegmentLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIsolationSegmentLabelDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIsolationSegmentLabelDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockIsolationSegmentLabelDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockIsolationSegmentLabelDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockIsolationSegmentLabelDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockIsolationSegmentLabelDeleter) DeleteAllSlice(o models.IsolationSegmentLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockIsolationSegmentLabelDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockIsolationSegmentLabelDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockIsolationSegmentLabelReloader is a mock of IsolationSegmentLabelReloader interface.
type MockIsolationSegmentLabelReloader struct {
	ctrl     *gomock.Controller
	recorder *MockIsolationSegmentLabelReloaderMockRecorder
}

// MockIsolationSegmentLabelReloaderMockRecorder is the mock recorder for MockIsolationSegmentLabelReloader.
type MockIsolationSegmentLabelReloaderMockRecorder struct {
	mock *MockIsolationSegmentLabelReloader
}

// NewMockIsolationSegmentLabelReloader creates a new mock instance.
func NewMockIsolationSegmentLabelReloader(ctrl *gomock.Controller) *MockIsolationSegmentLabelReloader {
	mock := &MockIsolationSegmentLabelReloader{ctrl: ctrl}
	mock.recorder = &MockIsolationSegmentLabelReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIsolationSegmentLabelReloader) EXPECT() *MockIsolationSegmentLabelReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockIsolationSegmentLabelReloader) Reload(o *models.IsolationSegmentLabel, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockIsolationSegmentLabelReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockIsolationSegmentLabelReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockIsolationSegmentLabelReloader) ReloadAll(o *models.IsolationSegmentLabelSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockIsolationSegmentLabelReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockIsolationSegmentLabelReloader)(nil).ReloadAll), o, ctx, exec)
}
