//go:build unit
// +build unit

//

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_service_broker_labels.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.com/cloudfoundry/go-cf-api/internal/storage/db/models"
)

// MockServiceBrokerLabelUpserter is a mock of ServiceBrokerLabelUpserter interface.
type MockServiceBrokerLabelUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBrokerLabelUpserterMockRecorder
}

// MockServiceBrokerLabelUpserterMockRecorder is the mock recorder for MockServiceBrokerLabelUpserter.
type MockServiceBrokerLabelUpserterMockRecorder struct {
	mock *MockServiceBrokerLabelUpserter
}

// NewMockServiceBrokerLabelUpserter creates a new mock instance.
func NewMockServiceBrokerLabelUpserter(ctrl *gomock.Controller) *MockServiceBrokerLabelUpserter {
	mock := &MockServiceBrokerLabelUpserter{ctrl: ctrl}
	mock.recorder = &MockServiceBrokerLabelUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBrokerLabelUpserter) EXPECT() *MockServiceBrokerLabelUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockServiceBrokerLabelUpserter) Upsert(o *models.ServiceBrokerLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockServiceBrokerLabelUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockServiceBrokerLabelUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockServiceBrokerLabelFinisher is a mock of ServiceBrokerLabelFinisher interface.
type MockServiceBrokerLabelFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBrokerLabelFinisherMockRecorder
}

// MockServiceBrokerLabelFinisherMockRecorder is the mock recorder for MockServiceBrokerLabelFinisher.
type MockServiceBrokerLabelFinisherMockRecorder struct {
	mock *MockServiceBrokerLabelFinisher
}

// NewMockServiceBrokerLabelFinisher creates a new mock instance.
func NewMockServiceBrokerLabelFinisher(ctrl *gomock.Controller) *MockServiceBrokerLabelFinisher {
	mock := &MockServiceBrokerLabelFinisher{ctrl: ctrl}
	mock.recorder = &MockServiceBrokerLabelFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBrokerLabelFinisher) EXPECT() *MockServiceBrokerLabelFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockServiceBrokerLabelFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.ServiceBrokerLabelSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.ServiceBrokerLabelSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockServiceBrokerLabelFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockServiceBrokerLabelFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockServiceBrokerLabelFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockServiceBrokerLabelFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockServiceBrokerLabelFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockServiceBrokerLabelFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockServiceBrokerLabelFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockServiceBrokerLabelFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockServiceBrokerLabelFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.ServiceBrokerLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.ServiceBrokerLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockServiceBrokerLabelFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockServiceBrokerLabelFinisher)(nil).One), ctx, exec)
}

// MockServiceBrokerLabelFinder is a mock of ServiceBrokerLabelFinder interface.
type MockServiceBrokerLabelFinder struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBrokerLabelFinderMockRecorder
}

// MockServiceBrokerLabelFinderMockRecorder is the mock recorder for MockServiceBrokerLabelFinder.
type MockServiceBrokerLabelFinderMockRecorder struct {
	mock *MockServiceBrokerLabelFinder
}

// NewMockServiceBrokerLabelFinder creates a new mock instance.
func NewMockServiceBrokerLabelFinder(ctrl *gomock.Controller) *MockServiceBrokerLabelFinder {
	mock := &MockServiceBrokerLabelFinder{ctrl: ctrl}
	mock.recorder = &MockServiceBrokerLabelFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBrokerLabelFinder) EXPECT() *MockServiceBrokerLabelFinderMockRecorder {
	return m.recorder
}

// FindServiceBrokerLabel mocks base method.
func (m *MockServiceBrokerLabelFinder) FindServiceBrokerLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.ServiceBrokerLabel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindServiceBrokerLabel", varargs...)
	ret0, _ := ret[0].(*models.ServiceBrokerLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindServiceBrokerLabel indicates an expected call of FindServiceBrokerLabel.
func (mr *MockServiceBrokerLabelFinderMockRecorder) FindServiceBrokerLabel(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindServiceBrokerLabel", reflect.TypeOf((*MockServiceBrokerLabelFinder)(nil).FindServiceBrokerLabel), varargs...)
}

// MockServiceBrokerLabelInserter is a mock of ServiceBrokerLabelInserter interface.
type MockServiceBrokerLabelInserter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBrokerLabelInserterMockRecorder
}

// MockServiceBrokerLabelInserterMockRecorder is the mock recorder for MockServiceBrokerLabelInserter.
type MockServiceBrokerLabelInserterMockRecorder struct {
	mock *MockServiceBrokerLabelInserter
}

// NewMockServiceBrokerLabelInserter creates a new mock instance.
func NewMockServiceBrokerLabelInserter(ctrl *gomock.Controller) *MockServiceBrokerLabelInserter {
	mock := &MockServiceBrokerLabelInserter{ctrl: ctrl}
	mock.recorder = &MockServiceBrokerLabelInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBrokerLabelInserter) EXPECT() *MockServiceBrokerLabelInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockServiceBrokerLabelInserter) Insert(o *models.ServiceBrokerLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockServiceBrokerLabelInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockServiceBrokerLabelInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockServiceBrokerLabelUpdater is a mock of ServiceBrokerLabelUpdater interface.
type MockServiceBrokerLabelUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBrokerLabelUpdaterMockRecorder
}

// MockServiceBrokerLabelUpdaterMockRecorder is the mock recorder for MockServiceBrokerLabelUpdater.
type MockServiceBrokerLabelUpdaterMockRecorder struct {
	mock *MockServiceBrokerLabelUpdater
}

// NewMockServiceBrokerLabelUpdater creates a new mock instance.
func NewMockServiceBrokerLabelUpdater(ctrl *gomock.Controller) *MockServiceBrokerLabelUpdater {
	mock := &MockServiceBrokerLabelUpdater{ctrl: ctrl}
	mock.recorder = &MockServiceBrokerLabelUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBrokerLabelUpdater) EXPECT() *MockServiceBrokerLabelUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockServiceBrokerLabelUpdater) Update(o *models.ServiceBrokerLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServiceBrokerLabelUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceBrokerLabelUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockServiceBrokerLabelUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockServiceBrokerLabelUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockServiceBrokerLabelUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockServiceBrokerLabelUpdater) UpdateAllSlice(o models.ServiceBrokerLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockServiceBrokerLabelUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockServiceBrokerLabelUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockServiceBrokerLabelDeleter is a mock of ServiceBrokerLabelDeleter interface.
type MockServiceBrokerLabelDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBrokerLabelDeleterMockRecorder
}

// MockServiceBrokerLabelDeleterMockRecorder is the mock recorder for MockServiceBrokerLabelDeleter.
type MockServiceBrokerLabelDeleterMockRecorder struct {
	mock *MockServiceBrokerLabelDeleter
}

// NewMockServiceBrokerLabelDeleter creates a new mock instance.
func NewMockServiceBrokerLabelDeleter(ctrl *gomock.Controller) *MockServiceBrokerLabelDeleter {
	mock := &MockServiceBrokerLabelDeleter{ctrl: ctrl}
	mock.recorder = &MockServiceBrokerLabelDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBrokerLabelDeleter) EXPECT() *MockServiceBrokerLabelDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockServiceBrokerLabelDeleter) Delete(o *models.ServiceBrokerLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceBrokerLabelDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceBrokerLabelDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockServiceBrokerLabelDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockServiceBrokerLabelDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockServiceBrokerLabelDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockServiceBrokerLabelDeleter) DeleteAllSlice(o models.ServiceBrokerLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockServiceBrokerLabelDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockServiceBrokerLabelDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockServiceBrokerLabelReloader is a mock of ServiceBrokerLabelReloader interface.
type MockServiceBrokerLabelReloader struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBrokerLabelReloaderMockRecorder
}

// MockServiceBrokerLabelReloaderMockRecorder is the mock recorder for MockServiceBrokerLabelReloader.
type MockServiceBrokerLabelReloaderMockRecorder struct {
	mock *MockServiceBrokerLabelReloader
}

// NewMockServiceBrokerLabelReloader creates a new mock instance.
func NewMockServiceBrokerLabelReloader(ctrl *gomock.Controller) *MockServiceBrokerLabelReloader {
	mock := &MockServiceBrokerLabelReloader{ctrl: ctrl}
	mock.recorder = &MockServiceBrokerLabelReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBrokerLabelReloader) EXPECT() *MockServiceBrokerLabelReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockServiceBrokerLabelReloader) Reload(o *models.ServiceBrokerLabel, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockServiceBrokerLabelReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockServiceBrokerLabelReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockServiceBrokerLabelReloader) ReloadAll(o *models.ServiceBrokerLabelSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockServiceBrokerLabelReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockServiceBrokerLabelReloader)(nil).ReloadAll), o, ctx, exec)
}
