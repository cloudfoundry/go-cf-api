//go:build unit
// +build unit

//

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_stack_labels.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	models "github.com/cloudfoundry/go-cf-api/internal/storage/db/models"
	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
)

// MockStackLabelUpserter is a mock of StackLabelUpserter interface.
type MockStackLabelUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockStackLabelUpserterMockRecorder
}

// MockStackLabelUpserterMockRecorder is the mock recorder for MockStackLabelUpserter.
type MockStackLabelUpserterMockRecorder struct {
	mock *MockStackLabelUpserter
}

// NewMockStackLabelUpserter creates a new mock instance.
func NewMockStackLabelUpserter(ctrl *gomock.Controller) *MockStackLabelUpserter {
	mock := &MockStackLabelUpserter{ctrl: ctrl}
	mock.recorder = &MockStackLabelUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackLabelUpserter) EXPECT() *MockStackLabelUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockStackLabelUpserter) Upsert(o *models.StackLabel, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockStackLabelUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockStackLabelUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockStackLabelFinisher is a mock of StackLabelFinisher interface.
type MockStackLabelFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockStackLabelFinisherMockRecorder
}

// MockStackLabelFinisherMockRecorder is the mock recorder for MockStackLabelFinisher.
type MockStackLabelFinisherMockRecorder struct {
	mock *MockStackLabelFinisher
}

// NewMockStackLabelFinisher creates a new mock instance.
func NewMockStackLabelFinisher(ctrl *gomock.Controller) *MockStackLabelFinisher {
	mock := &MockStackLabelFinisher{ctrl: ctrl}
	mock.recorder = &MockStackLabelFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackLabelFinisher) EXPECT() *MockStackLabelFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockStackLabelFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.StackLabelSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.StackLabelSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockStackLabelFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockStackLabelFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockStackLabelFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockStackLabelFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockStackLabelFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockStackLabelFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockStackLabelFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockStackLabelFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockStackLabelFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.StackLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.StackLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockStackLabelFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockStackLabelFinisher)(nil).One), ctx, exec)
}

// MockStackLabelFinder is a mock of StackLabelFinder interface.
type MockStackLabelFinder struct {
	ctrl     *gomock.Controller
	recorder *MockStackLabelFinderMockRecorder
}

// MockStackLabelFinderMockRecorder is the mock recorder for MockStackLabelFinder.
type MockStackLabelFinderMockRecorder struct {
	mock *MockStackLabelFinder
}

// NewMockStackLabelFinder creates a new mock instance.
func NewMockStackLabelFinder(ctrl *gomock.Controller) *MockStackLabelFinder {
	mock := &MockStackLabelFinder{ctrl: ctrl}
	mock.recorder = &MockStackLabelFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackLabelFinder) EXPECT() *MockStackLabelFinderMockRecorder {
	return m.recorder
}

// FindStackLabel mocks base method.
func (m *MockStackLabelFinder) FindStackLabel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.StackLabel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindStackLabel", varargs...)
	ret0, _ := ret[0].(*models.StackLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStackLabel indicates an expected call of FindStackLabel.
func (mr *MockStackLabelFinderMockRecorder) FindStackLabel(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStackLabel", reflect.TypeOf((*MockStackLabelFinder)(nil).FindStackLabel), varargs...)
}

// MockStackLabelInserter is a mock of StackLabelInserter interface.
type MockStackLabelInserter struct {
	ctrl     *gomock.Controller
	recorder *MockStackLabelInserterMockRecorder
}

// MockStackLabelInserterMockRecorder is the mock recorder for MockStackLabelInserter.
type MockStackLabelInserterMockRecorder struct {
	mock *MockStackLabelInserter
}

// NewMockStackLabelInserter creates a new mock instance.
func NewMockStackLabelInserter(ctrl *gomock.Controller) *MockStackLabelInserter {
	mock := &MockStackLabelInserter{ctrl: ctrl}
	mock.recorder = &MockStackLabelInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackLabelInserter) EXPECT() *MockStackLabelInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockStackLabelInserter) Insert(o *models.StackLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockStackLabelInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockStackLabelInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockStackLabelUpdater is a mock of StackLabelUpdater interface.
type MockStackLabelUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockStackLabelUpdaterMockRecorder
}

// MockStackLabelUpdaterMockRecorder is the mock recorder for MockStackLabelUpdater.
type MockStackLabelUpdaterMockRecorder struct {
	mock *MockStackLabelUpdater
}

// NewMockStackLabelUpdater creates a new mock instance.
func NewMockStackLabelUpdater(ctrl *gomock.Controller) *MockStackLabelUpdater {
	mock := &MockStackLabelUpdater{ctrl: ctrl}
	mock.recorder = &MockStackLabelUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackLabelUpdater) EXPECT() *MockStackLabelUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockStackLabelUpdater) Update(o *models.StackLabel, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockStackLabelUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStackLabelUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockStackLabelUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockStackLabelUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockStackLabelUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockStackLabelUpdater) UpdateAllSlice(o models.StackLabelSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockStackLabelUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockStackLabelUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockStackLabelDeleter is a mock of StackLabelDeleter interface.
type MockStackLabelDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockStackLabelDeleterMockRecorder
}

// MockStackLabelDeleterMockRecorder is the mock recorder for MockStackLabelDeleter.
type MockStackLabelDeleterMockRecorder struct {
	mock *MockStackLabelDeleter
}

// NewMockStackLabelDeleter creates a new mock instance.
func NewMockStackLabelDeleter(ctrl *gomock.Controller) *MockStackLabelDeleter {
	mock := &MockStackLabelDeleter{ctrl: ctrl}
	mock.recorder = &MockStackLabelDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackLabelDeleter) EXPECT() *MockStackLabelDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStackLabelDeleter) Delete(o *models.StackLabel, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockStackLabelDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStackLabelDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockStackLabelDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockStackLabelDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockStackLabelDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockStackLabelDeleter) DeleteAllSlice(o models.StackLabelSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockStackLabelDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockStackLabelDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockStackLabelReloader is a mock of StackLabelReloader interface.
type MockStackLabelReloader struct {
	ctrl     *gomock.Controller
	recorder *MockStackLabelReloaderMockRecorder
}

// MockStackLabelReloaderMockRecorder is the mock recorder for MockStackLabelReloader.
type MockStackLabelReloaderMockRecorder struct {
	mock *MockStackLabelReloader
}

// NewMockStackLabelReloader creates a new mock instance.
func NewMockStackLabelReloader(ctrl *gomock.Controller) *MockStackLabelReloader {
	mock := &MockStackLabelReloader{ctrl: ctrl}
	mock.recorder = &MockStackLabelReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackLabelReloader) EXPECT() *MockStackLabelReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockStackLabelReloader) Reload(o *models.StackLabel, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockStackLabelReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockStackLabelReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockStackLabelReloader) ReloadAll(o *models.StackLabelSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockStackLabelReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockStackLabelReloader)(nil).ReloadAll), o, ctx, exec)
}
