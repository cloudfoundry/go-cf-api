// +build unit

//

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_process_annotations.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/storage/db/models"
)

// MockProcessAnnotationUpserter is a mock of ProcessAnnotationUpserter interface.
type MockProcessAnnotationUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockProcessAnnotationUpserterMockRecorder
}

// MockProcessAnnotationUpserterMockRecorder is the mock recorder for MockProcessAnnotationUpserter.
type MockProcessAnnotationUpserterMockRecorder struct {
	mock *MockProcessAnnotationUpserter
}

// NewMockProcessAnnotationUpserter creates a new mock instance.
func NewMockProcessAnnotationUpserter(ctrl *gomock.Controller) *MockProcessAnnotationUpserter {
	mock := &MockProcessAnnotationUpserter{ctrl: ctrl}
	mock.recorder = &MockProcessAnnotationUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessAnnotationUpserter) EXPECT() *MockProcessAnnotationUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockProcessAnnotationUpserter) Upsert(o *models.ProcessAnnotation, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockProcessAnnotationUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockProcessAnnotationUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockProcessAnnotationFinisher is a mock of ProcessAnnotationFinisher interface.
type MockProcessAnnotationFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockProcessAnnotationFinisherMockRecorder
}

// MockProcessAnnotationFinisherMockRecorder is the mock recorder for MockProcessAnnotationFinisher.
type MockProcessAnnotationFinisherMockRecorder struct {
	mock *MockProcessAnnotationFinisher
}

// NewMockProcessAnnotationFinisher creates a new mock instance.
func NewMockProcessAnnotationFinisher(ctrl *gomock.Controller) *MockProcessAnnotationFinisher {
	mock := &MockProcessAnnotationFinisher{ctrl: ctrl}
	mock.recorder = &MockProcessAnnotationFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessAnnotationFinisher) EXPECT() *MockProcessAnnotationFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockProcessAnnotationFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.ProcessAnnotationSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.ProcessAnnotationSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockProcessAnnotationFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockProcessAnnotationFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockProcessAnnotationFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockProcessAnnotationFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockProcessAnnotationFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockProcessAnnotationFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockProcessAnnotationFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockProcessAnnotationFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockProcessAnnotationFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.ProcessAnnotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.ProcessAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockProcessAnnotationFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockProcessAnnotationFinisher)(nil).One), ctx, exec)
}

// MockProcessAnnotationFinder is a mock of ProcessAnnotationFinder interface.
type MockProcessAnnotationFinder struct {
	ctrl     *gomock.Controller
	recorder *MockProcessAnnotationFinderMockRecorder
}

// MockProcessAnnotationFinderMockRecorder is the mock recorder for MockProcessAnnotationFinder.
type MockProcessAnnotationFinderMockRecorder struct {
	mock *MockProcessAnnotationFinder
}

// NewMockProcessAnnotationFinder creates a new mock instance.
func NewMockProcessAnnotationFinder(ctrl *gomock.Controller) *MockProcessAnnotationFinder {
	mock := &MockProcessAnnotationFinder{ctrl: ctrl}
	mock.recorder = &MockProcessAnnotationFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessAnnotationFinder) EXPECT() *MockProcessAnnotationFinderMockRecorder {
	return m.recorder
}

// FindProcessAnnotation mocks base method.
func (m *MockProcessAnnotationFinder) FindProcessAnnotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.ProcessAnnotation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindProcessAnnotation", varargs...)
	ret0, _ := ret[0].(*models.ProcessAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProcessAnnotation indicates an expected call of FindProcessAnnotation.
func (mr *MockProcessAnnotationFinderMockRecorder) FindProcessAnnotation(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProcessAnnotation", reflect.TypeOf((*MockProcessAnnotationFinder)(nil).FindProcessAnnotation), varargs...)
}

// MockProcessAnnotationInserter is a mock of ProcessAnnotationInserter interface.
type MockProcessAnnotationInserter struct {
	ctrl     *gomock.Controller
	recorder *MockProcessAnnotationInserterMockRecorder
}

// MockProcessAnnotationInserterMockRecorder is the mock recorder for MockProcessAnnotationInserter.
type MockProcessAnnotationInserterMockRecorder struct {
	mock *MockProcessAnnotationInserter
}

// NewMockProcessAnnotationInserter creates a new mock instance.
func NewMockProcessAnnotationInserter(ctrl *gomock.Controller) *MockProcessAnnotationInserter {
	mock := &MockProcessAnnotationInserter{ctrl: ctrl}
	mock.recorder = &MockProcessAnnotationInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessAnnotationInserter) EXPECT() *MockProcessAnnotationInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockProcessAnnotationInserter) Insert(o *models.ProcessAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockProcessAnnotationInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockProcessAnnotationInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockProcessAnnotationUpdater is a mock of ProcessAnnotationUpdater interface.
type MockProcessAnnotationUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockProcessAnnotationUpdaterMockRecorder
}

// MockProcessAnnotationUpdaterMockRecorder is the mock recorder for MockProcessAnnotationUpdater.
type MockProcessAnnotationUpdaterMockRecorder struct {
	mock *MockProcessAnnotationUpdater
}

// NewMockProcessAnnotationUpdater creates a new mock instance.
func NewMockProcessAnnotationUpdater(ctrl *gomock.Controller) *MockProcessAnnotationUpdater {
	mock := &MockProcessAnnotationUpdater{ctrl: ctrl}
	mock.recorder = &MockProcessAnnotationUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessAnnotationUpdater) EXPECT() *MockProcessAnnotationUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockProcessAnnotationUpdater) Update(o *models.ProcessAnnotation, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProcessAnnotationUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProcessAnnotationUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockProcessAnnotationUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockProcessAnnotationUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockProcessAnnotationUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockProcessAnnotationUpdater) UpdateAllSlice(o models.ProcessAnnotationSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockProcessAnnotationUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockProcessAnnotationUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockProcessAnnotationDeleter is a mock of ProcessAnnotationDeleter interface.
type MockProcessAnnotationDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockProcessAnnotationDeleterMockRecorder
}

// MockProcessAnnotationDeleterMockRecorder is the mock recorder for MockProcessAnnotationDeleter.
type MockProcessAnnotationDeleterMockRecorder struct {
	mock *MockProcessAnnotationDeleter
}

// NewMockProcessAnnotationDeleter creates a new mock instance.
func NewMockProcessAnnotationDeleter(ctrl *gomock.Controller) *MockProcessAnnotationDeleter {
	mock := &MockProcessAnnotationDeleter{ctrl: ctrl}
	mock.recorder = &MockProcessAnnotationDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessAnnotationDeleter) EXPECT() *MockProcessAnnotationDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockProcessAnnotationDeleter) Delete(o *models.ProcessAnnotation, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockProcessAnnotationDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProcessAnnotationDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockProcessAnnotationDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockProcessAnnotationDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockProcessAnnotationDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockProcessAnnotationDeleter) DeleteAllSlice(o models.ProcessAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockProcessAnnotationDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockProcessAnnotationDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockProcessAnnotationReloader is a mock of ProcessAnnotationReloader interface.
type MockProcessAnnotationReloader struct {
	ctrl     *gomock.Controller
	recorder *MockProcessAnnotationReloaderMockRecorder
}

// MockProcessAnnotationReloaderMockRecorder is the mock recorder for MockProcessAnnotationReloader.
type MockProcessAnnotationReloaderMockRecorder struct {
	mock *MockProcessAnnotationReloader
}

// NewMockProcessAnnotationReloader creates a new mock instance.
func NewMockProcessAnnotationReloader(ctrl *gomock.Controller) *MockProcessAnnotationReloader {
	mock := &MockProcessAnnotationReloader{ctrl: ctrl}
	mock.recorder = &MockProcessAnnotationReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessAnnotationReloader) EXPECT() *MockProcessAnnotationReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockProcessAnnotationReloader) Reload(o *models.ProcessAnnotation, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockProcessAnnotationReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockProcessAnnotationReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockProcessAnnotationReloader) ReloadAll(o *models.ProcessAnnotationSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockProcessAnnotationReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockProcessAnnotationReloader)(nil).ReloadAll), o, ctx, exec)
}
