//go:build unit
// +build unit

//

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_service_keys.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	models "github.com/cloudfoundry/go-cf-api/internal/storage/db/models"
	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
)

// MockServiceKeyUpserter is a mock of ServiceKeyUpserter interface.
type MockServiceKeyUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceKeyUpserterMockRecorder
}

// MockServiceKeyUpserterMockRecorder is the mock recorder for MockServiceKeyUpserter.
type MockServiceKeyUpserterMockRecorder struct {
	mock *MockServiceKeyUpserter
}

// NewMockServiceKeyUpserter creates a new mock instance.
func NewMockServiceKeyUpserter(ctrl *gomock.Controller) *MockServiceKeyUpserter {
	mock := &MockServiceKeyUpserter{ctrl: ctrl}
	mock.recorder = &MockServiceKeyUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceKeyUpserter) EXPECT() *MockServiceKeyUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockServiceKeyUpserter) Upsert(o *models.ServiceKey, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockServiceKeyUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockServiceKeyUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockServiceKeyFinisher is a mock of ServiceKeyFinisher interface.
type MockServiceKeyFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockServiceKeyFinisherMockRecorder
}

// MockServiceKeyFinisherMockRecorder is the mock recorder for MockServiceKeyFinisher.
type MockServiceKeyFinisherMockRecorder struct {
	mock *MockServiceKeyFinisher
}

// NewMockServiceKeyFinisher creates a new mock instance.
func NewMockServiceKeyFinisher(ctrl *gomock.Controller) *MockServiceKeyFinisher {
	mock := &MockServiceKeyFinisher{ctrl: ctrl}
	mock.recorder = &MockServiceKeyFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceKeyFinisher) EXPECT() *MockServiceKeyFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockServiceKeyFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.ServiceKeySlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.ServiceKeySlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockServiceKeyFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockServiceKeyFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockServiceKeyFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockServiceKeyFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockServiceKeyFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockServiceKeyFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockServiceKeyFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockServiceKeyFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockServiceKeyFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.ServiceKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.ServiceKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockServiceKeyFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockServiceKeyFinisher)(nil).One), ctx, exec)
}

// MockServiceKeyFinder is a mock of ServiceKeyFinder interface.
type MockServiceKeyFinder struct {
	ctrl     *gomock.Controller
	recorder *MockServiceKeyFinderMockRecorder
}

// MockServiceKeyFinderMockRecorder is the mock recorder for MockServiceKeyFinder.
type MockServiceKeyFinderMockRecorder struct {
	mock *MockServiceKeyFinder
}

// NewMockServiceKeyFinder creates a new mock instance.
func NewMockServiceKeyFinder(ctrl *gomock.Controller) *MockServiceKeyFinder {
	mock := &MockServiceKeyFinder{ctrl: ctrl}
	mock.recorder = &MockServiceKeyFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceKeyFinder) EXPECT() *MockServiceKeyFinderMockRecorder {
	return m.recorder
}

// FindServiceKey mocks base method.
func (m *MockServiceKeyFinder) FindServiceKey(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.ServiceKey, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindServiceKey", varargs...)
	ret0, _ := ret[0].(*models.ServiceKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindServiceKey indicates an expected call of FindServiceKey.
func (mr *MockServiceKeyFinderMockRecorder) FindServiceKey(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindServiceKey", reflect.TypeOf((*MockServiceKeyFinder)(nil).FindServiceKey), varargs...)
}

// MockServiceKeyInserter is a mock of ServiceKeyInserter interface.
type MockServiceKeyInserter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceKeyInserterMockRecorder
}

// MockServiceKeyInserterMockRecorder is the mock recorder for MockServiceKeyInserter.
type MockServiceKeyInserterMockRecorder struct {
	mock *MockServiceKeyInserter
}

// NewMockServiceKeyInserter creates a new mock instance.
func NewMockServiceKeyInserter(ctrl *gomock.Controller) *MockServiceKeyInserter {
	mock := &MockServiceKeyInserter{ctrl: ctrl}
	mock.recorder = &MockServiceKeyInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceKeyInserter) EXPECT() *MockServiceKeyInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockServiceKeyInserter) Insert(o *models.ServiceKey, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockServiceKeyInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockServiceKeyInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockServiceKeyUpdater is a mock of ServiceKeyUpdater interface.
type MockServiceKeyUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockServiceKeyUpdaterMockRecorder
}

// MockServiceKeyUpdaterMockRecorder is the mock recorder for MockServiceKeyUpdater.
type MockServiceKeyUpdaterMockRecorder struct {
	mock *MockServiceKeyUpdater
}

// NewMockServiceKeyUpdater creates a new mock instance.
func NewMockServiceKeyUpdater(ctrl *gomock.Controller) *MockServiceKeyUpdater {
	mock := &MockServiceKeyUpdater{ctrl: ctrl}
	mock.recorder = &MockServiceKeyUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceKeyUpdater) EXPECT() *MockServiceKeyUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockServiceKeyUpdater) Update(o *models.ServiceKey, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServiceKeyUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceKeyUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockServiceKeyUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockServiceKeyUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockServiceKeyUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockServiceKeyUpdater) UpdateAllSlice(o models.ServiceKeySlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockServiceKeyUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockServiceKeyUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockServiceKeyDeleter is a mock of ServiceKeyDeleter interface.
type MockServiceKeyDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceKeyDeleterMockRecorder
}

// MockServiceKeyDeleterMockRecorder is the mock recorder for MockServiceKeyDeleter.
type MockServiceKeyDeleterMockRecorder struct {
	mock *MockServiceKeyDeleter
}

// NewMockServiceKeyDeleter creates a new mock instance.
func NewMockServiceKeyDeleter(ctrl *gomock.Controller) *MockServiceKeyDeleter {
	mock := &MockServiceKeyDeleter{ctrl: ctrl}
	mock.recorder = &MockServiceKeyDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceKeyDeleter) EXPECT() *MockServiceKeyDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockServiceKeyDeleter) Delete(o *models.ServiceKey, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceKeyDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceKeyDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockServiceKeyDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockServiceKeyDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockServiceKeyDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockServiceKeyDeleter) DeleteAllSlice(o models.ServiceKeySlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockServiceKeyDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockServiceKeyDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockServiceKeyReloader is a mock of ServiceKeyReloader interface.
type MockServiceKeyReloader struct {
	ctrl     *gomock.Controller
	recorder *MockServiceKeyReloaderMockRecorder
}

// MockServiceKeyReloaderMockRecorder is the mock recorder for MockServiceKeyReloader.
type MockServiceKeyReloaderMockRecorder struct {
	mock *MockServiceKeyReloader
}

// NewMockServiceKeyReloader creates a new mock instance.
func NewMockServiceKeyReloader(ctrl *gomock.Controller) *MockServiceKeyReloader {
	mock := &MockServiceKeyReloader{ctrl: ctrl}
	mock.recorder = &MockServiceKeyReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceKeyReloader) EXPECT() *MockServiceKeyReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockServiceKeyReloader) Reload(o *models.ServiceKey, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockServiceKeyReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockServiceKeyReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockServiceKeyReloader) ReloadAll(o *models.ServiceKeySlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockServiceKeyReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockServiceKeyReloader)(nil).ReloadAll), o, ctx, exec)
}
