//go:build unit
// +build unit

//

// Code generated by MockGen. DO NOT EDIT.
// Source: psql_route_mappings.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	models "github.tools.sap/cloudfoundry/cloudgontroller/internal/storage/db/models"
)

// MockRouteMappingUpserter is a mock of RouteMappingUpserter interface.
type MockRouteMappingUpserter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteMappingUpserterMockRecorder
}

// MockRouteMappingUpserterMockRecorder is the mock recorder for MockRouteMappingUpserter.
type MockRouteMappingUpserterMockRecorder struct {
	mock *MockRouteMappingUpserter
}

// NewMockRouteMappingUpserter creates a new mock instance.
func NewMockRouteMappingUpserter(ctrl *gomock.Controller) *MockRouteMappingUpserter {
	mock := &MockRouteMappingUpserter{ctrl: ctrl}
	mock.recorder = &MockRouteMappingUpserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteMappingUpserter) EXPECT() *MockRouteMappingUpserterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockRouteMappingUpserter) Upsert(o *models.RouteMapping, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", o, ctx, exec, updateColumns, insertColumns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockRouteMappingUpserterMockRecorder) Upsert(o, ctx, exec, updateColumns, insertColumns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockRouteMappingUpserter)(nil).Upsert), o, ctx, exec, updateColumns, insertColumns)
}

// MockRouteMappingFinisher is a mock of RouteMappingFinisher interface.
type MockRouteMappingFinisher struct {
	ctrl     *gomock.Controller
	recorder *MockRouteMappingFinisherMockRecorder
}

// MockRouteMappingFinisherMockRecorder is the mock recorder for MockRouteMappingFinisher.
type MockRouteMappingFinisherMockRecorder struct {
	mock *MockRouteMappingFinisher
}

// NewMockRouteMappingFinisher creates a new mock instance.
func NewMockRouteMappingFinisher(ctrl *gomock.Controller) *MockRouteMappingFinisher {
	mock := &MockRouteMappingFinisher{ctrl: ctrl}
	mock.recorder = &MockRouteMappingFinisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteMappingFinisher) EXPECT() *MockRouteMappingFinisherMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockRouteMappingFinisher) All(ctx context.Context, exec boil.ContextExecutor) (models.RouteMappingSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, exec)
	ret0, _ := ret[0].(models.RouteMappingSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockRouteMappingFinisherMockRecorder) All(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockRouteMappingFinisher)(nil).All), ctx, exec)
}

// Count mocks base method.
func (m *MockRouteMappingFinisher) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockRouteMappingFinisherMockRecorder) Count(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRouteMappingFinisher)(nil).Count), ctx, exec)
}

// Exists mocks base method.
func (m *MockRouteMappingFinisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, exec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockRouteMappingFinisherMockRecorder) Exists(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRouteMappingFinisher)(nil).Exists), ctx, exec)
}

// One mocks base method.
func (m *MockRouteMappingFinisher) One(ctx context.Context, exec boil.ContextExecutor) (*models.RouteMapping, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, exec)
	ret0, _ := ret[0].(*models.RouteMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockRouteMappingFinisherMockRecorder) One(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockRouteMappingFinisher)(nil).One), ctx, exec)
}

// MockRouteMappingFinder is a mock of RouteMappingFinder interface.
type MockRouteMappingFinder struct {
	ctrl     *gomock.Controller
	recorder *MockRouteMappingFinderMockRecorder
}

// MockRouteMappingFinderMockRecorder is the mock recorder for MockRouteMappingFinder.
type MockRouteMappingFinderMockRecorder struct {
	mock *MockRouteMappingFinder
}

// NewMockRouteMappingFinder creates a new mock instance.
func NewMockRouteMappingFinder(ctrl *gomock.Controller) *MockRouteMappingFinder {
	mock := &MockRouteMappingFinder{ctrl: ctrl}
	mock.recorder = &MockRouteMappingFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteMappingFinder) EXPECT() *MockRouteMappingFinderMockRecorder {
	return m.recorder
}

// FindRouteMapping mocks base method.
func (m *MockRouteMappingFinder) FindRouteMapping(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*models.RouteMapping, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, exec, iD}
	for _, a := range selectCols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindRouteMapping", varargs...)
	ret0, _ := ret[0].(*models.RouteMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRouteMapping indicates an expected call of FindRouteMapping.
func (mr *MockRouteMappingFinderMockRecorder) FindRouteMapping(ctx, exec, iD interface{}, selectCols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, exec, iD}, selectCols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouteMapping", reflect.TypeOf((*MockRouteMappingFinder)(nil).FindRouteMapping), varargs...)
}

// MockRouteMappingInserter is a mock of RouteMappingInserter interface.
type MockRouteMappingInserter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteMappingInserterMockRecorder
}

// MockRouteMappingInserterMockRecorder is the mock recorder for MockRouteMappingInserter.
type MockRouteMappingInserterMockRecorder struct {
	mock *MockRouteMappingInserter
}

// NewMockRouteMappingInserter creates a new mock instance.
func NewMockRouteMappingInserter(ctrl *gomock.Controller) *MockRouteMappingInserter {
	mock := &MockRouteMappingInserter{ctrl: ctrl}
	mock.recorder = &MockRouteMappingInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteMappingInserter) EXPECT() *MockRouteMappingInserterMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockRouteMappingInserter) Insert(o *models.RouteMapping, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", o, ctx, exec, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockRouteMappingInserterMockRecorder) Insert(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRouteMappingInserter)(nil).Insert), o, ctx, exec, columns)
}

// MockRouteMappingUpdater is a mock of RouteMappingUpdater interface.
type MockRouteMappingUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockRouteMappingUpdaterMockRecorder
}

// MockRouteMappingUpdaterMockRecorder is the mock recorder for MockRouteMappingUpdater.
type MockRouteMappingUpdaterMockRecorder struct {
	mock *MockRouteMappingUpdater
}

// NewMockRouteMappingUpdater creates a new mock instance.
func NewMockRouteMappingUpdater(ctrl *gomock.Controller) *MockRouteMappingUpdater {
	mock := &MockRouteMappingUpdater{ctrl: ctrl}
	mock.recorder = &MockRouteMappingUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteMappingUpdater) EXPECT() *MockRouteMappingUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockRouteMappingUpdater) Update(o *models.RouteMapping, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", o, ctx, exec, columns)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRouteMappingUpdaterMockRecorder) Update(o, ctx, exec, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRouteMappingUpdater)(nil).Update), o, ctx, exec, columns)
}

// UpdateAll mocks base method.
func (m *MockRouteMappingUpdater) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockRouteMappingUpdaterMockRecorder) UpdateAll(ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockRouteMappingUpdater)(nil).UpdateAll), ctx, exec, cols)
}

// UpdateAllSlice mocks base method.
func (m *MockRouteMappingUpdater) UpdateAllSlice(o models.RouteMappingSlice, ctx context.Context, exec boil.ContextExecutor, cols models.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllSlice", o, ctx, exec, cols)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllSlice indicates an expected call of UpdateAllSlice.
func (mr *MockRouteMappingUpdaterMockRecorder) UpdateAllSlice(o, ctx, exec, cols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllSlice", reflect.TypeOf((*MockRouteMappingUpdater)(nil).UpdateAllSlice), o, ctx, exec, cols)
}

// MockRouteMappingDeleter is a mock of RouteMappingDeleter interface.
type MockRouteMappingDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteMappingDeleterMockRecorder
}

// MockRouteMappingDeleterMockRecorder is the mock recorder for MockRouteMappingDeleter.
type MockRouteMappingDeleterMockRecorder struct {
	mock *MockRouteMappingDeleter
}

// NewMockRouteMappingDeleter creates a new mock instance.
func NewMockRouteMappingDeleter(ctrl *gomock.Controller) *MockRouteMappingDeleter {
	mock := &MockRouteMappingDeleter{ctrl: ctrl}
	mock.recorder = &MockRouteMappingDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteMappingDeleter) EXPECT() *MockRouteMappingDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRouteMappingDeleter) Delete(o *models.RouteMapping, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRouteMappingDeleterMockRecorder) Delete(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRouteMappingDeleter)(nil).Delete), o, ctx, exec)
}

// DeleteAll mocks base method.
func (m *MockRouteMappingDeleter) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockRouteMappingDeleterMockRecorder) DeleteAll(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockRouteMappingDeleter)(nil).DeleteAll), ctx, exec)
}

// DeleteAllSlice mocks base method.
func (m *MockRouteMappingDeleter) DeleteAllSlice(o models.RouteMappingSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSlice", o, ctx, exec)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllSlice indicates an expected call of DeleteAllSlice.
func (mr *MockRouteMappingDeleterMockRecorder) DeleteAllSlice(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSlice", reflect.TypeOf((*MockRouteMappingDeleter)(nil).DeleteAllSlice), o, ctx, exec)
}

// MockRouteMappingReloader is a mock of RouteMappingReloader interface.
type MockRouteMappingReloader struct {
	ctrl     *gomock.Controller
	recorder *MockRouteMappingReloaderMockRecorder
}

// MockRouteMappingReloaderMockRecorder is the mock recorder for MockRouteMappingReloader.
type MockRouteMappingReloaderMockRecorder struct {
	mock *MockRouteMappingReloader
}

// NewMockRouteMappingReloader creates a new mock instance.
func NewMockRouteMappingReloader(ctrl *gomock.Controller) *MockRouteMappingReloader {
	mock := &MockRouteMappingReloader{ctrl: ctrl}
	mock.recorder = &MockRouteMappingReloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteMappingReloader) EXPECT() *MockRouteMappingReloaderMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockRouteMappingReloader) Reload(o *models.RouteMapping, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockRouteMappingReloaderMockRecorder) Reload(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockRouteMappingReloader)(nil).Reload), o, ctx, exec)
}

// ReloadAll mocks base method.
func (m *MockRouteMappingReloader) ReloadAll(o *models.RouteMappingSlice, ctx context.Context, exec boil.ContextExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadAll", o, ctx, exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadAll indicates an expected call of ReloadAll.
func (mr *MockRouteMappingReloaderMockRecorder) ReloadAll(o, ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadAll", reflect.TypeOf((*MockRouteMappingReloader)(nil).ReloadAll), o, ctx, exec)
}
