// +build mysql

// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

type SpaceUpserter interface {
	Upsert(o *Space, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error
}

var mySQLSpaceUniqueColumns = []string{
	"id",
	"guid",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (q spaceQuery) Upsert(o *Space, ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no spaces provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(spaceColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSpaceUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	spaceUpsertCacheMut.RLock()
	cache, cached := spaceUpsertCache[key]
	spaceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			spaceAllColumns,
			spaceColumnsWithDefault,
			spaceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			spaceAllColumns,
			spacePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert spaces, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`spaces`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `spaces` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(spaceType, spaceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(spaceType, spaceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for spaces")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == spaceMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(spaceType, spaceMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for spaces")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for spaces")
	}

CacheNoHooks:
	if !cached {
		spaceUpsertCacheMut.Lock()
		spaceUpsertCache[key] = cache
		spaceUpsertCacheMut.Unlock()
	}

	return nil
}

// Space is an object representing the database table.
type Space struct {
	ID                     int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	GUID                   string      `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	CreatedAt              time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt              null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Name                   string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	OrganizationID         int         `boil:"organization_id" json:"organization_id" toml:"organization_id" yaml:"organization_id"`
	SpaceQuotaDefinitionID null.Int    `boil:"space_quota_definition_id" json:"space_quota_definition_id,omitempty" toml:"space_quota_definition_id" yaml:"space_quota_definition_id,omitempty"`
	AllowSSH               null.Bool   `boil:"allow_ssh" json:"allow_ssh,omitempty" toml:"allow_ssh" yaml:"allow_ssh,omitempty"`
	IsolationSegmentGUID   null.String `boil:"isolation_segment_guid" json:"isolation_segment_guid,omitempty" toml:"isolation_segment_guid" yaml:"isolation_segment_guid,omitempty"`

	R *spaceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L spaceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SpaceColumns = struct {
	ID                     string
	GUID                   string
	CreatedAt              string
	UpdatedAt              string
	Name                   string
	OrganizationID         string
	SpaceQuotaDefinitionID string
	AllowSSH               string
	IsolationSegmentGUID   string
}{
	ID:                     "id",
	GUID:                   "guid",
	CreatedAt:              "created_at",
	UpdatedAt:              "updated_at",
	Name:                   "name",
	OrganizationID:         "organization_id",
	SpaceQuotaDefinitionID: "space_quota_definition_id",
	AllowSSH:               "allow_ssh",
	IsolationSegmentGUID:   "isolation_segment_guid",
}

var SpaceTableColumns = struct {
	ID                     string
	GUID                   string
	CreatedAt              string
	UpdatedAt              string
	Name                   string
	OrganizationID         string
	SpaceQuotaDefinitionID string
	AllowSSH               string
	IsolationSegmentGUID   string
}{
	ID:                     "spaces.id",
	GUID:                   "spaces.guid",
	CreatedAt:              "spaces.created_at",
	UpdatedAt:              "spaces.updated_at",
	Name:                   "spaces.name",
	OrganizationID:         "spaces.organization_id",
	SpaceQuotaDefinitionID: "spaces.space_quota_definition_id",
	AllowSSH:               "spaces.allow_ssh",
	IsolationSegmentGUID:   "spaces.isolation_segment_guid",
}

// Generated where

var SpaceWhere = struct {
	ID                     whereHelperint
	GUID                   whereHelperstring
	CreatedAt              whereHelpertime_Time
	UpdatedAt              whereHelpernull_Time
	Name                   whereHelperstring
	OrganizationID         whereHelperint
	SpaceQuotaDefinitionID whereHelpernull_Int
	AllowSSH               whereHelpernull_Bool
	IsolationSegmentGUID   whereHelpernull_String
}{
	ID:                     whereHelperint{field: "`spaces`.`id`"},
	GUID:                   whereHelperstring{field: "`spaces`.`guid`"},
	CreatedAt:              whereHelpertime_Time{field: "`spaces`.`created_at`"},
	UpdatedAt:              whereHelpernull_Time{field: "`spaces`.`updated_at`"},
	Name:                   whereHelperstring{field: "`spaces`.`name`"},
	OrganizationID:         whereHelperint{field: "`spaces`.`organization_id`"},
	SpaceQuotaDefinitionID: whereHelpernull_Int{field: "`spaces`.`space_quota_definition_id`"},
	AllowSSH:               whereHelpernull_Bool{field: "`spaces`.`allow_ssh`"},
	IsolationSegmentGUID:   whereHelpernull_String{field: "`spaces`.`isolation_segment_guid`"},
}

// SpaceRels is where relationship names are stored.
var SpaceRels = struct {
	IsolationSegment                        string
	Organization                            string
	SpaceQuotaDefinition                    string
	Apps                                    string
	Routes                                  string
	SecurityGroupsSpaces                    string
	ServiceBrokers                          string
	SharedServiceInstances                  string
	ServiceInstances                        string
	ResourceSpaceAnnotations                string
	ResourceSpaceLabels                     string
	SpacesApplicationSupporters             string
	SpacesAuditors                          string
	SpacesDevelopers                        string
	SpacesManagers                          string
	StagingSpaceStagingSecurityGroupsSpaces string
	DefaultSpaceUsers                       string
}{
	IsolationSegment:                        "IsolationSegment",
	Organization:                            "Organization",
	SpaceQuotaDefinition:                    "SpaceQuotaDefinition",
	Apps:                                    "Apps",
	Routes:                                  "Routes",
	SecurityGroupsSpaces:                    "SecurityGroupsSpaces",
	ServiceBrokers:                          "ServiceBrokers",
	SharedServiceInstances:                  "SharedServiceInstances",
	ServiceInstances:                        "ServiceInstances",
	ResourceSpaceAnnotations:                "ResourceSpaceAnnotations",
	ResourceSpaceLabels:                     "ResourceSpaceLabels",
	SpacesApplicationSupporters:             "SpacesApplicationSupporters",
	SpacesAuditors:                          "SpacesAuditors",
	SpacesDevelopers:                        "SpacesDevelopers",
	SpacesManagers:                          "SpacesManagers",
	StagingSpaceStagingSecurityGroupsSpaces: "StagingSpaceStagingSecurityGroupsSpaces",
	DefaultSpaceUsers:                       "DefaultSpaceUsers",
}

// spaceR is where relationships are stored.
type spaceR struct {
	IsolationSegment                        *IsolationSegment               `boil:"IsolationSegment" json:"IsolationSegment" toml:"IsolationSegment" yaml:"IsolationSegment"`
	Organization                            *Organization                   `boil:"Organization" json:"Organization" toml:"Organization" yaml:"Organization"`
	SpaceQuotaDefinition                    *SpaceQuotaDefinition           `boil:"SpaceQuotaDefinition" json:"SpaceQuotaDefinition" toml:"SpaceQuotaDefinition" yaml:"SpaceQuotaDefinition"`
	Apps                                    AppSlice                        `boil:"Apps" json:"Apps" toml:"Apps" yaml:"Apps"`
	Routes                                  RouteSlice                      `boil:"Routes" json:"Routes" toml:"Routes" yaml:"Routes"`
	SecurityGroupsSpaces                    SecurityGroupsSpaceSlice        `boil:"SecurityGroupsSpaces" json:"SecurityGroupsSpaces" toml:"SecurityGroupsSpaces" yaml:"SecurityGroupsSpaces"`
	ServiceBrokers                          ServiceBrokerSlice              `boil:"ServiceBrokers" json:"ServiceBrokers" toml:"ServiceBrokers" yaml:"ServiceBrokers"`
	SharedServiceInstances                  ServiceInstanceSlice            `boil:"SharedServiceInstances" json:"SharedServiceInstances" toml:"SharedServiceInstances" yaml:"SharedServiceInstances"`
	ServiceInstances                        ServiceInstanceSlice            `boil:"ServiceInstances" json:"ServiceInstances" toml:"ServiceInstances" yaml:"ServiceInstances"`
	ResourceSpaceAnnotations                SpaceAnnotationSlice            `boil:"ResourceSpaceAnnotations" json:"ResourceSpaceAnnotations" toml:"ResourceSpaceAnnotations" yaml:"ResourceSpaceAnnotations"`
	ResourceSpaceLabels                     SpaceLabelSlice                 `boil:"ResourceSpaceLabels" json:"ResourceSpaceLabels" toml:"ResourceSpaceLabels" yaml:"ResourceSpaceLabels"`
	SpacesApplicationSupporters             SpacesApplicationSupporterSlice `boil:"SpacesApplicationSupporters" json:"SpacesApplicationSupporters" toml:"SpacesApplicationSupporters" yaml:"SpacesApplicationSupporters"`
	SpacesAuditors                          SpacesAuditorSlice              `boil:"SpacesAuditors" json:"SpacesAuditors" toml:"SpacesAuditors" yaml:"SpacesAuditors"`
	SpacesDevelopers                        SpacesDeveloperSlice            `boil:"SpacesDevelopers" json:"SpacesDevelopers" toml:"SpacesDevelopers" yaml:"SpacesDevelopers"`
	SpacesManagers                          SpacesManagerSlice              `boil:"SpacesManagers" json:"SpacesManagers" toml:"SpacesManagers" yaml:"SpacesManagers"`
	StagingSpaceStagingSecurityGroupsSpaces StagingSecurityGroupsSpaceSlice `boil:"StagingSpaceStagingSecurityGroupsSpaces" json:"StagingSpaceStagingSecurityGroupsSpaces" toml:"StagingSpaceStagingSecurityGroupsSpaces" yaml:"StagingSpaceStagingSecurityGroupsSpaces"`
	DefaultSpaceUsers                       UserSlice                       `boil:"DefaultSpaceUsers" json:"DefaultSpaceUsers" toml:"DefaultSpaceUsers" yaml:"DefaultSpaceUsers"`
}

// NewStruct creates a new relationship struct
func (*spaceR) NewStruct() *spaceR {
	return &spaceR{}
}

// spaceL is where Load methods for each relationship are stored.
type spaceL struct{}

var (
	spaceAllColumns            = []string{"id", "guid", "created_at", "updated_at", "name", "organization_id", "space_quota_definition_id", "allow_ssh", "isolation_segment_guid"}
	spaceColumnsWithoutDefault = []string{"guid", "updated_at", "name", "organization_id", "space_quota_definition_id", "isolation_segment_guid"}
	spaceColumnsWithDefault    = []string{"id", "created_at", "allow_ssh"}
	spacePrimaryKeyColumns     = []string{"id"}
)

type (
	// SpaceSlice is an alias for a slice of pointers to Space.
	// This should almost always be used instead of []Space.
	SpaceSlice []*Space

	spaceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	spaceType                 = reflect.TypeOf(&Space{})
	spaceMapping              = queries.MakeStructMapping(spaceType)
	spacePrimaryKeyMapping, _ = queries.BindMapping(spaceType, spaceMapping, spacePrimaryKeyColumns)
	spaceInsertCacheMut       sync.RWMutex
	spaceInsertCache          = make(map[string]insertCache)
	spaceUpdateCacheMut       sync.RWMutex
	spaceUpdateCache          = make(map[string]updateCache)
	spaceUpsertCacheMut       sync.RWMutex
	spaceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

type SpaceFinisher interface {
	One(ctx context.Context, exec boil.ContextExecutor) (*Space, error)
	Count(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	All(ctx context.Context, exec boil.ContextExecutor) (SpaceSlice, error)
	Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)
}

// One returns a single space record from the query.
func (q spaceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Space, error) {
	o := &Space{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for spaces")
	}

	return o, nil
}

// All returns all Space records from the query.
func (q spaceQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpaceSlice, error) {
	var o []*Space

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Space slice")
	}

	return o, nil
}

// Count returns the count of all Space records in the query.
func (q spaceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count spaces rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q spaceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if spaces exists")
	}

	return count > 0, nil
}

// IsolationSegment pointed to by the foreign key.
func (q spaceQuery) IsolationSegment(o *Space, mods ...qm.QueryMod) isolationSegmentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`guid` = ?", o.IsolationSegmentGUID),
	}

	queryMods = append(queryMods, mods...)

	query := IsolationSegments(queryMods...)
	queries.SetFrom(query.Query, "`isolation_segments`")

	return query
}

// Organization pointed to by the foreign key.
func (q spaceQuery) Organization(o *Space, mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	query := Organizations(queryMods...)
	queries.SetFrom(query.Query, "`organizations`")

	return query
}

// SpaceQuotaDefinition pointed to by the foreign key.
func (q spaceQuery) SpaceQuotaDefinition(o *Space, mods ...qm.QueryMod) spaceQuotaDefinitionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.SpaceQuotaDefinitionID),
	}

	queryMods = append(queryMods, mods...)

	query := SpaceQuotaDefinitions(queryMods...)
	queries.SetFrom(query.Query, "`space_quota_definitions`")

	return query
}

// Apps retrieves all the app's Apps with an executor.
func (q spaceQuery) Apps(o *Space, mods ...qm.QueryMod) appQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`apps`.`space_guid`=?", o.GUID),
	)

	query := Apps(queryMods...)
	queries.SetFrom(query.Query, "`apps`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`apps`.*"})
	}

	return query
}

// Routes retrieves all the route's Routes with an executor.
func (q spaceQuery) Routes(o *Space, mods ...qm.QueryMod) routeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`routes`.`space_id`=?", o.ID),
	)

	query := Routes(queryMods...)
	queries.SetFrom(query.Query, "`routes`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`routes`.*"})
	}

	return query
}

// SecurityGroupsSpaces retrieves all the security_groups_space's SecurityGroupsSpaces with an executor.
func (q spaceQuery) SecurityGroupsSpaces(o *Space, mods ...qm.QueryMod) securityGroupsSpaceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`security_groups_spaces`.`space_id`=?", o.ID),
	)

	query := SecurityGroupsSpaces(queryMods...)
	queries.SetFrom(query.Query, "`security_groups_spaces`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`security_groups_spaces`.*"})
	}

	return query
}

// ServiceBrokers retrieves all the service_broker's ServiceBrokers with an executor.
func (q spaceQuery) ServiceBrokers(o *Space, mods ...qm.QueryMod) serviceBrokerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`service_brokers`.`space_id`=?", o.ID),
	)

	query := ServiceBrokers(queryMods...)
	queries.SetFrom(query.Query, "`service_brokers`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`service_brokers`.*"})
	}

	return query
}

// SharedServiceInstances retrieves all the service_instance's ServiceInstances with an executor via guid column.
func (q spaceQuery) SharedServiceInstances(o *Space, mods ...qm.QueryMod) serviceInstanceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`service_instance_shares` on `service_instances`.`guid` = `service_instance_shares`.`service_instance_guid`"),
		qm.Where("`service_instance_shares`.`target_space_guid`=?", o.GUID),
	)

	query := ServiceInstances(queryMods...)
	queries.SetFrom(query.Query, "`service_instances`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`service_instances`.*"})
	}

	return query
}

// ServiceInstances retrieves all the service_instance's ServiceInstances with an executor.
func (q spaceQuery) ServiceInstances(o *Space, mods ...qm.QueryMod) serviceInstanceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`service_instances`.`space_id`=?", o.ID),
	)

	query := ServiceInstances(queryMods...)
	queries.SetFrom(query.Query, "`service_instances`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`service_instances`.*"})
	}

	return query
}

// ResourceSpaceAnnotations retrieves all the space_annotation's SpaceAnnotations with an executor via resource_guid column.
func (q spaceQuery) ResourceSpaceAnnotations(o *Space, mods ...qm.QueryMod) spaceAnnotationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`space_annotations`.`resource_guid`=?", o.GUID),
	)

	query := SpaceAnnotations(queryMods...)
	queries.SetFrom(query.Query, "`space_annotations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`space_annotations`.*"})
	}

	return query
}

// ResourceSpaceLabels retrieves all the space_label's SpaceLabels with an executor via resource_guid column.
func (q spaceQuery) ResourceSpaceLabels(o *Space, mods ...qm.QueryMod) spaceLabelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`space_labels`.`resource_guid`=?", o.GUID),
	)

	query := SpaceLabels(queryMods...)
	queries.SetFrom(query.Query, "`space_labels`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`space_labels`.*"})
	}

	return query
}

// SpacesApplicationSupporters retrieves all the spaces_application_supporter's SpacesApplicationSupporters with an executor.
func (q spaceQuery) SpacesApplicationSupporters(o *Space, mods ...qm.QueryMod) spacesApplicationSupporterQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`spaces_application_supporters`.`space_id`=?", o.ID),
	)

	query := SpacesApplicationSupporters(queryMods...)
	queries.SetFrom(query.Query, "`spaces_application_supporters`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`spaces_application_supporters`.*"})
	}

	return query
}

// SpacesAuditors retrieves all the spaces_auditor's SpacesAuditors with an executor.
func (q spaceQuery) SpacesAuditors(o *Space, mods ...qm.QueryMod) spacesAuditorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`spaces_auditors`.`space_id`=?", o.ID),
	)

	query := SpacesAuditors(queryMods...)
	queries.SetFrom(query.Query, "`spaces_auditors`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`spaces_auditors`.*"})
	}

	return query
}

// SpacesDevelopers retrieves all the spaces_developer's SpacesDevelopers with an executor.
func (q spaceQuery) SpacesDevelopers(o *Space, mods ...qm.QueryMod) spacesDeveloperQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`spaces_developers`.`space_id`=?", o.ID),
	)

	query := SpacesDevelopers(queryMods...)
	queries.SetFrom(query.Query, "`spaces_developers`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`spaces_developers`.*"})
	}

	return query
}

// SpacesManagers retrieves all the spaces_manager's SpacesManagers with an executor.
func (q spaceQuery) SpacesManagers(o *Space, mods ...qm.QueryMod) spacesManagerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`spaces_managers`.`space_id`=?", o.ID),
	)

	query := SpacesManagers(queryMods...)
	queries.SetFrom(query.Query, "`spaces_managers`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`spaces_managers`.*"})
	}

	return query
}

// StagingSpaceStagingSecurityGroupsSpaces retrieves all the staging_security_groups_space's StagingSecurityGroupsSpaces with an executor via staging_space_id column.
func (q spaceQuery) StagingSpaceStagingSecurityGroupsSpaces(o *Space, mods ...qm.QueryMod) stagingSecurityGroupsSpaceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`staging_security_groups_spaces`.`staging_space_id`=?", o.ID),
	)

	query := StagingSecurityGroupsSpaces(queryMods...)
	queries.SetFrom(query.Query, "`staging_security_groups_spaces`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`staging_security_groups_spaces`.*"})
	}

	return query
}

// DefaultSpaceUsers retrieves all the user's Users with an executor via default_space_id column.
func (q spaceQuery) DefaultSpaceUsers(o *Space, mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`users`.`default_space_id`=?", o.ID),
	)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`users`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`users`.*"})
	}

	return query
}

// LoadIsolationSegment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (spaceL) LoadIsolationSegment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error {
	var slice []*Space
	var object *Space

	if singular {
		object = maybeSpace.(*Space)
	} else {
		slice = *maybeSpace.(*[]*Space)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &spaceR{}
		}
		if !queries.IsNil(object.IsolationSegmentGUID) {
			args = append(args, object.IsolationSegmentGUID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &spaceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.IsolationSegmentGUID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.IsolationSegmentGUID) {
				args = append(args, obj.IsolationSegmentGUID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`isolation_segments`),
		qm.WhereIn(`isolation_segments.guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load IsolationSegment")
	}

	var resultSlice []*IsolationSegment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice IsolationSegment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for isolation_segments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for isolation_segments")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IsolationSegment = foreign
		if foreign.R == nil {
			foreign.R = &isolationSegmentR{}
		}
		foreign.R.Spaces = append(foreign.R.Spaces, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IsolationSegmentGUID, foreign.GUID) {
				local.R.IsolationSegment = foreign
				if foreign.R == nil {
					foreign.R = &isolationSegmentR{}
				}
				foreign.R.Spaces = append(foreign.R.Spaces, local)
				break
			}
		}
	}

	return nil
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (spaceL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error {
	var slice []*Space
	var object *Space

	if singular {
		object = maybeSpace.(*Space)
	} else {
		slice = *maybeSpace.(*[]*Space)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &spaceR{}
		}
		args = append(args, object.OrganizationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &spaceR{}
			}

			for _, a := range args {
				if a == obj.OrganizationID {
					continue Outer
				}
			}

			args = append(args, obj.OrganizationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizations`),
		qm.WhereIn(`organizations.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organizations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.Spaces = append(foreign.R.Spaces, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganizationID == foreign.ID {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.Spaces = append(foreign.R.Spaces, local)
				break
			}
		}
	}

	return nil
}

// LoadSpaceQuotaDefinition allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (spaceL) LoadSpaceQuotaDefinition(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error {
	var slice []*Space
	var object *Space

	if singular {
		object = maybeSpace.(*Space)
	} else {
		slice = *maybeSpace.(*[]*Space)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &spaceR{}
		}
		if !queries.IsNil(object.SpaceQuotaDefinitionID) {
			args = append(args, object.SpaceQuotaDefinitionID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &spaceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SpaceQuotaDefinitionID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SpaceQuotaDefinitionID) {
				args = append(args, obj.SpaceQuotaDefinitionID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`space_quota_definitions`),
		qm.WhereIn(`space_quota_definitions.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SpaceQuotaDefinition")
	}

	var resultSlice []*SpaceQuotaDefinition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SpaceQuotaDefinition")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for space_quota_definitions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for space_quota_definitions")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SpaceQuotaDefinition = foreign
		if foreign.R == nil {
			foreign.R = &spaceQuotaDefinitionR{}
		}
		foreign.R.Spaces = append(foreign.R.Spaces, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SpaceQuotaDefinitionID, foreign.ID) {
				local.R.SpaceQuotaDefinition = foreign
				if foreign.R == nil {
					foreign.R = &spaceQuotaDefinitionR{}
				}
				foreign.R.Spaces = append(foreign.R.Spaces, local)
				break
			}
		}
	}

	return nil
}

// LoadApps allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (spaceL) LoadApps(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error {
	var slice []*Space
	var object *Space

	if singular {
		object = maybeSpace.(*Space)
	} else {
		slice = *maybeSpace.(*[]*Space)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &spaceR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &spaceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`apps`),
		qm.WhereIn(`apps.space_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load apps")
	}

	var resultSlice []*App
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice apps")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on apps")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for apps")
	}

	if singular {
		object.R.Apps = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &appR{}
			}
			foreign.R.Space = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.SpaceGUID) {
				local.R.Apps = append(local.R.Apps, foreign)
				if foreign.R == nil {
					foreign.R = &appR{}
				}
				foreign.R.Space = local
				break
			}
		}
	}

	return nil
}

// LoadRoutes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (spaceL) LoadRoutes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error {
	var slice []*Space
	var object *Space

	if singular {
		object = maybeSpace.(*Space)
	} else {
		slice = *maybeSpace.(*[]*Space)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &spaceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &spaceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`routes`),
		qm.WhereIn(`routes.space_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load routes")
	}

	var resultSlice []*Route
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice routes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on routes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for routes")
	}

	if singular {
		object.R.Routes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &routeR{}
			}
			foreign.R.Space = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SpaceID {
				local.R.Routes = append(local.R.Routes, foreign)
				if foreign.R == nil {
					foreign.R = &routeR{}
				}
				foreign.R.Space = local
				break
			}
		}
	}

	return nil
}

// LoadSecurityGroupsSpaces allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (spaceL) LoadSecurityGroupsSpaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error {
	var slice []*Space
	var object *Space

	if singular {
		object = maybeSpace.(*Space)
	} else {
		slice = *maybeSpace.(*[]*Space)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &spaceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &spaceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`security_groups_spaces`),
		qm.WhereIn(`security_groups_spaces.space_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load security_groups_spaces")
	}

	var resultSlice []*SecurityGroupsSpace
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice security_groups_spaces")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on security_groups_spaces")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for security_groups_spaces")
	}

	if singular {
		object.R.SecurityGroupsSpaces = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &securityGroupsSpaceR{}
			}
			foreign.R.Space = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SpaceID {
				local.R.SecurityGroupsSpaces = append(local.R.SecurityGroupsSpaces, foreign)
				if foreign.R == nil {
					foreign.R = &securityGroupsSpaceR{}
				}
				foreign.R.Space = local
				break
			}
		}
	}

	return nil
}

// LoadServiceBrokers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (spaceL) LoadServiceBrokers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error {
	var slice []*Space
	var object *Space

	if singular {
		object = maybeSpace.(*Space)
	} else {
		slice = *maybeSpace.(*[]*Space)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &spaceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &spaceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`service_brokers`),
		qm.WhereIn(`service_brokers.space_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load service_brokers")
	}

	var resultSlice []*ServiceBroker
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice service_brokers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on service_brokers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for service_brokers")
	}

	if singular {
		object.R.ServiceBrokers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &serviceBrokerR{}
			}
			foreign.R.Space = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SpaceID) {
				local.R.ServiceBrokers = append(local.R.ServiceBrokers, foreign)
				if foreign.R == nil {
					foreign.R = &serviceBrokerR{}
				}
				foreign.R.Space = local
				break
			}
		}
	}

	return nil
}

// LoadSharedServiceInstances allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (spaceL) LoadSharedServiceInstances(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error {
	var slice []*Space
	var object *Space

	if singular {
		object = maybeSpace.(*Space)
	} else {
		slice = *maybeSpace.(*[]*Space)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &spaceR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &spaceR{}
			}

			for _, a := range args {
				if a == obj.GUID {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`service_instances`.id, `service_instances`.guid, `service_instances`.created_at, `service_instances`.updated_at, `service_instances`.name, `service_instances`.credentials, `service_instances`.gateway_name, `service_instances`.gateway_data, `service_instances`.space_id, `service_instances`.service_plan_id, `service_instances`.salt, `service_instances`.dashboard_url, `service_instances`.is_gateway_service, `service_instances`.syslog_drain_url, `service_instances`.tags, `service_instances`.route_service_url, `service_instances`.encryption_key_label, `service_instances`.encryption_iterations, `service_instances`.maintenance_info, `a`.`target_space_guid`"),
		qm.From("`service_instances`"),
		qm.InnerJoin("`service_instance_shares` as `a` on `service_instances`.`guid` = `a`.`service_instance_guid`"),
		qm.WhereIn("`a`.`target_space_guid` in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load service_instances")
	}

	var resultSlice []*ServiceInstance

	var localJoinCols []string
	for results.Next() {
		one := new(ServiceInstance)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.GUID, &one.CreatedAt, &one.UpdatedAt, &one.Name, &one.Credentials, &one.GatewayName, &one.GatewayData, &one.SpaceID, &one.ServicePlanID, &one.Salt, &one.DashboardURL, &one.IsGatewayService, &one.SyslogDrainURL, &one.Tags, &one.RouteServiceURL, &one.EncryptionKeyLabel, &one.EncryptionIterations, &one.MaintenanceInfo, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for service_instances")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice service_instances")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on service_instances")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for service_instances")
	}

	if singular {
		object.R.SharedServiceInstances = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &serviceInstanceR{}
			}
			foreign.R.Spaces = append(foreign.R.Spaces, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.GUID == localJoinCol {
				local.R.SharedServiceInstances = append(local.R.SharedServiceInstances, foreign)
				if foreign.R == nil {
					foreign.R = &serviceInstanceR{}
				}
				foreign.R.Spaces = append(foreign.R.Spaces, local)
				break
			}
		}
	}

	return nil
}

// LoadServiceInstances allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (spaceL) LoadServiceInstances(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error {
	var slice []*Space
	var object *Space

	if singular {
		object = maybeSpace.(*Space)
	} else {
		slice = *maybeSpace.(*[]*Space)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &spaceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &spaceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`service_instances`),
		qm.WhereIn(`service_instances.space_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load service_instances")
	}

	var resultSlice []*ServiceInstance
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice service_instances")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on service_instances")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for service_instances")
	}

	if singular {
		object.R.ServiceInstances = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &serviceInstanceR{}
			}
			foreign.R.Space = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SpaceID {
				local.R.ServiceInstances = append(local.R.ServiceInstances, foreign)
				if foreign.R == nil {
					foreign.R = &serviceInstanceR{}
				}
				foreign.R.Space = local
				break
			}
		}
	}

	return nil
}

// LoadResourceSpaceAnnotations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (spaceL) LoadResourceSpaceAnnotations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error {
	var slice []*Space
	var object *Space

	if singular {
		object = maybeSpace.(*Space)
	} else {
		slice = *maybeSpace.(*[]*Space)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &spaceR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &spaceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`space_annotations`),
		qm.WhereIn(`space_annotations.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load space_annotations")
	}

	var resultSlice []*SpaceAnnotation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice space_annotations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on space_annotations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for space_annotations")
	}

	if singular {
		object.R.ResourceSpaceAnnotations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &spaceAnnotationR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceSpaceAnnotations = append(local.R.ResourceSpaceAnnotations, foreign)
				if foreign.R == nil {
					foreign.R = &spaceAnnotationR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// LoadResourceSpaceLabels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (spaceL) LoadResourceSpaceLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error {
	var slice []*Space
	var object *Space

	if singular {
		object = maybeSpace.(*Space)
	} else {
		slice = *maybeSpace.(*[]*Space)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &spaceR{}
		}
		args = append(args, object.GUID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &spaceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GUID) {
					continue Outer
				}
			}

			args = append(args, obj.GUID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`space_labels`),
		qm.WhereIn(`space_labels.resource_guid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load space_labels")
	}

	var resultSlice []*SpaceLabel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice space_labels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on space_labels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for space_labels")
	}

	if singular {
		object.R.ResourceSpaceLabels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &spaceLabelR{}
			}
			foreign.R.Resource = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GUID, foreign.ResourceGUID) {
				local.R.ResourceSpaceLabels = append(local.R.ResourceSpaceLabels, foreign)
				if foreign.R == nil {
					foreign.R = &spaceLabelR{}
				}
				foreign.R.Resource = local
				break
			}
		}
	}

	return nil
}

// LoadSpacesApplicationSupporters allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (spaceL) LoadSpacesApplicationSupporters(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error {
	var slice []*Space
	var object *Space

	if singular {
		object = maybeSpace.(*Space)
	} else {
		slice = *maybeSpace.(*[]*Space)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &spaceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &spaceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`spaces_application_supporters`),
		qm.WhereIn(`spaces_application_supporters.space_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load spaces_application_supporters")
	}

	var resultSlice []*SpacesApplicationSupporter
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice spaces_application_supporters")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on spaces_application_supporters")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for spaces_application_supporters")
	}

	if singular {
		object.R.SpacesApplicationSupporters = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &spacesApplicationSupporterR{}
			}
			foreign.R.Space = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SpaceID {
				local.R.SpacesApplicationSupporters = append(local.R.SpacesApplicationSupporters, foreign)
				if foreign.R == nil {
					foreign.R = &spacesApplicationSupporterR{}
				}
				foreign.R.Space = local
				break
			}
		}
	}

	return nil
}

// LoadSpacesAuditors allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (spaceL) LoadSpacesAuditors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error {
	var slice []*Space
	var object *Space

	if singular {
		object = maybeSpace.(*Space)
	} else {
		slice = *maybeSpace.(*[]*Space)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &spaceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &spaceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`spaces_auditors`),
		qm.WhereIn(`spaces_auditors.space_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load spaces_auditors")
	}

	var resultSlice []*SpacesAuditor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice spaces_auditors")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on spaces_auditors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for spaces_auditors")
	}

	if singular {
		object.R.SpacesAuditors = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &spacesAuditorR{}
			}
			foreign.R.Space = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SpaceID {
				local.R.SpacesAuditors = append(local.R.SpacesAuditors, foreign)
				if foreign.R == nil {
					foreign.R = &spacesAuditorR{}
				}
				foreign.R.Space = local
				break
			}
		}
	}

	return nil
}

// LoadSpacesDevelopers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (spaceL) LoadSpacesDevelopers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error {
	var slice []*Space
	var object *Space

	if singular {
		object = maybeSpace.(*Space)
	} else {
		slice = *maybeSpace.(*[]*Space)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &spaceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &spaceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`spaces_developers`),
		qm.WhereIn(`spaces_developers.space_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load spaces_developers")
	}

	var resultSlice []*SpacesDeveloper
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice spaces_developers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on spaces_developers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for spaces_developers")
	}

	if singular {
		object.R.SpacesDevelopers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &spacesDeveloperR{}
			}
			foreign.R.Space = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SpaceID {
				local.R.SpacesDevelopers = append(local.R.SpacesDevelopers, foreign)
				if foreign.R == nil {
					foreign.R = &spacesDeveloperR{}
				}
				foreign.R.Space = local
				break
			}
		}
	}

	return nil
}

// LoadSpacesManagers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (spaceL) LoadSpacesManagers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error {
	var slice []*Space
	var object *Space

	if singular {
		object = maybeSpace.(*Space)
	} else {
		slice = *maybeSpace.(*[]*Space)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &spaceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &spaceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`spaces_managers`),
		qm.WhereIn(`spaces_managers.space_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load spaces_managers")
	}

	var resultSlice []*SpacesManager
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice spaces_managers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on spaces_managers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for spaces_managers")
	}

	if singular {
		object.R.SpacesManagers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &spacesManagerR{}
			}
			foreign.R.Space = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SpaceID {
				local.R.SpacesManagers = append(local.R.SpacesManagers, foreign)
				if foreign.R == nil {
					foreign.R = &spacesManagerR{}
				}
				foreign.R.Space = local
				break
			}
		}
	}

	return nil
}

// LoadStagingSpaceStagingSecurityGroupsSpaces allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (spaceL) LoadStagingSpaceStagingSecurityGroupsSpaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error {
	var slice []*Space
	var object *Space

	if singular {
		object = maybeSpace.(*Space)
	} else {
		slice = *maybeSpace.(*[]*Space)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &spaceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &spaceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`staging_security_groups_spaces`),
		qm.WhereIn(`staging_security_groups_spaces.staging_space_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load staging_security_groups_spaces")
	}

	var resultSlice []*StagingSecurityGroupsSpace
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice staging_security_groups_spaces")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on staging_security_groups_spaces")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for staging_security_groups_spaces")
	}

	if singular {
		object.R.StagingSpaceStagingSecurityGroupsSpaces = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &stagingSecurityGroupsSpaceR{}
			}
			foreign.R.StagingSpace = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.StagingSpaceID {
				local.R.StagingSpaceStagingSecurityGroupsSpaces = append(local.R.StagingSpaceStagingSecurityGroupsSpaces, foreign)
				if foreign.R == nil {
					foreign.R = &stagingSecurityGroupsSpaceR{}
				}
				foreign.R.StagingSpace = local
				break
			}
		}
	}

	return nil
}

// LoadDefaultSpaceUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (spaceL) LoadDefaultSpaceUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpace interface{}, mods queries.Applicator) error {
	var slice []*Space
	var object *Space

	if singular {
		object = maybeSpace.(*Space)
	} else {
		slice = *maybeSpace.(*[]*Space)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &spaceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &spaceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.default_space_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if singular {
		object.R.DefaultSpaceUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.DefaultSpace = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DefaultSpaceID) {
				local.R.DefaultSpaceUsers = append(local.R.DefaultSpaceUsers, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.DefaultSpace = local
				break
			}
		}
	}

	return nil
}

// SetIsolationSegment of the space to the related item.
// Sets o.R.IsolationSegment to related.
// Adds o to related.R.Spaces.
func (q spaceQuery) SetIsolationSegment(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related *IsolationSegment) error {
	var err error
	if insert {
		if err = IsolationSegments().Insert(related, ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `spaces` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"isolation_segment_guid"}),
		strmangle.WhereClause("`", "`", 0, spacePrimaryKeyColumns),
	)
	values := []interface{}{related.GUID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IsolationSegmentGUID, related.GUID)
	if o.R == nil {
		o.R = &spaceR{
			IsolationSegment: related,
		}
	} else {
		o.R.IsolationSegment = related
	}

	if related.R == nil {
		related.R = &isolationSegmentR{
			Spaces: SpaceSlice{o},
		}
	} else {
		related.R.Spaces = append(related.R.Spaces, o)
	}

	return nil
}

// RemoveIsolationSegment relationship.
// Sets o.R.IsolationSegment to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (q spaceQuery) RemoveIsolationSegment(o *Space, ctx context.Context, exec boil.ContextExecutor, related *IsolationSegment) error {
	var err error

	queries.SetScanner(&o.IsolationSegmentGUID, nil)
	if _, err = q.Update(o, ctx, exec, boil.Whitelist("isolation_segment_guid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IsolationSegment = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Spaces {
		if queries.Equal(o.IsolationSegmentGUID, ri.IsolationSegmentGUID) {
			continue
		}

		ln := len(related.R.Spaces)
		if ln > 1 && i < ln-1 {
			related.R.Spaces[i] = related.R.Spaces[ln-1]
		}
		related.R.Spaces = related.R.Spaces[:ln-1]
		break
	}
	return nil
}

// SetOrganization of the space to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.Spaces.
func (q spaceQuery) SetOrganization(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = Organizations().Insert(related, ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `spaces` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"organization_id"}),
		strmangle.WhereClause("`", "`", 0, spacePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganizationID = related.ID
	if o.R == nil {
		o.R = &spaceR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			Spaces: SpaceSlice{o},
		}
	} else {
		related.R.Spaces = append(related.R.Spaces, o)
	}

	return nil
}

// SetSpaceQuotaDefinition of the space to the related item.
// Sets o.R.SpaceQuotaDefinition to related.
// Adds o to related.R.Spaces.
func (q spaceQuery) SetSpaceQuotaDefinition(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related *SpaceQuotaDefinition) error {
	var err error
	if insert {
		if err = SpaceQuotaDefinitions().Insert(related, ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `spaces` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"space_quota_definition_id"}),
		strmangle.WhereClause("`", "`", 0, spacePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SpaceQuotaDefinitionID, related.ID)
	if o.R == nil {
		o.R = &spaceR{
			SpaceQuotaDefinition: related,
		}
	} else {
		o.R.SpaceQuotaDefinition = related
	}

	if related.R == nil {
		related.R = &spaceQuotaDefinitionR{
			Spaces: SpaceSlice{o},
		}
	} else {
		related.R.Spaces = append(related.R.Spaces, o)
	}

	return nil
}

// RemoveSpaceQuotaDefinition relationship.
// Sets o.R.SpaceQuotaDefinition to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (q spaceQuery) RemoveSpaceQuotaDefinition(o *Space, ctx context.Context, exec boil.ContextExecutor, related *SpaceQuotaDefinition) error {
	var err error

	queries.SetScanner(&o.SpaceQuotaDefinitionID, nil)
	if _, err = q.Update(o, ctx, exec, boil.Whitelist("space_quota_definition_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SpaceQuotaDefinition = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Spaces {
		if queries.Equal(o.SpaceQuotaDefinitionID, ri.SpaceQuotaDefinitionID) {
			continue
		}

		ln := len(related.R.Spaces)
		if ln > 1 && i < ln-1 {
			related.R.Spaces[i] = related.R.Spaces[ln-1]
		}
		related.R.Spaces = related.R.Spaces[:ln-1]
		break
	}
	return nil
}

// AddApps adds the given related objects to the existing relationships
// of the space, optionally inserting them as new records.
// Appends related to o.R.Apps.
// Sets related.R.Space appropriately.
func (q spaceQuery) AddApps(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*App) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SpaceGUID, o.GUID)
			if err = Apps().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `apps` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"space_guid"}),
				strmangle.WhereClause("`", "`", 0, appPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SpaceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &spaceR{
			Apps: related,
		}
	} else {
		o.R.Apps = append(o.R.Apps, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &appR{
				Space: o,
			}
		} else {
			rel.R.Space = o
		}
	}
	return nil
}

// SetApps removes all previously related items of the
// space replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Space's Apps accordingly.
// Replaces o.R.Apps with related.
// Sets related.R.Space's Apps accordingly.
func (q spaceQuery) SetApps(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*App) error {
	query := "update `apps` set `space_guid` = null where `space_guid` = ?"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Apps {
			queries.SetScanner(&rel.SpaceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Space = nil
		}

		o.R.Apps = nil
	}
	return q.AddApps(o, ctx, exec, insert, related...)
}

// RemoveApps relationships from objects passed in.
// Removes related items from R.Apps (uses pointer comparison, removal does not keep order)
// Sets related.R.Space.
func (q spaceQuery) RemoveApps(o *Space, ctx context.Context, exec boil.ContextExecutor, related ...*App) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SpaceGUID, nil)
		if rel.R != nil {
			rel.R.Space = nil
		}
		if _, err = Apps().Update(rel, ctx, exec, boil.Whitelist("space_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Apps {
			if rel != ri {
				continue
			}

			ln := len(o.R.Apps)
			if ln > 1 && i < ln-1 {
				o.R.Apps[i] = o.R.Apps[ln-1]
			}
			o.R.Apps = o.R.Apps[:ln-1]
			break
		}
	}

	return nil
}

// AddRoutes adds the given related objects to the existing relationships
// of the space, optionally inserting them as new records.
// Appends related to o.R.Routes.
// Sets related.R.Space appropriately.
func (q spaceQuery) AddRoutes(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Route) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SpaceID = o.ID
			if err = Routes().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `routes` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"space_id"}),
				strmangle.WhereClause("`", "`", 0, routePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SpaceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &spaceR{
			Routes: related,
		}
	} else {
		o.R.Routes = append(o.R.Routes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &routeR{
				Space: o,
			}
		} else {
			rel.R.Space = o
		}
	}
	return nil
}

// AddSecurityGroupsSpaces adds the given related objects to the existing relationships
// of the space, optionally inserting them as new records.
// Appends related to o.R.SecurityGroupsSpaces.
// Sets related.R.Space appropriately.
func (q spaceQuery) AddSecurityGroupsSpaces(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SecurityGroupsSpace) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SpaceID = o.ID
			if err = SecurityGroupsSpaces().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `security_groups_spaces` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"space_id"}),
				strmangle.WhereClause("`", "`", 0, securityGroupsSpacePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.SecurityGroupsSpacesPK}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SpaceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &spaceR{
			SecurityGroupsSpaces: related,
		}
	} else {
		o.R.SecurityGroupsSpaces = append(o.R.SecurityGroupsSpaces, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &securityGroupsSpaceR{
				Space: o,
			}
		} else {
			rel.R.Space = o
		}
	}
	return nil
}

// AddServiceBrokers adds the given related objects to the existing relationships
// of the space, optionally inserting them as new records.
// Appends related to o.R.ServiceBrokers.
// Sets related.R.Space appropriately.
func (q spaceQuery) AddServiceBrokers(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBroker) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SpaceID, o.ID)
			if err = ServiceBrokers().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `service_brokers` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"space_id"}),
				strmangle.WhereClause("`", "`", 0, serviceBrokerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SpaceID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &spaceR{
			ServiceBrokers: related,
		}
	} else {
		o.R.ServiceBrokers = append(o.R.ServiceBrokers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &serviceBrokerR{
				Space: o,
			}
		} else {
			rel.R.Space = o
		}
	}
	return nil
}

// SetServiceBrokers removes all previously related items of the
// space replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Space's ServiceBrokers accordingly.
// Replaces o.R.ServiceBrokers with related.
// Sets related.R.Space's ServiceBrokers accordingly.
func (q spaceQuery) SetServiceBrokers(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceBroker) error {
	query := "update `service_brokers` set `space_id` = null where `space_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ServiceBrokers {
			queries.SetScanner(&rel.SpaceID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Space = nil
		}

		o.R.ServiceBrokers = nil
	}
	return q.AddServiceBrokers(o, ctx, exec, insert, related...)
}

// RemoveServiceBrokers relationships from objects passed in.
// Removes related items from R.ServiceBrokers (uses pointer comparison, removal does not keep order)
// Sets related.R.Space.
func (q spaceQuery) RemoveServiceBrokers(o *Space, ctx context.Context, exec boil.ContextExecutor, related ...*ServiceBroker) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SpaceID, nil)
		if rel.R != nil {
			rel.R.Space = nil
		}
		if _, err = ServiceBrokers().Update(rel, ctx, exec, boil.Whitelist("space_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ServiceBrokers {
			if rel != ri {
				continue
			}

			ln := len(o.R.ServiceBrokers)
			if ln > 1 && i < ln-1 {
				o.R.ServiceBrokers[i] = o.R.ServiceBrokers[ln-1]
			}
			o.R.ServiceBrokers = o.R.ServiceBrokers[:ln-1]
			break
		}
	}

	return nil
}

// AddSharedServiceInstances adds the given related objects to the existing relationships
// of the space, optionally inserting them as new records.
// Appends related to o.R.SharedServiceInstances.
// Sets related.R.Spaces appropriately.
func (q spaceQuery) AddSharedServiceInstances(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceInstance) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = ServiceInstances().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `service_instance_shares` (`target_space_guid`, `service_instance_guid`) values (?, ?)"
		values := []interface{}{o.GUID, rel.GUID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &spaceR{
			SharedServiceInstances: related,
		}
	} else {
		o.R.SharedServiceInstances = append(o.R.SharedServiceInstances, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &serviceInstanceR{
				Spaces: SpaceSlice{o},
			}
		} else {
			rel.R.Spaces = append(rel.R.Spaces, o)
		}
	}
	return nil
}

// SetSharedServiceInstances removes all previously related items of the
// space replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Spaces's SharedServiceInstances accordingly.
// Replaces o.R.SharedServiceInstances with related.
// Sets related.R.Spaces's SharedServiceInstances accordingly.
func (q spaceQuery) SetSharedServiceInstances(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceInstance) error {
	query := "delete from `service_instance_shares` where `target_space_guid` = ?"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeSharedServiceInstancesFromSpacesSlice(o, related)
	if o.R != nil {
		o.R.SharedServiceInstances = nil
	}
	return q.AddSharedServiceInstances(o, ctx, exec, insert, related...)
}

// RemoveSharedServiceInstances relationships from objects passed in.
// Removes related items from R.SharedServiceInstances (uses pointer comparison, removal does not keep order)
// Sets related.R.Spaces.
func (q spaceQuery) RemoveSharedServiceInstances(o *Space, ctx context.Context, exec boil.ContextExecutor, related ...*ServiceInstance) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `service_instance_shares` where `target_space_guid` = ? and `service_instance_guid` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.GUID}
	for _, rel := range related {
		values = append(values, rel.GUID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeSharedServiceInstancesFromSpacesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SharedServiceInstances {
			if rel != ri {
				continue
			}

			ln := len(o.R.SharedServiceInstances)
			if ln > 1 && i < ln-1 {
				o.R.SharedServiceInstances[i] = o.R.SharedServiceInstances[ln-1]
			}
			o.R.SharedServiceInstances = o.R.SharedServiceInstances[:ln-1]
			break
		}
	}

	return nil
}

func removeSharedServiceInstancesFromSpacesSlice(o *Space, related []*ServiceInstance) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Spaces {
			if o.GUID != ri.GUID {
				continue
			}

			ln := len(rel.R.Spaces)
			if ln > 1 && i < ln-1 {
				rel.R.Spaces[i] = rel.R.Spaces[ln-1]
			}
			rel.R.Spaces = rel.R.Spaces[:ln-1]
			break
		}
	}
}

// AddServiceInstances adds the given related objects to the existing relationships
// of the space, optionally inserting them as new records.
// Appends related to o.R.ServiceInstances.
// Sets related.R.Space appropriately.
func (q spaceQuery) AddServiceInstances(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServiceInstance) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SpaceID = o.ID
			if err = ServiceInstances().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `service_instances` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"space_id"}),
				strmangle.WhereClause("`", "`", 0, serviceInstancePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SpaceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &spaceR{
			ServiceInstances: related,
		}
	} else {
		o.R.ServiceInstances = append(o.R.ServiceInstances, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &serviceInstanceR{
				Space: o,
			}
		} else {
			rel.R.Space = o
		}
	}
	return nil
}

// AddResourceSpaceAnnotations adds the given related objects to the existing relationships
// of the space, optionally inserting them as new records.
// Appends related to o.R.ResourceSpaceAnnotations.
// Sets related.R.Resource appropriately.
func (q spaceQuery) AddResourceSpaceAnnotations(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpaceAnnotation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = SpaceAnnotations().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `space_annotations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"resource_guid"}),
				strmangle.WhereClause("`", "`", 0, spaceAnnotationPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &spaceR{
			ResourceSpaceAnnotations: related,
		}
	} else {
		o.R.ResourceSpaceAnnotations = append(o.R.ResourceSpaceAnnotations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &spaceAnnotationR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceSpaceAnnotations removes all previously related items of the
// space replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceSpaceAnnotations accordingly.
// Replaces o.R.ResourceSpaceAnnotations with related.
// Sets related.R.Resource's ResourceSpaceAnnotations accordingly.
func (q spaceQuery) SetResourceSpaceAnnotations(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpaceAnnotation) error {
	query := "update `space_annotations` set `resource_guid` = null where `resource_guid` = ?"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceSpaceAnnotations {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceSpaceAnnotations = nil
	}
	return q.AddResourceSpaceAnnotations(o, ctx, exec, insert, related...)
}

// RemoveResourceSpaceAnnotations relationships from objects passed in.
// Removes related items from R.ResourceSpaceAnnotations (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (q spaceQuery) RemoveResourceSpaceAnnotations(o *Space, ctx context.Context, exec boil.ContextExecutor, related ...*SpaceAnnotation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = SpaceAnnotations().Update(rel, ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceSpaceAnnotations {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceSpaceAnnotations)
			if ln > 1 && i < ln-1 {
				o.R.ResourceSpaceAnnotations[i] = o.R.ResourceSpaceAnnotations[ln-1]
			}
			o.R.ResourceSpaceAnnotations = o.R.ResourceSpaceAnnotations[:ln-1]
			break
		}
	}

	return nil
}

// AddResourceSpaceLabels adds the given related objects to the existing relationships
// of the space, optionally inserting them as new records.
// Appends related to o.R.ResourceSpaceLabels.
// Sets related.R.Resource appropriately.
func (q spaceQuery) AddResourceSpaceLabels(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpaceLabel) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceGUID, o.GUID)
			if err = SpaceLabels().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `space_labels` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"resource_guid"}),
				strmangle.WhereClause("`", "`", 0, spaceLabelPrimaryKeyColumns),
			)
			values := []interface{}{o.GUID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceGUID, o.GUID)
		}
	}

	if o.R == nil {
		o.R = &spaceR{
			ResourceSpaceLabels: related,
		}
	} else {
		o.R.ResourceSpaceLabels = append(o.R.ResourceSpaceLabels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &spaceLabelR{
				Resource: o,
			}
		} else {
			rel.R.Resource = o
		}
	}
	return nil
}

// SetResourceSpaceLabels removes all previously related items of the
// space replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Resource's ResourceSpaceLabels accordingly.
// Replaces o.R.ResourceSpaceLabels with related.
// Sets related.R.Resource's ResourceSpaceLabels accordingly.
func (q spaceQuery) SetResourceSpaceLabels(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpaceLabel) error {
	query := "update `space_labels` set `resource_guid` = null where `resource_guid` = ?"
	values := []interface{}{o.GUID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceSpaceLabels {
			queries.SetScanner(&rel.ResourceGUID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Resource = nil
		}

		o.R.ResourceSpaceLabels = nil
	}
	return q.AddResourceSpaceLabels(o, ctx, exec, insert, related...)
}

// RemoveResourceSpaceLabels relationships from objects passed in.
// Removes related items from R.ResourceSpaceLabels (uses pointer comparison, removal does not keep order)
// Sets related.R.Resource.
func (q spaceQuery) RemoveResourceSpaceLabels(o *Space, ctx context.Context, exec boil.ContextExecutor, related ...*SpaceLabel) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceGUID, nil)
		if rel.R != nil {
			rel.R.Resource = nil
		}
		if _, err = SpaceLabels().Update(rel, ctx, exec, boil.Whitelist("resource_guid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceSpaceLabels {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceSpaceLabels)
			if ln > 1 && i < ln-1 {
				o.R.ResourceSpaceLabels[i] = o.R.ResourceSpaceLabels[ln-1]
			}
			o.R.ResourceSpaceLabels = o.R.ResourceSpaceLabels[:ln-1]
			break
		}
	}

	return nil
}

// AddSpacesApplicationSupporters adds the given related objects to the existing relationships
// of the space, optionally inserting them as new records.
// Appends related to o.R.SpacesApplicationSupporters.
// Sets related.R.Space appropriately.
func (q spaceQuery) AddSpacesApplicationSupporters(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpacesApplicationSupporter) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SpaceID = o.ID
			if err = SpacesApplicationSupporters().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `spaces_application_supporters` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"space_id"}),
				strmangle.WhereClause("`", "`", 0, spacesApplicationSupporterPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.SpacesApplicationSupportersPK}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SpaceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &spaceR{
			SpacesApplicationSupporters: related,
		}
	} else {
		o.R.SpacesApplicationSupporters = append(o.R.SpacesApplicationSupporters, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &spacesApplicationSupporterR{
				Space: o,
			}
		} else {
			rel.R.Space = o
		}
	}
	return nil
}

// AddSpacesAuditors adds the given related objects to the existing relationships
// of the space, optionally inserting them as new records.
// Appends related to o.R.SpacesAuditors.
// Sets related.R.Space appropriately.
func (q spaceQuery) AddSpacesAuditors(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpacesAuditor) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SpaceID = o.ID
			if err = SpacesAuditors().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `spaces_auditors` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"space_id"}),
				strmangle.WhereClause("`", "`", 0, spacesAuditorPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.SpacesAuditorsPK}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SpaceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &spaceR{
			SpacesAuditors: related,
		}
	} else {
		o.R.SpacesAuditors = append(o.R.SpacesAuditors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &spacesAuditorR{
				Space: o,
			}
		} else {
			rel.R.Space = o
		}
	}
	return nil
}

// AddSpacesDevelopers adds the given related objects to the existing relationships
// of the space, optionally inserting them as new records.
// Appends related to o.R.SpacesDevelopers.
// Sets related.R.Space appropriately.
func (q spaceQuery) AddSpacesDevelopers(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpacesDeveloper) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SpaceID = o.ID
			if err = SpacesDevelopers().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `spaces_developers` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"space_id"}),
				strmangle.WhereClause("`", "`", 0, spacesDeveloperPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.SpacesDevelopersPK}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SpaceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &spaceR{
			SpacesDevelopers: related,
		}
	} else {
		o.R.SpacesDevelopers = append(o.R.SpacesDevelopers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &spacesDeveloperR{
				Space: o,
			}
		} else {
			rel.R.Space = o
		}
	}
	return nil
}

// AddSpacesManagers adds the given related objects to the existing relationships
// of the space, optionally inserting them as new records.
// Appends related to o.R.SpacesManagers.
// Sets related.R.Space appropriately.
func (q spaceQuery) AddSpacesManagers(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SpacesManager) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SpaceID = o.ID
			if err = SpacesManagers().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `spaces_managers` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"space_id"}),
				strmangle.WhereClause("`", "`", 0, spacesManagerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.SpacesManagersPK}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SpaceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &spaceR{
			SpacesManagers: related,
		}
	} else {
		o.R.SpacesManagers = append(o.R.SpacesManagers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &spacesManagerR{
				Space: o,
			}
		} else {
			rel.R.Space = o
		}
	}
	return nil
}

// AddStagingSpaceStagingSecurityGroupsSpaces adds the given related objects to the existing relationships
// of the space, optionally inserting them as new records.
// Appends related to o.R.StagingSpaceStagingSecurityGroupsSpaces.
// Sets related.R.StagingSpace appropriately.
func (q spaceQuery) AddStagingSpaceStagingSecurityGroupsSpaces(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StagingSecurityGroupsSpace) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StagingSpaceID = o.ID
			if err = StagingSecurityGroupsSpaces().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `staging_security_groups_spaces` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"staging_space_id"}),
				strmangle.WhereClause("`", "`", 0, stagingSecurityGroupsSpacePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.StagingSecurityGroupsSpacesPK}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StagingSpaceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &spaceR{
			StagingSpaceStagingSecurityGroupsSpaces: related,
		}
	} else {
		o.R.StagingSpaceStagingSecurityGroupsSpaces = append(o.R.StagingSpaceStagingSecurityGroupsSpaces, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &stagingSecurityGroupsSpaceR{
				StagingSpace: o,
			}
		} else {
			rel.R.StagingSpace = o
		}
	}
	return nil
}

// AddDefaultSpaceUsers adds the given related objects to the existing relationships
// of the space, optionally inserting them as new records.
// Appends related to o.R.DefaultSpaceUsers.
// Sets related.R.DefaultSpace appropriately.
func (q spaceQuery) AddDefaultSpaceUsers(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DefaultSpaceID, o.ID)
			if err = Users().Insert(rel, ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `users` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"default_space_id"}),
				strmangle.WhereClause("`", "`", 0, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DefaultSpaceID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &spaceR{
			DefaultSpaceUsers: related,
		}
	} else {
		o.R.DefaultSpaceUsers = append(o.R.DefaultSpaceUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				DefaultSpace: o,
			}
		} else {
			rel.R.DefaultSpace = o
		}
	}
	return nil
}

// SetDefaultSpaceUsers removes all previously related items of the
// space replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DefaultSpace's DefaultSpaceUsers accordingly.
// Replaces o.R.DefaultSpaceUsers with related.
// Sets related.R.DefaultSpace's DefaultSpaceUsers accordingly.
func (q spaceQuery) SetDefaultSpaceUsers(o *Space, ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "update `users` set `default_space_id` = null where `default_space_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DefaultSpaceUsers {
			queries.SetScanner(&rel.DefaultSpaceID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.DefaultSpace = nil
		}

		o.R.DefaultSpaceUsers = nil
	}
	return q.AddDefaultSpaceUsers(o, ctx, exec, insert, related...)
}

// RemoveDefaultSpaceUsers relationships from objects passed in.
// Removes related items from R.DefaultSpaceUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.DefaultSpace.
func (q spaceQuery) RemoveDefaultSpaceUsers(o *Space, ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DefaultSpaceID, nil)
		if rel.R != nil {
			rel.R.DefaultSpace = nil
		}
		if _, err = Users().Update(rel, ctx, exec, boil.Whitelist("default_space_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DefaultSpaceUsers {
			if rel != ri {
				continue
			}

			ln := len(o.R.DefaultSpaceUsers)
			if ln > 1 && i < ln-1 {
				o.R.DefaultSpaceUsers[i] = o.R.DefaultSpaceUsers[ln-1]
			}
			o.R.DefaultSpaceUsers = o.R.DefaultSpaceUsers[:ln-1]
			break
		}
	}

	return nil
}

// Spaces retrieves all the records using an executor.
func Spaces(mods ...qm.QueryMod) spaceQuery {
	mods = append(mods, qm.From("`spaces`"))
	return spaceQuery{NewQuery(mods...)}
}

type SpaceFinder interface {
	FindSpace(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Space, error)
}

// FindSpace retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSpace(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Space, error) {
	spaceObj := &Space{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `spaces` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, spaceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from spaces")
	}

	return spaceObj, nil
}

type SpaceInserter interface {
	Insert(o *Space, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (q spaceQuery) Insert(o *Space, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no spaces provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(spaceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	spaceInsertCacheMut.RLock()
	cache, cached := spaceInsertCache[key]
	spaceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			spaceAllColumns,
			spaceColumnsWithDefault,
			spaceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(spaceType, spaceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(spaceType, spaceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `spaces` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `spaces` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `spaces` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, spacePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into spaces")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == spaceMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for spaces")
	}

CacheNoHooks:
	if !cached {
		spaceInsertCacheMut.Lock()
		spaceInsertCache[key] = cache
		spaceInsertCacheMut.Unlock()
	}

	return nil
}

type SpaceUpdater interface {
	Update(o *Space, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)
	UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
	UpdateAllSlice(o SpaceSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)
}

// Update uses an executor to update the Space.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (q spaceQuery) Update(o *Space, ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	spaceUpdateCacheMut.RLock()
	cache, cached := spaceUpdateCache[key]
	spaceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			spaceAllColumns,
			spacePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update spaces, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `spaces` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, spacePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(spaceType, spaceMapping, append(wl, spacePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update spaces row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for spaces")
	}

	if !cached {
		spaceUpdateCacheMut.Lock()
		spaceUpdateCache[key] = cache
		spaceUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q spaceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for spaces")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for spaces")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (q spaceQuery) UpdateAllSlice(o SpaceSlice, ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), spacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `spaces` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, spacePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in space slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all space")
	}
	return rowsAff, nil
}

type SpaceDeleter interface {
	Delete(o *Space, ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)
	DeleteAllSlice(o SpaceSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error)
}

// Delete deletes a single Space record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (q spaceQuery) Delete(o *Space, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Space provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), spacePrimaryKeyMapping)
	sql := "DELETE FROM `spaces` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from spaces")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for spaces")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q spaceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no spaceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from spaces")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for spaces")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (q spaceQuery) DeleteAllSlice(o SpaceSlice, ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), spacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `spaces` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, spacePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from space slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for spaces")
	}

	return rowsAff, nil
}

type SpaceReloader interface {
	Reload(o *Space, ctx context.Context, exec boil.ContextExecutor) error
	ReloadAll(o *SpaceSlice, ctx context.Context, exec boil.ContextExecutor) error
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (q spaceQuery) Reload(o *Space, ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSpace(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (q spaceQuery) ReloadAll(o *SpaceSlice, ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SpaceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), spacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `spaces`.* FROM `spaces` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, spacePrimaryKeyColumns, len(*o))

	query := queries.Raw(sql, args...)

	err := query.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SpaceSlice")
	}

	*o = slice

	return nil
}

// SpaceExists checks if the Space row exists.
func SpaceExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `spaces` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if spaces exists")
	}

	return exists, nil
}
