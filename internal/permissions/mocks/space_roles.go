// Code generated by MockGen. DO NOT EDIT.
// Source: space_roles.go

// Package mock_permissions is a generated GoMock package.
package mock_permissions

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	qm "github.com/volatiletech/sqlboiler/v4/queries/qm"
)

// MockAllowedSpaceIDs is a mock of AllowedSpaceIDs interface.
type MockAllowedSpaceIDs struct {
	ctrl     *gomock.Controller
	recorder *MockAllowedSpaceIDsMockRecorder
}

// MockAllowedSpaceIDsMockRecorder is the mock recorder for MockAllowedSpaceIDs.
type MockAllowedSpaceIDsMockRecorder struct {
	mock *MockAllowedSpaceIDs
}

// NewMockAllowedSpaceIDs creates a new mock instance.
func NewMockAllowedSpaceIDs(ctrl *gomock.Controller) *MockAllowedSpaceIDs {
	mock := &MockAllowedSpaceIDs{ctrl: ctrl}
	mock.recorder = &MockAllowedSpaceIDsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAllowedSpaceIDs) EXPECT() *MockAllowedSpaceIDsMockRecorder {
	return m.recorder
}

// Contains mocks base method.
func (m *MockAllowedSpaceIDs) Contains(column string) qm.QueryMod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", column)
	ret0, _ := ret[0].(qm.QueryMod)
	return ret0
}

// Contains indicates an expected call of Contains.
func (mr *MockAllowedSpaceIDsMockRecorder) Contains(column interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockAllowedSpaceIDs)(nil).Contains), column)
}

// With mocks base method.
func (m *MockAllowedSpaceIDs) With() []qm.QueryMod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "With")
	ret0, _ := ret[0].([]qm.QueryMod)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockAllowedSpaceIDsMockRecorder) With() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockAllowedSpaceIDs)(nil).With))
}
